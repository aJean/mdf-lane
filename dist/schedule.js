(function () {
	'use strict';

	var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

	function createCommonjsModule(fn, module) {
		return module = { exports: {} }, fn(module, module.exports), module.exports;
	}

	var check = function (it) {
	  return it && it.Math == Math && it;
	};

	// https://github.com/zloirock/core-js/issues/86#issuecomment-115759028
	var global_1 =
	  // eslint-disable-next-line no-undef
	  check(typeof globalThis == 'object' && globalThis) ||
	  check(typeof window == 'object' && window) ||
	  check(typeof self == 'object' && self) ||
	  check(typeof commonjsGlobal == 'object' && commonjsGlobal) ||
	  // eslint-disable-next-line no-new-func
	  Function('return this')();

	var fails = function (exec) {
	  try {
	    return !!exec();
	  } catch (error) {
	    return true;
	  }
	};

	// Thank's IE8 for his funny defineProperty
	var descriptors = !fails(function () {
	  return Object.defineProperty({}, 1, { get: function () { return 7; } })[1] != 7;
	});

	var nativePropertyIsEnumerable = {}.propertyIsEnumerable;
	var getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;

	// Nashorn ~ JDK8 bug
	var NASHORN_BUG = getOwnPropertyDescriptor && !nativePropertyIsEnumerable.call({ 1: 2 }, 1);

	// `Object.prototype.propertyIsEnumerable` method implementation
	// https://tc39.github.io/ecma262/#sec-object.prototype.propertyisenumerable
	var f = NASHORN_BUG ? function propertyIsEnumerable(V) {
	  var descriptor = getOwnPropertyDescriptor(this, V);
	  return !!descriptor && descriptor.enumerable;
	} : nativePropertyIsEnumerable;

	var objectPropertyIsEnumerable = {
		f: f
	};

	var createPropertyDescriptor = function (bitmap, value) {
	  return {
	    enumerable: !(bitmap & 1),
	    configurable: !(bitmap & 2),
	    writable: !(bitmap & 4),
	    value: value
	  };
	};

	var toString = {}.toString;

	var classofRaw = function (it) {
	  return toString.call(it).slice(8, -1);
	};

	var split = ''.split;

	// fallback for non-array-like ES3 and non-enumerable old V8 strings
	var indexedObject = fails(function () {
	  // throws an error in rhino, see https://github.com/mozilla/rhino/issues/346
	  // eslint-disable-next-line no-prototype-builtins
	  return !Object('z').propertyIsEnumerable(0);
	}) ? function (it) {
	  return classofRaw(it) == 'String' ? split.call(it, '') : Object(it);
	} : Object;

	// `RequireObjectCoercible` abstract operation
	// https://tc39.github.io/ecma262/#sec-requireobjectcoercible
	var requireObjectCoercible = function (it) {
	  if (it == undefined) throw TypeError("Can't call method on " + it);
	  return it;
	};

	// toObject with fallback for non-array-like ES3 strings



	var toIndexedObject = function (it) {
	  return indexedObject(requireObjectCoercible(it));
	};

	var isObject = function (it) {
	  return typeof it === 'object' ? it !== null : typeof it === 'function';
	};

	// `ToPrimitive` abstract operation
	// https://tc39.github.io/ecma262/#sec-toprimitive
	// instead of the ES6 spec version, we didn't implement @@toPrimitive case
	// and the second argument - flag - preferred type is a string
	var toPrimitive = function (input, PREFERRED_STRING) {
	  if (!isObject(input)) return input;
	  var fn, val;
	  if (PREFERRED_STRING && typeof (fn = input.toString) == 'function' && !isObject(val = fn.call(input))) return val;
	  if (typeof (fn = input.valueOf) == 'function' && !isObject(val = fn.call(input))) return val;
	  if (!PREFERRED_STRING && typeof (fn = input.toString) == 'function' && !isObject(val = fn.call(input))) return val;
	  throw TypeError("Can't convert object to primitive value");
	};

	var hasOwnProperty = {}.hasOwnProperty;

	var has = function (it, key) {
	  return hasOwnProperty.call(it, key);
	};

	var document$1 = global_1.document;
	// typeof document.createElement is 'object' in old IE
	var EXISTS = isObject(document$1) && isObject(document$1.createElement);

	var documentCreateElement = function (it) {
	  return EXISTS ? document$1.createElement(it) : {};
	};

	// Thank's IE8 for his funny defineProperty
	var ie8DomDefine = !descriptors && !fails(function () {
	  return Object.defineProperty(documentCreateElement('div'), 'a', {
	    get: function () { return 7; }
	  }).a != 7;
	});

	var nativeGetOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;

	// `Object.getOwnPropertyDescriptor` method
	// https://tc39.github.io/ecma262/#sec-object.getownpropertydescriptor
	var f$1 = descriptors ? nativeGetOwnPropertyDescriptor : function getOwnPropertyDescriptor(O, P) {
	  O = toIndexedObject(O);
	  P = toPrimitive(P, true);
	  if (ie8DomDefine) try {
	    return nativeGetOwnPropertyDescriptor(O, P);
	  } catch (error) { /* empty */ }
	  if (has(O, P)) return createPropertyDescriptor(!objectPropertyIsEnumerable.f.call(O, P), O[P]);
	};

	var objectGetOwnPropertyDescriptor = {
		f: f$1
	};

	var anObject = function (it) {
	  if (!isObject(it)) {
	    throw TypeError(String(it) + ' is not an object');
	  } return it;
	};

	var nativeDefineProperty = Object.defineProperty;

	// `Object.defineProperty` method
	// https://tc39.github.io/ecma262/#sec-object.defineproperty
	var f$2 = descriptors ? nativeDefineProperty : function defineProperty(O, P, Attributes) {
	  anObject(O);
	  P = toPrimitive(P, true);
	  anObject(Attributes);
	  if (ie8DomDefine) try {
	    return nativeDefineProperty(O, P, Attributes);
	  } catch (error) { /* empty */ }
	  if ('get' in Attributes || 'set' in Attributes) throw TypeError('Accessors not supported');
	  if ('value' in Attributes) O[P] = Attributes.value;
	  return O;
	};

	var objectDefineProperty = {
		f: f$2
	};

	var createNonEnumerableProperty = descriptors ? function (object, key, value) {
	  return objectDefineProperty.f(object, key, createPropertyDescriptor(1, value));
	} : function (object, key, value) {
	  object[key] = value;
	  return object;
	};

	var setGlobal = function (key, value) {
	  try {
	    createNonEnumerableProperty(global_1, key, value);
	  } catch (error) {
	    global_1[key] = value;
	  } return value;
	};

	var SHARED = '__core-js_shared__';
	var store = global_1[SHARED] || setGlobal(SHARED, {});

	var sharedStore = store;

	var functionToString = Function.toString;

	// this helper broken in `3.4.1-3.4.4`, so we can't use `shared` helper
	if (typeof sharedStore.inspectSource != 'function') {
	  sharedStore.inspectSource = function (it) {
	    return functionToString.call(it);
	  };
	}

	var inspectSource = sharedStore.inspectSource;

	var WeakMap$1 = global_1.WeakMap;

	var nativeWeakMap = typeof WeakMap$1 === 'function' && /native code/.test(inspectSource(WeakMap$1));

	var shared = createCommonjsModule(function (module) {
	(module.exports = function (key, value) {
	  return sharedStore[key] || (sharedStore[key] = value !== undefined ? value : {});
	})('versions', []).push({
	  version: '3.6.5',
	  mode:  'global',
	  copyright: 'Â© 2020 Denis Pushkarev (zloirock.ru)'
	});
	});

	var id = 0;
	var postfix = Math.random();

	var uid = function (key) {
	  return 'Symbol(' + String(key === undefined ? '' : key) + ')_' + (++id + postfix).toString(36);
	};

	var keys = shared('keys');

	var sharedKey = function (key) {
	  return keys[key] || (keys[key] = uid(key));
	};

	var hiddenKeys = {};

	var WeakMap$2 = global_1.WeakMap;
	var set, get, has$1;

	var enforce = function (it) {
	  return has$1(it) ? get(it) : set(it, {});
	};

	var getterFor = function (TYPE) {
	  return function (it) {
	    var state;
	    if (!isObject(it) || (state = get(it)).type !== TYPE) {
	      throw TypeError('Incompatible receiver, ' + TYPE + ' required');
	    } return state;
	  };
	};

	if (nativeWeakMap) {
	  var store$1 = new WeakMap$2();
	  var wmget = store$1.get;
	  var wmhas = store$1.has;
	  var wmset = store$1.set;
	  set = function (it, metadata) {
	    wmset.call(store$1, it, metadata);
	    return metadata;
	  };
	  get = function (it) {
	    return wmget.call(store$1, it) || {};
	  };
	  has$1 = function (it) {
	    return wmhas.call(store$1, it);
	  };
	} else {
	  var STATE = sharedKey('state');
	  hiddenKeys[STATE] = true;
	  set = function (it, metadata) {
	    createNonEnumerableProperty(it, STATE, metadata);
	    return metadata;
	  };
	  get = function (it) {
	    return has(it, STATE) ? it[STATE] : {};
	  };
	  has$1 = function (it) {
	    return has(it, STATE);
	  };
	}

	var internalState = {
	  set: set,
	  get: get,
	  has: has$1,
	  enforce: enforce,
	  getterFor: getterFor
	};

	var redefine = createCommonjsModule(function (module) {
	var getInternalState = internalState.get;
	var enforceInternalState = internalState.enforce;
	var TEMPLATE = String(String).split('String');

	(module.exports = function (O, key, value, options) {
	  var unsafe = options ? !!options.unsafe : false;
	  var simple = options ? !!options.enumerable : false;
	  var noTargetGet = options ? !!options.noTargetGet : false;
	  if (typeof value == 'function') {
	    if (typeof key == 'string' && !has(value, 'name')) createNonEnumerableProperty(value, 'name', key);
	    enforceInternalState(value).source = TEMPLATE.join(typeof key == 'string' ? key : '');
	  }
	  if (O === global_1) {
	    if (simple) O[key] = value;
	    else setGlobal(key, value);
	    return;
	  } else if (!unsafe) {
	    delete O[key];
	  } else if (!noTargetGet && O[key]) {
	    simple = true;
	  }
	  if (simple) O[key] = value;
	  else createNonEnumerableProperty(O, key, value);
	// add fake Function#toString for correct work wrapped methods / constructors with methods like LoDash isNative
	})(Function.prototype, 'toString', function toString() {
	  return typeof this == 'function' && getInternalState(this).source || inspectSource(this);
	});
	});

	var path = global_1;

	var aFunction = function (variable) {
	  return typeof variable == 'function' ? variable : undefined;
	};

	var getBuiltIn = function (namespace, method) {
	  return arguments.length < 2 ? aFunction(path[namespace]) || aFunction(global_1[namespace])
	    : path[namespace] && path[namespace][method] || global_1[namespace] && global_1[namespace][method];
	};

	var ceil = Math.ceil;
	var floor = Math.floor;

	// `ToInteger` abstract operation
	// https://tc39.github.io/ecma262/#sec-tointeger
	var toInteger = function (argument) {
	  return isNaN(argument = +argument) ? 0 : (argument > 0 ? floor : ceil)(argument);
	};

	var min = Math.min;

	// `ToLength` abstract operation
	// https://tc39.github.io/ecma262/#sec-tolength
	var toLength = function (argument) {
	  return argument > 0 ? min(toInteger(argument), 0x1FFFFFFFFFFFFF) : 0; // 2 ** 53 - 1 == 9007199254740991
	};

	var max = Math.max;
	var min$1 = Math.min;

	// Helper for a popular repeating case of the spec:
	// Let integer be ? ToInteger(index).
	// If integer < 0, let result be max((length + integer), 0); else let result be min(integer, length).
	var toAbsoluteIndex = function (index, length) {
	  var integer = toInteger(index);
	  return integer < 0 ? max(integer + length, 0) : min$1(integer, length);
	};

	// `Array.prototype.{ indexOf, includes }` methods implementation
	var createMethod = function (IS_INCLUDES) {
	  return function ($this, el, fromIndex) {
	    var O = toIndexedObject($this);
	    var length = toLength(O.length);
	    var index = toAbsoluteIndex(fromIndex, length);
	    var value;
	    // Array#includes uses SameValueZero equality algorithm
	    // eslint-disable-next-line no-self-compare
	    if (IS_INCLUDES && el != el) while (length > index) {
	      value = O[index++];
	      // eslint-disable-next-line no-self-compare
	      if (value != value) return true;
	    // Array#indexOf ignores holes, Array#includes - not
	    } else for (;length > index; index++) {
	      if ((IS_INCLUDES || index in O) && O[index] === el) return IS_INCLUDES || index || 0;
	    } return !IS_INCLUDES && -1;
	  };
	};

	var arrayIncludes = {
	  // `Array.prototype.includes` method
	  // https://tc39.github.io/ecma262/#sec-array.prototype.includes
	  includes: createMethod(true),
	  // `Array.prototype.indexOf` method
	  // https://tc39.github.io/ecma262/#sec-array.prototype.indexof
	  indexOf: createMethod(false)
	};

	var indexOf = arrayIncludes.indexOf;


	var objectKeysInternal = function (object, names) {
	  var O = toIndexedObject(object);
	  var i = 0;
	  var result = [];
	  var key;
	  for (key in O) !has(hiddenKeys, key) && has(O, key) && result.push(key);
	  // Don't enum bug & hidden keys
	  while (names.length > i) if (has(O, key = names[i++])) {
	    ~indexOf(result, key) || result.push(key);
	  }
	  return result;
	};

	// IE8- don't enum bug keys
	var enumBugKeys = [
	  'constructor',
	  'hasOwnProperty',
	  'isPrototypeOf',
	  'propertyIsEnumerable',
	  'toLocaleString',
	  'toString',
	  'valueOf'
	];

	var hiddenKeys$1 = enumBugKeys.concat('length', 'prototype');

	// `Object.getOwnPropertyNames` method
	// https://tc39.github.io/ecma262/#sec-object.getownpropertynames
	var f$3 = Object.getOwnPropertyNames || function getOwnPropertyNames(O) {
	  return objectKeysInternal(O, hiddenKeys$1);
	};

	var objectGetOwnPropertyNames = {
		f: f$3
	};

	var f$4 = Object.getOwnPropertySymbols;

	var objectGetOwnPropertySymbols = {
		f: f$4
	};

	// all object keys, includes non-enumerable and symbols
	var ownKeys = getBuiltIn('Reflect', 'ownKeys') || function ownKeys(it) {
	  var keys = objectGetOwnPropertyNames.f(anObject(it));
	  var getOwnPropertySymbols = objectGetOwnPropertySymbols.f;
	  return getOwnPropertySymbols ? keys.concat(getOwnPropertySymbols(it)) : keys;
	};

	var copyConstructorProperties = function (target, source) {
	  var keys = ownKeys(source);
	  var defineProperty = objectDefineProperty.f;
	  var getOwnPropertyDescriptor = objectGetOwnPropertyDescriptor.f;
	  for (var i = 0; i < keys.length; i++) {
	    var key = keys[i];
	    if (!has(target, key)) defineProperty(target, key, getOwnPropertyDescriptor(source, key));
	  }
	};

	var replacement = /#|\.prototype\./;

	var isForced = function (feature, detection) {
	  var value = data[normalize(feature)];
	  return value == POLYFILL ? true
	    : value == NATIVE ? false
	    : typeof detection == 'function' ? fails(detection)
	    : !!detection;
	};

	var normalize = isForced.normalize = function (string) {
	  return String(string).replace(replacement, '.').toLowerCase();
	};

	var data = isForced.data = {};
	var NATIVE = isForced.NATIVE = 'N';
	var POLYFILL = isForced.POLYFILL = 'P';

	var isForced_1 = isForced;

	var getOwnPropertyDescriptor$1 = objectGetOwnPropertyDescriptor.f;






	/*
	  options.target      - name of the target object
	  options.global      - target is the global object
	  options.stat        - export as static methods of target
	  options.proto       - export as prototype methods of target
	  options.real        - real prototype method for the `pure` version
	  options.forced      - export even if the native feature is available
	  options.bind        - bind methods to the target, required for the `pure` version
	  options.wrap        - wrap constructors to preventing global pollution, required for the `pure` version
	  options.unsafe      - use the simple assignment of property instead of delete + defineProperty
	  options.sham        - add a flag to not completely full polyfills
	  options.enumerable  - export as enumerable property
	  options.noTargetGet - prevent calling a getter on target
	*/
	var _export = function (options, source) {
	  var TARGET = options.target;
	  var GLOBAL = options.global;
	  var STATIC = options.stat;
	  var FORCED, target, key, targetProperty, sourceProperty, descriptor;
	  if (GLOBAL) {
	    target = global_1;
	  } else if (STATIC) {
	    target = global_1[TARGET] || setGlobal(TARGET, {});
	  } else {
	    target = (global_1[TARGET] || {}).prototype;
	  }
	  if (target) for (key in source) {
	    sourceProperty = source[key];
	    if (options.noTargetGet) {
	      descriptor = getOwnPropertyDescriptor$1(target, key);
	      targetProperty = descriptor && descriptor.value;
	    } else targetProperty = target[key];
	    FORCED = isForced_1(GLOBAL ? key : TARGET + (STATIC ? '.' : '#') + key, options.forced);
	    // contained in target
	    if (!FORCED && targetProperty !== undefined) {
	      if (typeof sourceProperty === typeof targetProperty) continue;
	      copyConstructorProperties(sourceProperty, targetProperty);
	    }
	    // add a flag to not completely full polyfills
	    if (options.sham || (targetProperty && targetProperty.sham)) {
	      createNonEnumerableProperty(sourceProperty, 'sham', true);
	    }
	    // extend global
	    redefine(target, key, sourceProperty, options);
	  }
	};

	var aFunction$1 = function (it) {
	  if (typeof it != 'function') {
	    throw TypeError(String(it) + ' is not a function');
	  } return it;
	};

	var nativeApply = getBuiltIn('Reflect', 'apply');
	var functionApply = Function.apply;

	// MS Edge argumentsList argument is optional
	var OPTIONAL_ARGUMENTS_LIST = !fails(function () {
	  nativeApply(function () { /* empty */ });
	});

	// `Reflect.apply` method
	// https://tc39.github.io/ecma262/#sec-reflect.apply
	_export({ target: 'Reflect', stat: true, forced: OPTIONAL_ARGUMENTS_LIST }, {
	  apply: function apply(target, thisArgument, argumentsList) {
	    aFunction$1(target);
	    anObject(argumentsList);
	    return nativeApply
	      ? nativeApply(target, thisArgument, argumentsList)
	      : functionApply.call(target, thisArgument, argumentsList);
	  }
	});

	// `Object.keys` method
	// https://tc39.github.io/ecma262/#sec-object.keys
	var objectKeys = Object.keys || function keys(O) {
	  return objectKeysInternal(O, enumBugKeys);
	};

	// `Object.defineProperties` method
	// https://tc39.github.io/ecma262/#sec-object.defineproperties
	var objectDefineProperties = descriptors ? Object.defineProperties : function defineProperties(O, Properties) {
	  anObject(O);
	  var keys = objectKeys(Properties);
	  var length = keys.length;
	  var index = 0;
	  var key;
	  while (length > index) objectDefineProperty.f(O, key = keys[index++], Properties[key]);
	  return O;
	};

	var html = getBuiltIn('document', 'documentElement');

	var GT = '>';
	var LT = '<';
	var PROTOTYPE = 'prototype';
	var SCRIPT = 'script';
	var IE_PROTO = sharedKey('IE_PROTO');

	var EmptyConstructor = function () { /* empty */ };

	var scriptTag = function (content) {
	  return LT + SCRIPT + GT + content + LT + '/' + SCRIPT + GT;
	};

	// Create object with fake `null` prototype: use ActiveX Object with cleared prototype
	var NullProtoObjectViaActiveX = function (activeXDocument) {
	  activeXDocument.write(scriptTag(''));
	  activeXDocument.close();
	  var temp = activeXDocument.parentWindow.Object;
	  activeXDocument = null; // avoid memory leak
	  return temp;
	};

	// Create object with fake `null` prototype: use iframe Object with cleared prototype
	var NullProtoObjectViaIFrame = function () {
	  // Thrash, waste and sodomy: IE GC bug
	  var iframe = documentCreateElement('iframe');
	  var JS = 'java' + SCRIPT + ':';
	  var iframeDocument;
	  iframe.style.display = 'none';
	  html.appendChild(iframe);
	  // https://github.com/zloirock/core-js/issues/475
	  iframe.src = String(JS);
	  iframeDocument = iframe.contentWindow.document;
	  iframeDocument.open();
	  iframeDocument.write(scriptTag('document.F=Object'));
	  iframeDocument.close();
	  return iframeDocument.F;
	};

	// Check for document.domain and active x support
	// No need to use active x approach when document.domain is not set
	// see https://github.com/es-shims/es5-shim/issues/150
	// variation of https://github.com/kitcambridge/es5-shim/commit/4f738ac066346
	// avoid IE GC bug
	var activeXDocument;
	var NullProtoObject = function () {
	  try {
	    /* global ActiveXObject */
	    activeXDocument = document.domain && new ActiveXObject('htmlfile');
	  } catch (error) { /* ignore */ }
	  NullProtoObject = activeXDocument ? NullProtoObjectViaActiveX(activeXDocument) : NullProtoObjectViaIFrame();
	  var length = enumBugKeys.length;
	  while (length--) delete NullProtoObject[PROTOTYPE][enumBugKeys[length]];
	  return NullProtoObject();
	};

	hiddenKeys[IE_PROTO] = true;

	// `Object.create` method
	// https://tc39.github.io/ecma262/#sec-object.create
	var objectCreate = Object.create || function create(O, Properties) {
	  var result;
	  if (O !== null) {
	    EmptyConstructor[PROTOTYPE] = anObject(O);
	    result = new EmptyConstructor();
	    EmptyConstructor[PROTOTYPE] = null;
	    // add "__proto__" for Object.getPrototypeOf polyfill
	    result[IE_PROTO] = O;
	  } else result = NullProtoObject();
	  return Properties === undefined ? result : objectDefineProperties(result, Properties);
	};

	var slice = [].slice;
	var factories = {};

	var construct = function (C, argsLength, args) {
	  if (!(argsLength in factories)) {
	    for (var list = [], i = 0; i < argsLength; i++) list[i] = 'a[' + i + ']';
	    // eslint-disable-next-line no-new-func
	    factories[argsLength] = Function('C,a', 'return new C(' + list.join(',') + ')');
	  } return factories[argsLength](C, args);
	};

	// `Function.prototype.bind` method implementation
	// https://tc39.github.io/ecma262/#sec-function.prototype.bind
	var functionBind = Function.bind || function bind(that /* , ...args */) {
	  var fn = aFunction$1(this);
	  var partArgs = slice.call(arguments, 1);
	  var boundFunction = function bound(/* args... */) {
	    var args = partArgs.concat(slice.call(arguments));
	    return this instanceof boundFunction ? construct(fn, args.length, args) : fn.apply(that, args);
	  };
	  if (isObject(fn.prototype)) boundFunction.prototype = fn.prototype;
	  return boundFunction;
	};

	var nativeConstruct = getBuiltIn('Reflect', 'construct');

	// `Reflect.construct` method
	// https://tc39.github.io/ecma262/#sec-reflect.construct
	// MS Edge supports only 2 arguments and argumentsList argument is optional
	// FF Nightly sets third argument as `new.target`, but does not create `this` from it
	var NEW_TARGET_BUG = fails(function () {
	  function F() { /* empty */ }
	  return !(nativeConstruct(function () { /* empty */ }, [], F) instanceof F);
	});
	var ARGS_BUG = !fails(function () {
	  nativeConstruct(function () { /* empty */ });
	});
	var FORCED = NEW_TARGET_BUG || ARGS_BUG;

	_export({ target: 'Reflect', stat: true, forced: FORCED, sham: FORCED }, {
	  construct: function construct(Target, args /* , newTarget */) {
	    aFunction$1(Target);
	    anObject(args);
	    var newTarget = arguments.length < 3 ? Target : aFunction$1(arguments[2]);
	    if (ARGS_BUG && !NEW_TARGET_BUG) return nativeConstruct(Target, args, newTarget);
	    if (Target == newTarget) {
	      // w/o altered newTarget, optimization for 0-4 arguments
	      switch (args.length) {
	        case 0: return new Target();
	        case 1: return new Target(args[0]);
	        case 2: return new Target(args[0], args[1]);
	        case 3: return new Target(args[0], args[1], args[2]);
	        case 4: return new Target(args[0], args[1], args[2], args[3]);
	      }
	      // w/o altered newTarget, lot of arguments case
	      var $args = [null];
	      $args.push.apply($args, args);
	      return new (functionBind.apply(Target, $args))();
	    }
	    // with altered newTarget, not support built-in constructors
	    var proto = newTarget.prototype;
	    var instance = objectCreate(isObject(proto) ? proto : Object.prototype);
	    var result = Function.apply.call(Target, instance, args);
	    return isObject(result) ? result : instance;
	  }
	});

	// MS Edge has broken Reflect.defineProperty - throwing instead of returning false
	var ERROR_INSTEAD_OF_FALSE = fails(function () {
	  // eslint-disable-next-line no-undef
	  Reflect.defineProperty(objectDefineProperty.f({}, 1, { value: 1 }), 1, { value: 2 });
	});

	// `Reflect.defineProperty` method
	// https://tc39.github.io/ecma262/#sec-reflect.defineproperty
	_export({ target: 'Reflect', stat: true, forced: ERROR_INSTEAD_OF_FALSE, sham: !descriptors }, {
	  defineProperty: function defineProperty(target, propertyKey, attributes) {
	    anObject(target);
	    var key = toPrimitive(propertyKey, true);
	    anObject(attributes);
	    try {
	      objectDefineProperty.f(target, key, attributes);
	      return true;
	    } catch (error) {
	      return false;
	    }
	  }
	});

	var getOwnPropertyDescriptor$2 = objectGetOwnPropertyDescriptor.f;

	// `Reflect.deleteProperty` method
	// https://tc39.github.io/ecma262/#sec-reflect.deleteproperty
	_export({ target: 'Reflect', stat: true }, {
	  deleteProperty: function deleteProperty(target, propertyKey) {
	    var descriptor = getOwnPropertyDescriptor$2(anObject(target), propertyKey);
	    return descriptor && !descriptor.configurable ? false : delete target[propertyKey];
	  }
	});

	// `ToObject` abstract operation
	// https://tc39.github.io/ecma262/#sec-toobject
	var toObject = function (argument) {
	  return Object(requireObjectCoercible(argument));
	};

	var correctPrototypeGetter = !fails(function () {
	  function F() { /* empty */ }
	  F.prototype.constructor = null;
	  return Object.getPrototypeOf(new F()) !== F.prototype;
	});

	var IE_PROTO$1 = sharedKey('IE_PROTO');
	var ObjectPrototype = Object.prototype;

	// `Object.getPrototypeOf` method
	// https://tc39.github.io/ecma262/#sec-object.getprototypeof
	var objectGetPrototypeOf = correctPrototypeGetter ? Object.getPrototypeOf : function (O) {
	  O = toObject(O);
	  if (has(O, IE_PROTO$1)) return O[IE_PROTO$1];
	  if (typeof O.constructor == 'function' && O instanceof O.constructor) {
	    return O.constructor.prototype;
	  } return O instanceof Object ? ObjectPrototype : null;
	};

	// `Reflect.get` method
	// https://tc39.github.io/ecma262/#sec-reflect.get
	function get$1(target, propertyKey /* , receiver */) {
	  var receiver = arguments.length < 3 ? target : arguments[2];
	  var descriptor, prototype;
	  if (anObject(target) === receiver) return target[propertyKey];
	  if (descriptor = objectGetOwnPropertyDescriptor.f(target, propertyKey)) return has(descriptor, 'value')
	    ? descriptor.value
	    : descriptor.get === undefined
	      ? undefined
	      : descriptor.get.call(receiver);
	  if (isObject(prototype = objectGetPrototypeOf(target))) return get$1(prototype, propertyKey, receiver);
	}

	_export({ target: 'Reflect', stat: true }, {
	  get: get$1
	});

	// `Reflect.getOwnPropertyDescriptor` method
	// https://tc39.github.io/ecma262/#sec-reflect.getownpropertydescriptor
	_export({ target: 'Reflect', stat: true, sham: !descriptors }, {
	  getOwnPropertyDescriptor: function getOwnPropertyDescriptor(target, propertyKey) {
	    return objectGetOwnPropertyDescriptor.f(anObject(target), propertyKey);
	  }
	});

	// `Reflect.getPrototypeOf` method
	// https://tc39.github.io/ecma262/#sec-reflect.getprototypeof
	_export({ target: 'Reflect', stat: true, sham: !correctPrototypeGetter }, {
	  getPrototypeOf: function getPrototypeOf(target) {
	    return objectGetPrototypeOf(anObject(target));
	  }
	});

	// `Reflect.has` method
	// https://tc39.github.io/ecma262/#sec-reflect.has
	_export({ target: 'Reflect', stat: true }, {
	  has: function has(target, propertyKey) {
	    return propertyKey in target;
	  }
	});

	var objectIsExtensible = Object.isExtensible;

	// `Reflect.isExtensible` method
	// https://tc39.github.io/ecma262/#sec-reflect.isextensible
	_export({ target: 'Reflect', stat: true }, {
	  isExtensible: function isExtensible(target) {
	    anObject(target);
	    return objectIsExtensible ? objectIsExtensible(target) : true;
	  }
	});

	// `Reflect.ownKeys` method
	// https://tc39.github.io/ecma262/#sec-reflect.ownkeys
	_export({ target: 'Reflect', stat: true }, {
	  ownKeys: ownKeys
	});

	var freezing = !fails(function () {
	  return Object.isExtensible(Object.preventExtensions({}));
	});

	// `Reflect.preventExtensions` method
	// https://tc39.github.io/ecma262/#sec-reflect.preventextensions
	_export({ target: 'Reflect', stat: true, sham: !freezing }, {
	  preventExtensions: function preventExtensions(target) {
	    anObject(target);
	    try {
	      var objectPreventExtensions = getBuiltIn('Object', 'preventExtensions');
	      if (objectPreventExtensions) objectPreventExtensions(target);
	      return true;
	    } catch (error) {
	      return false;
	    }
	  }
	});

	// `Reflect.set` method
	// https://tc39.github.io/ecma262/#sec-reflect.set
	function set$1(target, propertyKey, V /* , receiver */) {
	  var receiver = arguments.length < 4 ? target : arguments[3];
	  var ownDescriptor = objectGetOwnPropertyDescriptor.f(anObject(target), propertyKey);
	  var existingDescriptor, prototype;
	  if (!ownDescriptor) {
	    if (isObject(prototype = objectGetPrototypeOf(target))) {
	      return set$1(prototype, propertyKey, V, receiver);
	    }
	    ownDescriptor = createPropertyDescriptor(0);
	  }
	  if (has(ownDescriptor, 'value')) {
	    if (ownDescriptor.writable === false || !isObject(receiver)) return false;
	    if (existingDescriptor = objectGetOwnPropertyDescriptor.f(receiver, propertyKey)) {
	      if (existingDescriptor.get || existingDescriptor.set || existingDescriptor.writable === false) return false;
	      existingDescriptor.value = V;
	      objectDefineProperty.f(receiver, propertyKey, existingDescriptor);
	    } else objectDefineProperty.f(receiver, propertyKey, createPropertyDescriptor(0, V));
	    return true;
	  }
	  return ownDescriptor.set === undefined ? false : (ownDescriptor.set.call(receiver, V), true);
	}

	// MS Edge 17-18 Reflect.set allows setting the property to object
	// with non-writable property on the prototype
	var MS_EDGE_BUG = fails(function () {
	  var object = objectDefineProperty.f({}, 'a', { configurable: true });
	  // eslint-disable-next-line no-undef
	  return Reflect.set(objectGetPrototypeOf(object), 'a', 1, object) !== false;
	});

	_export({ target: 'Reflect', stat: true, forced: MS_EDGE_BUG }, {
	  set: set$1
	});

	var aPossiblePrototype = function (it) {
	  if (!isObject(it) && it !== null) {
	    throw TypeError("Can't set " + String(it) + ' as a prototype');
	  } return it;
	};

	// `Object.setPrototypeOf` method
	// https://tc39.github.io/ecma262/#sec-object.setprototypeof
	// Works with __proto__ only. Old v8 can't work with null proto objects.
	/* eslint-disable no-proto */
	var objectSetPrototypeOf = Object.setPrototypeOf || ('__proto__' in {} ? function () {
	  var CORRECT_SETTER = false;
	  var test = {};
	  var setter;
	  try {
	    setter = Object.getOwnPropertyDescriptor(Object.prototype, '__proto__').set;
	    setter.call(test, []);
	    CORRECT_SETTER = test instanceof Array;
	  } catch (error) { /* empty */ }
	  return function setPrototypeOf(O, proto) {
	    anObject(O);
	    aPossiblePrototype(proto);
	    if (CORRECT_SETTER) setter.call(O, proto);
	    else O.__proto__ = proto;
	    return O;
	  };
	}() : undefined);

	// `Reflect.setPrototypeOf` method
	// https://tc39.github.io/ecma262/#sec-reflect.setprototypeof
	if (objectSetPrototypeOf) _export({ target: 'Reflect', stat: true }, {
	  setPrototypeOf: function setPrototypeOf(target, proto) {
	    anObject(target);
	    aPossiblePrototype(proto);
	    try {
	      objectSetPrototypeOf(target, proto);
	      return true;
	    } catch (error) {
	      return false;
	    }
	  }
	});

	var reflect = path.Reflect;

	var internalMetadata = createCommonjsModule(function (module) {
	var defineProperty = objectDefineProperty.f;



	var METADATA = uid('meta');
	var id = 0;

	var isExtensible = Object.isExtensible || function () {
	  return true;
	};

	var setMetadata = function (it) {
	  defineProperty(it, METADATA, { value: {
	    objectID: 'O' + ++id, // object ID
	    weakData: {}          // weak collections IDs
	  } });
	};

	var fastKey = function (it, create) {
	  // return a primitive with prefix
	  if (!isObject(it)) return typeof it == 'symbol' ? it : (typeof it == 'string' ? 'S' : 'P') + it;
	  if (!has(it, METADATA)) {
	    // can't set metadata to uncaught frozen object
	    if (!isExtensible(it)) return 'F';
	    // not necessary to add metadata
	    if (!create) return 'E';
	    // add missing metadata
	    setMetadata(it);
	  // return object ID
	  } return it[METADATA].objectID;
	};

	var getWeakData = function (it, create) {
	  if (!has(it, METADATA)) {
	    // can't set metadata to uncaught frozen object
	    if (!isExtensible(it)) return true;
	    // not necessary to add metadata
	    if (!create) return false;
	    // add missing metadata
	    setMetadata(it);
	  // return the store of weak collections IDs
	  } return it[METADATA].weakData;
	};

	// add metadata on freeze-family methods calling
	var onFreeze = function (it) {
	  if (freezing && meta.REQUIRED && isExtensible(it) && !has(it, METADATA)) setMetadata(it);
	  return it;
	};

	var meta = module.exports = {
	  REQUIRED: false,
	  fastKey: fastKey,
	  getWeakData: getWeakData,
	  onFreeze: onFreeze
	};

	hiddenKeys[METADATA] = true;
	});
	var internalMetadata_1 = internalMetadata.REQUIRED;
	var internalMetadata_2 = internalMetadata.fastKey;
	var internalMetadata_3 = internalMetadata.getWeakData;
	var internalMetadata_4 = internalMetadata.onFreeze;

	var nativeSymbol = !!Object.getOwnPropertySymbols && !fails(function () {
	  // Chrome 38 Symbol has incorrect toString conversion
	  // eslint-disable-next-line no-undef
	  return !String(Symbol());
	});

	var useSymbolAsUid = nativeSymbol
	  // eslint-disable-next-line no-undef
	  && !Symbol.sham
	  // eslint-disable-next-line no-undef
	  && typeof Symbol.iterator == 'symbol';

	var WellKnownSymbolsStore = shared('wks');
	var Symbol$1 = global_1.Symbol;
	var createWellKnownSymbol = useSymbolAsUid ? Symbol$1 : Symbol$1 && Symbol$1.withoutSetter || uid;

	var wellKnownSymbol = function (name) {
	  if (!has(WellKnownSymbolsStore, name)) {
	    if (nativeSymbol && has(Symbol$1, name)) WellKnownSymbolsStore[name] = Symbol$1[name];
	    else WellKnownSymbolsStore[name] = createWellKnownSymbol('Symbol.' + name);
	  } return WellKnownSymbolsStore[name];
	};

	var iterators = {};

	var ITERATOR = wellKnownSymbol('iterator');
	var ArrayPrototype = Array.prototype;

	// check on default Array iterator
	var isArrayIteratorMethod = function (it) {
	  return it !== undefined && (iterators.Array === it || ArrayPrototype[ITERATOR] === it);
	};

	// optional / simple context binding
	var functionBindContext = function (fn, that, length) {
	  aFunction$1(fn);
	  if (that === undefined) return fn;
	  switch (length) {
	    case 0: return function () {
	      return fn.call(that);
	    };
	    case 1: return function (a) {
	      return fn.call(that, a);
	    };
	    case 2: return function (a, b) {
	      return fn.call(that, a, b);
	    };
	    case 3: return function (a, b, c) {
	      return fn.call(that, a, b, c);
	    };
	  }
	  return function (/* ...args */) {
	    return fn.apply(that, arguments);
	  };
	};

	var TO_STRING_TAG = wellKnownSymbol('toStringTag');
	var test = {};

	test[TO_STRING_TAG] = 'z';

	var toStringTagSupport = String(test) === '[object z]';

	var TO_STRING_TAG$1 = wellKnownSymbol('toStringTag');
	// ES3 wrong here
	var CORRECT_ARGUMENTS = classofRaw(function () { return arguments; }()) == 'Arguments';

	// fallback for IE11 Script Access Denied error
	var tryGet = function (it, key) {
	  try {
	    return it[key];
	  } catch (error) { /* empty */ }
	};

	// getting tag from ES6+ `Object.prototype.toString`
	var classof = toStringTagSupport ? classofRaw : function (it) {
	  var O, tag, result;
	  return it === undefined ? 'Undefined' : it === null ? 'Null'
	    // @@toStringTag case
	    : typeof (tag = tryGet(O = Object(it), TO_STRING_TAG$1)) == 'string' ? tag
	    // builtinTag case
	    : CORRECT_ARGUMENTS ? classofRaw(O)
	    // ES3 arguments fallback
	    : (result = classofRaw(O)) == 'Object' && typeof O.callee == 'function' ? 'Arguments' : result;
	};

	var ITERATOR$1 = wellKnownSymbol('iterator');

	var getIteratorMethod = function (it) {
	  if (it != undefined) return it[ITERATOR$1]
	    || it['@@iterator']
	    || iterators[classof(it)];
	};

	// call something on iterator step with safe closing on error
	var callWithSafeIterationClosing = function (iterator, fn, value, ENTRIES) {
	  try {
	    return ENTRIES ? fn(anObject(value)[0], value[1]) : fn(value);
	  // 7.4.6 IteratorClose(iterator, completion)
	  } catch (error) {
	    var returnMethod = iterator['return'];
	    if (returnMethod !== undefined) anObject(returnMethod.call(iterator));
	    throw error;
	  }
	};

	var iterate_1 = createCommonjsModule(function (module) {
	var Result = function (stopped, result) {
	  this.stopped = stopped;
	  this.result = result;
	};

	var iterate = module.exports = function (iterable, fn, that, AS_ENTRIES, IS_ITERATOR) {
	  var boundFunction = functionBindContext(fn, that, AS_ENTRIES ? 2 : 1);
	  var iterator, iterFn, index, length, result, next, step;

	  if (IS_ITERATOR) {
	    iterator = iterable;
	  } else {
	    iterFn = getIteratorMethod(iterable);
	    if (typeof iterFn != 'function') throw TypeError('Target is not iterable');
	    // optimisation for array iterators
	    if (isArrayIteratorMethod(iterFn)) {
	      for (index = 0, length = toLength(iterable.length); length > index; index++) {
	        result = AS_ENTRIES
	          ? boundFunction(anObject(step = iterable[index])[0], step[1])
	          : boundFunction(iterable[index]);
	        if (result && result instanceof Result) return result;
	      } return new Result(false);
	    }
	    iterator = iterFn.call(iterable);
	  }

	  next = iterator.next;
	  while (!(step = next.call(iterator)).done) {
	    result = callWithSafeIterationClosing(iterator, boundFunction, step.value, AS_ENTRIES);
	    if (typeof result == 'object' && result && result instanceof Result) return result;
	  } return new Result(false);
	};

	iterate.stop = function (result) {
	  return new Result(true, result);
	};
	});

	var anInstance = function (it, Constructor, name) {
	  if (!(it instanceof Constructor)) {
	    throw TypeError('Incorrect ' + (name ? name + ' ' : '') + 'invocation');
	  } return it;
	};

	var ITERATOR$2 = wellKnownSymbol('iterator');
	var SAFE_CLOSING = false;

	try {
	  var called = 0;
	  var iteratorWithReturn = {
	    next: function () {
	      return { done: !!called++ };
	    },
	    'return': function () {
	      SAFE_CLOSING = true;
	    }
	  };
	  iteratorWithReturn[ITERATOR$2] = function () {
	    return this;
	  };
	  // eslint-disable-next-line no-throw-literal
	  Array.from(iteratorWithReturn, function () { throw 2; });
	} catch (error) { /* empty */ }

	var checkCorrectnessOfIteration = function (exec, SKIP_CLOSING) {
	  if (!SKIP_CLOSING && !SAFE_CLOSING) return false;
	  var ITERATION_SUPPORT = false;
	  try {
	    var object = {};
	    object[ITERATOR$2] = function () {
	      return {
	        next: function () {
	          return { done: ITERATION_SUPPORT = true };
	        }
	      };
	    };
	    exec(object);
	  } catch (error) { /* empty */ }
	  return ITERATION_SUPPORT;
	};

	var defineProperty = objectDefineProperty.f;



	var TO_STRING_TAG$2 = wellKnownSymbol('toStringTag');

	var setToStringTag = function (it, TAG, STATIC) {
	  if (it && !has(it = STATIC ? it : it.prototype, TO_STRING_TAG$2)) {
	    defineProperty(it, TO_STRING_TAG$2, { configurable: true, value: TAG });
	  }
	};

	// makes subclassing work correct for wrapped built-ins
	var inheritIfRequired = function ($this, dummy, Wrapper) {
	  var NewTarget, NewTargetPrototype;
	  if (
	    // it can work only with native `setPrototypeOf`
	    objectSetPrototypeOf &&
	    // we haven't completely correct pre-ES6 way for getting `new.target`, so use this
	    typeof (NewTarget = dummy.constructor) == 'function' &&
	    NewTarget !== Wrapper &&
	    isObject(NewTargetPrototype = NewTarget.prototype) &&
	    NewTargetPrototype !== Wrapper.prototype
	  ) objectSetPrototypeOf($this, NewTargetPrototype);
	  return $this;
	};

	var collection = function (CONSTRUCTOR_NAME, wrapper, common) {
	  var IS_MAP = CONSTRUCTOR_NAME.indexOf('Map') !== -1;
	  var IS_WEAK = CONSTRUCTOR_NAME.indexOf('Weak') !== -1;
	  var ADDER = IS_MAP ? 'set' : 'add';
	  var NativeConstructor = global_1[CONSTRUCTOR_NAME];
	  var NativePrototype = NativeConstructor && NativeConstructor.prototype;
	  var Constructor = NativeConstructor;
	  var exported = {};

	  var fixMethod = function (KEY) {
	    var nativeMethod = NativePrototype[KEY];
	    redefine(NativePrototype, KEY,
	      KEY == 'add' ? function add(value) {
	        nativeMethod.call(this, value === 0 ? 0 : value);
	        return this;
	      } : KEY == 'delete' ? function (key) {
	        return IS_WEAK && !isObject(key) ? false : nativeMethod.call(this, key === 0 ? 0 : key);
	      } : KEY == 'get' ? function get(key) {
	        return IS_WEAK && !isObject(key) ? undefined : nativeMethod.call(this, key === 0 ? 0 : key);
	      } : KEY == 'has' ? function has(key) {
	        return IS_WEAK && !isObject(key) ? false : nativeMethod.call(this, key === 0 ? 0 : key);
	      } : function set(key, value) {
	        nativeMethod.call(this, key === 0 ? 0 : key, value);
	        return this;
	      }
	    );
	  };

	  // eslint-disable-next-line max-len
	  if (isForced_1(CONSTRUCTOR_NAME, typeof NativeConstructor != 'function' || !(IS_WEAK || NativePrototype.forEach && !fails(function () {
	    new NativeConstructor().entries().next();
	  })))) {
	    // create collection constructor
	    Constructor = common.getConstructor(wrapper, CONSTRUCTOR_NAME, IS_MAP, ADDER);
	    internalMetadata.REQUIRED = true;
	  } else if (isForced_1(CONSTRUCTOR_NAME, true)) {
	    var instance = new Constructor();
	    // early implementations not supports chaining
	    var HASNT_CHAINING = instance[ADDER](IS_WEAK ? {} : -0, 1) != instance;
	    // V8 ~ Chromium 40- weak-collections throws on primitives, but should return false
	    var THROWS_ON_PRIMITIVES = fails(function () { instance.has(1); });
	    // most early implementations doesn't supports iterables, most modern - not close it correctly
	    // eslint-disable-next-line no-new
	    var ACCEPT_ITERABLES = checkCorrectnessOfIteration(function (iterable) { new NativeConstructor(iterable); });
	    // for early implementations -0 and +0 not the same
	    var BUGGY_ZERO = !IS_WEAK && fails(function () {
	      // V8 ~ Chromium 42- fails only with 5+ elements
	      var $instance = new NativeConstructor();
	      var index = 5;
	      while (index--) $instance[ADDER](index, index);
	      return !$instance.has(-0);
	    });

	    if (!ACCEPT_ITERABLES) {
	      Constructor = wrapper(function (dummy, iterable) {
	        anInstance(dummy, Constructor, CONSTRUCTOR_NAME);
	        var that = inheritIfRequired(new NativeConstructor(), dummy, Constructor);
	        if (iterable != undefined) iterate_1(iterable, that[ADDER], that, IS_MAP);
	        return that;
	      });
	      Constructor.prototype = NativePrototype;
	      NativePrototype.constructor = Constructor;
	    }

	    if (THROWS_ON_PRIMITIVES || BUGGY_ZERO) {
	      fixMethod('delete');
	      fixMethod('has');
	      IS_MAP && fixMethod('get');
	    }

	    if (BUGGY_ZERO || HASNT_CHAINING) fixMethod(ADDER);

	    // weak collections should not contains .clear method
	    if (IS_WEAK && NativePrototype.clear) delete NativePrototype.clear;
	  }

	  exported[CONSTRUCTOR_NAME] = Constructor;
	  _export({ global: true, forced: Constructor != NativeConstructor }, exported);

	  setToStringTag(Constructor, CONSTRUCTOR_NAME);

	  if (!IS_WEAK) common.setStrong(Constructor, CONSTRUCTOR_NAME, IS_MAP);

	  return Constructor;
	};

	var redefineAll = function (target, src, options) {
	  for (var key in src) redefine(target, key, src[key], options);
	  return target;
	};

	var ITERATOR$3 = wellKnownSymbol('iterator');
	var BUGGY_SAFARI_ITERATORS = false;

	var returnThis = function () { return this; };

	// `%IteratorPrototype%` object
	// https://tc39.github.io/ecma262/#sec-%iteratorprototype%-object
	var IteratorPrototype, PrototypeOfArrayIteratorPrototype, arrayIterator;

	if ([].keys) {
	  arrayIterator = [].keys();
	  // Safari 8 has buggy iterators w/o `next`
	  if (!('next' in arrayIterator)) BUGGY_SAFARI_ITERATORS = true;
	  else {
	    PrototypeOfArrayIteratorPrototype = objectGetPrototypeOf(objectGetPrototypeOf(arrayIterator));
	    if (PrototypeOfArrayIteratorPrototype !== Object.prototype) IteratorPrototype = PrototypeOfArrayIteratorPrototype;
	  }
	}

	if (IteratorPrototype == undefined) IteratorPrototype = {};

	// 25.1.2.1.1 %IteratorPrototype%[@@iterator]()
	if ( !has(IteratorPrototype, ITERATOR$3)) {
	  createNonEnumerableProperty(IteratorPrototype, ITERATOR$3, returnThis);
	}

	var iteratorsCore = {
	  IteratorPrototype: IteratorPrototype,
	  BUGGY_SAFARI_ITERATORS: BUGGY_SAFARI_ITERATORS
	};

	var IteratorPrototype$1 = iteratorsCore.IteratorPrototype;





	var returnThis$1 = function () { return this; };

	var createIteratorConstructor = function (IteratorConstructor, NAME, next) {
	  var TO_STRING_TAG = NAME + ' Iterator';
	  IteratorConstructor.prototype = objectCreate(IteratorPrototype$1, { next: createPropertyDescriptor(1, next) });
	  setToStringTag(IteratorConstructor, TO_STRING_TAG, false);
	  iterators[TO_STRING_TAG] = returnThis$1;
	  return IteratorConstructor;
	};

	var IteratorPrototype$2 = iteratorsCore.IteratorPrototype;
	var BUGGY_SAFARI_ITERATORS$1 = iteratorsCore.BUGGY_SAFARI_ITERATORS;
	var ITERATOR$4 = wellKnownSymbol('iterator');
	var KEYS = 'keys';
	var VALUES = 'values';
	var ENTRIES = 'entries';

	var returnThis$2 = function () { return this; };

	var defineIterator = function (Iterable, NAME, IteratorConstructor, next, DEFAULT, IS_SET, FORCED) {
	  createIteratorConstructor(IteratorConstructor, NAME, next);

	  var getIterationMethod = function (KIND) {
	    if (KIND === DEFAULT && defaultIterator) return defaultIterator;
	    if (!BUGGY_SAFARI_ITERATORS$1 && KIND in IterablePrototype) return IterablePrototype[KIND];
	    switch (KIND) {
	      case KEYS: return function keys() { return new IteratorConstructor(this, KIND); };
	      case VALUES: return function values() { return new IteratorConstructor(this, KIND); };
	      case ENTRIES: return function entries() { return new IteratorConstructor(this, KIND); };
	    } return function () { return new IteratorConstructor(this); };
	  };

	  var TO_STRING_TAG = NAME + ' Iterator';
	  var INCORRECT_VALUES_NAME = false;
	  var IterablePrototype = Iterable.prototype;
	  var nativeIterator = IterablePrototype[ITERATOR$4]
	    || IterablePrototype['@@iterator']
	    || DEFAULT && IterablePrototype[DEFAULT];
	  var defaultIterator = !BUGGY_SAFARI_ITERATORS$1 && nativeIterator || getIterationMethod(DEFAULT);
	  var anyNativeIterator = NAME == 'Array' ? IterablePrototype.entries || nativeIterator : nativeIterator;
	  var CurrentIteratorPrototype, methods, KEY;

	  // fix native
	  if (anyNativeIterator) {
	    CurrentIteratorPrototype = objectGetPrototypeOf(anyNativeIterator.call(new Iterable()));
	    if (IteratorPrototype$2 !== Object.prototype && CurrentIteratorPrototype.next) {
	      if ( objectGetPrototypeOf(CurrentIteratorPrototype) !== IteratorPrototype$2) {
	        if (objectSetPrototypeOf) {
	          objectSetPrototypeOf(CurrentIteratorPrototype, IteratorPrototype$2);
	        } else if (typeof CurrentIteratorPrototype[ITERATOR$4] != 'function') {
	          createNonEnumerableProperty(CurrentIteratorPrototype, ITERATOR$4, returnThis$2);
	        }
	      }
	      // Set @@toStringTag to native iterators
	      setToStringTag(CurrentIteratorPrototype, TO_STRING_TAG, true);
	    }
	  }

	  // fix Array#{values, @@iterator}.name in V8 / FF
	  if (DEFAULT == VALUES && nativeIterator && nativeIterator.name !== VALUES) {
	    INCORRECT_VALUES_NAME = true;
	    defaultIterator = function values() { return nativeIterator.call(this); };
	  }

	  // define iterator
	  if ( IterablePrototype[ITERATOR$4] !== defaultIterator) {
	    createNonEnumerableProperty(IterablePrototype, ITERATOR$4, defaultIterator);
	  }
	  iterators[NAME] = defaultIterator;

	  // export additional methods
	  if (DEFAULT) {
	    methods = {
	      values: getIterationMethod(VALUES),
	      keys: IS_SET ? defaultIterator : getIterationMethod(KEYS),
	      entries: getIterationMethod(ENTRIES)
	    };
	    if (FORCED) for (KEY in methods) {
	      if (BUGGY_SAFARI_ITERATORS$1 || INCORRECT_VALUES_NAME || !(KEY in IterablePrototype)) {
	        redefine(IterablePrototype, KEY, methods[KEY]);
	      }
	    } else _export({ target: NAME, proto: true, forced: BUGGY_SAFARI_ITERATORS$1 || INCORRECT_VALUES_NAME }, methods);
	  }

	  return methods;
	};

	var SPECIES = wellKnownSymbol('species');

	var setSpecies = function (CONSTRUCTOR_NAME) {
	  var Constructor = getBuiltIn(CONSTRUCTOR_NAME);
	  var defineProperty = objectDefineProperty.f;

	  if (descriptors && Constructor && !Constructor[SPECIES]) {
	    defineProperty(Constructor, SPECIES, {
	      configurable: true,
	      get: function () { return this; }
	    });
	  }
	};

	var defineProperty$1 = objectDefineProperty.f;








	var fastKey = internalMetadata.fastKey;


	var setInternalState = internalState.set;
	var internalStateGetterFor = internalState.getterFor;

	var collectionStrong = {
	  getConstructor: function (wrapper, CONSTRUCTOR_NAME, IS_MAP, ADDER) {
	    var C = wrapper(function (that, iterable) {
	      anInstance(that, C, CONSTRUCTOR_NAME);
	      setInternalState(that, {
	        type: CONSTRUCTOR_NAME,
	        index: objectCreate(null),
	        first: undefined,
	        last: undefined,
	        size: 0
	      });
	      if (!descriptors) that.size = 0;
	      if (iterable != undefined) iterate_1(iterable, that[ADDER], that, IS_MAP);
	    });

	    var getInternalState = internalStateGetterFor(CONSTRUCTOR_NAME);

	    var define = function (that, key, value) {
	      var state = getInternalState(that);
	      var entry = getEntry(that, key);
	      var previous, index;
	      // change existing entry
	      if (entry) {
	        entry.value = value;
	      // create new entry
	      } else {
	        state.last = entry = {
	          index: index = fastKey(key, true),
	          key: key,
	          value: value,
	          previous: previous = state.last,
	          next: undefined,
	          removed: false
	        };
	        if (!state.first) state.first = entry;
	        if (previous) previous.next = entry;
	        if (descriptors) state.size++;
	        else that.size++;
	        // add to index
	        if (index !== 'F') state.index[index] = entry;
	      } return that;
	    };

	    var getEntry = function (that, key) {
	      var state = getInternalState(that);
	      // fast case
	      var index = fastKey(key);
	      var entry;
	      if (index !== 'F') return state.index[index];
	      // frozen object case
	      for (entry = state.first; entry; entry = entry.next) {
	        if (entry.key == key) return entry;
	      }
	    };

	    redefineAll(C.prototype, {
	      // 23.1.3.1 Map.prototype.clear()
	      // 23.2.3.2 Set.prototype.clear()
	      clear: function clear() {
	        var that = this;
	        var state = getInternalState(that);
	        var data = state.index;
	        var entry = state.first;
	        while (entry) {
	          entry.removed = true;
	          if (entry.previous) entry.previous = entry.previous.next = undefined;
	          delete data[entry.index];
	          entry = entry.next;
	        }
	        state.first = state.last = undefined;
	        if (descriptors) state.size = 0;
	        else that.size = 0;
	      },
	      // 23.1.3.3 Map.prototype.delete(key)
	      // 23.2.3.4 Set.prototype.delete(value)
	      'delete': function (key) {
	        var that = this;
	        var state = getInternalState(that);
	        var entry = getEntry(that, key);
	        if (entry) {
	          var next = entry.next;
	          var prev = entry.previous;
	          delete state.index[entry.index];
	          entry.removed = true;
	          if (prev) prev.next = next;
	          if (next) next.previous = prev;
	          if (state.first == entry) state.first = next;
	          if (state.last == entry) state.last = prev;
	          if (descriptors) state.size--;
	          else that.size--;
	        } return !!entry;
	      },
	      // 23.2.3.6 Set.prototype.forEach(callbackfn, thisArg = undefined)
	      // 23.1.3.5 Map.prototype.forEach(callbackfn, thisArg = undefined)
	      forEach: function forEach(callbackfn /* , that = undefined */) {
	        var state = getInternalState(this);
	        var boundFunction = functionBindContext(callbackfn, arguments.length > 1 ? arguments[1] : undefined, 3);
	        var entry;
	        while (entry = entry ? entry.next : state.first) {
	          boundFunction(entry.value, entry.key, this);
	          // revert to the last existing entry
	          while (entry && entry.removed) entry = entry.previous;
	        }
	      },
	      // 23.1.3.7 Map.prototype.has(key)
	      // 23.2.3.7 Set.prototype.has(value)
	      has: function has(key) {
	        return !!getEntry(this, key);
	      }
	    });

	    redefineAll(C.prototype, IS_MAP ? {
	      // 23.1.3.6 Map.prototype.get(key)
	      get: function get(key) {
	        var entry = getEntry(this, key);
	        return entry && entry.value;
	      },
	      // 23.1.3.9 Map.prototype.set(key, value)
	      set: function set(key, value) {
	        return define(this, key === 0 ? 0 : key, value);
	      }
	    } : {
	      // 23.2.3.1 Set.prototype.add(value)
	      add: function add(value) {
	        return define(this, value = value === 0 ? 0 : value, value);
	      }
	    });
	    if (descriptors) defineProperty$1(C.prototype, 'size', {
	      get: function () {
	        return getInternalState(this).size;
	      }
	    });
	    return C;
	  },
	  setStrong: function (C, CONSTRUCTOR_NAME, IS_MAP) {
	    var ITERATOR_NAME = CONSTRUCTOR_NAME + ' Iterator';
	    var getInternalCollectionState = internalStateGetterFor(CONSTRUCTOR_NAME);
	    var getInternalIteratorState = internalStateGetterFor(ITERATOR_NAME);
	    // add .keys, .values, .entries, [@@iterator]
	    // 23.1.3.4, 23.1.3.8, 23.1.3.11, 23.1.3.12, 23.2.3.5, 23.2.3.8, 23.2.3.10, 23.2.3.11
	    defineIterator(C, CONSTRUCTOR_NAME, function (iterated, kind) {
	      setInternalState(this, {
	        type: ITERATOR_NAME,
	        target: iterated,
	        state: getInternalCollectionState(iterated),
	        kind: kind,
	        last: undefined
	      });
	    }, function () {
	      var state = getInternalIteratorState(this);
	      var kind = state.kind;
	      var entry = state.last;
	      // revert to the last existing entry
	      while (entry && entry.removed) entry = entry.previous;
	      // get next entry
	      if (!state.target || !(state.last = entry = entry ? entry.next : state.state.first)) {
	        // or finish the iteration
	        state.target = undefined;
	        return { value: undefined, done: true };
	      }
	      // return step by kind
	      if (kind == 'keys') return { value: entry.key, done: false };
	      if (kind == 'values') return { value: entry.value, done: false };
	      return { value: [entry.key, entry.value], done: false };
	    }, IS_MAP ? 'entries' : 'values', !IS_MAP, true);

	    // add [@@species], 23.1.2.2, 23.2.2.2
	    setSpecies(CONSTRUCTOR_NAME);
	  }
	};

	// `Map` constructor
	// https://tc39.github.io/ecma262/#sec-map-objects
	var es_map = collection('Map', function (init) {
	  return function Map() { return init(this, arguments.length ? arguments[0] : undefined); };
	}, collectionStrong);

	// `IsArray` abstract operation
	// https://tc39.github.io/ecma262/#sec-isarray
	var isArray = Array.isArray || function isArray(arg) {
	  return classofRaw(arg) == 'Array';
	};

	var SPECIES$1 = wellKnownSymbol('species');

	// `ArraySpeciesCreate` abstract operation
	// https://tc39.github.io/ecma262/#sec-arrayspeciescreate
	var arraySpeciesCreate = function (originalArray, length) {
	  var C;
	  if (isArray(originalArray)) {
	    C = originalArray.constructor;
	    // cross-realm fallback
	    if (typeof C == 'function' && (C === Array || isArray(C.prototype))) C = undefined;
	    else if (isObject(C)) {
	      C = C[SPECIES$1];
	      if (C === null) C = undefined;
	    }
	  } return new (C === undefined ? Array : C)(length === 0 ? 0 : length);
	};

	var push = [].push;

	// `Array.prototype.{ forEach, map, filter, some, every, find, findIndex }` methods implementation
	var createMethod$1 = function (TYPE) {
	  var IS_MAP = TYPE == 1;
	  var IS_FILTER = TYPE == 2;
	  var IS_SOME = TYPE == 3;
	  var IS_EVERY = TYPE == 4;
	  var IS_FIND_INDEX = TYPE == 6;
	  var NO_HOLES = TYPE == 5 || IS_FIND_INDEX;
	  return function ($this, callbackfn, that, specificCreate) {
	    var O = toObject($this);
	    var self = indexedObject(O);
	    var boundFunction = functionBindContext(callbackfn, that, 3);
	    var length = toLength(self.length);
	    var index = 0;
	    var create = specificCreate || arraySpeciesCreate;
	    var target = IS_MAP ? create($this, length) : IS_FILTER ? create($this, 0) : undefined;
	    var value, result;
	    for (;length > index; index++) if (NO_HOLES || index in self) {
	      value = self[index];
	      result = boundFunction(value, index, O);
	      if (TYPE) {
	        if (IS_MAP) target[index] = result; // map
	        else if (result) switch (TYPE) {
	          case 3: return true;              // some
	          case 5: return value;             // find
	          case 6: return index;             // findIndex
	          case 2: push.call(target, value); // filter
	        } else if (IS_EVERY) return false;  // every
	      }
	    }
	    return IS_FIND_INDEX ? -1 : IS_SOME || IS_EVERY ? IS_EVERY : target;
	  };
	};

	var arrayIteration = {
	  // `Array.prototype.forEach` method
	  // https://tc39.github.io/ecma262/#sec-array.prototype.foreach
	  forEach: createMethod$1(0),
	  // `Array.prototype.map` method
	  // https://tc39.github.io/ecma262/#sec-array.prototype.map
	  map: createMethod$1(1),
	  // `Array.prototype.filter` method
	  // https://tc39.github.io/ecma262/#sec-array.prototype.filter
	  filter: createMethod$1(2),
	  // `Array.prototype.some` method
	  // https://tc39.github.io/ecma262/#sec-array.prototype.some
	  some: createMethod$1(3),
	  // `Array.prototype.every` method
	  // https://tc39.github.io/ecma262/#sec-array.prototype.every
	  every: createMethod$1(4),
	  // `Array.prototype.find` method
	  // https://tc39.github.io/ecma262/#sec-array.prototype.find
	  find: createMethod$1(5),
	  // `Array.prototype.findIndex` method
	  // https://tc39.github.io/ecma262/#sec-array.prototype.findIndex
	  findIndex: createMethod$1(6)
	};

	var getWeakData = internalMetadata.getWeakData;








	var setInternalState$1 = internalState.set;
	var internalStateGetterFor$1 = internalState.getterFor;
	var find = arrayIteration.find;
	var findIndex = arrayIteration.findIndex;
	var id$1 = 0;

	// fallback for uncaught frozen keys
	var uncaughtFrozenStore = function (store) {
	  return store.frozen || (store.frozen = new UncaughtFrozenStore());
	};

	var UncaughtFrozenStore = function () {
	  this.entries = [];
	};

	var findUncaughtFrozen = function (store, key) {
	  return find(store.entries, function (it) {
	    return it[0] === key;
	  });
	};

	UncaughtFrozenStore.prototype = {
	  get: function (key) {
	    var entry = findUncaughtFrozen(this, key);
	    if (entry) return entry[1];
	  },
	  has: function (key) {
	    return !!findUncaughtFrozen(this, key);
	  },
	  set: function (key, value) {
	    var entry = findUncaughtFrozen(this, key);
	    if (entry) entry[1] = value;
	    else this.entries.push([key, value]);
	  },
	  'delete': function (key) {
	    var index = findIndex(this.entries, function (it) {
	      return it[0] === key;
	    });
	    if (~index) this.entries.splice(index, 1);
	    return !!~index;
	  }
	};

	var collectionWeak = {
	  getConstructor: function (wrapper, CONSTRUCTOR_NAME, IS_MAP, ADDER) {
	    var C = wrapper(function (that, iterable) {
	      anInstance(that, C, CONSTRUCTOR_NAME);
	      setInternalState$1(that, {
	        type: CONSTRUCTOR_NAME,
	        id: id$1++,
	        frozen: undefined
	      });
	      if (iterable != undefined) iterate_1(iterable, that[ADDER], that, IS_MAP);
	    });

	    var getInternalState = internalStateGetterFor$1(CONSTRUCTOR_NAME);

	    var define = function (that, key, value) {
	      var state = getInternalState(that);
	      var data = getWeakData(anObject(key), true);
	      if (data === true) uncaughtFrozenStore(state).set(key, value);
	      else data[state.id] = value;
	      return that;
	    };

	    redefineAll(C.prototype, {
	      // 23.3.3.2 WeakMap.prototype.delete(key)
	      // 23.4.3.3 WeakSet.prototype.delete(value)
	      'delete': function (key) {
	        var state = getInternalState(this);
	        if (!isObject(key)) return false;
	        var data = getWeakData(key);
	        if (data === true) return uncaughtFrozenStore(state)['delete'](key);
	        return data && has(data, state.id) && delete data[state.id];
	      },
	      // 23.3.3.4 WeakMap.prototype.has(key)
	      // 23.4.3.4 WeakSet.prototype.has(value)
	      has: function has$1(key) {
	        var state = getInternalState(this);
	        if (!isObject(key)) return false;
	        var data = getWeakData(key);
	        if (data === true) return uncaughtFrozenStore(state).has(key);
	        return data && has(data, state.id);
	      }
	    });

	    redefineAll(C.prototype, IS_MAP ? {
	      // 23.3.3.3 WeakMap.prototype.get(key)
	      get: function get(key) {
	        var state = getInternalState(this);
	        if (isObject(key)) {
	          var data = getWeakData(key);
	          if (data === true) return uncaughtFrozenStore(state).get(key);
	          return data ? data[state.id] : undefined;
	        }
	      },
	      // 23.3.3.5 WeakMap.prototype.set(key, value)
	      set: function set(key, value) {
	        return define(this, key, value);
	      }
	    } : {
	      // 23.4.3.1 WeakSet.prototype.add(value)
	      add: function add(value) {
	        return define(this, value, true);
	      }
	    });

	    return C;
	  }
	};

	var es_weakMap = createCommonjsModule(function (module) {






	var enforceIternalState = internalState.enforce;


	var IS_IE11 = !global_1.ActiveXObject && 'ActiveXObject' in global_1;
	var isExtensible = Object.isExtensible;
	var InternalWeakMap;

	var wrapper = function (init) {
	  return function WeakMap() {
	    return init(this, arguments.length ? arguments[0] : undefined);
	  };
	};

	// `WeakMap` constructor
	// https://tc39.github.io/ecma262/#sec-weakmap-constructor
	var $WeakMap = module.exports = collection('WeakMap', wrapper, collectionWeak);

	// IE11 WeakMap frozen keys fix
	// We can't use feature detection because it crash some old IE builds
	// https://github.com/zloirock/core-js/issues/485
	if (nativeWeakMap && IS_IE11) {
	  InternalWeakMap = collectionWeak.getConstructor(wrapper, 'WeakMap', true);
	  internalMetadata.REQUIRED = true;
	  var WeakMapPrototype = $WeakMap.prototype;
	  var nativeDelete = WeakMapPrototype['delete'];
	  var nativeHas = WeakMapPrototype.has;
	  var nativeGet = WeakMapPrototype.get;
	  var nativeSet = WeakMapPrototype.set;
	  redefineAll(WeakMapPrototype, {
	    'delete': function (key) {
	      if (isObject(key) && !isExtensible(key)) {
	        var state = enforceIternalState(this);
	        if (!state.frozen) state.frozen = new InternalWeakMap();
	        return nativeDelete.call(this, key) || state.frozen['delete'](key);
	      } return nativeDelete.call(this, key);
	    },
	    has: function has(key) {
	      if (isObject(key) && !isExtensible(key)) {
	        var state = enforceIternalState(this);
	        if (!state.frozen) state.frozen = new InternalWeakMap();
	        return nativeHas.call(this, key) || state.frozen.has(key);
	      } return nativeHas.call(this, key);
	    },
	    get: function get(key) {
	      if (isObject(key) && !isExtensible(key)) {
	        var state = enforceIternalState(this);
	        if (!state.frozen) state.frozen = new InternalWeakMap();
	        return nativeHas.call(this, key) ? nativeGet.call(this, key) : state.frozen.get(key);
	      } return nativeGet.call(this, key);
	    },
	    set: function set(key, value) {
	      if (isObject(key) && !isExtensible(key)) {
	        var state = enforceIternalState(this);
	        if (!state.frozen) state.frozen = new InternalWeakMap();
	        nativeHas.call(this, key) ? nativeSet.call(this, key, value) : state.frozen.set(key, value);
	      } else nativeSet.call(this, key, value);
	      return this;
	    }
	  });
	}
	});

	// TODO: in core-js@4, move /modules/ dependencies to public entries for better optimization by tools like `preset-env`




	var metadata = shared('metadata');
	var store$2 = metadata.store || (metadata.store = new es_weakMap());

	var getOrCreateMetadataMap = function (target, targetKey, create) {
	  var targetMetadata = store$2.get(target);
	  if (!targetMetadata) {
	    if (!create) return;
	    store$2.set(target, targetMetadata = new es_map());
	  }
	  var keyMetadata = targetMetadata.get(targetKey);
	  if (!keyMetadata) {
	    if (!create) return;
	    targetMetadata.set(targetKey, keyMetadata = new es_map());
	  } return keyMetadata;
	};

	var ordinaryHasOwnMetadata = function (MetadataKey, O, P) {
	  var metadataMap = getOrCreateMetadataMap(O, P, false);
	  return metadataMap === undefined ? false : metadataMap.has(MetadataKey);
	};

	var ordinaryGetOwnMetadata = function (MetadataKey, O, P) {
	  var metadataMap = getOrCreateMetadataMap(O, P, false);
	  return metadataMap === undefined ? undefined : metadataMap.get(MetadataKey);
	};

	var ordinaryDefineOwnMetadata = function (MetadataKey, MetadataValue, O, P) {
	  getOrCreateMetadataMap(O, P, true).set(MetadataKey, MetadataValue);
	};

	var ordinaryOwnMetadataKeys = function (target, targetKey) {
	  var metadataMap = getOrCreateMetadataMap(target, targetKey, false);
	  var keys = [];
	  if (metadataMap) metadataMap.forEach(function (_, key) { keys.push(key); });
	  return keys;
	};

	var toMetadataKey = function (it) {
	  return it === undefined || typeof it == 'symbol' ? it : String(it);
	};

	var reflectMetadata = {
	  store: store$2,
	  getMap: getOrCreateMetadataMap,
	  has: ordinaryHasOwnMetadata,
	  get: ordinaryGetOwnMetadata,
	  set: ordinaryDefineOwnMetadata,
	  keys: ordinaryOwnMetadataKeys,
	  toKey: toMetadataKey
	};

	var toMetadataKey$1 = reflectMetadata.toKey;
	var ordinaryDefineOwnMetadata$1 = reflectMetadata.set;

	// `Reflect.defineMetadata` method
	// https://github.com/rbuckton/reflect-metadata
	_export({ target: 'Reflect', stat: true }, {
	  defineMetadata: function defineMetadata(metadataKey, metadataValue, target /* , targetKey */) {
	    var targetKey = arguments.length < 4 ? undefined : toMetadataKey$1(arguments[3]);
	    ordinaryDefineOwnMetadata$1(metadataKey, metadataValue, anObject(target), targetKey);
	  }
	});

	var toMetadataKey$2 = reflectMetadata.toKey;
	var getOrCreateMetadataMap$1 = reflectMetadata.getMap;
	var store$3 = reflectMetadata.store;

	// `Reflect.deleteMetadata` method
	// https://github.com/rbuckton/reflect-metadata
	_export({ target: 'Reflect', stat: true }, {
	  deleteMetadata: function deleteMetadata(metadataKey, target /* , targetKey */) {
	    var targetKey = arguments.length < 3 ? undefined : toMetadataKey$2(arguments[2]);
	    var metadataMap = getOrCreateMetadataMap$1(anObject(target), targetKey, false);
	    if (metadataMap === undefined || !metadataMap['delete'](metadataKey)) return false;
	    if (metadataMap.size) return true;
	    var targetMetadata = store$3.get(target);
	    targetMetadata['delete'](targetKey);
	    return !!targetMetadata.size || store$3['delete'](target);
	  }
	});

	var ordinaryHasOwnMetadata$1 = reflectMetadata.has;
	var ordinaryGetOwnMetadata$1 = reflectMetadata.get;
	var toMetadataKey$3 = reflectMetadata.toKey;

	var ordinaryGetMetadata = function (MetadataKey, O, P) {
	  var hasOwn = ordinaryHasOwnMetadata$1(MetadataKey, O, P);
	  if (hasOwn) return ordinaryGetOwnMetadata$1(MetadataKey, O, P);
	  var parent = objectGetPrototypeOf(O);
	  return parent !== null ? ordinaryGetMetadata(MetadataKey, parent, P) : undefined;
	};

	// `Reflect.getMetadata` method
	// https://github.com/rbuckton/reflect-metadata
	_export({ target: 'Reflect', stat: true }, {
	  getMetadata: function getMetadata(metadataKey, target /* , targetKey */) {
	    var targetKey = arguments.length < 3 ? undefined : toMetadataKey$3(arguments[2]);
	    return ordinaryGetMetadata(metadataKey, anObject(target), targetKey);
	  }
	});

	// `Set` constructor
	// https://tc39.github.io/ecma262/#sec-set-objects
	var es_set = collection('Set', function (init) {
	  return function Set() { return init(this, arguments.length ? arguments[0] : undefined); };
	}, collectionStrong);

	// TODO: in core-js@4, move /modules/ dependencies to public entries for better optimization by tools like `preset-env`






	var ordinaryOwnMetadataKeys$1 = reflectMetadata.keys;
	var toMetadataKey$4 = reflectMetadata.toKey;

	var from = function (iter) {
	  var result = [];
	  iterate_1(iter, result.push, result);
	  return result;
	};

	var ordinaryMetadataKeys = function (O, P) {
	  var oKeys = ordinaryOwnMetadataKeys$1(O, P);
	  var parent = objectGetPrototypeOf(O);
	  if (parent === null) return oKeys;
	  var pKeys = ordinaryMetadataKeys(parent, P);
	  return pKeys.length ? oKeys.length ? from(new es_set(oKeys.concat(pKeys))) : pKeys : oKeys;
	};

	// `Reflect.getMetadataKeys` method
	// https://github.com/rbuckton/reflect-metadata
	_export({ target: 'Reflect', stat: true }, {
	  getMetadataKeys: function getMetadataKeys(target /* , targetKey */) {
	    var targetKey = arguments.length < 2 ? undefined : toMetadataKey$4(arguments[1]);
	    return ordinaryMetadataKeys(anObject(target), targetKey);
	  }
	});

	var ordinaryGetOwnMetadata$2 = reflectMetadata.get;
	var toMetadataKey$5 = reflectMetadata.toKey;

	// `Reflect.getOwnMetadata` method
	// https://github.com/rbuckton/reflect-metadata
	_export({ target: 'Reflect', stat: true }, {
	  getOwnMetadata: function getOwnMetadata(metadataKey, target /* , targetKey */) {
	    var targetKey = arguments.length < 3 ? undefined : toMetadataKey$5(arguments[2]);
	    return ordinaryGetOwnMetadata$2(metadataKey, anObject(target), targetKey);
	  }
	});

	var ordinaryOwnMetadataKeys$2 = reflectMetadata.keys;
	var toMetadataKey$6 = reflectMetadata.toKey;

	// `Reflect.getOwnMetadataKeys` method
	// https://github.com/rbuckton/reflect-metadata
	_export({ target: 'Reflect', stat: true }, {
	  getOwnMetadataKeys: function getOwnMetadataKeys(target /* , targetKey */) {
	    var targetKey = arguments.length < 2 ? undefined : toMetadataKey$6(arguments[1]);
	    return ordinaryOwnMetadataKeys$2(anObject(target), targetKey);
	  }
	});

	var ordinaryHasOwnMetadata$2 = reflectMetadata.has;
	var toMetadataKey$7 = reflectMetadata.toKey;

	var ordinaryHasMetadata = function (MetadataKey, O, P) {
	  var hasOwn = ordinaryHasOwnMetadata$2(MetadataKey, O, P);
	  if (hasOwn) return true;
	  var parent = objectGetPrototypeOf(O);
	  return parent !== null ? ordinaryHasMetadata(MetadataKey, parent, P) : false;
	};

	// `Reflect.hasMetadata` method
	// https://github.com/rbuckton/reflect-metadata
	_export({ target: 'Reflect', stat: true }, {
	  hasMetadata: function hasMetadata(metadataKey, target /* , targetKey */) {
	    var targetKey = arguments.length < 3 ? undefined : toMetadataKey$7(arguments[2]);
	    return ordinaryHasMetadata(metadataKey, anObject(target), targetKey);
	  }
	});

	var ordinaryHasOwnMetadata$3 = reflectMetadata.has;
	var toMetadataKey$8 = reflectMetadata.toKey;

	// `Reflect.hasOwnMetadata` method
	// https://github.com/rbuckton/reflect-metadata
	_export({ target: 'Reflect', stat: true }, {
	  hasOwnMetadata: function hasOwnMetadata(metadataKey, target /* , targetKey */) {
	    var targetKey = arguments.length < 3 ? undefined : toMetadataKey$8(arguments[2]);
	    return ordinaryHasOwnMetadata$3(metadataKey, anObject(target), targetKey);
	  }
	});

	var toMetadataKey$9 = reflectMetadata.toKey;
	var ordinaryDefineOwnMetadata$2 = reflectMetadata.set;

	// `Reflect.metadata` method
	// https://github.com/rbuckton/reflect-metadata
	_export({ target: 'Reflect', stat: true }, {
	  metadata: function metadata(metadataKey, metadataValue) {
	    return function decorator(target, key) {
	      ordinaryDefineOwnMetadata$2(metadataKey, metadataValue, anObject(target), toMetadataKey$9(key));
	    };
	  }
	});

	/**
	* @license Angular v9.1.0-next.4+61.sha-e552591.with-local-changes
	* (c) 2010-2020 Google LLC. https://angular.io/
	* License: MIT
	*/
	(function (factory) {
	    
	        factory();
	}((function () {
	    /**
	     * @license
	     * Copyright Google Inc. All Rights Reserved.
	     *
	     * Use of this source code is governed by an MIT-style license that can be
	     * found in the LICENSE file at https://angular.io/license
	     */
	    var Zone$1 = (function (global) {
	        var performance = global['performance'];
	        function mark(name) { performance && performance['mark'] && performance['mark'](name); }
	        function performanceMeasure(name, label) {
	            performance && performance['measure'] && performance['measure'](name, label);
	        }
	        mark('Zone');
	        // Initialize before it's accessed below.
	        // __Zone_symbol_prefix global can be used to override the default zone
	        // symbol prefix with a custom one if needed.
	        var symbolPrefix = global['__Zone_symbol_prefix'] || '__zone_symbol__';
	        function __symbol__(name) { return symbolPrefix + name; }
	        var checkDuplicate = global[__symbol__('forceDuplicateZoneCheck')] === true;
	        if (global['Zone']) {
	            // if global['Zone'] already exists (maybe zone.js was already loaded or
	            // some other lib also registered a global object named Zone), we may need
	            // to throw an error, but sometimes user may not want this error.
	            // For example,
	            // we have two web pages, page1 includes zone.js, page2 doesn't.
	            // and the 1st time user load page1 and page2, everything work fine,
	            // but when user load page2 again, error occurs because global['Zone'] already exists.
	            // so we add a flag to let user choose whether to throw this error or not.
	            // By default, if existing Zone is from zone.js, we will not throw the error.
	            if (checkDuplicate || typeof global['Zone'].__symbol__ !== 'function') {
	                throw new Error('Zone already loaded.');
	            }
	            else {
	                return global['Zone'];
	            }
	        }
	        var Zone = /** @class */ (function () {
	            function Zone(parent, zoneSpec) {
	                this._parent = parent;
	                this._name = zoneSpec ? zoneSpec.name || 'unnamed' : '<root>';
	                this._properties = zoneSpec && zoneSpec.properties || {};
	                this._zoneDelegate =
	                    new ZoneDelegate(this, this._parent && this._parent._zoneDelegate, zoneSpec);
	            }
	            Zone.assertZonePatched = function () {
	                if (global['Promise'] !== patches['ZoneAwarePromise']) {
	                    throw new Error('Zone.js has detected that ZoneAwarePromise `(window|global).Promise` ' +
	                        'has been overwritten.\n' +
	                        'Most likely cause is that a Promise polyfill has been loaded ' +
	                        'after Zone.js (Polyfilling Promise api is not necessary when zone.js is loaded. ' +
	                        'If you must load one, do so before loading zone.js.)');
	                }
	            };
	            Object.defineProperty(Zone, "root", {
	                get: function () {
	                    var zone = Zone.current;
	                    while (zone.parent) {
	                        zone = zone.parent;
	                    }
	                    return zone;
	                },
	                enumerable: true,
	                configurable: true
	            });
	            Object.defineProperty(Zone, "current", {
	                get: function () { return _currentZoneFrame.zone; },
	                enumerable: true,
	                configurable: true
	            });
	            Object.defineProperty(Zone, "currentTask", {
	                get: function () { return _currentTask; },
	                enumerable: true,
	                configurable: true
	            });
	            // tslint:disable-next-line:require-internal-with-underscore
	            Zone.__load_patch = function (name, fn) {
	                if (patches.hasOwnProperty(name)) {
	                    if (checkDuplicate) {
	                        throw Error('Already loaded patch: ' + name);
	                    }
	                }
	                else if (!global['__Zone_disable_' + name]) {
	                    var perfName = 'Zone:' + name;
	                    mark(perfName);
	                    patches[name] = fn(global, Zone, _api);
	                    performanceMeasure(perfName, perfName);
	                }
	            };
	            Object.defineProperty(Zone.prototype, "parent", {
	                get: function () { return this._parent; },
	                enumerable: true,
	                configurable: true
	            });
	            Object.defineProperty(Zone.prototype, "name", {
	                get: function () { return this._name; },
	                enumerable: true,
	                configurable: true
	            });
	            Zone.prototype.get = function (key) {
	                var zone = this.getZoneWith(key);
	                if (zone)
	                    return zone._properties[key];
	            };
	            Zone.prototype.getZoneWith = function (key) {
	                var current = this;
	                while (current) {
	                    if (current._properties.hasOwnProperty(key)) {
	                        return current;
	                    }
	                    current = current._parent;
	                }
	                return null;
	            };
	            Zone.prototype.fork = function (zoneSpec) {
	                if (!zoneSpec)
	                    throw new Error('ZoneSpec required!');
	                return this._zoneDelegate.fork(this, zoneSpec);
	            };
	            Zone.prototype.wrap = function (callback, source) {
	                if (typeof callback !== 'function') {
	                    throw new Error('Expecting function got: ' + callback);
	                }
	                var _callback = this._zoneDelegate.intercept(this, callback, source);
	                var zone = this;
	                return function () {
	                    return zone.runGuarded(_callback, this, arguments, source);
	                };
	            };
	            Zone.prototype.run = function (callback, applyThis, applyArgs, source) {
	                _currentZoneFrame = { parent: _currentZoneFrame, zone: this };
	                try {
	                    return this._zoneDelegate.invoke(this, callback, applyThis, applyArgs, source);
	                }
	                finally {
	                    _currentZoneFrame = _currentZoneFrame.parent;
	                }
	            };
	            Zone.prototype.runGuarded = function (callback, applyThis, applyArgs, source) {
	                if (applyThis === void 0) { applyThis = null; }
	                _currentZoneFrame = { parent: _currentZoneFrame, zone: this };
	                try {
	                    try {
	                        return this._zoneDelegate.invoke(this, callback, applyThis, applyArgs, source);
	                    }
	                    catch (error) {
	                        if (this._zoneDelegate.handleError(this, error)) {
	                            throw error;
	                        }
	                    }
	                }
	                finally {
	                    _currentZoneFrame = _currentZoneFrame.parent;
	                }
	            };
	            Zone.prototype.runTask = function (task, applyThis, applyArgs) {
	                if (task.zone != this) {
	                    throw new Error('A task can only be run in the zone of creation! (Creation: ' +
	                        (task.zone || NO_ZONE).name + '; Execution: ' + this.name + ')');
	                }
	                // https://github.com/angular/zone.js/issues/778, sometimes eventTask
	                // will run in notScheduled(canceled) state, we should not try to
	                // run such kind of task but just return
	                if (task.state === notScheduled && (task.type === eventTask || task.type === macroTask)) {
	                    return;
	                }
	                var reEntryGuard = task.state != running;
	                reEntryGuard && task._transitionTo(running, scheduled);
	                task.runCount++;
	                var previousTask = _currentTask;
	                _currentTask = task;
	                _currentZoneFrame = { parent: _currentZoneFrame, zone: this };
	                try {
	                    if (task.type == macroTask && task.data && !task.data.isPeriodic) {
	                        task.cancelFn = undefined;
	                    }
	                    try {
	                        return this._zoneDelegate.invokeTask(this, task, applyThis, applyArgs);
	                    }
	                    catch (error) {
	                        if (this._zoneDelegate.handleError(this, error)) {
	                            throw error;
	                        }
	                    }
	                }
	                finally {
	                    // if the task's state is notScheduled or unknown, then it has already been cancelled
	                    // we should not reset the state to scheduled
	                    if (task.state !== notScheduled && task.state !== unknown) {
	                        if (task.type == eventTask || (task.data && task.data.isPeriodic)) {
	                            reEntryGuard && task._transitionTo(scheduled, running);
	                        }
	                        else {
	                            task.runCount = 0;
	                            this._updateTaskCount(task, -1);
	                            reEntryGuard &&
	                                task._transitionTo(notScheduled, running, notScheduled);
	                        }
	                    }
	                    _currentZoneFrame = _currentZoneFrame.parent;
	                    _currentTask = previousTask;
	                }
	            };
	            Zone.prototype.scheduleTask = function (task) {
	                if (task.zone && task.zone !== this) {
	                    // check if the task was rescheduled, the newZone
	                    // should not be the children of the original zone
	                    var newZone = this;
	                    while (newZone) {
	                        if (newZone === task.zone) {
	                            throw Error("can not reschedule task to " + this.name + " which is descendants of the original zone " + task.zone.name);
	                        }
	                        newZone = newZone.parent;
	                    }
	                }
	                task._transitionTo(scheduling, notScheduled);
	                var zoneDelegates = [];
	                task._zoneDelegates = zoneDelegates;
	                task._zone = this;
	                try {
	                    task = this._zoneDelegate.scheduleTask(this, task);
	                }
	                catch (err) {
	                    // should set task's state to unknown when scheduleTask throw error
	                    // because the err may from reschedule, so the fromState maybe notScheduled
	                    task._transitionTo(unknown, scheduling, notScheduled);
	                    // TODO: @JiaLiPassion, should we check the result from handleError?
	                    this._zoneDelegate.handleError(this, err);
	                    throw err;
	                }
	                if (task._zoneDelegates === zoneDelegates) {
	                    // we have to check because internally the delegate can reschedule the task.
	                    this._updateTaskCount(task, 1);
	                }
	                if (task.state == scheduling) {
	                    task._transitionTo(scheduled, scheduling);
	                }
	                return task;
	            };
	            Zone.prototype.scheduleMicroTask = function (source, callback, data, customSchedule) {
	                return this.scheduleTask(new ZoneTask(microTask, source, callback, data, customSchedule, undefined));
	            };
	            Zone.prototype.scheduleMacroTask = function (source, callback, data, customSchedule, customCancel) {
	                return this.scheduleTask(new ZoneTask(macroTask, source, callback, data, customSchedule, customCancel));
	            };
	            Zone.prototype.scheduleEventTask = function (source, callback, data, customSchedule, customCancel) {
	                return this.scheduleTask(new ZoneTask(eventTask, source, callback, data, customSchedule, customCancel));
	            };
	            Zone.prototype.cancelTask = function (task) {
	                if (task.zone != this)
	                    throw new Error('A task can only be cancelled in the zone of creation! (Creation: ' +
	                        (task.zone || NO_ZONE).name + '; Execution: ' + this.name + ')');
	                task._transitionTo(canceling, scheduled, running);
	                try {
	                    this._zoneDelegate.cancelTask(this, task);
	                }
	                catch (err) {
	                    // if error occurs when cancelTask, transit the state to unknown
	                    task._transitionTo(unknown, canceling);
	                    this._zoneDelegate.handleError(this, err);
	                    throw err;
	                }
	                this._updateTaskCount(task, -1);
	                task._transitionTo(notScheduled, canceling);
	                task.runCount = 0;
	                return task;
	            };
	            Zone.prototype._updateTaskCount = function (task, count) {
	                var zoneDelegates = task._zoneDelegates;
	                if (count == -1) {
	                    task._zoneDelegates = null;
	                }
	                for (var i = 0; i < zoneDelegates.length; i++) {
	                    zoneDelegates[i]._updateTaskCount(task.type, count);
	                }
	            };
	            return Zone;
	        }());
	        // tslint:disable-next-line:require-internal-with-underscore
	        Zone.__symbol__ = __symbol__;
	        var DELEGATE_ZS = {
	            name: '',
	            onHasTask: function (delegate, _, target, hasTaskState) { return delegate.hasTask(target, hasTaskState); },
	            onScheduleTask: function (delegate, _, target, task) { return delegate.scheduleTask(target, task); },
	            onInvokeTask: function (delegate, _, target, task, applyThis, applyArgs) { return delegate.invokeTask(target, task, applyThis, applyArgs); },
	            onCancelTask: function (delegate, _, target, task) { return delegate.cancelTask(target, task); }
	        };
	        var ZoneDelegate = /** @class */ (function () {
	            function ZoneDelegate(zone, parentDelegate, zoneSpec) {
	                this._taskCounts = { 'microTask': 0, 'macroTask': 0, 'eventTask': 0 };
	                this.zone = zone;
	                this._parentDelegate = parentDelegate;
	                this._forkZS =
	                    zoneSpec && (zoneSpec && zoneSpec.onFork ? zoneSpec : parentDelegate._forkZS);
	                this._forkDlgt = zoneSpec && (zoneSpec.onFork ? parentDelegate : parentDelegate._forkDlgt);
	                this._forkCurrZone =
	                    zoneSpec && (zoneSpec.onFork ? this.zone : parentDelegate._forkCurrZone);
	                this._interceptZS =
	                    zoneSpec && (zoneSpec.onIntercept ? zoneSpec : parentDelegate._interceptZS);
	                this._interceptDlgt =
	                    zoneSpec && (zoneSpec.onIntercept ? parentDelegate : parentDelegate._interceptDlgt);
	                this._interceptCurrZone =
	                    zoneSpec && (zoneSpec.onIntercept ? this.zone : parentDelegate._interceptCurrZone);
	                this._invokeZS = zoneSpec && (zoneSpec.onInvoke ? zoneSpec : parentDelegate._invokeZS);
	                this._invokeDlgt =
	                    zoneSpec && (zoneSpec.onInvoke ? parentDelegate : parentDelegate._invokeDlgt);
	                this._invokeCurrZone =
	                    zoneSpec && (zoneSpec.onInvoke ? this.zone : parentDelegate._invokeCurrZone);
	                this._handleErrorZS =
	                    zoneSpec && (zoneSpec.onHandleError ? zoneSpec : parentDelegate._handleErrorZS);
	                this._handleErrorDlgt = zoneSpec &&
	                    (zoneSpec.onHandleError ? parentDelegate : parentDelegate._handleErrorDlgt);
	                this._handleErrorCurrZone =
	                    zoneSpec && (zoneSpec.onHandleError ? this.zone : parentDelegate._handleErrorCurrZone);
	                this._scheduleTaskZS =
	                    zoneSpec && (zoneSpec.onScheduleTask ? zoneSpec : parentDelegate._scheduleTaskZS);
	                this._scheduleTaskDlgt = zoneSpec &&
	                    (zoneSpec.onScheduleTask ? parentDelegate : parentDelegate._scheduleTaskDlgt);
	                this._scheduleTaskCurrZone = zoneSpec &&
	                    (zoneSpec.onScheduleTask ? this.zone : parentDelegate._scheduleTaskCurrZone);
	                this._invokeTaskZS =
	                    zoneSpec && (zoneSpec.onInvokeTask ? zoneSpec : parentDelegate._invokeTaskZS);
	                this._invokeTaskDlgt =
	                    zoneSpec && (zoneSpec.onInvokeTask ? parentDelegate : parentDelegate._invokeTaskDlgt);
	                this._invokeTaskCurrZone =
	                    zoneSpec && (zoneSpec.onInvokeTask ? this.zone : parentDelegate._invokeTaskCurrZone);
	                this._cancelTaskZS =
	                    zoneSpec && (zoneSpec.onCancelTask ? zoneSpec : parentDelegate._cancelTaskZS);
	                this._cancelTaskDlgt =
	                    zoneSpec && (zoneSpec.onCancelTask ? parentDelegate : parentDelegate._cancelTaskDlgt);
	                this._cancelTaskCurrZone =
	                    zoneSpec && (zoneSpec.onCancelTask ? this.zone : parentDelegate._cancelTaskCurrZone);
	                this._hasTaskZS = null;
	                this._hasTaskDlgt = null;
	                this._hasTaskDlgtOwner = null;
	                this._hasTaskCurrZone = null;
	                var zoneSpecHasTask = zoneSpec && zoneSpec.onHasTask;
	                var parentHasTask = parentDelegate && parentDelegate._hasTaskZS;
	                if (zoneSpecHasTask || parentHasTask) {
	                    // If we need to report hasTask, than this ZS needs to do ref counting on tasks. In such
	                    // a case all task related interceptors must go through this ZD. We can't short circuit it.
	                    this._hasTaskZS = zoneSpecHasTask ? zoneSpec : DELEGATE_ZS;
	                    this._hasTaskDlgt = parentDelegate;
	                    this._hasTaskDlgtOwner = this;
	                    this._hasTaskCurrZone = zone;
	                    if (!zoneSpec.onScheduleTask) {
	                        this._scheduleTaskZS = DELEGATE_ZS;
	                        this._scheduleTaskDlgt = parentDelegate;
	                        this._scheduleTaskCurrZone = this.zone;
	                    }
	                    if (!zoneSpec.onInvokeTask) {
	                        this._invokeTaskZS = DELEGATE_ZS;
	                        this._invokeTaskDlgt = parentDelegate;
	                        this._invokeTaskCurrZone = this.zone;
	                    }
	                    if (!zoneSpec.onCancelTask) {
	                        this._cancelTaskZS = DELEGATE_ZS;
	                        this._cancelTaskDlgt = parentDelegate;
	                        this._cancelTaskCurrZone = this.zone;
	                    }
	                }
	            }
	            ZoneDelegate.prototype.fork = function (targetZone, zoneSpec) {
	                return this._forkZS ?
	                    this._forkZS.onFork(this._forkDlgt, this.zone, targetZone, zoneSpec) :
	                    new Zone(targetZone, zoneSpec);
	            };
	            ZoneDelegate.prototype.intercept = function (targetZone, callback, source) {
	                return this._interceptZS ?
	                    this._interceptZS.onIntercept(this._interceptDlgt, this._interceptCurrZone, targetZone, callback, source) :
	                    callback;
	            };
	            ZoneDelegate.prototype.invoke = function (targetZone, callback, applyThis, applyArgs, source) {
	                return this._invokeZS ?
	                    this._invokeZS.onInvoke(this._invokeDlgt, this._invokeCurrZone, targetZone, callback, applyThis, applyArgs, source) :
	                    callback.apply(applyThis, applyArgs);
	            };
	            ZoneDelegate.prototype.handleError = function (targetZone, error) {
	                return this._handleErrorZS ?
	                    this._handleErrorZS.onHandleError(this._handleErrorDlgt, this._handleErrorCurrZone, targetZone, error) :
	                    true;
	            };
	            ZoneDelegate.prototype.scheduleTask = function (targetZone, task) {
	                var returnTask = task;
	                if (this._scheduleTaskZS) {
	                    if (this._hasTaskZS) {
	                        returnTask._zoneDelegates.push(this._hasTaskDlgtOwner);
	                    }
	                    // clang-format off
	                    returnTask = this._scheduleTaskZS.onScheduleTask(this._scheduleTaskDlgt, this._scheduleTaskCurrZone, targetZone, task);
	                    // clang-format on
	                    if (!returnTask)
	                        returnTask = task;
	                }
	                else {
	                    if (task.scheduleFn) {
	                        task.scheduleFn(task);
	                    }
	                    else if (task.type == microTask) {
	                        scheduleMicroTask(task);
	                    }
	                    else {
	                        throw new Error('Task is missing scheduleFn.');
	                    }
	                }
	                return returnTask;
	            };
	            ZoneDelegate.prototype.invokeTask = function (targetZone, task, applyThis, applyArgs) {
	                return this._invokeTaskZS ?
	                    this._invokeTaskZS.onInvokeTask(this._invokeTaskDlgt, this._invokeTaskCurrZone, targetZone, task, applyThis, applyArgs) :
	                    task.callback.apply(applyThis, applyArgs);
	            };
	            ZoneDelegate.prototype.cancelTask = function (targetZone, task) {
	                var value;
	                if (this._cancelTaskZS) {
	                    value = this._cancelTaskZS.onCancelTask(this._cancelTaskDlgt, this._cancelTaskCurrZone, targetZone, task);
	                }
	                else {
	                    if (!task.cancelFn) {
	                        throw Error('Task is not cancelable');
	                    }
	                    value = task.cancelFn(task);
	                }
	                return value;
	            };
	            ZoneDelegate.prototype.hasTask = function (targetZone, isEmpty) {
	                // hasTask should not throw error so other ZoneDelegate
	                // can still trigger hasTask callback
	                try {
	                    this._hasTaskZS &&
	                        this._hasTaskZS.onHasTask(this._hasTaskDlgt, this._hasTaskCurrZone, targetZone, isEmpty);
	                }
	                catch (err) {
	                    this.handleError(targetZone, err);
	                }
	            };
	            // tslint:disable-next-line:require-internal-with-underscore
	            ZoneDelegate.prototype._updateTaskCount = function (type, count) {
	                var counts = this._taskCounts;
	                var prev = counts[type];
	                var next = counts[type] = prev + count;
	                if (next < 0) {
	                    throw new Error('More tasks executed then were scheduled.');
	                }
	                if (prev == 0 || next == 0) {
	                    var isEmpty = {
	                        microTask: counts['microTask'] > 0,
	                        macroTask: counts['macroTask'] > 0,
	                        eventTask: counts['eventTask'] > 0,
	                        change: type
	                    };
	                    this.hasTask(this.zone, isEmpty);
	                }
	            };
	            return ZoneDelegate;
	        }());
	        var ZoneTask = /** @class */ (function () {
	            function ZoneTask(type, source, callback, options, scheduleFn, cancelFn) {
	                // tslint:disable-next-line:require-internal-with-underscore
	                this._zone = null;
	                this.runCount = 0;
	                // tslint:disable-next-line:require-internal-with-underscore
	                this._zoneDelegates = null;
	                // tslint:disable-next-line:require-internal-with-underscore
	                this._state = 'notScheduled';
	                this.type = type;
	                this.source = source;
	                this.data = options;
	                this.scheduleFn = scheduleFn;
	                this.cancelFn = cancelFn;
	                if (!callback) {
	                    throw new Error('callback is not defined');
	                }
	                this.callback = callback;
	                var self = this;
	                // TODO: @JiaLiPassion options should have interface
	                if (type === eventTask && options && options.useG) {
	                    this.invoke = ZoneTask.invokeTask;
	                }
	                else {
	                    this.invoke = function () {
	                        return ZoneTask.invokeTask.call(global, self, this, arguments);
	                    };
	                }
	            }
	            ZoneTask.invokeTask = function (task, target, args) {
	                if (!task) {
	                    task = this;
	                }
	                _numberOfNestedTaskFrames++;
	                try {
	                    task.runCount++;
	                    return task.zone.runTask(task, target, args);
	                }
	                finally {
	                    if (_numberOfNestedTaskFrames == 1) {
	                        drainMicroTaskQueue();
	                    }
	                    _numberOfNestedTaskFrames--;
	                }
	            };
	            Object.defineProperty(ZoneTask.prototype, "zone", {
	                get: function () { return this._zone; },
	                enumerable: true,
	                configurable: true
	            });
	            Object.defineProperty(ZoneTask.prototype, "state", {
	                get: function () { return this._state; },
	                enumerable: true,
	                configurable: true
	            });
	            ZoneTask.prototype.cancelScheduleRequest = function () { this._transitionTo(notScheduled, scheduling); };
	            // tslint:disable-next-line:require-internal-with-underscore
	            ZoneTask.prototype._transitionTo = function (toState, fromState1, fromState2) {
	                if (this._state === fromState1 || this._state === fromState2) {
	                    this._state = toState;
	                    if (toState == notScheduled) {
	                        this._zoneDelegates = null;
	                    }
	                }
	                else {
	                    throw new Error(this.type + " '" + this.source + "': can not transition to '" + toState + "', expecting state '" + fromState1 + "'" + (fromState2 ? ' or \'' + fromState2 + '\'' : '') + ", was '" + this._state + "'.");
	                }
	            };
	            ZoneTask.prototype.toString = function () {
	                if (this.data && typeof this.data.handleId !== 'undefined') {
	                    return this.data.handleId.toString();
	                }
	                else {
	                    return Object.prototype.toString.call(this);
	                }
	            };
	            // add toJSON method to prevent cyclic error when
	            // call JSON.stringify(zoneTask)
	            ZoneTask.prototype.toJSON = function () {
	                return {
	                    type: this.type,
	                    state: this.state,
	                    source: this.source,
	                    zone: this.zone.name,
	                    runCount: this.runCount
	                };
	            };
	            return ZoneTask;
	        }());
	        //////////////////////////////////////////////////////
	        //////////////////////////////////////////////////////
	        ///  MICROTASK QUEUE
	        //////////////////////////////////////////////////////
	        //////////////////////////////////////////////////////
	        var symbolSetTimeout = __symbol__('setTimeout');
	        var symbolPromise = __symbol__('Promise');
	        var symbolThen = __symbol__('then');
	        var _microTaskQueue = [];
	        var _isDrainingMicrotaskQueue = false;
	        var nativeMicroTaskQueuePromise;
	        function scheduleMicroTask(task) {
	            // if we are not running in any task, and there has not been anything scheduled
	            // we must bootstrap the initial task creation by manually scheduling the drain
	            if (_numberOfNestedTaskFrames === 0 && _microTaskQueue.length === 0) {
	                // We are not running in Task, so we need to kickstart the microtask queue.
	                if (!nativeMicroTaskQueuePromise) {
	                    if (global[symbolPromise]) {
	                        nativeMicroTaskQueuePromise = global[symbolPromise].resolve(0);
	                    }
	                }
	                if (nativeMicroTaskQueuePromise) {
	                    var nativeThen = nativeMicroTaskQueuePromise[symbolThen];
	                    if (!nativeThen) {
	                        // native Promise is not patchable, we need to use `then` directly
	                        // issue 1078
	                        nativeThen = nativeMicroTaskQueuePromise['then'];
	                    }
	                    nativeThen.call(nativeMicroTaskQueuePromise, drainMicroTaskQueue);
	                }
	                else {
	                    global[symbolSetTimeout](drainMicroTaskQueue, 0);
	                }
	            }
	            task && _microTaskQueue.push(task);
	        }
	        function drainMicroTaskQueue() {
	            if (!_isDrainingMicrotaskQueue) {
	                _isDrainingMicrotaskQueue = true;
	                while (_microTaskQueue.length) {
	                    var queue = _microTaskQueue;
	                    _microTaskQueue = [];
	                    for (var i = 0; i < queue.length; i++) {
	                        var task = queue[i];
	                        try {
	                            task.zone.runTask(task, null, null);
	                        }
	                        catch (error) {
	                            _api.onUnhandledError(error);
	                        }
	                    }
	                }
	                _api.microtaskDrainDone();
	                _isDrainingMicrotaskQueue = false;
	            }
	        }
	        //////////////////////////////////////////////////////
	        //////////////////////////////////////////////////////
	        ///  BOOTSTRAP
	        //////////////////////////////////////////////////////
	        //////////////////////////////////////////////////////
	        var NO_ZONE = { name: 'NO ZONE' };
	        var notScheduled = 'notScheduled', scheduling = 'scheduling', scheduled = 'scheduled', running = 'running', canceling = 'canceling', unknown = 'unknown';
	        var microTask = 'microTask', macroTask = 'macroTask', eventTask = 'eventTask';
	        var patches = {};
	        var _api = {
	            symbol: __symbol__,
	            currentZoneFrame: function () { return _currentZoneFrame; },
	            onUnhandledError: noop,
	            microtaskDrainDone: noop,
	            scheduleMicroTask: scheduleMicroTask,
	            showUncaughtError: function () { return !Zone[__symbol__('ignoreConsoleErrorUncaughtError')]; },
	            patchEventTarget: function () { return []; },
	            patchOnProperties: noop,
	            patchMethod: function () { return noop; },
	            bindArguments: function () { return []; },
	            patchThen: function () { return noop; },
	            patchMacroTask: function () { return noop; },
	            setNativePromise: function (NativePromise) {
	                // sometimes NativePromise.resolve static function
	                // is not ready yet, (such as core-js/es6.promise)
	                // so we need to check here.
	                if (NativePromise && typeof NativePromise.resolve === 'function') {
	                    nativeMicroTaskQueuePromise = NativePromise.resolve(0);
	                }
	            },
	            patchEventPrototype: function () { return noop; },
	            isIEOrEdge: function () { return false; },
	            getGlobalObjects: function () { return undefined; },
	            ObjectDefineProperty: function () { return noop; },
	            ObjectGetOwnPropertyDescriptor: function () { return undefined; },
	            ObjectCreate: function () { return undefined; },
	            ArraySlice: function () { return []; },
	            patchClass: function () { return noop; },
	            wrapWithCurrentZone: function () { return noop; },
	            filterProperties: function () { return []; },
	            attachOriginToPatched: function () { return noop; },
	            _redefineProperty: function () { return noop; },
	            patchCallbacks: function () { return noop; }
	        };
	        var _currentZoneFrame = { parent: null, zone: new Zone(null, null) };
	        var _currentTask = null;
	        var _numberOfNestedTaskFrames = 0;
	        function noop() { }
	        performanceMeasure('Zone', 'Zone');
	        return global['Zone'] = Zone;
	    })(typeof window !== 'undefined' && window || typeof self !== 'undefined' && self || commonjsGlobal);
	    /**
	     * @license
	     * Copyright Google Inc. All Rights Reserved.
	     *
	     * Use of this source code is governed by an MIT-style license that can be
	     * found in the LICENSE file at https://angular.io/license
	     */
	    Zone.__load_patch('ZoneAwarePromise', function (global, Zone, api) {
	        var ObjectGetOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;
	        var ObjectDefineProperty = Object.defineProperty;
	        function readableObjectToString(obj) {
	            if (obj && obj.toString === Object.prototype.toString) {
	                var className = obj.constructor && obj.constructor.name;
	                return (className ? className : '') + ': ' + JSON.stringify(obj);
	            }
	            return obj ? obj.toString() : Object.prototype.toString.call(obj);
	        }
	        var __symbol__ = api.symbol;
	        var _uncaughtPromiseErrors = [];
	        var isDisableWrappingUncaughtPromiseRejection = global[__symbol__('DISABLE_WRAPPING_UNCAUGHT_PROMISE_REJECTION')] === true;
	        var symbolPromise = __symbol__('Promise');
	        var symbolThen = __symbol__('then');
	        var creationTrace = '__creationTrace__';
	        api.onUnhandledError = function (e) {
	            if (api.showUncaughtError()) {
	                var rejection = e && e.rejection;
	                if (rejection) {
	                    console.error('Unhandled Promise rejection:', rejection instanceof Error ? rejection.message : rejection, '; Zone:', e.zone.name, '; Task:', e.task && e.task.source, '; Value:', rejection, rejection instanceof Error ? rejection.stack : undefined);
	                }
	                else {
	                    console.error(e);
	                }
	            }
	        };
	        api.microtaskDrainDone = function () {
	            var _loop_1 = function () {
	                var uncaughtPromiseError = _uncaughtPromiseErrors.shift();
	                try {
	                    uncaughtPromiseError.zone.runGuarded(function () { throw uncaughtPromiseError; });
	                }
	                catch (error) {
	                    handleUnhandledRejection(error);
	                }
	            };
	            while (_uncaughtPromiseErrors.length) {
	                _loop_1();
	            }
	        };
	        var UNHANDLED_PROMISE_REJECTION_HANDLER_SYMBOL = __symbol__('unhandledPromiseRejectionHandler');
	        function handleUnhandledRejection(e) {
	            api.onUnhandledError(e);
	            try {
	                var handler = Zone[UNHANDLED_PROMISE_REJECTION_HANDLER_SYMBOL];
	                if (typeof handler === 'function') {
	                    handler.call(this, e);
	                }
	            }
	            catch (err) {
	            }
	        }
	        function isThenable(value) { return value && value.then; }
	        function forwardResolution(value) { return value; }
	        function forwardRejection(rejection) { return ZoneAwarePromise.reject(rejection); }
	        var symbolState = __symbol__('state');
	        var symbolValue = __symbol__('value');
	        var symbolFinally = __symbol__('finally');
	        var symbolParentPromiseValue = __symbol__('parentPromiseValue');
	        var symbolParentPromiseState = __symbol__('parentPromiseState');
	        var source = 'Promise.then';
	        var UNRESOLVED = null;
	        var RESOLVED = true;
	        var REJECTED = false;
	        var REJECTED_NO_CATCH = 0;
	        function makeResolver(promise, state) {
	            return function (v) {
	                try {
	                    resolvePromise(promise, state, v);
	                }
	                catch (err) {
	                    resolvePromise(promise, false, err);
	                }
	                // Do not return value or you will break the Promise spec.
	            };
	        }
	        var once = function () {
	            var wasCalled = false;
	            return function wrapper(wrappedFunction) {
	                return function () {
	                    if (wasCalled) {
	                        return;
	                    }
	                    wasCalled = true;
	                    wrappedFunction.apply(null, arguments);
	                };
	            };
	        };
	        var TYPE_ERROR = 'Promise resolved with itself';
	        var CURRENT_TASK_TRACE_SYMBOL = __symbol__('currentTaskTrace');
	        // Promise Resolution
	        function resolvePromise(promise, state, value) {
	            var onceWrapper = once();
	            if (promise === value) {
	                throw new TypeError(TYPE_ERROR);
	            }
	            if (promise[symbolState] === UNRESOLVED) {
	                // should only get value.then once based on promise spec.
	                var then = null;
	                try {
	                    if (typeof value === 'object' || typeof value === 'function') {
	                        then = value && value.then;
	                    }
	                }
	                catch (err) {
	                    onceWrapper(function () { resolvePromise(promise, false, err); })();
	                    return promise;
	                }
	                // if (value instanceof ZoneAwarePromise) {
	                if (state !== REJECTED && value instanceof ZoneAwarePromise &&
	                    value.hasOwnProperty(symbolState) && value.hasOwnProperty(symbolValue) &&
	                    value[symbolState] !== UNRESOLVED) {
	                    clearRejectedNoCatch(value);
	                    resolvePromise(promise, value[symbolState], value[symbolValue]);
	                }
	                else if (state !== REJECTED && typeof then === 'function') {
	                    try {
	                        then.call(value, onceWrapper(makeResolver(promise, state)), onceWrapper(makeResolver(promise, false)));
	                    }
	                    catch (err) {
	                        onceWrapper(function () { resolvePromise(promise, false, err); })();
	                    }
	                }
	                else {
	                    promise[symbolState] = state;
	                    var queue = promise[symbolValue];
	                    promise[symbolValue] = value;
	                    if (promise[symbolFinally] === symbolFinally) {
	                        // the promise is generated by Promise.prototype.finally
	                        if (state === RESOLVED) {
	                            // the state is resolved, should ignore the value
	                            // and use parent promise value
	                            promise[symbolState] = promise[symbolParentPromiseState];
	                            promise[symbolValue] = promise[symbolParentPromiseValue];
	                        }
	                    }
	                    // record task information in value when error occurs, so we can
	                    // do some additional work such as render longStackTrace
	                    if (state === REJECTED && value instanceof Error) {
	                        // check if longStackTraceZone is here
	                        var trace = Zone.currentTask && Zone.currentTask.data &&
	                            Zone.currentTask.data[creationTrace];
	                        if (trace) {
	                            // only keep the long stack trace into error when in longStackTraceZone
	                            ObjectDefineProperty(value, CURRENT_TASK_TRACE_SYMBOL, { configurable: true, enumerable: false, writable: true, value: trace });
	                        }
	                    }
	                    for (var i = 0; i < queue.length;) {
	                        scheduleResolveOrReject(promise, queue[i++], queue[i++], queue[i++], queue[i++]);
	                    }
	                    if (queue.length == 0 && state == REJECTED) {
	                        promise[symbolState] = REJECTED_NO_CATCH;
	                        var uncaughtPromiseError = value;
	                        if (!isDisableWrappingUncaughtPromiseRejection) {
	                            // If disable wrapping uncaught promise reject
	                            // and the rejected value is an Error object,
	                            // use the value instead of wrapping it.
	                            try {
	                                // Here we throws a new Error to print more readable error log
	                                // and if the value is not an error, zone.js builds an `Error`
	                                // Object here to attach the stack information.
	                                throw new Error('Uncaught (in promise): ' + readableObjectToString(value) +
	                                    (value && value.stack ? '\n' + value.stack : ''));
	                            }
	                            catch (err) {
	                                uncaughtPromiseError = err;
	                            }
	                        }
	                        uncaughtPromiseError.rejection = value;
	                        uncaughtPromiseError.promise = promise;
	                        uncaughtPromiseError.zone = Zone.current;
	                        uncaughtPromiseError.task = Zone.currentTask;
	                        _uncaughtPromiseErrors.push(uncaughtPromiseError);
	                        api.scheduleMicroTask(); // to make sure that it is running
	                    }
	                }
	            }
	            // Resolving an already resolved promise is a noop.
	            return promise;
	        }
	        var REJECTION_HANDLED_HANDLER = __symbol__('rejectionHandledHandler');
	        function clearRejectedNoCatch(promise) {
	            if (promise[symbolState] === REJECTED_NO_CATCH) {
	                // if the promise is rejected no catch status
	                // and queue.length > 0, means there is a error handler
	                // here to handle the rejected promise, we should trigger
	                // windows.rejectionhandled eventHandler or nodejs rejectionHandled
	                // eventHandler
	                try {
	                    var handler = Zone[REJECTION_HANDLED_HANDLER];
	                    if (handler && typeof handler === 'function') {
	                        handler.call(this, { rejection: promise[symbolValue], promise: promise });
	                    }
	                }
	                catch (err) {
	                }
	                promise[symbolState] = REJECTED;
	                for (var i = 0; i < _uncaughtPromiseErrors.length; i++) {
	                    if (promise === _uncaughtPromiseErrors[i].promise) {
	                        _uncaughtPromiseErrors.splice(i, 1);
	                    }
	                }
	            }
	        }
	        function scheduleResolveOrReject(promise, zone, chainPromise, onFulfilled, onRejected) {
	            clearRejectedNoCatch(promise);
	            var promiseState = promise[symbolState];
	            var delegate = promiseState ?
	                (typeof onFulfilled === 'function') ? onFulfilled : forwardResolution :
	                (typeof onRejected === 'function') ? onRejected : forwardRejection;
	            zone.scheduleMicroTask(source, function () {
	                try {
	                    var parentPromiseValue = promise[symbolValue];
	                    var isFinallyPromise = !!chainPromise && symbolFinally === chainPromise[symbolFinally];
	                    if (isFinallyPromise) {
	                        // if the promise is generated from finally call, keep parent promise's state and value
	                        chainPromise[symbolParentPromiseValue] = parentPromiseValue;
	                        chainPromise[symbolParentPromiseState] = promiseState;
	                    }
	                    // should not pass value to finally callback
	                    var value = zone.run(delegate, undefined, isFinallyPromise && delegate !== forwardRejection && delegate !== forwardResolution ?
	                        [] :
	                        [parentPromiseValue]);
	                    resolvePromise(chainPromise, true, value);
	                }
	                catch (error) {
	                    // if error occurs, should always return this error
	                    resolvePromise(chainPromise, false, error);
	                }
	            }, chainPromise);
	        }
	        var ZONE_AWARE_PROMISE_TO_STRING = 'function ZoneAwarePromise() { [native code] }';
	        var noop = function () { };
	        var ZoneAwarePromise = /** @class */ (function () {
	            function ZoneAwarePromise(executor) {
	                var promise = this;
	                if (!(promise instanceof ZoneAwarePromise)) {
	                    throw new Error('Must be an instanceof Promise.');
	                }
	                promise[symbolState] = UNRESOLVED;
	                promise[symbolValue] = []; // queue;
	                try {
	                    executor && executor(makeResolver(promise, RESOLVED), makeResolver(promise, REJECTED));
	                }
	                catch (error) {
	                    resolvePromise(promise, false, error);
	                }
	            }
	            ZoneAwarePromise.toString = function () { return ZONE_AWARE_PROMISE_TO_STRING; };
	            ZoneAwarePromise.resolve = function (value) {
	                return resolvePromise(new this(null), RESOLVED, value);
	            };
	            ZoneAwarePromise.reject = function (error) {
	                return resolvePromise(new this(null), REJECTED, error);
	            };
	            ZoneAwarePromise.race = function (values) {
	                var resolve;
	                var reject;
	                var promise = new this(function (res, rej) {
	                    resolve = res;
	                    reject = rej;
	                });
	                function onResolve(value) { resolve(value); }
	                function onReject(error) { reject(error); }
	                for (var _i = 0, values_1 = values; _i < values_1.length; _i++) {
	                    var value = values_1[_i];
	                    if (!isThenable(value)) {
	                        value = this.resolve(value);
	                    }
	                    value.then(onResolve, onReject);
	                }
	                return promise;
	            };
	            ZoneAwarePromise.all = function (values) { return ZoneAwarePromise.allWithCallback(values); };
	            ZoneAwarePromise.allSettled = function (values) {
	                var P = this && this.prototype instanceof ZoneAwarePromise ? this : ZoneAwarePromise;
	                return P.allWithCallback(values, {
	                    thenCallback: function (value) { return ({ status: 'fulfilled', value: value }); },
	                    errorCallback: function (err) { return ({ status: 'rejected', reason: err }); }
	                });
	            };
	            ZoneAwarePromise.allWithCallback = function (values, callback) {
	                var resolve;
	                var reject;
	                var promise = new this(function (res, rej) {
	                    resolve = res;
	                    reject = rej;
	                });
	                // Start at 2 to prevent prematurely resolving if .then is called immediately.
	                var unresolvedCount = 2;
	                var valueIndex = 0;
	                var resolvedValues = [];
	                var _loop_2 = function (value) {
	                    if (!isThenable(value)) {
	                        value = this_1.resolve(value);
	                    }
	                    var curValueIndex = valueIndex;
	                    try {
	                        value.then(function (value) {
	                            resolvedValues[curValueIndex] = callback ? callback.thenCallback(value) : value;
	                            unresolvedCount--;
	                            if (unresolvedCount === 0) {
	                                resolve(resolvedValues);
	                            }
	                        }, function (err) {
	                            if (!callback) {
	                                reject(err);
	                            }
	                            else {
	                                resolvedValues[curValueIndex] = callback.errorCallback(err);
	                                unresolvedCount--;
	                                if (unresolvedCount === 0) {
	                                    resolve(resolvedValues);
	                                }
	                            }
	                        });
	                    }
	                    catch (thenErr) {
	                        reject(thenErr);
	                    }
	                    unresolvedCount++;
	                    valueIndex++;
	                };
	                var this_1 = this;
	                for (var _i = 0, values_2 = values; _i < values_2.length; _i++) {
	                    var value = values_2[_i];
	                    _loop_2(value);
	                }
	                // Make the unresolvedCount zero-based again.
	                unresolvedCount -= 2;
	                if (unresolvedCount === 0) {
	                    resolve(resolvedValues);
	                }
	                return promise;
	            };
	            Object.defineProperty(ZoneAwarePromise.prototype, Symbol.toStringTag, {
	                get: function () { return 'Promise'; },
	                enumerable: true,
	                configurable: true
	            });
	            Object.defineProperty(ZoneAwarePromise.prototype, Symbol.species, {
	                get: function () { return ZoneAwarePromise; },
	                enumerable: true,
	                configurable: true
	            });
	            ZoneAwarePromise.prototype.then = function (onFulfilled, onRejected) {
	                var C = this.constructor[Symbol.species];
	                if (!C || typeof C !== 'function') {
	                    C = this.constructor || ZoneAwarePromise;
	                }
	                var chainPromise = new C(noop);
	                var zone = Zone.current;
	                if (this[symbolState] == UNRESOLVED) {
	                    this[symbolValue].push(zone, chainPromise, onFulfilled, onRejected);
	                }
	                else {
	                    scheduleResolveOrReject(this, zone, chainPromise, onFulfilled, onRejected);
	                }
	                return chainPromise;
	            };
	            ZoneAwarePromise.prototype.catch = function (onRejected) {
	                return this.then(null, onRejected);
	            };
	            ZoneAwarePromise.prototype.finally = function (onFinally) {
	                var C = this.constructor[Symbol.species];
	                if (!C || typeof C !== 'function') {
	                    C = ZoneAwarePromise;
	                }
	                var chainPromise = new C(noop);
	                chainPromise[symbolFinally] = symbolFinally;
	                var zone = Zone.current;
	                if (this[symbolState] == UNRESOLVED) {
	                    this[symbolValue].push(zone, chainPromise, onFinally, onFinally);
	                }
	                else {
	                    scheduleResolveOrReject(this, zone, chainPromise, onFinally, onFinally);
	                }
	                return chainPromise;
	            };
	            return ZoneAwarePromise;
	        }());
	        // Protect against aggressive optimizers dropping seemingly unused properties.
	        // E.g. Closure Compiler in advanced mode.
	        ZoneAwarePromise['resolve'] = ZoneAwarePromise.resolve;
	        ZoneAwarePromise['reject'] = ZoneAwarePromise.reject;
	        ZoneAwarePromise['race'] = ZoneAwarePromise.race;
	        ZoneAwarePromise['all'] = ZoneAwarePromise.all;
	        var NativePromise = global[symbolPromise] = global['Promise'];
	        var ZONE_AWARE_PROMISE = Zone.__symbol__('ZoneAwarePromise');
	        var desc = ObjectGetOwnPropertyDescriptor(global, 'Promise');
	        if (!desc || desc.configurable) {
	            desc && delete desc.writable;
	            desc && delete desc.value;
	            if (!desc) {
	                desc = { configurable: true, enumerable: true };
	            }
	            desc.get = function () {
	                // if we already set ZoneAwarePromise, use patched one
	                // otherwise return native one.
	                return global[ZONE_AWARE_PROMISE] ? global[ZONE_AWARE_PROMISE] : global[symbolPromise];
	            };
	            desc.set = function (NewNativePromise) {
	                if (NewNativePromise === ZoneAwarePromise) {
	                    // if the NewNativePromise is ZoneAwarePromise
	                    // save to global
	                    global[ZONE_AWARE_PROMISE] = NewNativePromise;
	                }
	                else {
	                    // if the NewNativePromise is not ZoneAwarePromise
	                    // for example: after load zone.js, some library just
	                    // set es6-promise to global, if we set it to global
	                    // directly, assertZonePatched will fail and angular
	                    // will not loaded, so we just set the NewNativePromise
	                    // to global[symbolPromise], so the result is just like
	                    // we load ES6 Promise before zone.js
	                    global[symbolPromise] = NewNativePromise;
	                    if (!NewNativePromise.prototype[symbolThen]) {
	                        patchThen(NewNativePromise);
	                    }
	                    api.setNativePromise(NewNativePromise);
	                }
	            };
	            ObjectDefineProperty(global, 'Promise', desc);
	        }
	        global['Promise'] = ZoneAwarePromise;
	        var symbolThenPatched = __symbol__('thenPatched');
	        function patchThen(Ctor) {
	            var proto = Ctor.prototype;
	            var prop = ObjectGetOwnPropertyDescriptor(proto, 'then');
	            if (prop && (prop.writable === false || !prop.configurable)) {
	                // check Ctor.prototype.then propertyDescriptor is writable or not
	                // in meteor env, writable is false, we should ignore such case
	                return;
	            }
	            var originalThen = proto.then;
	            // Keep a reference to the original method.
	            proto[symbolThen] = originalThen;
	            Ctor.prototype.then = function (onResolve, onReject) {
	                var _this = this;
	                var wrapped = new ZoneAwarePromise(function (resolve, reject) { originalThen.call(_this, resolve, reject); });
	                return wrapped.then(onResolve, onReject);
	            };
	            Ctor[symbolThenPatched] = true;
	        }
	        api.patchThen = patchThen;
	        function zoneify(fn) {
	            return function () {
	                var resultPromise = fn.apply(this, arguments);
	                if (resultPromise instanceof ZoneAwarePromise) {
	                    return resultPromise;
	                }
	                var ctor = resultPromise.constructor;
	                if (!ctor[symbolThenPatched]) {
	                    patchThen(ctor);
	                }
	                return resultPromise;
	            };
	        }
	        if (NativePromise) {
	            patchThen(NativePromise);
	            var fetch_1 = global['fetch'];
	            if (typeof fetch_1 == 'function') {
	                global[api.symbol('fetch')] = fetch_1;
	                global['fetch'] = zoneify(fetch_1);
	            }
	        }
	        // This is not part of public API, but it is useful for tests, so we expose it.
	        Promise[Zone.__symbol__('uncaughtPromiseErrors')] = _uncaughtPromiseErrors;
	        return ZoneAwarePromise;
	    });
	    /**
	     * @license
	     * Copyright Google Inc. All Rights Reserved.
	     *
	     * Use of this source code is governed by an MIT-style license that can be
	     * found in the LICENSE file at https://angular.io/license
	     */
	    /**
	     * Suppress closure compiler errors about unknown 'Zone' variable
	     * @fileoverview
	     * @suppress {undefinedVars,globalThis,missingRequire}
	     */
	    /// <reference types="node"/>
	    // issue #989, to reduce bundle size, use short name
	    /** Object.getOwnPropertyDescriptor */
	    var ObjectGetOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;
	    /** Object.defineProperty */
	    var ObjectDefineProperty = Object.defineProperty;
	    /** Object.getPrototypeOf */
	    var ObjectGetPrototypeOf = Object.getPrototypeOf;
	    /** Object.create */
	    var ObjectCreate = Object.create;
	    /** Array.prototype.slice */
	    var ArraySlice = Array.prototype.slice;
	    /** addEventListener string const */
	    var ADD_EVENT_LISTENER_STR = 'addEventListener';
	    /** removeEventListener string const */
	    var REMOVE_EVENT_LISTENER_STR = 'removeEventListener';
	    /** zoneSymbol addEventListener */
	    var ZONE_SYMBOL_ADD_EVENT_LISTENER = Zone.__symbol__(ADD_EVENT_LISTENER_STR);
	    /** zoneSymbol removeEventListener */
	    var ZONE_SYMBOL_REMOVE_EVENT_LISTENER = Zone.__symbol__(REMOVE_EVENT_LISTENER_STR);
	    /** true string const */
	    var TRUE_STR = 'true';
	    /** false string const */
	    var FALSE_STR = 'false';
	    /** Zone symbol prefix string const. */
	    var ZONE_SYMBOL_PREFIX = Zone.__symbol__('');
	    function wrapWithCurrentZone(callback, source) {
	        return Zone.current.wrap(callback, source);
	    }
	    function scheduleMacroTaskWithCurrentZone(source, callback, data, customSchedule, customCancel) {
	        return Zone.current.scheduleMacroTask(source, callback, data, customSchedule, customCancel);
	    }
	    var zoneSymbol = Zone.__symbol__;
	    var isWindowExists = typeof window !== 'undefined';
	    var internalWindow = isWindowExists ? window : undefined;
	    var _global = isWindowExists && internalWindow || typeof self === 'object' && self || commonjsGlobal;
	    var REMOVE_ATTRIBUTE = 'removeAttribute';
	    var NULL_ON_PROP_VALUE = [null];
	    function bindArguments(args, source) {
	        for (var i = args.length - 1; i >= 0; i--) {
	            if (typeof args[i] === 'function') {
	                args[i] = wrapWithCurrentZone(args[i], source + '_' + i);
	            }
	        }
	        return args;
	    }
	    function patchPrototype(prototype, fnNames) {
	        var source = prototype.constructor['name'];
	        var _loop_3 = function (i) {
	            var name_1 = fnNames[i];
	            var delegate = prototype[name_1];
	            if (delegate) {
	                var prototypeDesc = ObjectGetOwnPropertyDescriptor(prototype, name_1);
	                if (!isPropertyWritable(prototypeDesc)) {
	                    return "continue";
	                }
	                prototype[name_1] = (function (delegate) {
	                    var patched = function () {
	                        return delegate.apply(this, bindArguments(arguments, source + '.' + name_1));
	                    };
	                    attachOriginToPatched(patched, delegate);
	                    return patched;
	                })(delegate);
	            }
	        };
	        for (var i = 0; i < fnNames.length; i++) {
	            _loop_3(i);
	        }
	    }
	    function isPropertyWritable(propertyDesc) {
	        if (!propertyDesc) {
	            return true;
	        }
	        if (propertyDesc.writable === false) {
	            return false;
	        }
	        return !(typeof propertyDesc.get === 'function' && typeof propertyDesc.set === 'undefined');
	    }
	    var isWebWorker = (typeof WorkerGlobalScope !== 'undefined' && self instanceof WorkerGlobalScope);
	    // Make sure to access `process` through `_global` so that WebPack does not accidentally browserify
	    // this code.
	    var isNode = (!('nw' in _global) && typeof _global.process !== 'undefined' &&
	        {}.toString.call(_global.process) === '[object process]');
	    var isBrowser = !isNode && !isWebWorker && !!(isWindowExists && internalWindow['HTMLElement']);
	    // we are in electron of nw, so we are both browser and nodejs
	    // Make sure to access `process` through `_global` so that WebPack does not accidentally browserify
	    // this code.
	    var isMix = typeof _global.process !== 'undefined' &&
	        {}.toString.call(_global.process) === '[object process]' && !isWebWorker &&
	        !!(isWindowExists && internalWindow['HTMLElement']);
	    var zoneSymbolEventNames = {};
	    var wrapFn = function (event) {
	        // https://github.com/angular/zone.js/issues/911, in IE, sometimes
	        // event will be undefined, so we need to use window.event
	        event = event || _global.event;
	        if (!event) {
	            return;
	        }
	        var eventNameSymbol = zoneSymbolEventNames[event.type];
	        if (!eventNameSymbol) {
	            eventNameSymbol = zoneSymbolEventNames[event.type] = zoneSymbol('ON_PROPERTY' + event.type);
	        }
	        var target = this || event.target || _global;
	        var listener = target[eventNameSymbol];
	        var result;
	        if (isBrowser && target === internalWindow && event.type === 'error') {
	            // window.onerror have different signiture
	            // https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onerror#window.onerror
	            // and onerror callback will prevent default when callback return true
	            var errorEvent = event;
	            result = listener &&
	                listener.call(this, errorEvent.message, errorEvent.filename, errorEvent.lineno, errorEvent.colno, errorEvent.error);
	            if (result === true) {
	                event.preventDefault();
	            }
	        }
	        else {
	            result = listener && listener.apply(this, arguments);
	            if (result != undefined && !result) {
	                event.preventDefault();
	            }
	        }
	        return result;
	    };
	    function patchProperty(obj, prop, prototype) {
	        var desc = ObjectGetOwnPropertyDescriptor(obj, prop);
	        if (!desc && prototype) {
	            // when patch window object, use prototype to check prop exist or not
	            var prototypeDesc = ObjectGetOwnPropertyDescriptor(prototype, prop);
	            if (prototypeDesc) {
	                desc = { enumerable: true, configurable: true };
	            }
	        }
	        // if the descriptor not exists or is not configurable
	        // just return
	        if (!desc || !desc.configurable) {
	            return;
	        }
	        var onPropPatchedSymbol = zoneSymbol('on' + prop + 'patched');
	        if (obj.hasOwnProperty(onPropPatchedSymbol) && obj[onPropPatchedSymbol]) {
	            return;
	        }
	        // A property descriptor cannot have getter/setter and be writable
	        // deleting the writable and value properties avoids this error:
	        //
	        // TypeError: property descriptors must not specify a value or be writable when a
	        // getter or setter has been specified
	        delete desc.writable;
	        delete desc.value;
	        var originalDescGet = desc.get;
	        var originalDescSet = desc.set;
	        // substr(2) cuz 'onclick' -> 'click', etc
	        var eventName = prop.substr(2);
	        var eventNameSymbol = zoneSymbolEventNames[eventName];
	        if (!eventNameSymbol) {
	            eventNameSymbol = zoneSymbolEventNames[eventName] = zoneSymbol('ON_PROPERTY' + eventName);
	        }
	        desc.set = function (newValue) {
	            // in some of windows's onproperty callback, this is undefined
	            // so we need to check it
	            var target = this;
	            if (!target && obj === _global) {
	                target = _global;
	            }
	            if (!target) {
	                return;
	            }
	            var previousValue = target[eventNameSymbol];
	            if (previousValue) {
	                target.removeEventListener(eventName, wrapFn);
	            }
	            // issue #978, when onload handler was added before loading zone.js
	            // we should remove it with originalDescSet
	            if (originalDescSet) {
	                originalDescSet.apply(target, NULL_ON_PROP_VALUE);
	            }
	            if (typeof newValue === 'function') {
	                target[eventNameSymbol] = newValue;
	                target.addEventListener(eventName, wrapFn, false);
	            }
	            else {
	                target[eventNameSymbol] = null;
	            }
	        };
	        // The getter would return undefined for unassigned properties but the default value of an
	        // unassigned property is null
	        desc.get = function () {
	            // in some of windows's onproperty callback, this is undefined
	            // so we need to check it
	            var target = this;
	            if (!target && obj === _global) {
	                target = _global;
	            }
	            if (!target) {
	                return null;
	            }
	            var listener = target[eventNameSymbol];
	            if (listener) {
	                return listener;
	            }
	            else if (originalDescGet) {
	                // result will be null when use inline event attribute,
	                // such as <button onclick="func();">OK</button>
	                // because the onclick function is internal raw uncompiled handler
	                // the onclick will be evaluated when first time event was triggered or
	                // the property is accessed, https://github.com/angular/zone.js/issues/525
	                // so we should use original native get to retrieve the handler
	                var value = originalDescGet && originalDescGet.call(this);
	                if (value) {
	                    desc.set.call(this, value);
	                    if (typeof target[REMOVE_ATTRIBUTE] === 'function') {
	                        target.removeAttribute(prop);
	                    }
	                    return value;
	                }
	            }
	            return null;
	        };
	        ObjectDefineProperty(obj, prop, desc);
	        obj[onPropPatchedSymbol] = true;
	    }
	    function patchOnProperties(obj, properties, prototype) {
	        if (properties) {
	            for (var i = 0; i < properties.length; i++) {
	                patchProperty(obj, 'on' + properties[i], prototype);
	            }
	        }
	        else {
	            var onProperties = [];
	            for (var prop in obj) {
	                if (prop.substr(0, 2) == 'on') {
	                    onProperties.push(prop);
	                }
	            }
	            for (var j = 0; j < onProperties.length; j++) {
	                patchProperty(obj, onProperties[j], prototype);
	            }
	        }
	    }
	    var originalInstanceKey = zoneSymbol('originalInstance');
	    // wrap some native API on `window`
	    function patchClass(className) {
	        var OriginalClass = _global[className];
	        if (!OriginalClass)
	            return;
	        // keep original class in global
	        _global[zoneSymbol(className)] = OriginalClass;
	        _global[className] = function () {
	            var a = bindArguments(arguments, className);
	            switch (a.length) {
	                case 0:
	                    this[originalInstanceKey] = new OriginalClass();
	                    break;
	                case 1:
	                    this[originalInstanceKey] = new OriginalClass(a[0]);
	                    break;
	                case 2:
	                    this[originalInstanceKey] = new OriginalClass(a[0], a[1]);
	                    break;
	                case 3:
	                    this[originalInstanceKey] = new OriginalClass(a[0], a[1], a[2]);
	                    break;
	                case 4:
	                    this[originalInstanceKey] = new OriginalClass(a[0], a[1], a[2], a[3]);
	                    break;
	                default:
	                    throw new Error('Arg list too long.');
	            }
	        };
	        // attach original delegate to patched function
	        attachOriginToPatched(_global[className], OriginalClass);
	        var instance = new OriginalClass(function () { });
	        var prop;
	        for (prop in instance) {
	            // https://bugs.webkit.org/show_bug.cgi?id=44721
	            if (className === 'XMLHttpRequest' && prop === 'responseBlob')
	                continue;
	            (function (prop) {
	                if (typeof instance[prop] === 'function') {
	                    _global[className].prototype[prop] = function () {
	                        return this[originalInstanceKey][prop].apply(this[originalInstanceKey], arguments);
	                    };
	                }
	                else {
	                    ObjectDefineProperty(_global[className].prototype, prop, {
	                        set: function (fn) {
	                            if (typeof fn === 'function') {
	                                this[originalInstanceKey][prop] = wrapWithCurrentZone(fn, className + '.' + prop);
	                                // keep callback in wrapped function so we can
	                                // use it in Function.prototype.toString to return
	                                // the native one.
	                                attachOriginToPatched(this[originalInstanceKey][prop], fn);
	                            }
	                            else {
	                                this[originalInstanceKey][prop] = fn;
	                            }
	                        },
	                        get: function () { return this[originalInstanceKey][prop]; }
	                    });
	                }
	            }(prop));
	        }
	        for (prop in OriginalClass) {
	            if (prop !== 'prototype' && OriginalClass.hasOwnProperty(prop)) {
	                _global[className][prop] = OriginalClass[prop];
	            }
	        }
	    }
	    function patchMethod(target, name, patchFn) {
	        var proto = target;
	        while (proto && !proto.hasOwnProperty(name)) {
	            proto = ObjectGetPrototypeOf(proto);
	        }
	        if (!proto && target[name]) {
	            // somehow we did not find it, but we can see it. This happens on IE for Window properties.
	            proto = target;
	        }
	        var delegateName = zoneSymbol(name);
	        var delegate = null;
	        if (proto && !(delegate = proto[delegateName])) {
	            delegate = proto[delegateName] = proto[name];
	            // check whether proto[name] is writable
	            // some property is readonly in safari, such as HtmlCanvasElement.prototype.toBlob
	            var desc = proto && ObjectGetOwnPropertyDescriptor(proto, name);
	            if (isPropertyWritable(desc)) {
	                var patchDelegate_1 = patchFn(delegate, delegateName, name);
	                proto[name] = function () { return patchDelegate_1(this, arguments); };
	                attachOriginToPatched(proto[name], delegate);
	            }
	        }
	        return delegate;
	    }
	    // TODO: @JiaLiPassion, support cancel task later if necessary
	    function patchMacroTask(obj, funcName, metaCreator) {
	        var setNative = null;
	        function scheduleTask(task) {
	            var data = task.data;
	            data.args[data.cbIdx] = function () { task.invoke.apply(this, arguments); };
	            setNative.apply(data.target, data.args);
	            return task;
	        }
	        setNative = patchMethod(obj, funcName, function (delegate) { return function (self, args) {
	            var meta = metaCreator(self, args);
	            if (meta.cbIdx >= 0 && typeof args[meta.cbIdx] === 'function') {
	                return scheduleMacroTaskWithCurrentZone(meta.name, args[meta.cbIdx], meta, scheduleTask);
	            }
	            else {
	                // cause an error by calling it directly.
	                return delegate.apply(self, args);
	            }
	        }; });
	    }
	    function attachOriginToPatched(patched, original) {
	        patched[zoneSymbol('OriginalDelegate')] = original;
	    }
	    var isDetectedIEOrEdge = false;
	    var ieOrEdge = false;
	    function isIE() {
	        try {
	            var ua = internalWindow.navigator.userAgent;
	            if (ua.indexOf('MSIE ') !== -1 || ua.indexOf('Trident/') !== -1) {
	                return true;
	            }
	        }
	        catch (error) {
	        }
	        return false;
	    }
	    function isIEOrEdge() {
	        if (isDetectedIEOrEdge) {
	            return ieOrEdge;
	        }
	        isDetectedIEOrEdge = true;
	        try {
	            var ua = internalWindow.navigator.userAgent;
	            if (ua.indexOf('MSIE ') !== -1 || ua.indexOf('Trident/') !== -1 || ua.indexOf('Edge/') !== -1) {
	                ieOrEdge = true;
	            }
	        }
	        catch (error) {
	        }
	        return ieOrEdge;
	    }
	    /**
	     * @license
	     * Copyright Google Inc. All Rights Reserved.
	     *
	     * Use of this source code is governed by an MIT-style license that can be
	     * found in the LICENSE file at https://angular.io/license
	     */
	    // override Function.prototype.toString to make zone.js patched function
	    // look like native function
	    Zone.__load_patch('toString', function (global) {
	        // patch Func.prototype.toString to let them look like native
	        var originalFunctionToString = Function.prototype.toString;
	        var ORIGINAL_DELEGATE_SYMBOL = zoneSymbol('OriginalDelegate');
	        var PROMISE_SYMBOL = zoneSymbol('Promise');
	        var ERROR_SYMBOL = zoneSymbol('Error');
	        var newFunctionToString = function toString() {
	            if (typeof this === 'function') {
	                var originalDelegate = this[ORIGINAL_DELEGATE_SYMBOL];
	                if (originalDelegate) {
	                    if (typeof originalDelegate === 'function') {
	                        return originalFunctionToString.call(originalDelegate);
	                    }
	                    else {
	                        return Object.prototype.toString.call(originalDelegate);
	                    }
	                }
	                if (this === Promise) {
	                    var nativePromise = global[PROMISE_SYMBOL];
	                    if (nativePromise) {
	                        return originalFunctionToString.call(nativePromise);
	                    }
	                }
	                if (this === Error) {
	                    var nativeError = global[ERROR_SYMBOL];
	                    if (nativeError) {
	                        return originalFunctionToString.call(nativeError);
	                    }
	                }
	            }
	            return originalFunctionToString.call(this);
	        };
	        newFunctionToString[ORIGINAL_DELEGATE_SYMBOL] = originalFunctionToString;
	        Function.prototype.toString = newFunctionToString;
	        // patch Object.prototype.toString to let them look like native
	        var originalObjectToString = Object.prototype.toString;
	        var PROMISE_OBJECT_TO_STRING = '[object Promise]';
	        Object.prototype.toString = function () {
	            if (this instanceof Promise) {
	                return PROMISE_OBJECT_TO_STRING;
	            }
	            return originalObjectToString.call(this);
	        };
	    });
	    /**
	     * @license
	     * Copyright Google Inc. All Rights Reserved.
	     *
	     * Use of this source code is governed by an MIT-style license that can be
	     * found in the LICENSE file at https://angular.io/license
	     */
	    var passiveSupported = false;
	    if (typeof window !== 'undefined') {
	        try {
	            var options = Object.defineProperty({}, 'passive', { get: function () { passiveSupported = true; } });
	            window.addEventListener('test', options, options);
	            window.removeEventListener('test', options, options);
	        }
	        catch (err) {
	            passiveSupported = false;
	        }
	    }
	    // an identifier to tell ZoneTask do not create a new invoke closure
	    var OPTIMIZED_ZONE_EVENT_TASK_DATA = {
	        useG: true
	    };
	    var zoneSymbolEventNames$1 = {};
	    var globalSources = {};
	    var EVENT_NAME_SYMBOL_REGX = new RegExp('^' + ZONE_SYMBOL_PREFIX + '(\\w+)(true|false)$');
	    var IMMEDIATE_PROPAGATION_SYMBOL = zoneSymbol('propagationStopped');
	    function prepareEventNames(eventName, eventNameToString) {
	        var falseEventName = (eventNameToString ? eventNameToString(eventName) : eventName) + FALSE_STR;
	        var trueEventName = (eventNameToString ? eventNameToString(eventName) : eventName) + TRUE_STR;
	        var symbol = ZONE_SYMBOL_PREFIX + falseEventName;
	        var symbolCapture = ZONE_SYMBOL_PREFIX + trueEventName;
	        zoneSymbolEventNames$1[eventName] = {};
	        zoneSymbolEventNames$1[eventName][FALSE_STR] = symbol;
	        zoneSymbolEventNames$1[eventName][TRUE_STR] = symbolCapture;
	    }
	    function patchEventTarget(_global, apis, patchOptions) {
	        var ADD_EVENT_LISTENER = (patchOptions && patchOptions.add) || ADD_EVENT_LISTENER_STR;
	        var REMOVE_EVENT_LISTENER = (patchOptions && patchOptions.rm) || REMOVE_EVENT_LISTENER_STR;
	        var LISTENERS_EVENT_LISTENER = (patchOptions && patchOptions.listeners) || 'eventListeners';
	        var REMOVE_ALL_LISTENERS_EVENT_LISTENER = (patchOptions && patchOptions.rmAll) || 'removeAllListeners';
	        var zoneSymbolAddEventListener = zoneSymbol(ADD_EVENT_LISTENER);
	        var ADD_EVENT_LISTENER_SOURCE = '.' + ADD_EVENT_LISTENER + ':';
	        var PREPEND_EVENT_LISTENER = 'prependListener';
	        var PREPEND_EVENT_LISTENER_SOURCE = '.' + PREPEND_EVENT_LISTENER + ':';
	        var invokeTask = function (task, target, event) {
	            // for better performance, check isRemoved which is set
	            // by removeEventListener
	            if (task.isRemoved) {
	                return;
	            }
	            var delegate = task.callback;
	            if (typeof delegate === 'object' && delegate.handleEvent) {
	                // create the bind version of handleEvent when invoke
	                task.callback = function (event) { return delegate.handleEvent(event); };
	                task.originalDelegate = delegate;
	            }
	            // invoke static task.invoke
	            task.invoke(task, target, [event]);
	            var options = task.options;
	            if (options && typeof options === 'object' && options.once) {
	                // if options.once is true, after invoke once remove listener here
	                // only browser need to do this, nodejs eventEmitter will cal removeListener
	                // inside EventEmitter.once
	                var delegate_1 = task.originalDelegate ? task.originalDelegate : task.callback;
	                target[REMOVE_EVENT_LISTENER].call(target, event.type, delegate_1, options);
	            }
	        };
	        // global shared zoneAwareCallback to handle all event callback with capture = false
	        var globalZoneAwareCallback = function (event) {
	            // https://github.com/angular/zone.js/issues/911, in IE, sometimes
	            // event will be undefined, so we need to use window.event
	            event = event || _global.event;
	            if (!event) {
	                return;
	            }
	            // event.target is needed for Samsung TV and SourceBuffer
	            // || global is needed https://github.com/angular/zone.js/issues/190
	            var target = this || event.target || _global;
	            var tasks = target[zoneSymbolEventNames$1[event.type][FALSE_STR]];
	            if (tasks) {
	                // invoke all tasks which attached to current target with given event.type and capture = false
	                // for performance concern, if task.length === 1, just invoke
	                if (tasks.length === 1) {
	                    invokeTask(tasks[0], target, event);
	                }
	                else {
	                    // https://github.com/angular/zone.js/issues/836
	                    // copy the tasks array before invoke, to avoid
	                    // the callback will remove itself or other listener
	                    var copyTasks = tasks.slice();
	                    for (var i = 0; i < copyTasks.length; i++) {
	                        if (event && event[IMMEDIATE_PROPAGATION_SYMBOL] === true) {
	                            break;
	                        }
	                        invokeTask(copyTasks[i], target, event);
	                    }
	                }
	            }
	        };
	        // global shared zoneAwareCallback to handle all event callback with capture = true
	        var globalZoneAwareCaptureCallback = function (event) {
	            // https://github.com/angular/zone.js/issues/911, in IE, sometimes
	            // event will be undefined, so we need to use window.event
	            event = event || _global.event;
	            if (!event) {
	                return;
	            }
	            // event.target is needed for Samsung TV and SourceBuffer
	            // || global is needed https://github.com/angular/zone.js/issues/190
	            var target = this || event.target || _global;
	            var tasks = target[zoneSymbolEventNames$1[event.type][TRUE_STR]];
	            if (tasks) {
	                // invoke all tasks which attached to current target with given event.type and capture = false
	                // for performance concern, if task.length === 1, just invoke
	                if (tasks.length === 1) {
	                    invokeTask(tasks[0], target, event);
	                }
	                else {
	                    // https://github.com/angular/zone.js/issues/836
	                    // copy the tasks array before invoke, to avoid
	                    // the callback will remove itself or other listener
	                    var copyTasks = tasks.slice();
	                    for (var i = 0; i < copyTasks.length; i++) {
	                        if (event && event[IMMEDIATE_PROPAGATION_SYMBOL] === true) {
	                            break;
	                        }
	                        invokeTask(copyTasks[i], target, event);
	                    }
	                }
	            }
	        };
	        function patchEventTargetMethods(obj, patchOptions) {
	            if (!obj) {
	                return false;
	            }
	            var useGlobalCallback = true;
	            if (patchOptions && patchOptions.useG !== undefined) {
	                useGlobalCallback = patchOptions.useG;
	            }
	            var validateHandler = patchOptions && patchOptions.vh;
	            var checkDuplicate = true;
	            if (patchOptions && patchOptions.chkDup !== undefined) {
	                checkDuplicate = patchOptions.chkDup;
	            }
	            var returnTarget = false;
	            if (patchOptions && patchOptions.rt !== undefined) {
	                returnTarget = patchOptions.rt;
	            }
	            var proto = obj;
	            while (proto && !proto.hasOwnProperty(ADD_EVENT_LISTENER)) {
	                proto = ObjectGetPrototypeOf(proto);
	            }
	            if (!proto && obj[ADD_EVENT_LISTENER]) {
	                // somehow we did not find it, but we can see it. This happens on IE for Window properties.
	                proto = obj;
	            }
	            if (!proto) {
	                return false;
	            }
	            if (proto[zoneSymbolAddEventListener]) {
	                return false;
	            }
	            var eventNameToString = patchOptions && patchOptions.eventNameToString;
	            // a shared global taskData to pass data for scheduleEventTask
	            // so we do not need to create a new object just for pass some data
	            var taskData = {};
	            var nativeAddEventListener = proto[zoneSymbolAddEventListener] = proto[ADD_EVENT_LISTENER];
	            var nativeRemoveEventListener = proto[zoneSymbol(REMOVE_EVENT_LISTENER)] =
	                proto[REMOVE_EVENT_LISTENER];
	            var nativeListeners = proto[zoneSymbol(LISTENERS_EVENT_LISTENER)] =
	                proto[LISTENERS_EVENT_LISTENER];
	            var nativeRemoveAllListeners = proto[zoneSymbol(REMOVE_ALL_LISTENERS_EVENT_LISTENER)] =
	                proto[REMOVE_ALL_LISTENERS_EVENT_LISTENER];
	            var nativePrependEventListener;
	            if (patchOptions && patchOptions.prepend) {
	                nativePrependEventListener = proto[zoneSymbol(patchOptions.prepend)] =
	                    proto[patchOptions.prepend];
	            }
	            /**
	             * This util function will build an option object with passive option
	             * to handle all possible input from the user.
	             */
	            function buildEventListenerOptions(options, passive) {
	                if (!passiveSupported && typeof options === 'object' && options) {
	                    // doesn't support passive but user want to pass an object as options.
	                    // this will not work on some old browser, so we just pass a boolean
	                    // as useCapture parameter
	                    return !!options.capture;
	                }
	                if (!passiveSupported || !passive) {
	                    return options;
	                }
	                if (typeof options === 'boolean') {
	                    return { capture: options, passive: true };
	                }
	                if (!options) {
	                    return { passive: true };
	                }
	                if (typeof options === 'object' && options.passive !== false) {
	                    return Object.assign(Object.assign({}, options), { passive: true });
	                }
	                return options;
	            }
	            var customScheduleGlobal = function (task) {
	                // if there is already a task for the eventName + capture,
	                // just return, because we use the shared globalZoneAwareCallback here.
	                if (taskData.isExisting) {
	                    return;
	                }
	                return nativeAddEventListener.call(taskData.target, taskData.eventName, taskData.capture ? globalZoneAwareCaptureCallback : globalZoneAwareCallback, taskData.options);
	            };
	            var customCancelGlobal = function (task) {
	                // if task is not marked as isRemoved, this call is directly
	                // from Zone.prototype.cancelTask, we should remove the task
	                // from tasksList of target first
	                if (!task.isRemoved) {
	                    var symbolEventNames = zoneSymbolEventNames$1[task.eventName];
	                    var symbolEventName = void 0;
	                    if (symbolEventNames) {
	                        symbolEventName = symbolEventNames[task.capture ? TRUE_STR : FALSE_STR];
	                    }
	                    var existingTasks = symbolEventName && task.target[symbolEventName];
	                    if (existingTasks) {
	                        for (var i = 0; i < existingTasks.length; i++) {
	                            var existingTask = existingTasks[i];
	                            if (existingTask === task) {
	                                existingTasks.splice(i, 1);
	                                // set isRemoved to data for faster invokeTask check
	                                task.isRemoved = true;
	                                if (existingTasks.length === 0) {
	                                    // all tasks for the eventName + capture have gone,
	                                    // remove globalZoneAwareCallback and remove the task cache from target
	                                    task.allRemoved = true;
	                                    task.target[symbolEventName] = null;
	                                }
	                                break;
	                            }
	                        }
	                    }
	                }
	                // if all tasks for the eventName + capture have gone,
	                // we will really remove the global event callback,
	                // if not, return
	                if (!task.allRemoved) {
	                    return;
	                }
	                return nativeRemoveEventListener.call(task.target, task.eventName, task.capture ? globalZoneAwareCaptureCallback : globalZoneAwareCallback, task.options);
	            };
	            var customScheduleNonGlobal = function (task) {
	                return nativeAddEventListener.call(taskData.target, taskData.eventName, task.invoke, taskData.options);
	            };
	            var customSchedulePrepend = function (task) {
	                return nativePrependEventListener.call(taskData.target, taskData.eventName, task.invoke, taskData.options);
	            };
	            var customCancelNonGlobal = function (task) {
	                return nativeRemoveEventListener.call(task.target, task.eventName, task.invoke, task.options);
	            };
	            var customSchedule = useGlobalCallback ? customScheduleGlobal : customScheduleNonGlobal;
	            var customCancel = useGlobalCallback ? customCancelGlobal : customCancelNonGlobal;
	            var compareTaskCallbackVsDelegate = function (task, delegate) {
	                var typeOfDelegate = typeof delegate;
	                return (typeOfDelegate === 'function' && task.callback === delegate) ||
	                    (typeOfDelegate === 'object' && task.originalDelegate === delegate);
	            };
	            var compare = (patchOptions && patchOptions.diff) ? patchOptions.diff : compareTaskCallbackVsDelegate;
	            var blackListedEvents = Zone[zoneSymbol('BLACK_LISTED_EVENTS')];
	            var passiveEvents = _global[zoneSymbol('PASSIVE_EVENTS')];
	            var makeAddListener = function (nativeListener, addSource, customScheduleFn, customCancelFn, returnTarget, prepend) {
	                if (returnTarget === void 0) { returnTarget = false; }
	                if (prepend === void 0) { prepend = false; }
	                return function () {
	                    var target = this || _global;
	                    var eventName = arguments[0];
	                    if (patchOptions && patchOptions.transferEventName) {
	                        eventName = patchOptions.transferEventName(eventName);
	                    }
	                    var delegate = arguments[1];
	                    if (!delegate) {
	                        return nativeListener.apply(this, arguments);
	                    }
	                    if (isNode && eventName === 'uncaughtException') {
	                        // don't patch uncaughtException of nodejs to prevent endless loop
	                        return nativeListener.apply(this, arguments);
	                    }
	                    // don't create the bind delegate function for handleEvent
	                    // case here to improve addEventListener performance
	                    // we will create the bind delegate when invoke
	                    var isHandleEvent = false;
	                    if (typeof delegate !== 'function') {
	                        if (!delegate.handleEvent) {
	                            return nativeListener.apply(this, arguments);
	                        }
	                        isHandleEvent = true;
	                    }
	                    if (validateHandler && !validateHandler(nativeListener, delegate, target, arguments)) {
	                        return;
	                    }
	                    var passive = passiveSupported && !!passiveEvents && passiveEvents.indexOf(eventName) !== -1;
	                    var options = buildEventListenerOptions(arguments[2], passive);
	                    if (blackListedEvents) {
	                        // check black list
	                        for (var i = 0; i < blackListedEvents.length; i++) {
	                            if (eventName === blackListedEvents[i]) {
	                                if (passive) {
	                                    return nativeListener.call(target, eventName, delegate, options);
	                                }
	                                else {
	                                    return nativeListener.apply(this, arguments);
	                                }
	                            }
	                        }
	                    }
	                    var capture = !options ? false : typeof options === 'boolean' ? true : options.capture;
	                    var once = options && typeof options === 'object' ? options.once : false;
	                    var zone = Zone.current;
	                    var symbolEventNames = zoneSymbolEventNames$1[eventName];
	                    if (!symbolEventNames) {
	                        prepareEventNames(eventName, eventNameToString);
	                        symbolEventNames = zoneSymbolEventNames$1[eventName];
	                    }
	                    var symbolEventName = symbolEventNames[capture ? TRUE_STR : FALSE_STR];
	                    var existingTasks = target[symbolEventName];
	                    var isExisting = false;
	                    if (existingTasks) {
	                        // already have task registered
	                        isExisting = true;
	                        if (checkDuplicate) {
	                            for (var i = 0; i < existingTasks.length; i++) {
	                                if (compare(existingTasks[i], delegate)) {
	                                    // same callback, same capture, same event name, just return
	                                    return;
	                                }
	                            }
	                        }
	                    }
	                    else {
	                        existingTasks = target[symbolEventName] = [];
	                    }
	                    var source;
	                    var constructorName = target.constructor['name'];
	                    var targetSource = globalSources[constructorName];
	                    if (targetSource) {
	                        source = targetSource[eventName];
	                    }
	                    if (!source) {
	                        source = constructorName + addSource +
	                            (eventNameToString ? eventNameToString(eventName) : eventName);
	                    }
	                    // do not create a new object as task.data to pass those things
	                    // just use the global shared one
	                    taskData.options = options;
	                    if (once) {
	                        // if addEventListener with once options, we don't pass it to
	                        // native addEventListener, instead we keep the once setting
	                        // and handle ourselves.
	                        taskData.options.once = false;
	                    }
	                    taskData.target = target;
	                    taskData.capture = capture;
	                    taskData.eventName = eventName;
	                    taskData.isExisting = isExisting;
	                    var data = useGlobalCallback ? OPTIMIZED_ZONE_EVENT_TASK_DATA : undefined;
	                    // keep taskData into data to allow onScheduleEventTask to access the task information
	                    if (data) {
	                        data.taskData = taskData;
	                    }
	                    var task = zone.scheduleEventTask(source, delegate, data, customScheduleFn, customCancelFn);
	                    // should clear taskData.target to avoid memory leak
	                    // issue, https://github.com/angular/angular/issues/20442
	                    taskData.target = null;
	                    // need to clear up taskData because it is a global object
	                    if (data) {
	                        data.taskData = null;
	                    }
	                    // have to save those information to task in case
	                    // application may call task.zone.cancelTask() directly
	                    if (once) {
	                        options.once = true;
	                    }
	                    if (!(!passiveSupported && typeof task.options === 'boolean')) {
	                        // if not support passive, and we pass an option object
	                        // to addEventListener, we should save the options to task
	                        task.options = options;
	                    }
	                    task.target = target;
	                    task.capture = capture;
	                    task.eventName = eventName;
	                    if (isHandleEvent) {
	                        // save original delegate for compare to check duplicate
	                        task.originalDelegate = delegate;
	                    }
	                    if (!prepend) {
	                        existingTasks.push(task);
	                    }
	                    else {
	                        existingTasks.unshift(task);
	                    }
	                    if (returnTarget) {
	                        return target;
	                    }
	                };
	            };
	            proto[ADD_EVENT_LISTENER] = makeAddListener(nativeAddEventListener, ADD_EVENT_LISTENER_SOURCE, customSchedule, customCancel, returnTarget);
	            if (nativePrependEventListener) {
	                proto[PREPEND_EVENT_LISTENER] = makeAddListener(nativePrependEventListener, PREPEND_EVENT_LISTENER_SOURCE, customSchedulePrepend, customCancel, returnTarget, true);
	            }
	            proto[REMOVE_EVENT_LISTENER] = function () {
	                var target = this || _global;
	                var eventName = arguments[0];
	                if (patchOptions && patchOptions.transferEventName) {
	                    eventName = patchOptions.transferEventName(eventName);
	                }
	                var options = arguments[2];
	                var capture = !options ? false : typeof options === 'boolean' ? true : options.capture;
	                var delegate = arguments[1];
	                if (!delegate) {
	                    return nativeRemoveEventListener.apply(this, arguments);
	                }
	                if (validateHandler &&
	                    !validateHandler(nativeRemoveEventListener, delegate, target, arguments)) {
	                    return;
	                }
	                var symbolEventNames = zoneSymbolEventNames$1[eventName];
	                var symbolEventName;
	                if (symbolEventNames) {
	                    symbolEventName = symbolEventNames[capture ? TRUE_STR : FALSE_STR];
	                }
	                var existingTasks = symbolEventName && target[symbolEventName];
	                if (existingTasks) {
	                    for (var i = 0; i < existingTasks.length; i++) {
	                        var existingTask = existingTasks[i];
	                        if (compare(existingTask, delegate)) {
	                            existingTasks.splice(i, 1);
	                            // set isRemoved to data for faster invokeTask check
	                            existingTask.isRemoved = true;
	                            if (existingTasks.length === 0) {
	                                // all tasks for the eventName + capture have gone,
	                                // remove globalZoneAwareCallback and remove the task cache from target
	                                existingTask.allRemoved = true;
	                                target[symbolEventName] = null;
	                                // in the target, we have an event listener which is added by on_property
	                                // such as target.onclick = function() {}, so we need to clear this internal
	                                // property too if all delegates all removed
	                                if (typeof eventName === 'string') {
	                                    var onPropertySymbol = ZONE_SYMBOL_PREFIX + 'ON_PROPERTY' + eventName;
	                                    target[onPropertySymbol] = null;
	                                }
	                            }
	                            existingTask.zone.cancelTask(existingTask);
	                            if (returnTarget) {
	                                return target;
	                            }
	                            return;
	                        }
	                    }
	                }
	                // issue 930, didn't find the event name or callback
	                // from zone kept existingTasks, the callback maybe
	                // added outside of zone, we need to call native removeEventListener
	                // to try to remove it.
	                return nativeRemoveEventListener.apply(this, arguments);
	            };
	            proto[LISTENERS_EVENT_LISTENER] = function () {
	                var target = this || _global;
	                var eventName = arguments[0];
	                if (patchOptions && patchOptions.transferEventName) {
	                    eventName = patchOptions.transferEventName(eventName);
	                }
	                var listeners = [];
	                var tasks = findEventTasks(target, eventNameToString ? eventNameToString(eventName) : eventName);
	                for (var i = 0; i < tasks.length; i++) {
	                    var task = tasks[i];
	                    var delegate = task.originalDelegate ? task.originalDelegate : task.callback;
	                    listeners.push(delegate);
	                }
	                return listeners;
	            };
	            proto[REMOVE_ALL_LISTENERS_EVENT_LISTENER] = function () {
	                var target = this || _global;
	                var eventName = arguments[0];
	                if (!eventName) {
	                    var keys = Object.keys(target);
	                    for (var i = 0; i < keys.length; i++) {
	                        var prop = keys[i];
	                        var match = EVENT_NAME_SYMBOL_REGX.exec(prop);
	                        var evtName = match && match[1];
	                        // in nodejs EventEmitter, removeListener event is
	                        // used for monitoring the removeListener call,
	                        // so just keep removeListener eventListener until
	                        // all other eventListeners are removed
	                        if (evtName && evtName !== 'removeListener') {
	                            this[REMOVE_ALL_LISTENERS_EVENT_LISTENER].call(this, evtName);
	                        }
	                    }
	                    // remove removeListener listener finally
	                    this[REMOVE_ALL_LISTENERS_EVENT_LISTENER].call(this, 'removeListener');
	                }
	                else {
	                    if (patchOptions && patchOptions.transferEventName) {
	                        eventName = patchOptions.transferEventName(eventName);
	                    }
	                    var symbolEventNames = zoneSymbolEventNames$1[eventName];
	                    if (symbolEventNames) {
	                        var symbolEventName = symbolEventNames[FALSE_STR];
	                        var symbolCaptureEventName = symbolEventNames[TRUE_STR];
	                        var tasks = target[symbolEventName];
	                        var captureTasks = target[symbolCaptureEventName];
	                        if (tasks) {
	                            var removeTasks = tasks.slice();
	                            for (var i = 0; i < removeTasks.length; i++) {
	                                var task = removeTasks[i];
	                                var delegate = task.originalDelegate ? task.originalDelegate : task.callback;
	                                this[REMOVE_EVENT_LISTENER].call(this, eventName, delegate, task.options);
	                            }
	                        }
	                        if (captureTasks) {
	                            var removeTasks = captureTasks.slice();
	                            for (var i = 0; i < removeTasks.length; i++) {
	                                var task = removeTasks[i];
	                                var delegate = task.originalDelegate ? task.originalDelegate : task.callback;
	                                this[REMOVE_EVENT_LISTENER].call(this, eventName, delegate, task.options);
	                            }
	                        }
	                    }
	                }
	                if (returnTarget) {
	                    return this;
	                }
	            };
	            // for native toString patch
	            attachOriginToPatched(proto[ADD_EVENT_LISTENER], nativeAddEventListener);
	            attachOriginToPatched(proto[REMOVE_EVENT_LISTENER], nativeRemoveEventListener);
	            if (nativeRemoveAllListeners) {
	                attachOriginToPatched(proto[REMOVE_ALL_LISTENERS_EVENT_LISTENER], nativeRemoveAllListeners);
	            }
	            if (nativeListeners) {
	                attachOriginToPatched(proto[LISTENERS_EVENT_LISTENER], nativeListeners);
	            }
	            return true;
	        }
	        var results = [];
	        for (var i = 0; i < apis.length; i++) {
	            results[i] = patchEventTargetMethods(apis[i], patchOptions);
	        }
	        return results;
	    }
	    function findEventTasks(target, eventName) {
	        if (!eventName) {
	            var foundTasks = [];
	            for (var prop in target) {
	                var match = EVENT_NAME_SYMBOL_REGX.exec(prop);
	                var evtName = match && match[1];
	                if (evtName && (!eventName || evtName === eventName)) {
	                    var tasks = target[prop];
	                    if (tasks) {
	                        for (var i = 0; i < tasks.length; i++) {
	                            foundTasks.push(tasks[i]);
	                        }
	                    }
	                }
	            }
	            return foundTasks;
	        }
	        var symbolEventName = zoneSymbolEventNames$1[eventName];
	        if (!symbolEventName) {
	            prepareEventNames(eventName);
	            symbolEventName = zoneSymbolEventNames$1[eventName];
	        }
	        var captureFalseTasks = target[symbolEventName[FALSE_STR]];
	        var captureTrueTasks = target[symbolEventName[TRUE_STR]];
	        if (!captureFalseTasks) {
	            return captureTrueTasks ? captureTrueTasks.slice() : [];
	        }
	        else {
	            return captureTrueTasks ? captureFalseTasks.concat(captureTrueTasks) :
	                captureFalseTasks.slice();
	        }
	    }
	    function patchEventPrototype(global, api) {
	        var Event = global['Event'];
	        if (Event && Event.prototype) {
	            api.patchMethod(Event.prototype, 'stopImmediatePropagation', function (delegate) { return function (self, args) {
	                self[IMMEDIATE_PROPAGATION_SYMBOL] = true;
	                // we need to call the native stopImmediatePropagation
	                // in case in some hybrid application, some part of
	                // application will be controlled by zone, some are not
	                delegate && delegate.apply(self, args);
	            }; });
	        }
	    }
	    /**
	     * @license
	     * Copyright Google Inc. All Rights Reserved.
	     *
	     * Use of this source code is governed by an MIT-style license that can be
	     * found in the LICENSE file at https://angular.io/license
	     */
	    function patchCallbacks(api, target, targetName, method, callbacks) {
	        var symbol = Zone.__symbol__(method);
	        if (target[symbol]) {
	            return;
	        }
	        var nativeDelegate = target[symbol] = target[method];
	        target[method] = function (name, opts, options) {
	            if (opts && opts.prototype) {
	                callbacks.forEach(function (callback) {
	                    var source = targetName + "." + method + "::" + callback;
	                    var prototype = opts.prototype;
	                    if (prototype.hasOwnProperty(callback)) {
	                        var descriptor = api.ObjectGetOwnPropertyDescriptor(prototype, callback);
	                        if (descriptor && descriptor.value) {
	                            descriptor.value = api.wrapWithCurrentZone(descriptor.value, source);
	                            api._redefineProperty(opts.prototype, callback, descriptor);
	                        }
	                        else if (prototype[callback]) {
	                            prototype[callback] = api.wrapWithCurrentZone(prototype[callback], source);
	                        }
	                    }
	                    else if (prototype[callback]) {
	                        prototype[callback] = api.wrapWithCurrentZone(prototype[callback], source);
	                    }
	                });
	            }
	            return nativeDelegate.call(target, name, opts, options);
	        };
	        api.attachOriginToPatched(target[method], nativeDelegate);
	    }
	    /**
	     * @license
	     * Copyright Google Inc. All Rights Reserved.
	     *
	     * Use of this source code is governed by an MIT-style license that can be
	     * found in the LICENSE file at https://angular.io/license
	     */
	    var globalEventHandlersEventNames = [
	        'abort',
	        'animationcancel',
	        'animationend',
	        'animationiteration',
	        'auxclick',
	        'beforeinput',
	        'blur',
	        'cancel',
	        'canplay',
	        'canplaythrough',
	        'change',
	        'compositionstart',
	        'compositionupdate',
	        'compositionend',
	        'cuechange',
	        'click',
	        'close',
	        'contextmenu',
	        'curechange',
	        'dblclick',
	        'drag',
	        'dragend',
	        'dragenter',
	        'dragexit',
	        'dragleave',
	        'dragover',
	        'drop',
	        'durationchange',
	        'emptied',
	        'ended',
	        'error',
	        'focus',
	        'focusin',
	        'focusout',
	        'gotpointercapture',
	        'input',
	        'invalid',
	        'keydown',
	        'keypress',
	        'keyup',
	        'load',
	        'loadstart',
	        'loadeddata',
	        'loadedmetadata',
	        'lostpointercapture',
	        'mousedown',
	        'mouseenter',
	        'mouseleave',
	        'mousemove',
	        'mouseout',
	        'mouseover',
	        'mouseup',
	        'mousewheel',
	        'orientationchange',
	        'pause',
	        'play',
	        'playing',
	        'pointercancel',
	        'pointerdown',
	        'pointerenter',
	        'pointerleave',
	        'pointerlockchange',
	        'mozpointerlockchange',
	        'webkitpointerlockerchange',
	        'pointerlockerror',
	        'mozpointerlockerror',
	        'webkitpointerlockerror',
	        'pointermove',
	        'pointout',
	        'pointerover',
	        'pointerup',
	        'progress',
	        'ratechange',
	        'reset',
	        'resize',
	        'scroll',
	        'seeked',
	        'seeking',
	        'select',
	        'selectionchange',
	        'selectstart',
	        'show',
	        'sort',
	        'stalled',
	        'submit',
	        'suspend',
	        'timeupdate',
	        'volumechange',
	        'touchcancel',
	        'touchmove',
	        'touchstart',
	        'touchend',
	        'transitioncancel',
	        'transitionend',
	        'waiting',
	        'wheel'
	    ];
	    var documentEventNames = [
	        'afterscriptexecute', 'beforescriptexecute', 'DOMContentLoaded', 'freeze', 'fullscreenchange',
	        'mozfullscreenchange', 'webkitfullscreenchange', 'msfullscreenchange', 'fullscreenerror',
	        'mozfullscreenerror', 'webkitfullscreenerror', 'msfullscreenerror', 'readystatechange',
	        'visibilitychange', 'resume'
	    ];
	    var windowEventNames = [
	        'absolutedeviceorientation',
	        'afterinput',
	        'afterprint',
	        'appinstalled',
	        'beforeinstallprompt',
	        'beforeprint',
	        'beforeunload',
	        'devicelight',
	        'devicemotion',
	        'deviceorientation',
	        'deviceorientationabsolute',
	        'deviceproximity',
	        'hashchange',
	        'languagechange',
	        'message',
	        'mozbeforepaint',
	        'offline',
	        'online',
	        'paint',
	        'pageshow',
	        'pagehide',
	        'popstate',
	        'rejectionhandled',
	        'storage',
	        'unhandledrejection',
	        'unload',
	        'userproximity',
	        'vrdisplayconnected',
	        'vrdisplaydisconnected',
	        'vrdisplaypresentchange'
	    ];
	    var htmlElementEventNames = [
	        'beforecopy', 'beforecut', 'beforepaste', 'copy', 'cut', 'paste', 'dragstart', 'loadend',
	        'animationstart', 'search', 'transitionrun', 'transitionstart', 'webkitanimationend',
	        'webkitanimationiteration', 'webkitanimationstart', 'webkittransitionend'
	    ];
	    var mediaElementEventNames = ['encrypted', 'waitingforkey', 'msneedkey', 'mozinterruptbegin', 'mozinterruptend'];
	    var ieElementEventNames = [
	        'activate',
	        'afterupdate',
	        'ariarequest',
	        'beforeactivate',
	        'beforedeactivate',
	        'beforeeditfocus',
	        'beforeupdate',
	        'cellchange',
	        'controlselect',
	        'dataavailable',
	        'datasetchanged',
	        'datasetcomplete',
	        'errorupdate',
	        'filterchange',
	        'layoutcomplete',
	        'losecapture',
	        'move',
	        'moveend',
	        'movestart',
	        'propertychange',
	        'resizeend',
	        'resizestart',
	        'rowenter',
	        'rowexit',
	        'rowsdelete',
	        'rowsinserted',
	        'command',
	        'compassneedscalibration',
	        'deactivate',
	        'help',
	        'mscontentzoom',
	        'msmanipulationstatechanged',
	        'msgesturechange',
	        'msgesturedoubletap',
	        'msgestureend',
	        'msgesturehold',
	        'msgesturestart',
	        'msgesturetap',
	        'msgotpointercapture',
	        'msinertiastart',
	        'mslostpointercapture',
	        'mspointercancel',
	        'mspointerdown',
	        'mspointerenter',
	        'mspointerhover',
	        'mspointerleave',
	        'mspointermove',
	        'mspointerout',
	        'mspointerover',
	        'mspointerup',
	        'pointerout',
	        'mssitemodejumplistitemremoved',
	        'msthumbnailclick',
	        'stop',
	        'storagecommit'
	    ];
	    var webglEventNames = ['webglcontextrestored', 'webglcontextlost', 'webglcontextcreationerror'];
	    var formEventNames = ['autocomplete', 'autocompleteerror'];
	    var detailEventNames = ['toggle'];
	    var frameEventNames = ['load'];
	    var frameSetEventNames = ['blur', 'error', 'focus', 'load', 'resize', 'scroll', 'messageerror'];
	    var marqueeEventNames = ['bounce', 'finish', 'start'];
	    var XMLHttpRequestEventNames = [
	        'loadstart', 'progress', 'abort', 'error', 'load', 'progress', 'timeout', 'loadend',
	        'readystatechange'
	    ];
	    var IDBIndexEventNames = ['upgradeneeded', 'complete', 'abort', 'success', 'error', 'blocked', 'versionchange', 'close'];
	    var websocketEventNames = ['close', 'error', 'open', 'message'];
	    var workerEventNames = ['error', 'message'];
	    var eventNames = globalEventHandlersEventNames.concat(webglEventNames, formEventNames, detailEventNames, documentEventNames, windowEventNames, htmlElementEventNames, ieElementEventNames);
	    function filterProperties(target, onProperties, ignoreProperties) {
	        if (!ignoreProperties || ignoreProperties.length === 0) {
	            return onProperties;
	        }
	        var tip = ignoreProperties.filter(function (ip) { return ip.target === target; });
	        if (!tip || tip.length === 0) {
	            return onProperties;
	        }
	        var targetIgnoreProperties = tip[0].ignoreProperties;
	        return onProperties.filter(function (op) { return targetIgnoreProperties.indexOf(op) === -1; });
	    }
	    function patchFilteredProperties(target, onProperties, ignoreProperties, prototype) {
	        // check whether target is available, sometimes target will be undefined
	        // because different browser or some 3rd party plugin.
	        if (!target) {
	            return;
	        }
	        var filteredProperties = filterProperties(target, onProperties, ignoreProperties);
	        patchOnProperties(target, filteredProperties, prototype);
	    }
	    function propertyDescriptorPatch(api, _global) {
	        if (isNode && !isMix) {
	            return;
	        }
	        if (Zone[api.symbol('patchEvents')]) {
	            // events are already been patched by legacy patch.
	            return;
	        }
	        var supportsWebSocket = typeof WebSocket !== 'undefined';
	        var ignoreProperties = _global['__Zone_ignore_on_properties'];
	        // for browsers that we can patch the descriptor:  Chrome & Firefox
	        if (isBrowser) {
	            var internalWindow_1 = window;
	            var ignoreErrorProperties = isIE ? [{ target: internalWindow_1, ignoreProperties: ['error'] }] : [];
	            // in IE/Edge, onProp not exist in window object, but in WindowPrototype
	            // so we need to pass WindowPrototype to check onProp exist or not
	            patchFilteredProperties(internalWindow_1, eventNames.concat(['messageerror']), ignoreProperties ? ignoreProperties.concat(ignoreErrorProperties) : ignoreProperties, ObjectGetPrototypeOf(internalWindow_1));
	            patchFilteredProperties(Document.prototype, eventNames, ignoreProperties);
	            if (typeof internalWindow_1['SVGElement'] !== 'undefined') {
	                patchFilteredProperties(internalWindow_1['SVGElement'].prototype, eventNames, ignoreProperties);
	            }
	            patchFilteredProperties(Element.prototype, eventNames, ignoreProperties);
	            patchFilteredProperties(HTMLElement.prototype, eventNames, ignoreProperties);
	            patchFilteredProperties(HTMLMediaElement.prototype, mediaElementEventNames, ignoreProperties);
	            patchFilteredProperties(HTMLFrameSetElement.prototype, windowEventNames.concat(frameSetEventNames), ignoreProperties);
	            patchFilteredProperties(HTMLBodyElement.prototype, windowEventNames.concat(frameSetEventNames), ignoreProperties);
	            patchFilteredProperties(HTMLFrameElement.prototype, frameEventNames, ignoreProperties);
	            patchFilteredProperties(HTMLIFrameElement.prototype, frameEventNames, ignoreProperties);
	            var HTMLMarqueeElement_1 = internalWindow_1['HTMLMarqueeElement'];
	            if (HTMLMarqueeElement_1) {
	                patchFilteredProperties(HTMLMarqueeElement_1.prototype, marqueeEventNames, ignoreProperties);
	            }
	            var Worker_1 = internalWindow_1['Worker'];
	            if (Worker_1) {
	                patchFilteredProperties(Worker_1.prototype, workerEventNames, ignoreProperties);
	            }
	        }
	        var XMLHttpRequest = _global['XMLHttpRequest'];
	        if (XMLHttpRequest) {
	            // XMLHttpRequest is not available in ServiceWorker, so we need to check here
	            patchFilteredProperties(XMLHttpRequest.prototype, XMLHttpRequestEventNames, ignoreProperties);
	        }
	        var XMLHttpRequestEventTarget = _global['XMLHttpRequestEventTarget'];
	        if (XMLHttpRequestEventTarget) {
	            patchFilteredProperties(XMLHttpRequestEventTarget && XMLHttpRequestEventTarget.prototype, XMLHttpRequestEventNames, ignoreProperties);
	        }
	        if (typeof IDBIndex !== 'undefined') {
	            patchFilteredProperties(IDBIndex.prototype, IDBIndexEventNames, ignoreProperties);
	            patchFilteredProperties(IDBRequest.prototype, IDBIndexEventNames, ignoreProperties);
	            patchFilteredProperties(IDBOpenDBRequest.prototype, IDBIndexEventNames, ignoreProperties);
	            patchFilteredProperties(IDBDatabase.prototype, IDBIndexEventNames, ignoreProperties);
	            patchFilteredProperties(IDBTransaction.prototype, IDBIndexEventNames, ignoreProperties);
	            patchFilteredProperties(IDBCursor.prototype, IDBIndexEventNames, ignoreProperties);
	        }
	        if (supportsWebSocket) {
	            patchFilteredProperties(WebSocket.prototype, websocketEventNames, ignoreProperties);
	        }
	    }
	    /**
	     * @license
	     * Copyright Google Inc. All Rights Reserved.
	     *
	     * Use of this source code is governed by an MIT-style license that can be
	     * found in the LICENSE file at https://angular.io/license
	     */
	    Zone.__load_patch('util', function (global, Zone, api) {
	        api.patchOnProperties = patchOnProperties;
	        api.patchMethod = patchMethod;
	        api.bindArguments = bindArguments;
	        api.patchMacroTask = patchMacroTask;
	        // In earlier version of zone.js (<0.9.0), we use env name `__zone_symbol__BLACK_LISTED_EVENTS` to
	        // define which events will not be patched by `Zone.js`.
	        // In newer version (>=0.9.0), we change the env name to `__zone_symbol__UNPATCHED_EVENTS` to keep
	        // the name consistent with angular repo.
	        // The  `__zone_symbol__BLACK_LISTED_EVENTS` is deprecated, but it is still be supported for
	        // backwards compatibility.
	        var SYMBOL_BLACK_LISTED_EVENTS = Zone.__symbol__('BLACK_LISTED_EVENTS');
	        var SYMBOL_UNPATCHED_EVENTS = Zone.__symbol__('UNPATCHED_EVENTS');
	        if (global[SYMBOL_UNPATCHED_EVENTS]) {
	            global[SYMBOL_BLACK_LISTED_EVENTS] = global[SYMBOL_UNPATCHED_EVENTS];
	        }
	        if (global[SYMBOL_BLACK_LISTED_EVENTS]) {
	            Zone[SYMBOL_BLACK_LISTED_EVENTS] = Zone[SYMBOL_UNPATCHED_EVENTS] =
	                global[SYMBOL_BLACK_LISTED_EVENTS];
	        }
	        api.patchEventPrototype = patchEventPrototype;
	        api.patchEventTarget = patchEventTarget;
	        api.isIEOrEdge = isIEOrEdge;
	        api.ObjectDefineProperty = ObjectDefineProperty;
	        api.ObjectGetOwnPropertyDescriptor = ObjectGetOwnPropertyDescriptor;
	        api.ObjectCreate = ObjectCreate;
	        api.ArraySlice = ArraySlice;
	        api.patchClass = patchClass;
	        api.wrapWithCurrentZone = wrapWithCurrentZone;
	        api.filterProperties = filterProperties;
	        api.attachOriginToPatched = attachOriginToPatched;
	        api._redefineProperty = Object.defineProperty;
	        api.patchCallbacks = patchCallbacks;
	        api.getGlobalObjects = function () { return ({ globalSources: globalSources, zoneSymbolEventNames: zoneSymbolEventNames$1, eventNames: eventNames, isBrowser: isBrowser, isMix: isMix, isNode: isNode, TRUE_STR: TRUE_STR,
	            FALSE_STR: FALSE_STR, ZONE_SYMBOL_PREFIX: ZONE_SYMBOL_PREFIX, ADD_EVENT_LISTENER_STR: ADD_EVENT_LISTENER_STR, REMOVE_EVENT_LISTENER_STR: REMOVE_EVENT_LISTENER_STR }); };
	    });
	    /**
	     * @license
	     * Copyright Google Inc. All Rights Reserved.
	     *
	     * Use of this source code is governed by an MIT-style license that can be
	     * found in the LICENSE file at https://angular.io/license
	     */
	    /*
	     * This is necessary for Chrome and Chrome mobile, to enable
	     * things like redefining `createdCallback` on an element.
	     */
	    var zoneSymbol$1;
	    var _defineProperty;
	    var _getOwnPropertyDescriptor;
	    var _create;
	    var unconfigurablesKey;
	    function propertyPatch() {
	        zoneSymbol$1 = Zone.__symbol__;
	        _defineProperty = Object[zoneSymbol$1('defineProperty')] = Object.defineProperty;
	        _getOwnPropertyDescriptor = Object[zoneSymbol$1('getOwnPropertyDescriptor')] =
	            Object.getOwnPropertyDescriptor;
	        _create = Object.create;
	        unconfigurablesKey = zoneSymbol$1('unconfigurables');
	        Object.defineProperty = function (obj, prop, desc) {
	            if (isUnconfigurable(obj, prop)) {
	                throw new TypeError('Cannot assign to read only property \'' + prop + '\' of ' + obj);
	            }
	            var originalConfigurableFlag = desc.configurable;
	            if (prop !== 'prototype') {
	                desc = rewriteDescriptor(obj, prop, desc);
	            }
	            return _tryDefineProperty(obj, prop, desc, originalConfigurableFlag);
	        };
	        Object.defineProperties = function (obj, props) {
	            Object.keys(props).forEach(function (prop) { Object.defineProperty(obj, prop, props[prop]); });
	            return obj;
	        };
	        Object.create = function (obj, proto) {
	            if (typeof proto === 'object' && !Object.isFrozen(proto)) {
	                Object.keys(proto).forEach(function (prop) {
	                    proto[prop] = rewriteDescriptor(obj, prop, proto[prop]);
	                });
	            }
	            return _create(obj, proto);
	        };
	        Object.getOwnPropertyDescriptor = function (obj, prop) {
	            var desc = _getOwnPropertyDescriptor(obj, prop);
	            if (desc && isUnconfigurable(obj, prop)) {
	                desc.configurable = false;
	            }
	            return desc;
	        };
	    }
	    function _redefineProperty(obj, prop, desc) {
	        var originalConfigurableFlag = desc.configurable;
	        desc = rewriteDescriptor(obj, prop, desc);
	        return _tryDefineProperty(obj, prop, desc, originalConfigurableFlag);
	    }
	    function isUnconfigurable(obj, prop) {
	        return obj && obj[unconfigurablesKey] && obj[unconfigurablesKey][prop];
	    }
	    function rewriteDescriptor(obj, prop, desc) {
	        // issue-927, if the desc is frozen, don't try to change the desc
	        if (!Object.isFrozen(desc)) {
	            desc.configurable = true;
	        }
	        if (!desc.configurable) {
	            // issue-927, if the obj is frozen, don't try to set the desc to obj
	            if (!obj[unconfigurablesKey] && !Object.isFrozen(obj)) {
	                _defineProperty(obj, unconfigurablesKey, { writable: true, value: {} });
	            }
	            if (obj[unconfigurablesKey]) {
	                obj[unconfigurablesKey][prop] = true;
	            }
	        }
	        return desc;
	    }
	    function _tryDefineProperty(obj, prop, desc, originalConfigurableFlag) {
	        try {
	            return _defineProperty(obj, prop, desc);
	        }
	        catch (error) {
	            if (desc.configurable) {
	                // In case of errors, when the configurable flag was likely set by rewriteDescriptor(), let's
	                // retry with the original flag value
	                if (typeof originalConfigurableFlag == 'undefined') {
	                    delete desc.configurable;
	                }
	                else {
	                    desc.configurable = originalConfigurableFlag;
	                }
	                try {
	                    return _defineProperty(obj, prop, desc);
	                }
	                catch (error) {
	                    var descJson = null;
	                    try {
	                        descJson = JSON.stringify(desc);
	                    }
	                    catch (error) {
	                        descJson = desc.toString();
	                    }
	                    console.log("Attempting to configure '" + prop + "' with descriptor '" + descJson + "' on object '" + obj + "' and got error, giving up: " + error);
	                }
	            }
	            else {
	                throw error;
	            }
	        }
	    }
	    /**
	     * @license
	     * Copyright Google Inc. All Rights Reserved.
	     *
	     * Use of this source code is governed by an MIT-style license that can be
	     * found in the LICENSE file at https://angular.io/license
	     */
	    function eventTargetLegacyPatch(_global, api) {
	        var _a = api.getGlobalObjects(), eventNames = _a.eventNames, globalSources = _a.globalSources, zoneSymbolEventNames = _a.zoneSymbolEventNames, TRUE_STR = _a.TRUE_STR, FALSE_STR = _a.FALSE_STR, ZONE_SYMBOL_PREFIX = _a.ZONE_SYMBOL_PREFIX;
	        var WTF_ISSUE_555 = 'Anchor,Area,Audio,BR,Base,BaseFont,Body,Button,Canvas,Content,DList,Directory,Div,Embed,FieldSet,Font,Form,Frame,FrameSet,HR,Head,Heading,Html,IFrame,Image,Input,Keygen,LI,Label,Legend,Link,Map,Marquee,Media,Menu,Meta,Meter,Mod,OList,Object,OptGroup,Option,Output,Paragraph,Pre,Progress,Quote,Script,Select,Source,Span,Style,TableCaption,TableCell,TableCol,Table,TableRow,TableSection,TextArea,Title,Track,UList,Unknown,Video';
	        var NO_EVENT_TARGET = 'ApplicationCache,EventSource,FileReader,InputMethodContext,MediaController,MessagePort,Node,Performance,SVGElementInstance,SharedWorker,TextTrack,TextTrackCue,TextTrackList,WebKitNamedFlow,Window,Worker,WorkerGlobalScope,XMLHttpRequest,XMLHttpRequestEventTarget,XMLHttpRequestUpload,IDBRequest,IDBOpenDBRequest,IDBDatabase,IDBTransaction,IDBCursor,DBIndex,WebSocket'
	            .split(',');
	        var EVENT_TARGET = 'EventTarget';
	        var apis = [];
	        var isWtf = _global['wtf'];
	        var WTF_ISSUE_555_ARRAY = WTF_ISSUE_555.split(',');
	        if (isWtf) {
	            // Workaround for: https://github.com/google/tracing-framework/issues/555
	            apis = WTF_ISSUE_555_ARRAY.map(function (v) { return 'HTML' + v + 'Element'; }).concat(NO_EVENT_TARGET);
	        }
	        else if (_global[EVENT_TARGET]) {
	            apis.push(EVENT_TARGET);
	        }
	        else {
	            // Note: EventTarget is not available in all browsers,
	            // if it's not available, we instead patch the APIs in the IDL that inherit from EventTarget
	            apis = NO_EVENT_TARGET;
	        }
	        var isDisableIECheck = _global['__Zone_disable_IE_check'] || false;
	        var isEnableCrossContextCheck = _global['__Zone_enable_cross_context_check'] || false;
	        var ieOrEdge = api.isIEOrEdge();
	        var ADD_EVENT_LISTENER_SOURCE = '.addEventListener:';
	        var FUNCTION_WRAPPER = '[object FunctionWrapper]';
	        var BROWSER_TOOLS = 'function __BROWSERTOOLS_CONSOLE_SAFEFUNC() { [native code] }';
	        var pointerEventsMap = {
	            'MSPointerCancel': 'pointercancel',
	            'MSPointerDown': 'pointerdown',
	            'MSPointerEnter': 'pointerenter',
	            'MSPointerHover': 'pointerhover',
	            'MSPointerLeave': 'pointerleave',
	            'MSPointerMove': 'pointermove',
	            'MSPointerOut': 'pointerout',
	            'MSPointerOver': 'pointerover',
	            'MSPointerUp': 'pointerup'
	        };
	        //  predefine all __zone_symbol__ + eventName + true/false string
	        for (var i = 0; i < eventNames.length; i++) {
	            var eventName = eventNames[i];
	            var falseEventName = eventName + FALSE_STR;
	            var trueEventName = eventName + TRUE_STR;
	            var symbol = ZONE_SYMBOL_PREFIX + falseEventName;
	            var symbolCapture = ZONE_SYMBOL_PREFIX + trueEventName;
	            zoneSymbolEventNames[eventName] = {};
	            zoneSymbolEventNames[eventName][FALSE_STR] = symbol;
	            zoneSymbolEventNames[eventName][TRUE_STR] = symbolCapture;
	        }
	        //  predefine all task.source string
	        for (var i = 0; i < WTF_ISSUE_555_ARRAY.length; i++) {
	            var target = WTF_ISSUE_555_ARRAY[i];
	            var targets = globalSources[target] = {};
	            for (var j = 0; j < eventNames.length; j++) {
	                var eventName = eventNames[j];
	                targets[eventName] = target + ADD_EVENT_LISTENER_SOURCE + eventName;
	            }
	        }
	        var checkIEAndCrossContext = function (nativeDelegate, delegate, target, args) {
	            if (!isDisableIECheck && ieOrEdge) {
	                if (isEnableCrossContextCheck) {
	                    try {
	                        var testString = delegate.toString();
	                        if ((testString === FUNCTION_WRAPPER || testString == BROWSER_TOOLS)) {
	                            nativeDelegate.apply(target, args);
	                            return false;
	                        }
	                    }
	                    catch (error) {
	                        nativeDelegate.apply(target, args);
	                        return false;
	                    }
	                }
	                else {
	                    var testString = delegate.toString();
	                    if ((testString === FUNCTION_WRAPPER || testString == BROWSER_TOOLS)) {
	                        nativeDelegate.apply(target, args);
	                        return false;
	                    }
	                }
	            }
	            else if (isEnableCrossContextCheck) {
	                try {
	                    delegate.toString();
	                }
	                catch (error) {
	                    nativeDelegate.apply(target, args);
	                    return false;
	                }
	            }
	            return true;
	        };
	        var apiTypes = [];
	        for (var i = 0; i < apis.length; i++) {
	            var type = _global[apis[i]];
	            apiTypes.push(type && type.prototype);
	        }
	        // vh is validateHandler to check event handler
	        // is valid or not(for security check)
	        api.patchEventTarget(_global, apiTypes, {
	            vh: checkIEAndCrossContext,
	            transferEventName: function (eventName) {
	                var pointerEventName = pointerEventsMap[eventName];
	                return pointerEventName || eventName;
	            }
	        });
	        Zone[api.symbol('patchEventTarget')] = !!_global[EVENT_TARGET];
	        return true;
	    }
	    /**
	     * @license
	     * Copyright Google Inc. All Rights Reserved.
	     *
	     * Use of this source code is governed by an MIT-style license that can be
	     * found in the LICENSE file at https://angular.io/license
	     */
	    // we have to patch the instance since the proto is non-configurable
	    function apply(api, _global) {
	        var _a = api.getGlobalObjects(), ADD_EVENT_LISTENER_STR = _a.ADD_EVENT_LISTENER_STR, REMOVE_EVENT_LISTENER_STR = _a.REMOVE_EVENT_LISTENER_STR;
	        var WS = _global.WebSocket;
	        // On Safari window.EventTarget doesn't exist so need to patch WS add/removeEventListener
	        // On older Chrome, no need since EventTarget was already patched
	        if (!_global.EventTarget) {
	            api.patchEventTarget(_global, [WS.prototype]);
	        }
	        _global.WebSocket = function (x, y) {
	            var socket = arguments.length > 1 ? new WS(x, y) : new WS(x);
	            var proxySocket;
	            var proxySocketProto;
	            // Safari 7.0 has non-configurable own 'onmessage' and friends properties on the socket instance
	            var onmessageDesc = api.ObjectGetOwnPropertyDescriptor(socket, 'onmessage');
	            if (onmessageDesc && onmessageDesc.configurable === false) {
	                proxySocket = api.ObjectCreate(socket);
	                // socket have own property descriptor 'onopen', 'onmessage', 'onclose', 'onerror'
	                // but proxySocket not, so we will keep socket as prototype and pass it to
	                // patchOnProperties method
	                proxySocketProto = socket;
	                [ADD_EVENT_LISTENER_STR, REMOVE_EVENT_LISTENER_STR, 'send', 'close'].forEach(function (propName) {
	                    proxySocket[propName] = function () {
	                        var args = api.ArraySlice.call(arguments);
	                        if (propName === ADD_EVENT_LISTENER_STR || propName === REMOVE_EVENT_LISTENER_STR) {
	                            var eventName = args.length > 0 ? args[0] : undefined;
	                            if (eventName) {
	                                var propertySymbol = Zone.__symbol__('ON_PROPERTY' + eventName);
	                                socket[propertySymbol] = proxySocket[propertySymbol];
	                            }
	                        }
	                        return socket[propName].apply(socket, args);
	                    };
	                });
	            }
	            else {
	                // we can patch the real socket
	                proxySocket = socket;
	            }
	            api.patchOnProperties(proxySocket, ['close', 'error', 'message', 'open'], proxySocketProto);
	            return proxySocket;
	        };
	        var globalWebSocket = _global['WebSocket'];
	        for (var prop in WS) {
	            globalWebSocket[prop] = WS[prop];
	        }
	    }
	    /**
	     * @license
	     * Copyright Google Inc. All Rights Reserved.
	     *
	     * Use of this source code is governed by an MIT-style license that can be
	     * found in the LICENSE file at https://angular.io/license
	     */
	    function propertyDescriptorLegacyPatch(api, _global) {
	        var _a = api.getGlobalObjects(), isNode = _a.isNode, isMix = _a.isMix;
	        if (isNode && !isMix) {
	            return;
	        }
	        if (!canPatchViaPropertyDescriptor(api, _global)) {
	            var supportsWebSocket = typeof WebSocket !== 'undefined';
	            // Safari, Android browsers (Jelly Bean)
	            patchViaCapturingAllTheEvents(api);
	            api.patchClass('XMLHttpRequest');
	            if (supportsWebSocket) {
	                apply(api, _global);
	            }
	            Zone[api.symbol('patchEvents')] = true;
	        }
	    }
	    function canPatchViaPropertyDescriptor(api, _global) {
	        var _a = api.getGlobalObjects(), isBrowser = _a.isBrowser, isMix = _a.isMix;
	        if ((isBrowser || isMix) &&
	            !api.ObjectGetOwnPropertyDescriptor(HTMLElement.prototype, 'onclick') &&
	            typeof Element !== 'undefined') {
	            // WebKit https://bugs.webkit.org/show_bug.cgi?id=134364
	            // IDL interface attributes are not configurable
	            var desc = api.ObjectGetOwnPropertyDescriptor(Element.prototype, 'onclick');
	            if (desc && !desc.configurable)
	                return false;
	            // try to use onclick to detect whether we can patch via propertyDescriptor
	            // because XMLHttpRequest is not available in service worker
	            if (desc) {
	                api.ObjectDefineProperty(Element.prototype, 'onclick', { enumerable: true, configurable: true, get: function () { return true; } });
	                var div = document.createElement('div');
	                var result = !!div.onclick;
	                api.ObjectDefineProperty(Element.prototype, 'onclick', desc);
	                return result;
	            }
	        }
	        var XMLHttpRequest = _global['XMLHttpRequest'];
	        if (!XMLHttpRequest) {
	            // XMLHttpRequest is not available in service worker
	            return false;
	        }
	        var ON_READY_STATE_CHANGE = 'onreadystatechange';
	        var XMLHttpRequestPrototype = XMLHttpRequest.prototype;
	        var xhrDesc = api.ObjectGetOwnPropertyDescriptor(XMLHttpRequestPrototype, ON_READY_STATE_CHANGE);
	        // add enumerable and configurable here because in opera
	        // by default XMLHttpRequest.prototype.onreadystatechange is undefined
	        // without adding enumerable and configurable will cause onreadystatechange
	        // non-configurable
	        // and if XMLHttpRequest.prototype.onreadystatechange is undefined,
	        // we should set a real desc instead a fake one
	        if (xhrDesc) {
	            api.ObjectDefineProperty(XMLHttpRequestPrototype, ON_READY_STATE_CHANGE, { enumerable: true, configurable: true, get: function () { return true; } });
	            var req = new XMLHttpRequest();
	            var result = !!req.onreadystatechange;
	            // restore original desc
	            api.ObjectDefineProperty(XMLHttpRequestPrototype, ON_READY_STATE_CHANGE, xhrDesc || {});
	            return result;
	        }
	        else {
	            var SYMBOL_FAKE_ONREADYSTATECHANGE_1 = api.symbol('fake');
	            api.ObjectDefineProperty(XMLHttpRequestPrototype, ON_READY_STATE_CHANGE, {
	                enumerable: true,
	                configurable: true,
	                get: function () { return this[SYMBOL_FAKE_ONREADYSTATECHANGE_1]; },
	                set: function (value) { this[SYMBOL_FAKE_ONREADYSTATECHANGE_1] = value; }
	            });
	            var req = new XMLHttpRequest();
	            var detectFunc = function () { };
	            req.onreadystatechange = detectFunc;
	            var result = req[SYMBOL_FAKE_ONREADYSTATECHANGE_1] === detectFunc;
	            req.onreadystatechange = null;
	            return result;
	        }
	    }
	    // Whenever any eventListener fires, we check the eventListener target and all parents
	    // for `onwhatever` properties and replace them with zone-bound functions
	    // - Chrome (for now)
	    function patchViaCapturingAllTheEvents(api) {
	        var eventNames = api.getGlobalObjects().eventNames;
	        var unboundKey = api.symbol('unbound');
	        var _loop_4 = function (i) {
	            var property = eventNames[i];
	            var onproperty = 'on' + property;
	            self.addEventListener(property, function (event) {
	                var elt = event.target, bound, source;
	                if (elt) {
	                    source = elt.constructor['name'] + '.' + onproperty;
	                }
	                else {
	                    source = 'unknown.' + onproperty;
	                }
	                while (elt) {
	                    if (elt[onproperty] && !elt[onproperty][unboundKey]) {
	                        bound = api.wrapWithCurrentZone(elt[onproperty], source);
	                        bound[unboundKey] = elt[onproperty];
	                        elt[onproperty] = bound;
	                    }
	                    elt = elt.parentElement;
	                }
	            }, true);
	        };
	        for (var i = 0; i < eventNames.length; i++) {
	            _loop_4(i);
	        }
	    }
	    /**
	     * @license
	     * Copyright Google Inc. All Rights Reserved.
	     *
	     * Use of this source code is governed by an MIT-style license that can be
	     * found in the LICENSE file at https://angular.io/license
	     */
	    function registerElementPatch(_global, api) {
	        var _a = api.getGlobalObjects(), isBrowser = _a.isBrowser, isMix = _a.isMix;
	        if ((!isBrowser && !isMix) || !('registerElement' in _global.document)) {
	            return;
	        }
	        var callbacks = ['createdCallback', 'attachedCallback', 'detachedCallback', 'attributeChangedCallback'];
	        api.patchCallbacks(api, document, 'Document', 'registerElement', callbacks);
	    }
	    /**
	     * @license
	     * Copyright Google Inc. All Rights Reserved.
	     *
	     * Use of this source code is governed by an MIT-style license that can be
	     * found in the LICENSE file at https://angular.io/license
	     */
	    (function (_global) {
	        var symbolPrefix = _global['__Zone_symbol_prefix'] || '__zone_symbol__';
	        function __symbol__(name) { return symbolPrefix + name; }
	        _global[__symbol__('legacyPatch')] = function () {
	            var Zone = _global['Zone'];
	            Zone.__load_patch('defineProperty', function (global, Zone, api) {
	                api._redefineProperty = _redefineProperty;
	                propertyPatch();
	            });
	            Zone.__load_patch('registerElement', function (global, Zone, api) {
	                registerElementPatch(global, api);
	            });
	            Zone.__load_patch('EventTargetLegacy', function (global, Zone, api) {
	                eventTargetLegacyPatch(global, api);
	                propertyDescriptorLegacyPatch(api, global);
	            });
	        };
	    })(typeof window !== 'undefined' ?
	        window :
	        typeof commonjsGlobal !== 'undefined' ? commonjsGlobal : typeof self !== 'undefined' ? self : {});
	    /**
	     * @license
	     * Copyright Google Inc. All Rights Reserved.
	     *
	     * Use of this source code is governed by an MIT-style license that can be
	     * found in the LICENSE file at https://angular.io/license
	     */
	    var taskSymbol = zoneSymbol('zoneTask');
	    function patchTimer(window, setName, cancelName, nameSuffix) {
	        var setNative = null;
	        var clearNative = null;
	        setName += nameSuffix;
	        cancelName += nameSuffix;
	        var tasksByHandleId = {};
	        function scheduleTask(task) {
	            var data = task.data;
	            function timer() {
	                try {
	                    task.invoke.apply(this, arguments);
	                }
	                finally {
	                    // issue-934, task will be cancelled
	                    // even it is a periodic task such as
	                    // setInterval
	                    if (!(task.data && task.data.isPeriodic)) {
	                        if (typeof data.handleId === 'number') {
	                            // in non-nodejs env, we remove timerId
	                            // from local cache
	                            delete tasksByHandleId[data.handleId];
	                        }
	                        else if (data.handleId) {
	                            // Node returns complex objects as handleIds
	                            // we remove task reference from timer object
	                            data.handleId[taskSymbol] = null;
	                        }
	                    }
	                }
	            }
	            data.args[0] = timer;
	            data.handleId = setNative.apply(window, data.args);
	            return task;
	        }
	        function clearTask(task) { return clearNative(task.data.handleId); }
	        setNative =
	            patchMethod(window, setName, function (delegate) { return function (self, args) {
	                if (typeof args[0] === 'function') {
	                    var options = {
	                        isPeriodic: nameSuffix === 'Interval',
	                        delay: (nameSuffix === 'Timeout' || nameSuffix === 'Interval') ? args[1] || 0 :
	                            undefined,
	                        args: args
	                    };
	                    var task = scheduleMacroTaskWithCurrentZone(setName, args[0], options, scheduleTask, clearTask);
	                    if (!task) {
	                        return task;
	                    }
	                    // Node.js must additionally support the ref and unref functions.
	                    var handle = task.data.handleId;
	                    if (typeof handle === 'number') {
	                        // for non nodejs env, we save handleId: task
	                        // mapping in local cache for clearTimeout
	                        tasksByHandleId[handle] = task;
	                    }
	                    else if (handle) {
	                        // for nodejs env, we save task
	                        // reference in timerId Object for clearTimeout
	                        handle[taskSymbol] = task;
	                    }
	                    // check whether handle is null, because some polyfill or browser
	                    // may return undefined from setTimeout/setInterval/setImmediate/requestAnimationFrame
	                    if (handle && handle.ref && handle.unref && typeof handle.ref === 'function' &&
	                        typeof handle.unref === 'function') {
	                        task.ref = handle.ref.bind(handle);
	                        task.unref = handle.unref.bind(handle);
	                    }
	                    if (typeof handle === 'number' || handle) {
	                        return handle;
	                    }
	                    return task;
	                }
	                else {
	                    // cause an error by calling it directly.
	                    return delegate.apply(window, args);
	                }
	            }; });
	        clearNative =
	            patchMethod(window, cancelName, function (delegate) { return function (self, args) {
	                var id = args[0];
	                var task;
	                if (typeof id === 'number') {
	                    // non nodejs env.
	                    task = tasksByHandleId[id];
	                }
	                else {
	                    // nodejs env.
	                    task = id && id[taskSymbol];
	                    // other environments.
	                    if (!task) {
	                        task = id;
	                    }
	                }
	                if (task && typeof task.type === 'string') {
	                    if (task.state !== 'notScheduled' &&
	                        (task.cancelFn && task.data.isPeriodic || task.runCount === 0)) {
	                        if (typeof id === 'number') {
	                            delete tasksByHandleId[id];
	                        }
	                        else if (id) {
	                            id[taskSymbol] = null;
	                        }
	                        // Do not cancel already canceled functions
	                        task.zone.cancelTask(task);
	                    }
	                }
	                else {
	                    // cause an error by calling it directly.
	                    delegate.apply(window, args);
	                }
	            }; });
	    }
	    /**
	     * @license
	     * Copyright Google Inc. All Rights Reserved.
	     *
	     * Use of this source code is governed by an MIT-style license that can be
	     * found in the LICENSE file at https://angular.io/license
	     */
	    function patchCustomElements(_global, api) {
	        var _a = api.getGlobalObjects(), isBrowser = _a.isBrowser, isMix = _a.isMix;
	        if ((!isBrowser && !isMix) || !_global['customElements'] || !('customElements' in _global)) {
	            return;
	        }
	        var callbacks = ['connectedCallback', 'disconnectedCallback', 'adoptedCallback', 'attributeChangedCallback'];
	        api.patchCallbacks(api, _global.customElements, 'customElements', 'define', callbacks);
	    }
	    /**
	     * @license
	     * Copyright Google Inc. All Rights Reserved.
	     *
	     * Use of this source code is governed by an MIT-style license that can be
	     * found in the LICENSE file at https://angular.io/license
	     */
	    function eventTargetPatch(_global, api) {
	        if (Zone[api.symbol('patchEventTarget')]) {
	            // EventTarget is already patched.
	            return;
	        }
	        var _a = api.getGlobalObjects(), eventNames = _a.eventNames, zoneSymbolEventNames = _a.zoneSymbolEventNames, TRUE_STR = _a.TRUE_STR, FALSE_STR = _a.FALSE_STR, ZONE_SYMBOL_PREFIX = _a.ZONE_SYMBOL_PREFIX;
	        //  predefine all __zone_symbol__ + eventName + true/false string
	        for (var i = 0; i < eventNames.length; i++) {
	            var eventName = eventNames[i];
	            var falseEventName = eventName + FALSE_STR;
	            var trueEventName = eventName + TRUE_STR;
	            var symbol = ZONE_SYMBOL_PREFIX + falseEventName;
	            var symbolCapture = ZONE_SYMBOL_PREFIX + trueEventName;
	            zoneSymbolEventNames[eventName] = {};
	            zoneSymbolEventNames[eventName][FALSE_STR] = symbol;
	            zoneSymbolEventNames[eventName][TRUE_STR] = symbolCapture;
	        }
	        var EVENT_TARGET = _global['EventTarget'];
	        if (!EVENT_TARGET || !EVENT_TARGET.prototype) {
	            return;
	        }
	        api.patchEventTarget(_global, [EVENT_TARGET && EVENT_TARGET.prototype]);
	        return true;
	    }
	    function patchEvent(global, api) {
	        api.patchEventPrototype(global, api);
	    }
	    /**
	     * @license
	     * Copyright Google Inc. All Rights Reserved.
	     *
	     * Use of this source code is governed by an MIT-style license that can be
	     * found in the LICENSE file at https://angular.io/license
	     */
	    Zone.__load_patch('legacy', function (global) {
	        var legacyPatch = global[Zone.__symbol__('legacyPatch')];
	        if (legacyPatch) {
	            legacyPatch();
	        }
	    });
	    Zone.__load_patch('timers', function (global) {
	        var set = 'set';
	        var clear = 'clear';
	        patchTimer(global, set, clear, 'Timeout');
	        patchTimer(global, set, clear, 'Interval');
	        patchTimer(global, set, clear, 'Immediate');
	    });
	    Zone.__load_patch('requestAnimationFrame', function (global) {
	        patchTimer(global, 'request', 'cancel', 'AnimationFrame');
	        patchTimer(global, 'mozRequest', 'mozCancel', 'AnimationFrame');
	        patchTimer(global, 'webkitRequest', 'webkitCancel', 'AnimationFrame');
	    });
	    Zone.__load_patch('blocking', function (global, Zone) {
	        var blockingMethods = ['alert', 'prompt', 'confirm'];
	        for (var i = 0; i < blockingMethods.length; i++) {
	            var name_2 = blockingMethods[i];
	            patchMethod(global, name_2, function (delegate, symbol, name) {
	                return function (s, args) {
	                    return Zone.current.run(delegate, global, args, name);
	                };
	            });
	        }
	    });
	    Zone.__load_patch('EventTarget', function (global, Zone, api) {
	        patchEvent(global, api);
	        eventTargetPatch(global, api);
	        // patch XMLHttpRequestEventTarget's addEventListener/removeEventListener
	        var XMLHttpRequestEventTarget = global['XMLHttpRequestEventTarget'];
	        if (XMLHttpRequestEventTarget && XMLHttpRequestEventTarget.prototype) {
	            api.patchEventTarget(global, [XMLHttpRequestEventTarget.prototype]);
	        }
	        patchClass('MutationObserver');
	        patchClass('WebKitMutationObserver');
	        patchClass('IntersectionObserver');
	        patchClass('FileReader');
	    });
	    Zone.__load_patch('on_property', function (global, Zone, api) {
	        propertyDescriptorPatch(api, global);
	    });
	    Zone.__load_patch('customElements', function (global, Zone, api) {
	        patchCustomElements(global, api);
	    });
	    Zone.__load_patch('XHR', function (global, Zone) {
	        // Treat XMLHttpRequest as a macrotask.
	        patchXHR(global);
	        var XHR_TASK = zoneSymbol('xhrTask');
	        var XHR_SYNC = zoneSymbol('xhrSync');
	        var XHR_LISTENER = zoneSymbol('xhrListener');
	        var XHR_SCHEDULED = zoneSymbol('xhrScheduled');
	        var XHR_URL = zoneSymbol('xhrURL');
	        var XHR_ERROR_BEFORE_SCHEDULED = zoneSymbol('xhrErrorBeforeScheduled');
	        function patchXHR(window) {
	            var XMLHttpRequest = window['XMLHttpRequest'];
	            if (!XMLHttpRequest) {
	                // XMLHttpRequest is not available in service worker
	                return;
	            }
	            var XMLHttpRequestPrototype = XMLHttpRequest.prototype;
	            function findPendingTask(target) { return target[XHR_TASK]; }
	            var oriAddListener = XMLHttpRequestPrototype[ZONE_SYMBOL_ADD_EVENT_LISTENER];
	            var oriRemoveListener = XMLHttpRequestPrototype[ZONE_SYMBOL_REMOVE_EVENT_LISTENER];
	            if (!oriAddListener) {
	                var XMLHttpRequestEventTarget_1 = window['XMLHttpRequestEventTarget'];
	                if (XMLHttpRequestEventTarget_1) {
	                    var XMLHttpRequestEventTargetPrototype = XMLHttpRequestEventTarget_1.prototype;
	                    oriAddListener = XMLHttpRequestEventTargetPrototype[ZONE_SYMBOL_ADD_EVENT_LISTENER];
	                    oriRemoveListener = XMLHttpRequestEventTargetPrototype[ZONE_SYMBOL_REMOVE_EVENT_LISTENER];
	                }
	            }
	            var READY_STATE_CHANGE = 'readystatechange';
	            var SCHEDULED = 'scheduled';
	            function scheduleTask(task) {
	                var data = task.data;
	                var target = data.target;
	                target[XHR_SCHEDULED] = false;
	                target[XHR_ERROR_BEFORE_SCHEDULED] = false;
	                // remove existing event listener
	                var listener = target[XHR_LISTENER];
	                if (!oriAddListener) {
	                    oriAddListener = target[ZONE_SYMBOL_ADD_EVENT_LISTENER];
	                    oriRemoveListener = target[ZONE_SYMBOL_REMOVE_EVENT_LISTENER];
	                }
	                if (listener) {
	                    oriRemoveListener.call(target, READY_STATE_CHANGE, listener);
	                }
	                var newListener = target[XHR_LISTENER] = function () {
	                    if (target.readyState === target.DONE) {
	                        // sometimes on some browsers XMLHttpRequest will fire onreadystatechange with
	                        // readyState=4 multiple times, so we need to check task state here
	                        if (!data.aborted && target[XHR_SCHEDULED] && task.state === SCHEDULED) {
	                            // check whether the xhr has registered onload listener
	                            // if that is the case, the task should invoke after all
	                            // onload listeners finish.
	                            var loadTasks = target[Zone.__symbol__('loadfalse')];
	                            if (loadTasks && loadTasks.length > 0) {
	                                var oriInvoke_1 = task.invoke;
	                                task.invoke = function () {
	                                    // need to load the tasks again, because in other
	                                    // load listener, they may remove themselves
	                                    var loadTasks = target[Zone.__symbol__('loadfalse')];
	                                    for (var i = 0; i < loadTasks.length; i++) {
	                                        if (loadTasks[i] === task) {
	                                            loadTasks.splice(i, 1);
	                                        }
	                                    }
	                                    if (!data.aborted && task.state === SCHEDULED) {
	                                        oriInvoke_1.call(task);
	                                    }
	                                };
	                                loadTasks.push(task);
	                            }
	                            else {
	                                task.invoke();
	                            }
	                        }
	                        else if (!data.aborted && target[XHR_SCHEDULED] === false) {
	                            // error occurs when xhr.send()
	                            target[XHR_ERROR_BEFORE_SCHEDULED] = true;
	                        }
	                    }
	                };
	                oriAddListener.call(target, READY_STATE_CHANGE, newListener);
	                var storedTask = target[XHR_TASK];
	                if (!storedTask) {
	                    target[XHR_TASK] = task;
	                }
	                sendNative.apply(target, data.args);
	                target[XHR_SCHEDULED] = true;
	                return task;
	            }
	            function placeholderCallback() { }
	            function clearTask(task) {
	                var data = task.data;
	                // Note - ideally, we would call data.target.removeEventListener here, but it's too late
	                // to prevent it from firing. So instead, we store info for the event listener.
	                data.aborted = true;
	                return abortNative.apply(data.target, data.args);
	            }
	            var openNative = patchMethod(XMLHttpRequestPrototype, 'open', function () { return function (self, args) {
	                self[XHR_SYNC] = args[2] == false;
	                self[XHR_URL] = args[1];
	                return openNative.apply(self, args);
	            }; });
	            var XMLHTTPREQUEST_SOURCE = 'XMLHttpRequest.send';
	            var fetchTaskAborting = zoneSymbol('fetchTaskAborting');
	            var fetchTaskScheduling = zoneSymbol('fetchTaskScheduling');
	            var sendNative = patchMethod(XMLHttpRequestPrototype, 'send', function () { return function (self, args) {
	                if (Zone.current[fetchTaskScheduling] === true) {
	                    // a fetch is scheduling, so we are using xhr to polyfill fetch
	                    // and because we already schedule macroTask for fetch, we should
	                    // not schedule a macroTask for xhr again
	                    return sendNative.apply(self, args);
	                }
	                if (self[XHR_SYNC]) {
	                    // if the XHR is sync there is no task to schedule, just execute the code.
	                    return sendNative.apply(self, args);
	                }
	                else {
	                    var options = { target: self, url: self[XHR_URL], isPeriodic: false, args: args, aborted: false };
	                    var task = scheduleMacroTaskWithCurrentZone(XMLHTTPREQUEST_SOURCE, placeholderCallback, options, scheduleTask, clearTask);
	                    if (self && self[XHR_ERROR_BEFORE_SCHEDULED] === true && !options.aborted &&
	                        task.state === SCHEDULED) {
	                        // xhr request throw error when send
	                        // we should invoke task instead of leaving a scheduled
	                        // pending macroTask
	                        task.invoke();
	                    }
	                }
	            }; });
	            var abortNative = patchMethod(XMLHttpRequestPrototype, 'abort', function () { return function (self, args) {
	                var task = findPendingTask(self);
	                if (task && typeof task.type == 'string') {
	                    // If the XHR has already completed, do nothing.
	                    // If the XHR has already been aborted, do nothing.
	                    // Fix #569, call abort multiple times before done will cause
	                    // macroTask task count be negative number
	                    if (task.cancelFn == null || (task.data && task.data.aborted)) {
	                        return;
	                    }
	                    task.zone.cancelTask(task);
	                }
	                else if (Zone.current[fetchTaskAborting] === true) {
	                    // the abort is called from fetch polyfill, we need to call native abort of XHR.
	                    return abortNative.apply(self, args);
	                }
	                // Otherwise, we are trying to abort an XHR which has not yet been sent, so there is no
	                // task
	                // to cancel. Do nothing.
	            }; });
	        }
	    });
	    Zone.__load_patch('geolocation', function (global) {
	        /// GEO_LOCATION
	        if (global['navigator'] && global['navigator'].geolocation) {
	            patchPrototype(global['navigator'].geolocation, ['getCurrentPosition', 'watchPosition']);
	        }
	    });
	    Zone.__load_patch('PromiseRejectionEvent', function (global, Zone) {
	        // handle unhandled promise rejection
	        function findPromiseRejectionHandler(evtName) {
	            return function (e) {
	                var eventTasks = findEventTasks(global, evtName);
	                eventTasks.forEach(function (eventTask) {
	                    // windows has added unhandledrejection event listener
	                    // trigger the event listener
	                    var PromiseRejectionEvent = global['PromiseRejectionEvent'];
	                    if (PromiseRejectionEvent) {
	                        var evt = new PromiseRejectionEvent(evtName, { promise: e.promise, reason: e.rejection });
	                        eventTask.invoke(evt);
	                    }
	                });
	            };
	        }
	        if (global['PromiseRejectionEvent']) {
	            Zone[zoneSymbol('unhandledPromiseRejectionHandler')] =
	                findPromiseRejectionHandler('unhandledrejection');
	            Zone[zoneSymbol('rejectionHandledHandler')] =
	                findPromiseRejectionHandler('rejectionhandled');
	        }
	    });
	})));

	/*! *****************************************************************************
	Copyright (c) Microsoft Corporation.

	Permission to use, copy, modify, and/or distribute this software for any
	purpose with or without fee is hereby granted.

	THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
	REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
	AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
	INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
	LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
	OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
	PERFORMANCE OF THIS SOFTWARE.
	***************************************************************************** */
	/* global Reflect, Promise */

	var extendStatics = function(d, b) {
	    extendStatics = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	    return extendStatics(d, b);
	};

	function __extends(d, b) {
	    extendStatics(d, b);
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	}

	var __assign = function() {
	    __assign = Object.assign || function __assign(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign.apply(this, arguments);
	};

	function __decorate(decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	}

	function __param(paramIndex, decorator) {
	    return function (target, key) { decorator(target, key, paramIndex); }
	}

	function __metadata(metadataKey, metadataValue) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
	}

	function __values(o) {
	    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
	    if (m) return m.call(o);
	    if (o && typeof o.length === "number") return {
	        next: function () {
	            if (o && i >= o.length) o = void 0;
	            return { value: o && o[i++], done: !o };
	        }
	    };
	    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
	}

	function __read(o, n) {
	    var m = typeof Symbol === "function" && o[Symbol.iterator];
	    if (!m) return o;
	    var i = m.call(o), r, ar = [], e;
	    try {
	        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
	    }
	    catch (error) { e = { error: error }; }
	    finally {
	        try {
	            if (r && !r.done && (m = i["return"])) m.call(i);
	        }
	        finally { if (e) throw e.error; }
	    }
	    return ar;
	}

	function __spread() {
	    for (var ar = [], i = 0; i < arguments.length; i++)
	        ar = ar.concat(__read(arguments[i]));
	    return ar;
	}

	/**
	 * @license Angular v9.1.6
	 * (c) 2010-2020 Google LLC. https://angular.io/
	 * License: MIT
	 */

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	var TagContentType;
	(function (TagContentType) {
	    TagContentType[TagContentType["RAW_TEXT"] = 0] = "RAW_TEXT";
	    TagContentType[TagContentType["ESCAPABLE_RAW_TEXT"] = 1] = "ESCAPABLE_RAW_TEXT";
	    TagContentType[TagContentType["PARSABLE_DATA"] = 2] = "PARSABLE_DATA";
	})(TagContentType || (TagContentType = {}));
	function splitNsName(elementName) {
	    if (elementName[0] != ':') {
	        return [null, elementName];
	    }
	    var colonIndex = elementName.indexOf(':', 1);
	    if (colonIndex == -1) {
	        throw new Error("Unsupported format \"" + elementName + "\" expecting \":namespace:name\"");
	    }
	    return [elementName.slice(1, colonIndex), elementName.slice(colonIndex + 1)];
	}
	// `<ng-container>` tags work the same regardless the namespace
	function isNgContainer(tagName) {
	    return splitNsName(tagName)[1] === 'ng-container';
	}
	// `<ng-content>` tags work the same regardless the namespace
	function isNgContent(tagName) {
	    return splitNsName(tagName)[1] === 'ng-content';
	}
	// `<ng-template>` tags work the same regardless the namespace
	function isNgTemplate(tagName) {
	    return splitNsName(tagName)[1] === 'ng-template';
	}
	function getNsPrefix(fullName) {
	    return fullName === null ? null : splitNsName(fullName)[0];
	}
	function mergeNsAndName(prefix, localName) {
	    return prefix ? ":" + prefix + ":" + localName : localName;
	}
	// see http://www.w3.org/TR/html51/syntax.html#named-character-references
	// see https://html.spec.whatwg.org/multipage/entities.json
	// This list is not exhaustive to keep the compiler footprint low.
	// The `&#123;` / `&#x1ab;` syntax should be used when the named character reference does not
	// exist.
	var NAMED_ENTITIES = {
	    'Aacute': '\u00C1',
	    'aacute': '\u00E1',
	    'Acirc': '\u00C2',
	    'acirc': '\u00E2',
	    'acute': '\u00B4',
	    'AElig': '\u00C6',
	    'aelig': '\u00E6',
	    'Agrave': '\u00C0',
	    'agrave': '\u00E0',
	    'alefsym': '\u2135',
	    'Alpha': '\u0391',
	    'alpha': '\u03B1',
	    'amp': '&',
	    'and': '\u2227',
	    'ang': '\u2220',
	    'apos': '\u0027',
	    'Aring': '\u00C5',
	    'aring': '\u00E5',
	    'asymp': '\u2248',
	    'Atilde': '\u00C3',
	    'atilde': '\u00E3',
	    'Auml': '\u00C4',
	    'auml': '\u00E4',
	    'bdquo': '\u201E',
	    'Beta': '\u0392',
	    'beta': '\u03B2',
	    'brvbar': '\u00A6',
	    'bull': '\u2022',
	    'cap': '\u2229',
	    'Ccedil': '\u00C7',
	    'ccedil': '\u00E7',
	    'cedil': '\u00B8',
	    'cent': '\u00A2',
	    'Chi': '\u03A7',
	    'chi': '\u03C7',
	    'circ': '\u02C6',
	    'clubs': '\u2663',
	    'cong': '\u2245',
	    'copy': '\u00A9',
	    'crarr': '\u21B5',
	    'cup': '\u222A',
	    'curren': '\u00A4',
	    'dagger': '\u2020',
	    'Dagger': '\u2021',
	    'darr': '\u2193',
	    'dArr': '\u21D3',
	    'deg': '\u00B0',
	    'Delta': '\u0394',
	    'delta': '\u03B4',
	    'diams': '\u2666',
	    'divide': '\u00F7',
	    'Eacute': '\u00C9',
	    'eacute': '\u00E9',
	    'Ecirc': '\u00CA',
	    'ecirc': '\u00EA',
	    'Egrave': '\u00C8',
	    'egrave': '\u00E8',
	    'empty': '\u2205',
	    'emsp': '\u2003',
	    'ensp': '\u2002',
	    'Epsilon': '\u0395',
	    'epsilon': '\u03B5',
	    'equiv': '\u2261',
	    'Eta': '\u0397',
	    'eta': '\u03B7',
	    'ETH': '\u00D0',
	    'eth': '\u00F0',
	    'Euml': '\u00CB',
	    'euml': '\u00EB',
	    'euro': '\u20AC',
	    'exist': '\u2203',
	    'fnof': '\u0192',
	    'forall': '\u2200',
	    'frac12': '\u00BD',
	    'frac14': '\u00BC',
	    'frac34': '\u00BE',
	    'frasl': '\u2044',
	    'Gamma': '\u0393',
	    'gamma': '\u03B3',
	    'ge': '\u2265',
	    'gt': '>',
	    'harr': '\u2194',
	    'hArr': '\u21D4',
	    'hearts': '\u2665',
	    'hellip': '\u2026',
	    'Iacute': '\u00CD',
	    'iacute': '\u00ED',
	    'Icirc': '\u00CE',
	    'icirc': '\u00EE',
	    'iexcl': '\u00A1',
	    'Igrave': '\u00CC',
	    'igrave': '\u00EC',
	    'image': '\u2111',
	    'infin': '\u221E',
	    'int': '\u222B',
	    'Iota': '\u0399',
	    'iota': '\u03B9',
	    'iquest': '\u00BF',
	    'isin': '\u2208',
	    'Iuml': '\u00CF',
	    'iuml': '\u00EF',
	    'Kappa': '\u039A',
	    'kappa': '\u03BA',
	    'Lambda': '\u039B',
	    'lambda': '\u03BB',
	    'lang': '\u27E8',
	    'laquo': '\u00AB',
	    'larr': '\u2190',
	    'lArr': '\u21D0',
	    'lceil': '\u2308',
	    'ldquo': '\u201C',
	    'le': '\u2264',
	    'lfloor': '\u230A',
	    'lowast': '\u2217',
	    'loz': '\u25CA',
	    'lrm': '\u200E',
	    'lsaquo': '\u2039',
	    'lsquo': '\u2018',
	    'lt': '<',
	    'macr': '\u00AF',
	    'mdash': '\u2014',
	    'micro': '\u00B5',
	    'middot': '\u00B7',
	    'minus': '\u2212',
	    'Mu': '\u039C',
	    'mu': '\u03BC',
	    'nabla': '\u2207',
	    'nbsp': '\u00A0',
	    'ndash': '\u2013',
	    'ne': '\u2260',
	    'ni': '\u220B',
	    'not': '\u00AC',
	    'notin': '\u2209',
	    'nsub': '\u2284',
	    'Ntilde': '\u00D1',
	    'ntilde': '\u00F1',
	    'Nu': '\u039D',
	    'nu': '\u03BD',
	    'Oacute': '\u00D3',
	    'oacute': '\u00F3',
	    'Ocirc': '\u00D4',
	    'ocirc': '\u00F4',
	    'OElig': '\u0152',
	    'oelig': '\u0153',
	    'Ograve': '\u00D2',
	    'ograve': '\u00F2',
	    'oline': '\u203E',
	    'Omega': '\u03A9',
	    'omega': '\u03C9',
	    'Omicron': '\u039F',
	    'omicron': '\u03BF',
	    'oplus': '\u2295',
	    'or': '\u2228',
	    'ordf': '\u00AA',
	    'ordm': '\u00BA',
	    'Oslash': '\u00D8',
	    'oslash': '\u00F8',
	    'Otilde': '\u00D5',
	    'otilde': '\u00F5',
	    'otimes': '\u2297',
	    'Ouml': '\u00D6',
	    'ouml': '\u00F6',
	    'para': '\u00B6',
	    'permil': '\u2030',
	    'perp': '\u22A5',
	    'Phi': '\u03A6',
	    'phi': '\u03C6',
	    'Pi': '\u03A0',
	    'pi': '\u03C0',
	    'piv': '\u03D6',
	    'plusmn': '\u00B1',
	    'pound': '\u00A3',
	    'prime': '\u2032',
	    'Prime': '\u2033',
	    'prod': '\u220F',
	    'prop': '\u221D',
	    'Psi': '\u03A8',
	    'psi': '\u03C8',
	    'quot': '\u0022',
	    'radic': '\u221A',
	    'rang': '\u27E9',
	    'raquo': '\u00BB',
	    'rarr': '\u2192',
	    'rArr': '\u21D2',
	    'rceil': '\u2309',
	    'rdquo': '\u201D',
	    'real': '\u211C',
	    'reg': '\u00AE',
	    'rfloor': '\u230B',
	    'Rho': '\u03A1',
	    'rho': '\u03C1',
	    'rlm': '\u200F',
	    'rsaquo': '\u203A',
	    'rsquo': '\u2019',
	    'sbquo': '\u201A',
	    'Scaron': '\u0160',
	    'scaron': '\u0161',
	    'sdot': '\u22C5',
	    'sect': '\u00A7',
	    'shy': '\u00AD',
	    'Sigma': '\u03A3',
	    'sigma': '\u03C3',
	    'sigmaf': '\u03C2',
	    'sim': '\u223C',
	    'spades': '\u2660',
	    'sub': '\u2282',
	    'sube': '\u2286',
	    'sum': '\u2211',
	    'sup': '\u2283',
	    'sup1': '\u00B9',
	    'sup2': '\u00B2',
	    'sup3': '\u00B3',
	    'supe': '\u2287',
	    'szlig': '\u00DF',
	    'Tau': '\u03A4',
	    'tau': '\u03C4',
	    'there4': '\u2234',
	    'Theta': '\u0398',
	    'theta': '\u03B8',
	    'thetasym': '\u03D1',
	    'thinsp': '\u2009',
	    'THORN': '\u00DE',
	    'thorn': '\u00FE',
	    'tilde': '\u02DC',
	    'times': '\u00D7',
	    'trade': '\u2122',
	    'Uacute': '\u00DA',
	    'uacute': '\u00FA',
	    'uarr': '\u2191',
	    'uArr': '\u21D1',
	    'Ucirc': '\u00DB',
	    'ucirc': '\u00FB',
	    'Ugrave': '\u00D9',
	    'ugrave': '\u00F9',
	    'uml': '\u00A8',
	    'upsih': '\u03D2',
	    'Upsilon': '\u03A5',
	    'upsilon': '\u03C5',
	    'Uuml': '\u00DC',
	    'uuml': '\u00FC',
	    'weierp': '\u2118',
	    'Xi': '\u039E',
	    'xi': '\u03BE',
	    'Yacute': '\u00DD',
	    'yacute': '\u00FD',
	    'yen': '\u00A5',
	    'yuml': '\u00FF',
	    'Yuml': '\u0178',
	    'Zeta': '\u0396',
	    'zeta': '\u03B6',
	    'zwj': '\u200D',
	    'zwnj': '\u200C',
	};
	// The &ngsp; pseudo-entity is denoting a space. see:
	// https://github.com/dart-lang/angular/blob/0bb611387d29d65b5af7f9d2515ab571fd3fbee4/_tests/test/compiler/preserve_whitespace_test.dart
	var NGSP_UNICODE = '\uE500';
	NAMED_ENTITIES['ngsp'] = NGSP_UNICODE;

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	var HtmlTagDefinition = /** @class */ (function () {
	    function HtmlTagDefinition(_a) {
	        var _this = this;
	        var _b = _a === void 0 ? {} : _a, closedByChildren = _b.closedByChildren, implicitNamespacePrefix = _b.implicitNamespacePrefix, _c = _b.contentType, contentType = _c === void 0 ? TagContentType.PARSABLE_DATA : _c, _d = _b.closedByParent, closedByParent = _d === void 0 ? false : _d, _e = _b.isVoid, isVoid = _e === void 0 ? false : _e, _f = _b.ignoreFirstLf, ignoreFirstLf = _f === void 0 ? false : _f;
	        this.closedByChildren = {};
	        this.closedByParent = false;
	        this.canSelfClose = false;
	        if (closedByChildren && closedByChildren.length > 0) {
	            closedByChildren.forEach(function (tagName) { return _this.closedByChildren[tagName] = true; });
	        }
	        this.isVoid = isVoid;
	        this.closedByParent = closedByParent || isVoid;
	        this.implicitNamespacePrefix = implicitNamespacePrefix || null;
	        this.contentType = contentType;
	        this.ignoreFirstLf = ignoreFirstLf;
	    }
	    HtmlTagDefinition.prototype.isClosedByChild = function (name) {
	        return this.isVoid || name.toLowerCase() in this.closedByChildren;
	    };
	    return HtmlTagDefinition;
	}());
	var _DEFAULT_TAG_DEFINITION;
	// see http://www.w3.org/TR/html51/syntax.html#optional-tags
	// This implementation does not fully conform to the HTML5 spec.
	var TAG_DEFINITIONS;
	function getHtmlTagDefinition(tagName) {
	    if (!TAG_DEFINITIONS) {
	        _DEFAULT_TAG_DEFINITION = new HtmlTagDefinition();
	        TAG_DEFINITIONS = {
	            'base': new HtmlTagDefinition({ isVoid: true }),
	            'meta': new HtmlTagDefinition({ isVoid: true }),
	            'area': new HtmlTagDefinition({ isVoid: true }),
	            'embed': new HtmlTagDefinition({ isVoid: true }),
	            'link': new HtmlTagDefinition({ isVoid: true }),
	            'img': new HtmlTagDefinition({ isVoid: true }),
	            'input': new HtmlTagDefinition({ isVoid: true }),
	            'param': new HtmlTagDefinition({ isVoid: true }),
	            'hr': new HtmlTagDefinition({ isVoid: true }),
	            'br': new HtmlTagDefinition({ isVoid: true }),
	            'source': new HtmlTagDefinition({ isVoid: true }),
	            'track': new HtmlTagDefinition({ isVoid: true }),
	            'wbr': new HtmlTagDefinition({ isVoid: true }),
	            'p': new HtmlTagDefinition({
	                closedByChildren: [
	                    'address', 'article', 'aside', 'blockquote', 'div', 'dl', 'fieldset',
	                    'footer', 'form', 'h1', 'h2', 'h3', 'h4', 'h5',
	                    'h6', 'header', 'hgroup', 'hr', 'main', 'nav', 'ol',
	                    'p', 'pre', 'section', 'table', 'ul'
	                ],
	                closedByParent: true
	            }),
	            'thead': new HtmlTagDefinition({ closedByChildren: ['tbody', 'tfoot'] }),
	            'tbody': new HtmlTagDefinition({ closedByChildren: ['tbody', 'tfoot'], closedByParent: true }),
	            'tfoot': new HtmlTagDefinition({ closedByChildren: ['tbody'], closedByParent: true }),
	            'tr': new HtmlTagDefinition({ closedByChildren: ['tr'], closedByParent: true }),
	            'td': new HtmlTagDefinition({ closedByChildren: ['td', 'th'], closedByParent: true }),
	            'th': new HtmlTagDefinition({ closedByChildren: ['td', 'th'], closedByParent: true }),
	            'col': new HtmlTagDefinition({ isVoid: true }),
	            'svg': new HtmlTagDefinition({ implicitNamespacePrefix: 'svg' }),
	            'math': new HtmlTagDefinition({ implicitNamespacePrefix: 'math' }),
	            'li': new HtmlTagDefinition({ closedByChildren: ['li'], closedByParent: true }),
	            'dt': new HtmlTagDefinition({ closedByChildren: ['dt', 'dd'] }),
	            'dd': new HtmlTagDefinition({ closedByChildren: ['dt', 'dd'], closedByParent: true }),
	            'rb': new HtmlTagDefinition({ closedByChildren: ['rb', 'rt', 'rtc', 'rp'], closedByParent: true }),
	            'rt': new HtmlTagDefinition({ closedByChildren: ['rb', 'rt', 'rtc', 'rp'], closedByParent: true }),
	            'rtc': new HtmlTagDefinition({ closedByChildren: ['rb', 'rtc', 'rp'], closedByParent: true }),
	            'rp': new HtmlTagDefinition({ closedByChildren: ['rb', 'rt', 'rtc', 'rp'], closedByParent: true }),
	            'optgroup': new HtmlTagDefinition({ closedByChildren: ['optgroup'], closedByParent: true }),
	            'option': new HtmlTagDefinition({ closedByChildren: ['option', 'optgroup'], closedByParent: true }),
	            'pre': new HtmlTagDefinition({ ignoreFirstLf: true }),
	            'listing': new HtmlTagDefinition({ ignoreFirstLf: true }),
	            'style': new HtmlTagDefinition({ contentType: TagContentType.RAW_TEXT }),
	            'script': new HtmlTagDefinition({ contentType: TagContentType.RAW_TEXT }),
	            'title': new HtmlTagDefinition({ contentType: TagContentType.ESCAPABLE_RAW_TEXT }),
	            'textarea': new HtmlTagDefinition({ contentType: TagContentType.ESCAPABLE_RAW_TEXT, ignoreFirstLf: true }),
	        };
	    }
	    return TAG_DEFINITIONS[tagName.toLowerCase()] || _DEFAULT_TAG_DEFINITION;
	}

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	var _SELECTOR_REGEXP = new RegExp('(\\:not\\()|' + // 1: ":not("
	    '(([\\.\\#]?)[-\\w]+)|' + // 2: "tag"; 3: "."/"#";
	    // "-" should appear first in the regexp below as FF31 parses "[.-\w]" as a range
	    // 4: attribute; 5: attribute_string; 6: attribute_value
	    '(?:\\[([-.\\w*]+)(?:=([\"\']?)([^\\]\"\']*)\\5)?\\])|' + // "[name]", "[name=value]",
	    // "[name="value"]",
	    // "[name='value']"
	    '(\\))|' + // 7: ")"
	    '(\\s*,\\s*)', // 8: ","
	'g');
	/**
	 * A css selector contains an element name,
	 * css classes and attribute/value pairs with the purpose
	 * of selecting subsets out of them.
	 */
	var CssSelector = /** @class */ (function () {
	    function CssSelector() {
	        this.element = null;
	        this.classNames = [];
	        /**
	         * The selectors are encoded in pairs where:
	         * - even locations are attribute names
	         * - odd locations are attribute values.
	         *
	         * Example:
	         * Selector: `[key1=value1][key2]` would parse to:
	         * ```
	         * ['key1', 'value1', 'key2', '']
	         * ```
	         */
	        this.attrs = [];
	        this.notSelectors = [];
	    }
	    CssSelector.parse = function (selector) {
	        var results = [];
	        var _addResult = function (res, cssSel) {
	            if (cssSel.notSelectors.length > 0 && !cssSel.element && cssSel.classNames.length == 0 &&
	                cssSel.attrs.length == 0) {
	                cssSel.element = '*';
	            }
	            res.push(cssSel);
	        };
	        var cssSelector = new CssSelector();
	        var match;
	        var current = cssSelector;
	        var inNot = false;
	        _SELECTOR_REGEXP.lastIndex = 0;
	        while (match = _SELECTOR_REGEXP.exec(selector)) {
	            if (match[1 /* NOT */]) {
	                if (inNot) {
	                    throw new Error('Nesting :not in a selector is not allowed');
	                }
	                inNot = true;
	                current = new CssSelector();
	                cssSelector.notSelectors.push(current);
	            }
	            var tag = match[2 /* TAG */];
	            if (tag) {
	                var prefix = match[3 /* PREFIX */];
	                if (prefix === '#') {
	                    // #hash
	                    current.addAttribute('id', tag.substr(1));
	                }
	                else if (prefix === '.') {
	                    // Class
	                    current.addClassName(tag.substr(1));
	                }
	                else {
	                    // Element
	                    current.setElement(tag);
	                }
	            }
	            var attribute = match[4 /* ATTRIBUTE */];
	            if (attribute) {
	                current.addAttribute(attribute, match[6 /* ATTRIBUTE_VALUE */]);
	            }
	            if (match[7 /* NOT_END */]) {
	                inNot = false;
	                current = cssSelector;
	            }
	            if (match[8 /* SEPARATOR */]) {
	                if (inNot) {
	                    throw new Error('Multiple selectors in :not are not supported');
	                }
	                _addResult(results, cssSelector);
	                cssSelector = current = new CssSelector();
	            }
	        }
	        _addResult(results, cssSelector);
	        return results;
	    };
	    CssSelector.prototype.isElementSelector = function () {
	        return this.hasElementSelector() && this.classNames.length == 0 && this.attrs.length == 0 &&
	            this.notSelectors.length === 0;
	    };
	    CssSelector.prototype.hasElementSelector = function () {
	        return !!this.element;
	    };
	    CssSelector.prototype.setElement = function (element) {
	        if (element === void 0) { element = null; }
	        this.element = element;
	    };
	    /** Gets a template string for an element that matches the selector. */
	    CssSelector.prototype.getMatchingElementTemplate = function () {
	        var tagName = this.element || 'div';
	        var classAttr = this.classNames.length > 0 ? " class=\"" + this.classNames.join(' ') + "\"" : '';
	        var attrs = '';
	        for (var i = 0; i < this.attrs.length; i += 2) {
	            var attrName = this.attrs[i];
	            var attrValue = this.attrs[i + 1] !== '' ? "=\"" + this.attrs[i + 1] + "\"" : '';
	            attrs += " " + attrName + attrValue;
	        }
	        return getHtmlTagDefinition(tagName).isVoid ? "<" + tagName + classAttr + attrs + "/>" :
	            "<" + tagName + classAttr + attrs + "></" + tagName + ">";
	    };
	    CssSelector.prototype.getAttrs = function () {
	        var result = [];
	        if (this.classNames.length > 0) {
	            result.push('class', this.classNames.join(' '));
	        }
	        return result.concat(this.attrs);
	    };
	    CssSelector.prototype.addAttribute = function (name, value) {
	        if (value === void 0) { value = ''; }
	        this.attrs.push(name, value && value.toLowerCase() || '');
	    };
	    CssSelector.prototype.addClassName = function (name) {
	        this.classNames.push(name.toLowerCase());
	    };
	    CssSelector.prototype.toString = function () {
	        var res = this.element || '';
	        if (this.classNames) {
	            this.classNames.forEach(function (klass) { return res += "." + klass; });
	        }
	        if (this.attrs) {
	            for (var i = 0; i < this.attrs.length; i += 2) {
	                var name_1 = this.attrs[i];
	                var value = this.attrs[i + 1];
	                res += "[" + name_1 + (value ? '=' + value : '') + "]";
	            }
	        }
	        this.notSelectors.forEach(function (notSelector) { return res += ":not(" + notSelector + ")"; });
	        return res;
	    };
	    return CssSelector;
	}());
	/**
	 * Reads a list of CssSelectors and allows to calculate which ones
	 * are contained in a given CssSelector.
	 */
	var SelectorMatcher = /** @class */ (function () {
	    function SelectorMatcher() {
	        this._elementMap = new Map();
	        this._elementPartialMap = new Map();
	        this._classMap = new Map();
	        this._classPartialMap = new Map();
	        this._attrValueMap = new Map();
	        this._attrValuePartialMap = new Map();
	        this._listContexts = [];
	    }
	    SelectorMatcher.createNotMatcher = function (notSelectors) {
	        var notMatcher = new SelectorMatcher();
	        notMatcher.addSelectables(notSelectors, null);
	        return notMatcher;
	    };
	    SelectorMatcher.prototype.addSelectables = function (cssSelectors, callbackCtxt) {
	        var listContext = null;
	        if (cssSelectors.length > 1) {
	            listContext = new SelectorListContext(cssSelectors);
	            this._listContexts.push(listContext);
	        }
	        for (var i = 0; i < cssSelectors.length; i++) {
	            this._addSelectable(cssSelectors[i], callbackCtxt, listContext);
	        }
	    };
	    /**
	     * Add an object that can be found later on by calling `match`.
	     * @param cssSelector A css selector
	     * @param callbackCtxt An opaque object that will be given to the callback of the `match` function
	     */
	    SelectorMatcher.prototype._addSelectable = function (cssSelector, callbackCtxt, listContext) {
	        var matcher = this;
	        var element = cssSelector.element;
	        var classNames = cssSelector.classNames;
	        var attrs = cssSelector.attrs;
	        var selectable = new SelectorContext(cssSelector, callbackCtxt, listContext);
	        if (element) {
	            var isTerminal = attrs.length === 0 && classNames.length === 0;
	            if (isTerminal) {
	                this._addTerminal(matcher._elementMap, element, selectable);
	            }
	            else {
	                matcher = this._addPartial(matcher._elementPartialMap, element);
	            }
	        }
	        if (classNames) {
	            for (var i = 0; i < classNames.length; i++) {
	                var isTerminal = attrs.length === 0 && i === classNames.length - 1;
	                var className = classNames[i];
	                if (isTerminal) {
	                    this._addTerminal(matcher._classMap, className, selectable);
	                }
	                else {
	                    matcher = this._addPartial(matcher._classPartialMap, className);
	                }
	            }
	        }
	        if (attrs) {
	            for (var i = 0; i < attrs.length; i += 2) {
	                var isTerminal = i === attrs.length - 2;
	                var name_2 = attrs[i];
	                var value = attrs[i + 1];
	                if (isTerminal) {
	                    var terminalMap = matcher._attrValueMap;
	                    var terminalValuesMap = terminalMap.get(name_2);
	                    if (!terminalValuesMap) {
	                        terminalValuesMap = new Map();
	                        terminalMap.set(name_2, terminalValuesMap);
	                    }
	                    this._addTerminal(terminalValuesMap, value, selectable);
	                }
	                else {
	                    var partialMap = matcher._attrValuePartialMap;
	                    var partialValuesMap = partialMap.get(name_2);
	                    if (!partialValuesMap) {
	                        partialValuesMap = new Map();
	                        partialMap.set(name_2, partialValuesMap);
	                    }
	                    matcher = this._addPartial(partialValuesMap, value);
	                }
	            }
	        }
	    };
	    SelectorMatcher.prototype._addTerminal = function (map, name, selectable) {
	        var terminalList = map.get(name);
	        if (!terminalList) {
	            terminalList = [];
	            map.set(name, terminalList);
	        }
	        terminalList.push(selectable);
	    };
	    SelectorMatcher.prototype._addPartial = function (map, name) {
	        var matcher = map.get(name);
	        if (!matcher) {
	            matcher = new SelectorMatcher();
	            map.set(name, matcher);
	        }
	        return matcher;
	    };
	    /**
	     * Find the objects that have been added via `addSelectable`
	     * whose css selector is contained in the given css selector.
	     * @param cssSelector A css selector
	     * @param matchedCallback This callback will be called with the object handed into `addSelectable`
	     * @return boolean true if a match was found
	     */
	    SelectorMatcher.prototype.match = function (cssSelector, matchedCallback) {
	        var result = false;
	        var element = cssSelector.element;
	        var classNames = cssSelector.classNames;
	        var attrs = cssSelector.attrs;
	        for (var i = 0; i < this._listContexts.length; i++) {
	            this._listContexts[i].alreadyMatched = false;
	        }
	        result = this._matchTerminal(this._elementMap, element, cssSelector, matchedCallback) || result;
	        result = this._matchPartial(this._elementPartialMap, element, cssSelector, matchedCallback) ||
	            result;
	        if (classNames) {
	            for (var i = 0; i < classNames.length; i++) {
	                var className = classNames[i];
	                result =
	                    this._matchTerminal(this._classMap, className, cssSelector, matchedCallback) || result;
	                result =
	                    this._matchPartial(this._classPartialMap, className, cssSelector, matchedCallback) ||
	                        result;
	            }
	        }
	        if (attrs) {
	            for (var i = 0; i < attrs.length; i += 2) {
	                var name_3 = attrs[i];
	                var value = attrs[i + 1];
	                var terminalValuesMap = this._attrValueMap.get(name_3);
	                if (value) {
	                    result =
	                        this._matchTerminal(terminalValuesMap, '', cssSelector, matchedCallback) || result;
	                }
	                result =
	                    this._matchTerminal(terminalValuesMap, value, cssSelector, matchedCallback) || result;
	                var partialValuesMap = this._attrValuePartialMap.get(name_3);
	                if (value) {
	                    result = this._matchPartial(partialValuesMap, '', cssSelector, matchedCallback) || result;
	                }
	                result =
	                    this._matchPartial(partialValuesMap, value, cssSelector, matchedCallback) || result;
	            }
	        }
	        return result;
	    };
	    /** @internal */
	    SelectorMatcher.prototype._matchTerminal = function (map, name, cssSelector, matchedCallback) {
	        if (!map || typeof name !== 'string') {
	            return false;
	        }
	        var selectables = map.get(name) || [];
	        var starSelectables = map.get('*');
	        if (starSelectables) {
	            selectables = selectables.concat(starSelectables);
	        }
	        if (selectables.length === 0) {
	            return false;
	        }
	        var selectable;
	        var result = false;
	        for (var i = 0; i < selectables.length; i++) {
	            selectable = selectables[i];
	            result = selectable.finalize(cssSelector, matchedCallback) || result;
	        }
	        return result;
	    };
	    /** @internal */
	    SelectorMatcher.prototype._matchPartial = function (map, name, cssSelector, matchedCallback) {
	        if (!map || typeof name !== 'string') {
	            return false;
	        }
	        var nestedSelector = map.get(name);
	        if (!nestedSelector) {
	            return false;
	        }
	        // TODO(perf): get rid of recursion and measure again
	        // TODO(perf): don't pass the whole selector into the recursion,
	        // but only the not processed parts
	        return nestedSelector.match(cssSelector, matchedCallback);
	    };
	    return SelectorMatcher;
	}());
	var SelectorListContext = /** @class */ (function () {
	    function SelectorListContext(selectors) {
	        this.selectors = selectors;
	        this.alreadyMatched = false;
	    }
	    return SelectorListContext;
	}());
	// Store context to pass back selector and context when a selector is matched
	var SelectorContext = /** @class */ (function () {
	    function SelectorContext(selector, cbContext, listContext) {
	        this.selector = selector;
	        this.cbContext = cbContext;
	        this.listContext = listContext;
	        this.notSelectors = selector.notSelectors;
	    }
	    SelectorContext.prototype.finalize = function (cssSelector, callback) {
	        var result = true;
	        if (this.notSelectors.length > 0 && (!this.listContext || !this.listContext.alreadyMatched)) {
	            var notMatcher = SelectorMatcher.createNotMatcher(this.notSelectors);
	            result = !notMatcher.match(cssSelector, null);
	        }
	        if (result && callback && (!this.listContext || !this.listContext.alreadyMatched)) {
	            if (this.listContext) {
	                this.listContext.alreadyMatched = true;
	            }
	            callback(this.selector, this.cbContext);
	        }
	        return result;
	    };
	    return SelectorContext;
	}());

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	var createInject = makeMetadataFactory('Inject', function (token) { return ({ token: token }); });
	var createInjectionToken = makeMetadataFactory('InjectionToken', function (desc) { return ({ _desc: desc, Éµprov: undefined }); });
	var createAttribute = makeMetadataFactory('Attribute', function (attributeName) { return ({ attributeName: attributeName }); });
	var createContentChildren = makeMetadataFactory('ContentChildren', function (selector, data) {
	    if (data === void 0) { data = {}; }
	    return (__assign({ selector: selector, first: false, isViewQuery: false, descendants: false }, data));
	});
	var createContentChild = makeMetadataFactory('ContentChild', function (selector, data) {
	    if (data === void 0) { data = {}; }
	    return (__assign({ selector: selector, first: true, isViewQuery: false, descendants: true }, data));
	});
	var createViewChildren = makeMetadataFactory('ViewChildren', function (selector, data) {
	    if (data === void 0) { data = {}; }
	    return (__assign({ selector: selector, first: false, isViewQuery: true, descendants: true }, data));
	});
	var createViewChild = makeMetadataFactory('ViewChild', function (selector, data) {
	    return (__assign({ selector: selector, first: true, isViewQuery: true, descendants: true }, data));
	});
	var createDirective = makeMetadataFactory('Directive', function (dir) {
	    if (dir === void 0) { dir = {}; }
	    return dir;
	});
	var ViewEncapsulation;
	(function (ViewEncapsulation) {
	    ViewEncapsulation[ViewEncapsulation["Emulated"] = 0] = "Emulated";
	    ViewEncapsulation[ViewEncapsulation["Native"] = 1] = "Native";
	    ViewEncapsulation[ViewEncapsulation["None"] = 2] = "None";
	    ViewEncapsulation[ViewEncapsulation["ShadowDom"] = 3] = "ShadowDom";
	})(ViewEncapsulation || (ViewEncapsulation = {}));
	var ChangeDetectionStrategy;
	(function (ChangeDetectionStrategy) {
	    ChangeDetectionStrategy[ChangeDetectionStrategy["OnPush"] = 0] = "OnPush";
	    ChangeDetectionStrategy[ChangeDetectionStrategy["Default"] = 1] = "Default";
	})(ChangeDetectionStrategy || (ChangeDetectionStrategy = {}));
	var createComponent = makeMetadataFactory('Component', function (c) {
	    if (c === void 0) { c = {}; }
	    return (__assign({ changeDetection: ChangeDetectionStrategy.Default }, c));
	});
	var createPipe = makeMetadataFactory('Pipe', function (p) { return (__assign({ pure: true }, p)); });
	var createInput = makeMetadataFactory('Input', function (bindingPropertyName) { return ({ bindingPropertyName: bindingPropertyName }); });
	var createOutput = makeMetadataFactory('Output', function (bindingPropertyName) { return ({ bindingPropertyName: bindingPropertyName }); });
	var createHostBinding = makeMetadataFactory('HostBinding', function (hostPropertyName) { return ({ hostPropertyName: hostPropertyName }); });
	var createHostListener = makeMetadataFactory('HostListener', function (eventName, args) { return ({ eventName: eventName, args: args }); });
	var createNgModule = makeMetadataFactory('NgModule', function (ngModule) { return ngModule; });
	var createInjectable = makeMetadataFactory('Injectable', function (injectable) {
	    if (injectable === void 0) { injectable = {}; }
	    return injectable;
	});
	var CUSTOM_ELEMENTS_SCHEMA = {
	    name: 'custom-elements'
	};
	var NO_ERRORS_SCHEMA = {
	    name: 'no-errors-schema'
	};
	var createOptional = makeMetadataFactory('Optional');
	var createSelf = makeMetadataFactory('Self');
	var createSkipSelf = makeMetadataFactory('SkipSelf');
	var createHost = makeMetadataFactory('Host');
	var Type = Function;
	var SecurityContext;
	(function (SecurityContext) {
	    SecurityContext[SecurityContext["NONE"] = 0] = "NONE";
	    SecurityContext[SecurityContext["HTML"] = 1] = "HTML";
	    SecurityContext[SecurityContext["STYLE"] = 2] = "STYLE";
	    SecurityContext[SecurityContext["SCRIPT"] = 3] = "SCRIPT";
	    SecurityContext[SecurityContext["URL"] = 4] = "URL";
	    SecurityContext[SecurityContext["RESOURCE_URL"] = 5] = "RESOURCE_URL";
	})(SecurityContext || (SecurityContext = {}));
	var MissingTranslationStrategy;
	(function (MissingTranslationStrategy) {
	    MissingTranslationStrategy[MissingTranslationStrategy["Error"] = 0] = "Error";
	    MissingTranslationStrategy[MissingTranslationStrategy["Warning"] = 1] = "Warning";
	    MissingTranslationStrategy[MissingTranslationStrategy["Ignore"] = 2] = "Ignore";
	})(MissingTranslationStrategy || (MissingTranslationStrategy = {}));
	function makeMetadataFactory(name, props) {
	    // This must be declared as a function, not a fat arrow, so that ES2015 devmode produces code
	    // that works with the static_reflector.ts in the ViewEngine compiler.
	    // In particular, `_registerDecoratorOrConstructor` assumes that the value returned here can be
	    // new'ed.
	    function factory() {
	        var args = [];
	        for (var _i = 0; _i < arguments.length; _i++) {
	            args[_i] = arguments[_i];
	        }
	        var values = props ? props.apply(void 0, __spread(args)) : {};
	        return __assign({ ngMetadataName: name }, values);
	    }
	    factory.isTypeOf = function (obj) { return obj && obj.ngMetadataName === name; };
	    factory.ngMetadataName = name;
	    return factory;
	}
	function parserSelectorToSimpleSelector(selector) {
	    var classes = selector.classNames && selector.classNames.length ? __spread([8 /* CLASS */], selector.classNames) :
	        [];
	    var elementName = selector.element && selector.element !== '*' ? selector.element : '';
	    return __spread([elementName], selector.attrs, classes);
	}
	function parserSelectorToNegativeSelector(selector) {
	    var classes = selector.classNames && selector.classNames.length ? __spread([8 /* CLASS */], selector.classNames) :
	        [];
	    if (selector.element) {
	        return __spread([
	            1 /* NOT */ | 4 /* ELEMENT */, selector.element
	        ], selector.attrs, classes);
	    }
	    else if (selector.attrs.length) {
	        return __spread([1 /* NOT */ | 2 /* ATTRIBUTE */], selector.attrs, classes);
	    }
	    else {
	        return selector.classNames && selector.classNames.length ? __spread([1 /* NOT */ | 8 /* CLASS */], selector.classNames) :
	            [];
	    }
	}
	function parserSelectorToR3Selector(selector) {
	    var positive = parserSelectorToSimpleSelector(selector);
	    var negative = selector.notSelectors && selector.notSelectors.length ?
	        selector.notSelectors.map(function (notSelector) { return parserSelectorToNegativeSelector(notSelector); }) :
	        [];
	    return positive.concat.apply(positive, __spread(negative));
	}
	function parseSelectorToR3Selector(selector) {
	    return selector ? CssSelector.parse(selector).map(parserSelectorToR3Selector) : [];
	}

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	//// Types
	var TypeModifier;
	(function (TypeModifier) {
	    TypeModifier[TypeModifier["Const"] = 0] = "Const";
	})(TypeModifier || (TypeModifier = {}));
	var Type$1 = /** @class */ (function () {
	    function Type(modifiers) {
	        if (modifiers === void 0) { modifiers = null; }
	        this.modifiers = modifiers;
	        if (!modifiers) {
	            this.modifiers = [];
	        }
	    }
	    Type.prototype.hasModifier = function (modifier) {
	        return this.modifiers.indexOf(modifier) !== -1;
	    };
	    return Type;
	}());
	var BuiltinTypeName;
	(function (BuiltinTypeName) {
	    BuiltinTypeName[BuiltinTypeName["Dynamic"] = 0] = "Dynamic";
	    BuiltinTypeName[BuiltinTypeName["Bool"] = 1] = "Bool";
	    BuiltinTypeName[BuiltinTypeName["String"] = 2] = "String";
	    BuiltinTypeName[BuiltinTypeName["Int"] = 3] = "Int";
	    BuiltinTypeName[BuiltinTypeName["Number"] = 4] = "Number";
	    BuiltinTypeName[BuiltinTypeName["Function"] = 5] = "Function";
	    BuiltinTypeName[BuiltinTypeName["Inferred"] = 6] = "Inferred";
	    BuiltinTypeName[BuiltinTypeName["None"] = 7] = "None";
	})(BuiltinTypeName || (BuiltinTypeName = {}));
	var BuiltinType = /** @class */ (function (_super) {
	    __extends(BuiltinType, _super);
	    function BuiltinType(name, modifiers) {
	        if (modifiers === void 0) { modifiers = null; }
	        var _this = _super.call(this, modifiers) || this;
	        _this.name = name;
	        return _this;
	    }
	    BuiltinType.prototype.visitType = function (visitor, context) {
	        return visitor.visitBuiltinType(this, context);
	    };
	    return BuiltinType;
	}(Type$1));
	var ExpressionType = /** @class */ (function (_super) {
	    __extends(ExpressionType, _super);
	    function ExpressionType(value, modifiers, typeParams) {
	        if (modifiers === void 0) { modifiers = null; }
	        if (typeParams === void 0) { typeParams = null; }
	        var _this = _super.call(this, modifiers) || this;
	        _this.value = value;
	        _this.typeParams = typeParams;
	        return _this;
	    }
	    ExpressionType.prototype.visitType = function (visitor, context) {
	        return visitor.visitExpressionType(this, context);
	    };
	    return ExpressionType;
	}(Type$1));
	var ArrayType = /** @class */ (function (_super) {
	    __extends(ArrayType, _super);
	    function ArrayType(of, modifiers) {
	        if (modifiers === void 0) { modifiers = null; }
	        var _this = _super.call(this, modifiers) || this;
	        _this.of = of;
	        return _this;
	    }
	    ArrayType.prototype.visitType = function (visitor, context) {
	        return visitor.visitArrayType(this, context);
	    };
	    return ArrayType;
	}(Type$1));
	var MapType = /** @class */ (function (_super) {
	    __extends(MapType, _super);
	    function MapType(valueType, modifiers) {
	        if (modifiers === void 0) { modifiers = null; }
	        var _this = _super.call(this, modifiers) || this;
	        _this.valueType = valueType || null;
	        return _this;
	    }
	    MapType.prototype.visitType = function (visitor, context) {
	        return visitor.visitMapType(this, context);
	    };
	    return MapType;
	}(Type$1));
	var DYNAMIC_TYPE = new BuiltinType(BuiltinTypeName.Dynamic);
	var INFERRED_TYPE = new BuiltinType(BuiltinTypeName.Inferred);
	var BOOL_TYPE = new BuiltinType(BuiltinTypeName.Bool);
	var INT_TYPE = new BuiltinType(BuiltinTypeName.Int);
	var NUMBER_TYPE = new BuiltinType(BuiltinTypeName.Number);
	var STRING_TYPE = new BuiltinType(BuiltinTypeName.String);
	var FUNCTION_TYPE = new BuiltinType(BuiltinTypeName.Function);
	var NONE_TYPE = new BuiltinType(BuiltinTypeName.None);
	///// Expressions
	var BinaryOperator;
	(function (BinaryOperator) {
	    BinaryOperator[BinaryOperator["Equals"] = 0] = "Equals";
	    BinaryOperator[BinaryOperator["NotEquals"] = 1] = "NotEquals";
	    BinaryOperator[BinaryOperator["Identical"] = 2] = "Identical";
	    BinaryOperator[BinaryOperator["NotIdentical"] = 3] = "NotIdentical";
	    BinaryOperator[BinaryOperator["Minus"] = 4] = "Minus";
	    BinaryOperator[BinaryOperator["Plus"] = 5] = "Plus";
	    BinaryOperator[BinaryOperator["Divide"] = 6] = "Divide";
	    BinaryOperator[BinaryOperator["Multiply"] = 7] = "Multiply";
	    BinaryOperator[BinaryOperator["Modulo"] = 8] = "Modulo";
	    BinaryOperator[BinaryOperator["And"] = 9] = "And";
	    BinaryOperator[BinaryOperator["Or"] = 10] = "Or";
	    BinaryOperator[BinaryOperator["BitwiseAnd"] = 11] = "BitwiseAnd";
	    BinaryOperator[BinaryOperator["Lower"] = 12] = "Lower";
	    BinaryOperator[BinaryOperator["LowerEquals"] = 13] = "LowerEquals";
	    BinaryOperator[BinaryOperator["Bigger"] = 14] = "Bigger";
	    BinaryOperator[BinaryOperator["BiggerEquals"] = 15] = "BiggerEquals";
	})(BinaryOperator || (BinaryOperator = {}));
	function nullSafeIsEquivalent(base, other) {
	    if (base == null || other == null) {
	        return base == other;
	    }
	    return base.isEquivalent(other);
	}
	function areAllEquivalent(base, other) {
	    var len = base.length;
	    if (len !== other.length) {
	        return false;
	    }
	    for (var i = 0; i < len; i++) {
	        if (!base[i].isEquivalent(other[i])) {
	            return false;
	        }
	    }
	    return true;
	}
	var Expression = /** @class */ (function () {
	    function Expression(type, sourceSpan) {
	        this.type = type || null;
	        this.sourceSpan = sourceSpan || null;
	    }
	    Expression.prototype.prop = function (name, sourceSpan) {
	        return new ReadPropExpr(this, name, null, sourceSpan);
	    };
	    Expression.prototype.key = function (index, type, sourceSpan) {
	        return new ReadKeyExpr(this, index, type, sourceSpan);
	    };
	    Expression.prototype.callMethod = function (name, params, sourceSpan) {
	        return new InvokeMethodExpr(this, name, params, null, sourceSpan);
	    };
	    Expression.prototype.callFn = function (params, sourceSpan) {
	        return new InvokeFunctionExpr(this, params, null, sourceSpan);
	    };
	    Expression.prototype.instantiate = function (params, type, sourceSpan) {
	        return new InstantiateExpr(this, params, type, sourceSpan);
	    };
	    Expression.prototype.conditional = function (trueCase, falseCase, sourceSpan) {
	        if (falseCase === void 0) { falseCase = null; }
	        return new ConditionalExpr(this, trueCase, falseCase, null, sourceSpan);
	    };
	    Expression.prototype.equals = function (rhs, sourceSpan) {
	        return new BinaryOperatorExpr(BinaryOperator.Equals, this, rhs, null, sourceSpan);
	    };
	    Expression.prototype.notEquals = function (rhs, sourceSpan) {
	        return new BinaryOperatorExpr(BinaryOperator.NotEquals, this, rhs, null, sourceSpan);
	    };
	    Expression.prototype.identical = function (rhs, sourceSpan) {
	        return new BinaryOperatorExpr(BinaryOperator.Identical, this, rhs, null, sourceSpan);
	    };
	    Expression.prototype.notIdentical = function (rhs, sourceSpan) {
	        return new BinaryOperatorExpr(BinaryOperator.NotIdentical, this, rhs, null, sourceSpan);
	    };
	    Expression.prototype.minus = function (rhs, sourceSpan) {
	        return new BinaryOperatorExpr(BinaryOperator.Minus, this, rhs, null, sourceSpan);
	    };
	    Expression.prototype.plus = function (rhs, sourceSpan) {
	        return new BinaryOperatorExpr(BinaryOperator.Plus, this, rhs, null, sourceSpan);
	    };
	    Expression.prototype.divide = function (rhs, sourceSpan) {
	        return new BinaryOperatorExpr(BinaryOperator.Divide, this, rhs, null, sourceSpan);
	    };
	    Expression.prototype.multiply = function (rhs, sourceSpan) {
	        return new BinaryOperatorExpr(BinaryOperator.Multiply, this, rhs, null, sourceSpan);
	    };
	    Expression.prototype.modulo = function (rhs, sourceSpan) {
	        return new BinaryOperatorExpr(BinaryOperator.Modulo, this, rhs, null, sourceSpan);
	    };
	    Expression.prototype.and = function (rhs, sourceSpan) {
	        return new BinaryOperatorExpr(BinaryOperator.And, this, rhs, null, sourceSpan);
	    };
	    Expression.prototype.bitwiseAnd = function (rhs, sourceSpan, parens) {
	        if (parens === void 0) { parens = true; }
	        return new BinaryOperatorExpr(BinaryOperator.BitwiseAnd, this, rhs, null, sourceSpan, parens);
	    };
	    Expression.prototype.or = function (rhs, sourceSpan) {
	        return new BinaryOperatorExpr(BinaryOperator.Or, this, rhs, null, sourceSpan);
	    };
	    Expression.prototype.lower = function (rhs, sourceSpan) {
	        return new BinaryOperatorExpr(BinaryOperator.Lower, this, rhs, null, sourceSpan);
	    };
	    Expression.prototype.lowerEquals = function (rhs, sourceSpan) {
	        return new BinaryOperatorExpr(BinaryOperator.LowerEquals, this, rhs, null, sourceSpan);
	    };
	    Expression.prototype.bigger = function (rhs, sourceSpan) {
	        return new BinaryOperatorExpr(BinaryOperator.Bigger, this, rhs, null, sourceSpan);
	    };
	    Expression.prototype.biggerEquals = function (rhs, sourceSpan) {
	        return new BinaryOperatorExpr(BinaryOperator.BiggerEquals, this, rhs, null, sourceSpan);
	    };
	    Expression.prototype.isBlank = function (sourceSpan) {
	        // Note: We use equals by purpose here to compare to null and undefined in JS.
	        // We use the typed null to allow strictNullChecks to narrow types.
	        return this.equals(TYPED_NULL_EXPR, sourceSpan);
	    };
	    Expression.prototype.cast = function (type, sourceSpan) {
	        return new CastExpr(this, type, sourceSpan);
	    };
	    Expression.prototype.toStmt = function () {
	        return new ExpressionStatement(this, null);
	    };
	    return Expression;
	}());
	var BuiltinVar;
	(function (BuiltinVar) {
	    BuiltinVar[BuiltinVar["This"] = 0] = "This";
	    BuiltinVar[BuiltinVar["Super"] = 1] = "Super";
	    BuiltinVar[BuiltinVar["CatchError"] = 2] = "CatchError";
	    BuiltinVar[BuiltinVar["CatchStack"] = 3] = "CatchStack";
	})(BuiltinVar || (BuiltinVar = {}));
	var ReadVarExpr = /** @class */ (function (_super) {
	    __extends(ReadVarExpr, _super);
	    function ReadVarExpr(name, type, sourceSpan) {
	        var _this = _super.call(this, type, sourceSpan) || this;
	        if (typeof name === 'string') {
	            _this.name = name;
	            _this.builtin = null;
	        }
	        else {
	            _this.name = null;
	            _this.builtin = name;
	        }
	        return _this;
	    }
	    ReadVarExpr.prototype.isEquivalent = function (e) {
	        return e instanceof ReadVarExpr && this.name === e.name && this.builtin === e.builtin;
	    };
	    ReadVarExpr.prototype.isConstant = function () {
	        return false;
	    };
	    ReadVarExpr.prototype.visitExpression = function (visitor, context) {
	        return visitor.visitReadVarExpr(this, context);
	    };
	    ReadVarExpr.prototype.set = function (value) {
	        if (!this.name) {
	            throw new Error("Built in variable " + this.builtin + " can not be assigned to.");
	        }
	        return new WriteVarExpr(this.name, value, null, this.sourceSpan);
	    };
	    return ReadVarExpr;
	}(Expression));
	var TypeofExpr = /** @class */ (function (_super) {
	    __extends(TypeofExpr, _super);
	    function TypeofExpr(expr, type, sourceSpan) {
	        var _this = _super.call(this, type, sourceSpan) || this;
	        _this.expr = expr;
	        return _this;
	    }
	    TypeofExpr.prototype.visitExpression = function (visitor, context) {
	        return visitor.visitTypeofExpr(this, context);
	    };
	    TypeofExpr.prototype.isEquivalent = function (e) {
	        return e instanceof TypeofExpr && e.expr.isEquivalent(this.expr);
	    };
	    TypeofExpr.prototype.isConstant = function () {
	        return this.expr.isConstant();
	    };
	    return TypeofExpr;
	}(Expression));
	var WrappedNodeExpr = /** @class */ (function (_super) {
	    __extends(WrappedNodeExpr, _super);
	    function WrappedNodeExpr(node, type, sourceSpan) {
	        var _this = _super.call(this, type, sourceSpan) || this;
	        _this.node = node;
	        return _this;
	    }
	    WrappedNodeExpr.prototype.isEquivalent = function (e) {
	        return e instanceof WrappedNodeExpr && this.node === e.node;
	    };
	    WrappedNodeExpr.prototype.isConstant = function () {
	        return false;
	    };
	    WrappedNodeExpr.prototype.visitExpression = function (visitor, context) {
	        return visitor.visitWrappedNodeExpr(this, context);
	    };
	    return WrappedNodeExpr;
	}(Expression));
	var WriteVarExpr = /** @class */ (function (_super) {
	    __extends(WriteVarExpr, _super);
	    function WriteVarExpr(name, value, type, sourceSpan) {
	        var _this = _super.call(this, type || value.type, sourceSpan) || this;
	        _this.name = name;
	        _this.value = value;
	        return _this;
	    }
	    WriteVarExpr.prototype.isEquivalent = function (e) {
	        return e instanceof WriteVarExpr && this.name === e.name && this.value.isEquivalent(e.value);
	    };
	    WriteVarExpr.prototype.isConstant = function () {
	        return false;
	    };
	    WriteVarExpr.prototype.visitExpression = function (visitor, context) {
	        return visitor.visitWriteVarExpr(this, context);
	    };
	    WriteVarExpr.prototype.toDeclStmt = function (type, modifiers) {
	        return new DeclareVarStmt(this.name, this.value, type, modifiers, this.sourceSpan);
	    };
	    WriteVarExpr.prototype.toConstDecl = function () {
	        return this.toDeclStmt(INFERRED_TYPE, [StmtModifier.Final]);
	    };
	    return WriteVarExpr;
	}(Expression));
	var WriteKeyExpr = /** @class */ (function (_super) {
	    __extends(WriteKeyExpr, _super);
	    function WriteKeyExpr(receiver, index, value, type, sourceSpan) {
	        var _this = _super.call(this, type || value.type, sourceSpan) || this;
	        _this.receiver = receiver;
	        _this.index = index;
	        _this.value = value;
	        return _this;
	    }
	    WriteKeyExpr.prototype.isEquivalent = function (e) {
	        return e instanceof WriteKeyExpr && this.receiver.isEquivalent(e.receiver) &&
	            this.index.isEquivalent(e.index) && this.value.isEquivalent(e.value);
	    };
	    WriteKeyExpr.prototype.isConstant = function () {
	        return false;
	    };
	    WriteKeyExpr.prototype.visitExpression = function (visitor, context) {
	        return visitor.visitWriteKeyExpr(this, context);
	    };
	    return WriteKeyExpr;
	}(Expression));
	var WritePropExpr = /** @class */ (function (_super) {
	    __extends(WritePropExpr, _super);
	    function WritePropExpr(receiver, name, value, type, sourceSpan) {
	        var _this = _super.call(this, type || value.type, sourceSpan) || this;
	        _this.receiver = receiver;
	        _this.name = name;
	        _this.value = value;
	        return _this;
	    }
	    WritePropExpr.prototype.isEquivalent = function (e) {
	        return e instanceof WritePropExpr && this.receiver.isEquivalent(e.receiver) &&
	            this.name === e.name && this.value.isEquivalent(e.value);
	    };
	    WritePropExpr.prototype.isConstant = function () {
	        return false;
	    };
	    WritePropExpr.prototype.visitExpression = function (visitor, context) {
	        return visitor.visitWritePropExpr(this, context);
	    };
	    return WritePropExpr;
	}(Expression));
	var BuiltinMethod;
	(function (BuiltinMethod) {
	    BuiltinMethod[BuiltinMethod["ConcatArray"] = 0] = "ConcatArray";
	    BuiltinMethod[BuiltinMethod["SubscribeObservable"] = 1] = "SubscribeObservable";
	    BuiltinMethod[BuiltinMethod["Bind"] = 2] = "Bind";
	})(BuiltinMethod || (BuiltinMethod = {}));
	var InvokeMethodExpr = /** @class */ (function (_super) {
	    __extends(InvokeMethodExpr, _super);
	    function InvokeMethodExpr(receiver, method, args, type, sourceSpan) {
	        var _this = _super.call(this, type, sourceSpan) || this;
	        _this.receiver = receiver;
	        _this.args = args;
	        if (typeof method === 'string') {
	            _this.name = method;
	            _this.builtin = null;
	        }
	        else {
	            _this.name = null;
	            _this.builtin = method;
	        }
	        return _this;
	    }
	    InvokeMethodExpr.prototype.isEquivalent = function (e) {
	        return e instanceof InvokeMethodExpr && this.receiver.isEquivalent(e.receiver) &&
	            this.name === e.name && this.builtin === e.builtin && areAllEquivalent(this.args, e.args);
	    };
	    InvokeMethodExpr.prototype.isConstant = function () {
	        return false;
	    };
	    InvokeMethodExpr.prototype.visitExpression = function (visitor, context) {
	        return visitor.visitInvokeMethodExpr(this, context);
	    };
	    return InvokeMethodExpr;
	}(Expression));
	var InvokeFunctionExpr = /** @class */ (function (_super) {
	    __extends(InvokeFunctionExpr, _super);
	    function InvokeFunctionExpr(fn, args, type, sourceSpan, pure) {
	        if (pure === void 0) { pure = false; }
	        var _this = _super.call(this, type, sourceSpan) || this;
	        _this.fn = fn;
	        _this.args = args;
	        _this.pure = pure;
	        return _this;
	    }
	    InvokeFunctionExpr.prototype.isEquivalent = function (e) {
	        return e instanceof InvokeFunctionExpr && this.fn.isEquivalent(e.fn) &&
	            areAllEquivalent(this.args, e.args) && this.pure === e.pure;
	    };
	    InvokeFunctionExpr.prototype.isConstant = function () {
	        return false;
	    };
	    InvokeFunctionExpr.prototype.visitExpression = function (visitor, context) {
	        return visitor.visitInvokeFunctionExpr(this, context);
	    };
	    return InvokeFunctionExpr;
	}(Expression));
	var InstantiateExpr = /** @class */ (function (_super) {
	    __extends(InstantiateExpr, _super);
	    function InstantiateExpr(classExpr, args, type, sourceSpan) {
	        var _this = _super.call(this, type, sourceSpan) || this;
	        _this.classExpr = classExpr;
	        _this.args = args;
	        return _this;
	    }
	    InstantiateExpr.prototype.isEquivalent = function (e) {
	        return e instanceof InstantiateExpr && this.classExpr.isEquivalent(e.classExpr) &&
	            areAllEquivalent(this.args, e.args);
	    };
	    InstantiateExpr.prototype.isConstant = function () {
	        return false;
	    };
	    InstantiateExpr.prototype.visitExpression = function (visitor, context) {
	        return visitor.visitInstantiateExpr(this, context);
	    };
	    return InstantiateExpr;
	}(Expression));
	var LiteralExpr = /** @class */ (function (_super) {
	    __extends(LiteralExpr, _super);
	    function LiteralExpr(value, type, sourceSpan) {
	        var _this = _super.call(this, type, sourceSpan) || this;
	        _this.value = value;
	        return _this;
	    }
	    LiteralExpr.prototype.isEquivalent = function (e) {
	        return e instanceof LiteralExpr && this.value === e.value;
	    };
	    LiteralExpr.prototype.isConstant = function () {
	        return true;
	    };
	    LiteralExpr.prototype.visitExpression = function (visitor, context) {
	        return visitor.visitLiteralExpr(this, context);
	    };
	    return LiteralExpr;
	}(Expression));
	var LocalizedString = /** @class */ (function (_super) {
	    __extends(LocalizedString, _super);
	    function LocalizedString(metaBlock, messageParts, placeHolderNames, expressions, sourceSpan) {
	        var _this = _super.call(this, STRING_TYPE, sourceSpan) || this;
	        _this.metaBlock = metaBlock;
	        _this.messageParts = messageParts;
	        _this.placeHolderNames = placeHolderNames;
	        _this.expressions = expressions;
	        return _this;
	    }
	    LocalizedString.prototype.isEquivalent = function (e) {
	        // return e instanceof LocalizedString && this.message === e.message;
	        return false;
	    };
	    LocalizedString.prototype.isConstant = function () {
	        return false;
	    };
	    LocalizedString.prototype.visitExpression = function (visitor, context) {
	        return visitor.visitLocalizedString(this, context);
	    };
	    /**
	     * Serialize the given `meta` and `messagePart` into "cooked" and "raw" strings that can be used
	     * in a `$localize` tagged string. The format of the metadata is the same as that parsed by
	     * `parseI18nMeta()`.
	     *
	     * @param meta The metadata to serialize
	     * @param messagePart The first part of the tagged string
	     */
	    LocalizedString.prototype.serializeI18nHead = function () {
	        var MEANING_SEPARATOR = '|';
	        var ID_SEPARATOR = '@@';
	        var LEGACY_ID_INDICATOR = 'â';
	        var metaBlock = this.metaBlock.description || '';
	        if (this.metaBlock.meaning) {
	            metaBlock = "" + this.metaBlock.meaning + MEANING_SEPARATOR + metaBlock;
	        }
	        if (this.metaBlock.customId) {
	            metaBlock = "" + metaBlock + ID_SEPARATOR + this.metaBlock.customId;
	        }
	        if (this.metaBlock.legacyIds) {
	            this.metaBlock.legacyIds.forEach(function (legacyId) {
	                metaBlock = "" + metaBlock + LEGACY_ID_INDICATOR + legacyId;
	            });
	        }
	        return createCookedRawString(metaBlock, this.messageParts[0]);
	    };
	    /**
	     * Serialize the given `placeholderName` and `messagePart` into "cooked" and "raw" strings that
	     * can be used in a `$localize` tagged string.
	     *
	     * @param placeholderName The placeholder name to serialize
	     * @param messagePart The following message string after this placeholder
	     */
	    LocalizedString.prototype.serializeI18nTemplatePart = function (partIndex) {
	        var placeholderName = this.placeHolderNames[partIndex - 1];
	        var messagePart = this.messageParts[partIndex];
	        return createCookedRawString(placeholderName, messagePart);
	    };
	    return LocalizedString;
	}(Expression));
	var escapeSlashes = function (str) { return str.replace(/\\/g, '\\\\'); };
	var escapeStartingColon = function (str) { return str.replace(/^:/, '\\:'); };
	var escapeColons = function (str) { return str.replace(/:/g, '\\:'); };
	var escapeForMessagePart = function (str) {
	    return str.replace(/`/g, '\\`').replace(/\${/g, '$\\{');
	};
	/**
	 * Creates a `{cooked, raw}` object from the `metaBlock` and `messagePart`.
	 *
	 * The `raw` text must have various character sequences escaped:
	 * * "\" would otherwise indicate that the next character is a control character.
	 * * "`" and "${" are template string control sequences that would otherwise prematurely indicate
	 *   the end of a message part.
	 * * ":" inside a metablock would prematurely indicate the end of the metablock.
	 * * ":" at the start of a messagePart with no metablock would erroneously indicate the start of a
	 *   metablock.
	 *
	 * @param metaBlock Any metadata that should be prepended to the string
	 * @param messagePart The message part of the string
	 */
	function createCookedRawString(metaBlock, messagePart) {
	    if (metaBlock === '') {
	        return {
	            cooked: messagePart,
	            raw: escapeForMessagePart(escapeStartingColon(escapeSlashes(messagePart)))
	        };
	    }
	    else {
	        return {
	            cooked: ":" + metaBlock + ":" + messagePart,
	            raw: escapeForMessagePart(":" + escapeColons(escapeSlashes(metaBlock)) + ":" + escapeSlashes(messagePart))
	        };
	    }
	}
	var ExternalExpr = /** @class */ (function (_super) {
	    __extends(ExternalExpr, _super);
	    function ExternalExpr(value, type, typeParams, sourceSpan) {
	        if (typeParams === void 0) { typeParams = null; }
	        var _this = _super.call(this, type, sourceSpan) || this;
	        _this.value = value;
	        _this.typeParams = typeParams;
	        return _this;
	    }
	    ExternalExpr.prototype.isEquivalent = function (e) {
	        return e instanceof ExternalExpr && this.value.name === e.value.name &&
	            this.value.moduleName === e.value.moduleName && this.value.runtime === e.value.runtime;
	    };
	    ExternalExpr.prototype.isConstant = function () {
	        return false;
	    };
	    ExternalExpr.prototype.visitExpression = function (visitor, context) {
	        return visitor.visitExternalExpr(this, context);
	    };
	    return ExternalExpr;
	}(Expression));
	var ConditionalExpr = /** @class */ (function (_super) {
	    __extends(ConditionalExpr, _super);
	    function ConditionalExpr(condition, trueCase, falseCase, type, sourceSpan) {
	        if (falseCase === void 0) { falseCase = null; }
	        var _this = _super.call(this, type || trueCase.type, sourceSpan) || this;
	        _this.condition = condition;
	        _this.falseCase = falseCase;
	        _this.trueCase = trueCase;
	        return _this;
	    }
	    ConditionalExpr.prototype.isEquivalent = function (e) {
	        return e instanceof ConditionalExpr && this.condition.isEquivalent(e.condition) &&
	            this.trueCase.isEquivalent(e.trueCase) && nullSafeIsEquivalent(this.falseCase, e.falseCase);
	    };
	    ConditionalExpr.prototype.isConstant = function () {
	        return false;
	    };
	    ConditionalExpr.prototype.visitExpression = function (visitor, context) {
	        return visitor.visitConditionalExpr(this, context);
	    };
	    return ConditionalExpr;
	}(Expression));
	var NotExpr = /** @class */ (function (_super) {
	    __extends(NotExpr, _super);
	    function NotExpr(condition, sourceSpan) {
	        var _this = _super.call(this, BOOL_TYPE, sourceSpan) || this;
	        _this.condition = condition;
	        return _this;
	    }
	    NotExpr.prototype.isEquivalent = function (e) {
	        return e instanceof NotExpr && this.condition.isEquivalent(e.condition);
	    };
	    NotExpr.prototype.isConstant = function () {
	        return false;
	    };
	    NotExpr.prototype.visitExpression = function (visitor, context) {
	        return visitor.visitNotExpr(this, context);
	    };
	    return NotExpr;
	}(Expression));
	var AssertNotNull = /** @class */ (function (_super) {
	    __extends(AssertNotNull, _super);
	    function AssertNotNull(condition, sourceSpan) {
	        var _this = _super.call(this, condition.type, sourceSpan) || this;
	        _this.condition = condition;
	        return _this;
	    }
	    AssertNotNull.prototype.isEquivalent = function (e) {
	        return e instanceof AssertNotNull && this.condition.isEquivalent(e.condition);
	    };
	    AssertNotNull.prototype.isConstant = function () {
	        return false;
	    };
	    AssertNotNull.prototype.visitExpression = function (visitor, context) {
	        return visitor.visitAssertNotNullExpr(this, context);
	    };
	    return AssertNotNull;
	}(Expression));
	var CastExpr = /** @class */ (function (_super) {
	    __extends(CastExpr, _super);
	    function CastExpr(value, type, sourceSpan) {
	        var _this = _super.call(this, type, sourceSpan) || this;
	        _this.value = value;
	        return _this;
	    }
	    CastExpr.prototype.isEquivalent = function (e) {
	        return e instanceof CastExpr && this.value.isEquivalent(e.value);
	    };
	    CastExpr.prototype.isConstant = function () {
	        return false;
	    };
	    CastExpr.prototype.visitExpression = function (visitor, context) {
	        return visitor.visitCastExpr(this, context);
	    };
	    return CastExpr;
	}(Expression));
	var FnParam = /** @class */ (function () {
	    function FnParam(name, type) {
	        if (type === void 0) { type = null; }
	        this.name = name;
	        this.type = type;
	    }
	    FnParam.prototype.isEquivalent = function (param) {
	        return this.name === param.name;
	    };
	    return FnParam;
	}());
	var FunctionExpr = /** @class */ (function (_super) {
	    __extends(FunctionExpr, _super);
	    function FunctionExpr(params, statements, type, sourceSpan, name) {
	        var _this = _super.call(this, type, sourceSpan) || this;
	        _this.params = params;
	        _this.statements = statements;
	        _this.name = name;
	        return _this;
	    }
	    FunctionExpr.prototype.isEquivalent = function (e) {
	        return e instanceof FunctionExpr && areAllEquivalent(this.params, e.params) &&
	            areAllEquivalent(this.statements, e.statements);
	    };
	    FunctionExpr.prototype.isConstant = function () {
	        return false;
	    };
	    FunctionExpr.prototype.visitExpression = function (visitor, context) {
	        return visitor.visitFunctionExpr(this, context);
	    };
	    FunctionExpr.prototype.toDeclStmt = function (name, modifiers) {
	        if (modifiers === void 0) { modifiers = null; }
	        return new DeclareFunctionStmt(name, this.params, this.statements, this.type, modifiers, this.sourceSpan);
	    };
	    return FunctionExpr;
	}(Expression));
	var BinaryOperatorExpr = /** @class */ (function (_super) {
	    __extends(BinaryOperatorExpr, _super);
	    function BinaryOperatorExpr(operator, lhs, rhs, type, sourceSpan, parens) {
	        if (parens === void 0) { parens = true; }
	        var _this = _super.call(this, type || lhs.type, sourceSpan) || this;
	        _this.operator = operator;
	        _this.rhs = rhs;
	        _this.parens = parens;
	        _this.lhs = lhs;
	        return _this;
	    }
	    BinaryOperatorExpr.prototype.isEquivalent = function (e) {
	        return e instanceof BinaryOperatorExpr && this.operator === e.operator &&
	            this.lhs.isEquivalent(e.lhs) && this.rhs.isEquivalent(e.rhs);
	    };
	    BinaryOperatorExpr.prototype.isConstant = function () {
	        return false;
	    };
	    BinaryOperatorExpr.prototype.visitExpression = function (visitor, context) {
	        return visitor.visitBinaryOperatorExpr(this, context);
	    };
	    return BinaryOperatorExpr;
	}(Expression));
	var ReadPropExpr = /** @class */ (function (_super) {
	    __extends(ReadPropExpr, _super);
	    function ReadPropExpr(receiver, name, type, sourceSpan) {
	        var _this = _super.call(this, type, sourceSpan) || this;
	        _this.receiver = receiver;
	        _this.name = name;
	        return _this;
	    }
	    ReadPropExpr.prototype.isEquivalent = function (e) {
	        return e instanceof ReadPropExpr && this.receiver.isEquivalent(e.receiver) &&
	            this.name === e.name;
	    };
	    ReadPropExpr.prototype.isConstant = function () {
	        return false;
	    };
	    ReadPropExpr.prototype.visitExpression = function (visitor, context) {
	        return visitor.visitReadPropExpr(this, context);
	    };
	    ReadPropExpr.prototype.set = function (value) {
	        return new WritePropExpr(this.receiver, this.name, value, null, this.sourceSpan);
	    };
	    return ReadPropExpr;
	}(Expression));
	var ReadKeyExpr = /** @class */ (function (_super) {
	    __extends(ReadKeyExpr, _super);
	    function ReadKeyExpr(receiver, index, type, sourceSpan) {
	        var _this = _super.call(this, type, sourceSpan) || this;
	        _this.receiver = receiver;
	        _this.index = index;
	        return _this;
	    }
	    ReadKeyExpr.prototype.isEquivalent = function (e) {
	        return e instanceof ReadKeyExpr && this.receiver.isEquivalent(e.receiver) &&
	            this.index.isEquivalent(e.index);
	    };
	    ReadKeyExpr.prototype.isConstant = function () {
	        return false;
	    };
	    ReadKeyExpr.prototype.visitExpression = function (visitor, context) {
	        return visitor.visitReadKeyExpr(this, context);
	    };
	    ReadKeyExpr.prototype.set = function (value) {
	        return new WriteKeyExpr(this.receiver, this.index, value, null, this.sourceSpan);
	    };
	    return ReadKeyExpr;
	}(Expression));
	var LiteralArrayExpr = /** @class */ (function (_super) {
	    __extends(LiteralArrayExpr, _super);
	    function LiteralArrayExpr(entries, type, sourceSpan) {
	        var _this = _super.call(this, type, sourceSpan) || this;
	        _this.entries = entries;
	        return _this;
	    }
	    LiteralArrayExpr.prototype.isConstant = function () {
	        return this.entries.every(function (e) { return e.isConstant(); });
	    };
	    LiteralArrayExpr.prototype.isEquivalent = function (e) {
	        return e instanceof LiteralArrayExpr && areAllEquivalent(this.entries, e.entries);
	    };
	    LiteralArrayExpr.prototype.visitExpression = function (visitor, context) {
	        return visitor.visitLiteralArrayExpr(this, context);
	    };
	    return LiteralArrayExpr;
	}(Expression));
	var LiteralMapEntry = /** @class */ (function () {
	    function LiteralMapEntry(key, value, quoted) {
	        this.key = key;
	        this.value = value;
	        this.quoted = quoted;
	    }
	    LiteralMapEntry.prototype.isEquivalent = function (e) {
	        return this.key === e.key && this.value.isEquivalent(e.value);
	    };
	    return LiteralMapEntry;
	}());
	var LiteralMapExpr = /** @class */ (function (_super) {
	    __extends(LiteralMapExpr, _super);
	    function LiteralMapExpr(entries, type, sourceSpan) {
	        var _this = _super.call(this, type, sourceSpan) || this;
	        _this.entries = entries;
	        _this.valueType = null;
	        if (type) {
	            _this.valueType = type.valueType;
	        }
	        return _this;
	    }
	    LiteralMapExpr.prototype.isEquivalent = function (e) {
	        return e instanceof LiteralMapExpr && areAllEquivalent(this.entries, e.entries);
	    };
	    LiteralMapExpr.prototype.isConstant = function () {
	        return this.entries.every(function (e) { return e.value.isConstant(); });
	    };
	    LiteralMapExpr.prototype.visitExpression = function (visitor, context) {
	        return visitor.visitLiteralMapExpr(this, context);
	    };
	    return LiteralMapExpr;
	}(Expression));
	var CommaExpr = /** @class */ (function (_super) {
	    __extends(CommaExpr, _super);
	    function CommaExpr(parts, sourceSpan) {
	        var _this = _super.call(this, parts[parts.length - 1].type, sourceSpan) || this;
	        _this.parts = parts;
	        return _this;
	    }
	    CommaExpr.prototype.isEquivalent = function (e) {
	        return e instanceof CommaExpr && areAllEquivalent(this.parts, e.parts);
	    };
	    CommaExpr.prototype.isConstant = function () {
	        return false;
	    };
	    CommaExpr.prototype.visitExpression = function (visitor, context) {
	        return visitor.visitCommaExpr(this, context);
	    };
	    return CommaExpr;
	}(Expression));
	var THIS_EXPR = new ReadVarExpr(BuiltinVar.This, null, null);
	var SUPER_EXPR = new ReadVarExpr(BuiltinVar.Super, null, null);
	var CATCH_ERROR_VAR = new ReadVarExpr(BuiltinVar.CatchError, null, null);
	var CATCH_STACK_VAR = new ReadVarExpr(BuiltinVar.CatchStack, null, null);
	var NULL_EXPR = new LiteralExpr(null, null, null);
	var TYPED_NULL_EXPR = new LiteralExpr(null, INFERRED_TYPE, null);
	//// Statements
	var StmtModifier;
	(function (StmtModifier) {
	    StmtModifier[StmtModifier["Final"] = 0] = "Final";
	    StmtModifier[StmtModifier["Private"] = 1] = "Private";
	    StmtModifier[StmtModifier["Exported"] = 2] = "Exported";
	    StmtModifier[StmtModifier["Static"] = 3] = "Static";
	})(StmtModifier || (StmtModifier = {}));
	var Statement = /** @class */ (function () {
	    function Statement(modifiers, sourceSpan) {
	        this.modifiers = modifiers || [];
	        this.sourceSpan = sourceSpan || null;
	    }
	    Statement.prototype.hasModifier = function (modifier) {
	        return this.modifiers.indexOf(modifier) !== -1;
	    };
	    return Statement;
	}());
	var DeclareVarStmt = /** @class */ (function (_super) {
	    __extends(DeclareVarStmt, _super);
	    function DeclareVarStmt(name, value, type, modifiers, sourceSpan) {
	        if (modifiers === void 0) { modifiers = null; }
	        var _this = _super.call(this, modifiers, sourceSpan) || this;
	        _this.name = name;
	        _this.value = value;
	        _this.type = type || (value && value.type) || null;
	        return _this;
	    }
	    DeclareVarStmt.prototype.isEquivalent = function (stmt) {
	        return stmt instanceof DeclareVarStmt && this.name === stmt.name &&
	            (this.value ? !!stmt.value && this.value.isEquivalent(stmt.value) : !stmt.value);
	    };
	    DeclareVarStmt.prototype.visitStatement = function (visitor, context) {
	        return visitor.visitDeclareVarStmt(this, context);
	    };
	    return DeclareVarStmt;
	}(Statement));
	var DeclareFunctionStmt = /** @class */ (function (_super) {
	    __extends(DeclareFunctionStmt, _super);
	    function DeclareFunctionStmt(name, params, statements, type, modifiers, sourceSpan) {
	        if (modifiers === void 0) { modifiers = null; }
	        var _this = _super.call(this, modifiers, sourceSpan) || this;
	        _this.name = name;
	        _this.params = params;
	        _this.statements = statements;
	        _this.type = type || null;
	        return _this;
	    }
	    DeclareFunctionStmt.prototype.isEquivalent = function (stmt) {
	        return stmt instanceof DeclareFunctionStmt && areAllEquivalent(this.params, stmt.params) &&
	            areAllEquivalent(this.statements, stmt.statements);
	    };
	    DeclareFunctionStmt.prototype.visitStatement = function (visitor, context) {
	        return visitor.visitDeclareFunctionStmt(this, context);
	    };
	    return DeclareFunctionStmt;
	}(Statement));
	var ExpressionStatement = /** @class */ (function (_super) {
	    __extends(ExpressionStatement, _super);
	    function ExpressionStatement(expr, sourceSpan) {
	        var _this = _super.call(this, null, sourceSpan) || this;
	        _this.expr = expr;
	        return _this;
	    }
	    ExpressionStatement.prototype.isEquivalent = function (stmt) {
	        return stmt instanceof ExpressionStatement && this.expr.isEquivalent(stmt.expr);
	    };
	    ExpressionStatement.prototype.visitStatement = function (visitor, context) {
	        return visitor.visitExpressionStmt(this, context);
	    };
	    return ExpressionStatement;
	}(Statement));
	var ReturnStatement = /** @class */ (function (_super) {
	    __extends(ReturnStatement, _super);
	    function ReturnStatement(value, sourceSpan) {
	        var _this = _super.call(this, null, sourceSpan) || this;
	        _this.value = value;
	        return _this;
	    }
	    ReturnStatement.prototype.isEquivalent = function (stmt) {
	        return stmt instanceof ReturnStatement && this.value.isEquivalent(stmt.value);
	    };
	    ReturnStatement.prototype.visitStatement = function (visitor, context) {
	        return visitor.visitReturnStmt(this, context);
	    };
	    return ReturnStatement;
	}(Statement));
	var AbstractClassPart = /** @class */ (function () {
	    function AbstractClassPart(type, modifiers) {
	        this.modifiers = modifiers;
	        if (!modifiers) {
	            this.modifiers = [];
	        }
	        this.type = type || null;
	    }
	    AbstractClassPart.prototype.hasModifier = function (modifier) {
	        return this.modifiers.indexOf(modifier) !== -1;
	    };
	    return AbstractClassPart;
	}());
	var ClassField = /** @class */ (function (_super) {
	    __extends(ClassField, _super);
	    function ClassField(name, type, modifiers, initializer) {
	        if (modifiers === void 0) { modifiers = null; }
	        var _this = _super.call(this, type, modifiers) || this;
	        _this.name = name;
	        _this.initializer = initializer;
	        return _this;
	    }
	    ClassField.prototype.isEquivalent = function (f) {
	        return this.name === f.name;
	    };
	    return ClassField;
	}(AbstractClassPart));
	var ClassMethod = /** @class */ (function (_super) {
	    __extends(ClassMethod, _super);
	    function ClassMethod(name, params, body, type, modifiers) {
	        if (modifiers === void 0) { modifiers = null; }
	        var _this = _super.call(this, type, modifiers) || this;
	        _this.name = name;
	        _this.params = params;
	        _this.body = body;
	        return _this;
	    }
	    ClassMethod.prototype.isEquivalent = function (m) {
	        return this.name === m.name && areAllEquivalent(this.body, m.body);
	    };
	    return ClassMethod;
	}(AbstractClassPart));
	var ClassGetter = /** @class */ (function (_super) {
	    __extends(ClassGetter, _super);
	    function ClassGetter(name, body, type, modifiers) {
	        if (modifiers === void 0) { modifiers = null; }
	        var _this = _super.call(this, type, modifiers) || this;
	        _this.name = name;
	        _this.body = body;
	        return _this;
	    }
	    ClassGetter.prototype.isEquivalent = function (m) {
	        return this.name === m.name && areAllEquivalent(this.body, m.body);
	    };
	    return ClassGetter;
	}(AbstractClassPart));
	var ClassStmt = /** @class */ (function (_super) {
	    __extends(ClassStmt, _super);
	    function ClassStmt(name, parent, fields, getters, constructorMethod, methods, modifiers, sourceSpan) {
	        if (modifiers === void 0) { modifiers = null; }
	        var _this = _super.call(this, modifiers, sourceSpan) || this;
	        _this.name = name;
	        _this.parent = parent;
	        _this.fields = fields;
	        _this.getters = getters;
	        _this.constructorMethod = constructorMethod;
	        _this.methods = methods;
	        return _this;
	    }
	    ClassStmt.prototype.isEquivalent = function (stmt) {
	        return stmt instanceof ClassStmt && this.name === stmt.name &&
	            nullSafeIsEquivalent(this.parent, stmt.parent) &&
	            areAllEquivalent(this.fields, stmt.fields) &&
	            areAllEquivalent(this.getters, stmt.getters) &&
	            this.constructorMethod.isEquivalent(stmt.constructorMethod) &&
	            areAllEquivalent(this.methods, stmt.methods);
	    };
	    ClassStmt.prototype.visitStatement = function (visitor, context) {
	        return visitor.visitDeclareClassStmt(this, context);
	    };
	    return ClassStmt;
	}(Statement));
	var IfStmt = /** @class */ (function (_super) {
	    __extends(IfStmt, _super);
	    function IfStmt(condition, trueCase, falseCase, sourceSpan) {
	        if (falseCase === void 0) { falseCase = []; }
	        var _this = _super.call(this, null, sourceSpan) || this;
	        _this.condition = condition;
	        _this.trueCase = trueCase;
	        _this.falseCase = falseCase;
	        return _this;
	    }
	    IfStmt.prototype.isEquivalent = function (stmt) {
	        return stmt instanceof IfStmt && this.condition.isEquivalent(stmt.condition) &&
	            areAllEquivalent(this.trueCase, stmt.trueCase) &&
	            areAllEquivalent(this.falseCase, stmt.falseCase);
	    };
	    IfStmt.prototype.visitStatement = function (visitor, context) {
	        return visitor.visitIfStmt(this, context);
	    };
	    return IfStmt;
	}(Statement));
	var CommentStmt = /** @class */ (function (_super) {
	    __extends(CommentStmt, _super);
	    function CommentStmt(comment, multiline, sourceSpan) {
	        if (multiline === void 0) { multiline = false; }
	        var _this = _super.call(this, null, sourceSpan) || this;
	        _this.comment = comment;
	        _this.multiline = multiline;
	        return _this;
	    }
	    CommentStmt.prototype.isEquivalent = function (stmt) {
	        return stmt instanceof CommentStmt;
	    };
	    CommentStmt.prototype.visitStatement = function (visitor, context) {
	        return visitor.visitCommentStmt(this, context);
	    };
	    return CommentStmt;
	}(Statement));
	var JSDocCommentStmt = /** @class */ (function (_super) {
	    __extends(JSDocCommentStmt, _super);
	    function JSDocCommentStmt(tags, sourceSpan) {
	        if (tags === void 0) { tags = []; }
	        var _this = _super.call(this, null, sourceSpan) || this;
	        _this.tags = tags;
	        return _this;
	    }
	    JSDocCommentStmt.prototype.isEquivalent = function (stmt) {
	        return stmt instanceof JSDocCommentStmt && this.toString() === stmt.toString();
	    };
	    JSDocCommentStmt.prototype.visitStatement = function (visitor, context) {
	        return visitor.visitJSDocCommentStmt(this, context);
	    };
	    JSDocCommentStmt.prototype.toString = function () {
	        return serializeTags(this.tags);
	    };
	    return JSDocCommentStmt;
	}(Statement));
	var TryCatchStmt = /** @class */ (function (_super) {
	    __extends(TryCatchStmt, _super);
	    function TryCatchStmt(bodyStmts, catchStmts, sourceSpan) {
	        var _this = _super.call(this, null, sourceSpan) || this;
	        _this.bodyStmts = bodyStmts;
	        _this.catchStmts = catchStmts;
	        return _this;
	    }
	    TryCatchStmt.prototype.isEquivalent = function (stmt) {
	        return stmt instanceof TryCatchStmt && areAllEquivalent(this.bodyStmts, stmt.bodyStmts) &&
	            areAllEquivalent(this.catchStmts, stmt.catchStmts);
	    };
	    TryCatchStmt.prototype.visitStatement = function (visitor, context) {
	        return visitor.visitTryCatchStmt(this, context);
	    };
	    return TryCatchStmt;
	}(Statement));
	var ThrowStmt = /** @class */ (function (_super) {
	    __extends(ThrowStmt, _super);
	    function ThrowStmt(error, sourceSpan) {
	        var _this = _super.call(this, null, sourceSpan) || this;
	        _this.error = error;
	        return _this;
	    }
	    ThrowStmt.prototype.isEquivalent = function (stmt) {
	        return stmt instanceof TryCatchStmt && this.error.isEquivalent(stmt.error);
	    };
	    ThrowStmt.prototype.visitStatement = function (visitor, context) {
	        return visitor.visitThrowStmt(this, context);
	    };
	    return ThrowStmt;
	}(Statement));
	var AstTransformer = /** @class */ (function () {
	    function AstTransformer() {
	    }
	    AstTransformer.prototype.transformExpr = function (expr, context) {
	        return expr;
	    };
	    AstTransformer.prototype.transformStmt = function (stmt, context) {
	        return stmt;
	    };
	    AstTransformer.prototype.visitReadVarExpr = function (ast, context) {
	        return this.transformExpr(ast, context);
	    };
	    AstTransformer.prototype.visitWrappedNodeExpr = function (ast, context) {
	        return this.transformExpr(ast, context);
	    };
	    AstTransformer.prototype.visitTypeofExpr = function (expr, context) {
	        return this.transformExpr(new TypeofExpr(expr.expr.visitExpression(this, context), expr.type, expr.sourceSpan), context);
	    };
	    AstTransformer.prototype.visitWriteVarExpr = function (expr, context) {
	        return this.transformExpr(new WriteVarExpr(expr.name, expr.value.visitExpression(this, context), expr.type, expr.sourceSpan), context);
	    };
	    AstTransformer.prototype.visitWriteKeyExpr = function (expr, context) {
	        return this.transformExpr(new WriteKeyExpr(expr.receiver.visitExpression(this, context), expr.index.visitExpression(this, context), expr.value.visitExpression(this, context), expr.type, expr.sourceSpan), context);
	    };
	    AstTransformer.prototype.visitWritePropExpr = function (expr, context) {
	        return this.transformExpr(new WritePropExpr(expr.receiver.visitExpression(this, context), expr.name, expr.value.visitExpression(this, context), expr.type, expr.sourceSpan), context);
	    };
	    AstTransformer.prototype.visitInvokeMethodExpr = function (ast, context) {
	        var method = ast.builtin || ast.name;
	        return this.transformExpr(new InvokeMethodExpr(ast.receiver.visitExpression(this, context), method, this.visitAllExpressions(ast.args, context), ast.type, ast.sourceSpan), context);
	    };
	    AstTransformer.prototype.visitInvokeFunctionExpr = function (ast, context) {
	        return this.transformExpr(new InvokeFunctionExpr(ast.fn.visitExpression(this, context), this.visitAllExpressions(ast.args, context), ast.type, ast.sourceSpan), context);
	    };
	    AstTransformer.prototype.visitInstantiateExpr = function (ast, context) {
	        return this.transformExpr(new InstantiateExpr(ast.classExpr.visitExpression(this, context), this.visitAllExpressions(ast.args, context), ast.type, ast.sourceSpan), context);
	    };
	    AstTransformer.prototype.visitLiteralExpr = function (ast, context) {
	        return this.transformExpr(ast, context);
	    };
	    AstTransformer.prototype.visitLocalizedString = function (ast, context) {
	        return this.transformExpr(new LocalizedString(ast.metaBlock, ast.messageParts, ast.placeHolderNames, this.visitAllExpressions(ast.expressions, context), ast.sourceSpan), context);
	    };
	    AstTransformer.prototype.visitExternalExpr = function (ast, context) {
	        return this.transformExpr(ast, context);
	    };
	    AstTransformer.prototype.visitConditionalExpr = function (ast, context) {
	        return this.transformExpr(new ConditionalExpr(ast.condition.visitExpression(this, context), ast.trueCase.visitExpression(this, context), ast.falseCase.visitExpression(this, context), ast.type, ast.sourceSpan), context);
	    };
	    AstTransformer.prototype.visitNotExpr = function (ast, context) {
	        return this.transformExpr(new NotExpr(ast.condition.visitExpression(this, context), ast.sourceSpan), context);
	    };
	    AstTransformer.prototype.visitAssertNotNullExpr = function (ast, context) {
	        return this.transformExpr(new AssertNotNull(ast.condition.visitExpression(this, context), ast.sourceSpan), context);
	    };
	    AstTransformer.prototype.visitCastExpr = function (ast, context) {
	        return this.transformExpr(new CastExpr(ast.value.visitExpression(this, context), ast.type, ast.sourceSpan), context);
	    };
	    AstTransformer.prototype.visitFunctionExpr = function (ast, context) {
	        return this.transformExpr(new FunctionExpr(ast.params, this.visitAllStatements(ast.statements, context), ast.type, ast.sourceSpan), context);
	    };
	    AstTransformer.prototype.visitBinaryOperatorExpr = function (ast, context) {
	        return this.transformExpr(new BinaryOperatorExpr(ast.operator, ast.lhs.visitExpression(this, context), ast.rhs.visitExpression(this, context), ast.type, ast.sourceSpan), context);
	    };
	    AstTransformer.prototype.visitReadPropExpr = function (ast, context) {
	        return this.transformExpr(new ReadPropExpr(ast.receiver.visitExpression(this, context), ast.name, ast.type, ast.sourceSpan), context);
	    };
	    AstTransformer.prototype.visitReadKeyExpr = function (ast, context) {
	        return this.transformExpr(new ReadKeyExpr(ast.receiver.visitExpression(this, context), ast.index.visitExpression(this, context), ast.type, ast.sourceSpan), context);
	    };
	    AstTransformer.prototype.visitLiteralArrayExpr = function (ast, context) {
	        return this.transformExpr(new LiteralArrayExpr(this.visitAllExpressions(ast.entries, context), ast.type, ast.sourceSpan), context);
	    };
	    AstTransformer.prototype.visitLiteralMapExpr = function (ast, context) {
	        var _this = this;
	        var entries = ast.entries.map(function (entry) { return new LiteralMapEntry(entry.key, entry.value.visitExpression(_this, context), entry.quoted); });
	        var mapType = new MapType(ast.valueType, null);
	        return this.transformExpr(new LiteralMapExpr(entries, mapType, ast.sourceSpan), context);
	    };
	    AstTransformer.prototype.visitCommaExpr = function (ast, context) {
	        return this.transformExpr(new CommaExpr(this.visitAllExpressions(ast.parts, context), ast.sourceSpan), context);
	    };
	    AstTransformer.prototype.visitAllExpressions = function (exprs, context) {
	        var _this = this;
	        return exprs.map(function (expr) { return expr.visitExpression(_this, context); });
	    };
	    AstTransformer.prototype.visitDeclareVarStmt = function (stmt, context) {
	        var value = stmt.value && stmt.value.visitExpression(this, context);
	        return this.transformStmt(new DeclareVarStmt(stmt.name, value, stmt.type, stmt.modifiers, stmt.sourceSpan), context);
	    };
	    AstTransformer.prototype.visitDeclareFunctionStmt = function (stmt, context) {
	        return this.transformStmt(new DeclareFunctionStmt(stmt.name, stmt.params, this.visitAllStatements(stmt.statements, context), stmt.type, stmt.modifiers, stmt.sourceSpan), context);
	    };
	    AstTransformer.prototype.visitExpressionStmt = function (stmt, context) {
	        return this.transformStmt(new ExpressionStatement(stmt.expr.visitExpression(this, context), stmt.sourceSpan), context);
	    };
	    AstTransformer.prototype.visitReturnStmt = function (stmt, context) {
	        return this.transformStmt(new ReturnStatement(stmt.value.visitExpression(this, context), stmt.sourceSpan), context);
	    };
	    AstTransformer.prototype.visitDeclareClassStmt = function (stmt, context) {
	        var _this = this;
	        var parent = stmt.parent.visitExpression(this, context);
	        var getters = stmt.getters.map(function (getter) { return new ClassGetter(getter.name, _this.visitAllStatements(getter.body, context), getter.type, getter.modifiers); });
	        var ctorMethod = stmt.constructorMethod &&
	            new ClassMethod(stmt.constructorMethod.name, stmt.constructorMethod.params, this.visitAllStatements(stmt.constructorMethod.body, context), stmt.constructorMethod.type, stmt.constructorMethod.modifiers);
	        var methods = stmt.methods.map(function (method) { return new ClassMethod(method.name, method.params, _this.visitAllStatements(method.body, context), method.type, method.modifiers); });
	        return this.transformStmt(new ClassStmt(stmt.name, parent, stmt.fields, getters, ctorMethod, methods, stmt.modifiers, stmt.sourceSpan), context);
	    };
	    AstTransformer.prototype.visitIfStmt = function (stmt, context) {
	        return this.transformStmt(new IfStmt(stmt.condition.visitExpression(this, context), this.visitAllStatements(stmt.trueCase, context), this.visitAllStatements(stmt.falseCase, context), stmt.sourceSpan), context);
	    };
	    AstTransformer.prototype.visitTryCatchStmt = function (stmt, context) {
	        return this.transformStmt(new TryCatchStmt(this.visitAllStatements(stmt.bodyStmts, context), this.visitAllStatements(stmt.catchStmts, context), stmt.sourceSpan), context);
	    };
	    AstTransformer.prototype.visitThrowStmt = function (stmt, context) {
	        return this.transformStmt(new ThrowStmt(stmt.error.visitExpression(this, context), stmt.sourceSpan), context);
	    };
	    AstTransformer.prototype.visitCommentStmt = function (stmt, context) {
	        return this.transformStmt(stmt, context);
	    };
	    AstTransformer.prototype.visitJSDocCommentStmt = function (stmt, context) {
	        return this.transformStmt(stmt, context);
	    };
	    AstTransformer.prototype.visitAllStatements = function (stmts, context) {
	        var _this = this;
	        return stmts.map(function (stmt) { return stmt.visitStatement(_this, context); });
	    };
	    return AstTransformer;
	}());
	var RecursiveAstVisitor = /** @class */ (function () {
	    function RecursiveAstVisitor() {
	    }
	    RecursiveAstVisitor.prototype.visitType = function (ast, context) {
	        return ast;
	    };
	    RecursiveAstVisitor.prototype.visitExpression = function (ast, context) {
	        if (ast.type) {
	            ast.type.visitType(this, context);
	        }
	        return ast;
	    };
	    RecursiveAstVisitor.prototype.visitBuiltinType = function (type, context) {
	        return this.visitType(type, context);
	    };
	    RecursiveAstVisitor.prototype.visitExpressionType = function (type, context) {
	        var _this = this;
	        type.value.visitExpression(this, context);
	        if (type.typeParams !== null) {
	            type.typeParams.forEach(function (param) { return _this.visitType(param, context); });
	        }
	        return this.visitType(type, context);
	    };
	    RecursiveAstVisitor.prototype.visitArrayType = function (type, context) {
	        return this.visitType(type, context);
	    };
	    RecursiveAstVisitor.prototype.visitMapType = function (type, context) {
	        return this.visitType(type, context);
	    };
	    RecursiveAstVisitor.prototype.visitWrappedNodeExpr = function (ast, context) {
	        return ast;
	    };
	    RecursiveAstVisitor.prototype.visitTypeofExpr = function (ast, context) {
	        return this.visitExpression(ast, context);
	    };
	    RecursiveAstVisitor.prototype.visitReadVarExpr = function (ast, context) {
	        return this.visitExpression(ast, context);
	    };
	    RecursiveAstVisitor.prototype.visitWriteVarExpr = function (ast, context) {
	        ast.value.visitExpression(this, context);
	        return this.visitExpression(ast, context);
	    };
	    RecursiveAstVisitor.prototype.visitWriteKeyExpr = function (ast, context) {
	        ast.receiver.visitExpression(this, context);
	        ast.index.visitExpression(this, context);
	        ast.value.visitExpression(this, context);
	        return this.visitExpression(ast, context);
	    };
	    RecursiveAstVisitor.prototype.visitWritePropExpr = function (ast, context) {
	        ast.receiver.visitExpression(this, context);
	        ast.value.visitExpression(this, context);
	        return this.visitExpression(ast, context);
	    };
	    RecursiveAstVisitor.prototype.visitInvokeMethodExpr = function (ast, context) {
	        ast.receiver.visitExpression(this, context);
	        this.visitAllExpressions(ast.args, context);
	        return this.visitExpression(ast, context);
	    };
	    RecursiveAstVisitor.prototype.visitInvokeFunctionExpr = function (ast, context) {
	        ast.fn.visitExpression(this, context);
	        this.visitAllExpressions(ast.args, context);
	        return this.visitExpression(ast, context);
	    };
	    RecursiveAstVisitor.prototype.visitInstantiateExpr = function (ast, context) {
	        ast.classExpr.visitExpression(this, context);
	        this.visitAllExpressions(ast.args, context);
	        return this.visitExpression(ast, context);
	    };
	    RecursiveAstVisitor.prototype.visitLiteralExpr = function (ast, context) {
	        return this.visitExpression(ast, context);
	    };
	    RecursiveAstVisitor.prototype.visitLocalizedString = function (ast, context) {
	        return this.visitExpression(ast, context);
	    };
	    RecursiveAstVisitor.prototype.visitExternalExpr = function (ast, context) {
	        var _this = this;
	        if (ast.typeParams) {
	            ast.typeParams.forEach(function (type) { return type.visitType(_this, context); });
	        }
	        return this.visitExpression(ast, context);
	    };
	    RecursiveAstVisitor.prototype.visitConditionalExpr = function (ast, context) {
	        ast.condition.visitExpression(this, context);
	        ast.trueCase.visitExpression(this, context);
	        ast.falseCase.visitExpression(this, context);
	        return this.visitExpression(ast, context);
	    };
	    RecursiveAstVisitor.prototype.visitNotExpr = function (ast, context) {
	        ast.condition.visitExpression(this, context);
	        return this.visitExpression(ast, context);
	    };
	    RecursiveAstVisitor.prototype.visitAssertNotNullExpr = function (ast, context) {
	        ast.condition.visitExpression(this, context);
	        return this.visitExpression(ast, context);
	    };
	    RecursiveAstVisitor.prototype.visitCastExpr = function (ast, context) {
	        ast.value.visitExpression(this, context);
	        return this.visitExpression(ast, context);
	    };
	    RecursiveAstVisitor.prototype.visitFunctionExpr = function (ast, context) {
	        this.visitAllStatements(ast.statements, context);
	        return this.visitExpression(ast, context);
	    };
	    RecursiveAstVisitor.prototype.visitBinaryOperatorExpr = function (ast, context) {
	        ast.lhs.visitExpression(this, context);
	        ast.rhs.visitExpression(this, context);
	        return this.visitExpression(ast, context);
	    };
	    RecursiveAstVisitor.prototype.visitReadPropExpr = function (ast, context) {
	        ast.receiver.visitExpression(this, context);
	        return this.visitExpression(ast, context);
	    };
	    RecursiveAstVisitor.prototype.visitReadKeyExpr = function (ast, context) {
	        ast.receiver.visitExpression(this, context);
	        ast.index.visitExpression(this, context);
	        return this.visitExpression(ast, context);
	    };
	    RecursiveAstVisitor.prototype.visitLiteralArrayExpr = function (ast, context) {
	        this.visitAllExpressions(ast.entries, context);
	        return this.visitExpression(ast, context);
	    };
	    RecursiveAstVisitor.prototype.visitLiteralMapExpr = function (ast, context) {
	        var _this = this;
	        ast.entries.forEach(function (entry) { return entry.value.visitExpression(_this, context); });
	        return this.visitExpression(ast, context);
	    };
	    RecursiveAstVisitor.prototype.visitCommaExpr = function (ast, context) {
	        this.visitAllExpressions(ast.parts, context);
	        return this.visitExpression(ast, context);
	    };
	    RecursiveAstVisitor.prototype.visitAllExpressions = function (exprs, context) {
	        var _this = this;
	        exprs.forEach(function (expr) { return expr.visitExpression(_this, context); });
	    };
	    RecursiveAstVisitor.prototype.visitDeclareVarStmt = function (stmt, context) {
	        if (stmt.value) {
	            stmt.value.visitExpression(this, context);
	        }
	        if (stmt.type) {
	            stmt.type.visitType(this, context);
	        }
	        return stmt;
	    };
	    RecursiveAstVisitor.prototype.visitDeclareFunctionStmt = function (stmt, context) {
	        this.visitAllStatements(stmt.statements, context);
	        if (stmt.type) {
	            stmt.type.visitType(this, context);
	        }
	        return stmt;
	    };
	    RecursiveAstVisitor.prototype.visitExpressionStmt = function (stmt, context) {
	        stmt.expr.visitExpression(this, context);
	        return stmt;
	    };
	    RecursiveAstVisitor.prototype.visitReturnStmt = function (stmt, context) {
	        stmt.value.visitExpression(this, context);
	        return stmt;
	    };
	    RecursiveAstVisitor.prototype.visitDeclareClassStmt = function (stmt, context) {
	        var _this = this;
	        stmt.parent.visitExpression(this, context);
	        stmt.getters.forEach(function (getter) { return _this.visitAllStatements(getter.body, context); });
	        if (stmt.constructorMethod) {
	            this.visitAllStatements(stmt.constructorMethod.body, context);
	        }
	        stmt.methods.forEach(function (method) { return _this.visitAllStatements(method.body, context); });
	        return stmt;
	    };
	    RecursiveAstVisitor.prototype.visitIfStmt = function (stmt, context) {
	        stmt.condition.visitExpression(this, context);
	        this.visitAllStatements(stmt.trueCase, context);
	        this.visitAllStatements(stmt.falseCase, context);
	        return stmt;
	    };
	    RecursiveAstVisitor.prototype.visitTryCatchStmt = function (stmt, context) {
	        this.visitAllStatements(stmt.bodyStmts, context);
	        this.visitAllStatements(stmt.catchStmts, context);
	        return stmt;
	    };
	    RecursiveAstVisitor.prototype.visitThrowStmt = function (stmt, context) {
	        stmt.error.visitExpression(this, context);
	        return stmt;
	    };
	    RecursiveAstVisitor.prototype.visitCommentStmt = function (stmt, context) {
	        return stmt;
	    };
	    RecursiveAstVisitor.prototype.visitJSDocCommentStmt = function (stmt, context) {
	        return stmt;
	    };
	    RecursiveAstVisitor.prototype.visitAllStatements = function (stmts, context) {
	        var _this = this;
	        stmts.forEach(function (stmt) { return stmt.visitStatement(_this, context); });
	    };
	    return RecursiveAstVisitor;
	}());
	function findReadVarNames(stmts) {
	    var visitor = new _ReadVarVisitor();
	    visitor.visitAllStatements(stmts, null);
	    return visitor.varNames;
	}
	var _ReadVarVisitor = /** @class */ (function (_super) {
	    __extends(_ReadVarVisitor, _super);
	    function _ReadVarVisitor() {
	        var _this = _super !== null && _super.apply(this, arguments) || this;
	        _this.varNames = new Set();
	        return _this;
	    }
	    _ReadVarVisitor.prototype.visitDeclareFunctionStmt = function (stmt, context) {
	        // Don't descend into nested functions
	        return stmt;
	    };
	    _ReadVarVisitor.prototype.visitDeclareClassStmt = function (stmt, context) {
	        // Don't descend into nested classes
	        return stmt;
	    };
	    _ReadVarVisitor.prototype.visitReadVarExpr = function (ast, context) {
	        if (ast.name) {
	            this.varNames.add(ast.name);
	        }
	        return null;
	    };
	    return _ReadVarVisitor;
	}(RecursiveAstVisitor));
	var _FindExternalReferencesVisitor = /** @class */ (function (_super) {
	    __extends(_FindExternalReferencesVisitor, _super);
	    function _FindExternalReferencesVisitor() {
	        var _this = _super !== null && _super.apply(this, arguments) || this;
	        _this.externalReferences = [];
	        return _this;
	    }
	    _FindExternalReferencesVisitor.prototype.visitExternalExpr = function (e, context) {
	        this.externalReferences.push(e.value);
	        return _super.prototype.visitExternalExpr.call(this, e, context);
	    };
	    return _FindExternalReferencesVisitor;
	}(RecursiveAstVisitor));
	function applySourceSpanToStatementIfNeeded(stmt, sourceSpan) {
	    if (!sourceSpan) {
	        return stmt;
	    }
	    var transformer = new _ApplySourceSpanTransformer(sourceSpan);
	    return stmt.visitStatement(transformer, null);
	}
	function applySourceSpanToExpressionIfNeeded(expr, sourceSpan) {
	    if (!sourceSpan) {
	        return expr;
	    }
	    var transformer = new _ApplySourceSpanTransformer(sourceSpan);
	    return expr.visitExpression(transformer, null);
	}
	var _ApplySourceSpanTransformer = /** @class */ (function (_super) {
	    __extends(_ApplySourceSpanTransformer, _super);
	    function _ApplySourceSpanTransformer(sourceSpan) {
	        var _this = _super.call(this) || this;
	        _this.sourceSpan = sourceSpan;
	        return _this;
	    }
	    _ApplySourceSpanTransformer.prototype._clone = function (obj) {
	        var e_1, _a;
	        var clone = Object.create(obj.constructor.prototype);
	        try {
	            for (var _b = __values(Object.keys(obj)), _c = _b.next(); !_c.done; _c = _b.next()) {
	                var prop = _c.value;
	                clone[prop] = obj[prop];
	            }
	        }
	        catch (e_1_1) { e_1 = { error: e_1_1 }; }
	        finally {
	            try {
	                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
	            }
	            finally { if (e_1) throw e_1.error; }
	        }
	        return clone;
	    };
	    _ApplySourceSpanTransformer.prototype.transformExpr = function (expr, context) {
	        if (!expr.sourceSpan) {
	            expr = this._clone(expr);
	            expr.sourceSpan = this.sourceSpan;
	        }
	        return expr;
	    };
	    _ApplySourceSpanTransformer.prototype.transformStmt = function (stmt, context) {
	        if (!stmt.sourceSpan) {
	            stmt = this._clone(stmt);
	            stmt.sourceSpan = this.sourceSpan;
	        }
	        return stmt;
	    };
	    return _ApplySourceSpanTransformer;
	}(AstTransformer));
	function variable(name, type, sourceSpan) {
	    return new ReadVarExpr(name, type, sourceSpan);
	}
	function importExpr(id, typeParams, sourceSpan) {
	    if (typeParams === void 0) { typeParams = null; }
	    return new ExternalExpr(id, null, typeParams, sourceSpan);
	}
	function importType(id, typeParams, typeModifiers) {
	    if (typeParams === void 0) { typeParams = null; }
	    if (typeModifiers === void 0) { typeModifiers = null; }
	    return id != null ? expressionType(importExpr(id, typeParams, null), typeModifiers) : null;
	}
	function expressionType(expr, typeModifiers, typeParams) {
	    if (typeModifiers === void 0) { typeModifiers = null; }
	    if (typeParams === void 0) { typeParams = null; }
	    return new ExpressionType(expr, typeModifiers, typeParams);
	}
	function typeofExpr(expr) {
	    return new TypeofExpr(expr);
	}
	function literalArr(values, type, sourceSpan) {
	    return new LiteralArrayExpr(values, type, sourceSpan);
	}
	function literalMap(values, type) {
	    if (type === void 0) { type = null; }
	    return new LiteralMapExpr(values.map(function (e) { return new LiteralMapEntry(e.key, e.value, e.quoted); }), type, null);
	}
	function not(expr, sourceSpan) {
	    return new NotExpr(expr, sourceSpan);
	}
	function assertNotNull(expr, sourceSpan) {
	    return new AssertNotNull(expr, sourceSpan);
	}
	function fn(params, body, type, sourceSpan, name) {
	    return new FunctionExpr(params, body, type, sourceSpan, name);
	}
	function ifStmt(condition, thenClause, elseClause) {
	    return new IfStmt(condition, thenClause, elseClause);
	}
	function literal(value, type, sourceSpan) {
	    return new LiteralExpr(value, type, sourceSpan);
	}
	function localizedString(metaBlock, messageParts, placeholderNames, expressions, sourceSpan) {
	    return new LocalizedString(metaBlock, messageParts, placeholderNames, expressions, sourceSpan);
	}
	function isNull(exp) {
	    return exp instanceof LiteralExpr && exp.value === null;
	}
	/*
	 * Serializes a `Tag` into a string.
	 * Returns a string like " @foo {bar} baz" (note the leading whitespace before `@foo`).
	 */
	function tagToString(tag) {
	    var out = '';
	    if (tag.tagName) {
	        out += " @" + tag.tagName;
	    }
	    if (tag.text) {
	        if (tag.text.match(/\/\*|\*\//)) {
	            throw new Error('JSDoc text cannot contain "/*" and "*/"');
	        }
	        out += ' ' + tag.text.replace(/@/g, '\\@');
	    }
	    return out;
	}
	function serializeTags(tags) {
	    var e_2, _a;
	    if (tags.length === 0)
	        return '';
	    var out = '*\n';
	    try {
	        for (var tags_1 = __values(tags), tags_1_1 = tags_1.next(); !tags_1_1.done; tags_1_1 = tags_1.next()) {
	            var tag = tags_1_1.value;
	            out += ' *';
	            // If the tagToString is multi-line, insert " * " prefixes on subsequent lines.
	            out += tagToString(tag).replace(/\n/g, '\n * ');
	            out += '\n';
	        }
	    }
	    catch (e_2_1) { e_2 = { error: e_2_1 }; }
	    finally {
	        try {
	            if (tags_1_1 && !tags_1_1.done && (_a = tags_1.return)) _a.call(tags_1);
	        }
	        finally { if (e_2) throw e_2.error; }
	    }
	    out += ' ';
	    return out;
	}

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	var DASH_CASE_REGEXP = /-+([a-z0-9])/g;
	function dashCaseToCamelCase(input) {
	    return input.replace(DASH_CASE_REGEXP, function () {
	        var m = [];
	        for (var _i = 0; _i < arguments.length; _i++) {
	            m[_i] = arguments[_i];
	        }
	        return m[1].toUpperCase();
	    });
	}
	function splitAtColon(input, defaultValues) {
	    return _splitAt(input, ':', defaultValues);
	}
	function splitAtPeriod(input, defaultValues) {
	    return _splitAt(input, '.', defaultValues);
	}
	function _splitAt(input, character, defaultValues) {
	    var characterIndex = input.indexOf(character);
	    if (characterIndex == -1)
	        return defaultValues;
	    return [input.slice(0, characterIndex).trim(), input.slice(characterIndex + 1).trim()];
	}
	function visitValue(value, visitor, context) {
	    if (Array.isArray(value)) {
	        return visitor.visitArray(value, context);
	    }
	    if (isStrictStringMap(value)) {
	        return visitor.visitStringMap(value, context);
	    }
	    if (value == null || typeof value == 'string' || typeof value == 'number' ||
	        typeof value == 'boolean') {
	        return visitor.visitPrimitive(value, context);
	    }
	    return visitor.visitOther(value, context);
	}
	function isDefined(val) {
	    return val !== null && val !== undefined;
	}
	function noUndefined(val) {
	    return val === undefined ? null : val;
	}
	var ValueTransformer = /** @class */ (function () {
	    function ValueTransformer() {
	    }
	    ValueTransformer.prototype.visitArray = function (arr, context) {
	        var _this = this;
	        return arr.map(function (value) { return visitValue(value, _this, context); });
	    };
	    ValueTransformer.prototype.visitStringMap = function (map, context) {
	        var _this = this;
	        var result = {};
	        Object.keys(map).forEach(function (key) {
	            result[key] = visitValue(map[key], _this, context);
	        });
	        return result;
	    };
	    ValueTransformer.prototype.visitPrimitive = function (value, context) {
	        return value;
	    };
	    ValueTransformer.prototype.visitOther = function (value, context) {
	        return value;
	    };
	    return ValueTransformer;
	}());
	var SyncAsync = {
	    assertSync: function (value) {
	        if (isPromise(value)) {
	            throw new Error("Illegal state: value cannot be a promise");
	        }
	        return value;
	    },
	    then: function (value, cb) {
	        return isPromise(value) ? value.then(cb) : cb(value);
	    },
	    all: function (syncAsyncValues) {
	        return syncAsyncValues.some(isPromise) ? Promise.all(syncAsyncValues) : syncAsyncValues;
	    }
	};
	function error(msg) {
	    throw new Error("Internal Error: " + msg);
	}
	function syntaxError(msg, parseErrors) {
	    var error = Error(msg);
	    error[ERROR_SYNTAX_ERROR] = true;
	    if (parseErrors)
	        error[ERROR_PARSE_ERRORS] = parseErrors;
	    return error;
	}
	var ERROR_SYNTAX_ERROR = 'ngSyntaxError';
	var ERROR_PARSE_ERRORS = 'ngParseErrors';
	// Escape characters that have a special meaning in Regular Expressions
	function escapeRegExp(s) {
	    return s.replace(/([.*+?^=!:${}()|[\]\/\\])/g, '\\$1');
	}
	var STRING_MAP_PROTO = Object.getPrototypeOf({});
	function isStrictStringMap(obj) {
	    return typeof obj === 'object' && obj !== null && Object.getPrototypeOf(obj) === STRING_MAP_PROTO;
	}
	function utf8Encode(str) {
	    var encoded = '';
	    for (var index = 0; index < str.length; index++) {
	        var codePoint = str.charCodeAt(index);
	        // decode surrogate
	        // see https://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae
	        if (codePoint >= 0xd800 && codePoint <= 0xdbff && str.length > (index + 1)) {
	            var low = str.charCodeAt(index + 1);
	            if (low >= 0xdc00 && low <= 0xdfff) {
	                index++;
	                codePoint = ((codePoint - 0xd800) << 10) + low - 0xdc00 + 0x10000;
	            }
	        }
	        if (codePoint <= 0x7f) {
	            encoded += String.fromCharCode(codePoint);
	        }
	        else if (codePoint <= 0x7ff) {
	            encoded += String.fromCharCode(((codePoint >> 6) & 0x1F) | 0xc0, (codePoint & 0x3f) | 0x80);
	        }
	        else if (codePoint <= 0xffff) {
	            encoded += String.fromCharCode((codePoint >> 12) | 0xe0, ((codePoint >> 6) & 0x3f) | 0x80, (codePoint & 0x3f) | 0x80);
	        }
	        else if (codePoint <= 0x1fffff) {
	            encoded += String.fromCharCode(((codePoint >> 18) & 0x07) | 0xf0, ((codePoint >> 12) & 0x3f) | 0x80, ((codePoint >> 6) & 0x3f) | 0x80, (codePoint & 0x3f) | 0x80);
	        }
	    }
	    return encoded;
	}
	function stringify(token) {
	    if (typeof token === 'string') {
	        return token;
	    }
	    if (Array.isArray(token)) {
	        return '[' + token.map(stringify).join(', ') + ']';
	    }
	    if (token == null) {
	        return '' + token;
	    }
	    if (token.overriddenName) {
	        return "" + token.overriddenName;
	    }
	    if (token.name) {
	        return "" + token.name;
	    }
	    if (!token.toString) {
	        return 'object';
	    }
	    // WARNING: do not try to `JSON.stringify(token)` here
	    // see https://github.com/angular/angular/issues/23440
	    var res = token.toString();
	    if (res == null) {
	        return '' + res;
	    }
	    var newLineIndex = res.indexOf('\n');
	    return newLineIndex === -1 ? res : res.substring(0, newLineIndex);
	}
	/**
	 * Lazily retrieves the reference value from a forwardRef.
	 */
	function resolveForwardRef(type) {
	    if (typeof type === 'function' && type.hasOwnProperty('__forward_ref__')) {
	        return type();
	    }
	    else {
	        return type;
	    }
	}
	/**
	 * Determine if the argument is shaped like a Promise
	 */
	function isPromise(obj) {
	    // allow any Promise/A+ compliant thenable.
	    // It's up to the caller to ensure that obj.then conforms to the spec
	    return !!obj && typeof obj.then === 'function';
	}
	var Version = /** @class */ (function () {
	    function Version(full) {
	        this.full = full;
	        var splits = full.split('.');
	        this.major = splits[0];
	        this.minor = splits[1];
	        this.patch = splits.slice(2).join('.');
	    }
	    return Version;
	}());
	var __window = typeof window !== 'undefined' && window;
	var __self = typeof self !== 'undefined' && typeof WorkerGlobalScope !== 'undefined' &&
	    self instanceof WorkerGlobalScope && self;
	var __global = typeof global !== 'undefined' && global;
	// Check __global first, because in Node tests both __global and __window may be defined and _global
	// should be __global in that case.
	var _global = __global || __window || __self;
	function newArray(size, value) {
	    var list = [];
	    for (var i = 0; i < size; i++) {
	        list.push(value);
	    }
	    return list;
	}
	/**
	 * Partitions a given array into 2 arrays, based on a boolean value returned by the condition
	 * function.
	 *
	 * @param arr Input array that should be partitioned
	 * @param conditionFn Condition function that is called for each item in a given array and returns a
	 * boolean value.
	 */
	function partitionArray(arr, conditionFn) {
	    var truthy = [];
	    var falsy = [];
	    arr.forEach(function (item) {
	        (conditionFn(item) ? truthy : falsy).push(item);
	    });
	    return [truthy, falsy];
	}

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	var CONSTANT_PREFIX = '_c';
	/**
	 * `ConstantPool` tries to reuse literal factories when two or more literals are identical.
	 * We determine whether literals are identical by creating a key out of their AST using the
	 * `KeyVisitor`. This constant is used to replace dynamic expressions which can't be safely
	 * converted into a key. E.g. given an expression `{foo: bar()}`, since we don't know what
	 * the result of `bar` will be, we create a key that looks like `{foo: <unknown>}`. Note
	 * that we use a variable, rather than something like `null` in order to avoid collisions.
	 */
	var UNKNOWN_VALUE_KEY = variable('<unknown>');
	/**
	 * Context to use when producing a key.
	 *
	 * This ensures we see the constant not the reference variable when producing
	 * a key.
	 */
	var KEY_CONTEXT = {};
	/**
	 * A node that is a place-holder that allows the node to be replaced when the actual
	 * node is known.
	 *
	 * This allows the constant pool to change an expression from a direct reference to
	 * a constant to a shared constant. It returns a fix-up node that is later allowed to
	 * change the referenced expression.
	 */
	var FixupExpression = /** @class */ (function (_super) {
	    __extends(FixupExpression, _super);
	    function FixupExpression(resolved) {
	        var _this = _super.call(this, resolved.type) || this;
	        _this.resolved = resolved;
	        _this.original = resolved;
	        return _this;
	    }
	    FixupExpression.prototype.visitExpression = function (visitor, context) {
	        if (context === KEY_CONTEXT) {
	            // When producing a key we want to traverse the constant not the
	            // variable used to refer to it.
	            return this.original.visitExpression(visitor, context);
	        }
	        else {
	            return this.resolved.visitExpression(visitor, context);
	        }
	    };
	    FixupExpression.prototype.isEquivalent = function (e) {
	        return e instanceof FixupExpression && this.resolved.isEquivalent(e.resolved);
	    };
	    FixupExpression.prototype.isConstant = function () {
	        return true;
	    };
	    FixupExpression.prototype.fixup = function (expression) {
	        this.resolved = expression;
	        this.shared = true;
	    };
	    return FixupExpression;
	}(Expression));
	/**
	 * A constant pool allows a code emitter to share constant in an output context.
	 *
	 * The constant pool also supports sharing access to ivy definitions references.
	 */
	var ConstantPool = /** @class */ (function () {
	    function ConstantPool() {
	        this.statements = [];
	        this.literals = new Map();
	        this.literalFactories = new Map();
	        this.injectorDefinitions = new Map();
	        this.directiveDefinitions = new Map();
	        this.componentDefinitions = new Map();
	        this.pipeDefinitions = new Map();
	        this.nextNameIndex = 0;
	    }
	    ConstantPool.prototype.getConstLiteral = function (literal, forceShared) {
	        if (literal instanceof LiteralExpr || literal instanceof FixupExpression) {
	            // Do no put simple literals into the constant pool or try to produce a constant for a
	            // reference to a constant.
	            return literal;
	        }
	        var key = this.keyOf(literal);
	        var fixup = this.literals.get(key);
	        var newValue = false;
	        if (!fixup) {
	            fixup = new FixupExpression(literal);
	            this.literals.set(key, fixup);
	            newValue = true;
	        }
	        if ((!newValue && !fixup.shared) || (newValue && forceShared)) {
	            // Replace the expression with a variable
	            var name_1 = this.freshName();
	            this.statements.push(variable(name_1).set(literal).toDeclStmt(INFERRED_TYPE, [StmtModifier.Final]));
	            fixup.fixup(variable(name_1));
	        }
	        return fixup;
	    };
	    ConstantPool.prototype.getDefinition = function (type, kind, ctx, forceShared) {
	        if (forceShared === void 0) { forceShared = false; }
	        var definitions = this.definitionsOf(kind);
	        var fixup = definitions.get(type);
	        var newValue = false;
	        if (!fixup) {
	            var property = this.propertyNameOf(kind);
	            fixup = new FixupExpression(ctx.importExpr(type).prop(property));
	            definitions.set(type, fixup);
	            newValue = true;
	        }
	        if ((!newValue && !fixup.shared) || (newValue && forceShared)) {
	            var name_2 = this.freshName();
	            this.statements.push(variable(name_2).set(fixup.resolved).toDeclStmt(INFERRED_TYPE, [StmtModifier.Final]));
	            fixup.fixup(variable(name_2));
	        }
	        return fixup;
	    };
	    ConstantPool.prototype.getLiteralFactory = function (literal) {
	        // Create a pure function that builds an array of a mix of constant and variable expressions
	        if (literal instanceof LiteralArrayExpr) {
	            var argumentsForKey = literal.entries.map(function (e) { return e.isConstant() ? e : UNKNOWN_VALUE_KEY; });
	            var key = this.keyOf(literalArr(argumentsForKey));
	            return this._getLiteralFactory(key, literal.entries, function (entries) { return literalArr(entries); });
	        }
	        else {
	            var expressionForKey = literalMap(literal.entries.map(function (e) { return ({
	                key: e.key,
	                value: e.value.isConstant() ? e.value : UNKNOWN_VALUE_KEY,
	                quoted: e.quoted
	            }); }));
	            var key = this.keyOf(expressionForKey);
	            return this._getLiteralFactory(key, literal.entries.map(function (e) { return e.value; }), function (entries) { return literalMap(entries.map(function (value, index) { return ({
	                key: literal.entries[index].key,
	                value: value,
	                quoted: literal.entries[index].quoted
	            }); })); });
	        }
	    };
	    ConstantPool.prototype._getLiteralFactory = function (key, values, resultMap) {
	        var _this = this;
	        var literalFactory = this.literalFactories.get(key);
	        var literalFactoryArguments = values.filter((function (e) { return !e.isConstant(); }));
	        if (!literalFactory) {
	            var resultExpressions = values.map(function (e, index) { return e.isConstant() ? _this.getConstLiteral(e, true) : variable("a" + index); });
	            var parameters = resultExpressions.filter(isVariable).map(function (e) { return new FnParam(e.name, DYNAMIC_TYPE); });
	            var pureFunctionDeclaration = fn(parameters, [new ReturnStatement(resultMap(resultExpressions))], INFERRED_TYPE);
	            var name_3 = this.freshName();
	            this.statements.push(variable(name_3).set(pureFunctionDeclaration).toDeclStmt(INFERRED_TYPE, [
	                StmtModifier.Final
	            ]));
	            literalFactory = variable(name_3);
	            this.literalFactories.set(key, literalFactory);
	        }
	        return { literalFactory: literalFactory, literalFactoryArguments: literalFactoryArguments };
	    };
	    /**
	     * Produce a unique name.
	     *
	     * The name might be unique among different prefixes if any of the prefixes end in
	     * a digit so the prefix should be a constant string (not based on user input) and
	     * must not end in a digit.
	     */
	    ConstantPool.prototype.uniqueName = function (prefix) {
	        return "" + prefix + this.nextNameIndex++;
	    };
	    ConstantPool.prototype.definitionsOf = function (kind) {
	        switch (kind) {
	            case 2 /* Component */:
	                return this.componentDefinitions;
	            case 1 /* Directive */:
	                return this.directiveDefinitions;
	            case 0 /* Injector */:
	                return this.injectorDefinitions;
	            case 3 /* Pipe */:
	                return this.pipeDefinitions;
	        }
	        error("Unknown definition kind " + kind);
	        return this.componentDefinitions;
	    };
	    ConstantPool.prototype.propertyNameOf = function (kind) {
	        switch (kind) {
	            case 2 /* Component */:
	                return 'Éµcmp';
	            case 1 /* Directive */:
	                return 'Éµdir';
	            case 0 /* Injector */:
	                return 'Éµinj';
	            case 3 /* Pipe */:
	                return 'Éµpipe';
	        }
	        error("Unknown definition kind " + kind);
	        return '<unknown>';
	    };
	    ConstantPool.prototype.freshName = function () {
	        return this.uniqueName(CONSTANT_PREFIX);
	    };
	    ConstantPool.prototype.keyOf = function (expression) {
	        return expression.visitExpression(new KeyVisitor(), KEY_CONTEXT);
	    };
	    return ConstantPool;
	}());
	/**
	 * Visitor used to determine if 2 expressions are equivalent and can be shared in the
	 * `ConstantPool`.
	 *
	 * When the id (string) generated by the visitor is equal, expressions are considered equivalent.
	 */
	var KeyVisitor = /** @class */ (function () {
	    function KeyVisitor() {
	        this.visitWrappedNodeExpr = invalid;
	        this.visitWriteVarExpr = invalid;
	        this.visitWriteKeyExpr = invalid;
	        this.visitWritePropExpr = invalid;
	        this.visitInvokeMethodExpr = invalid;
	        this.visitInvokeFunctionExpr = invalid;
	        this.visitInstantiateExpr = invalid;
	        this.visitConditionalExpr = invalid;
	        this.visitNotExpr = invalid;
	        this.visitAssertNotNullExpr = invalid;
	        this.visitCastExpr = invalid;
	        this.visitFunctionExpr = invalid;
	        this.visitBinaryOperatorExpr = invalid;
	        this.visitReadPropExpr = invalid;
	        this.visitReadKeyExpr = invalid;
	        this.visitCommaExpr = invalid;
	        this.visitLocalizedString = invalid;
	    }
	    KeyVisitor.prototype.visitLiteralExpr = function (ast) {
	        return "" + (typeof ast.value === 'string' ? '"' + ast.value + '"' : ast.value);
	    };
	    KeyVisitor.prototype.visitLiteralArrayExpr = function (ast, context) {
	        var _this = this;
	        return "[" + ast.entries.map(function (entry) { return entry.visitExpression(_this, context); }).join(',') + "]";
	    };
	    KeyVisitor.prototype.visitLiteralMapExpr = function (ast, context) {
	        var _this = this;
	        var mapKey = function (entry) {
	            var quote = entry.quoted ? '"' : '';
	            return "" + quote + entry.key + quote;
	        };
	        var mapEntry = function (entry) {
	            return mapKey(entry) + ":" + entry.value.visitExpression(_this, context);
	        };
	        return "{" + ast.entries.map(mapEntry).join(',');
	    };
	    KeyVisitor.prototype.visitExternalExpr = function (ast) {
	        return ast.value.moduleName ? "EX:" + ast.value.moduleName + ":" + ast.value.name :
	            "EX:" + ast.value.runtime.name;
	    };
	    KeyVisitor.prototype.visitReadVarExpr = function (node) {
	        return "VAR:" + node.name;
	    };
	    KeyVisitor.prototype.visitTypeofExpr = function (node, context) {
	        return "TYPEOF:" + node.expr.visitExpression(this, context);
	    };
	    return KeyVisitor;
	}());
	function invalid(arg) {
	    throw new Error("Invalid state: Visitor " + this.constructor.name + " doesn't handle " + arg.constructor.name);
	}
	function isVariable(e) {
	    return e instanceof ReadVarExpr;
	}

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	var CORE = '@angular/core';
	var Identifiers = /** @class */ (function () {
	    function Identifiers() {
	    }
	    Identifiers.ANALYZE_FOR_ENTRY_COMPONENTS = {
	        name: 'ANALYZE_FOR_ENTRY_COMPONENTS',
	        moduleName: CORE,
	    };
	    Identifiers.ElementRef = { name: 'ElementRef', moduleName: CORE };
	    Identifiers.NgModuleRef = { name: 'NgModuleRef', moduleName: CORE };
	    Identifiers.ViewContainerRef = { name: 'ViewContainerRef', moduleName: CORE };
	    Identifiers.ChangeDetectorRef = {
	        name: 'ChangeDetectorRef',
	        moduleName: CORE,
	    };
	    Identifiers.QueryList = { name: 'QueryList', moduleName: CORE };
	    Identifiers.TemplateRef = { name: 'TemplateRef', moduleName: CORE };
	    Identifiers.Renderer2 = { name: 'Renderer2', moduleName: CORE };
	    Identifiers.CodegenComponentFactoryResolver = {
	        name: 'ÉµCodegenComponentFactoryResolver',
	        moduleName: CORE,
	    };
	    Identifiers.ComponentFactoryResolver = {
	        name: 'ComponentFactoryResolver',
	        moduleName: CORE,
	    };
	    Identifiers.ComponentFactory = { name: 'ComponentFactory', moduleName: CORE };
	    Identifiers.ComponentRef = { name: 'ComponentRef', moduleName: CORE };
	    Identifiers.NgModuleFactory = { name: 'NgModuleFactory', moduleName: CORE };
	    Identifiers.createModuleFactory = {
	        name: 'Éµcmf',
	        moduleName: CORE,
	    };
	    Identifiers.moduleDef = {
	        name: 'Éµmod',
	        moduleName: CORE,
	    };
	    Identifiers.moduleProviderDef = {
	        name: 'Éµmpd',
	        moduleName: CORE,
	    };
	    Identifiers.RegisterModuleFactoryFn = {
	        name: 'ÉµregisterModuleFactory',
	        moduleName: CORE,
	    };
	    Identifiers.inject = { name: 'ÉµÉµinject', moduleName: CORE };
	    Identifiers.directiveInject = { name: 'ÉµÉµdirectiveInject', moduleName: CORE };
	    Identifiers.INJECTOR = { name: 'INJECTOR', moduleName: CORE };
	    Identifiers.Injector = { name: 'Injector', moduleName: CORE };
	    Identifiers.ÉµÉµdefineInjectable = { name: 'ÉµÉµdefineInjectable', moduleName: CORE };
	    Identifiers.InjectableDef = { name: 'ÉµÉµInjectableDef', moduleName: CORE };
	    Identifiers.ViewEncapsulation = {
	        name: 'ViewEncapsulation',
	        moduleName: CORE,
	    };
	    Identifiers.ChangeDetectionStrategy = {
	        name: 'ChangeDetectionStrategy',
	        moduleName: CORE,
	    };
	    Identifiers.SecurityContext = {
	        name: 'SecurityContext',
	        moduleName: CORE,
	    };
	    Identifiers.LOCALE_ID = { name: 'LOCALE_ID', moduleName: CORE };
	    Identifiers.TRANSLATIONS_FORMAT = {
	        name: 'TRANSLATIONS_FORMAT',
	        moduleName: CORE,
	    };
	    Identifiers.inlineInterpolate = {
	        name: 'ÉµinlineInterpolate',
	        moduleName: CORE,
	    };
	    Identifiers.interpolate = { name: 'Éµinterpolate', moduleName: CORE };
	    Identifiers.EMPTY_ARRAY = { name: 'ÉµEMPTY_ARRAY', moduleName: CORE };
	    Identifiers.EMPTY_MAP = { name: 'ÉµEMPTY_MAP', moduleName: CORE };
	    Identifiers.Renderer = { name: 'Renderer', moduleName: CORE };
	    Identifiers.viewDef = { name: 'Éµvid', moduleName: CORE };
	    Identifiers.elementDef = { name: 'Éµeld', moduleName: CORE };
	    Identifiers.anchorDef = { name: 'Éµand', moduleName: CORE };
	    Identifiers.textDef = { name: 'Éµted', moduleName: CORE };
	    Identifiers.directiveDef = { name: 'Éµdid', moduleName: CORE };
	    Identifiers.providerDef = { name: 'Éµprd', moduleName: CORE };
	    Identifiers.queryDef = { name: 'Éµqud', moduleName: CORE };
	    Identifiers.pureArrayDef = { name: 'Éµpad', moduleName: CORE };
	    Identifiers.pureObjectDef = { name: 'Éµpod', moduleName: CORE };
	    Identifiers.purePipeDef = { name: 'Éµppd', moduleName: CORE };
	    Identifiers.pipeDef = { name: 'Éµpid', moduleName: CORE };
	    Identifiers.nodeValue = { name: 'Éµnov', moduleName: CORE };
	    Identifiers.ngContentDef = { name: 'Éµncd', moduleName: CORE };
	    Identifiers.unwrapValue = { name: 'Éµunv', moduleName: CORE };
	    Identifiers.createRendererType2 = { name: 'Éµcrt', moduleName: CORE };
	    // type only
	    Identifiers.RendererType2 = {
	        name: 'RendererType2',
	        moduleName: CORE,
	    };
	    // type only
	    Identifiers.ViewDefinition = {
	        name: 'ÉµViewDefinition',
	        moduleName: CORE,
	    };
	    Identifiers.createComponentFactory = { name: 'Éµccf', moduleName: CORE };
	    Identifiers.setClassMetadata = { name: 'ÉµsetClassMetadata', moduleName: CORE };
	    return Identifiers;
	}());
	function createTokenForReference(reference) {
	    return { identifier: { reference: reference } };
	}
	function createTokenForExternalReference(reflector, reference) {
	    return createTokenForReference(reflector.resolveExternalReference(reference));
	}

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * A token representing the a reference to a static type.
	 *
	 * This token is unique for a filePath and name and can be used as a hash table key.
	 */
	var StaticSymbol = /** @class */ (function () {
	    function StaticSymbol(filePath, name, members) {
	        this.filePath = filePath;
	        this.name = name;
	        this.members = members;
	    }
	    StaticSymbol.prototype.assertNoMembers = function () {
	        if (this.members.length) {
	            throw new Error("Illegal state: symbol without members expected, but got " + JSON.stringify(this) + ".");
	        }
	    };
	    return StaticSymbol;
	}());
	/**
	 * A cache of static symbol used by the StaticReflector to return the same symbol for the
	 * same symbol values.
	 */
	var StaticSymbolCache = /** @class */ (function () {
	    function StaticSymbolCache() {
	        this.cache = new Map();
	    }
	    StaticSymbolCache.prototype.get = function (declarationFile, name, members) {
	        members = members || [];
	        var memberSuffix = members.length ? "." + members.join('.') : '';
	        var key = "\"" + declarationFile + "\"." + name + memberSuffix;
	        var result = this.cache.get(key);
	        if (!result) {
	            result = new StaticSymbol(declarationFile, name, members);
	            this.cache.set(key, result);
	        }
	        return result;
	    };
	    return StaticSymbolCache;
	}());

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	// group 0: "[prop] or (event) or @trigger"
	// group 1: "prop" from "[prop]"
	// group 2: "event" from "(event)"
	// group 3: "@trigger" from "@trigger"
	var HOST_REG_EXP = /^(?:(?:\[([^\]]+)\])|(?:\(([^\)]+)\)))|(\@[-\w]+)$/;
	function sanitizeIdentifier(name) {
	    return name.replace(/\W/g, '_');
	}
	var _anonymousTypeIndex = 0;
	function identifierName(compileIdentifier) {
	    if (!compileIdentifier || !compileIdentifier.reference) {
	        return null;
	    }
	    var ref = compileIdentifier.reference;
	    if (ref instanceof StaticSymbol) {
	        return ref.name;
	    }
	    if (ref['__anonymousType']) {
	        return ref['__anonymousType'];
	    }
	    var identifier = stringify(ref);
	    if (identifier.indexOf('(') >= 0) {
	        // case: anonymous functions!
	        identifier = "anonymous_" + _anonymousTypeIndex++;
	        ref['__anonymousType'] = identifier;
	    }
	    else {
	        identifier = sanitizeIdentifier(identifier);
	    }
	    return identifier;
	}
	function identifierModuleUrl(compileIdentifier) {
	    var ref = compileIdentifier.reference;
	    if (ref instanceof StaticSymbol) {
	        return ref.filePath;
	    }
	    // Runtime type
	    return "./" + stringify(ref);
	}
	function viewClassName(compType, embeddedTemplateIndex) {
	    return "View_" + identifierName({ reference: compType }) + "_" + embeddedTemplateIndex;
	}
	function rendererTypeName(compType) {
	    return "RenderType_" + identifierName({ reference: compType });
	}
	function hostViewClassName(compType) {
	    return "HostView_" + identifierName({ reference: compType });
	}
	function componentFactoryName(compType) {
	    return identifierName({ reference: compType }) + "NgFactory";
	}
	var CompileSummaryKind;
	(function (CompileSummaryKind) {
	    CompileSummaryKind[CompileSummaryKind["Pipe"] = 0] = "Pipe";
	    CompileSummaryKind[CompileSummaryKind["Directive"] = 1] = "Directive";
	    CompileSummaryKind[CompileSummaryKind["NgModule"] = 2] = "NgModule";
	    CompileSummaryKind[CompileSummaryKind["Injectable"] = 3] = "Injectable";
	})(CompileSummaryKind || (CompileSummaryKind = {}));
	function tokenName(token) {
	    return token.value != null ? sanitizeIdentifier(token.value) : identifierName(token.identifier);
	}
	function tokenReference(token) {
	    if (token.identifier != null) {
	        return token.identifier.reference;
	    }
	    else {
	        return token.value;
	    }
	}
	/**
	 * Metadata about a stylesheet
	 */
	var CompileStylesheetMetadata = /** @class */ (function () {
	    function CompileStylesheetMetadata(_a) {
	        var _b = _a === void 0 ? {} : _a, moduleUrl = _b.moduleUrl, styles = _b.styles, styleUrls = _b.styleUrls;
	        this.moduleUrl = moduleUrl || null;
	        this.styles = _normalizeArray(styles);
	        this.styleUrls = _normalizeArray(styleUrls);
	    }
	    return CompileStylesheetMetadata;
	}());
	/**
	 * Metadata regarding compilation of a template.
	 */
	var CompileTemplateMetadata = /** @class */ (function () {
	    function CompileTemplateMetadata(_a) {
	        var encapsulation = _a.encapsulation, template = _a.template, templateUrl = _a.templateUrl, htmlAst = _a.htmlAst, styles = _a.styles, styleUrls = _a.styleUrls, externalStylesheets = _a.externalStylesheets, animations = _a.animations, ngContentSelectors = _a.ngContentSelectors, interpolation = _a.interpolation, isInline = _a.isInline, preserveWhitespaces = _a.preserveWhitespaces;
	        this.encapsulation = encapsulation;
	        this.template = template;
	        this.templateUrl = templateUrl;
	        this.htmlAst = htmlAst;
	        this.styles = _normalizeArray(styles);
	        this.styleUrls = _normalizeArray(styleUrls);
	        this.externalStylesheets = _normalizeArray(externalStylesheets);
	        this.animations = animations ? flatten(animations) : [];
	        this.ngContentSelectors = ngContentSelectors || [];
	        if (interpolation && interpolation.length != 2) {
	            throw new Error("'interpolation' should have a start and an end symbol.");
	        }
	        this.interpolation = interpolation;
	        this.isInline = isInline;
	        this.preserveWhitespaces = preserveWhitespaces;
	    }
	    CompileTemplateMetadata.prototype.toSummary = function () {
	        return {
	            ngContentSelectors: this.ngContentSelectors,
	            encapsulation: this.encapsulation,
	            styles: this.styles,
	            animations: this.animations
	        };
	    };
	    return CompileTemplateMetadata;
	}());
	/**
	 * Metadata regarding compilation of a directive.
	 */
	var CompileDirectiveMetadata = /** @class */ (function () {
	    function CompileDirectiveMetadata(_a) {
	        var isHost = _a.isHost, type = _a.type, isComponent = _a.isComponent, selector = _a.selector, exportAs = _a.exportAs, changeDetection = _a.changeDetection, inputs = _a.inputs, outputs = _a.outputs, hostListeners = _a.hostListeners, hostProperties = _a.hostProperties, hostAttributes = _a.hostAttributes, providers = _a.providers, viewProviders = _a.viewProviders, queries = _a.queries, guards = _a.guards, viewQueries = _a.viewQueries, entryComponents = _a.entryComponents, template = _a.template, componentViewType = _a.componentViewType, rendererType = _a.rendererType, componentFactory = _a.componentFactory;
	        this.isHost = !!isHost;
	        this.type = type;
	        this.isComponent = isComponent;
	        this.selector = selector;
	        this.exportAs = exportAs;
	        this.changeDetection = changeDetection;
	        this.inputs = inputs;
	        this.outputs = outputs;
	        this.hostListeners = hostListeners;
	        this.hostProperties = hostProperties;
	        this.hostAttributes = hostAttributes;
	        this.providers = _normalizeArray(providers);
	        this.viewProviders = _normalizeArray(viewProviders);
	        this.queries = _normalizeArray(queries);
	        this.guards = guards;
	        this.viewQueries = _normalizeArray(viewQueries);
	        this.entryComponents = _normalizeArray(entryComponents);
	        this.template = template;
	        this.componentViewType = componentViewType;
	        this.rendererType = rendererType;
	        this.componentFactory = componentFactory;
	    }
	    CompileDirectiveMetadata.create = function (_a) {
	        var isHost = _a.isHost, type = _a.type, isComponent = _a.isComponent, selector = _a.selector, exportAs = _a.exportAs, changeDetection = _a.changeDetection, inputs = _a.inputs, outputs = _a.outputs, host = _a.host, providers = _a.providers, viewProviders = _a.viewProviders, queries = _a.queries, guards = _a.guards, viewQueries = _a.viewQueries, entryComponents = _a.entryComponents, template = _a.template, componentViewType = _a.componentViewType, rendererType = _a.rendererType, componentFactory = _a.componentFactory;
	        var hostListeners = {};
	        var hostProperties = {};
	        var hostAttributes = {};
	        if (host != null) {
	            Object.keys(host).forEach(function (key) {
	                var value = host[key];
	                var matches = key.match(HOST_REG_EXP);
	                if (matches === null) {
	                    hostAttributes[key] = value;
	                }
	                else if (matches[1] != null) {
	                    hostProperties[matches[1]] = value;
	                }
	                else if (matches[2] != null) {
	                    hostListeners[matches[2]] = value;
	                }
	            });
	        }
	        var inputsMap = {};
	        if (inputs != null) {
	            inputs.forEach(function (bindConfig) {
	                // canonical syntax: `dirProp: elProp`
	                // if there is no `:`, use dirProp = elProp
	                var parts = splitAtColon(bindConfig, [bindConfig, bindConfig]);
	                inputsMap[parts[0]] = parts[1];
	            });
	        }
	        var outputsMap = {};
	        if (outputs != null) {
	            outputs.forEach(function (bindConfig) {
	                // canonical syntax: `dirProp: elProp`
	                // if there is no `:`, use dirProp = elProp
	                var parts = splitAtColon(bindConfig, [bindConfig, bindConfig]);
	                outputsMap[parts[0]] = parts[1];
	            });
	        }
	        return new CompileDirectiveMetadata({
	            isHost: isHost,
	            type: type,
	            isComponent: !!isComponent,
	            selector: selector,
	            exportAs: exportAs,
	            changeDetection: changeDetection,
	            inputs: inputsMap,
	            outputs: outputsMap,
	            hostListeners: hostListeners,
	            hostProperties: hostProperties,
	            hostAttributes: hostAttributes,
	            providers: providers,
	            viewProviders: viewProviders,
	            queries: queries,
	            guards: guards,
	            viewQueries: viewQueries,
	            entryComponents: entryComponents,
	            template: template,
	            componentViewType: componentViewType,
	            rendererType: rendererType,
	            componentFactory: componentFactory,
	        });
	    };
	    CompileDirectiveMetadata.prototype.toSummary = function () {
	        return {
	            summaryKind: CompileSummaryKind.Directive,
	            type: this.type,
	            isComponent: this.isComponent,
	            selector: this.selector,
	            exportAs: this.exportAs,
	            inputs: this.inputs,
	            outputs: this.outputs,
	            hostListeners: this.hostListeners,
	            hostProperties: this.hostProperties,
	            hostAttributes: this.hostAttributes,
	            providers: this.providers,
	            viewProviders: this.viewProviders,
	            queries: this.queries,
	            guards: this.guards,
	            viewQueries: this.viewQueries,
	            entryComponents: this.entryComponents,
	            changeDetection: this.changeDetection,
	            template: this.template && this.template.toSummary(),
	            componentViewType: this.componentViewType,
	            rendererType: this.rendererType,
	            componentFactory: this.componentFactory
	        };
	    };
	    return CompileDirectiveMetadata;
	}());
	var CompilePipeMetadata = /** @class */ (function () {
	    function CompilePipeMetadata(_a) {
	        var type = _a.type, name = _a.name, pure = _a.pure;
	        this.type = type;
	        this.name = name;
	        this.pure = !!pure;
	    }
	    CompilePipeMetadata.prototype.toSummary = function () {
	        return {
	            summaryKind: CompileSummaryKind.Pipe,
	            type: this.type,
	            name: this.name,
	            pure: this.pure
	        };
	    };
	    return CompilePipeMetadata;
	}());
	/**
	 * Metadata regarding compilation of a module.
	 */
	var CompileNgModuleMetadata = /** @class */ (function () {
	    function CompileNgModuleMetadata(_a) {
	        var type = _a.type, providers = _a.providers, declaredDirectives = _a.declaredDirectives, exportedDirectives = _a.exportedDirectives, declaredPipes = _a.declaredPipes, exportedPipes = _a.exportedPipes, entryComponents = _a.entryComponents, bootstrapComponents = _a.bootstrapComponents, importedModules = _a.importedModules, exportedModules = _a.exportedModules, schemas = _a.schemas, transitiveModule = _a.transitiveModule, id = _a.id;
	        this.type = type || null;
	        this.declaredDirectives = _normalizeArray(declaredDirectives);
	        this.exportedDirectives = _normalizeArray(exportedDirectives);
	        this.declaredPipes = _normalizeArray(declaredPipes);
	        this.exportedPipes = _normalizeArray(exportedPipes);
	        this.providers = _normalizeArray(providers);
	        this.entryComponents = _normalizeArray(entryComponents);
	        this.bootstrapComponents = _normalizeArray(bootstrapComponents);
	        this.importedModules = _normalizeArray(importedModules);
	        this.exportedModules = _normalizeArray(exportedModules);
	        this.schemas = _normalizeArray(schemas);
	        this.id = id || null;
	        this.transitiveModule = transitiveModule || null;
	    }
	    CompileNgModuleMetadata.prototype.toSummary = function () {
	        var module = this.transitiveModule;
	        return {
	            summaryKind: CompileSummaryKind.NgModule,
	            type: this.type,
	            entryComponents: module.entryComponents,
	            providers: module.providers,
	            modules: module.modules,
	            exportedDirectives: module.exportedDirectives,
	            exportedPipes: module.exportedPipes
	        };
	    };
	    return CompileNgModuleMetadata;
	}());
	var TransitiveCompileNgModuleMetadata = /** @class */ (function () {
	    function TransitiveCompileNgModuleMetadata() {
	        this.directivesSet = new Set();
	        this.directives = [];
	        this.exportedDirectivesSet = new Set();
	        this.exportedDirectives = [];
	        this.pipesSet = new Set();
	        this.pipes = [];
	        this.exportedPipesSet = new Set();
	        this.exportedPipes = [];
	        this.modulesSet = new Set();
	        this.modules = [];
	        this.entryComponentsSet = new Set();
	        this.entryComponents = [];
	        this.providers = [];
	    }
	    TransitiveCompileNgModuleMetadata.prototype.addProvider = function (provider, module) {
	        this.providers.push({ provider: provider, module: module });
	    };
	    TransitiveCompileNgModuleMetadata.prototype.addDirective = function (id) {
	        if (!this.directivesSet.has(id.reference)) {
	            this.directivesSet.add(id.reference);
	            this.directives.push(id);
	        }
	    };
	    TransitiveCompileNgModuleMetadata.prototype.addExportedDirective = function (id) {
	        if (!this.exportedDirectivesSet.has(id.reference)) {
	            this.exportedDirectivesSet.add(id.reference);
	            this.exportedDirectives.push(id);
	        }
	    };
	    TransitiveCompileNgModuleMetadata.prototype.addPipe = function (id) {
	        if (!this.pipesSet.has(id.reference)) {
	            this.pipesSet.add(id.reference);
	            this.pipes.push(id);
	        }
	    };
	    TransitiveCompileNgModuleMetadata.prototype.addExportedPipe = function (id) {
	        if (!this.exportedPipesSet.has(id.reference)) {
	            this.exportedPipesSet.add(id.reference);
	            this.exportedPipes.push(id);
	        }
	    };
	    TransitiveCompileNgModuleMetadata.prototype.addModule = function (id) {
	        if (!this.modulesSet.has(id.reference)) {
	            this.modulesSet.add(id.reference);
	            this.modules.push(id);
	        }
	    };
	    TransitiveCompileNgModuleMetadata.prototype.addEntryComponent = function (ec) {
	        if (!this.entryComponentsSet.has(ec.componentType)) {
	            this.entryComponentsSet.add(ec.componentType);
	            this.entryComponents.push(ec);
	        }
	    };
	    return TransitiveCompileNgModuleMetadata;
	}());
	function _normalizeArray(obj) {
	    return obj || [];
	}
	var ProviderMeta = /** @class */ (function () {
	    function ProviderMeta(token, _a) {
	        var useClass = _a.useClass, useValue = _a.useValue, useExisting = _a.useExisting, useFactory = _a.useFactory, deps = _a.deps, multi = _a.multi;
	        this.token = token;
	        this.useClass = useClass || null;
	        this.useValue = useValue;
	        this.useExisting = useExisting;
	        this.useFactory = useFactory || null;
	        this.dependencies = deps || null;
	        this.multi = !!multi;
	    }
	    return ProviderMeta;
	}());
	function flatten(list) {
	    return list.reduce(function (flat, item) {
	        var flatItem = Array.isArray(item) ? flatten(item) : item;
	        return flat.concat(flatItem);
	    }, []);
	}
	function jitSourceUrl(url) {
	    // Note: We need 3 "/" so that ng shows up as a separate domain
	    // in the chrome dev tools.
	    return url.replace(/(\w+:\/\/[\w:-]+)?(\/+)?/, 'ng:///');
	}
	function templateSourceUrl(ngModuleType, compMeta, templateMeta) {
	    var url;
	    if (templateMeta.isInline) {
	        if (compMeta.type.reference instanceof StaticSymbol) {
	            // Note: a .ts file might contain multiple components with inline templates,
	            // so we need to give them unique urls, as these will be used for sourcemaps.
	            url = compMeta.type.reference.filePath + "." + compMeta.type.reference.name + ".html";
	        }
	        else {
	            url = identifierName(ngModuleType) + "/" + identifierName(compMeta.type) + ".html";
	        }
	    }
	    else {
	        url = templateMeta.templateUrl;
	    }
	    return compMeta.type.reference instanceof StaticSymbol ? url : jitSourceUrl(url);
	}
	function sharedStylesheetJitUrl(meta, id) {
	    var pathParts = meta.moduleUrl.split(/\/\\/g);
	    var baseName = pathParts[pathParts.length - 1];
	    return jitSourceUrl("css/" + id + baseName + ".ngstyle.js");
	}
	function ngModuleJitUrl(moduleMeta) {
	    return jitSourceUrl(identifierName(moduleMeta.type) + "/module.ngfactory.js");
	}
	function templateJitUrl(ngModuleType, compMeta) {
	    return jitSourceUrl(identifierName(ngModuleType) + "/" + identifierName(compMeta.type) + ".ngfactory.js");
	}

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	var CORE$1 = '@angular/core';
	var Identifiers$1 = /** @class */ (function () {
	    function Identifiers() {
	    }
	    /* Methods */
	    Identifiers.NEW_METHOD = 'factory';
	    Identifiers.TRANSFORM_METHOD = 'transform';
	    Identifiers.PATCH_DEPS = 'patchedDeps';
	    /* Instructions */
	    Identifiers.namespaceHTML = { name: 'ÉµÉµnamespaceHTML', moduleName: CORE$1 };
	    Identifiers.namespaceMathML = { name: 'ÉµÉµnamespaceMathML', moduleName: CORE$1 };
	    Identifiers.namespaceSVG = { name: 'ÉµÉµnamespaceSVG', moduleName: CORE$1 };
	    Identifiers.element = { name: 'ÉµÉµelement', moduleName: CORE$1 };
	    Identifiers.elementStart = { name: 'ÉµÉµelementStart', moduleName: CORE$1 };
	    Identifiers.elementEnd = { name: 'ÉµÉµelementEnd', moduleName: CORE$1 };
	    Identifiers.select = { name: 'ÉµÉµselect', moduleName: CORE$1 };
	    Identifiers.advance = { name: 'ÉµÉµadvance', moduleName: CORE$1 };
	    Identifiers.updateSyntheticHostBinding = { name: 'ÉµÉµupdateSyntheticHostBinding', moduleName: CORE$1 };
	    Identifiers.componentHostSyntheticListener = { name: 'ÉµÉµcomponentHostSyntheticListener', moduleName: CORE$1 };
	    Identifiers.attribute = { name: 'ÉµÉµattribute', moduleName: CORE$1 };
	    Identifiers.attributeInterpolate1 = { name: 'ÉµÉµattributeInterpolate1', moduleName: CORE$1 };
	    Identifiers.attributeInterpolate2 = { name: 'ÉµÉµattributeInterpolate2', moduleName: CORE$1 };
	    Identifiers.attributeInterpolate3 = { name: 'ÉµÉµattributeInterpolate3', moduleName: CORE$1 };
	    Identifiers.attributeInterpolate4 = { name: 'ÉµÉµattributeInterpolate4', moduleName: CORE$1 };
	    Identifiers.attributeInterpolate5 = { name: 'ÉµÉµattributeInterpolate5', moduleName: CORE$1 };
	    Identifiers.attributeInterpolate6 = { name: 'ÉµÉµattributeInterpolate6', moduleName: CORE$1 };
	    Identifiers.attributeInterpolate7 = { name: 'ÉµÉµattributeInterpolate7', moduleName: CORE$1 };
	    Identifiers.attributeInterpolate8 = { name: 'ÉµÉµattributeInterpolate8', moduleName: CORE$1 };
	    Identifiers.attributeInterpolateV = { name: 'ÉµÉµattributeInterpolateV', moduleName: CORE$1 };
	    Identifiers.classProp = { name: 'ÉµÉµclassProp', moduleName: CORE$1 };
	    Identifiers.elementContainerStart = { name: 'ÉµÉµelementContainerStart', moduleName: CORE$1 };
	    Identifiers.elementContainerEnd = { name: 'ÉµÉµelementContainerEnd', moduleName: CORE$1 };
	    Identifiers.elementContainer = { name: 'ÉµÉµelementContainer', moduleName: CORE$1 };
	    Identifiers.styleMap = { name: 'ÉµÉµstyleMap', moduleName: CORE$1 };
	    Identifiers.styleMapInterpolate1 = { name: 'ÉµÉµstyleMapInterpolate1', moduleName: CORE$1 };
	    Identifiers.styleMapInterpolate2 = { name: 'ÉµÉµstyleMapInterpolate2', moduleName: CORE$1 };
	    Identifiers.styleMapInterpolate3 = { name: 'ÉµÉµstyleMapInterpolate3', moduleName: CORE$1 };
	    Identifiers.styleMapInterpolate4 = { name: 'ÉµÉµstyleMapInterpolate4', moduleName: CORE$1 };
	    Identifiers.styleMapInterpolate5 = { name: 'ÉµÉµstyleMapInterpolate5', moduleName: CORE$1 };
	    Identifiers.styleMapInterpolate6 = { name: 'ÉµÉµstyleMapInterpolate6', moduleName: CORE$1 };
	    Identifiers.styleMapInterpolate7 = { name: 'ÉµÉµstyleMapInterpolate7', moduleName: CORE$1 };
	    Identifiers.styleMapInterpolate8 = { name: 'ÉµÉµstyleMapInterpolate8', moduleName: CORE$1 };
	    Identifiers.styleMapInterpolateV = { name: 'ÉµÉµstyleMapInterpolateV', moduleName: CORE$1 };
	    Identifiers.classMap = { name: 'ÉµÉµclassMap', moduleName: CORE$1 };
	    Identifiers.classMapInterpolate1 = { name: 'ÉµÉµclassMapInterpolate1', moduleName: CORE$1 };
	    Identifiers.classMapInterpolate2 = { name: 'ÉµÉµclassMapInterpolate2', moduleName: CORE$1 };
	    Identifiers.classMapInterpolate3 = { name: 'ÉµÉµclassMapInterpolate3', moduleName: CORE$1 };
	    Identifiers.classMapInterpolate4 = { name: 'ÉµÉµclassMapInterpolate4', moduleName: CORE$1 };
	    Identifiers.classMapInterpolate5 = { name: 'ÉµÉµclassMapInterpolate5', moduleName: CORE$1 };
	    Identifiers.classMapInterpolate6 = { name: 'ÉµÉµclassMapInterpolate6', moduleName: CORE$1 };
	    Identifiers.classMapInterpolate7 = { name: 'ÉµÉµclassMapInterpolate7', moduleName: CORE$1 };
	    Identifiers.classMapInterpolate8 = { name: 'ÉµÉµclassMapInterpolate8', moduleName: CORE$1 };
	    Identifiers.classMapInterpolateV = { name: 'ÉµÉµclassMapInterpolateV', moduleName: CORE$1 };
	    Identifiers.styleProp = { name: 'ÉµÉµstyleProp', moduleName: CORE$1 };
	    Identifiers.stylePropInterpolate1 = { name: 'ÉµÉµstylePropInterpolate1', moduleName: CORE$1 };
	    Identifiers.stylePropInterpolate2 = { name: 'ÉµÉµstylePropInterpolate2', moduleName: CORE$1 };
	    Identifiers.stylePropInterpolate3 = { name: 'ÉµÉµstylePropInterpolate3', moduleName: CORE$1 };
	    Identifiers.stylePropInterpolate4 = { name: 'ÉµÉµstylePropInterpolate4', moduleName: CORE$1 };
	    Identifiers.stylePropInterpolate5 = { name: 'ÉµÉµstylePropInterpolate5', moduleName: CORE$1 };
	    Identifiers.stylePropInterpolate6 = { name: 'ÉµÉµstylePropInterpolate6', moduleName: CORE$1 };
	    Identifiers.stylePropInterpolate7 = { name: 'ÉµÉµstylePropInterpolate7', moduleName: CORE$1 };
	    Identifiers.stylePropInterpolate8 = { name: 'ÉµÉµstylePropInterpolate8', moduleName: CORE$1 };
	    Identifiers.stylePropInterpolateV = { name: 'ÉµÉµstylePropInterpolateV', moduleName: CORE$1 };
	    Identifiers.containerCreate = { name: 'ÉµÉµcontainer', moduleName: CORE$1 };
	    Identifiers.nextContext = { name: 'ÉµÉµnextContext', moduleName: CORE$1 };
	    Identifiers.templateCreate = { name: 'ÉµÉµtemplate', moduleName: CORE$1 };
	    Identifiers.text = { name: 'ÉµÉµtext', moduleName: CORE$1 };
	    Identifiers.enableBindings = { name: 'ÉµÉµenableBindings', moduleName: CORE$1 };
	    Identifiers.disableBindings = { name: 'ÉµÉµdisableBindings', moduleName: CORE$1 };
	    Identifiers.getCurrentView = { name: 'ÉµÉµgetCurrentView', moduleName: CORE$1 };
	    Identifiers.textInterpolate = { name: 'ÉµÉµtextInterpolate', moduleName: CORE$1 };
	    Identifiers.textInterpolate1 = { name: 'ÉµÉµtextInterpolate1', moduleName: CORE$1 };
	    Identifiers.textInterpolate2 = { name: 'ÉµÉµtextInterpolate2', moduleName: CORE$1 };
	    Identifiers.textInterpolate3 = { name: 'ÉµÉµtextInterpolate3', moduleName: CORE$1 };
	    Identifiers.textInterpolate4 = { name: 'ÉµÉµtextInterpolate4', moduleName: CORE$1 };
	    Identifiers.textInterpolate5 = { name: 'ÉµÉµtextInterpolate5', moduleName: CORE$1 };
	    Identifiers.textInterpolate6 = { name: 'ÉµÉµtextInterpolate6', moduleName: CORE$1 };
	    Identifiers.textInterpolate7 = { name: 'ÉµÉµtextInterpolate7', moduleName: CORE$1 };
	    Identifiers.textInterpolate8 = { name: 'ÉµÉµtextInterpolate8', moduleName: CORE$1 };
	    Identifiers.textInterpolateV = { name: 'ÉµÉµtextInterpolateV', moduleName: CORE$1 };
	    Identifiers.restoreView = { name: 'ÉµÉµrestoreView', moduleName: CORE$1 };
	    Identifiers.pureFunction0 = { name: 'ÉµÉµpureFunction0', moduleName: CORE$1 };
	    Identifiers.pureFunction1 = { name: 'ÉµÉµpureFunction1', moduleName: CORE$1 };
	    Identifiers.pureFunction2 = { name: 'ÉµÉµpureFunction2', moduleName: CORE$1 };
	    Identifiers.pureFunction3 = { name: 'ÉµÉµpureFunction3', moduleName: CORE$1 };
	    Identifiers.pureFunction4 = { name: 'ÉµÉµpureFunction4', moduleName: CORE$1 };
	    Identifiers.pureFunction5 = { name: 'ÉµÉµpureFunction5', moduleName: CORE$1 };
	    Identifiers.pureFunction6 = { name: 'ÉµÉµpureFunction6', moduleName: CORE$1 };
	    Identifiers.pureFunction7 = { name: 'ÉµÉµpureFunction7', moduleName: CORE$1 };
	    Identifiers.pureFunction8 = { name: 'ÉµÉµpureFunction8', moduleName: CORE$1 };
	    Identifiers.pureFunctionV = { name: 'ÉµÉµpureFunctionV', moduleName: CORE$1 };
	    Identifiers.pipeBind1 = { name: 'ÉµÉµpipeBind1', moduleName: CORE$1 };
	    Identifiers.pipeBind2 = { name: 'ÉµÉµpipeBind2', moduleName: CORE$1 };
	    Identifiers.pipeBind3 = { name: 'ÉµÉµpipeBind3', moduleName: CORE$1 };
	    Identifiers.pipeBind4 = { name: 'ÉµÉµpipeBind4', moduleName: CORE$1 };
	    Identifiers.pipeBindV = { name: 'ÉµÉµpipeBindV', moduleName: CORE$1 };
	    Identifiers.hostProperty = { name: 'ÉµÉµhostProperty', moduleName: CORE$1 };
	    Identifiers.property = { name: 'ÉµÉµproperty', moduleName: CORE$1 };
	    Identifiers.propertyInterpolate = { name: 'ÉµÉµpropertyInterpolate', moduleName: CORE$1 };
	    Identifiers.propertyInterpolate1 = { name: 'ÉµÉµpropertyInterpolate1', moduleName: CORE$1 };
	    Identifiers.propertyInterpolate2 = { name: 'ÉµÉµpropertyInterpolate2', moduleName: CORE$1 };
	    Identifiers.propertyInterpolate3 = { name: 'ÉµÉµpropertyInterpolate3', moduleName: CORE$1 };
	    Identifiers.propertyInterpolate4 = { name: 'ÉµÉµpropertyInterpolate4', moduleName: CORE$1 };
	    Identifiers.propertyInterpolate5 = { name: 'ÉµÉµpropertyInterpolate5', moduleName: CORE$1 };
	    Identifiers.propertyInterpolate6 = { name: 'ÉµÉµpropertyInterpolate6', moduleName: CORE$1 };
	    Identifiers.propertyInterpolate7 = { name: 'ÉµÉµpropertyInterpolate7', moduleName: CORE$1 };
	    Identifiers.propertyInterpolate8 = { name: 'ÉµÉµpropertyInterpolate8', moduleName: CORE$1 };
	    Identifiers.propertyInterpolateV = { name: 'ÉµÉµpropertyInterpolateV', moduleName: CORE$1 };
	    Identifiers.i18n = { name: 'ÉµÉµi18n', moduleName: CORE$1 };
	    Identifiers.i18nAttributes = { name: 'ÉµÉµi18nAttributes', moduleName: CORE$1 };
	    Identifiers.i18nExp = { name: 'ÉµÉµi18nExp', moduleName: CORE$1 };
	    Identifiers.i18nStart = { name: 'ÉµÉµi18nStart', moduleName: CORE$1 };
	    Identifiers.i18nEnd = { name: 'ÉµÉµi18nEnd', moduleName: CORE$1 };
	    Identifiers.i18nApply = { name: 'ÉµÉµi18nApply', moduleName: CORE$1 };
	    Identifiers.i18nPostprocess = { name: 'ÉµÉµi18nPostprocess', moduleName: CORE$1 };
	    Identifiers.pipe = { name: 'ÉµÉµpipe', moduleName: CORE$1 };
	    Identifiers.projection = { name: 'ÉµÉµprojection', moduleName: CORE$1 };
	    Identifiers.projectionDef = { name: 'ÉµÉµprojectionDef', moduleName: CORE$1 };
	    Identifiers.reference = { name: 'ÉµÉµreference', moduleName: CORE$1 };
	    Identifiers.inject = { name: 'ÉµÉµinject', moduleName: CORE$1 };
	    Identifiers.injectAttribute = { name: 'ÉµÉµinjectAttribute', moduleName: CORE$1 };
	    Identifiers.injectPipeChangeDetectorRef = { name: 'ÉµÉµinjectPipeChangeDetectorRef', moduleName: CORE$1 };
	    Identifiers.directiveInject = { name: 'ÉµÉµdirectiveInject', moduleName: CORE$1 };
	    Identifiers.invalidFactory = { name: 'ÉµÉµinvalidFactory', moduleName: CORE$1 };
	    Identifiers.invalidFactoryDep = { name: 'ÉµÉµinvalidFactoryDep', moduleName: CORE$1 };
	    Identifiers.templateRefExtractor = { name: 'ÉµÉµtemplateRefExtractor', moduleName: CORE$1 };
	    Identifiers.resolveWindow = { name: 'ÉµÉµresolveWindow', moduleName: CORE$1 };
	    Identifiers.resolveDocument = { name: 'ÉµÉµresolveDocument', moduleName: CORE$1 };
	    Identifiers.resolveBody = { name: 'ÉµÉµresolveBody', moduleName: CORE$1 };
	    Identifiers.defineComponent = { name: 'ÉµÉµdefineComponent', moduleName: CORE$1 };
	    Identifiers.setComponentScope = { name: 'ÉµÉµsetComponentScope', moduleName: CORE$1 };
	    Identifiers.ComponentDefWithMeta = {
	        name: 'ÉµÉµComponentDefWithMeta',
	        moduleName: CORE$1,
	    };
	    Identifiers.FactoryDef = {
	        name: 'ÉµÉµFactoryDef',
	        moduleName: CORE$1,
	    };
	    Identifiers.defineDirective = {
	        name: 'ÉµÉµdefineDirective',
	        moduleName: CORE$1,
	    };
	    Identifiers.DirectiveDefWithMeta = {
	        name: 'ÉµÉµDirectiveDefWithMeta',
	        moduleName: CORE$1,
	    };
	    Identifiers.InjectorDef = {
	        name: 'ÉµÉµInjectorDef',
	        moduleName: CORE$1,
	    };
	    Identifiers.defineInjector = {
	        name: 'ÉµÉµdefineInjector',
	        moduleName: CORE$1,
	    };
	    Identifiers.NgModuleDefWithMeta = {
	        name: 'ÉµÉµNgModuleDefWithMeta',
	        moduleName: CORE$1,
	    };
	    Identifiers.ModuleWithProviders = {
	        name: 'ModuleWithProviders',
	        moduleName: CORE$1,
	    };
	    Identifiers.defineNgModule = { name: 'ÉµÉµdefineNgModule', moduleName: CORE$1 };
	    Identifiers.setNgModuleScope = { name: 'ÉµÉµsetNgModuleScope', moduleName: CORE$1 };
	    Identifiers.PipeDefWithMeta = { name: 'ÉµÉµPipeDefWithMeta', moduleName: CORE$1 };
	    Identifiers.definePipe = { name: 'ÉµÉµdefinePipe', moduleName: CORE$1 };
	    Identifiers.queryRefresh = { name: 'ÉµÉµqueryRefresh', moduleName: CORE$1 };
	    Identifiers.viewQuery = { name: 'ÉµÉµviewQuery', moduleName: CORE$1 };
	    Identifiers.staticViewQuery = { name: 'ÉµÉµstaticViewQuery', moduleName: CORE$1 };
	    Identifiers.staticContentQuery = { name: 'ÉµÉµstaticContentQuery', moduleName: CORE$1 };
	    Identifiers.loadQuery = { name: 'ÉµÉµloadQuery', moduleName: CORE$1 };
	    Identifiers.contentQuery = { name: 'ÉµÉµcontentQuery', moduleName: CORE$1 };
	    Identifiers.NgOnChangesFeature = { name: 'ÉµÉµNgOnChangesFeature', moduleName: CORE$1 };
	    Identifiers.InheritDefinitionFeature = { name: 'ÉµÉµInheritDefinitionFeature', moduleName: CORE$1 };
	    Identifiers.CopyDefinitionFeature = { name: 'ÉµÉµCopyDefinitionFeature', moduleName: CORE$1 };
	    Identifiers.ProvidersFeature = { name: 'ÉµÉµProvidersFeature', moduleName: CORE$1 };
	    Identifiers.listener = { name: 'ÉµÉµlistener', moduleName: CORE$1 };
	    Identifiers.getFactoryOf = {
	        name: 'ÉµÉµgetFactoryOf',
	        moduleName: CORE$1,
	    };
	    Identifiers.getInheritedFactory = {
	        name: 'ÉµÉµgetInheritedFactory',
	        moduleName: CORE$1,
	    };
	    // sanitization-related functions
	    Identifiers.sanitizeHtml = { name: 'ÉµÉµsanitizeHtml', moduleName: CORE$1 };
	    Identifiers.sanitizeStyle = { name: 'ÉµÉµsanitizeStyle', moduleName: CORE$1 };
	    Identifiers.defaultStyleSanitizer = { name: 'ÉµÉµdefaultStyleSanitizer', moduleName: CORE$1 };
	    Identifiers.sanitizeResourceUrl = { name: 'ÉµÉµsanitizeResourceUrl', moduleName: CORE$1 };
	    Identifiers.sanitizeScript = { name: 'ÉµÉµsanitizeScript', moduleName: CORE$1 };
	    Identifiers.sanitizeUrl = { name: 'ÉµÉµsanitizeUrl', moduleName: CORE$1 };
	    Identifiers.sanitizeUrlOrResourceUrl = { name: 'ÉµÉµsanitizeUrlOrResourceUrl', moduleName: CORE$1 };
	    return Identifiers;
	}());

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * Convert an object map with `Expression` values into a `LiteralMapExpr`.
	 */
	function mapToMapExpression(map) {
	    var result = Object.keys(map).map(function (key) { return ({
	        key: key,
	        // The assertion here is because really TypeScript doesn't allow us to express that if the
	        // key is present, it will have a value, but this is true in reality.
	        value: map[key],
	        quoted: false,
	    }); });
	    return literalMap(result);
	}
	function typeWithParameters(type, numParams) {
	    var params = null;
	    if (numParams > 0) {
	        params = [];
	        for (var i = 0; i < numParams; i++) {
	            params.push(DYNAMIC_TYPE);
	        }
	    }
	    return expressionType(type, null, params);
	}
	var ANIMATE_SYMBOL_PREFIX = '@';
	function prepareSyntheticPropertyName(name) {
	    return "" + ANIMATE_SYMBOL_PREFIX + name;
	}
	function prepareSyntheticListenerName(name, phase) {
	    return "" + ANIMATE_SYMBOL_PREFIX + name + "." + phase;
	}
	function prepareSyntheticListenerFunctionName(name, phase) {
	    return "animation_" + name + "_" + phase;
	}
	function jitOnlyGuardedExpression(expr) {
	    var ngJitMode = new ExternalExpr({ name: 'ngJitMode', moduleName: null });
	    var jitFlagNotDefined = new BinaryOperatorExpr(BinaryOperator.Identical, new TypeofExpr(ngJitMode), literal('undefined'));
	    var jitFlagUndefinedOrTrue = new BinaryOperatorExpr(BinaryOperator.Or, jitFlagNotDefined, ngJitMode, /* type */ undefined, 
	    /* sourceSpan */ undefined, true);
	    return new BinaryOperatorExpr(BinaryOperator.And, jitFlagUndefinedOrTrue, expr);
	}

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	var $EOF = 0;
	var $BSPACE = 8;
	var $TAB = 9;
	var $LF = 10;
	var $VTAB = 11;
	var $FF = 12;
	var $CR = 13;
	var $SPACE = 32;
	var $BANG = 33;
	var $DQ = 34;
	var $HASH = 35;
	var $$ = 36;
	var $PERCENT = 37;
	var $AMPERSAND = 38;
	var $SQ = 39;
	var $LPAREN = 40;
	var $RPAREN = 41;
	var $STAR = 42;
	var $PLUS = 43;
	var $COMMA = 44;
	var $MINUS = 45;
	var $PERIOD = 46;
	var $SLASH = 47;
	var $COLON = 58;
	var $SEMICOLON = 59;
	var $LT = 60;
	var $EQ = 61;
	var $GT = 62;
	var $QUESTION = 63;
	var $0 = 48;
	var $7 = 55;
	var $9 = 57;
	var $A = 65;
	var $E = 69;
	var $F = 70;
	var $X = 88;
	var $Z = 90;
	var $LBRACKET = 91;
	var $BACKSLASH = 92;
	var $RBRACKET = 93;
	var $CARET = 94;
	var $_ = 95;
	var $a = 97;
	var $b = 98;
	var $e = 101;
	var $f = 102;
	var $n = 110;
	var $r = 114;
	var $t = 116;
	var $u = 117;
	var $v = 118;
	var $x = 120;
	var $z = 122;
	var $LBRACE = 123;
	var $BAR = 124;
	var $RBRACE = 125;
	var $NBSP = 160;
	var $BT = 96;
	function isWhitespace(code) {
	    return (code >= $TAB && code <= $SPACE) || (code == $NBSP);
	}
	function isDigit(code) {
	    return $0 <= code && code <= $9;
	}
	function isAsciiLetter(code) {
	    return code >= $a && code <= $z || code >= $A && code <= $Z;
	}
	function isAsciiHexDigit(code) {
	    return code >= $a && code <= $f || code >= $A && code <= $F || isDigit(code);
	}
	function isNewLine(code) {
	    return code === $LF || code === $CR;
	}
	function isOctalDigit(code) {
	    return $0 <= code && code <= $7;
	}

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	var ParseLocation = /** @class */ (function () {
	    function ParseLocation(file, offset, line, col) {
	        this.file = file;
	        this.offset = offset;
	        this.line = line;
	        this.col = col;
	    }
	    ParseLocation.prototype.toString = function () {
	        return this.offset != null ? this.file.url + "@" + this.line + ":" + this.col : this.file.url;
	    };
	    ParseLocation.prototype.moveBy = function (delta) {
	        var source = this.file.content;
	        var len = source.length;
	        var offset = this.offset;
	        var line = this.line;
	        var col = this.col;
	        while (offset > 0 && delta < 0) {
	            offset--;
	            delta++;
	            var ch = source.charCodeAt(offset);
	            if (ch == $LF) {
	                line--;
	                var priorLine = source.substr(0, offset - 1).lastIndexOf(String.fromCharCode($LF));
	                col = priorLine > 0 ? offset - priorLine : offset;
	            }
	            else {
	                col--;
	            }
	        }
	        while (offset < len && delta > 0) {
	            var ch = source.charCodeAt(offset);
	            offset++;
	            delta--;
	            if (ch == $LF) {
	                line++;
	                col = 0;
	            }
	            else {
	                col++;
	            }
	        }
	        return new ParseLocation(this.file, offset, line, col);
	    };
	    // Return the source around the location
	    // Up to `maxChars` or `maxLines` on each side of the location
	    ParseLocation.prototype.getContext = function (maxChars, maxLines) {
	        var content = this.file.content;
	        var startOffset = this.offset;
	        if (startOffset != null) {
	            if (startOffset > content.length - 1) {
	                startOffset = content.length - 1;
	            }
	            var endOffset = startOffset;
	            var ctxChars = 0;
	            var ctxLines = 0;
	            while (ctxChars < maxChars && startOffset > 0) {
	                startOffset--;
	                ctxChars++;
	                if (content[startOffset] == '\n') {
	                    if (++ctxLines == maxLines) {
	                        break;
	                    }
	                }
	            }
	            ctxChars = 0;
	            ctxLines = 0;
	            while (ctxChars < maxChars && endOffset < content.length - 1) {
	                endOffset++;
	                ctxChars++;
	                if (content[endOffset] == '\n') {
	                    if (++ctxLines == maxLines) {
	                        break;
	                    }
	                }
	            }
	            return {
	                before: content.substring(startOffset, this.offset),
	                after: content.substring(this.offset, endOffset + 1),
	            };
	        }
	        return null;
	    };
	    return ParseLocation;
	}());
	var ParseSourceFile = /** @class */ (function () {
	    function ParseSourceFile(content, url) {
	        this.content = content;
	        this.url = url;
	    }
	    return ParseSourceFile;
	}());
	var ParseSourceSpan = /** @class */ (function () {
	    function ParseSourceSpan(start, end, details) {
	        if (details === void 0) { details = null; }
	        this.start = start;
	        this.end = end;
	        this.details = details;
	    }
	    ParseSourceSpan.prototype.toString = function () {
	        return this.start.file.content.substring(this.start.offset, this.end.offset);
	    };
	    return ParseSourceSpan;
	}());
	var ParseErrorLevel;
	(function (ParseErrorLevel) {
	    ParseErrorLevel[ParseErrorLevel["WARNING"] = 0] = "WARNING";
	    ParseErrorLevel[ParseErrorLevel["ERROR"] = 1] = "ERROR";
	})(ParseErrorLevel || (ParseErrorLevel = {}));
	var ParseError = /** @class */ (function () {
	    function ParseError(span, msg, level) {
	        if (level === void 0) { level = ParseErrorLevel.ERROR; }
	        this.span = span;
	        this.msg = msg;
	        this.level = level;
	    }
	    ParseError.prototype.contextualMessage = function () {
	        var ctx = this.span.start.getContext(100, 3);
	        return ctx ? this.msg + " (\"" + ctx.before + "[" + ParseErrorLevel[this.level] + " ->]" + ctx.after + "\")" :
	            this.msg;
	    };
	    ParseError.prototype.toString = function () {
	        var details = this.span.details ? ", " + this.span.details : '';
	        return this.contextualMessage() + ": " + this.span.start + details;
	    };
	    return ParseError;
	}());
	function typeSourceSpan(kind, type) {
	    var moduleUrl = identifierModuleUrl(type);
	    var sourceFileName = moduleUrl != null ? "in " + kind + " " + identifierName(type) + " in " + moduleUrl :
	        "in " + kind + " " + identifierName(type);
	    var sourceFile = new ParseSourceFile('', sourceFileName);
	    return new ParseSourceSpan(new ParseLocation(sourceFile, -1, -1, -1), new ParseLocation(sourceFile, -1, -1, -1));
	}
	/**
	 * Generates Source Span object for a given R3 Type for JIT mode.
	 *
	 * @param kind Component or Directive.
	 * @param typeName name of the Component or Directive.
	 * @param sourceUrl reference to Component or Directive source.
	 * @returns instance of ParseSourceSpan that represent a given Component or Directive.
	 */
	function r3JitTypeSourceSpan(kind, typeName, sourceUrl) {
	    var sourceFileName = "in " + kind + " " + typeName + " in " + sourceUrl;
	    var sourceFile = new ParseSourceFile('', sourceFileName);
	    return new ParseSourceSpan(new ParseLocation(sourceFile, -1, -1, -1), new ParseLocation(sourceFile, -1, -1, -1));
	}

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	var Text = /** @class */ (function () {
	    function Text(value, sourceSpan) {
	        this.value = value;
	        this.sourceSpan = sourceSpan;
	    }
	    Text.prototype.visit = function (visitor) {
	        return visitor.visitText(this);
	    };
	    return Text;
	}());
	var BoundText = /** @class */ (function () {
	    function BoundText(value, sourceSpan, i18n) {
	        this.value = value;
	        this.sourceSpan = sourceSpan;
	        this.i18n = i18n;
	    }
	    BoundText.prototype.visit = function (visitor) {
	        return visitor.visitBoundText(this);
	    };
	    return BoundText;
	}());
	var TextAttribute = /** @class */ (function () {
	    function TextAttribute(name, value, sourceSpan, valueSpan, i18n) {
	        this.name = name;
	        this.value = value;
	        this.sourceSpan = sourceSpan;
	        this.valueSpan = valueSpan;
	        this.i18n = i18n;
	    }
	    TextAttribute.prototype.visit = function (visitor) {
	        return visitor.visitTextAttribute(this);
	    };
	    return TextAttribute;
	}());
	var BoundAttribute = /** @class */ (function () {
	    function BoundAttribute(name, type, securityContext, value, unit, sourceSpan, valueSpan, i18n) {
	        this.name = name;
	        this.type = type;
	        this.securityContext = securityContext;
	        this.value = value;
	        this.unit = unit;
	        this.sourceSpan = sourceSpan;
	        this.valueSpan = valueSpan;
	        this.i18n = i18n;
	    }
	    BoundAttribute.fromBoundElementProperty = function (prop, i18n) {
	        return new BoundAttribute(prop.name, prop.type, prop.securityContext, prop.value, prop.unit, prop.sourceSpan, prop.valueSpan, i18n);
	    };
	    BoundAttribute.prototype.visit = function (visitor) {
	        return visitor.visitBoundAttribute(this);
	    };
	    return BoundAttribute;
	}());
	var BoundEvent = /** @class */ (function () {
	    function BoundEvent(name, type, handler, target, phase, sourceSpan, handlerSpan) {
	        this.name = name;
	        this.type = type;
	        this.handler = handler;
	        this.target = target;
	        this.phase = phase;
	        this.sourceSpan = sourceSpan;
	        this.handlerSpan = handlerSpan;
	    }
	    BoundEvent.fromParsedEvent = function (event) {
	        var target = event.type === 0 /* Regular */ ? event.targetOrPhase : null;
	        var phase = event.type === 1 /* Animation */ ? event.targetOrPhase : null;
	        return new BoundEvent(event.name, event.type, event.handler, target, phase, event.sourceSpan, event.handlerSpan);
	    };
	    BoundEvent.prototype.visit = function (visitor) {
	        return visitor.visitBoundEvent(this);
	    };
	    return BoundEvent;
	}());
	var Element$1 = /** @class */ (function () {
	    function Element(name, attributes, inputs, outputs, children, references, sourceSpan, startSourceSpan, endSourceSpan, i18n) {
	        this.name = name;
	        this.attributes = attributes;
	        this.inputs = inputs;
	        this.outputs = outputs;
	        this.children = children;
	        this.references = references;
	        this.sourceSpan = sourceSpan;
	        this.startSourceSpan = startSourceSpan;
	        this.endSourceSpan = endSourceSpan;
	        this.i18n = i18n;
	        // If the element is empty then the source span should include any closing tag
	        if (children.length === 0 && startSourceSpan && endSourceSpan) {
	            this.sourceSpan = new ParseSourceSpan(sourceSpan.start, endSourceSpan.end);
	        }
	    }
	    Element.prototype.visit = function (visitor) {
	        return visitor.visitElement(this);
	    };
	    return Element;
	}());
	var Template = /** @class */ (function () {
	    function Template(tagName, attributes, inputs, outputs, templateAttrs, children, references, variables, sourceSpan, startSourceSpan, endSourceSpan, i18n) {
	        this.tagName = tagName;
	        this.attributes = attributes;
	        this.inputs = inputs;
	        this.outputs = outputs;
	        this.templateAttrs = templateAttrs;
	        this.children = children;
	        this.references = references;
	        this.variables = variables;
	        this.sourceSpan = sourceSpan;
	        this.startSourceSpan = startSourceSpan;
	        this.endSourceSpan = endSourceSpan;
	        this.i18n = i18n;
	    }
	    Template.prototype.visit = function (visitor) {
	        return visitor.visitTemplate(this);
	    };
	    return Template;
	}());
	var Content = /** @class */ (function () {
	    function Content(selector, attributes, sourceSpan, i18n) {
	        this.selector = selector;
	        this.attributes = attributes;
	        this.sourceSpan = sourceSpan;
	        this.i18n = i18n;
	    }
	    Content.prototype.visit = function (visitor) {
	        return visitor.visitContent(this);
	    };
	    return Content;
	}());
	var Variable = /** @class */ (function () {
	    function Variable(name, value, sourceSpan, valueSpan) {
	        this.name = name;
	        this.value = value;
	        this.sourceSpan = sourceSpan;
	        this.valueSpan = valueSpan;
	    }
	    Variable.prototype.visit = function (visitor) {
	        return visitor.visitVariable(this);
	    };
	    return Variable;
	}());
	var Reference = /** @class */ (function () {
	    function Reference(name, value, sourceSpan, valueSpan) {
	        this.name = name;
	        this.value = value;
	        this.sourceSpan = sourceSpan;
	        this.valueSpan = valueSpan;
	    }
	    Reference.prototype.visit = function (visitor) {
	        return visitor.visitReference(this);
	    };
	    return Reference;
	}());
	var Icu = /** @class */ (function () {
	    function Icu(vars, placeholders, sourceSpan, i18n) {
	        this.vars = vars;
	        this.placeholders = placeholders;
	        this.sourceSpan = sourceSpan;
	        this.i18n = i18n;
	    }
	    Icu.prototype.visit = function (visitor) {
	        return visitor.visitIcu(this);
	    };
	    return Icu;
	}());
	function visitAll(visitor, nodes) {
	    var e_1, _a, e_2, _b;
	    var result = [];
	    if (visitor.visit) {
	        try {
	            for (var nodes_1 = __values(nodes), nodes_1_1 = nodes_1.next(); !nodes_1_1.done; nodes_1_1 = nodes_1.next()) {
	                var node = nodes_1_1.value;
	                var newNode = visitor.visit(node) || node.visit(visitor);
	            }
	        }
	        catch (e_1_1) { e_1 = { error: e_1_1 }; }
	        finally {
	            try {
	                if (nodes_1_1 && !nodes_1_1.done && (_a = nodes_1.return)) _a.call(nodes_1);
	            }
	            finally { if (e_1) throw e_1.error; }
	        }
	    }
	    else {
	        try {
	            for (var nodes_2 = __values(nodes), nodes_2_1 = nodes_2.next(); !nodes_2_1.done; nodes_2_1 = nodes_2.next()) {
	                var node = nodes_2_1.value;
	                var newNode = node.visit(visitor);
	                if (newNode) {
	                    result.push(newNode);
	                }
	            }
	        }
	        catch (e_2_1) { e_2 = { error: e_2_1 }; }
	        finally {
	            try {
	                if (nodes_2_1 && !nodes_2_1.done && (_b = nodes_2.return)) _b.call(nodes_2);
	            }
	            finally { if (e_2) throw e_2.error; }
	        }
	    }
	    return result;
	}

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	var Message = /** @class */ (function () {
	    /**
	     * @param nodes message AST
	     * @param placeholders maps placeholder names to static content
	     * @param placeholderToMessage maps placeholder names to messages (used for nested ICU messages)
	     * @param meaning
	     * @param description
	     * @param customId
	     */
	    function Message(nodes, placeholders, placeholderToMessage, meaning, description, customId) {
	        this.nodes = nodes;
	        this.placeholders = placeholders;
	        this.placeholderToMessage = placeholderToMessage;
	        this.meaning = meaning;
	        this.description = description;
	        this.customId = customId;
	        this.id = this.customId;
	        /** The ids to use if there are no custom id and if `i18nLegacyMessageIdFormat` is not empty */
	        this.legacyIds = [];
	        if (nodes.length) {
	            this.sources = [{
	                    filePath: nodes[0].sourceSpan.start.file.url,
	                    startLine: nodes[0].sourceSpan.start.line + 1,
	                    startCol: nodes[0].sourceSpan.start.col + 1,
	                    endLine: nodes[nodes.length - 1].sourceSpan.end.line + 1,
	                    endCol: nodes[0].sourceSpan.start.col + 1
	                }];
	        }
	        else {
	            this.sources = [];
	        }
	    }
	    return Message;
	}());
	var Text$1 = /** @class */ (function () {
	    function Text(value, sourceSpan) {
	        this.value = value;
	        this.sourceSpan = sourceSpan;
	    }
	    Text.prototype.visit = function (visitor, context) {
	        return visitor.visitText(this, context);
	    };
	    return Text;
	}());
	// TODO(vicb): do we really need this node (vs an array) ?
	var Container = /** @class */ (function () {
	    function Container(children, sourceSpan) {
	        this.children = children;
	        this.sourceSpan = sourceSpan;
	    }
	    Container.prototype.visit = function (visitor, context) {
	        return visitor.visitContainer(this, context);
	    };
	    return Container;
	}());
	var Icu$1 = /** @class */ (function () {
	    function Icu(expression, type, cases, sourceSpan) {
	        this.expression = expression;
	        this.type = type;
	        this.cases = cases;
	        this.sourceSpan = sourceSpan;
	    }
	    Icu.prototype.visit = function (visitor, context) {
	        return visitor.visitIcu(this, context);
	    };
	    return Icu;
	}());
	var TagPlaceholder = /** @class */ (function () {
	    function TagPlaceholder(tag, attrs, startName, closeName, children, isVoid, sourceSpan) {
	        this.tag = tag;
	        this.attrs = attrs;
	        this.startName = startName;
	        this.closeName = closeName;
	        this.children = children;
	        this.isVoid = isVoid;
	        this.sourceSpan = sourceSpan;
	    }
	    TagPlaceholder.prototype.visit = function (visitor, context) {
	        return visitor.visitTagPlaceholder(this, context);
	    };
	    return TagPlaceholder;
	}());
	var Placeholder = /** @class */ (function () {
	    function Placeholder(value, name, sourceSpan) {
	        this.value = value;
	        this.name = name;
	        this.sourceSpan = sourceSpan;
	    }
	    Placeholder.prototype.visit = function (visitor, context) {
	        return visitor.visitPlaceholder(this, context);
	    };
	    return Placeholder;
	}());
	var IcuPlaceholder = /** @class */ (function () {
	    function IcuPlaceholder(value, name, sourceSpan) {
	        this.value = value;
	        this.name = name;
	        this.sourceSpan = sourceSpan;
	    }
	    IcuPlaceholder.prototype.visit = function (visitor, context) {
	        return visitor.visitIcuPlaceholder(this, context);
	    };
	    return IcuPlaceholder;
	}());
	// Clone the AST
	var CloneVisitor = /** @class */ (function () {
	    function CloneVisitor() {
	    }
	    CloneVisitor.prototype.visitText = function (text, context) {
	        return new Text$1(text.value, text.sourceSpan);
	    };
	    CloneVisitor.prototype.visitContainer = function (container, context) {
	        var _this = this;
	        var children = container.children.map(function (n) { return n.visit(_this, context); });
	        return new Container(children, container.sourceSpan);
	    };
	    CloneVisitor.prototype.visitIcu = function (icu, context) {
	        var _this = this;
	        var cases = {};
	        Object.keys(icu.cases).forEach(function (key) { return cases[key] = icu.cases[key].visit(_this, context); });
	        var msg = new Icu$1(icu.expression, icu.type, cases, icu.sourceSpan);
	        msg.expressionPlaceholder = icu.expressionPlaceholder;
	        return msg;
	    };
	    CloneVisitor.prototype.visitTagPlaceholder = function (ph, context) {
	        var _this = this;
	        var children = ph.children.map(function (n) { return n.visit(_this, context); });
	        return new TagPlaceholder(ph.tag, ph.attrs, ph.startName, ph.closeName, children, ph.isVoid, ph.sourceSpan);
	    };
	    CloneVisitor.prototype.visitPlaceholder = function (ph, context) {
	        return new Placeholder(ph.value, ph.name, ph.sourceSpan);
	    };
	    CloneVisitor.prototype.visitIcuPlaceholder = function (ph, context) {
	        return new IcuPlaceholder(ph.value, ph.name, ph.sourceSpan);
	    };
	    return CloneVisitor;
	}());
	// Visit all the nodes recursively
	var RecurseVisitor = /** @class */ (function () {
	    function RecurseVisitor() {
	    }
	    RecurseVisitor.prototype.visitText = function (text, context) { };
	    RecurseVisitor.prototype.visitContainer = function (container, context) {
	        var _this = this;
	        container.children.forEach(function (child) { return child.visit(_this); });
	    };
	    RecurseVisitor.prototype.visitIcu = function (icu, context) {
	        var _this = this;
	        Object.keys(icu.cases).forEach(function (k) {
	            icu.cases[k].visit(_this);
	        });
	    };
	    RecurseVisitor.prototype.visitTagPlaceholder = function (ph, context) {
	        var _this = this;
	        ph.children.forEach(function (child) { return child.visit(_this); });
	    };
	    RecurseVisitor.prototype.visitPlaceholder = function (ph, context) { };
	    RecurseVisitor.prototype.visitIcuPlaceholder = function (ph, context) { };
	    return RecurseVisitor;
	}());

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * Return the message id or compute it using the XLIFF1 digest.
	 */
	function digest(message) {
	    return message.id || computeDigest(message);
	}
	/**
	 * Compute the message id using the XLIFF1 digest.
	 */
	function computeDigest(message) {
	    return sha1(serializeNodes(message.nodes).join('') + ("[" + message.meaning + "]"));
	}
	/**
	 * Return the message id or compute it using the XLIFF2/XMB/$localize digest.
	 */
	function decimalDigest(message) {
	    return message.id || computeDecimalDigest(message);
	}
	/**
	 * Compute the message id using the XLIFF2/XMB/$localize digest.
	 */
	function computeDecimalDigest(message) {
	    var visitor = new _SerializerIgnoreIcuExpVisitor();
	    var parts = message.nodes.map(function (a) { return a.visit(visitor, null); });
	    return computeMsgId(parts.join(''), message.meaning);
	}
	/**
	 * Serialize the i18n ast to something xml-like in order to generate an UID.
	 *
	 * The visitor is also used in the i18n parser tests
	 *
	 * @internal
	 */
	var _SerializerVisitor = /** @class */ (function () {
	    function _SerializerVisitor() {
	    }
	    _SerializerVisitor.prototype.visitText = function (text, context) {
	        return text.value;
	    };
	    _SerializerVisitor.prototype.visitContainer = function (container, context) {
	        var _this = this;
	        return "[" + container.children.map(function (child) { return child.visit(_this); }).join(', ') + "]";
	    };
	    _SerializerVisitor.prototype.visitIcu = function (icu, context) {
	        var _this = this;
	        var strCases = Object.keys(icu.cases).map(function (k) { return k + " {" + icu.cases[k].visit(_this) + "}"; });
	        return "{" + icu.expression + ", " + icu.type + ", " + strCases.join(', ') + "}";
	    };
	    _SerializerVisitor.prototype.visitTagPlaceholder = function (ph, context) {
	        var _this = this;
	        return ph.isVoid ?
	            "<ph tag name=\"" + ph.startName + "\"/>" :
	            "<ph tag name=\"" + ph.startName + "\">" + ph.children.map(function (child) { return child.visit(_this); }).join(', ') + "</ph name=\"" + ph.closeName + "\">";
	    };
	    _SerializerVisitor.prototype.visitPlaceholder = function (ph, context) {
	        return ph.value ? "<ph name=\"" + ph.name + "\">" + ph.value + "</ph>" : "<ph name=\"" + ph.name + "\"/>";
	    };
	    _SerializerVisitor.prototype.visitIcuPlaceholder = function (ph, context) {
	        return "<ph icu name=\"" + ph.name + "\">" + ph.value.visit(this) + "</ph>";
	    };
	    return _SerializerVisitor;
	}());
	var serializerVisitor = new _SerializerVisitor();
	function serializeNodes(nodes) {
	    return nodes.map(function (a) { return a.visit(serializerVisitor, null); });
	}
	/**
	 * Serialize the i18n ast to something xml-like in order to generate an UID.
	 *
	 * Ignore the ICU expressions so that message IDs stays identical if only the expression changes.
	 *
	 * @internal
	 */
	var _SerializerIgnoreIcuExpVisitor = /** @class */ (function (_super) {
	    __extends(_SerializerIgnoreIcuExpVisitor, _super);
	    function _SerializerIgnoreIcuExpVisitor() {
	        return _super !== null && _super.apply(this, arguments) || this;
	    }
	    _SerializerIgnoreIcuExpVisitor.prototype.visitIcu = function (icu, context) {
	        var _this = this;
	        var strCases = Object.keys(icu.cases).map(function (k) { return k + " {" + icu.cases[k].visit(_this) + "}"; });
	        // Do not take the expression into account
	        return "{" + icu.type + ", " + strCases.join(', ') + "}";
	    };
	    return _SerializerIgnoreIcuExpVisitor;
	}(_SerializerVisitor));
	/**
	 * Compute the SHA1 of the given string
	 *
	 * see http://csrc.nist.gov/publications/fips/fips180-4/fips-180-4.pdf
	 *
	 * WARNING: this function has not been designed not tested with security in mind.
	 *          DO NOT USE IT IN A SECURITY SENSITIVE CONTEXT.
	 */
	function sha1(str) {
	    var utf8 = utf8Encode(str);
	    var words32 = stringToWords32(utf8, Endian.Big);
	    var len = utf8.length * 8;
	    var w = newArray(80);
	    var a = 0x67452301, b = 0xefcdab89, c = 0x98badcfe, d = 0x10325476, e = 0xc3d2e1f0;
	    words32[len >> 5] |= 0x80 << (24 - len % 32);
	    words32[((len + 64 >> 9) << 4) + 15] = len;
	    for (var i = 0; i < words32.length; i += 16) {
	        var h0 = a, h1 = b, h2 = c, h3 = d, h4 = e;
	        for (var j = 0; j < 80; j++) {
	            if (j < 16) {
	                w[j] = words32[i + j];
	            }
	            else {
	                w[j] = rol32(w[j - 3] ^ w[j - 8] ^ w[j - 14] ^ w[j - 16], 1);
	            }
	            var fkVal = fk(j, b, c, d);
	            var f = fkVal[0];
	            var k = fkVal[1];
	            var temp = [rol32(a, 5), f, e, k, w[j]].reduce(add32);
	            e = d;
	            d = c;
	            c = rol32(b, 30);
	            b = a;
	            a = temp;
	        }
	        a = add32(a, h0);
	        b = add32(b, h1);
	        c = add32(c, h2);
	        d = add32(d, h3);
	        e = add32(e, h4);
	    }
	    return byteStringToHexString(words32ToByteString([a, b, c, d, e]));
	}
	function fk(index, b, c, d) {
	    if (index < 20) {
	        return [(b & c) | (~b & d), 0x5a827999];
	    }
	    if (index < 40) {
	        return [b ^ c ^ d, 0x6ed9eba1];
	    }
	    if (index < 60) {
	        return [(b & c) | (b & d) | (c & d), 0x8f1bbcdc];
	    }
	    return [b ^ c ^ d, 0xca62c1d6];
	}
	/**
	 * Compute the fingerprint of the given string
	 *
	 * The output is 64 bit number encoded as a decimal string
	 *
	 * based on:
	 * https://github.com/google/closure-compiler/blob/master/src/com/google/javascript/jscomp/GoogleJsMessageIdGenerator.java
	 */
	function fingerprint(str) {
	    var utf8 = utf8Encode(str);
	    var hi = hash32(utf8, 0);
	    var lo = hash32(utf8, 102072);
	    if (hi == 0 && (lo == 0 || lo == 1)) {
	        hi = hi ^ 0x130f9bef;
	        lo = lo ^ -0x6b5f56d8;
	    }
	    return [hi, lo];
	}
	function computeMsgId(msg, meaning) {
	    if (meaning === void 0) { meaning = ''; }
	    var msgFingerprint = fingerprint(msg);
	    if (meaning) {
	        var meaningFingerprint = fingerprint(meaning);
	        msgFingerprint = add64(rol64(msgFingerprint, 1), meaningFingerprint);
	    }
	    var hi = msgFingerprint[0];
	    var lo = msgFingerprint[1];
	    return byteStringToDecString(words32ToByteString([hi & 0x7fffffff, lo]));
	}
	function hash32(str, c) {
	    var a = 0x9e3779b9, b = 0x9e3779b9;
	    var i;
	    var len = str.length;
	    for (i = 0; i + 12 <= len; i += 12) {
	        a = add32(a, wordAt(str, i, Endian.Little));
	        b = add32(b, wordAt(str, i + 4, Endian.Little));
	        c = add32(c, wordAt(str, i + 8, Endian.Little));
	        var res = mix(a, b, c);
	        a = res[0], b = res[1], c = res[2];
	    }
	    a = add32(a, wordAt(str, i, Endian.Little));
	    b = add32(b, wordAt(str, i + 4, Endian.Little));
	    // the first byte of c is reserved for the length
	    c = add32(c, len);
	    c = add32(c, wordAt(str, i + 8, Endian.Little) << 8);
	    return mix(a, b, c)[2];
	}
	// clang-format off
	function mix(a, b, c) {
	    a = sub32(a, b);
	    a = sub32(a, c);
	    a ^= c >>> 13;
	    b = sub32(b, c);
	    b = sub32(b, a);
	    b ^= a << 8;
	    c = sub32(c, a);
	    c = sub32(c, b);
	    c ^= b >>> 13;
	    a = sub32(a, b);
	    a = sub32(a, c);
	    a ^= c >>> 12;
	    b = sub32(b, c);
	    b = sub32(b, a);
	    b ^= a << 16;
	    c = sub32(c, a);
	    c = sub32(c, b);
	    c ^= b >>> 5;
	    a = sub32(a, b);
	    a = sub32(a, c);
	    a ^= c >>> 3;
	    b = sub32(b, c);
	    b = sub32(b, a);
	    b ^= a << 10;
	    c = sub32(c, a);
	    c = sub32(c, b);
	    c ^= b >>> 15;
	    return [a, b, c];
	}
	// clang-format on
	// Utils
	var Endian;
	(function (Endian) {
	    Endian[Endian["Little"] = 0] = "Little";
	    Endian[Endian["Big"] = 1] = "Big";
	})(Endian || (Endian = {}));
	function add32(a, b) {
	    return add32to64(a, b)[1];
	}
	function add32to64(a, b) {
	    var low = (a & 0xffff) + (b & 0xffff);
	    var high = (a >>> 16) + (b >>> 16) + (low >>> 16);
	    return [high >>> 16, (high << 16) | (low & 0xffff)];
	}
	function add64(a, b) {
	    var ah = a[0], al = a[1];
	    var bh = b[0], bl = b[1];
	    var result = add32to64(al, bl);
	    var carry = result[0];
	    var l = result[1];
	    var h = add32(add32(ah, bh), carry);
	    return [h, l];
	}
	function sub32(a, b) {
	    var low = (a & 0xffff) - (b & 0xffff);
	    var high = (a >> 16) - (b >> 16) + (low >> 16);
	    return (high << 16) | (low & 0xffff);
	}
	// Rotate a 32b number left `count` position
	function rol32(a, count) {
	    return (a << count) | (a >>> (32 - count));
	}
	// Rotate a 64b number left `count` position
	function rol64(num, count) {
	    var hi = num[0], lo = num[1];
	    var h = (hi << count) | (lo >>> (32 - count));
	    var l = (lo << count) | (hi >>> (32 - count));
	    return [h, l];
	}
	function stringToWords32(str, endian) {
	    var size = (str.length + 3) >>> 2;
	    var words32 = [];
	    for (var i = 0; i < size; i++) {
	        words32[i] = wordAt(str, i * 4, endian);
	    }
	    return words32;
	}
	function byteAt(str, index) {
	    return index >= str.length ? 0 : str.charCodeAt(index) & 0xff;
	}
	function wordAt(str, index, endian) {
	    var word = 0;
	    if (endian === Endian.Big) {
	        for (var i = 0; i < 4; i++) {
	            word += byteAt(str, index + i) << (24 - 8 * i);
	        }
	    }
	    else {
	        for (var i = 0; i < 4; i++) {
	            word += byteAt(str, index + i) << 8 * i;
	        }
	    }
	    return word;
	}
	function words32ToByteString(words32) {
	    return words32.reduce(function (str, word) { return str + word32ToByteString(word); }, '');
	}
	function word32ToByteString(word) {
	    var str = '';
	    for (var i = 0; i < 4; i++) {
	        str += String.fromCharCode((word >>> 8 * (3 - i)) & 0xff);
	    }
	    return str;
	}
	function byteStringToHexString(str) {
	    var hex = '';
	    for (var i = 0; i < str.length; i++) {
	        var b = byteAt(str, i);
	        hex += (b >>> 4).toString(16) + (b & 0x0f).toString(16);
	    }
	    return hex.toLowerCase();
	}
	// based on http://www.danvk.org/hex2dec.html (JS can not handle more than 56b)
	function byteStringToDecString(str) {
	    var decimal = '';
	    var toThePower = '1';
	    for (var i = str.length - 1; i >= 0; i--) {
	        decimal = addBigInt(decimal, numberTimesBigInt(byteAt(str, i), toThePower));
	        toThePower = numberTimesBigInt(256, toThePower);
	    }
	    return decimal.split('').reverse().join('');
	}
	// x and y decimal, lowest significant digit first
	function addBigInt(x, y) {
	    var sum = '';
	    var len = Math.max(x.length, y.length);
	    for (var i = 0, carry = 0; i < len || carry; i++) {
	        var tmpSum = carry + +(x[i] || 0) + +(y[i] || 0);
	        if (tmpSum >= 10) {
	            carry = 1;
	            sum += tmpSum - 10;
	        }
	        else {
	            carry = 0;
	            sum += tmpSum;
	        }
	    }
	    return sum;
	}
	function numberTimesBigInt(num, b) {
	    var product = '';
	    var bToThePower = b;
	    for (; num !== 0; num = num >>> 1) {
	        if (num & 1)
	            product = addBigInt(product, bToThePower);
	        bToThePower = addBigInt(bToThePower, bToThePower);
	    }
	    return product;
	}

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	var Serializer = /** @class */ (function () {
	    function Serializer() {
	    }
	    // Creates a name mapper, see `PlaceholderMapper`
	    // Returning `null` means that no name mapping is used.
	    Serializer.prototype.createNameMapper = function (message) {
	        return null;
	    };
	    return Serializer;
	}());
	/**
	 * A simple mapper that take a function to transform an internal name to a public name
	 */
	var SimplePlaceholderMapper = /** @class */ (function (_super) {
	    __extends(SimplePlaceholderMapper, _super);
	    // create a mapping from the message
	    function SimplePlaceholderMapper(message, mapName) {
	        var _this = _super.call(this) || this;
	        _this.mapName = mapName;
	        _this.internalToPublic = {};
	        _this.publicToNextId = {};
	        _this.publicToInternal = {};
	        message.nodes.forEach(function (node) { return node.visit(_this); });
	        return _this;
	    }
	    SimplePlaceholderMapper.prototype.toPublicName = function (internalName) {
	        return this.internalToPublic.hasOwnProperty(internalName) ?
	            this.internalToPublic[internalName] :
	            null;
	    };
	    SimplePlaceholderMapper.prototype.toInternalName = function (publicName) {
	        return this.publicToInternal.hasOwnProperty(publicName) ? this.publicToInternal[publicName] :
	            null;
	    };
	    SimplePlaceholderMapper.prototype.visitText = function (text, context) {
	        return null;
	    };
	    SimplePlaceholderMapper.prototype.visitTagPlaceholder = function (ph, context) {
	        this.visitPlaceholderName(ph.startName);
	        _super.prototype.visitTagPlaceholder.call(this, ph, context);
	        this.visitPlaceholderName(ph.closeName);
	    };
	    SimplePlaceholderMapper.prototype.visitPlaceholder = function (ph, context) {
	        this.visitPlaceholderName(ph.name);
	    };
	    SimplePlaceholderMapper.prototype.visitIcuPlaceholder = function (ph, context) {
	        this.visitPlaceholderName(ph.name);
	    };
	    // XMB placeholders could only contains A-Z, 0-9 and _
	    SimplePlaceholderMapper.prototype.visitPlaceholderName = function (internalName) {
	        if (!internalName || this.internalToPublic.hasOwnProperty(internalName)) {
	            return;
	        }
	        var publicName = this.mapName(internalName);
	        if (this.publicToInternal.hasOwnProperty(publicName)) {
	            // Create a new XMB when it has already been used
	            var nextId = this.publicToNextId[publicName];
	            this.publicToNextId[publicName] = nextId + 1;
	            publicName = publicName + "_" + nextId;
	        }
	        else {
	            this.publicToNextId[publicName] = 1;
	        }
	        this.internalToPublic[internalName] = publicName;
	        this.publicToInternal[publicName] = internalName;
	    };
	    return SimplePlaceholderMapper;
	}(RecurseVisitor));

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	var _Visitor = /** @class */ (function () {
	    function _Visitor() {
	    }
	    _Visitor.prototype.visitTag = function (tag) {
	        var _this = this;
	        var strAttrs = this._serializeAttributes(tag.attrs);
	        if (tag.children.length == 0) {
	            return "<" + tag.name + strAttrs + "/>";
	        }
	        var strChildren = tag.children.map(function (node) { return node.visit(_this); });
	        return "<" + tag.name + strAttrs + ">" + strChildren.join('') + "</" + tag.name + ">";
	    };
	    _Visitor.prototype.visitText = function (text) {
	        return text.value;
	    };
	    _Visitor.prototype.visitDeclaration = function (decl) {
	        return "<?xml" + this._serializeAttributes(decl.attrs) + " ?>";
	    };
	    _Visitor.prototype._serializeAttributes = function (attrs) {
	        var strAttrs = Object.keys(attrs).map(function (name) { return name + "=\"" + attrs[name] + "\""; }).join(' ');
	        return strAttrs.length > 0 ? ' ' + strAttrs : '';
	    };
	    _Visitor.prototype.visitDoctype = function (doctype) {
	        return "<!DOCTYPE " + doctype.rootTag + " [\n" + doctype.dtd + "\n]>";
	    };
	    return _Visitor;
	}());
	var _visitor = new _Visitor();
	function serialize(nodes) {
	    return nodes.map(function (node) { return node.visit(_visitor); }).join('');
	}
	var Declaration = /** @class */ (function () {
	    function Declaration(unescapedAttrs) {
	        var _this = this;
	        this.attrs = {};
	        Object.keys(unescapedAttrs).forEach(function (k) {
	            _this.attrs[k] = escapeXml(unescapedAttrs[k]);
	        });
	    }
	    Declaration.prototype.visit = function (visitor) {
	        return visitor.visitDeclaration(this);
	    };
	    return Declaration;
	}());
	var Doctype = /** @class */ (function () {
	    function Doctype(rootTag, dtd) {
	        this.rootTag = rootTag;
	        this.dtd = dtd;
	    }
	    Doctype.prototype.visit = function (visitor) {
	        return visitor.visitDoctype(this);
	    };
	    return Doctype;
	}());
	var Tag = /** @class */ (function () {
	    function Tag(name, unescapedAttrs, children) {
	        var _this = this;
	        if (unescapedAttrs === void 0) { unescapedAttrs = {}; }
	        if (children === void 0) { children = []; }
	        this.name = name;
	        this.children = children;
	        this.attrs = {};
	        Object.keys(unescapedAttrs).forEach(function (k) {
	            _this.attrs[k] = escapeXml(unescapedAttrs[k]);
	        });
	    }
	    Tag.prototype.visit = function (visitor) {
	        return visitor.visitTag(this);
	    };
	    return Tag;
	}());
	var Text$2 = /** @class */ (function () {
	    function Text(unescapedValue) {
	        this.value = escapeXml(unescapedValue);
	    }
	    Text.prototype.visit = function (visitor) {
	        return visitor.visitText(this);
	    };
	    return Text;
	}());
	var CR = /** @class */ (function (_super) {
	    __extends(CR, _super);
	    function CR(ws) {
	        if (ws === void 0) { ws = 0; }
	        return _super.call(this, "\n" + new Array(ws + 1).join(' ')) || this;
	    }
	    return CR;
	}(Text$2));
	var _ESCAPED_CHARS = [
	    [/&/g, '&amp;'],
	    [/"/g, '&quot;'],
	    [/'/g, '&apos;'],
	    [/</g, '&lt;'],
	    [/>/g, '&gt;'],
	];
	// Escape `_ESCAPED_CHARS` characters in the given text with encoded entities
	function escapeXml(text) {
	    return _ESCAPED_CHARS.reduce(function (text, entry) { return text.replace(entry[0], entry[1]); }, text);
	}

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	var _MESSAGES_TAG = 'messagebundle';
	var _MESSAGE_TAG = 'msg';
	var _PLACEHOLDER_TAG = 'ph';
	var _EXAMPLE_TAG = 'ex';
	var _SOURCE_TAG = 'source';
	var _DOCTYPE = "<!ELEMENT messagebundle (msg)*>\n<!ATTLIST messagebundle class CDATA #IMPLIED>\n\n<!ELEMENT msg (#PCDATA|ph|source)*>\n<!ATTLIST msg id CDATA #IMPLIED>\n<!ATTLIST msg seq CDATA #IMPLIED>\n<!ATTLIST msg name CDATA #IMPLIED>\n<!ATTLIST msg desc CDATA #IMPLIED>\n<!ATTLIST msg meaning CDATA #IMPLIED>\n<!ATTLIST msg obsolete (obsolete) #IMPLIED>\n<!ATTLIST msg xml:space (default|preserve) \"default\">\n<!ATTLIST msg is_hidden CDATA #IMPLIED>\n\n<!ELEMENT source (#PCDATA)>\n\n<!ELEMENT ph (#PCDATA|ex)*>\n<!ATTLIST ph name CDATA #REQUIRED>\n\n<!ELEMENT ex (#PCDATA)>";
	var Xmb = /** @class */ (function (_super) {
	    __extends(Xmb, _super);
	    function Xmb() {
	        return _super !== null && _super.apply(this, arguments) || this;
	    }
	    Xmb.prototype.write = function (messages, locale) {
	        var exampleVisitor = new ExampleVisitor();
	        var visitor = new _Visitor$1();
	        var rootNode = new Tag(_MESSAGES_TAG);
	        messages.forEach(function (message) {
	            var attrs = { id: message.id };
	            if (message.description) {
	                attrs['desc'] = message.description;
	            }
	            if (message.meaning) {
	                attrs['meaning'] = message.meaning;
	            }
	            var sourceTags = [];
	            message.sources.forEach(function (source) {
	                sourceTags.push(new Tag(_SOURCE_TAG, {}, [new Text$2(source.filePath + ":" + source.startLine + (source.endLine !== source.startLine ? ',' + source.endLine : ''))]));
	            });
	            rootNode.children.push(new CR(2), new Tag(_MESSAGE_TAG, attrs, __spread(sourceTags, visitor.serialize(message.nodes))));
	        });
	        rootNode.children.push(new CR());
	        return serialize([
	            new Declaration({ version: '1.0', encoding: 'UTF-8' }),
	            new CR(),
	            new Doctype(_MESSAGES_TAG, _DOCTYPE),
	            new CR(),
	            exampleVisitor.addDefaultExamples(rootNode),
	            new CR(),
	        ]);
	    };
	    Xmb.prototype.load = function (content, url) {
	        throw new Error('Unsupported');
	    };
	    Xmb.prototype.digest = function (message) {
	        return digest$1(message);
	    };
	    Xmb.prototype.createNameMapper = function (message) {
	        return new SimplePlaceholderMapper(message, toPublicName);
	    };
	    return Xmb;
	}(Serializer));
	var _Visitor$1 = /** @class */ (function () {
	    function _Visitor() {
	    }
	    _Visitor.prototype.visitText = function (text, context) {
	        return [new Text$2(text.value)];
	    };
	    _Visitor.prototype.visitContainer = function (container, context) {
	        var _this = this;
	        var nodes = [];
	        container.children.forEach(function (node) { return nodes.push.apply(nodes, __spread(node.visit(_this))); });
	        return nodes;
	    };
	    _Visitor.prototype.visitIcu = function (icu, context) {
	        var _this = this;
	        var nodes = [new Text$2("{" + icu.expressionPlaceholder + ", " + icu.type + ", ")];
	        Object.keys(icu.cases).forEach(function (c) {
	            nodes.push.apply(nodes, __spread([new Text$2(c + " {")], icu.cases[c].visit(_this), [new Text$2("} ")]));
	        });
	        nodes.push(new Text$2("}"));
	        return nodes;
	    };
	    _Visitor.prototype.visitTagPlaceholder = function (ph, context) {
	        var startTagAsText = new Text$2("<" + ph.tag + ">");
	        var startEx = new Tag(_EXAMPLE_TAG, {}, [startTagAsText]);
	        // TC requires PH to have a non empty EX, and uses the text node to show the "original" value.
	        var startTagPh = new Tag(_PLACEHOLDER_TAG, { name: ph.startName }, [startEx, startTagAsText]);
	        if (ph.isVoid) {
	            // void tags have no children nor closing tags
	            return [startTagPh];
	        }
	        var closeTagAsText = new Text$2("</" + ph.tag + ">");
	        var closeEx = new Tag(_EXAMPLE_TAG, {}, [closeTagAsText]);
	        // TC requires PH to have a non empty EX, and uses the text node to show the "original" value.
	        var closeTagPh = new Tag(_PLACEHOLDER_TAG, { name: ph.closeName }, [closeEx, closeTagAsText]);
	        return __spread([startTagPh], this.serialize(ph.children), [closeTagPh]);
	    };
	    _Visitor.prototype.visitPlaceholder = function (ph, context) {
	        var interpolationAsText = new Text$2("{{" + ph.value + "}}");
	        // Example tag needs to be not-empty for TC.
	        var exTag = new Tag(_EXAMPLE_TAG, {}, [interpolationAsText]);
	        return [
	            // TC requires PH to have a non empty EX, and uses the text node to show the "original" value.
	            new Tag(_PLACEHOLDER_TAG, { name: ph.name }, [exTag, interpolationAsText])
	        ];
	    };
	    _Visitor.prototype.visitIcuPlaceholder = function (ph, context) {
	        var icuExpression = ph.value.expression;
	        var icuType = ph.value.type;
	        var icuCases = Object.keys(ph.value.cases).map(function (value) { return value + ' {...}'; }).join(' ');
	        var icuAsText = new Text$2("{" + icuExpression + ", " + icuType + ", " + icuCases + "}");
	        var exTag = new Tag(_EXAMPLE_TAG, {}, [icuAsText]);
	        return [
	            // TC requires PH to have a non empty EX, and uses the text node to show the "original" value.
	            new Tag(_PLACEHOLDER_TAG, { name: ph.name }, [exTag, icuAsText])
	        ];
	    };
	    _Visitor.prototype.serialize = function (nodes) {
	        var _this = this;
	        return [].concat.apply([], __spread(nodes.map(function (node) { return node.visit(_this); })));
	    };
	    return _Visitor;
	}());
	function digest$1(message) {
	    return decimalDigest(message);
	}
	// TC requires at least one non-empty example on placeholders
	var ExampleVisitor = /** @class */ (function () {
	    function ExampleVisitor() {
	    }
	    ExampleVisitor.prototype.addDefaultExamples = function (node) {
	        node.visit(this);
	        return node;
	    };
	    ExampleVisitor.prototype.visitTag = function (tag) {
	        var _this = this;
	        if (tag.name === _PLACEHOLDER_TAG) {
	            if (!tag.children || tag.children.length == 0) {
	                var exText = new Text$2(tag.attrs['name'] || '...');
	                tag.children = [new Tag(_EXAMPLE_TAG, {}, [exText])];
	            }
	        }
	        else if (tag.children) {
	            tag.children.forEach(function (node) { return node.visit(_this); });
	        }
	    };
	    ExampleVisitor.prototype.visitText = function (text) { };
	    ExampleVisitor.prototype.visitDeclaration = function (decl) { };
	    ExampleVisitor.prototype.visitDoctype = function (doctype) { };
	    return ExampleVisitor;
	}());
	// XMB/XTB placeholders can only contain A-Z, 0-9 and _
	function toPublicName(internalName) {
	    return internalName.toUpperCase().replace(/[^A-Z0-9_]/g, '_');
	}

	/* Closure variables holding messages must be named `MSG_[A-Z0-9]+` */
	var CLOSURE_TRANSLATION_PREFIX = 'MSG_';
	/* Prefix for non-`goog.getMsg` i18n-related vars */
	var TRANSLATION_PREFIX = 'I18N_';
	/** Name of the i18n attributes **/
	var I18N_ATTR = 'i18n';
	var I18N_ATTR_PREFIX = 'i18n-';
	/** Prefix of var expressions used in ICUs */
	var I18N_ICU_VAR_PREFIX = 'VAR_';
	/** Prefix of ICU expressions for post processing */
	var I18N_ICU_MAPPING_PREFIX = 'I18N_EXP_';
	/** Placeholder wrapper for i18n expressions **/
	var I18N_PLACEHOLDER_SYMBOL = 'ï¿½';
	function isI18nAttribute(name) {
	    return name === I18N_ATTR || name.startsWith(I18N_ATTR_PREFIX);
	}
	function isI18nRootNode(meta) {
	    return meta instanceof Message;
	}
	function isSingleI18nIcu(meta) {
	    return isI18nRootNode(meta) && meta.nodes.length === 1 && meta.nodes[0] instanceof Icu$1;
	}
	function hasI18nMeta(node) {
	    return !!node.i18n;
	}
	function hasI18nAttrs(element) {
	    return element.attrs.some(function (attr) { return isI18nAttribute(attr.name); });
	}
	function icuFromI18nMessage(message) {
	    return message.nodes[0];
	}
	function wrapI18nPlaceholder(content, contextId) {
	    if (contextId === void 0) { contextId = 0; }
	    var blockId = contextId > 0 ? ":" + contextId : '';
	    return "" + I18N_PLACEHOLDER_SYMBOL + content + blockId + I18N_PLACEHOLDER_SYMBOL;
	}
	function assembleI18nBoundString(strings, bindingStartIndex, contextId) {
	    if (bindingStartIndex === void 0) { bindingStartIndex = 0; }
	    if (contextId === void 0) { contextId = 0; }
	    if (!strings.length)
	        return '';
	    var acc = '';
	    var lastIdx = strings.length - 1;
	    for (var i = 0; i < lastIdx; i++) {
	        acc += "" + strings[i] + wrapI18nPlaceholder(bindingStartIndex + i, contextId);
	    }
	    acc += strings[lastIdx];
	    return acc;
	}
	function getSeqNumberGenerator(startsAt) {
	    if (startsAt === void 0) { startsAt = 0; }
	    var current = startsAt;
	    return function () { return current++; };
	}
	function placeholdersToParams(placeholders) {
	    var params = {};
	    placeholders.forEach(function (values, key) {
	        params[key] = literal(values.length > 1 ? "[" + values.join('|') + "]" : values[0]);
	    });
	    return params;
	}
	function updatePlaceholderMap(map, name) {
	    var values = [];
	    for (var _i = 2; _i < arguments.length; _i++) {
	        values[_i - 2] = arguments[_i];
	    }
	    var current = map.get(name) || [];
	    current.push.apply(current, __spread(values));
	    map.set(name, current);
	}
	function assembleBoundTextPlaceholders(meta, bindingStartIndex, contextId) {
	    if (bindingStartIndex === void 0) { bindingStartIndex = 0; }
	    if (contextId === void 0) { contextId = 0; }
	    var startIdx = bindingStartIndex;
	    var placeholders = new Map();
	    var node = meta instanceof Message ? meta.nodes.find(function (node) { return node instanceof Container; }) : meta;
	    if (node) {
	        node
	            .children
	            .filter(function (child) { return child instanceof Placeholder; })
	            .forEach(function (child, idx) {
	            var content = wrapI18nPlaceholder(startIdx + idx, contextId);
	            updatePlaceholderMap(placeholders, child.name, content);
	        });
	    }
	    return placeholders;
	}
	/**
	 * Format the placeholder names in a map of placeholders to expressions.
	 *
	 * The placeholder names are converted from "internal" format (e.g. `START_TAG_DIV_1`) to "external"
	 * format (e.g. `startTagDiv_1`).
	 *
	 * @param params A map of placeholder names to expressions.
	 * @param useCamelCase whether to camelCase the placeholder name when formatting.
	 * @returns A new map of formatted placeholder names to expressions.
	 */
	function i18nFormatPlaceholderNames(params, useCamelCase) {
	    if (params === void 0) { params = {}; }
	    var _params = {};
	    if (params && Object.keys(params).length) {
	        Object.keys(params).forEach(function (key) { return _params[formatI18nPlaceholderName(key, useCamelCase)] = params[key]; });
	    }
	    return _params;
	}
	/**
	 * Converts internal placeholder names to public-facing format
	 * (for example to use in goog.getMsg call).
	 * Example: `START_TAG_DIV_1` is converted to `startTagDiv_1`.
	 *
	 * @param name The placeholder name that should be formatted
	 * @returns Formatted placeholder name
	 */
	function formatI18nPlaceholderName(name, useCamelCase) {
	    if (useCamelCase === void 0) { useCamelCase = true; }
	    var publicName = toPublicName(name);
	    if (!useCamelCase) {
	        return publicName;
	    }
	    var chunks = publicName.split('_');
	    if (chunks.length === 1) {
	        // if no "_" found - just lowercase the value
	        return name.toLowerCase();
	    }
	    var postfix;
	    // eject last element if it's a number
	    if (/^\d+$/.test(chunks[chunks.length - 1])) {
	        postfix = chunks.pop();
	    }
	    var raw = chunks.shift().toLowerCase();
	    if (chunks.length) {
	        raw += chunks.map(function (c) { return c.charAt(0).toUpperCase() + c.slice(1).toLowerCase(); }).join('');
	    }
	    return postfix ? raw + "_" + postfix : raw;
	}
	/**
	 * Generates a prefix for translation const name.
	 *
	 * @param extra Additional local prefix that should be injected into translation var name
	 * @returns Complete translation const prefix
	 */
	function getTranslationConstPrefix(extra) {
	    return ("" + CLOSURE_TRANSLATION_PREFIX + extra).toUpperCase();
	}
	/**
	 * Generate AST to declare a variable. E.g. `var I18N_1;`.
	 * @param variable the name of the variable to declare.
	 */
	function declareI18nVariable(variable) {
	    return new DeclareVarStmt(variable.name, undefined, INFERRED_TYPE, null, variable.sourceSpan);
	}

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * Checks whether an object key contains potentially unsafe chars, thus the key should be wrapped in
	 * quotes. Note: we do not wrap all keys into quotes, as it may have impact on minification and may
	 * bot work in some cases when object keys are mangled by minifier.
	 *
	 * TODO(FW-1136): this is a temporary solution, we need to come up with a better way of working with
	 * inputs that contain potentially unsafe chars.
	 */
	var UNSAFE_OBJECT_KEY_NAME_REGEXP = /[-.]/;
	/** Name of the temporary to use during data binding */
	var TEMPORARY_NAME = '_t';
	/** Name of the context parameter passed into a template function */
	var CONTEXT_NAME = 'ctx';
	/** Name of the RenderFlag passed into a template function */
	var RENDER_FLAGS = 'rf';
	/** The prefix reference variables */
	var REFERENCE_PREFIX = '_r';
	/** The name of the implicit context reference */
	var IMPLICIT_REFERENCE = '$implicit';
	/** Non bindable attribute name **/
	var NON_BINDABLE_ATTR = 'ngNonBindable';
	/**
	 * Creates an allocator for a temporary variable.
	 *
	 * A variable declaration is added to the statements the first time the allocator is invoked.
	 */
	function temporaryAllocator(statements, name) {
	    var temp = null;
	    return function () {
	        if (!temp) {
	            statements.push(new DeclareVarStmt(TEMPORARY_NAME, undefined, DYNAMIC_TYPE));
	            temp = variable(name);
	        }
	        return temp;
	    };
	}
	function unsupported(feature) {
	    if (this) {
	        throw new Error("Builder " + this.constructor.name + " doesn't support " + feature + " yet");
	    }
	    throw new Error("Feature " + feature + " is not supported yet");
	}
	function invalid$1(arg) {
	    throw new Error("Invalid state: Visitor " + this.constructor.name + " doesn't handle " + arg.constructor.name);
	}
	function asLiteral(value) {
	    if (Array.isArray(value)) {
	        return literalArr(value.map(asLiteral));
	    }
	    return literal(value, INFERRED_TYPE);
	}
	function conditionallyCreateMapObjectLiteral(keys, keepDeclared) {
	    if (Object.getOwnPropertyNames(keys).length > 0) {
	        return mapToExpression(keys, keepDeclared);
	    }
	    return null;
	}
	function mapToExpression(map, keepDeclared) {
	    return literalMap(Object.getOwnPropertyNames(map).map(function (key) {
	        var _a, _b;
	        // canonical syntax: `dirProp: publicProp`
	        // if there is no `:`, use dirProp = elProp
	        var value = map[key];
	        var declaredName;
	        var publicName;
	        var minifiedName;
	        if (Array.isArray(value)) {
	            _a = __read(value, 2), publicName = _a[0], declaredName = _a[1];
	        }
	        else {
	            _b = __read(splitAtColon(key, [key, value]), 2), declaredName = _b[0], publicName = _b[1];
	        }
	        minifiedName = declaredName;
	        return {
	            key: minifiedName,
	            // put quotes around keys that contain potentially unsafe characters
	            quoted: UNSAFE_OBJECT_KEY_NAME_REGEXP.test(minifiedName),
	            value: (keepDeclared && publicName !== declaredName) ?
	                literalArr([asLiteral(publicName), asLiteral(declaredName)]) :
	                asLiteral(publicName)
	        };
	    }));
	}
	/**
	 *  Remove trailing null nodes as they are implied.
	 */
	function trimTrailingNulls(parameters) {
	    while (isNull(parameters[parameters.length - 1])) {
	        parameters.pop();
	    }
	    return parameters;
	}
	function getQueryPredicate(query, constantPool) {
	    if (Array.isArray(query.predicate)) {
	        var predicate_1 = [];
	        query.predicate.forEach(function (selector) {
	            // Each item in predicates array may contain strings with comma-separated refs
	            // (for ex. 'ref, ref1, ..., refN'), thus we extract individual refs and store them
	            // as separate array entities
	            var selectors = selector.split(',').map(function (token) { return literal(token.trim()); });
	            predicate_1.push.apply(predicate_1, __spread(selectors));
	        });
	        return constantPool.getConstLiteral(literalArr(predicate_1), true);
	    }
	    else {
	        return query.predicate;
	    }
	}
	var DefinitionMap = /** @class */ (function () {
	    function DefinitionMap() {
	        this.values = [];
	    }
	    DefinitionMap.prototype.set = function (key, value) {
	        if (value) {
	            this.values.push({ key: key, value: value, quoted: false });
	        }
	    };
	    DefinitionMap.prototype.toLiteralMap = function () {
	        return literalMap(this.values);
	    };
	    return DefinitionMap;
	}());
	/**
	 * Extract a map of properties to values for a given element or template node, which can be used
	 * by the directive matching machinery.
	 *
	 * @param elOrTpl the element or template in question
	 * @return an object set up for directive matching. For attributes on the element/template, this
	 * object maps a property name to its (static) value. For any bindings, this map simply maps the
	 * property name to an empty string.
	 */
	function getAttrsForDirectiveMatching(elOrTpl) {
	    var attributesMap = {};
	    if (elOrTpl instanceof Template && elOrTpl.tagName !== 'ng-template') {
	        elOrTpl.templateAttrs.forEach(function (a) { return attributesMap[a.name] = ''; });
	    }
	    else {
	        elOrTpl.attributes.forEach(function (a) {
	            if (!isI18nAttribute(a.name)) {
	                attributesMap[a.name] = a.value;
	            }
	        });
	        elOrTpl.inputs.forEach(function (i) {
	            attributesMap[i.name] = '';
	        });
	        elOrTpl.outputs.forEach(function (o) {
	            attributesMap[o.name] = '';
	        });
	    }
	    return attributesMap;
	}
	/** Returns a call expression to a chained instruction, e.g. `property(params[0])(params[1])`. */
	function chainedInstruction(reference, calls, span) {
	    var expression = importExpr(reference, null, span);
	    if (calls.length > 0) {
	        for (var i = 0; i < calls.length; i++) {
	            expression = expression.callFn(calls[i], span);
	        }
	    }
	    else {
	        // Add a blank invocation, in case the `calls` array is empty.
	        expression = expression.callFn([], span);
	    }
	    return expression;
	}
	/**
	 * Gets the number of arguments expected to be passed to a generated instruction in the case of
	 * interpolation instructions.
	 * @param interpolation An interpolation ast
	 */
	function getInterpolationArgsLength(interpolation) {
	    var expressions = interpolation.expressions, strings = interpolation.strings;
	    if (expressions.length === 1 && strings.length === 2 && strings[0] === '' && strings[1] === '') {
	        // If the interpolation has one interpolated value, but the prefix and suffix are both empty
	        // strings, we only pass one argument, to a special instruction like `propertyInterpolate` or
	        // `textInterpolate`.
	        return 1;
	    }
	    else {
	        return expressions.length + strings.length;
	    }
	}

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	var R3FactoryDelegateType;
	(function (R3FactoryDelegateType) {
	    R3FactoryDelegateType[R3FactoryDelegateType["Class"] = 0] = "Class";
	    R3FactoryDelegateType[R3FactoryDelegateType["Function"] = 1] = "Function";
	    R3FactoryDelegateType[R3FactoryDelegateType["Factory"] = 2] = "Factory";
	})(R3FactoryDelegateType || (R3FactoryDelegateType = {}));
	var R3FactoryTarget;
	(function (R3FactoryTarget) {
	    R3FactoryTarget[R3FactoryTarget["Directive"] = 0] = "Directive";
	    R3FactoryTarget[R3FactoryTarget["Component"] = 1] = "Component";
	    R3FactoryTarget[R3FactoryTarget["Injectable"] = 2] = "Injectable";
	    R3FactoryTarget[R3FactoryTarget["Pipe"] = 3] = "Pipe";
	    R3FactoryTarget[R3FactoryTarget["NgModule"] = 4] = "NgModule";
	})(R3FactoryTarget || (R3FactoryTarget = {}));
	/**
	 * Resolved type of a dependency.
	 *
	 * Occasionally, dependencies will have special significance which is known statically. In that
	 * case the `R3ResolvedDependencyType` informs the factory generator that a particular dependency
	 * should be generated specially (usually by calling a special injection function instead of the
	 * standard one).
	 */
	var R3ResolvedDependencyType;
	(function (R3ResolvedDependencyType) {
	    /**
	     * A normal token dependency.
	     */
	    R3ResolvedDependencyType[R3ResolvedDependencyType["Token"] = 0] = "Token";
	    /**
	     * The dependency is for an attribute.
	     *
	     * The token expression is a string representing the attribute name.
	     */
	    R3ResolvedDependencyType[R3ResolvedDependencyType["Attribute"] = 1] = "Attribute";
	    /**
	     * Injecting the `ChangeDetectorRef` token. Needs special handling when injected into a pipe.
	     */
	    R3ResolvedDependencyType[R3ResolvedDependencyType["ChangeDetectorRef"] = 2] = "ChangeDetectorRef";
	    /**
	     * An invalid dependency (no token could be determined). An error should be thrown at runtime.
	     */
	    R3ResolvedDependencyType[R3ResolvedDependencyType["Invalid"] = 3] = "Invalid";
	})(R3ResolvedDependencyType || (R3ResolvedDependencyType = {}));
	/**
	 * Construct a factory function expression for the given `R3FactoryMetadata`.
	 */
	function compileFactoryFunction(meta) {
	    var t = variable('t');
	    var statements = [];
	    var ctorDepsType = NONE_TYPE;
	    // The type to instantiate via constructor invocation. If there is no delegated factory, meaning
	    // this type is always created by constructor invocation, then this is the type-to-create
	    // parameter provided by the user (t) if specified, or the current type if not. If there is a
	    // delegated factory (which is used to create the current type) then this is only the type-to-
	    // create parameter (t).
	    var typeForCtor = !isDelegatedMetadata(meta) ?
	        new BinaryOperatorExpr(BinaryOperator.Or, t, meta.internalType) :
	        t;
	    var ctorExpr = null;
	    if (meta.deps !== null) {
	        // There is a constructor (either explicitly or implicitly defined).
	        if (meta.deps !== 'invalid') {
	            ctorExpr = new InstantiateExpr(typeForCtor, injectDependencies(meta.deps, meta.injectFn, meta.target === R3FactoryTarget.Pipe));
	            ctorDepsType = createCtorDepsType(meta.deps);
	        }
	    }
	    else {
	        var baseFactory = variable("\u0275" + meta.name + "_BaseFactory");
	        var getInheritedFactory = importExpr(Identifiers$1.getInheritedFactory);
	        var baseFactoryStmt = baseFactory.set(getInheritedFactory.callFn([meta.internalType]))
	            .toDeclStmt(INFERRED_TYPE, [StmtModifier.Exported, StmtModifier.Final]);
	        statements.push(baseFactoryStmt);
	        // There is no constructor, use the base class' factory to construct typeForCtor.
	        ctorExpr = baseFactory.callFn([typeForCtor]);
	    }
	    var ctorExprFinal = ctorExpr;
	    var body = [];
	    var retExpr = null;
	    function makeConditionalFactory(nonCtorExpr) {
	        var r = variable('r');
	        body.push(r.set(NULL_EXPR).toDeclStmt());
	        var ctorStmt = null;
	        if (ctorExprFinal !== null) {
	            ctorStmt = r.set(ctorExprFinal).toStmt();
	        }
	        else {
	            ctorStmt = importExpr(Identifiers$1.invalidFactory).callFn([]).toStmt();
	        }
	        body.push(ifStmt(t, [ctorStmt], [r.set(nonCtorExpr).toStmt()]));
	        return r;
	    }
	    if (isDelegatedMetadata(meta) && meta.delegateType === R3FactoryDelegateType.Factory) {
	        var delegateFactory = variable("\u0275" + meta.name + "_BaseFactory");
	        var getFactoryOf = importExpr(Identifiers$1.getFactoryOf);
	        if (meta.delegate.isEquivalent(meta.internalType)) {
	            throw new Error("Illegal state: compiling factory that delegates to itself");
	        }
	        var delegateFactoryStmt = delegateFactory.set(getFactoryOf.callFn([meta.delegate])).toDeclStmt(INFERRED_TYPE, [
	            StmtModifier.Exported, StmtModifier.Final
	        ]);
	        statements.push(delegateFactoryStmt);
	        retExpr = makeConditionalFactory(delegateFactory.callFn([]));
	    }
	    else if (isDelegatedMetadata(meta)) {
	        // This type is created with a delegated factory. If a type parameter is not specified, call
	        // the factory instead.
	        var delegateArgs = injectDependencies(meta.delegateDeps, meta.injectFn, meta.target === R3FactoryTarget.Pipe);
	        // Either call `new delegate(...)` or `delegate(...)` depending on meta.delegateType.
	        var factoryExpr = new (meta.delegateType === R3FactoryDelegateType.Class ?
	            InstantiateExpr :
	            InvokeFunctionExpr)(meta.delegate, delegateArgs);
	        retExpr = makeConditionalFactory(factoryExpr);
	    }
	    else if (isExpressionFactoryMetadata(meta)) {
	        // TODO(alxhub): decide whether to lower the value here or in the caller
	        retExpr = makeConditionalFactory(meta.expression);
	    }
	    else {
	        retExpr = ctorExpr;
	    }
	    if (retExpr !== null) {
	        body.push(new ReturnStatement(retExpr));
	    }
	    else {
	        body.push(importExpr(Identifiers$1.invalidFactory).callFn([]).toStmt());
	    }
	    return {
	        factory: fn([new FnParam('t', DYNAMIC_TYPE)], body, INFERRED_TYPE, undefined, meta.name + "_Factory"),
	        statements: statements,
	        type: expressionType(importExpr(Identifiers$1.FactoryDef, [typeWithParameters(meta.type.type, meta.typeArgumentCount), ctorDepsType]))
	    };
	}
	function injectDependencies(deps, injectFn, isPipe) {
	    return deps.map(function (dep, index) { return compileInjectDependency(dep, injectFn, isPipe, index); });
	}
	function compileInjectDependency(dep, injectFn, isPipe, index) {
	    // Interpret the dependency according to its resolved type.
	    switch (dep.resolved) {
	        case R3ResolvedDependencyType.Token:
	        case R3ResolvedDependencyType.ChangeDetectorRef:
	            // Build up the injection flags according to the metadata.
	            var flags = 0 /* Default */ | (dep.self ? 2 /* Self */ : 0) |
	                (dep.skipSelf ? 4 /* SkipSelf */ : 0) | (dep.host ? 1 /* Host */ : 0) |
	                (dep.optional ? 8 /* Optional */ : 0);
	            // If this dependency is optional or otherwise has non-default flags, then additional
	            // parameters describing how to inject the dependency must be passed to the inject function
	            // that's being used.
	            var flagsParam = (flags !== 0 /* Default */ || dep.optional) ? literal(flags) : null;
	            // We have a separate instruction for injecting ChangeDetectorRef into a pipe.
	            if (isPipe && dep.resolved === R3ResolvedDependencyType.ChangeDetectorRef) {
	                return importExpr(Identifiers$1.injectPipeChangeDetectorRef).callFn(flagsParam ? [flagsParam] : []);
	            }
	            // Build up the arguments to the injectFn call.
	            var injectArgs = [dep.token];
	            if (flagsParam) {
	                injectArgs.push(flagsParam);
	            }
	            return importExpr(injectFn).callFn(injectArgs);
	        case R3ResolvedDependencyType.Attribute:
	            // In the case of attributes, the attribute name in question is given as the token.
	            return importExpr(Identifiers$1.injectAttribute).callFn([dep.token]);
	        case R3ResolvedDependencyType.Invalid:
	            return importExpr(Identifiers$1.invalidFactoryDep).callFn([literal(index)]);
	        default:
	            return unsupported("Unknown R3ResolvedDependencyType: " + R3ResolvedDependencyType[dep.resolved]);
	    }
	}
	function createCtorDepsType(deps) {
	    var hasTypes = false;
	    var attributeTypes = deps.map(function (dep) {
	        var type = createCtorDepType(dep);
	        if (type !== null) {
	            hasTypes = true;
	            return type;
	        }
	        else {
	            return literal(null);
	        }
	    });
	    if (hasTypes) {
	        return expressionType(literalArr(attributeTypes));
	    }
	    else {
	        return NONE_TYPE;
	    }
	}
	function createCtorDepType(dep) {
	    var entries = [];
	    if (dep.resolved === R3ResolvedDependencyType.Attribute) {
	        if (dep.attribute !== null) {
	            entries.push({ key: 'attribute', value: dep.attribute, quoted: false });
	        }
	    }
	    if (dep.optional) {
	        entries.push({ key: 'optional', value: literal(true), quoted: false });
	    }
	    if (dep.host) {
	        entries.push({ key: 'host', value: literal(true), quoted: false });
	    }
	    if (dep.self) {
	        entries.push({ key: 'self', value: literal(true), quoted: false });
	    }
	    if (dep.skipSelf) {
	        entries.push({ key: 'skipSelf', value: literal(true), quoted: false });
	    }
	    return entries.length > 0 ? literalMap(entries) : null;
	}
	function isDelegatedMetadata(meta) {
	    return meta.delegateType !== undefined;
	}
	function isExpressionFactoryMetadata(meta) {
	    return meta.expression !== undefined;
	}

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	function compileInjectable(meta) {
	    var result = null;
	    var factoryMeta = {
	        name: meta.name,
	        type: meta.type,
	        internalType: meta.internalType,
	        typeArgumentCount: meta.typeArgumentCount,
	        deps: [],
	        injectFn: Identifiers.inject,
	        target: R3FactoryTarget.Injectable,
	    };
	    if (meta.useClass !== undefined) {
	        // meta.useClass has two modes of operation. Either deps are specified, in which case `new` is
	        // used to instantiate the class with dependencies injected, or deps are not specified and
	        // the factory of the class is used to instantiate it.
	        //
	        // A special case exists for useClass: Type where Type is the injectable type itself and no
	        // deps are specified, in which case 'useClass' is effectively ignored.
	        var useClassOnSelf = meta.useClass.isEquivalent(meta.internalType);
	        var deps = undefined;
	        if (meta.userDeps !== undefined) {
	            deps = meta.userDeps;
	        }
	        if (deps !== undefined) {
	            // factory: () => new meta.useClass(...deps)
	            result = compileFactoryFunction(__assign(__assign({}, factoryMeta), { delegate: meta.useClass, delegateDeps: deps, delegateType: R3FactoryDelegateType.Class }));
	        }
	        else if (useClassOnSelf) {
	            result = compileFactoryFunction(factoryMeta);
	        }
	        else {
	            result = delegateToFactory(meta.type.value, meta.useClass);
	        }
	    }
	    else if (meta.useFactory !== undefined) {
	        if (meta.userDeps !== undefined) {
	            result = compileFactoryFunction(__assign(__assign({}, factoryMeta), { delegate: meta.useFactory, delegateDeps: meta.userDeps || [], delegateType: R3FactoryDelegateType.Function }));
	        }
	        else {
	            result = {
	                statements: [],
	                factory: fn([], [new ReturnStatement(meta.useFactory.callFn([]))])
	            };
	        }
	    }
	    else if (meta.useValue !== undefined) {
	        // Note: it's safe to use `meta.useValue` instead of the `USE_VALUE in meta` check used for
	        // client code because meta.useValue is an Expression which will be defined even if the actual
	        // value is undefined.
	        result = compileFactoryFunction(__assign(__assign({}, factoryMeta), { expression: meta.useValue }));
	    }
	    else if (meta.useExisting !== undefined) {
	        // useExisting is an `inject` call on the existing token.
	        result = compileFactoryFunction(__assign(__assign({}, factoryMeta), { expression: importExpr(Identifiers.inject).callFn([meta.useExisting]) }));
	    }
	    else {
	        result = delegateToFactory(meta.type.value, meta.internalType);
	    }
	    var token = meta.internalType;
	    var injectableProps = { token: token, factory: result.factory };
	    // Only generate providedIn property if it has a non-null value
	    if (meta.providedIn.value !== null) {
	        injectableProps.providedIn = meta.providedIn;
	    }
	    var expression = importExpr(Identifiers.ÉµÉµdefineInjectable).callFn([mapToMapExpression(injectableProps)]);
	    var type = new ExpressionType(importExpr(Identifiers.InjectableDef, [typeWithParameters(meta.type.type, meta.typeArgumentCount)]));
	    return {
	        expression: expression,
	        type: type,
	        statements: result.statements,
	    };
	}
	function delegateToFactory(type, internalType) {
	    return {
	        statements: [],
	        // If types are the same, we can generate `factory: type.Éµfac`
	        // If types are different, we have to generate a wrapper function to ensure
	        // the internal type has been resolved (`factory: function(t) { return type.Éµfac(t); }`)
	        factory: type.node === internalType.node ?
	            internalType.prop('Éµfac') :
	            fn([new FnParam('t', DYNAMIC_TYPE)], [new ReturnStatement(internalType.callMethod('Éµfac', [variable('t')]))])
	    };
	}

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	function assertArrayOfStrings(identifier, value) {
	    if (value == null) {
	        return;
	    }
	    if (!Array.isArray(value)) {
	        throw new Error("Expected '" + identifier + "' to be an array of strings.");
	    }
	    for (var i = 0; i < value.length; i += 1) {
	        if (typeof value[i] !== 'string') {
	            throw new Error("Expected '" + identifier + "' to be an array of strings.");
	        }
	    }
	}
	var UNUSABLE_INTERPOLATION_REGEXPS = [
	    /^\s*$/,
	    /[<>]/,
	    /^[{}]$/,
	    /&(#|[a-z])/i,
	    /^\/\//,
	];
	function assertInterpolationSymbols(identifier, value) {
	    if (value != null && !(Array.isArray(value) && value.length == 2)) {
	        throw new Error("Expected '" + identifier + "' to be an array, [start, end].");
	    }
	    else if (value != null) {
	        var start_1 = value[0];
	        var end_1 = value[1];
	        // Check for unusable interpolation symbols
	        UNUSABLE_INTERPOLATION_REGEXPS.forEach(function (regexp) {
	            if (regexp.test(start_1) || regexp.test(end_1)) {
	                throw new Error("['" + start_1 + "', '" + end_1 + "'] contains unusable interpolation symbol.");
	            }
	        });
	    }
	}

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	var InterpolationConfig = /** @class */ (function () {
	    function InterpolationConfig(start, end) {
	        this.start = start;
	        this.end = end;
	    }
	    InterpolationConfig.fromArray = function (markers) {
	        if (!markers) {
	            return DEFAULT_INTERPOLATION_CONFIG;
	        }
	        assertInterpolationSymbols('interpolation', markers);
	        return new InterpolationConfig(markers[0], markers[1]);
	    };
	    return InterpolationConfig;
	}());
	var DEFAULT_INTERPOLATION_CONFIG = new InterpolationConfig('{{', '}}');

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	// https://docs.google.com/document/d/1U1RGAehQwRypUTovF1KRlpiOFze0b-_2gc6fAH0KY0k/edit
	var VERSION = 3;
	var JS_B64_PREFIX = '# sourceMappingURL=data:application/json;base64,';
	var SourceMapGenerator = /** @class */ (function () {
	    function SourceMapGenerator(file) {
	        if (file === void 0) { file = null; }
	        this.file = file;
	        this.sourcesContent = new Map();
	        this.lines = [];
	        this.lastCol0 = 0;
	        this.hasMappings = false;
	    }
	    // The content is `null` when the content is expected to be loaded using the URL
	    SourceMapGenerator.prototype.addSource = function (url, content) {
	        if (content === void 0) { content = null; }
	        if (!this.sourcesContent.has(url)) {
	            this.sourcesContent.set(url, content);
	        }
	        return this;
	    };
	    SourceMapGenerator.prototype.addLine = function () {
	        this.lines.push([]);
	        this.lastCol0 = 0;
	        return this;
	    };
	    SourceMapGenerator.prototype.addMapping = function (col0, sourceUrl, sourceLine0, sourceCol0) {
	        if (!this.currentLine) {
	            throw new Error("A line must be added before mappings can be added");
	        }
	        if (sourceUrl != null && !this.sourcesContent.has(sourceUrl)) {
	            throw new Error("Unknown source file \"" + sourceUrl + "\"");
	        }
	        if (col0 == null) {
	            throw new Error("The column in the generated code must be provided");
	        }
	        if (col0 < this.lastCol0) {
	            throw new Error("Mapping should be added in output order");
	        }
	        if (sourceUrl && (sourceLine0 == null || sourceCol0 == null)) {
	            throw new Error("The source location must be provided when a source url is provided");
	        }
	        this.hasMappings = true;
	        this.lastCol0 = col0;
	        this.currentLine.push({ col0: col0, sourceUrl: sourceUrl, sourceLine0: sourceLine0, sourceCol0: sourceCol0 });
	        return this;
	    };
	    Object.defineProperty(SourceMapGenerator.prototype, "currentLine", {
	        /**
	         * @internal strip this from published d.ts files due to
	         * https://github.com/microsoft/TypeScript/issues/36216
	         */
	        get: function () {
	            return this.lines.slice(-1)[0];
	        },
	        enumerable: true,
	        configurable: true
	    });
	    SourceMapGenerator.prototype.toJSON = function () {
	        var _this = this;
	        if (!this.hasMappings) {
	            return null;
	        }
	        var sourcesIndex = new Map();
	        var sources = [];
	        var sourcesContent = [];
	        Array.from(this.sourcesContent.keys()).forEach(function (url, i) {
	            sourcesIndex.set(url, i);
	            sources.push(url);
	            sourcesContent.push(_this.sourcesContent.get(url) || null);
	        });
	        var mappings = '';
	        var lastCol0 = 0;
	        var lastSourceIndex = 0;
	        var lastSourceLine0 = 0;
	        var lastSourceCol0 = 0;
	        this.lines.forEach(function (segments) {
	            lastCol0 = 0;
	            mappings += segments
	                .map(function (segment) {
	                // zero-based starting column of the line in the generated code
	                var segAsStr = toBase64VLQ(segment.col0 - lastCol0);
	                lastCol0 = segment.col0;
	                if (segment.sourceUrl != null) {
	                    // zero-based index into the âsourcesâ list
	                    segAsStr +=
	                        toBase64VLQ(sourcesIndex.get(segment.sourceUrl) - lastSourceIndex);
	                    lastSourceIndex = sourcesIndex.get(segment.sourceUrl);
	                    // the zero-based starting line in the original source
	                    segAsStr += toBase64VLQ(segment.sourceLine0 - lastSourceLine0);
	                    lastSourceLine0 = segment.sourceLine0;
	                    // the zero-based starting column in the original source
	                    segAsStr += toBase64VLQ(segment.sourceCol0 - lastSourceCol0);
	                    lastSourceCol0 = segment.sourceCol0;
	                }
	                return segAsStr;
	            })
	                .join(',');
	            mappings += ';';
	        });
	        mappings = mappings.slice(0, -1);
	        return {
	            'file': this.file || '',
	            'version': VERSION,
	            'sourceRoot': '',
	            'sources': sources,
	            'sourcesContent': sourcesContent,
	            'mappings': mappings,
	        };
	    };
	    SourceMapGenerator.prototype.toJsComment = function () {
	        return this.hasMappings ? '//' + JS_B64_PREFIX + toBase64String(JSON.stringify(this, null, 0)) :
	            '';
	    };
	    return SourceMapGenerator;
	}());
	function toBase64String(value) {
	    var b64 = '';
	    value = utf8Encode(value);
	    for (var i = 0; i < value.length;) {
	        var i1 = value.charCodeAt(i++);
	        var i2 = value.charCodeAt(i++);
	        var i3 = value.charCodeAt(i++);
	        b64 += toBase64Digit(i1 >> 2);
	        b64 += toBase64Digit(((i1 & 3) << 4) | (isNaN(i2) ? 0 : i2 >> 4));
	        b64 += isNaN(i2) ? '=' : toBase64Digit(((i2 & 15) << 2) | (i3 >> 6));
	        b64 += isNaN(i2) || isNaN(i3) ? '=' : toBase64Digit(i3 & 63);
	    }
	    return b64;
	}
	function toBase64VLQ(value) {
	    value = value < 0 ? ((-value) << 1) + 1 : value << 1;
	    var out = '';
	    do {
	        var digit = value & 31;
	        value = value >> 5;
	        if (value > 0) {
	            digit = digit | 32;
	        }
	        out += toBase64Digit(digit);
	    } while (value > 0);
	    return out;
	}
	var B64_DIGITS = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
	function toBase64Digit(value) {
	    if (value < 0 || value >= 64) {
	        throw new Error("Can only encode value in the range [0, 63]");
	    }
	    return B64_DIGITS[value];
	}

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	var _SINGLE_QUOTE_ESCAPE_STRING_RE = /'|\\|\n|\r|\$/g;
	var _LEGAL_IDENTIFIER_RE = /^[$A-Z_][0-9A-Z_$]*$/i;
	var _INDENT_WITH = '  ';
	var CATCH_ERROR_VAR$1 = variable('error', null, null);
	var CATCH_STACK_VAR$1 = variable('stack', null, null);
	var _EmittedLine = /** @class */ (function () {
	    function _EmittedLine(indent) {
	        this.indent = indent;
	        this.partsLength = 0;
	        this.parts = [];
	        this.srcSpans = [];
	    }
	    return _EmittedLine;
	}());
	var EmitterVisitorContext = /** @class */ (function () {
	    function EmitterVisitorContext(_indent) {
	        this._indent = _indent;
	        this._classes = [];
	        this._preambleLineCount = 0;
	        this._lines = [new _EmittedLine(_indent)];
	    }
	    EmitterVisitorContext.createRoot = function () {
	        return new EmitterVisitorContext(0);
	    };
	    Object.defineProperty(EmitterVisitorContext.prototype, "_currentLine", {
	        /**
	         * @internal strip this from published d.ts files due to
	         * https://github.com/microsoft/TypeScript/issues/36216
	         */
	        get: function () {
	            return this._lines[this._lines.length - 1];
	        },
	        enumerable: true,
	        configurable: true
	    });
	    EmitterVisitorContext.prototype.println = function (from, lastPart) {
	        if (lastPart === void 0) { lastPart = ''; }
	        this.print(from || null, lastPart, true);
	    };
	    EmitterVisitorContext.prototype.lineIsEmpty = function () {
	        return this._currentLine.parts.length === 0;
	    };
	    EmitterVisitorContext.prototype.lineLength = function () {
	        return this._currentLine.indent * _INDENT_WITH.length + this._currentLine.partsLength;
	    };
	    EmitterVisitorContext.prototype.print = function (from, part, newLine) {
	        if (newLine === void 0) { newLine = false; }
	        if (part.length > 0) {
	            this._currentLine.parts.push(part);
	            this._currentLine.partsLength += part.length;
	            this._currentLine.srcSpans.push(from && from.sourceSpan || null);
	        }
	        if (newLine) {
	            this._lines.push(new _EmittedLine(this._indent));
	        }
	    };
	    EmitterVisitorContext.prototype.removeEmptyLastLine = function () {
	        if (this.lineIsEmpty()) {
	            this._lines.pop();
	        }
	    };
	    EmitterVisitorContext.prototype.incIndent = function () {
	        this._indent++;
	        if (this.lineIsEmpty()) {
	            this._currentLine.indent = this._indent;
	        }
	    };
	    EmitterVisitorContext.prototype.decIndent = function () {
	        this._indent--;
	        if (this.lineIsEmpty()) {
	            this._currentLine.indent = this._indent;
	        }
	    };
	    EmitterVisitorContext.prototype.pushClass = function (clazz) {
	        this._classes.push(clazz);
	    };
	    EmitterVisitorContext.prototype.popClass = function () {
	        return this._classes.pop();
	    };
	    Object.defineProperty(EmitterVisitorContext.prototype, "currentClass", {
	        get: function () {
	            return this._classes.length > 0 ? this._classes[this._classes.length - 1] : null;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    EmitterVisitorContext.prototype.toSource = function () {
	        return this.sourceLines
	            .map(function (l) { return l.parts.length > 0 ? _createIndent(l.indent) + l.parts.join('') : ''; })
	            .join('\n');
	    };
	    EmitterVisitorContext.prototype.toSourceMapGenerator = function (genFilePath, startsAtLine) {
	        if (startsAtLine === void 0) { startsAtLine = 0; }
	        var map = new SourceMapGenerator(genFilePath);
	        var firstOffsetMapped = false;
	        var mapFirstOffsetIfNeeded = function () {
	            if (!firstOffsetMapped) {
	                // Add a single space so that tools won't try to load the file from disk.
	                // Note: We are using virtual urls like `ng:///`, so we have to
	                // provide a content here.
	                map.addSource(genFilePath, ' ').addMapping(0, genFilePath, 0, 0);
	                firstOffsetMapped = true;
	            }
	        };
	        for (var i = 0; i < startsAtLine; i++) {
	            map.addLine();
	            mapFirstOffsetIfNeeded();
	        }
	        this.sourceLines.forEach(function (line, lineIdx) {
	            map.addLine();
	            var spans = line.srcSpans;
	            var parts = line.parts;
	            var col0 = line.indent * _INDENT_WITH.length;
	            var spanIdx = 0;
	            // skip leading parts without source spans
	            while (spanIdx < spans.length && !spans[spanIdx]) {
	                col0 += parts[spanIdx].length;
	                spanIdx++;
	            }
	            if (spanIdx < spans.length && lineIdx === 0 && col0 === 0) {
	                firstOffsetMapped = true;
	            }
	            else {
	                mapFirstOffsetIfNeeded();
	            }
	            while (spanIdx < spans.length) {
	                var span = spans[spanIdx];
	                var source = span.start.file;
	                var sourceLine = span.start.line;
	                var sourceCol = span.start.col;
	                map.addSource(source.url, source.content)
	                    .addMapping(col0, source.url, sourceLine, sourceCol);
	                col0 += parts[spanIdx].length;
	                spanIdx++;
	                // assign parts without span or the same span to the previous segment
	                while (spanIdx < spans.length && (span === spans[spanIdx] || !spans[spanIdx])) {
	                    col0 += parts[spanIdx].length;
	                    spanIdx++;
	                }
	            }
	        });
	        return map;
	    };
	    EmitterVisitorContext.prototype.setPreambleLineCount = function (count) {
	        return this._preambleLineCount = count;
	    };
	    EmitterVisitorContext.prototype.spanOf = function (line, column) {
	        var emittedLine = this._lines[line - this._preambleLineCount];
	        if (emittedLine) {
	            var columnsLeft = column - _createIndent(emittedLine.indent).length;
	            for (var partIndex = 0; partIndex < emittedLine.parts.length; partIndex++) {
	                var part = emittedLine.parts[partIndex];
	                if (part.length > columnsLeft) {
	                    return emittedLine.srcSpans[partIndex];
	                }
	                columnsLeft -= part.length;
	            }
	        }
	        return null;
	    };
	    Object.defineProperty(EmitterVisitorContext.prototype, "sourceLines", {
	        /**
	         * @internal strip this from published d.ts files due to
	         * https://github.com/microsoft/TypeScript/issues/36216
	         */
	        get: function () {
	            if (this._lines.length && this._lines[this._lines.length - 1].parts.length === 0) {
	                return this._lines.slice(0, -1);
	            }
	            return this._lines;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    return EmitterVisitorContext;
	}());
	var AbstractEmitterVisitor = /** @class */ (function () {
	    function AbstractEmitterVisitor(_escapeDollarInStrings) {
	        this._escapeDollarInStrings = _escapeDollarInStrings;
	    }
	    AbstractEmitterVisitor.prototype.visitExpressionStmt = function (stmt, ctx) {
	        stmt.expr.visitExpression(this, ctx);
	        ctx.println(stmt, ';');
	        return null;
	    };
	    AbstractEmitterVisitor.prototype.visitReturnStmt = function (stmt, ctx) {
	        ctx.print(stmt, "return ");
	        stmt.value.visitExpression(this, ctx);
	        ctx.println(stmt, ';');
	        return null;
	    };
	    AbstractEmitterVisitor.prototype.visitIfStmt = function (stmt, ctx) {
	        ctx.print(stmt, "if (");
	        stmt.condition.visitExpression(this, ctx);
	        ctx.print(stmt, ") {");
	        var hasElseCase = stmt.falseCase != null && stmt.falseCase.length > 0;
	        if (stmt.trueCase.length <= 1 && !hasElseCase) {
	            ctx.print(stmt, " ");
	            this.visitAllStatements(stmt.trueCase, ctx);
	            ctx.removeEmptyLastLine();
	            ctx.print(stmt, " ");
	        }
	        else {
	            ctx.println();
	            ctx.incIndent();
	            this.visitAllStatements(stmt.trueCase, ctx);
	            ctx.decIndent();
	            if (hasElseCase) {
	                ctx.println(stmt, "} else {");
	                ctx.incIndent();
	                this.visitAllStatements(stmt.falseCase, ctx);
	                ctx.decIndent();
	            }
	        }
	        ctx.println(stmt, "}");
	        return null;
	    };
	    AbstractEmitterVisitor.prototype.visitThrowStmt = function (stmt, ctx) {
	        ctx.print(stmt, "throw ");
	        stmt.error.visitExpression(this, ctx);
	        ctx.println(stmt, ";");
	        return null;
	    };
	    AbstractEmitterVisitor.prototype.visitCommentStmt = function (stmt, ctx) {
	        if (stmt.multiline) {
	            ctx.println(stmt, "/* " + stmt.comment + " */");
	        }
	        else {
	            stmt.comment.split('\n').forEach(function (line) {
	                ctx.println(stmt, "// " + line);
	            });
	        }
	        return null;
	    };
	    AbstractEmitterVisitor.prototype.visitJSDocCommentStmt = function (stmt, ctx) {
	        ctx.println(stmt, "/*" + stmt.toString() + "*/");
	        return null;
	    };
	    AbstractEmitterVisitor.prototype.visitWriteVarExpr = function (expr, ctx) {
	        var lineWasEmpty = ctx.lineIsEmpty();
	        if (!lineWasEmpty) {
	            ctx.print(expr, '(');
	        }
	        ctx.print(expr, expr.name + " = ");
	        expr.value.visitExpression(this, ctx);
	        if (!lineWasEmpty) {
	            ctx.print(expr, ')');
	        }
	        return null;
	    };
	    AbstractEmitterVisitor.prototype.visitWriteKeyExpr = function (expr, ctx) {
	        var lineWasEmpty = ctx.lineIsEmpty();
	        if (!lineWasEmpty) {
	            ctx.print(expr, '(');
	        }
	        expr.receiver.visitExpression(this, ctx);
	        ctx.print(expr, "[");
	        expr.index.visitExpression(this, ctx);
	        ctx.print(expr, "] = ");
	        expr.value.visitExpression(this, ctx);
	        if (!lineWasEmpty) {
	            ctx.print(expr, ')');
	        }
	        return null;
	    };
	    AbstractEmitterVisitor.prototype.visitWritePropExpr = function (expr, ctx) {
	        var lineWasEmpty = ctx.lineIsEmpty();
	        if (!lineWasEmpty) {
	            ctx.print(expr, '(');
	        }
	        expr.receiver.visitExpression(this, ctx);
	        ctx.print(expr, "." + expr.name + " = ");
	        expr.value.visitExpression(this, ctx);
	        if (!lineWasEmpty) {
	            ctx.print(expr, ')');
	        }
	        return null;
	    };
	    AbstractEmitterVisitor.prototype.visitInvokeMethodExpr = function (expr, ctx) {
	        expr.receiver.visitExpression(this, ctx);
	        var name = expr.name;
	        if (expr.builtin != null) {
	            name = this.getBuiltinMethodName(expr.builtin);
	            if (name == null) {
	                // some builtins just mean to skip the call.
	                return null;
	            }
	        }
	        ctx.print(expr, "." + name + "(");
	        this.visitAllExpressions(expr.args, ctx, ",");
	        ctx.print(expr, ")");
	        return null;
	    };
	    AbstractEmitterVisitor.prototype.visitInvokeFunctionExpr = function (expr, ctx) {
	        expr.fn.visitExpression(this, ctx);
	        ctx.print(expr, "(");
	        this.visitAllExpressions(expr.args, ctx, ',');
	        ctx.print(expr, ")");
	        return null;
	    };
	    AbstractEmitterVisitor.prototype.visitWrappedNodeExpr = function (ast, ctx) {
	        throw new Error('Abstract emitter cannot visit WrappedNodeExpr.');
	    };
	    AbstractEmitterVisitor.prototype.visitTypeofExpr = function (expr, ctx) {
	        ctx.print(expr, 'typeof ');
	        expr.expr.visitExpression(this, ctx);
	    };
	    AbstractEmitterVisitor.prototype.visitReadVarExpr = function (ast, ctx) {
	        var varName = ast.name;
	        if (ast.builtin != null) {
	            switch (ast.builtin) {
	                case BuiltinVar.Super:
	                    varName = 'super';
	                    break;
	                case BuiltinVar.This:
	                    varName = 'this';
	                    break;
	                case BuiltinVar.CatchError:
	                    varName = CATCH_ERROR_VAR$1.name;
	                    break;
	                case BuiltinVar.CatchStack:
	                    varName = CATCH_STACK_VAR$1.name;
	                    break;
	                default:
	                    throw new Error("Unknown builtin variable " + ast.builtin);
	            }
	        }
	        ctx.print(ast, varName);
	        return null;
	    };
	    AbstractEmitterVisitor.prototype.visitInstantiateExpr = function (ast, ctx) {
	        ctx.print(ast, "new ");
	        ast.classExpr.visitExpression(this, ctx);
	        ctx.print(ast, "(");
	        this.visitAllExpressions(ast.args, ctx, ',');
	        ctx.print(ast, ")");
	        return null;
	    };
	    AbstractEmitterVisitor.prototype.visitLiteralExpr = function (ast, ctx) {
	        var value = ast.value;
	        if (typeof value === 'string') {
	            ctx.print(ast, escapeIdentifier(value, this._escapeDollarInStrings));
	        }
	        else {
	            ctx.print(ast, "" + value);
	        }
	        return null;
	    };
	    AbstractEmitterVisitor.prototype.visitLocalizedString = function (ast, ctx) {
	        var head = ast.serializeI18nHead();
	        ctx.print(ast, '$localize `' + head.raw);
	        for (var i = 1; i < ast.messageParts.length; i++) {
	            ctx.print(ast, '${');
	            ast.expressions[i - 1].visitExpression(this, ctx);
	            ctx.print(ast, "}" + ast.serializeI18nTemplatePart(i).raw);
	        }
	        ctx.print(ast, '`');
	        return null;
	    };
	    AbstractEmitterVisitor.prototype.visitConditionalExpr = function (ast, ctx) {
	        ctx.print(ast, "(");
	        ast.condition.visitExpression(this, ctx);
	        ctx.print(ast, '? ');
	        ast.trueCase.visitExpression(this, ctx);
	        ctx.print(ast, ': ');
	        ast.falseCase.visitExpression(this, ctx);
	        ctx.print(ast, ")");
	        return null;
	    };
	    AbstractEmitterVisitor.prototype.visitNotExpr = function (ast, ctx) {
	        ctx.print(ast, '!');
	        ast.condition.visitExpression(this, ctx);
	        return null;
	    };
	    AbstractEmitterVisitor.prototype.visitAssertNotNullExpr = function (ast, ctx) {
	        ast.condition.visitExpression(this, ctx);
	        return null;
	    };
	    AbstractEmitterVisitor.prototype.visitBinaryOperatorExpr = function (ast, ctx) {
	        var opStr;
	        switch (ast.operator) {
	            case BinaryOperator.Equals:
	                opStr = '==';
	                break;
	            case BinaryOperator.Identical:
	                opStr = '===';
	                break;
	            case BinaryOperator.NotEquals:
	                opStr = '!=';
	                break;
	            case BinaryOperator.NotIdentical:
	                opStr = '!==';
	                break;
	            case BinaryOperator.And:
	                opStr = '&&';
	                break;
	            case BinaryOperator.BitwiseAnd:
	                opStr = '&';
	                break;
	            case BinaryOperator.Or:
	                opStr = '||';
	                break;
	            case BinaryOperator.Plus:
	                opStr = '+';
	                break;
	            case BinaryOperator.Minus:
	                opStr = '-';
	                break;
	            case BinaryOperator.Divide:
	                opStr = '/';
	                break;
	            case BinaryOperator.Multiply:
	                opStr = '*';
	                break;
	            case BinaryOperator.Modulo:
	                opStr = '%';
	                break;
	            case BinaryOperator.Lower:
	                opStr = '<';
	                break;
	            case BinaryOperator.LowerEquals:
	                opStr = '<=';
	                break;
	            case BinaryOperator.Bigger:
	                opStr = '>';
	                break;
	            case BinaryOperator.BiggerEquals:
	                opStr = '>=';
	                break;
	            default:
	                throw new Error("Unknown operator " + ast.operator);
	        }
	        if (ast.parens)
	            ctx.print(ast, "(");
	        ast.lhs.visitExpression(this, ctx);
	        ctx.print(ast, " " + opStr + " ");
	        ast.rhs.visitExpression(this, ctx);
	        if (ast.parens)
	            ctx.print(ast, ")");
	        return null;
	    };
	    AbstractEmitterVisitor.prototype.visitReadPropExpr = function (ast, ctx) {
	        ast.receiver.visitExpression(this, ctx);
	        ctx.print(ast, ".");
	        ctx.print(ast, ast.name);
	        return null;
	    };
	    AbstractEmitterVisitor.prototype.visitReadKeyExpr = function (ast, ctx) {
	        ast.receiver.visitExpression(this, ctx);
	        ctx.print(ast, "[");
	        ast.index.visitExpression(this, ctx);
	        ctx.print(ast, "]");
	        return null;
	    };
	    AbstractEmitterVisitor.prototype.visitLiteralArrayExpr = function (ast, ctx) {
	        ctx.print(ast, "[");
	        this.visitAllExpressions(ast.entries, ctx, ',');
	        ctx.print(ast, "]");
	        return null;
	    };
	    AbstractEmitterVisitor.prototype.visitLiteralMapExpr = function (ast, ctx) {
	        var _this = this;
	        ctx.print(ast, "{");
	        this.visitAllObjects(function (entry) {
	            ctx.print(ast, escapeIdentifier(entry.key, _this._escapeDollarInStrings, entry.quoted) + ":");
	            entry.value.visitExpression(_this, ctx);
	        }, ast.entries, ctx, ',');
	        ctx.print(ast, "}");
	        return null;
	    };
	    AbstractEmitterVisitor.prototype.visitCommaExpr = function (ast, ctx) {
	        ctx.print(ast, '(');
	        this.visitAllExpressions(ast.parts, ctx, ',');
	        ctx.print(ast, ')');
	        return null;
	    };
	    AbstractEmitterVisitor.prototype.visitAllExpressions = function (expressions, ctx, separator) {
	        var _this = this;
	        this.visitAllObjects(function (expr) { return expr.visitExpression(_this, ctx); }, expressions, ctx, separator);
	    };
	    AbstractEmitterVisitor.prototype.visitAllObjects = function (handler, expressions, ctx, separator) {
	        var incrementedIndent = false;
	        for (var i = 0; i < expressions.length; i++) {
	            if (i > 0) {
	                if (ctx.lineLength() > 80) {
	                    ctx.print(null, separator, true);
	                    if (!incrementedIndent) {
	                        // continuation are marked with double indent.
	                        ctx.incIndent();
	                        ctx.incIndent();
	                        incrementedIndent = true;
	                    }
	                }
	                else {
	                    ctx.print(null, separator, false);
	                }
	            }
	            handler(expressions[i]);
	        }
	        if (incrementedIndent) {
	            // continuation are marked with double indent.
	            ctx.decIndent();
	            ctx.decIndent();
	        }
	    };
	    AbstractEmitterVisitor.prototype.visitAllStatements = function (statements, ctx) {
	        var _this = this;
	        statements.forEach(function (stmt) { return stmt.visitStatement(_this, ctx); });
	    };
	    return AbstractEmitterVisitor;
	}());
	function escapeIdentifier(input, escapeDollar, alwaysQuote) {
	    if (alwaysQuote === void 0) { alwaysQuote = true; }
	    if (input == null) {
	        return null;
	    }
	    var body = input.replace(_SINGLE_QUOTE_ESCAPE_STRING_RE, function () {
	        var match = [];
	        for (var _i = 0; _i < arguments.length; _i++) {
	            match[_i] = arguments[_i];
	        }
	        if (match[0] == '$') {
	            return escapeDollar ? '\\$' : '$';
	        }
	        else if (match[0] == '\n') {
	            return '\\n';
	        }
	        else if (match[0] == '\r') {
	            return '\\r';
	        }
	        else {
	            return "\\" + match[0];
	        }
	    });
	    var requiresQuotes = alwaysQuote || !_LEGAL_IDENTIFIER_RE.test(body);
	    return requiresQuotes ? "'" + body + "'" : body;
	}
	function _createIndent(count) {
	    var res = '';
	    for (var i = 0; i < count; i++) {
	        res += _INDENT_WITH;
	    }
	    return res;
	}

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	var AbstractJsEmitterVisitor = /** @class */ (function (_super) {
	    __extends(AbstractJsEmitterVisitor, _super);
	    function AbstractJsEmitterVisitor() {
	        return _super.call(this, false) || this;
	    }
	    AbstractJsEmitterVisitor.prototype.visitDeclareClassStmt = function (stmt, ctx) {
	        var _this = this;
	        ctx.pushClass(stmt);
	        this._visitClassConstructor(stmt, ctx);
	        if (stmt.parent != null) {
	            ctx.print(stmt, stmt.name + ".prototype = Object.create(");
	            stmt.parent.visitExpression(this, ctx);
	            ctx.println(stmt, ".prototype);");
	        }
	        stmt.getters.forEach(function (getter) { return _this._visitClassGetter(stmt, getter, ctx); });
	        stmt.methods.forEach(function (method) { return _this._visitClassMethod(stmt, method, ctx); });
	        ctx.popClass();
	        return null;
	    };
	    AbstractJsEmitterVisitor.prototype._visitClassConstructor = function (stmt, ctx) {
	        ctx.print(stmt, "function " + stmt.name + "(");
	        if (stmt.constructorMethod != null) {
	            this._visitParams(stmt.constructorMethod.params, ctx);
	        }
	        ctx.println(stmt, ") {");
	        ctx.incIndent();
	        if (stmt.constructorMethod != null) {
	            if (stmt.constructorMethod.body.length > 0) {
	                ctx.println(stmt, "var self = this;");
	                this.visitAllStatements(stmt.constructorMethod.body, ctx);
	            }
	        }
	        ctx.decIndent();
	        ctx.println(stmt, "}");
	    };
	    AbstractJsEmitterVisitor.prototype._visitClassGetter = function (stmt, getter, ctx) {
	        ctx.println(stmt, "Object.defineProperty(" + stmt.name + ".prototype, '" + getter.name + "', { get: function() {");
	        ctx.incIndent();
	        if (getter.body.length > 0) {
	            ctx.println(stmt, "var self = this;");
	            this.visitAllStatements(getter.body, ctx);
	        }
	        ctx.decIndent();
	        ctx.println(stmt, "}});");
	    };
	    AbstractJsEmitterVisitor.prototype._visitClassMethod = function (stmt, method, ctx) {
	        ctx.print(stmt, stmt.name + ".prototype." + method.name + " = function(");
	        this._visitParams(method.params, ctx);
	        ctx.println(stmt, ") {");
	        ctx.incIndent();
	        if (method.body.length > 0) {
	            ctx.println(stmt, "var self = this;");
	            this.visitAllStatements(method.body, ctx);
	        }
	        ctx.decIndent();
	        ctx.println(stmt, "};");
	    };
	    AbstractJsEmitterVisitor.prototype.visitWrappedNodeExpr = function (ast, ctx) {
	        throw new Error('Cannot emit a WrappedNodeExpr in Javascript.');
	    };
	    AbstractJsEmitterVisitor.prototype.visitReadVarExpr = function (ast, ctx) {
	        if (ast.builtin === BuiltinVar.This) {
	            ctx.print(ast, 'self');
	        }
	        else if (ast.builtin === BuiltinVar.Super) {
	            throw new Error("'super' needs to be handled at a parent ast node, not at the variable level!");
	        }
	        else {
	            _super.prototype.visitReadVarExpr.call(this, ast, ctx);
	        }
	        return null;
	    };
	    AbstractJsEmitterVisitor.prototype.visitDeclareVarStmt = function (stmt, ctx) {
	        ctx.print(stmt, "var " + stmt.name);
	        if (stmt.value) {
	            ctx.print(stmt, ' = ');
	            stmt.value.visitExpression(this, ctx);
	        }
	        ctx.println(stmt, ";");
	        return null;
	    };
	    AbstractJsEmitterVisitor.prototype.visitCastExpr = function (ast, ctx) {
	        ast.value.visitExpression(this, ctx);
	        return null;
	    };
	    AbstractJsEmitterVisitor.prototype.visitInvokeFunctionExpr = function (expr, ctx) {
	        var fnExpr = expr.fn;
	        if (fnExpr instanceof ReadVarExpr && fnExpr.builtin === BuiltinVar.Super) {
	            ctx.currentClass.parent.visitExpression(this, ctx);
	            ctx.print(expr, ".call(this");
	            if (expr.args.length > 0) {
	                ctx.print(expr, ", ");
	                this.visitAllExpressions(expr.args, ctx, ',');
	            }
	            ctx.print(expr, ")");
	        }
	        else {
	            _super.prototype.visitInvokeFunctionExpr.call(this, expr, ctx);
	        }
	        return null;
	    };
	    AbstractJsEmitterVisitor.prototype.visitFunctionExpr = function (ast, ctx) {
	        ctx.print(ast, "function" + (ast.name ? ' ' + ast.name : '') + "(");
	        this._visitParams(ast.params, ctx);
	        ctx.println(ast, ") {");
	        ctx.incIndent();
	        this.visitAllStatements(ast.statements, ctx);
	        ctx.decIndent();
	        ctx.print(ast, "}");
	        return null;
	    };
	    AbstractJsEmitterVisitor.prototype.visitDeclareFunctionStmt = function (stmt, ctx) {
	        ctx.print(stmt, "function " + stmt.name + "(");
	        this._visitParams(stmt.params, ctx);
	        ctx.println(stmt, ") {");
	        ctx.incIndent();
	        this.visitAllStatements(stmt.statements, ctx);
	        ctx.decIndent();
	        ctx.println(stmt, "}");
	        return null;
	    };
	    AbstractJsEmitterVisitor.prototype.visitTryCatchStmt = function (stmt, ctx) {
	        ctx.println(stmt, "try {");
	        ctx.incIndent();
	        this.visitAllStatements(stmt.bodyStmts, ctx);
	        ctx.decIndent();
	        ctx.println(stmt, "} catch (" + CATCH_ERROR_VAR$1.name + ") {");
	        ctx.incIndent();
	        var catchStmts = [CATCH_STACK_VAR$1.set(CATCH_ERROR_VAR$1.prop('stack')).toDeclStmt(null, [
	                StmtModifier.Final
	            ])].concat(stmt.catchStmts);
	        this.visitAllStatements(catchStmts, ctx);
	        ctx.decIndent();
	        ctx.println(stmt, "}");
	        return null;
	    };
	    AbstractJsEmitterVisitor.prototype.visitLocalizedString = function (ast, ctx) {
	        var _this = this;
	        // The following convoluted piece of code is effectively the downlevelled equivalent of
	        // ```
	        // $localize `...`
	        // ```
	        // which is effectively like:
	        // ```
	        // $localize(__makeTemplateObject(cooked, raw), expression1, expression2, ...);
	        // ```
	        //
	        // The `$localize` function expects a "template object", which is an array of "cooked" strings
	        // plus a `raw` property that contains an array of "raw" strings.
	        //
	        // In some environments a helper function called `__makeTemplateObject(cooked, raw)` might be
	        // available, in which case we use that. Otherwise we must create our own helper function
	        // inline.
	        //
	        // In the inline function, if `Object.defineProperty` is available we use that to attach the
	        // `raw` array.
	        ctx.print(ast, '$localize((this&&this.__makeTemplateObject||function(e,t){return Object.defineProperty?Object.defineProperty(e,"raw",{value:t}):e.raw=t,e})(');
	        var parts = [ast.serializeI18nHead()];
	        for (var i = 1; i < ast.messageParts.length; i++) {
	            parts.push(ast.serializeI18nTemplatePart(i));
	        }
	        ctx.print(ast, "[" + parts.map(function (part) { return escapeIdentifier(part.cooked, false); }).join(', ') + "], ");
	        ctx.print(ast, "[" + parts.map(function (part) { return escapeIdentifier(part.raw, false); }).join(', ') + "])");
	        ast.expressions.forEach(function (expression) {
	            ctx.print(ast, ', ');
	            expression.visitExpression(_this, ctx);
	        });
	        ctx.print(ast, ')');
	        return null;
	    };
	    AbstractJsEmitterVisitor.prototype._visitParams = function (params, ctx) {
	        this.visitAllObjects(function (param) { return ctx.print(null, param.name); }, params, ctx, ',');
	    };
	    AbstractJsEmitterVisitor.prototype.getBuiltinMethodName = function (method) {
	        var name;
	        switch (method) {
	            case BuiltinMethod.ConcatArray:
	                name = 'concat';
	                break;
	            case BuiltinMethod.SubscribeObservable:
	                name = 'subscribe';
	                break;
	            case BuiltinMethod.Bind:
	                name = 'bind';
	                break;
	            default:
	                throw new Error("Unknown builtin method: " + method);
	        }
	        return name;
	    };
	    return AbstractJsEmitterVisitor;
	}(AbstractEmitterVisitor));

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * A helper class to manage the evaluation of JIT generated code.
	 */
	var JitEvaluator = /** @class */ (function () {
	    function JitEvaluator() {
	    }
	    /**
	     *
	     * @param sourceUrl The URL of the generated code.
	     * @param statements An array of Angular statement AST nodes to be evaluated.
	     * @param reflector A helper used when converting the statements to executable code.
	     * @param createSourceMaps If true then create a source-map for the generated code and include it
	     * inline as a source-map comment.
	     * @returns A map of all the variables in the generated code.
	     */
	    JitEvaluator.prototype.evaluateStatements = function (sourceUrl, statements, reflector, createSourceMaps) {
	        var converter = new JitEmitterVisitor(reflector);
	        var ctx = EmitterVisitorContext.createRoot();
	        // Ensure generated code is in strict mode
	        if (statements.length > 0 && !isUseStrictStatement(statements[0])) {
	            statements = __spread([
	                literal('use strict').toStmt()
	            ], statements);
	        }
	        converter.visitAllStatements(statements, ctx);
	        converter.createReturnStmt(ctx);
	        return this.evaluateCode(sourceUrl, ctx, converter.getArgs(), createSourceMaps);
	    };
	    /**
	     * Evaluate a piece of JIT generated code.
	     * @param sourceUrl The URL of this generated code.
	     * @param ctx A context object that contains an AST of the code to be evaluated.
	     * @param vars A map containing the names and values of variables that the evaluated code might
	     * reference.
	     * @param createSourceMap If true then create a source-map for the generated code and include it
	     * inline as a source-map comment.
	     * @returns The result of evaluating the code.
	     */
	    JitEvaluator.prototype.evaluateCode = function (sourceUrl, ctx, vars, createSourceMap) {
	        var fnBody = "\"use strict\";" + ctx.toSource() + "\n//# sourceURL=" + sourceUrl;
	        var fnArgNames = [];
	        var fnArgValues = [];
	        for (var argName in vars) {
	            fnArgValues.push(vars[argName]);
	            fnArgNames.push(argName);
	        }
	        if (createSourceMap) {
	            // using `new Function(...)` generates a header, 1 line of no arguments, 2 lines otherwise
	            // E.g. ```
	            // function anonymous(a,b,c
	            // /**/) { ... }```
	            // We don't want to hard code this fact, so we auto detect it via an empty function first.
	            var emptyFn = new (Function.bind.apply(Function, __spread([void 0], fnArgNames.concat('return null;'))))().toString();
	            var headerLines = emptyFn.slice(0, emptyFn.indexOf('return null;')).split('\n').length - 1;
	            fnBody += "\n" + ctx.toSourceMapGenerator(sourceUrl, headerLines).toJsComment();
	        }
	        var fn = new (Function.bind.apply(Function, __spread([void 0], fnArgNames.concat(fnBody))))();
	        return this.executeFunction(fn, fnArgValues);
	    };
	    /**
	     * Execute a JIT generated function by calling it.
	     *
	     * This method can be overridden in tests to capture the functions that are generated
	     * by this `JitEvaluator` class.
	     *
	     * @param fn A function to execute.
	     * @param args The arguments to pass to the function being executed.
	     * @returns The return value of the executed function.
	     */
	    JitEvaluator.prototype.executeFunction = function (fn, args) {
	        return fn.apply(void 0, __spread(args));
	    };
	    return JitEvaluator;
	}());
	/**
	 * An Angular AST visitor that converts AST nodes into executable JavaScript code.
	 */
	var JitEmitterVisitor = /** @class */ (function (_super) {
	    __extends(JitEmitterVisitor, _super);
	    function JitEmitterVisitor(reflector) {
	        var _this = _super.call(this) || this;
	        _this.reflector = reflector;
	        _this._evalArgNames = [];
	        _this._evalArgValues = [];
	        _this._evalExportedVars = [];
	        return _this;
	    }
	    JitEmitterVisitor.prototype.createReturnStmt = function (ctx) {
	        var stmt = new ReturnStatement(new LiteralMapExpr(this._evalExportedVars.map(function (resultVar) { return new LiteralMapEntry(resultVar, variable(resultVar), false); })));
	        stmt.visitStatement(this, ctx);
	    };
	    JitEmitterVisitor.prototype.getArgs = function () {
	        var result = {};
	        for (var i = 0; i < this._evalArgNames.length; i++) {
	            result[this._evalArgNames[i]] = this._evalArgValues[i];
	        }
	        return result;
	    };
	    JitEmitterVisitor.prototype.visitExternalExpr = function (ast, ctx) {
	        this._emitReferenceToExternal(ast, this.reflector.resolveExternalReference(ast.value), ctx);
	        return null;
	    };
	    JitEmitterVisitor.prototype.visitWrappedNodeExpr = function (ast, ctx) {
	        this._emitReferenceToExternal(ast, ast.node, ctx);
	        return null;
	    };
	    JitEmitterVisitor.prototype.visitDeclareVarStmt = function (stmt, ctx) {
	        if (stmt.hasModifier(StmtModifier.Exported)) {
	            this._evalExportedVars.push(stmt.name);
	        }
	        return _super.prototype.visitDeclareVarStmt.call(this, stmt, ctx);
	    };
	    JitEmitterVisitor.prototype.visitDeclareFunctionStmt = function (stmt, ctx) {
	        if (stmt.hasModifier(StmtModifier.Exported)) {
	            this._evalExportedVars.push(stmt.name);
	        }
	        return _super.prototype.visitDeclareFunctionStmt.call(this, stmt, ctx);
	    };
	    JitEmitterVisitor.prototype.visitDeclareClassStmt = function (stmt, ctx) {
	        if (stmt.hasModifier(StmtModifier.Exported)) {
	            this._evalExportedVars.push(stmt.name);
	        }
	        return _super.prototype.visitDeclareClassStmt.call(this, stmt, ctx);
	    };
	    JitEmitterVisitor.prototype._emitReferenceToExternal = function (ast, value, ctx) {
	        var id = this._evalArgValues.indexOf(value);
	        if (id === -1) {
	            id = this._evalArgValues.length;
	            this._evalArgValues.push(value);
	            var name_1 = identifierName({ reference: value }) || 'val';
	            this._evalArgNames.push("jit_" + name_1 + "_" + id);
	        }
	        ctx.print(ast, this._evalArgNames[id]);
	    };
	    return JitEmitterVisitor;
	}(AbstractJsEmitterVisitor));
	function isUseStrictStatement(statement) {
	    return statement.isEquivalent(literal('use strict').toStmt());
	}

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * Implementation of `CompileReflector` which resolves references to @angular/core
	 * symbols at runtime, according to a consumer-provided mapping.
	 *
	 * Only supports `resolveExternalReference`, all other methods throw.
	 */
	var R3JitReflector = /** @class */ (function () {
	    function R3JitReflector(context) {
	        this.context = context;
	    }
	    R3JitReflector.prototype.resolveExternalReference = function (ref) {
	        // This reflector only handles @angular/core imports.
	        if (ref.moduleName !== '@angular/core') {
	            throw new Error("Cannot resolve external reference to " + ref.moduleName + ", only references to @angular/core are supported.");
	        }
	        if (!this.context.hasOwnProperty(ref.name)) {
	            throw new Error("No value provided for @angular/core symbol '" + ref.name + "'.");
	        }
	        return this.context[ref.name];
	    };
	    R3JitReflector.prototype.parameters = function (typeOrFunc) {
	        throw new Error('Not implemented.');
	    };
	    R3JitReflector.prototype.annotations = function (typeOrFunc) {
	        throw new Error('Not implemented.');
	    };
	    R3JitReflector.prototype.shallowAnnotations = function (typeOrFunc) {
	        throw new Error('Not implemented.');
	    };
	    R3JitReflector.prototype.tryAnnotations = function (typeOrFunc) {
	        throw new Error('Not implemented.');
	    };
	    R3JitReflector.prototype.propMetadata = function (typeOrFunc) {
	        throw new Error('Not implemented.');
	    };
	    R3JitReflector.prototype.hasLifecycleHook = function (type, lcProperty) {
	        throw new Error('Not implemented.');
	    };
	    R3JitReflector.prototype.guards = function (typeOrFunc) {
	        throw new Error('Not implemented.');
	    };
	    R3JitReflector.prototype.componentModuleUrl = function (type, cmpMetadata) {
	        throw new Error('Not implemented.');
	    };
	    return R3JitReflector;
	}());
	function mapLiteral(obj, quoted) {
	    if (quoted === void 0) { quoted = false; }
	    return literalMap(Object.keys(obj).map(function (key) { return ({
	        key: key,
	        quoted: quoted,
	        value: obj[key],
	    }); }));
	}

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * Construct an `R3NgModuleDef` for the given `R3NgModuleMetadata`.
	 */
	function compileNgModule(meta) {
	    var internalType = meta.internalType, moduleType = meta.type, bootstrap = meta.bootstrap, declarations = meta.declarations, imports = meta.imports, exports = meta.exports, schemas = meta.schemas, containsForwardDecls = meta.containsForwardDecls, emitInline = meta.emitInline, id = meta.id;
	    var additionalStatements = [];
	    var definitionMap = { type: internalType };
	    // Only generate the keys in the metadata if the arrays have values.
	    if (bootstrap.length) {
	        definitionMap.bootstrap = refsToArray(bootstrap, containsForwardDecls);
	    }
	    // If requested to emit scope information inline, pass the declarations, imports and exports to
	    // the `ÉµÉµdefineNgModule` call. The JIT compilation uses this.
	    if (emitInline) {
	        if (declarations.length) {
	            definitionMap.declarations = refsToArray(declarations, containsForwardDecls);
	        }
	        if (imports.length) {
	            definitionMap.imports = refsToArray(imports, containsForwardDecls);
	        }
	        if (exports.length) {
	            definitionMap.exports = refsToArray(exports, containsForwardDecls);
	        }
	    }
	    // If not emitting inline, the scope information is not passed into `ÉµÉµdefineNgModule` as it would
	    // prevent tree-shaking of the declarations, imports and exports references.
	    else {
	        var setNgModuleScopeCall = generateSetNgModuleScopeCall(meta);
	        if (setNgModuleScopeCall !== null) {
	            additionalStatements.push(setNgModuleScopeCall);
	        }
	    }
	    if (schemas && schemas.length) {
	        definitionMap.schemas = literalArr(schemas.map(function (ref) { return ref.value; }));
	    }
	    if (id) {
	        definitionMap.id = id;
	    }
	    var expression = importExpr(Identifiers$1.defineNgModule).callFn([mapToMapExpression(definitionMap)]);
	    var type = new ExpressionType(importExpr(Identifiers$1.NgModuleDefWithMeta, [
	        new ExpressionType(moduleType.type), tupleTypeOf(declarations), tupleTypeOf(imports),
	        tupleTypeOf(exports)
	    ]));
	    return { expression: expression, type: type, additionalStatements: additionalStatements };
	}
	/**
	 * Generates a function call to `ÉµÉµsetNgModuleScope` with all necessary information so that the
	 * transitive module scope can be computed during runtime in JIT mode. This call is marked pure
	 * such that the references to declarations, imports and exports may be elided causing these
	 * symbols to become tree-shakeable.
	 */
	function generateSetNgModuleScopeCall(meta) {
	    var moduleType = meta.adjacentType, declarations = meta.declarations, imports = meta.imports, exports = meta.exports, containsForwardDecls = meta.containsForwardDecls;
	    var scopeMap = {};
	    if (declarations.length) {
	        scopeMap.declarations = refsToArray(declarations, containsForwardDecls);
	    }
	    if (imports.length) {
	        scopeMap.imports = refsToArray(imports, containsForwardDecls);
	    }
	    if (exports.length) {
	        scopeMap.exports = refsToArray(exports, containsForwardDecls);
	    }
	    if (Object.keys(scopeMap).length === 0) {
	        return null;
	    }
	    // setNgModuleScope(...)
	    var fnCall = new InvokeFunctionExpr(
	    /* fn */ importExpr(Identifiers$1.setNgModuleScope), 
	    /* args */ [moduleType, mapToMapExpression(scopeMap)]);
	    // (ngJitMode guard) && setNgModuleScope(...)
	    var guardedCall = jitOnlyGuardedExpression(fnCall);
	    // function() { (ngJitMode guard) && setNgModuleScope(...); }
	    var iife = new FunctionExpr(
	    /* params */ [], 
	    /* statements */ [guardedCall.toStmt()]);
	    // (function() { (ngJitMode guard) && setNgModuleScope(...); })()
	    var iifeCall = new InvokeFunctionExpr(
	    /* fn */ iife, 
	    /* args */ []);
	    return iifeCall.toStmt();
	}
	function compileInjector(meta) {
	    var result = compileFactoryFunction({
	        name: meta.name,
	        type: meta.type,
	        internalType: meta.internalType,
	        typeArgumentCount: 0,
	        deps: meta.deps,
	        injectFn: Identifiers$1.inject,
	        target: R3FactoryTarget.NgModule,
	    });
	    var definitionMap = {
	        factory: result.factory,
	    };
	    if (meta.providers !== null) {
	        definitionMap.providers = meta.providers;
	    }
	    if (meta.imports.length > 0) {
	        definitionMap.imports = literalArr(meta.imports);
	    }
	    var expression = importExpr(Identifiers$1.defineInjector).callFn([mapToMapExpression(definitionMap)]);
	    var type = new ExpressionType(importExpr(Identifiers$1.InjectorDef, [new ExpressionType(meta.type.type)]));
	    return { expression: expression, type: type, statements: result.statements };
	}
	function tupleTypeOf(exp) {
	    var types = exp.map(function (ref) { return typeofExpr(ref.type); });
	    return exp.length > 0 ? expressionType(literalArr(types)) : NONE_TYPE;
	}
	function refsToArray(refs, shouldForwardDeclare) {
	    var values = literalArr(refs.map(function (ref) { return ref.value; }));
	    return shouldForwardDeclare ? fn([], [new ReturnStatement(values)]) : values;
	}

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	function compilePipeFromMetadata(metadata) {
	    var definitionMapValues = [];
	    // e.g. `name: 'myPipe'`
	    definitionMapValues.push({ key: 'name', value: literal(metadata.pipeName), quoted: false });
	    // e.g. `type: MyPipe`
	    definitionMapValues.push({ key: 'type', value: metadata.type.value, quoted: false });
	    // e.g. `pure: true`
	    definitionMapValues.push({ key: 'pure', value: literal(metadata.pure), quoted: false });
	    var expression = importExpr(Identifiers$1.definePipe).callFn([literalMap(definitionMapValues)]);
	    var type = new ExpressionType(importExpr(Identifiers$1.PipeDefWithMeta, [
	        typeWithParameters(metadata.type.type, metadata.typeArgumentCount),
	        new ExpressionType(new LiteralExpr(metadata.pipeName)),
	    ]));
	    return { expression: expression, type: type };
	}

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	var ParserError = /** @class */ (function () {
	    function ParserError(message, input, errLocation, ctxLocation) {
	        this.input = input;
	        this.errLocation = errLocation;
	        this.ctxLocation = ctxLocation;
	        this.message = "Parser Error: " + message + " " + errLocation + " [" + input + "] in " + ctxLocation;
	    }
	    return ParserError;
	}());
	var ParseSpan = /** @class */ (function () {
	    function ParseSpan(start, end) {
	        this.start = start;
	        this.end = end;
	    }
	    ParseSpan.prototype.toAbsolute = function (absoluteOffset) {
	        return new AbsoluteSourceSpan(absoluteOffset + this.start, absoluteOffset + this.end);
	    };
	    return ParseSpan;
	}());
	var AST = /** @class */ (function () {
	    function AST(span, 
	    /**
	     * Absolute location of the expression AST in a source code file.
	     */
	    sourceSpan) {
	        this.span = span;
	        this.sourceSpan = sourceSpan;
	    }
	    AST.prototype.visit = function (visitor, context) {
	        return null;
	    };
	    AST.prototype.toString = function () {
	        return 'AST';
	    };
	    return AST;
	}());
	/**
	 * Represents a quoted expression of the form:
	 *
	 * quote = prefix `:` uninterpretedExpression
	 * prefix = identifier
	 * uninterpretedExpression = arbitrary string
	 *
	 * A quoted expression is meant to be pre-processed by an AST transformer that
	 * converts it into another AST that no longer contains quoted expressions.
	 * It is meant to allow third-party developers to extend Angular template
	 * expression language. The `uninterpretedExpression` part of the quote is
	 * therefore not interpreted by the Angular's own expression parser.
	 */
	var Quote = /** @class */ (function (_super) {
	    __extends(Quote, _super);
	    function Quote(span, sourceSpan, prefix, uninterpretedExpression, location) {
	        var _this = _super.call(this, span, sourceSpan) || this;
	        _this.prefix = prefix;
	        _this.uninterpretedExpression = uninterpretedExpression;
	        _this.location = location;
	        return _this;
	    }
	    Quote.prototype.visit = function (visitor, context) {
	        if (context === void 0) { context = null; }
	        return visitor.visitQuote(this, context);
	    };
	    Quote.prototype.toString = function () {
	        return 'Quote';
	    };
	    return Quote;
	}(AST));
	var EmptyExpr = /** @class */ (function (_super) {
	    __extends(EmptyExpr, _super);
	    function EmptyExpr() {
	        return _super !== null && _super.apply(this, arguments) || this;
	    }
	    EmptyExpr.prototype.visit = function (visitor, context) {
	        // do nothing
	    };
	    return EmptyExpr;
	}(AST));
	var ImplicitReceiver = /** @class */ (function (_super) {
	    __extends(ImplicitReceiver, _super);
	    function ImplicitReceiver() {
	        return _super !== null && _super.apply(this, arguments) || this;
	    }
	    ImplicitReceiver.prototype.visit = function (visitor, context) {
	        if (context === void 0) { context = null; }
	        return visitor.visitImplicitReceiver(this, context);
	    };
	    return ImplicitReceiver;
	}(AST));
	/**
	 * Multiple expressions separated by a semicolon.
	 */
	var Chain = /** @class */ (function (_super) {
	    __extends(Chain, _super);
	    function Chain(span, sourceSpan, expressions) {
	        var _this = _super.call(this, span, sourceSpan) || this;
	        _this.expressions = expressions;
	        return _this;
	    }
	    Chain.prototype.visit = function (visitor, context) {
	        if (context === void 0) { context = null; }
	        return visitor.visitChain(this, context);
	    };
	    return Chain;
	}(AST));
	var Conditional = /** @class */ (function (_super) {
	    __extends(Conditional, _super);
	    function Conditional(span, sourceSpan, condition, trueExp, falseExp) {
	        var _this = _super.call(this, span, sourceSpan) || this;
	        _this.condition = condition;
	        _this.trueExp = trueExp;
	        _this.falseExp = falseExp;
	        return _this;
	    }
	    Conditional.prototype.visit = function (visitor, context) {
	        if (context === void 0) { context = null; }
	        return visitor.visitConditional(this, context);
	    };
	    return Conditional;
	}(AST));
	var PropertyRead = /** @class */ (function (_super) {
	    __extends(PropertyRead, _super);
	    function PropertyRead(span, sourceSpan, receiver, name) {
	        var _this = _super.call(this, span, sourceSpan) || this;
	        _this.receiver = receiver;
	        _this.name = name;
	        return _this;
	    }
	    PropertyRead.prototype.visit = function (visitor, context) {
	        if (context === void 0) { context = null; }
	        return visitor.visitPropertyRead(this, context);
	    };
	    return PropertyRead;
	}(AST));
	var PropertyWrite = /** @class */ (function (_super) {
	    __extends(PropertyWrite, _super);
	    function PropertyWrite(span, sourceSpan, receiver, name, value) {
	        var _this = _super.call(this, span, sourceSpan) || this;
	        _this.receiver = receiver;
	        _this.name = name;
	        _this.value = value;
	        return _this;
	    }
	    PropertyWrite.prototype.visit = function (visitor, context) {
	        if (context === void 0) { context = null; }
	        return visitor.visitPropertyWrite(this, context);
	    };
	    return PropertyWrite;
	}(AST));
	var SafePropertyRead = /** @class */ (function (_super) {
	    __extends(SafePropertyRead, _super);
	    function SafePropertyRead(span, sourceSpan, receiver, name) {
	        var _this = _super.call(this, span, sourceSpan) || this;
	        _this.receiver = receiver;
	        _this.name = name;
	        return _this;
	    }
	    SafePropertyRead.prototype.visit = function (visitor, context) {
	        if (context === void 0) { context = null; }
	        return visitor.visitSafePropertyRead(this, context);
	    };
	    return SafePropertyRead;
	}(AST));
	var KeyedRead = /** @class */ (function (_super) {
	    __extends(KeyedRead, _super);
	    function KeyedRead(span, sourceSpan, obj, key) {
	        var _this = _super.call(this, span, sourceSpan) || this;
	        _this.obj = obj;
	        _this.key = key;
	        return _this;
	    }
	    KeyedRead.prototype.visit = function (visitor, context) {
	        if (context === void 0) { context = null; }
	        return visitor.visitKeyedRead(this, context);
	    };
	    return KeyedRead;
	}(AST));
	var KeyedWrite = /** @class */ (function (_super) {
	    __extends(KeyedWrite, _super);
	    function KeyedWrite(span, sourceSpan, obj, key, value) {
	        var _this = _super.call(this, span, sourceSpan) || this;
	        _this.obj = obj;
	        _this.key = key;
	        _this.value = value;
	        return _this;
	    }
	    KeyedWrite.prototype.visit = function (visitor, context) {
	        if (context === void 0) { context = null; }
	        return visitor.visitKeyedWrite(this, context);
	    };
	    return KeyedWrite;
	}(AST));
	var BindingPipe = /** @class */ (function (_super) {
	    __extends(BindingPipe, _super);
	    function BindingPipe(span, sourceSpan, exp, name, args, nameSpan) {
	        var _this = _super.call(this, span, sourceSpan) || this;
	        _this.exp = exp;
	        _this.name = name;
	        _this.args = args;
	        _this.nameSpan = nameSpan;
	        return _this;
	    }
	    BindingPipe.prototype.visit = function (visitor, context) {
	        if (context === void 0) { context = null; }
	        return visitor.visitPipe(this, context);
	    };
	    return BindingPipe;
	}(AST));
	var LiteralPrimitive = /** @class */ (function (_super) {
	    __extends(LiteralPrimitive, _super);
	    function LiteralPrimitive(span, sourceSpan, value) {
	        var _this = _super.call(this, span, sourceSpan) || this;
	        _this.value = value;
	        return _this;
	    }
	    LiteralPrimitive.prototype.visit = function (visitor, context) {
	        if (context === void 0) { context = null; }
	        return visitor.visitLiteralPrimitive(this, context);
	    };
	    return LiteralPrimitive;
	}(AST));
	var LiteralArray = /** @class */ (function (_super) {
	    __extends(LiteralArray, _super);
	    function LiteralArray(span, sourceSpan, expressions) {
	        var _this = _super.call(this, span, sourceSpan) || this;
	        _this.expressions = expressions;
	        return _this;
	    }
	    LiteralArray.prototype.visit = function (visitor, context) {
	        if (context === void 0) { context = null; }
	        return visitor.visitLiteralArray(this, context);
	    };
	    return LiteralArray;
	}(AST));
	var LiteralMap = /** @class */ (function (_super) {
	    __extends(LiteralMap, _super);
	    function LiteralMap(span, sourceSpan, keys, values) {
	        var _this = _super.call(this, span, sourceSpan) || this;
	        _this.keys = keys;
	        _this.values = values;
	        return _this;
	    }
	    LiteralMap.prototype.visit = function (visitor, context) {
	        if (context === void 0) { context = null; }
	        return visitor.visitLiteralMap(this, context);
	    };
	    return LiteralMap;
	}(AST));
	var Interpolation = /** @class */ (function (_super) {
	    __extends(Interpolation, _super);
	    function Interpolation(span, sourceSpan, strings, expressions) {
	        var _this = _super.call(this, span, sourceSpan) || this;
	        _this.strings = strings;
	        _this.expressions = expressions;
	        return _this;
	    }
	    Interpolation.prototype.visit = function (visitor, context) {
	        if (context === void 0) { context = null; }
	        return visitor.visitInterpolation(this, context);
	    };
	    return Interpolation;
	}(AST));
	var Binary = /** @class */ (function (_super) {
	    __extends(Binary, _super);
	    function Binary(span, sourceSpan, operation, left, right) {
	        var _this = _super.call(this, span, sourceSpan) || this;
	        _this.operation = operation;
	        _this.left = left;
	        _this.right = right;
	        return _this;
	    }
	    Binary.prototype.visit = function (visitor, context) {
	        if (context === void 0) { context = null; }
	        return visitor.visitBinary(this, context);
	    };
	    return Binary;
	}(AST));
	var PrefixNot = /** @class */ (function (_super) {
	    __extends(PrefixNot, _super);
	    function PrefixNot(span, sourceSpan, expression) {
	        var _this = _super.call(this, span, sourceSpan) || this;
	        _this.expression = expression;
	        return _this;
	    }
	    PrefixNot.prototype.visit = function (visitor, context) {
	        if (context === void 0) { context = null; }
	        return visitor.visitPrefixNot(this, context);
	    };
	    return PrefixNot;
	}(AST));
	var NonNullAssert = /** @class */ (function (_super) {
	    __extends(NonNullAssert, _super);
	    function NonNullAssert(span, sourceSpan, expression) {
	        var _this = _super.call(this, span, sourceSpan) || this;
	        _this.expression = expression;
	        return _this;
	    }
	    NonNullAssert.prototype.visit = function (visitor, context) {
	        if (context === void 0) { context = null; }
	        return visitor.visitNonNullAssert(this, context);
	    };
	    return NonNullAssert;
	}(AST));
	var MethodCall = /** @class */ (function (_super) {
	    __extends(MethodCall, _super);
	    function MethodCall(span, sourceSpan, receiver, name, args) {
	        var _this = _super.call(this, span, sourceSpan) || this;
	        _this.receiver = receiver;
	        _this.name = name;
	        _this.args = args;
	        return _this;
	    }
	    MethodCall.prototype.visit = function (visitor, context) {
	        if (context === void 0) { context = null; }
	        return visitor.visitMethodCall(this, context);
	    };
	    return MethodCall;
	}(AST));
	var SafeMethodCall = /** @class */ (function (_super) {
	    __extends(SafeMethodCall, _super);
	    function SafeMethodCall(span, sourceSpan, receiver, name, args) {
	        var _this = _super.call(this, span, sourceSpan) || this;
	        _this.receiver = receiver;
	        _this.name = name;
	        _this.args = args;
	        return _this;
	    }
	    SafeMethodCall.prototype.visit = function (visitor, context) {
	        if (context === void 0) { context = null; }
	        return visitor.visitSafeMethodCall(this, context);
	    };
	    return SafeMethodCall;
	}(AST));
	var FunctionCall = /** @class */ (function (_super) {
	    __extends(FunctionCall, _super);
	    function FunctionCall(span, sourceSpan, target, args) {
	        var _this = _super.call(this, span, sourceSpan) || this;
	        _this.target = target;
	        _this.args = args;
	        return _this;
	    }
	    FunctionCall.prototype.visit = function (visitor, context) {
	        if (context === void 0) { context = null; }
	        return visitor.visitFunctionCall(this, context);
	    };
	    return FunctionCall;
	}(AST));
	/**
	 * Records the absolute position of a text span in a source file, where `start` and `end` are the
	 * starting and ending byte offsets, respectively, of the text span in a source file.
	 */
	var AbsoluteSourceSpan = /** @class */ (function () {
	    function AbsoluteSourceSpan(start, end) {
	        this.start = start;
	        this.end = end;
	    }
	    return AbsoluteSourceSpan;
	}());
	var ASTWithSource = /** @class */ (function (_super) {
	    __extends(ASTWithSource, _super);
	    function ASTWithSource(ast, source, location, absoluteOffset, errors) {
	        var _this = _super.call(this, new ParseSpan(0, source === null ? 0 : source.length), new AbsoluteSourceSpan(absoluteOffset, source === null ? absoluteOffset : absoluteOffset + source.length)) || this;
	        _this.ast = ast;
	        _this.source = source;
	        _this.location = location;
	        _this.errors = errors;
	        return _this;
	    }
	    ASTWithSource.prototype.visit = function (visitor, context) {
	        if (context === void 0) { context = null; }
	        if (visitor.visitASTWithSource) {
	            return visitor.visitASTWithSource(this, context);
	        }
	        return this.ast.visit(visitor, context);
	    };
	    ASTWithSource.prototype.toString = function () {
	        return this.source + " in " + this.location;
	    };
	    return ASTWithSource;
	}(AST));
	var VariableBinding = /** @class */ (function () {
	    /**
	     * @param sourceSpan entire span of the binding.
	     * @param key name of the LHS along with its span.
	     * @param value optional value for the RHS along with its span.
	     */
	    function VariableBinding(sourceSpan, key, value) {
	        this.sourceSpan = sourceSpan;
	        this.key = key;
	        this.value = value;
	    }
	    return VariableBinding;
	}());
	var ExpressionBinding = /** @class */ (function () {
	    /**
	     * @param sourceSpan entire span of the binding.
	     * @param key binding name, like ngForOf, ngForTrackBy, ngIf, along with its
	     * span. Note that the length of the span may not be the same as
	     * `key.source.length`. For example,
	     * 1. key.source = ngFor, key.span is for "ngFor"
	     * 2. key.source = ngForOf, key.span is for "of"
	     * 3. key.source = ngForTrackBy, key.span is for "trackBy"
	     * @param value optional expression for the RHS.
	     */
	    function ExpressionBinding(sourceSpan, key, value) {
	        this.sourceSpan = sourceSpan;
	        this.key = key;
	        this.value = value;
	    }
	    return ExpressionBinding;
	}());
	var RecursiveAstVisitor$1 = /** @class */ (function () {
	    function RecursiveAstVisitor() {
	    }
	    RecursiveAstVisitor.prototype.visit = function (ast, context) {
	        // The default implementation just visits every node.
	        // Classes that extend RecursiveAstVisitor should override this function
	        // to selectively visit the specified node.
	        ast.visit(this, context);
	    };
	    RecursiveAstVisitor.prototype.visitBinary = function (ast, context) {
	        this.visit(ast.left, context);
	        this.visit(ast.right, context);
	    };
	    RecursiveAstVisitor.prototype.visitChain = function (ast, context) {
	        this.visitAll(ast.expressions, context);
	    };
	    RecursiveAstVisitor.prototype.visitConditional = function (ast, context) {
	        this.visit(ast.condition, context);
	        this.visit(ast.trueExp, context);
	        this.visit(ast.falseExp, context);
	    };
	    RecursiveAstVisitor.prototype.visitPipe = function (ast, context) {
	        this.visit(ast.exp, context);
	        this.visitAll(ast.args, context);
	    };
	    RecursiveAstVisitor.prototype.visitFunctionCall = function (ast, context) {
	        if (ast.target) {
	            this.visit(ast.target, context);
	        }
	        this.visitAll(ast.args, context);
	    };
	    RecursiveAstVisitor.prototype.visitImplicitReceiver = function (ast, context) { };
	    RecursiveAstVisitor.prototype.visitInterpolation = function (ast, context) {
	        this.visitAll(ast.expressions, context);
	    };
	    RecursiveAstVisitor.prototype.visitKeyedRead = function (ast, context) {
	        this.visit(ast.obj, context);
	        this.visit(ast.key, context);
	    };
	    RecursiveAstVisitor.prototype.visitKeyedWrite = function (ast, context) {
	        this.visit(ast.obj, context);
	        this.visit(ast.key, context);
	        this.visit(ast.value, context);
	    };
	    RecursiveAstVisitor.prototype.visitLiteralArray = function (ast, context) {
	        this.visitAll(ast.expressions, context);
	    };
	    RecursiveAstVisitor.prototype.visitLiteralMap = function (ast, context) {
	        this.visitAll(ast.values, context);
	    };
	    RecursiveAstVisitor.prototype.visitLiteralPrimitive = function (ast, context) { };
	    RecursiveAstVisitor.prototype.visitMethodCall = function (ast, context) {
	        this.visit(ast.receiver, context);
	        this.visitAll(ast.args, context);
	    };
	    RecursiveAstVisitor.prototype.visitPrefixNot = function (ast, context) {
	        this.visit(ast.expression, context);
	    };
	    RecursiveAstVisitor.prototype.visitNonNullAssert = function (ast, context) {
	        this.visit(ast.expression, context);
	    };
	    RecursiveAstVisitor.prototype.visitPropertyRead = function (ast, context) {
	        this.visit(ast.receiver, context);
	    };
	    RecursiveAstVisitor.prototype.visitPropertyWrite = function (ast, context) {
	        this.visit(ast.receiver, context);
	        this.visit(ast.value, context);
	    };
	    RecursiveAstVisitor.prototype.visitSafePropertyRead = function (ast, context) {
	        this.visit(ast.receiver, context);
	    };
	    RecursiveAstVisitor.prototype.visitSafeMethodCall = function (ast, context) {
	        this.visit(ast.receiver, context);
	        this.visitAll(ast.args, context);
	    };
	    RecursiveAstVisitor.prototype.visitQuote = function (ast, context) { };
	    // This is not part of the AstVisitor interface, just a helper method
	    RecursiveAstVisitor.prototype.visitAll = function (asts, context) {
	        var e_1, _a;
	        try {
	            for (var asts_1 = __values(asts), asts_1_1 = asts_1.next(); !asts_1_1.done; asts_1_1 = asts_1.next()) {
	                var ast = asts_1_1.value;
	                this.visit(ast, context);
	            }
	        }
	        catch (e_1_1) { e_1 = { error: e_1_1 }; }
	        finally {
	            try {
	                if (asts_1_1 && !asts_1_1.done && (_a = asts_1.return)) _a.call(asts_1);
	            }
	            finally { if (e_1) throw e_1.error; }
	        }
	    };
	    return RecursiveAstVisitor;
	}());
	var AstTransformer$1 = /** @class */ (function () {
	    function AstTransformer() {
	    }
	    AstTransformer.prototype.visitImplicitReceiver = function (ast, context) {
	        return ast;
	    };
	    AstTransformer.prototype.visitInterpolation = function (ast, context) {
	        return new Interpolation(ast.span, ast.sourceSpan, ast.strings, this.visitAll(ast.expressions));
	    };
	    AstTransformer.prototype.visitLiteralPrimitive = function (ast, context) {
	        return new LiteralPrimitive(ast.span, ast.sourceSpan, ast.value);
	    };
	    AstTransformer.prototype.visitPropertyRead = function (ast, context) {
	        return new PropertyRead(ast.span, ast.sourceSpan, ast.receiver.visit(this), ast.name);
	    };
	    AstTransformer.prototype.visitPropertyWrite = function (ast, context) {
	        return new PropertyWrite(ast.span, ast.sourceSpan, ast.receiver.visit(this), ast.name, ast.value.visit(this));
	    };
	    AstTransformer.prototype.visitSafePropertyRead = function (ast, context) {
	        return new SafePropertyRead(ast.span, ast.sourceSpan, ast.receiver.visit(this), ast.name);
	    };
	    AstTransformer.prototype.visitMethodCall = function (ast, context) {
	        return new MethodCall(ast.span, ast.sourceSpan, ast.receiver.visit(this), ast.name, this.visitAll(ast.args));
	    };
	    AstTransformer.prototype.visitSafeMethodCall = function (ast, context) {
	        return new SafeMethodCall(ast.span, ast.sourceSpan, ast.receiver.visit(this), ast.name, this.visitAll(ast.args));
	    };
	    AstTransformer.prototype.visitFunctionCall = function (ast, context) {
	        return new FunctionCall(ast.span, ast.sourceSpan, ast.target.visit(this), this.visitAll(ast.args));
	    };
	    AstTransformer.prototype.visitLiteralArray = function (ast, context) {
	        return new LiteralArray(ast.span, ast.sourceSpan, this.visitAll(ast.expressions));
	    };
	    AstTransformer.prototype.visitLiteralMap = function (ast, context) {
	        return new LiteralMap(ast.span, ast.sourceSpan, ast.keys, this.visitAll(ast.values));
	    };
	    AstTransformer.prototype.visitBinary = function (ast, context) {
	        return new Binary(ast.span, ast.sourceSpan, ast.operation, ast.left.visit(this), ast.right.visit(this));
	    };
	    AstTransformer.prototype.visitPrefixNot = function (ast, context) {
	        return new PrefixNot(ast.span, ast.sourceSpan, ast.expression.visit(this));
	    };
	    AstTransformer.prototype.visitNonNullAssert = function (ast, context) {
	        return new NonNullAssert(ast.span, ast.sourceSpan, ast.expression.visit(this));
	    };
	    AstTransformer.prototype.visitConditional = function (ast, context) {
	        return new Conditional(ast.span, ast.sourceSpan, ast.condition.visit(this), ast.trueExp.visit(this), ast.falseExp.visit(this));
	    };
	    AstTransformer.prototype.visitPipe = function (ast, context) {
	        return new BindingPipe(ast.span, ast.sourceSpan, ast.exp.visit(this), ast.name, this.visitAll(ast.args), ast.nameSpan);
	    };
	    AstTransformer.prototype.visitKeyedRead = function (ast, context) {
	        return new KeyedRead(ast.span, ast.sourceSpan, ast.obj.visit(this), ast.key.visit(this));
	    };
	    AstTransformer.prototype.visitKeyedWrite = function (ast, context) {
	        return new KeyedWrite(ast.span, ast.sourceSpan, ast.obj.visit(this), ast.key.visit(this), ast.value.visit(this));
	    };
	    AstTransformer.prototype.visitAll = function (asts) {
	        var res = [];
	        for (var i = 0; i < asts.length; ++i) {
	            res[i] = asts[i].visit(this);
	        }
	        return res;
	    };
	    AstTransformer.prototype.visitChain = function (ast, context) {
	        return new Chain(ast.span, ast.sourceSpan, this.visitAll(ast.expressions));
	    };
	    AstTransformer.prototype.visitQuote = function (ast, context) {
	        return new Quote(ast.span, ast.sourceSpan, ast.prefix, ast.uninterpretedExpression, ast.location);
	    };
	    return AstTransformer;
	}());
	// A transformer that only creates new nodes if the transformer makes a change or
	// a change is made a child node.
	var AstMemoryEfficientTransformer = /** @class */ (function () {
	    function AstMemoryEfficientTransformer() {
	    }
	    AstMemoryEfficientTransformer.prototype.visitImplicitReceiver = function (ast, context) {
	        return ast;
	    };
	    AstMemoryEfficientTransformer.prototype.visitInterpolation = function (ast, context) {
	        var expressions = this.visitAll(ast.expressions);
	        if (expressions !== ast.expressions)
	            return new Interpolation(ast.span, ast.sourceSpan, ast.strings, expressions);
	        return ast;
	    };
	    AstMemoryEfficientTransformer.prototype.visitLiteralPrimitive = function (ast, context) {
	        return ast;
	    };
	    AstMemoryEfficientTransformer.prototype.visitPropertyRead = function (ast, context) {
	        var receiver = ast.receiver.visit(this);
	        if (receiver !== ast.receiver) {
	            return new PropertyRead(ast.span, ast.sourceSpan, receiver, ast.name);
	        }
	        return ast;
	    };
	    AstMemoryEfficientTransformer.prototype.visitPropertyWrite = function (ast, context) {
	        var receiver = ast.receiver.visit(this);
	        var value = ast.value.visit(this);
	        if (receiver !== ast.receiver || value !== ast.value) {
	            return new PropertyWrite(ast.span, ast.sourceSpan, receiver, ast.name, value);
	        }
	        return ast;
	    };
	    AstMemoryEfficientTransformer.prototype.visitSafePropertyRead = function (ast, context) {
	        var receiver = ast.receiver.visit(this);
	        if (receiver !== ast.receiver) {
	            return new SafePropertyRead(ast.span, ast.sourceSpan, receiver, ast.name);
	        }
	        return ast;
	    };
	    AstMemoryEfficientTransformer.prototype.visitMethodCall = function (ast, context) {
	        var receiver = ast.receiver.visit(this);
	        var args = this.visitAll(ast.args);
	        if (receiver !== ast.receiver || args !== ast.args) {
	            return new MethodCall(ast.span, ast.sourceSpan, receiver, ast.name, args);
	        }
	        return ast;
	    };
	    AstMemoryEfficientTransformer.prototype.visitSafeMethodCall = function (ast, context) {
	        var receiver = ast.receiver.visit(this);
	        var args = this.visitAll(ast.args);
	        if (receiver !== ast.receiver || args !== ast.args) {
	            return new SafeMethodCall(ast.span, ast.sourceSpan, receiver, ast.name, args);
	        }
	        return ast;
	    };
	    AstMemoryEfficientTransformer.prototype.visitFunctionCall = function (ast, context) {
	        var target = ast.target && ast.target.visit(this);
	        var args = this.visitAll(ast.args);
	        if (target !== ast.target || args !== ast.args) {
	            return new FunctionCall(ast.span, ast.sourceSpan, target, args);
	        }
	        return ast;
	    };
	    AstMemoryEfficientTransformer.prototype.visitLiteralArray = function (ast, context) {
	        var expressions = this.visitAll(ast.expressions);
	        if (expressions !== ast.expressions) {
	            return new LiteralArray(ast.span, ast.sourceSpan, expressions);
	        }
	        return ast;
	    };
	    AstMemoryEfficientTransformer.prototype.visitLiteralMap = function (ast, context) {
	        var values = this.visitAll(ast.values);
	        if (values !== ast.values) {
	            return new LiteralMap(ast.span, ast.sourceSpan, ast.keys, values);
	        }
	        return ast;
	    };
	    AstMemoryEfficientTransformer.prototype.visitBinary = function (ast, context) {
	        var left = ast.left.visit(this);
	        var right = ast.right.visit(this);
	        if (left !== ast.left || right !== ast.right) {
	            return new Binary(ast.span, ast.sourceSpan, ast.operation, left, right);
	        }
	        return ast;
	    };
	    AstMemoryEfficientTransformer.prototype.visitPrefixNot = function (ast, context) {
	        var expression = ast.expression.visit(this);
	        if (expression !== ast.expression) {
	            return new PrefixNot(ast.span, ast.sourceSpan, expression);
	        }
	        return ast;
	    };
	    AstMemoryEfficientTransformer.prototype.visitNonNullAssert = function (ast, context) {
	        var expression = ast.expression.visit(this);
	        if (expression !== ast.expression) {
	            return new NonNullAssert(ast.span, ast.sourceSpan, expression);
	        }
	        return ast;
	    };
	    AstMemoryEfficientTransformer.prototype.visitConditional = function (ast, context) {
	        var condition = ast.condition.visit(this);
	        var trueExp = ast.trueExp.visit(this);
	        var falseExp = ast.falseExp.visit(this);
	        if (condition !== ast.condition || trueExp !== ast.trueExp || falseExp !== ast.falseExp) {
	            return new Conditional(ast.span, ast.sourceSpan, condition, trueExp, falseExp);
	        }
	        return ast;
	    };
	    AstMemoryEfficientTransformer.prototype.visitPipe = function (ast, context) {
	        var exp = ast.exp.visit(this);
	        var args = this.visitAll(ast.args);
	        if (exp !== ast.exp || args !== ast.args) {
	            return new BindingPipe(ast.span, ast.sourceSpan, exp, ast.name, args, ast.nameSpan);
	        }
	        return ast;
	    };
	    AstMemoryEfficientTransformer.prototype.visitKeyedRead = function (ast, context) {
	        var obj = ast.obj.visit(this);
	        var key = ast.key.visit(this);
	        if (obj !== ast.obj || key !== ast.key) {
	            return new KeyedRead(ast.span, ast.sourceSpan, obj, key);
	        }
	        return ast;
	    };
	    AstMemoryEfficientTransformer.prototype.visitKeyedWrite = function (ast, context) {
	        var obj = ast.obj.visit(this);
	        var key = ast.key.visit(this);
	        var value = ast.value.visit(this);
	        if (obj !== ast.obj || key !== ast.key || value !== ast.value) {
	            return new KeyedWrite(ast.span, ast.sourceSpan, obj, key, value);
	        }
	        return ast;
	    };
	    AstMemoryEfficientTransformer.prototype.visitAll = function (asts) {
	        var res = [];
	        var modified = false;
	        for (var i = 0; i < asts.length; ++i) {
	            var original = asts[i];
	            var value = original.visit(this);
	            res[i] = value;
	            modified = modified || value !== original;
	        }
	        return modified ? res : asts;
	    };
	    AstMemoryEfficientTransformer.prototype.visitChain = function (ast, context) {
	        var expressions = this.visitAll(ast.expressions);
	        if (expressions !== ast.expressions) {
	            return new Chain(ast.span, ast.sourceSpan, expressions);
	        }
	        return ast;
	    };
	    AstMemoryEfficientTransformer.prototype.visitQuote = function (ast, context) {
	        return ast;
	    };
	    return AstMemoryEfficientTransformer;
	}());
	// Bindings
	var ParsedProperty = /** @class */ (function () {
	    function ParsedProperty(name, expression, type, sourceSpan, valueSpan) {
	        this.name = name;
	        this.expression = expression;
	        this.type = type;
	        this.sourceSpan = sourceSpan;
	        this.valueSpan = valueSpan;
	        this.isLiteral = this.type === ParsedPropertyType.LITERAL_ATTR;
	        this.isAnimation = this.type === ParsedPropertyType.ANIMATION;
	    }
	    return ParsedProperty;
	}());
	var ParsedPropertyType;
	(function (ParsedPropertyType) {
	    ParsedPropertyType[ParsedPropertyType["DEFAULT"] = 0] = "DEFAULT";
	    ParsedPropertyType[ParsedPropertyType["LITERAL_ATTR"] = 1] = "LITERAL_ATTR";
	    ParsedPropertyType[ParsedPropertyType["ANIMATION"] = 2] = "ANIMATION";
	})(ParsedPropertyType || (ParsedPropertyType = {}));
	var ParsedEvent = /** @class */ (function () {
	    // Regular events have a target
	    // Animation events have a phase
	    function ParsedEvent(name, targetOrPhase, type, handler, sourceSpan, handlerSpan) {
	        this.name = name;
	        this.targetOrPhase = targetOrPhase;
	        this.type = type;
	        this.handler = handler;
	        this.sourceSpan = sourceSpan;
	        this.handlerSpan = handlerSpan;
	    }
	    return ParsedEvent;
	}());
	/**
	 * ParsedVariable represents a variable declaration in a microsyntax expression.
	 */
	var ParsedVariable = /** @class */ (function () {
	    function ParsedVariable(name, value, sourceSpan, keySpan, valueSpan) {
	        this.name = name;
	        this.value = value;
	        this.sourceSpan = sourceSpan;
	        this.keySpan = keySpan;
	        this.valueSpan = valueSpan;
	    }
	    return ParsedVariable;
	}());
	var BoundElementProperty = /** @class */ (function () {
	    function BoundElementProperty(name, type, securityContext, value, unit, sourceSpan, valueSpan) {
	        this.name = name;
	        this.type = type;
	        this.securityContext = securityContext;
	        this.value = value;
	        this.unit = unit;
	        this.sourceSpan = sourceSpan;
	        this.valueSpan = valueSpan;
	    }
	    return BoundElementProperty;
	}());

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	var EventHandlerVars = /** @class */ (function () {
	    function EventHandlerVars() {
	    }
	    EventHandlerVars.event = variable('$event');
	    return EventHandlerVars;
	}());
	var ConvertActionBindingResult = /** @class */ (function () {
	    function ConvertActionBindingResult(
	    /**
	     * Render2 compatible statements,
	     */
	    stmts, 
	    /**
	     * Variable name used with render2 compatible statements.
	     */
	    allowDefault) {
	        this.stmts = stmts;
	        this.allowDefault = allowDefault;
	        /**
	         * This is bit of a hack. It converts statements which render2 expects to statements which are
	         * expected by render3.
	         *
	         * Example: `<div click="doSomething($event)">` will generate:
	         *
	         * Render3:
	         * ```
	         * const pd_b:any = ((<any>ctx.doSomething($event)) !== false);
	         * return pd_b;
	         * ```
	         *
	         * but render2 expects:
	         * ```
	         * return ctx.doSomething($event);
	         * ```
	         */
	        // TODO(misko): remove this hack once we no longer support ViewEngine.
	        this.render3Stmts = stmts.map(function (statement) {
	            if (statement instanceof DeclareVarStmt && statement.name == allowDefault.name &&
	                statement.value instanceof BinaryOperatorExpr) {
	                var lhs = statement.value.lhs;
	                return new ReturnStatement(lhs.value);
	            }
	            return statement;
	        });
	    }
	    return ConvertActionBindingResult;
	}());
	/**
	 * Converts the given expression AST into an executable output AST, assuming the expression is
	 * used in an action binding (e.g. an event handler).
	 */
	function convertActionBinding(localResolver, implicitReceiver, action, bindingId, interpolationFunction, baseSourceSpan, implicitReceiverAccesses) {
	    if (!localResolver) {
	        localResolver = new DefaultLocalResolver();
	    }
	    var actionWithoutBuiltins = convertPropertyBindingBuiltins({
	        createLiteralArrayConverter: function (argCount) {
	            // Note: no caching for literal arrays in actions.
	            return function (args) { return literalArr(args); };
	        },
	        createLiteralMapConverter: function (keys) {
	            // Note: no caching for literal maps in actions.
	            return function (values) {
	                var entries = keys.map(function (k, i) { return ({
	                    key: k.key,
	                    value: values[i],
	                    quoted: k.quoted,
	                }); });
	                return literalMap(entries);
	            };
	        },
	        createPipeConverter: function (name) {
	            throw new Error("Illegal State: Actions are not allowed to contain pipes. Pipe: " + name);
	        }
	    }, action);
	    var visitor = new _AstToIrVisitor(localResolver, implicitReceiver, bindingId, interpolationFunction, baseSourceSpan, implicitReceiverAccesses);
	    var actionStmts = [];
	    flattenStatements(actionWithoutBuiltins.visit(visitor, _Mode.Statement), actionStmts);
	    prependTemporaryDecls(visitor.temporaryCount, bindingId, actionStmts);
	    if (visitor.usesImplicitReceiver) {
	        localResolver.notifyImplicitReceiverUse();
	    }
	    var lastIndex = actionStmts.length - 1;
	    var preventDefaultVar = null;
	    if (lastIndex >= 0) {
	        var lastStatement = actionStmts[lastIndex];
	        var returnExpr = convertStmtIntoExpression(lastStatement);
	        if (returnExpr) {
	            // Note: We need to cast the result of the method call to dynamic,
	            // as it might be a void method!
	            preventDefaultVar = createPreventDefaultVar(bindingId);
	            actionStmts[lastIndex] =
	                preventDefaultVar.set(returnExpr.cast(DYNAMIC_TYPE).notIdentical(literal(false)))
	                    .toDeclStmt(null, [StmtModifier.Final]);
	        }
	    }
	    return new ConvertActionBindingResult(actionStmts, preventDefaultVar);
	}
	function convertPropertyBindingBuiltins(converterFactory, ast) {
	    return convertBuiltins(converterFactory, ast);
	}
	var ConvertPropertyBindingResult = /** @class */ (function () {
	    function ConvertPropertyBindingResult(stmts, currValExpr) {
	        this.stmts = stmts;
	        this.currValExpr = currValExpr;
	    }
	    return ConvertPropertyBindingResult;
	}());
	var BindingForm;
	(function (BindingForm) {
	    // The general form of binding expression, supports all expressions.
	    BindingForm[BindingForm["General"] = 0] = "General";
	    // Try to generate a simple binding (no temporaries or statements)
	    // otherwise generate a general binding
	    BindingForm[BindingForm["TrySimple"] = 1] = "TrySimple";
	})(BindingForm || (BindingForm = {}));
	/**
	 * Converts the given expression AST into an executable output AST, assuming the expression
	 * is used in property binding. The expression has to be preprocessed via
	 * `convertPropertyBindingBuiltins`.
	 */
	function convertPropertyBinding(localResolver, implicitReceiver, expressionWithoutBuiltins, bindingId, form, interpolationFunction) {
	    if (!localResolver) {
	        localResolver = new DefaultLocalResolver();
	    }
	    var currValExpr = createCurrValueExpr(bindingId);
	    var visitor = new _AstToIrVisitor(localResolver, implicitReceiver, bindingId, interpolationFunction);
	    var outputExpr = expressionWithoutBuiltins.visit(visitor, _Mode.Expression);
	    var stmts = getStatementsFromVisitor(visitor, bindingId);
	    if (visitor.usesImplicitReceiver) {
	        localResolver.notifyImplicitReceiverUse();
	    }
	    if (visitor.temporaryCount === 0 && form == BindingForm.TrySimple) {
	        return new ConvertPropertyBindingResult([], outputExpr);
	    }
	    stmts.push(currValExpr.set(outputExpr).toDeclStmt(DYNAMIC_TYPE, [StmtModifier.Final]));
	    return new ConvertPropertyBindingResult(stmts, currValExpr);
	}
	/**
	 * Given some expression, such as a binding or interpolation expression, and a context expression to
	 * look values up on, visit each facet of the given expression resolving values from the context
	 * expression such that a list of arguments can be derived from the found values that can be used as
	 * arguments to an external update instruction.
	 *
	 * @param localResolver The resolver to use to look up expressions by name appropriately
	 * @param contextVariableExpression The expression representing the context variable used to create
	 * the final argument expressions
	 * @param expressionWithArgumentsToExtract The expression to visit to figure out what values need to
	 * be resolved and what arguments list to build.
	 * @param bindingId A name prefix used to create temporary variable names if they're needed for the
	 * arguments generated
	 * @returns An array of expressions that can be passed as arguments to instruction expressions like
	 * `o.importExpr(R3.propertyInterpolate).callFn(result)`
	 */
	function convertUpdateArguments(localResolver, contextVariableExpression, expressionWithArgumentsToExtract, bindingId) {
	    var visitor = new _AstToIrVisitor(localResolver, contextVariableExpression, bindingId, undefined);
	    var outputExpr = expressionWithArgumentsToExtract.visit(visitor, _Mode.Expression);
	    if (visitor.usesImplicitReceiver) {
	        localResolver.notifyImplicitReceiverUse();
	    }
	    var stmts = getStatementsFromVisitor(visitor, bindingId);
	    // Removing the first argument, because it was a length for ViewEngine, not Ivy.
	    var args = outputExpr.args.slice(1);
	    if (expressionWithArgumentsToExtract instanceof Interpolation) {
	        // If we're dealing with an interpolation of 1 value with an empty prefix and suffix, reduce the
	        // args returned to just the value, because we're going to pass it to a special instruction.
	        var strings = expressionWithArgumentsToExtract.strings;
	        if (args.length === 3 && strings[0] === '' && strings[1] === '') {
	            // Single argument interpolate instructions.
	            args = [args[1]];
	        }
	        else if (args.length >= 19) {
	            // 19 or more arguments must be passed to the `interpolateV`-style instructions, which accept
	            // an array of arguments
	            args = [literalArr(args)];
	        }
	    }
	    return { stmts: stmts, args: args };
	}
	function getStatementsFromVisitor(visitor, bindingId) {
	    var stmts = [];
	    for (var i = 0; i < visitor.temporaryCount; i++) {
	        stmts.push(temporaryDeclaration(bindingId, i));
	    }
	    return stmts;
	}
	function convertBuiltins(converterFactory, ast) {
	    var visitor = new _BuiltinAstConverter(converterFactory);
	    return ast.visit(visitor);
	}
	function temporaryName(bindingId, temporaryNumber) {
	    return "tmp_" + bindingId + "_" + temporaryNumber;
	}
	function temporaryDeclaration(bindingId, temporaryNumber) {
	    return new DeclareVarStmt(temporaryName(bindingId, temporaryNumber), NULL_EXPR);
	}
	function prependTemporaryDecls(temporaryCount, bindingId, statements) {
	    for (var i = temporaryCount - 1; i >= 0; i--) {
	        statements.unshift(temporaryDeclaration(bindingId, i));
	    }
	}
	var _Mode;
	(function (_Mode) {
	    _Mode[_Mode["Statement"] = 0] = "Statement";
	    _Mode[_Mode["Expression"] = 1] = "Expression";
	})(_Mode || (_Mode = {}));
	function ensureStatementMode(mode, ast) {
	    if (mode !== _Mode.Statement) {
	        throw new Error("Expected a statement, but saw " + ast);
	    }
	}
	function ensureExpressionMode(mode, ast) {
	    if (mode !== _Mode.Expression) {
	        throw new Error("Expected an expression, but saw " + ast);
	    }
	}
	function convertToStatementIfNeeded(mode, expr) {
	    if (mode === _Mode.Statement) {
	        return expr.toStmt();
	    }
	    else {
	        return expr;
	    }
	}
	var _BuiltinAstConverter = /** @class */ (function (_super) {
	    __extends(_BuiltinAstConverter, _super);
	    function _BuiltinAstConverter(_converterFactory) {
	        var _this = _super.call(this) || this;
	        _this._converterFactory = _converterFactory;
	        return _this;
	    }
	    _BuiltinAstConverter.prototype.visitPipe = function (ast, context) {
	        var _this = this;
	        var args = __spread([ast.exp], ast.args).map(function (ast) { return ast.visit(_this, context); });
	        return new BuiltinFunctionCall(ast.span, ast.sourceSpan, args, this._converterFactory.createPipeConverter(ast.name, args.length));
	    };
	    _BuiltinAstConverter.prototype.visitLiteralArray = function (ast, context) {
	        var _this = this;
	        var args = ast.expressions.map(function (ast) { return ast.visit(_this, context); });
	        return new BuiltinFunctionCall(ast.span, ast.sourceSpan, args, this._converterFactory.createLiteralArrayConverter(ast.expressions.length));
	    };
	    _BuiltinAstConverter.prototype.visitLiteralMap = function (ast, context) {
	        var _this = this;
	        var args = ast.values.map(function (ast) { return ast.visit(_this, context); });
	        return new BuiltinFunctionCall(ast.span, ast.sourceSpan, args, this._converterFactory.createLiteralMapConverter(ast.keys));
	    };
	    return _BuiltinAstConverter;
	}(AstTransformer$1));
	var _AstToIrVisitor = /** @class */ (function () {
	    function _AstToIrVisitor(_localResolver, _implicitReceiver, bindingId, interpolationFunction, baseSourceSpan, implicitReceiverAccesses) {
	        this._localResolver = _localResolver;
	        this._implicitReceiver = _implicitReceiver;
	        this.bindingId = bindingId;
	        this.interpolationFunction = interpolationFunction;
	        this.baseSourceSpan = baseSourceSpan;
	        this.implicitReceiverAccesses = implicitReceiverAccesses;
	        this._nodeMap = new Map();
	        this._resultMap = new Map();
	        this._currentTemporary = 0;
	        this.temporaryCount = 0;
	        this.usesImplicitReceiver = false;
	    }
	    _AstToIrVisitor.prototype.visitBinary = function (ast, mode) {
	        var op;
	        switch (ast.operation) {
	            case '+':
	                op = BinaryOperator.Plus;
	                break;
	            case '-':
	                op = BinaryOperator.Minus;
	                break;
	            case '*':
	                op = BinaryOperator.Multiply;
	                break;
	            case '/':
	                op = BinaryOperator.Divide;
	                break;
	            case '%':
	                op = BinaryOperator.Modulo;
	                break;
	            case '&&':
	                op = BinaryOperator.And;
	                break;
	            case '||':
	                op = BinaryOperator.Or;
	                break;
	            case '==':
	                op = BinaryOperator.Equals;
	                break;
	            case '!=':
	                op = BinaryOperator.NotEquals;
	                break;
	            case '===':
	                op = BinaryOperator.Identical;
	                break;
	            case '!==':
	                op = BinaryOperator.NotIdentical;
	                break;
	            case '<':
	                op = BinaryOperator.Lower;
	                break;
	            case '>':
	                op = BinaryOperator.Bigger;
	                break;
	            case '<=':
	                op = BinaryOperator.LowerEquals;
	                break;
	            case '>=':
	                op = BinaryOperator.BiggerEquals;
	                break;
	            default:
	                throw new Error("Unsupported operation " + ast.operation);
	        }
	        return convertToStatementIfNeeded(mode, new BinaryOperatorExpr(op, this._visit(ast.left, _Mode.Expression), this._visit(ast.right, _Mode.Expression), undefined, this.convertSourceSpan(ast.span)));
	    };
	    _AstToIrVisitor.prototype.visitChain = function (ast, mode) {
	        ensureStatementMode(mode, ast);
	        return this.visitAll(ast.expressions, mode);
	    };
	    _AstToIrVisitor.prototype.visitConditional = function (ast, mode) {
	        var value = this._visit(ast.condition, _Mode.Expression);
	        return convertToStatementIfNeeded(mode, value.conditional(this._visit(ast.trueExp, _Mode.Expression), this._visit(ast.falseExp, _Mode.Expression), this.convertSourceSpan(ast.span)));
	    };
	    _AstToIrVisitor.prototype.visitPipe = function (ast, mode) {
	        throw new Error("Illegal state: Pipes should have been converted into functions. Pipe: " + ast.name);
	    };
	    _AstToIrVisitor.prototype.visitFunctionCall = function (ast, mode) {
	        var convertedArgs = this.visitAll(ast.args, _Mode.Expression);
	        var fnResult;
	        if (ast instanceof BuiltinFunctionCall) {
	            fnResult = ast.converter(convertedArgs);
	        }
	        else {
	            fnResult = this._visit(ast.target, _Mode.Expression)
	                .callFn(convertedArgs, this.convertSourceSpan(ast.span));
	        }
	        return convertToStatementIfNeeded(mode, fnResult);
	    };
	    _AstToIrVisitor.prototype.visitImplicitReceiver = function (ast, mode) {
	        ensureExpressionMode(mode, ast);
	        this.usesImplicitReceiver = true;
	        return this._implicitReceiver;
	    };
	    _AstToIrVisitor.prototype.visitInterpolation = function (ast, mode) {
	        ensureExpressionMode(mode, ast);
	        var args = [literal(ast.expressions.length)];
	        for (var i = 0; i < ast.strings.length - 1; i++) {
	            args.push(literal(ast.strings[i]));
	            args.push(this._visit(ast.expressions[i], _Mode.Expression));
	        }
	        args.push(literal(ast.strings[ast.strings.length - 1]));
	        if (this.interpolationFunction) {
	            return this.interpolationFunction(args);
	        }
	        return ast.expressions.length <= 9 ?
	            importExpr(Identifiers.inlineInterpolate).callFn(args) :
	            importExpr(Identifiers.interpolate).callFn([
	                args[0], literalArr(args.slice(1), undefined, this.convertSourceSpan(ast.span))
	            ]);
	    };
	    _AstToIrVisitor.prototype.visitKeyedRead = function (ast, mode) {
	        var leftMostSafe = this.leftMostSafeNode(ast);
	        if (leftMostSafe) {
	            return this.convertSafeAccess(ast, leftMostSafe, mode);
	        }
	        else {
	            return convertToStatementIfNeeded(mode, this._visit(ast.obj, _Mode.Expression).key(this._visit(ast.key, _Mode.Expression)));
	        }
	    };
	    _AstToIrVisitor.prototype.visitKeyedWrite = function (ast, mode) {
	        var obj = this._visit(ast.obj, _Mode.Expression);
	        var key = this._visit(ast.key, _Mode.Expression);
	        var value = this._visit(ast.value, _Mode.Expression);
	        return convertToStatementIfNeeded(mode, obj.key(key).set(value));
	    };
	    _AstToIrVisitor.prototype.visitLiteralArray = function (ast, mode) {
	        throw new Error("Illegal State: literal arrays should have been converted into functions");
	    };
	    _AstToIrVisitor.prototype.visitLiteralMap = function (ast, mode) {
	        throw new Error("Illegal State: literal maps should have been converted into functions");
	    };
	    _AstToIrVisitor.prototype.visitLiteralPrimitive = function (ast, mode) {
	        // For literal values of null, undefined, true, or false allow type interference
	        // to infer the type.
	        var type = ast.value === null || ast.value === undefined || ast.value === true || ast.value === true ?
	            INFERRED_TYPE :
	            undefined;
	        return convertToStatementIfNeeded(mode, literal(ast.value, type, this.convertSourceSpan(ast.span)));
	    };
	    _AstToIrVisitor.prototype._getLocal = function (name) {
	        return this._localResolver.getLocal(name);
	    };
	    _AstToIrVisitor.prototype.visitMethodCall = function (ast, mode) {
	        if (ast.receiver instanceof ImplicitReceiver && ast.name == '$any') {
	            var args = this.visitAll(ast.args, _Mode.Expression);
	            if (args.length != 1) {
	                throw new Error("Invalid call to $any, expected 1 argument but received " + (args.length || 'none'));
	            }
	            return args[0].cast(DYNAMIC_TYPE, this.convertSourceSpan(ast.span));
	        }
	        var leftMostSafe = this.leftMostSafeNode(ast);
	        if (leftMostSafe) {
	            return this.convertSafeAccess(ast, leftMostSafe, mode);
	        }
	        else {
	            var args = this.visitAll(ast.args, _Mode.Expression);
	            var prevUsesImplicitReceiver = this.usesImplicitReceiver;
	            var result = null;
	            var receiver = this._visit(ast.receiver, _Mode.Expression);
	            if (receiver === this._implicitReceiver) {
	                var varExpr = this._getLocal(ast.name);
	                if (varExpr) {
	                    // Restore the previous "usesImplicitReceiver" state since the implicit
	                    // receiver has been replaced with a resolved local expression.
	                    this.usesImplicitReceiver = prevUsesImplicitReceiver;
	                    result = varExpr.callFn(args);
	                }
	                this.addImplicitReceiverAccess(ast.name);
	            }
	            if (result == null) {
	                result = receiver.callMethod(ast.name, args, this.convertSourceSpan(ast.span));
	            }
	            return convertToStatementIfNeeded(mode, result);
	        }
	    };
	    _AstToIrVisitor.prototype.visitPrefixNot = function (ast, mode) {
	        return convertToStatementIfNeeded(mode, not(this._visit(ast.expression, _Mode.Expression)));
	    };
	    _AstToIrVisitor.prototype.visitNonNullAssert = function (ast, mode) {
	        return convertToStatementIfNeeded(mode, assertNotNull(this._visit(ast.expression, _Mode.Expression)));
	    };
	    _AstToIrVisitor.prototype.visitPropertyRead = function (ast, mode) {
	        var leftMostSafe = this.leftMostSafeNode(ast);
	        if (leftMostSafe) {
	            return this.convertSafeAccess(ast, leftMostSafe, mode);
	        }
	        else {
	            var result = null;
	            var prevUsesImplicitReceiver = this.usesImplicitReceiver;
	            var receiver = this._visit(ast.receiver, _Mode.Expression);
	            if (receiver === this._implicitReceiver) {
	                result = this._getLocal(ast.name);
	                if (result) {
	                    // Restore the previous "usesImplicitReceiver" state since the implicit
	                    // receiver has been replaced with a resolved local expression.
	                    this.usesImplicitReceiver = prevUsesImplicitReceiver;
	                }
	                this.addImplicitReceiverAccess(ast.name);
	            }
	            if (result == null) {
	                result = receiver.prop(ast.name);
	            }
	            return convertToStatementIfNeeded(mode, result);
	        }
	    };
	    _AstToIrVisitor.prototype.visitPropertyWrite = function (ast, mode) {
	        var receiver = this._visit(ast.receiver, _Mode.Expression);
	        var prevUsesImplicitReceiver = this.usesImplicitReceiver;
	        var varExpr = null;
	        if (receiver === this._implicitReceiver) {
	            var localExpr = this._getLocal(ast.name);
	            if (localExpr) {
	                if (localExpr instanceof ReadPropExpr) {
	                    // If the local variable is a property read expression, it's a reference
	                    // to a 'context.property' value and will be used as the target of the
	                    // write expression.
	                    varExpr = localExpr;
	                    // Restore the previous "usesImplicitReceiver" state since the implicit
	                    // receiver has been replaced with a resolved local expression.
	                    this.usesImplicitReceiver = prevUsesImplicitReceiver;
	                    this.addImplicitReceiverAccess(ast.name);
	                }
	                else {
	                    // Otherwise it's an error.
	                    var receiver_1 = ast.name;
	                    var value = (ast.value instanceof PropertyRead) ? ast.value.name : undefined;
	                    throw new Error("Cannot assign value \"" + value + "\" to template variable \"" + receiver_1 + "\". Template variables are read-only.");
	                }
	            }
	        }
	        // If no local expression could be produced, use the original receiver's
	        // property as the target.
	        if (varExpr === null) {
	            varExpr = receiver.prop(ast.name);
	        }
	        return convertToStatementIfNeeded(mode, varExpr.set(this._visit(ast.value, _Mode.Expression)));
	    };
	    _AstToIrVisitor.prototype.visitSafePropertyRead = function (ast, mode) {
	        return this.convertSafeAccess(ast, this.leftMostSafeNode(ast), mode);
	    };
	    _AstToIrVisitor.prototype.visitSafeMethodCall = function (ast, mode) {
	        return this.convertSafeAccess(ast, this.leftMostSafeNode(ast), mode);
	    };
	    _AstToIrVisitor.prototype.visitAll = function (asts, mode) {
	        var _this = this;
	        return asts.map(function (ast) { return _this._visit(ast, mode); });
	    };
	    _AstToIrVisitor.prototype.visitQuote = function (ast, mode) {
	        throw new Error("Quotes are not supported for evaluation!\n        Statement: " + ast.uninterpretedExpression + " located at " + ast.location);
	    };
	    _AstToIrVisitor.prototype._visit = function (ast, mode) {
	        var result = this._resultMap.get(ast);
	        if (result)
	            return result;
	        return (this._nodeMap.get(ast) || ast).visit(this, mode);
	    };
	    _AstToIrVisitor.prototype.convertSafeAccess = function (ast, leftMostSafe, mode) {
	        // If the expression contains a safe access node on the left it needs to be converted to
	        // an expression that guards the access to the member by checking the receiver for blank. As
	        // execution proceeds from left to right, the left most part of the expression must be guarded
	        // first but, because member access is left associative, the right side of the expression is at
	        // the top of the AST. The desired result requires lifting a copy of the left part of the
	        // expression up to test it for blank before generating the unguarded version.
	        // Consider, for example the following expression: a?.b.c?.d.e
	        // This results in the ast:
	        //         .
	        //        / \
	        //       ?.   e
	        //      /  \
	        //     .    d
	        //    / \
	        //   ?.  c
	        //  /  \
	        // a    b
	        // The following tree should be generated:
	        //
	        //        /---- ? ----\
	        //       /      |      \
	        //     a   /--- ? ---\  null
	        //        /     |     \
	        //       .      .     null
	        //      / \    / \
	        //     .  c   .   e
	        //    / \    / \
	        //   a   b  .   d
	        //         / \
	        //        .   c
	        //       / \
	        //      a   b
	        //
	        // Notice that the first guard condition is the left hand of the left most safe access node
	        // which comes in as leftMostSafe to this routine.
	        var guardedExpression = this._visit(leftMostSafe.receiver, _Mode.Expression);
	        var temporary = undefined;
	        if (this.needsTemporary(leftMostSafe.receiver)) {
	            // If the expression has method calls or pipes then we need to save the result into a
	            // temporary variable to avoid calling stateful or impure code more than once.
	            temporary = this.allocateTemporary();
	            // Preserve the result in the temporary variable
	            guardedExpression = temporary.set(guardedExpression);
	            // Ensure all further references to the guarded expression refer to the temporary instead.
	            this._resultMap.set(leftMostSafe.receiver, temporary);
	        }
	        var condition = guardedExpression.isBlank();
	        // Convert the ast to an unguarded access to the receiver's member. The map will substitute
	        // leftMostNode with its unguarded version in the call to `this.visit()`.
	        if (leftMostSafe instanceof SafeMethodCall) {
	            this._nodeMap.set(leftMostSafe, new MethodCall(leftMostSafe.span, leftMostSafe.sourceSpan, leftMostSafe.receiver, leftMostSafe.name, leftMostSafe.args));
	        }
	        else {
	            this._nodeMap.set(leftMostSafe, new PropertyRead(leftMostSafe.span, leftMostSafe.sourceSpan, leftMostSafe.receiver, leftMostSafe.name));
	        }
	        // Recursively convert the node now without the guarded member access.
	        var access = this._visit(ast, _Mode.Expression);
	        // Remove the mapping. This is not strictly required as the converter only traverses each node
	        // once but is safer if the conversion is changed to traverse the nodes more than once.
	        this._nodeMap.delete(leftMostSafe);
	        // If we allocated a temporary, release it.
	        if (temporary) {
	            this.releaseTemporary(temporary);
	        }
	        // Produce the conditional
	        return convertToStatementIfNeeded(mode, condition.conditional(literal(null), access));
	    };
	    // Given an expression of the form a?.b.c?.d.e then the left most safe node is
	    // the (a?.b). The . and ?. are left associative thus can be rewritten as:
	    // ((((a?.c).b).c)?.d).e. This returns the most deeply nested safe read or
	    // safe method call as this needs to be transformed initially to:
	    //   a == null ? null : a.c.b.c?.d.e
	    // then to:
	    //   a == null ? null : a.b.c == null ? null : a.b.c.d.e
	    _AstToIrVisitor.prototype.leftMostSafeNode = function (ast) {
	        var _this = this;
	        var visit = function (visitor, ast) {
	            return (_this._nodeMap.get(ast) || ast).visit(visitor);
	        };
	        return ast.visit({
	            visitBinary: function (ast) {
	                return null;
	            },
	            visitChain: function (ast) {
	                return null;
	            },
	            visitConditional: function (ast) {
	                return null;
	            },
	            visitFunctionCall: function (ast) {
	                return null;
	            },
	            visitImplicitReceiver: function (ast) {
	                return null;
	            },
	            visitInterpolation: function (ast) {
	                return null;
	            },
	            visitKeyedRead: function (ast) {
	                return visit(this, ast.obj);
	            },
	            visitKeyedWrite: function (ast) {
	                return null;
	            },
	            visitLiteralArray: function (ast) {
	                return null;
	            },
	            visitLiteralMap: function (ast) {
	                return null;
	            },
	            visitLiteralPrimitive: function (ast) {
	                return null;
	            },
	            visitMethodCall: function (ast) {
	                return visit(this, ast.receiver);
	            },
	            visitPipe: function (ast) {
	                return null;
	            },
	            visitPrefixNot: function (ast) {
	                return null;
	            },
	            visitNonNullAssert: function (ast) {
	                return null;
	            },
	            visitPropertyRead: function (ast) {
	                return visit(this, ast.receiver);
	            },
	            visitPropertyWrite: function (ast) {
	                return null;
	            },
	            visitQuote: function (ast) {
	                return null;
	            },
	            visitSafeMethodCall: function (ast) {
	                return visit(this, ast.receiver) || ast;
	            },
	            visitSafePropertyRead: function (ast) {
	                return visit(this, ast.receiver) || ast;
	            }
	        });
	    };
	    // Returns true of the AST includes a method or a pipe indicating that, if the
	    // expression is used as the target of a safe property or method access then
	    // the expression should be stored into a temporary variable.
	    _AstToIrVisitor.prototype.needsTemporary = function (ast) {
	        var _this = this;
	        var visit = function (visitor, ast) {
	            return ast && (_this._nodeMap.get(ast) || ast).visit(visitor);
	        };
	        var visitSome = function (visitor, ast) {
	            return ast.some(function (ast) { return visit(visitor, ast); });
	        };
	        return ast.visit({
	            visitBinary: function (ast) {
	                return visit(this, ast.left) || visit(this, ast.right);
	            },
	            visitChain: function (ast) {
	                return false;
	            },
	            visitConditional: function (ast) {
	                return visit(this, ast.condition) || visit(this, ast.trueExp) || visit(this, ast.falseExp);
	            },
	            visitFunctionCall: function (ast) {
	                return true;
	            },
	            visitImplicitReceiver: function (ast) {
	                return false;
	            },
	            visitInterpolation: function (ast) {
	                return visitSome(this, ast.expressions);
	            },
	            visitKeyedRead: function (ast) {
	                return false;
	            },
	            visitKeyedWrite: function (ast) {
	                return false;
	            },
	            visitLiteralArray: function (ast) {
	                return true;
	            },
	            visitLiteralMap: function (ast) {
	                return true;
	            },
	            visitLiteralPrimitive: function (ast) {
	                return false;
	            },
	            visitMethodCall: function (ast) {
	                return true;
	            },
	            visitPipe: function (ast) {
	                return true;
	            },
	            visitPrefixNot: function (ast) {
	                return visit(this, ast.expression);
	            },
	            visitNonNullAssert: function (ast) {
	                return visit(this, ast.expression);
	            },
	            visitPropertyRead: function (ast) {
	                return false;
	            },
	            visitPropertyWrite: function (ast) {
	                return false;
	            },
	            visitQuote: function (ast) {
	                return false;
	            },
	            visitSafeMethodCall: function (ast) {
	                return true;
	            },
	            visitSafePropertyRead: function (ast) {
	                return false;
	            }
	        });
	    };
	    _AstToIrVisitor.prototype.allocateTemporary = function () {
	        var tempNumber = this._currentTemporary++;
	        this.temporaryCount = Math.max(this._currentTemporary, this.temporaryCount);
	        return new ReadVarExpr(temporaryName(this.bindingId, tempNumber));
	    };
	    _AstToIrVisitor.prototype.releaseTemporary = function (temporary) {
	        this._currentTemporary--;
	        if (temporary.name != temporaryName(this.bindingId, this._currentTemporary)) {
	            throw new Error("Temporary " + temporary.name + " released out of order");
	        }
	    };
	    /**
	     * Creates an absolute `ParseSourceSpan` from the relative `ParseSpan`.
	     *
	     * `ParseSpan` objects are relative to the start of the expression.
	     * This method converts these to full `ParseSourceSpan` objects that
	     * show where the span is within the overall source file.
	     *
	     * @param span the relative span to convert.
	     * @returns a `ParseSourceSpan` for the given span or null if no
	     * `baseSourceSpan` was provided to this class.
	     */
	    _AstToIrVisitor.prototype.convertSourceSpan = function (span) {
	        if (this.baseSourceSpan) {
	            var start = this.baseSourceSpan.start.moveBy(span.start);
	            var end = this.baseSourceSpan.start.moveBy(span.end);
	            return new ParseSourceSpan(start, end);
	        }
	        else {
	            return null;
	        }
	    };
	    /** Adds the name of an AST to the list of implicit receiver accesses. */
	    _AstToIrVisitor.prototype.addImplicitReceiverAccess = function (name) {
	        if (this.implicitReceiverAccesses) {
	            this.implicitReceiverAccesses.add(name);
	        }
	    };
	    return _AstToIrVisitor;
	}());
	function flattenStatements(arg, output) {
	    if (Array.isArray(arg)) {
	        arg.forEach(function (entry) { return flattenStatements(entry, output); });
	    }
	    else {
	        output.push(arg);
	    }
	}
	var DefaultLocalResolver = /** @class */ (function () {
	    function DefaultLocalResolver() {
	    }
	    DefaultLocalResolver.prototype.notifyImplicitReceiverUse = function () { };
	    DefaultLocalResolver.prototype.getLocal = function (name) {
	        if (name === EventHandlerVars.event.name) {
	            return EventHandlerVars.event;
	        }
	        return null;
	    };
	    return DefaultLocalResolver;
	}());
	function createCurrValueExpr(bindingId) {
	    return variable("currVal_" + bindingId); // fix syntax highlighting: `
	}
	function createPreventDefaultVar(bindingId) {
	    return variable("pd_" + bindingId);
	}
	function convertStmtIntoExpression(stmt) {
	    if (stmt instanceof ExpressionStatement) {
	        return stmt.expr;
	    }
	    else if (stmt instanceof ReturnStatement) {
	        return stmt.value;
	    }
	    return null;
	}
	var BuiltinFunctionCall = /** @class */ (function (_super) {
	    __extends(BuiltinFunctionCall, _super);
	    function BuiltinFunctionCall(span, sourceSpan, args, converter) {
	        var _this = _super.call(this, span, sourceSpan, null, args) || this;
	        _this.args = args;
	        _this.converter = converter;
	        return _this;
	    }
	    return BuiltinFunctionCall;
	}(FunctionCall));

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * This file is a port of shadowCSS from webcomponents.js to TypeScript.
	 *
	 * Please make sure to keep to edits in sync with the source file.
	 *
	 * Source:
	 * https://github.com/webcomponents/webcomponentsjs/blob/4efecd7e0e/src/ShadowCSS/ShadowCSS.js
	 *
	 * The original file level comment is reproduced below
	 */
	/*
	  This is a limited shim for ShadowDOM css styling.
	  https://dvcs.w3.org/hg/webcomponents/raw-file/tip/spec/shadow/index.html#styles

	  The intention here is to support only the styling features which can be
	  relatively simply implemented. The goal is to allow users to avoid the
	  most obvious pitfalls and do so without compromising performance significantly.
	  For ShadowDOM styling that's not covered here, a set of best practices
	  can be provided that should allow users to accomplish more complex styling.

	  The following is a list of specific ShadowDOM styling features and a brief
	  discussion of the approach used to shim.

	  Shimmed features:

	  * :host, :host-context: ShadowDOM allows styling of the shadowRoot's host
	  element using the :host rule. To shim this feature, the :host styles are
	  reformatted and prefixed with a given scope name and promoted to a
	  document level stylesheet.
	  For example, given a scope name of .foo, a rule like this:

	    :host {
	        background: red;
	      }
	    }

	  becomes:

	    .foo {
	      background: red;
	    }

	  * encapsulation: Styles defined within ShadowDOM, apply only to
	  dom inside the ShadowDOM. Polymer uses one of two techniques to implement
	  this feature.

	  By default, rules are prefixed with the host element tag name
	  as a descendant selector. This ensures styling does not leak out of the 'top'
	  of the element's ShadowDOM. For example,

	  div {
	      font-weight: bold;
	    }

	  becomes:

	  x-foo div {
	      font-weight: bold;
	    }

	  becomes:


	  Alternatively, if WebComponents.ShadowCSS.strictStyling is set to true then
	  selectors are scoped by adding an attribute selector suffix to each
	  simple selector that contains the host element tag name. Each element
	  in the element's ShadowDOM template is also given the scope attribute.
	  Thus, these rules match only elements that have the scope attribute.
	  For example, given a scope name of x-foo, a rule like this:

	    div {
	      font-weight: bold;
	    }

	  becomes:

	    div[x-foo] {
	      font-weight: bold;
	    }

	  Note that elements that are dynamically added to a scope must have the scope
	  selector added to them manually.

	  * upper/lower bound encapsulation: Styles which are defined outside a
	  shadowRoot should not cross the ShadowDOM boundary and should not apply
	  inside a shadowRoot.

	  This styling behavior is not emulated. Some possible ways to do this that
	  were rejected due to complexity and/or performance concerns include: (1) reset
	  every possible property for every possible selector for a given scope name;
	  (2) re-implement css in javascript.

	  As an alternative, users should make sure to use selectors
	  specific to the scope in which they are working.

	  * ::distributed: This behavior is not emulated. It's often not necessary
	  to style the contents of a specific insertion point and instead, descendants
	  of the host element can be styled selectively. Users can also create an
	  extra node around an insertion point and style that node's contents
	  via descendent selectors. For example, with a shadowRoot like this:

	    <style>
	      ::content(div) {
	        background: red;
	      }
	    </style>
	    <content></content>

	  could become:

	    <style>
	      / *@polyfill .content-container div * /
	      ::content(div) {
	        background: red;
	      }
	    </style>
	    <div class="content-container">
	      <content></content>
	    </div>

	  Note the use of @polyfill in the comment above a ShadowDOM specific style
	  declaration. This is a directive to the styling shim to use the selector
	  in comments in lieu of the next selector when running under polyfill.
	*/
	var ShadowCss = /** @class */ (function () {
	    function ShadowCss() {
	        this.strictStyling = true;
	    }
	    /*
	     * Shim some cssText with the given selector. Returns cssText that can
	     * be included in the document via WebComponents.ShadowCSS.addCssToDocument(css).
	     *
	     * When strictStyling is true:
	     * - selector is the attribute added to all elements inside the host,
	     * - hostSelector is the attribute added to the host itself.
	     */
	    ShadowCss.prototype.shimCssText = function (cssText, selector, hostSelector) {
	        if (hostSelector === void 0) { hostSelector = ''; }
	        var commentsWithHash = extractCommentsWithHash(cssText);
	        cssText = stripComments(cssText);
	        cssText = this._insertDirectives(cssText);
	        var scopedCssText = this._scopeCssText(cssText, selector, hostSelector);
	        return __spread([scopedCssText], commentsWithHash).join('\n');
	    };
	    ShadowCss.prototype._insertDirectives = function (cssText) {
	        cssText = this._insertPolyfillDirectivesInCssText(cssText);
	        return this._insertPolyfillRulesInCssText(cssText);
	    };
	    /*
	     * Process styles to convert native ShadowDOM rules that will trip
	     * up the css parser; we rely on decorating the stylesheet with inert rules.
	     *
	     * For example, we convert this rule:
	     *
	     * polyfill-next-selector { content: ':host menu-item'; }
	     * ::content menu-item {
	     *
	     * to this:
	     *
	     * scopeName menu-item {
	     *
	     **/
	    ShadowCss.prototype._insertPolyfillDirectivesInCssText = function (cssText) {
	        // Difference with webcomponents.js: does not handle comments
	        return cssText.replace(_cssContentNextSelectorRe, function () {
	            var m = [];
	            for (var _i = 0; _i < arguments.length; _i++) {
	                m[_i] = arguments[_i];
	            }
	            return m[2] + '{';
	        });
	    };
	    /*
	     * Process styles to add rules which will only apply under the polyfill
	     *
	     * For example, we convert this rule:
	     *
	     * polyfill-rule {
	     *   content: ':host menu-item';
	     * ...
	     * }
	     *
	     * to this:
	     *
	     * scopeName menu-item {...}
	     *
	     **/
	    ShadowCss.prototype._insertPolyfillRulesInCssText = function (cssText) {
	        // Difference with webcomponents.js: does not handle comments
	        return cssText.replace(_cssContentRuleRe, function () {
	            var m = [];
	            for (var _i = 0; _i < arguments.length; _i++) {
	                m[_i] = arguments[_i];
	            }
	            var rule = m[0].replace(m[1], '').replace(m[2], '');
	            return m[4] + rule;
	        });
	    };
	    /* Ensure styles are scoped. Pseudo-scoping takes a rule like:
	     *
	     *  .foo {... }
	     *
	     *  and converts this to
	     *
	     *  scopeName .foo { ... }
	     */
	    ShadowCss.prototype._scopeCssText = function (cssText, scopeSelector, hostSelector) {
	        var unscopedRules = this._extractUnscopedRulesFromCssText(cssText);
	        // replace :host and :host-context -shadowcsshost and -shadowcsshost respectively
	        cssText = this._insertPolyfillHostInCssText(cssText);
	        cssText = this._convertColonHost(cssText);
	        cssText = this._convertColonHostContext(cssText);
	        cssText = this._convertShadowDOMSelectors(cssText);
	        if (scopeSelector) {
	            cssText = this._scopeSelectors(cssText, scopeSelector, hostSelector);
	        }
	        cssText = cssText + '\n' + unscopedRules;
	        return cssText.trim();
	    };
	    /*
	     * Process styles to add rules which will only apply under the polyfill
	     * and do not process via CSSOM. (CSSOM is destructive to rules on rare
	     * occasions, e.g. -webkit-calc on Safari.)
	     * For example, we convert this rule:
	     *
	     * @polyfill-unscoped-rule {
	     *   content: 'menu-item';
	     * ... }
	     *
	     * to this:
	     *
	     * menu-item {...}
	     *
	     **/
	    ShadowCss.prototype._extractUnscopedRulesFromCssText = function (cssText) {
	        // Difference with webcomponents.js: does not handle comments
	        var r = '';
	        var m;
	        _cssContentUnscopedRuleRe.lastIndex = 0;
	        while ((m = _cssContentUnscopedRuleRe.exec(cssText)) !== null) {
	            var rule = m[0].replace(m[2], '').replace(m[1], m[4]);
	            r += rule + '\n\n';
	        }
	        return r;
	    };
	    /*
	     * convert a rule like :host(.foo) > .bar { }
	     *
	     * to
	     *
	     * .foo<scopeName> > .bar
	     */
	    ShadowCss.prototype._convertColonHost = function (cssText) {
	        return this._convertColonRule(cssText, _cssColonHostRe, this._colonHostPartReplacer);
	    };
	    /*
	     * convert a rule like :host-context(.foo) > .bar { }
	     *
	     * to
	     *
	     * .foo<scopeName> > .bar, .foo scopeName > .bar { }
	     *
	     * and
	     *
	     * :host-context(.foo:host) .bar { ... }
	     *
	     * to
	     *
	     * .foo<scopeName> .bar { ... }
	     */
	    ShadowCss.prototype._convertColonHostContext = function (cssText) {
	        return this._convertColonRule(cssText, _cssColonHostContextRe, this._colonHostContextPartReplacer);
	    };
	    ShadowCss.prototype._convertColonRule = function (cssText, regExp, partReplacer) {
	        // m[1] = :host(-context), m[2] = contents of (), m[3] rest of rule
	        return cssText.replace(regExp, function () {
	            var m = [];
	            for (var _i = 0; _i < arguments.length; _i++) {
	                m[_i] = arguments[_i];
	            }
	            if (m[2]) {
	                var parts = m[2].split(',');
	                var r = [];
	                for (var i = 0; i < parts.length; i++) {
	                    var p = parts[i].trim();
	                    if (!p)
	                        break;
	                    r.push(partReplacer(_polyfillHostNoCombinator, p, m[3]));
	                }
	                return r.join(',');
	            }
	            else {
	                return _polyfillHostNoCombinator + m[3];
	            }
	        });
	    };
	    ShadowCss.prototype._colonHostContextPartReplacer = function (host, part, suffix) {
	        if (part.indexOf(_polyfillHost) > -1) {
	            return this._colonHostPartReplacer(host, part, suffix);
	        }
	        else {
	            return host + part + suffix + ', ' + part + ' ' + host + suffix;
	        }
	    };
	    ShadowCss.prototype._colonHostPartReplacer = function (host, part, suffix) {
	        return host + part.replace(_polyfillHost, '') + suffix;
	    };
	    /*
	     * Convert combinators like ::shadow and pseudo-elements like ::content
	     * by replacing with space.
	     */
	    ShadowCss.prototype._convertShadowDOMSelectors = function (cssText) {
	        return _shadowDOMSelectorsRe.reduce(function (result, pattern) { return result.replace(pattern, ' '); }, cssText);
	    };
	    // change a selector like 'div' to 'name div'
	    ShadowCss.prototype._scopeSelectors = function (cssText, scopeSelector, hostSelector) {
	        var _this = this;
	        return processRules(cssText, function (rule) {
	            var selector = rule.selector;
	            var content = rule.content;
	            if (rule.selector[0] != '@') {
	                selector =
	                    _this._scopeSelector(rule.selector, scopeSelector, hostSelector, _this.strictStyling);
	            }
	            else if (rule.selector.startsWith('@media') || rule.selector.startsWith('@supports') ||
	                rule.selector.startsWith('@page') || rule.selector.startsWith('@document')) {
	                content = _this._scopeSelectors(rule.content, scopeSelector, hostSelector);
	            }
	            return new CssRule(selector, content);
	        });
	    };
	    ShadowCss.prototype._scopeSelector = function (selector, scopeSelector, hostSelector, strict) {
	        var _this = this;
	        return selector.split(',')
	            .map(function (part) { return part.trim().split(_shadowDeepSelectors); })
	            .map(function (deepParts) {
	            var _a = __read(deepParts), shallowPart = _a[0], otherParts = _a.slice(1);
	            var applyScope = function (shallowPart) {
	                if (_this._selectorNeedsScoping(shallowPart, scopeSelector)) {
	                    return strict ?
	                        _this._applyStrictSelectorScope(shallowPart, scopeSelector, hostSelector) :
	                        _this._applySelectorScope(shallowPart, scopeSelector, hostSelector);
	                }
	                else {
	                    return shallowPart;
	                }
	            };
	            return __spread([applyScope(shallowPart)], otherParts).join(' ');
	        })
	            .join(', ');
	    };
	    ShadowCss.prototype._selectorNeedsScoping = function (selector, scopeSelector) {
	        var re = this._makeScopeMatcher(scopeSelector);
	        return !re.test(selector);
	    };
	    ShadowCss.prototype._makeScopeMatcher = function (scopeSelector) {
	        var lre = /\[/g;
	        var rre = /\]/g;
	        scopeSelector = scopeSelector.replace(lre, '\\[').replace(rre, '\\]');
	        return new RegExp('^(' + scopeSelector + ')' + _selectorReSuffix, 'm');
	    };
	    ShadowCss.prototype._applySelectorScope = function (selector, scopeSelector, hostSelector) {
	        // Difference from webcomponents.js: scopeSelector could not be an array
	        return this._applySimpleSelectorScope(selector, scopeSelector, hostSelector);
	    };
	    // scope via name and [is=name]
	    ShadowCss.prototype._applySimpleSelectorScope = function (selector, scopeSelector, hostSelector) {
	        // In Android browser, the lastIndex is not reset when the regex is used in String.replace()
	        _polyfillHostRe.lastIndex = 0;
	        if (_polyfillHostRe.test(selector)) {
	            var replaceBy_1 = this.strictStyling ? "[" + hostSelector + "]" : scopeSelector;
	            return selector
	                .replace(_polyfillHostNoCombinatorRe, function (hnc, selector) {
	                return selector.replace(/([^:]*)(:*)(.*)/, function (_, before, colon, after) {
	                    return before + replaceBy_1 + colon + after;
	                });
	            })
	                .replace(_polyfillHostRe, replaceBy_1 + ' ');
	        }
	        return scopeSelector + ' ' + selector;
	    };
	    // return a selector with [name] suffix on each simple selector
	    // e.g. .foo.bar > .zot becomes .foo[name].bar[name] > .zot[name]  /** @internal */
	    ShadowCss.prototype._applyStrictSelectorScope = function (selector, scopeSelector, hostSelector) {
	        var _this = this;
	        var isRe = /\[is=([^\]]*)\]/g;
	        scopeSelector = scopeSelector.replace(isRe, function (_) {
	            var parts = [];
	            for (var _i = 1; _i < arguments.length; _i++) {
	                parts[_i - 1] = arguments[_i];
	            }
	            return parts[0];
	        });
	        var attrName = '[' + scopeSelector + ']';
	        var _scopeSelectorPart = function (p) {
	            var scopedP = p.trim();
	            if (!scopedP) {
	                return '';
	            }
	            if (p.indexOf(_polyfillHostNoCombinator) > -1) {
	                scopedP = _this._applySimpleSelectorScope(p, scopeSelector, hostSelector);
	            }
	            else {
	                // remove :host since it should be unnecessary
	                var t = p.replace(_polyfillHostRe, '');
	                if (t.length > 0) {
	                    var matches = t.match(/([^:]*)(:*)(.*)/);
	                    if (matches) {
	                        scopedP = matches[1] + attrName + matches[2] + matches[3];
	                    }
	                }
	            }
	            return scopedP;
	        };
	        var safeContent = new SafeSelector(selector);
	        selector = safeContent.content();
	        var scopedSelector = '';
	        var startIndex = 0;
	        var res;
	        var sep = /( |>|\+|~(?!=))\s*/g;
	        // If a selector appears before :host it should not be shimmed as it
	        // matches on ancestor elements and not on elements in the host's shadow
	        // `:host-context(div)` is transformed to
	        // `-shadowcsshost-no-combinatordiv, div -shadowcsshost-no-combinator`
	        // the `div` is not part of the component in the 2nd selectors and should not be scoped.
	        // Historically `component-tag:host` was matching the component so we also want to preserve
	        // this behavior to avoid breaking legacy apps (it should not match).
	        // The behavior should be:
	        // - `tag:host` -> `tag[h]` (this is to avoid breaking legacy apps, should not match anything)
	        // - `tag :host` -> `tag [h]` (`tag` is not scoped because it's considered part of a
	        //   `:host-context(tag)`)
	        var hasHost = selector.indexOf(_polyfillHostNoCombinator) > -1;
	        // Only scope parts after the first `-shadowcsshost-no-combinator` when it is present
	        var shouldScope = !hasHost;
	        while ((res = sep.exec(selector)) !== null) {
	            var separator = res[1];
	            var part_1 = selector.slice(startIndex, res.index).trim();
	            shouldScope = shouldScope || part_1.indexOf(_polyfillHostNoCombinator) > -1;
	            var scopedPart = shouldScope ? _scopeSelectorPart(part_1) : part_1;
	            scopedSelector += scopedPart + " " + separator + " ";
	            startIndex = sep.lastIndex;
	        }
	        var part = selector.substring(startIndex);
	        shouldScope = shouldScope || part.indexOf(_polyfillHostNoCombinator) > -1;
	        scopedSelector += shouldScope ? _scopeSelectorPart(part) : part;
	        // replace the placeholders with their original values
	        return safeContent.restore(scopedSelector);
	    };
	    ShadowCss.prototype._insertPolyfillHostInCssText = function (selector) {
	        return selector.replace(_colonHostContextRe, _polyfillHostContext)
	            .replace(_colonHostRe, _polyfillHost);
	    };
	    return ShadowCss;
	}());
	var SafeSelector = /** @class */ (function () {
	    function SafeSelector(selector) {
	        var _this = this;
	        this.placeholders = [];
	        this.index = 0;
	        // Replaces attribute selectors with placeholders.
	        // The WS in [attr="va lue"] would otherwise be interpreted as a selector separator.
	        selector = selector.replace(/(\[[^\]]*\])/g, function (_, keep) {
	            var replaceBy = "__ph-" + _this.index + "__";
	            _this.placeholders.push(keep);
	            _this.index++;
	            return replaceBy;
	        });
	        // Replaces the expression in `:nth-child(2n + 1)` with a placeholder.
	        // WS and "+" would otherwise be interpreted as selector separators.
	        this._content = selector.replace(/(:nth-[-\w]+)(\([^)]+\))/g, function (_, pseudo, exp) {
	            var replaceBy = "__ph-" + _this.index + "__";
	            _this.placeholders.push(exp);
	            _this.index++;
	            return pseudo + replaceBy;
	        });
	    }
	    SafeSelector.prototype.restore = function (content) {
	        var _this = this;
	        return content.replace(/__ph-(\d+)__/g, function (ph, index) { return _this.placeholders[+index]; });
	    };
	    SafeSelector.prototype.content = function () {
	        return this._content;
	    };
	    return SafeSelector;
	}());
	var _cssContentNextSelectorRe = /polyfill-next-selector[^}]*content:[\s]*?(['"])(.*?)\1[;\s]*}([^{]*?){/gim;
	var _cssContentRuleRe = /(polyfill-rule)[^}]*(content:[\s]*(['"])(.*?)\3)[;\s]*[^}]*}/gim;
	var _cssContentUnscopedRuleRe = /(polyfill-unscoped-rule)[^}]*(content:[\s]*(['"])(.*?)\3)[;\s]*[^}]*}/gim;
	var _polyfillHost = '-shadowcsshost';
	// note: :host-context pre-processed to -shadowcsshostcontext.
	var _polyfillHostContext = '-shadowcsscontext';
	var _parenSuffix = ')(?:\\((' +
	    '(?:\\([^)(]*\\)|[^)(]*)+?' +
	    ')\\))?([^,{]*)';
	var _cssColonHostRe = new RegExp('(' + _polyfillHost + _parenSuffix, 'gim');
	var _cssColonHostContextRe = new RegExp('(' + _polyfillHostContext + _parenSuffix, 'gim');
	var _polyfillHostNoCombinator = _polyfillHost + '-no-combinator';
	var _polyfillHostNoCombinatorRe = /-shadowcsshost-no-combinator([^\s]*)/;
	var _shadowDOMSelectorsRe = [
	    /::shadow/g,
	    /::content/g,
	    // Deprecated selectors
	    /\/shadow-deep\//g,
	    /\/shadow\//g,
	];
	// The deep combinator is deprecated in the CSS spec
	// Support for `>>>`, `deep`, `::ng-deep` is then also deprecated and will be removed in the future.
	// see https://github.com/angular/angular/pull/17677
	var _shadowDeepSelectors = /(?:>>>)|(?:\/deep\/)|(?:::ng-deep)/g;
	var _selectorReSuffix = '([>\\s~+\[.,{:][\\s\\S]*)?$';
	var _polyfillHostRe = /-shadowcsshost/gim;
	var _colonHostRe = /:host/gim;
	var _colonHostContextRe = /:host-context/gim;
	var _commentRe = /\/\*\s*[\s\S]*?\*\//g;
	function stripComments(input) {
	    return input.replace(_commentRe, '');
	}
	var _commentWithHashRe = /\/\*\s*#\s*source(Mapping)?URL=[\s\S]+?\*\//g;
	function extractCommentsWithHash(input) {
	    return input.match(_commentWithHashRe) || [];
	}
	var _ruleRe = /(\s*)([^;\{\}]+?)(\s*)((?:{%BLOCK%}?\s*;?)|(?:\s*;))/g;
	var _curlyRe = /([{}])/g;
	var OPEN_CURLY = '{';
	var CLOSE_CURLY = '}';
	var BLOCK_PLACEHOLDER = '%BLOCK%';
	var CssRule = /** @class */ (function () {
	    function CssRule(selector, content) {
	        this.selector = selector;
	        this.content = content;
	    }
	    return CssRule;
	}());
	function processRules(input, ruleCallback) {
	    var inputWithEscapedBlocks = escapeBlocks(input);
	    var nextBlockIndex = 0;
	    return inputWithEscapedBlocks.escapedString.replace(_ruleRe, function () {
	        var m = [];
	        for (var _i = 0; _i < arguments.length; _i++) {
	            m[_i] = arguments[_i];
	        }
	        var selector = m[2];
	        var content = '';
	        var suffix = m[4];
	        var contentPrefix = '';
	        if (suffix && suffix.startsWith('{' + BLOCK_PLACEHOLDER)) {
	            content = inputWithEscapedBlocks.blocks[nextBlockIndex++];
	            suffix = suffix.substring(BLOCK_PLACEHOLDER.length + 1);
	            contentPrefix = '{';
	        }
	        var rule = ruleCallback(new CssRule(selector, content));
	        return "" + m[1] + rule.selector + m[3] + contentPrefix + rule.content + suffix;
	    });
	}
	var StringWithEscapedBlocks = /** @class */ (function () {
	    function StringWithEscapedBlocks(escapedString, blocks) {
	        this.escapedString = escapedString;
	        this.blocks = blocks;
	    }
	    return StringWithEscapedBlocks;
	}());
	function escapeBlocks(input) {
	    var inputParts = input.split(_curlyRe);
	    var resultParts = [];
	    var escapedBlocks = [];
	    var bracketCount = 0;
	    var currentBlockParts = [];
	    for (var partIndex = 0; partIndex < inputParts.length; partIndex++) {
	        var part = inputParts[partIndex];
	        if (part == CLOSE_CURLY) {
	            bracketCount--;
	        }
	        if (bracketCount > 0) {
	            currentBlockParts.push(part);
	        }
	        else {
	            if (currentBlockParts.length > 0) {
	                escapedBlocks.push(currentBlockParts.join(''));
	                resultParts.push(BLOCK_PLACEHOLDER);
	                currentBlockParts = [];
	            }
	            resultParts.push(part);
	        }
	        if (part == OPEN_CURLY) {
	            bracketCount++;
	        }
	    }
	    if (currentBlockParts.length > 0) {
	        escapedBlocks.push(currentBlockParts.join(''));
	        resultParts.push(BLOCK_PLACEHOLDER);
	    }
	    return new StringWithEscapedBlocks(resultParts.join(''), escapedBlocks);
	}

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	var COMPONENT_VARIABLE = '%COMP%';
	var HOST_ATTR = "_nghost-" + COMPONENT_VARIABLE;
	var CONTENT_ATTR = "_ngcontent-" + COMPONENT_VARIABLE;
	var StylesCompileDependency = /** @class */ (function () {
	    function StylesCompileDependency(name, moduleUrl, setValue) {
	        this.name = name;
	        this.moduleUrl = moduleUrl;
	        this.setValue = setValue;
	    }
	    return StylesCompileDependency;
	}());
	var CompiledStylesheet = /** @class */ (function () {
	    function CompiledStylesheet(outputCtx, stylesVar, dependencies, isShimmed, meta) {
	        this.outputCtx = outputCtx;
	        this.stylesVar = stylesVar;
	        this.dependencies = dependencies;
	        this.isShimmed = isShimmed;
	        this.meta = meta;
	    }
	    return CompiledStylesheet;
	}());
	var StyleCompiler = /** @class */ (function () {
	    function StyleCompiler(_urlResolver) {
	        this._urlResolver = _urlResolver;
	        this._shadowCss = new ShadowCss();
	    }
	    StyleCompiler.prototype.compileComponent = function (outputCtx, comp) {
	        var template = comp.template;
	        return this._compileStyles(outputCtx, comp, new CompileStylesheetMetadata({
	            styles: template.styles,
	            styleUrls: template.styleUrls,
	            moduleUrl: identifierModuleUrl(comp.type)
	        }), this.needsStyleShim(comp), true);
	    };
	    StyleCompiler.prototype.compileStyles = function (outputCtx, comp, stylesheet, shim) {
	        if (shim === void 0) { shim = this.needsStyleShim(comp); }
	        return this._compileStyles(outputCtx, comp, stylesheet, shim, false);
	    };
	    StyleCompiler.prototype.needsStyleShim = function (comp) {
	        return comp.template.encapsulation === ViewEncapsulation.Emulated;
	    };
	    StyleCompiler.prototype._compileStyles = function (outputCtx, comp, stylesheet, shim, isComponentStylesheet) {
	        var _this = this;
	        var styleExpressions = stylesheet.styles.map(function (plainStyle) { return literal(_this._shimIfNeeded(plainStyle, shim)); });
	        var dependencies = [];
	        stylesheet.styleUrls.forEach(function (styleUrl) {
	            var exprIndex = styleExpressions.length;
	            // Note: This placeholder will be filled later.
	            styleExpressions.push(null);
	            dependencies.push(new StylesCompileDependency(getStylesVarName(null), styleUrl, function (value) { return styleExpressions[exprIndex] = outputCtx.importExpr(value); }));
	        });
	        // styles variable contains plain strings and arrays of other styles arrays (recursive),
	        // so we set its type to dynamic.
	        var stylesVar = getStylesVarName(isComponentStylesheet ? comp : null);
	        var stmt = variable(stylesVar)
	            .set(literalArr(styleExpressions, new ArrayType(DYNAMIC_TYPE, [TypeModifier.Const])))
	            .toDeclStmt(null, isComponentStylesheet ? [StmtModifier.Final] : [
	            StmtModifier.Final, StmtModifier.Exported
	        ]);
	        outputCtx.statements.push(stmt);
	        return new CompiledStylesheet(outputCtx, stylesVar, dependencies, shim, stylesheet);
	    };
	    StyleCompiler.prototype._shimIfNeeded = function (style, shim) {
	        return shim ? this._shadowCss.shimCssText(style, CONTENT_ATTR, HOST_ATTR) : style;
	    };
	    return StyleCompiler;
	}());
	function getStylesVarName(component) {
	    var result = "styles";
	    if (component) {
	        result += "_" + identifierName(component.type);
	    }
	    return result;
	}

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * A path is an ordered set of elements. Typically a path is to  a
	 * particular offset in a source file. The head of the list is the top
	 * most node. The tail is the node that contains the offset directly.
	 *
	 * For example, the expression `a + b + c` might have an ast that looks
	 * like:
	 *     +
	 *    / \
	 *   a   +
	 *      / \
	 *     b   c
	 *
	 * The path to the node at offset 9 would be `['+' at 1-10, '+' at 7-10,
	 * 'c' at 9-10]` and the path the node at offset 1 would be
	 * `['+' at 1-10, 'a' at 1-2]`.
	 */
	var AstPath = /** @class */ (function () {
	    function AstPath(path, position) {
	        if (position === void 0) { position = -1; }
	        this.path = path;
	        this.position = position;
	    }
	    Object.defineProperty(AstPath.prototype, "empty", {
	        get: function () {
	            return !this.path || !this.path.length;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(AstPath.prototype, "head", {
	        get: function () {
	            return this.path[0];
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(AstPath.prototype, "tail", {
	        get: function () {
	            return this.path[this.path.length - 1];
	        },
	        enumerable: true,
	        configurable: true
	    });
	    AstPath.prototype.parentOf = function (node) {
	        return node && this.path[this.path.indexOf(node) - 1];
	    };
	    AstPath.prototype.childOf = function (node) {
	        return this.path[this.path.indexOf(node) + 1];
	    };
	    AstPath.prototype.first = function (ctor) {
	        for (var i = this.path.length - 1; i >= 0; i--) {
	            var item = this.path[i];
	            if (item instanceof ctor)
	                return item;
	        }
	    };
	    AstPath.prototype.push = function (node) {
	        this.path.push(node);
	    };
	    AstPath.prototype.pop = function () {
	        return this.path.pop();
	    };
	    return AstPath;
	}());

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	var NodeWithI18n = /** @class */ (function () {
	    function NodeWithI18n(sourceSpan, i18n) {
	        this.sourceSpan = sourceSpan;
	        this.i18n = i18n;
	    }
	    return NodeWithI18n;
	}());
	var Text$3 = /** @class */ (function (_super) {
	    __extends(Text, _super);
	    function Text(value, sourceSpan, i18n) {
	        var _this = _super.call(this, sourceSpan, i18n) || this;
	        _this.value = value;
	        return _this;
	    }
	    Text.prototype.visit = function (visitor, context) {
	        return visitor.visitText(this, context);
	    };
	    return Text;
	}(NodeWithI18n));
	var Expansion = /** @class */ (function (_super) {
	    __extends(Expansion, _super);
	    function Expansion(switchValue, type, cases, sourceSpan, switchValueSourceSpan, i18n) {
	        var _this = _super.call(this, sourceSpan, i18n) || this;
	        _this.switchValue = switchValue;
	        _this.type = type;
	        _this.cases = cases;
	        _this.switchValueSourceSpan = switchValueSourceSpan;
	        return _this;
	    }
	    Expansion.prototype.visit = function (visitor, context) {
	        return visitor.visitExpansion(this, context);
	    };
	    return Expansion;
	}(NodeWithI18n));
	var ExpansionCase = /** @class */ (function () {
	    function ExpansionCase(value, expression, sourceSpan, valueSourceSpan, expSourceSpan) {
	        this.value = value;
	        this.expression = expression;
	        this.sourceSpan = sourceSpan;
	        this.valueSourceSpan = valueSourceSpan;
	        this.expSourceSpan = expSourceSpan;
	    }
	    ExpansionCase.prototype.visit = function (visitor, context) {
	        return visitor.visitExpansionCase(this, context);
	    };
	    return ExpansionCase;
	}());
	var Attribute = /** @class */ (function (_super) {
	    __extends(Attribute, _super);
	    function Attribute(name, value, sourceSpan, valueSpan, i18n) {
	        var _this = _super.call(this, sourceSpan, i18n) || this;
	        _this.name = name;
	        _this.value = value;
	        _this.valueSpan = valueSpan;
	        return _this;
	    }
	    Attribute.prototype.visit = function (visitor, context) {
	        return visitor.visitAttribute(this, context);
	    };
	    return Attribute;
	}(NodeWithI18n));
	var Element$1$1 = /** @class */ (function (_super) {
	    __extends(Element, _super);
	    function Element(name, attrs, children, sourceSpan, startSourceSpan, endSourceSpan, i18n) {
	        if (startSourceSpan === void 0) { startSourceSpan = null; }
	        if (endSourceSpan === void 0) { endSourceSpan = null; }
	        var _this = _super.call(this, sourceSpan, i18n) || this;
	        _this.name = name;
	        _this.attrs = attrs;
	        _this.children = children;
	        _this.startSourceSpan = startSourceSpan;
	        _this.endSourceSpan = endSourceSpan;
	        return _this;
	    }
	    Element.prototype.visit = function (visitor, context) {
	        return visitor.visitElement(this, context);
	    };
	    return Element;
	}(NodeWithI18n));
	var Comment = /** @class */ (function () {
	    function Comment(value, sourceSpan) {
	        this.value = value;
	        this.sourceSpan = sourceSpan;
	    }
	    Comment.prototype.visit = function (visitor, context) {
	        return visitor.visitComment(this, context);
	    };
	    return Comment;
	}());
	function visitAll$1(visitor, nodes, context) {
	    if (context === void 0) { context = null; }
	    var result = [];
	    var visit = visitor.visit ?
	        function (ast) { return visitor.visit(ast, context) || ast.visit(visitor, context); } :
	        function (ast) { return ast.visit(visitor, context); };
	    nodes.forEach(function (ast) {
	        var astResult = visit(ast);
	        if (astResult) {
	            result.push(astResult);
	        }
	    });
	    return result;
	}
	var RecursiveVisitor$1 = /** @class */ (function () {
	    function RecursiveVisitor() {
	    }
	    RecursiveVisitor.prototype.visitElement = function (ast, context) {
	        this.visitChildren(context, function (visit) {
	            visit(ast.attrs);
	            visit(ast.children);
	        });
	    };
	    RecursiveVisitor.prototype.visitAttribute = function (ast, context) { };
	    RecursiveVisitor.prototype.visitText = function (ast, context) { };
	    RecursiveVisitor.prototype.visitComment = function (ast, context) { };
	    RecursiveVisitor.prototype.visitExpansion = function (ast, context) {
	        return this.visitChildren(context, function (visit) {
	            visit(ast.cases);
	        });
	    };
	    RecursiveVisitor.prototype.visitExpansionCase = function (ast, context) { };
	    RecursiveVisitor.prototype.visitChildren = function (context, cb) {
	        var results = [];
	        var t = this;
	        function visit(children) {
	            if (children)
	                results.push(visitAll$1(t, children, context));
	        }
	        cb(visit);
	        return Array.prototype.concat.apply([], results);
	    };
	    return RecursiveVisitor;
	}());

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	var TokenType;
	(function (TokenType) {
	    TokenType[TokenType["TAG_OPEN_START"] = 0] = "TAG_OPEN_START";
	    TokenType[TokenType["TAG_OPEN_END"] = 1] = "TAG_OPEN_END";
	    TokenType[TokenType["TAG_OPEN_END_VOID"] = 2] = "TAG_OPEN_END_VOID";
	    TokenType[TokenType["TAG_CLOSE"] = 3] = "TAG_CLOSE";
	    TokenType[TokenType["TEXT"] = 4] = "TEXT";
	    TokenType[TokenType["ESCAPABLE_RAW_TEXT"] = 5] = "ESCAPABLE_RAW_TEXT";
	    TokenType[TokenType["RAW_TEXT"] = 6] = "RAW_TEXT";
	    TokenType[TokenType["COMMENT_START"] = 7] = "COMMENT_START";
	    TokenType[TokenType["COMMENT_END"] = 8] = "COMMENT_END";
	    TokenType[TokenType["CDATA_START"] = 9] = "CDATA_START";
	    TokenType[TokenType["CDATA_END"] = 10] = "CDATA_END";
	    TokenType[TokenType["ATTR_NAME"] = 11] = "ATTR_NAME";
	    TokenType[TokenType["ATTR_QUOTE"] = 12] = "ATTR_QUOTE";
	    TokenType[TokenType["ATTR_VALUE"] = 13] = "ATTR_VALUE";
	    TokenType[TokenType["DOC_TYPE"] = 14] = "DOC_TYPE";
	    TokenType[TokenType["EXPANSION_FORM_START"] = 15] = "EXPANSION_FORM_START";
	    TokenType[TokenType["EXPANSION_CASE_VALUE"] = 16] = "EXPANSION_CASE_VALUE";
	    TokenType[TokenType["EXPANSION_CASE_EXP_START"] = 17] = "EXPANSION_CASE_EXP_START";
	    TokenType[TokenType["EXPANSION_CASE_EXP_END"] = 18] = "EXPANSION_CASE_EXP_END";
	    TokenType[TokenType["EXPANSION_FORM_END"] = 19] = "EXPANSION_FORM_END";
	    TokenType[TokenType["EOF"] = 20] = "EOF";
	})(TokenType || (TokenType = {}));
	var Token = /** @class */ (function () {
	    function Token(type, parts, sourceSpan) {
	        this.type = type;
	        this.parts = parts;
	        this.sourceSpan = sourceSpan;
	    }
	    return Token;
	}());
	var TokenError = /** @class */ (function (_super) {
	    __extends(TokenError, _super);
	    function TokenError(errorMsg, tokenType, span) {
	        var _this = _super.call(this, span, errorMsg) || this;
	        _this.tokenType = tokenType;
	        return _this;
	    }
	    return TokenError;
	}(ParseError));
	var TokenizeResult = /** @class */ (function () {
	    function TokenizeResult(tokens, errors) {
	        this.tokens = tokens;
	        this.errors = errors;
	    }
	    return TokenizeResult;
	}());
	function tokenize(source, url, getTagDefinition, options) {
	    if (options === void 0) { options = {}; }
	    return new _Tokenizer(new ParseSourceFile(source, url), getTagDefinition, options).tokenize();
	}
	var _CR_OR_CRLF_REGEXP = /\r\n?/g;
	function _unexpectedCharacterErrorMsg(charCode) {
	    var char = charCode === $EOF ? 'EOF' : String.fromCharCode(charCode);
	    return "Unexpected character \"" + char + "\"";
	}
	function _unknownEntityErrorMsg(entitySrc) {
	    return "Unknown entity \"" + entitySrc + "\" - use the \"&#<decimal>;\" or  \"&#x<hex>;\" syntax";
	}
	var _ControlFlowError = /** @class */ (function () {
	    function _ControlFlowError(error) {
	        this.error = error;
	    }
	    return _ControlFlowError;
	}());
	// See http://www.w3.org/TR/html51/syntax.html#writing
	var _Tokenizer = /** @class */ (function () {
	    /**
	     * @param _file The html source file being tokenized.
	     * @param _getTagDefinition A function that will retrieve a tag definition for a given tag name.
	     * @param options Configuration of the tokenization.
	     */
	    function _Tokenizer(_file, _getTagDefinition, options) {
	        this._getTagDefinition = _getTagDefinition;
	        this._currentTokenStart = null;
	        this._currentTokenType = null;
	        this._expansionCaseStack = [];
	        this._inInterpolation = false;
	        this.tokens = [];
	        this.errors = [];
	        this._tokenizeIcu = options.tokenizeExpansionForms || false;
	        this._interpolationConfig = options.interpolationConfig || DEFAULT_INTERPOLATION_CONFIG;
	        this._leadingTriviaCodePoints =
	            options.leadingTriviaChars && options.leadingTriviaChars.map(function (c) { return c.codePointAt(0) || 0; });
	        var range = options.range || { endPos: _file.content.length, startPos: 0, startLine: 0, startCol: 0 };
	        this._cursor = options.escapedString ? new EscapedCharacterCursor(_file, range) :
	            new PlainCharacterCursor(_file, range);
	        this._preserveLineEndings = options.preserveLineEndings || false;
	        try {
	            this._cursor.init();
	        }
	        catch (e) {
	            this.handleError(e);
	        }
	    }
	    _Tokenizer.prototype._processCarriageReturns = function (content) {
	        if (this._preserveLineEndings) {
	            return content;
	        }
	        // http://www.w3.org/TR/html5/syntax.html#preprocessing-the-input-stream
	        // In order to keep the original position in the source, we can not
	        // pre-process it.
	        // Instead CRs are processed right before instantiating the tokens.
	        return content.replace(_CR_OR_CRLF_REGEXP, '\n');
	    };
	    _Tokenizer.prototype.tokenize = function () {
	        while (this._cursor.peek() !== $EOF) {
	            var start = this._cursor.clone();
	            try {
	                if (this._attemptCharCode($LT)) {
	                    if (this._attemptCharCode($BANG)) {
	                        if (this._attemptCharCode($LBRACKET)) {
	                            this._consumeCdata(start);
	                        }
	                        else if (this._attemptCharCode($MINUS)) {
	                            this._consumeComment(start);
	                        }
	                        else {
	                            this._consumeDocType(start);
	                        }
	                    }
	                    else if (this._attemptCharCode($SLASH)) {
	                        this._consumeTagClose(start);
	                    }
	                    else {
	                        this._consumeTagOpen(start);
	                    }
	                }
	                else if (!(this._tokenizeIcu && this._tokenizeExpansionForm())) {
	                    this._consumeText();
	                }
	            }
	            catch (e) {
	                this.handleError(e);
	            }
	        }
	        this._beginToken(TokenType.EOF);
	        this._endToken([]);
	        return new TokenizeResult(mergeTextTokens(this.tokens), this.errors);
	    };
	    /**
	     * @returns whether an ICU token has been created
	     * @internal
	     */
	    _Tokenizer.prototype._tokenizeExpansionForm = function () {
	        if (this.isExpansionFormStart()) {
	            this._consumeExpansionFormStart();
	            return true;
	        }
	        if (isExpansionCaseStart(this._cursor.peek()) && this._isInExpansionForm()) {
	            this._consumeExpansionCaseStart();
	            return true;
	        }
	        if (this._cursor.peek() === $RBRACE) {
	            if (this._isInExpansionCase()) {
	                this._consumeExpansionCaseEnd();
	                return true;
	            }
	            if (this._isInExpansionForm()) {
	                this._consumeExpansionFormEnd();
	                return true;
	            }
	        }
	        return false;
	    };
	    _Tokenizer.prototype._beginToken = function (type, start) {
	        if (start === void 0) { start = this._cursor.clone(); }
	        this._currentTokenStart = start;
	        this._currentTokenType = type;
	    };
	    _Tokenizer.prototype._endToken = function (parts, end) {
	        if (this._currentTokenStart === null) {
	            throw new TokenError('Programming error - attempted to end a token when there was no start to the token', this._currentTokenType, this._cursor.getSpan(end));
	        }
	        if (this._currentTokenType === null) {
	            throw new TokenError('Programming error - attempted to end a token which has no token type', null, this._cursor.getSpan(this._currentTokenStart));
	        }
	        var token = new Token(this._currentTokenType, parts, this._cursor.getSpan(this._currentTokenStart, this._leadingTriviaCodePoints));
	        this.tokens.push(token);
	        this._currentTokenStart = null;
	        this._currentTokenType = null;
	        return token;
	    };
	    _Tokenizer.prototype._createError = function (msg, span) {
	        if (this._isInExpansionForm()) {
	            msg += " (Do you have an unescaped \"{\" in your template? Use \"{{ '{' }}\") to escape it.)";
	        }
	        var error = new TokenError(msg, this._currentTokenType, span);
	        this._currentTokenStart = null;
	        this._currentTokenType = null;
	        return new _ControlFlowError(error);
	    };
	    _Tokenizer.prototype.handleError = function (e) {
	        if (e instanceof CursorError) {
	            e = this._createError(e.msg, this._cursor.getSpan(e.cursor));
	        }
	        if (e instanceof _ControlFlowError) {
	            this.errors.push(e.error);
	        }
	        else {
	            throw e;
	        }
	    };
	    _Tokenizer.prototype._attemptCharCode = function (charCode) {
	        if (this._cursor.peek() === charCode) {
	            this._cursor.advance();
	            return true;
	        }
	        return false;
	    };
	    _Tokenizer.prototype._attemptCharCodeCaseInsensitive = function (charCode) {
	        if (compareCharCodeCaseInsensitive(this._cursor.peek(), charCode)) {
	            this._cursor.advance();
	            return true;
	        }
	        return false;
	    };
	    _Tokenizer.prototype._requireCharCode = function (charCode) {
	        var location = this._cursor.clone();
	        if (!this._attemptCharCode(charCode)) {
	            throw this._createError(_unexpectedCharacterErrorMsg(this._cursor.peek()), this._cursor.getSpan(location));
	        }
	    };
	    _Tokenizer.prototype._attemptStr = function (chars) {
	        var len = chars.length;
	        if (this._cursor.charsLeft() < len) {
	            return false;
	        }
	        var initialPosition = this._cursor.clone();
	        for (var i = 0; i < len; i++) {
	            if (!this._attemptCharCode(chars.charCodeAt(i))) {
	                // If attempting to parse the string fails, we want to reset the parser
	                // to where it was before the attempt
	                this._cursor = initialPosition;
	                return false;
	            }
	        }
	        return true;
	    };
	    _Tokenizer.prototype._attemptStrCaseInsensitive = function (chars) {
	        for (var i = 0; i < chars.length; i++) {
	            if (!this._attemptCharCodeCaseInsensitive(chars.charCodeAt(i))) {
	                return false;
	            }
	        }
	        return true;
	    };
	    _Tokenizer.prototype._requireStr = function (chars) {
	        var location = this._cursor.clone();
	        if (!this._attemptStr(chars)) {
	            throw this._createError(_unexpectedCharacterErrorMsg(this._cursor.peek()), this._cursor.getSpan(location));
	        }
	    };
	    _Tokenizer.prototype._attemptCharCodeUntilFn = function (predicate) {
	        while (!predicate(this._cursor.peek())) {
	            this._cursor.advance();
	        }
	    };
	    _Tokenizer.prototype._requireCharCodeUntilFn = function (predicate, len) {
	        var start = this._cursor.clone();
	        this._attemptCharCodeUntilFn(predicate);
	        if (this._cursor.diff(start) < len) {
	            throw this._createError(_unexpectedCharacterErrorMsg(this._cursor.peek()), this._cursor.getSpan(start));
	        }
	    };
	    _Tokenizer.prototype._attemptUntilChar = function (char) {
	        while (this._cursor.peek() !== char) {
	            this._cursor.advance();
	        }
	    };
	    _Tokenizer.prototype._readChar = function (decodeEntities) {
	        if (decodeEntities && this._cursor.peek() === $AMPERSAND) {
	            return this._decodeEntity();
	        }
	        else {
	            // Don't rely upon reading directly from `_input` as the actual char value
	            // may have been generated from an escape sequence.
	            var char = String.fromCodePoint(this._cursor.peek());
	            this._cursor.advance();
	            return char;
	        }
	    };
	    _Tokenizer.prototype._decodeEntity = function () {
	        var start = this._cursor.clone();
	        this._cursor.advance();
	        if (this._attemptCharCode($HASH)) {
	            var isHex = this._attemptCharCode($x) || this._attemptCharCode($X);
	            var codeStart = this._cursor.clone();
	            this._attemptCharCodeUntilFn(isDigitEntityEnd);
	            if (this._cursor.peek() != $SEMICOLON) {
	                throw this._createError(_unexpectedCharacterErrorMsg(this._cursor.peek()), this._cursor.getSpan());
	            }
	            var strNum = this._cursor.getChars(codeStart);
	            this._cursor.advance();
	            try {
	                var charCode = parseInt(strNum, isHex ? 16 : 10);
	                return String.fromCharCode(charCode);
	            }
	            catch (_a) {
	                throw this._createError(_unknownEntityErrorMsg(this._cursor.getChars(start)), this._cursor.getSpan());
	            }
	        }
	        else {
	            var nameStart = this._cursor.clone();
	            this._attemptCharCodeUntilFn(isNamedEntityEnd);
	            if (this._cursor.peek() != $SEMICOLON) {
	                this._cursor = nameStart;
	                return '&';
	            }
	            var name_1 = this._cursor.getChars(nameStart);
	            this._cursor.advance();
	            var char = NAMED_ENTITIES[name_1];
	            if (!char) {
	                throw this._createError(_unknownEntityErrorMsg(name_1), this._cursor.getSpan(start));
	            }
	            return char;
	        }
	    };
	    _Tokenizer.prototype._consumeRawText = function (decodeEntities, endMarkerPredicate) {
	        this._beginToken(decodeEntities ? TokenType.ESCAPABLE_RAW_TEXT : TokenType.RAW_TEXT);
	        var parts = [];
	        while (true) {
	            var tagCloseStart = this._cursor.clone();
	            var foundEndMarker = endMarkerPredicate();
	            this._cursor = tagCloseStart;
	            if (foundEndMarker) {
	                break;
	            }
	            parts.push(this._readChar(decodeEntities));
	        }
	        return this._endToken([this._processCarriageReturns(parts.join(''))]);
	    };
	    _Tokenizer.prototype._consumeComment = function (start) {
	        var _this = this;
	        this._beginToken(TokenType.COMMENT_START, start);
	        this._requireCharCode($MINUS);
	        this._endToken([]);
	        this._consumeRawText(false, function () { return _this._attemptStr('-->'); });
	        this._beginToken(TokenType.COMMENT_END);
	        this._requireStr('-->');
	        this._endToken([]);
	    };
	    _Tokenizer.prototype._consumeCdata = function (start) {
	        var _this = this;
	        this._beginToken(TokenType.CDATA_START, start);
	        this._requireStr('CDATA[');
	        this._endToken([]);
	        this._consumeRawText(false, function () { return _this._attemptStr(']]>'); });
	        this._beginToken(TokenType.CDATA_END);
	        this._requireStr(']]>');
	        this._endToken([]);
	    };
	    _Tokenizer.prototype._consumeDocType = function (start) {
	        this._beginToken(TokenType.DOC_TYPE, start);
	        var contentStart = this._cursor.clone();
	        this._attemptUntilChar($GT);
	        var content = this._cursor.getChars(contentStart);
	        this._cursor.advance();
	        this._endToken([content]);
	    };
	    _Tokenizer.prototype._consumePrefixAndName = function () {
	        var nameOrPrefixStart = this._cursor.clone();
	        var prefix = '';
	        while (this._cursor.peek() !== $COLON && !isPrefixEnd(this._cursor.peek())) {
	            this._cursor.advance();
	        }
	        var nameStart;
	        if (this._cursor.peek() === $COLON) {
	            prefix = this._cursor.getChars(nameOrPrefixStart);
	            this._cursor.advance();
	            nameStart = this._cursor.clone();
	        }
	        else {
	            nameStart = nameOrPrefixStart;
	        }
	        this._requireCharCodeUntilFn(isNameEnd, prefix === '' ? 0 : 1);
	        var name = this._cursor.getChars(nameStart);
	        return [prefix, name];
	    };
	    _Tokenizer.prototype._consumeTagOpen = function (start) {
	        var tagName;
	        var prefix;
	        var openTagToken;
	        var tokensBeforeTagOpen = this.tokens.length;
	        var innerStart = this._cursor.clone();
	        try {
	            if (!isAsciiLetter(this._cursor.peek())) {
	                throw this._createError(_unexpectedCharacterErrorMsg(this._cursor.peek()), this._cursor.getSpan(start));
	            }
	            openTagToken = this._consumeTagOpenStart(start);
	            prefix = openTagToken.parts[0];
	            tagName = openTagToken.parts[1];
	            this._attemptCharCodeUntilFn(isNotWhitespace);
	            while (this._cursor.peek() !== $SLASH && this._cursor.peek() !== $GT) {
	                this._consumeAttributeName();
	                this._attemptCharCodeUntilFn(isNotWhitespace);
	                if (this._attemptCharCode($EQ)) {
	                    this._attemptCharCodeUntilFn(isNotWhitespace);
	                    this._consumeAttributeValue();
	                }
	                this._attemptCharCodeUntilFn(isNotWhitespace);
	            }
	            this._consumeTagOpenEnd();
	        }
	        catch (e) {
	            if (e instanceof _ControlFlowError) {
	                // When the start tag is invalid (including invalid "attributes"), assume we want a "<"
	                this._cursor = innerStart;
	                if (openTagToken) {
	                    this.tokens.length = tokensBeforeTagOpen;
	                }
	                // Back to back text tokens are merged at the end
	                this._beginToken(TokenType.TEXT, start);
	                this._endToken(['<']);
	                return;
	            }
	            throw e;
	        }
	        var contentTokenType = this._getTagDefinition(tagName).contentType;
	        if (contentTokenType === TagContentType.RAW_TEXT) {
	            this._consumeRawTextWithTagClose(prefix, tagName, false);
	        }
	        else if (contentTokenType === TagContentType.ESCAPABLE_RAW_TEXT) {
	            this._consumeRawTextWithTagClose(prefix, tagName, true);
	        }
	    };
	    _Tokenizer.prototype._consumeRawTextWithTagClose = function (prefix, tagName, decodeEntities) {
	        var _this = this;
	        var textToken = this._consumeRawText(decodeEntities, function () {
	            if (!_this._attemptCharCode($LT))
	                return false;
	            if (!_this._attemptCharCode($SLASH))
	                return false;
	            _this._attemptCharCodeUntilFn(isNotWhitespace);
	            if (!_this._attemptStrCaseInsensitive(tagName))
	                return false;
	            _this._attemptCharCodeUntilFn(isNotWhitespace);
	            return _this._attemptCharCode($GT);
	        });
	        this._beginToken(TokenType.TAG_CLOSE);
	        this._requireCharCodeUntilFn(function (code) { return code === $GT; }, 3);
	        this._cursor.advance(); // Consume the `>`
	        this._endToken([prefix, tagName]);
	    };
	    _Tokenizer.prototype._consumeTagOpenStart = function (start) {
	        this._beginToken(TokenType.TAG_OPEN_START, start);
	        var parts = this._consumePrefixAndName();
	        return this._endToken(parts);
	    };
	    _Tokenizer.prototype._consumeAttributeName = function () {
	        var attrNameStart = this._cursor.peek();
	        if (attrNameStart === $SQ || attrNameStart === $DQ) {
	            throw this._createError(_unexpectedCharacterErrorMsg(attrNameStart), this._cursor.getSpan());
	        }
	        this._beginToken(TokenType.ATTR_NAME);
	        var prefixAndName = this._consumePrefixAndName();
	        this._endToken(prefixAndName);
	    };
	    _Tokenizer.prototype._consumeAttributeValue = function () {
	        var value;
	        if (this._cursor.peek() === $SQ || this._cursor.peek() === $DQ) {
	            this._beginToken(TokenType.ATTR_QUOTE);
	            var quoteChar = this._cursor.peek();
	            this._cursor.advance();
	            this._endToken([String.fromCodePoint(quoteChar)]);
	            this._beginToken(TokenType.ATTR_VALUE);
	            var parts = [];
	            while (this._cursor.peek() !== quoteChar) {
	                parts.push(this._readChar(true));
	            }
	            value = parts.join('');
	            this._endToken([this._processCarriageReturns(value)]);
	            this._beginToken(TokenType.ATTR_QUOTE);
	            this._cursor.advance();
	            this._endToken([String.fromCodePoint(quoteChar)]);
	        }
	        else {
	            this._beginToken(TokenType.ATTR_VALUE);
	            var valueStart = this._cursor.clone();
	            this._requireCharCodeUntilFn(isNameEnd, 1);
	            value = this._cursor.getChars(valueStart);
	            this._endToken([this._processCarriageReturns(value)]);
	        }
	    };
	    _Tokenizer.prototype._consumeTagOpenEnd = function () {
	        var tokenType = this._attemptCharCode($SLASH) ? TokenType.TAG_OPEN_END_VOID : TokenType.TAG_OPEN_END;
	        this._beginToken(tokenType);
	        this._requireCharCode($GT);
	        this._endToken([]);
	    };
	    _Tokenizer.prototype._consumeTagClose = function (start) {
	        this._beginToken(TokenType.TAG_CLOSE, start);
	        this._attemptCharCodeUntilFn(isNotWhitespace);
	        var prefixAndName = this._consumePrefixAndName();
	        this._attemptCharCodeUntilFn(isNotWhitespace);
	        this._requireCharCode($GT);
	        this._endToken(prefixAndName);
	    };
	    _Tokenizer.prototype._consumeExpansionFormStart = function () {
	        this._beginToken(TokenType.EXPANSION_FORM_START);
	        this._requireCharCode($LBRACE);
	        this._endToken([]);
	        this._expansionCaseStack.push(TokenType.EXPANSION_FORM_START);
	        this._beginToken(TokenType.RAW_TEXT);
	        var condition = this._readUntil($COMMA);
	        this._endToken([condition]);
	        this._requireCharCode($COMMA);
	        this._attemptCharCodeUntilFn(isNotWhitespace);
	        this._beginToken(TokenType.RAW_TEXT);
	        var type = this._readUntil($COMMA);
	        this._endToken([type]);
	        this._requireCharCode($COMMA);
	        this._attemptCharCodeUntilFn(isNotWhitespace);
	    };
	    _Tokenizer.prototype._consumeExpansionCaseStart = function () {
	        this._beginToken(TokenType.EXPANSION_CASE_VALUE);
	        var value = this._readUntil($LBRACE).trim();
	        this._endToken([value]);
	        this._attemptCharCodeUntilFn(isNotWhitespace);
	        this._beginToken(TokenType.EXPANSION_CASE_EXP_START);
	        this._requireCharCode($LBRACE);
	        this._endToken([]);
	        this._attemptCharCodeUntilFn(isNotWhitespace);
	        this._expansionCaseStack.push(TokenType.EXPANSION_CASE_EXP_START);
	    };
	    _Tokenizer.prototype._consumeExpansionCaseEnd = function () {
	        this._beginToken(TokenType.EXPANSION_CASE_EXP_END);
	        this._requireCharCode($RBRACE);
	        this._endToken([]);
	        this._attemptCharCodeUntilFn(isNotWhitespace);
	        this._expansionCaseStack.pop();
	    };
	    _Tokenizer.prototype._consumeExpansionFormEnd = function () {
	        this._beginToken(TokenType.EXPANSION_FORM_END);
	        this._requireCharCode($RBRACE);
	        this._endToken([]);
	        this._expansionCaseStack.pop();
	    };
	    _Tokenizer.prototype._consumeText = function () {
	        var start = this._cursor.clone();
	        this._beginToken(TokenType.TEXT, start);
	        var parts = [];
	        do {
	            if (this._interpolationConfig && this._attemptStr(this._interpolationConfig.start)) {
	                parts.push(this._interpolationConfig.start);
	                this._inInterpolation = true;
	            }
	            else if (this._interpolationConfig && this._inInterpolation &&
	                this._attemptStr(this._interpolationConfig.end)) {
	                parts.push(this._interpolationConfig.end);
	                this._inInterpolation = false;
	            }
	            else {
	                parts.push(this._readChar(true));
	            }
	        } while (!this._isTextEnd());
	        this._endToken([this._processCarriageReturns(parts.join(''))]);
	    };
	    _Tokenizer.prototype._isTextEnd = function () {
	        if (this._cursor.peek() === $LT || this._cursor.peek() === $EOF) {
	            return true;
	        }
	        if (this._tokenizeIcu && !this._inInterpolation) {
	            if (this.isExpansionFormStart()) {
	                // start of an expansion form
	                return true;
	            }
	            if (this._cursor.peek() === $RBRACE && this._isInExpansionCase()) {
	                // end of and expansion case
	                return true;
	            }
	        }
	        return false;
	    };
	    _Tokenizer.prototype._readUntil = function (char) {
	        var start = this._cursor.clone();
	        this._attemptUntilChar(char);
	        return this._cursor.getChars(start);
	    };
	    _Tokenizer.prototype._isInExpansionCase = function () {
	        return this._expansionCaseStack.length > 0 &&
	            this._expansionCaseStack[this._expansionCaseStack.length - 1] ===
	                TokenType.EXPANSION_CASE_EXP_START;
	    };
	    _Tokenizer.prototype._isInExpansionForm = function () {
	        return this._expansionCaseStack.length > 0 &&
	            this._expansionCaseStack[this._expansionCaseStack.length - 1] ===
	                TokenType.EXPANSION_FORM_START;
	    };
	    _Tokenizer.prototype.isExpansionFormStart = function () {
	        if (this._cursor.peek() !== $LBRACE) {
	            return false;
	        }
	        if (this._interpolationConfig) {
	            var start = this._cursor.clone();
	            var isInterpolation = this._attemptStr(this._interpolationConfig.start);
	            this._cursor = start;
	            return !isInterpolation;
	        }
	        return true;
	    };
	    return _Tokenizer;
	}());
	function isNotWhitespace(code) {
	    return !isWhitespace(code) || code === $EOF;
	}
	function isNameEnd(code) {
	    return isWhitespace(code) || code === $GT || code === $SLASH ||
	        code === $SQ || code === $DQ || code === $EQ;
	}
	function isPrefixEnd(code) {
	    return (code < $a || $z < code) && (code < $A || $Z < code) &&
	        (code < $0 || code > $9);
	}
	function isDigitEntityEnd(code) {
	    return code == $SEMICOLON || code == $EOF || !isAsciiHexDigit(code);
	}
	function isNamedEntityEnd(code) {
	    return code == $SEMICOLON || code == $EOF || !isAsciiLetter(code);
	}
	function isExpansionCaseStart(peek) {
	    return peek !== $RBRACE;
	}
	function compareCharCodeCaseInsensitive(code1, code2) {
	    return toUpperCaseCharCode(code1) == toUpperCaseCharCode(code2);
	}
	function toUpperCaseCharCode(code) {
	    return code >= $a && code <= $z ? code - $a + $A : code;
	}
	function mergeTextTokens(srcTokens) {
	    var dstTokens = [];
	    var lastDstToken = undefined;
	    for (var i = 0; i < srcTokens.length; i++) {
	        var token = srcTokens[i];
	        if (lastDstToken && lastDstToken.type == TokenType.TEXT && token.type == TokenType.TEXT) {
	            lastDstToken.parts[0] += token.parts[0];
	            lastDstToken.sourceSpan.end = token.sourceSpan.end;
	        }
	        else {
	            lastDstToken = token;
	            dstTokens.push(lastDstToken);
	        }
	    }
	    return dstTokens;
	}
	var PlainCharacterCursor = /** @class */ (function () {
	    function PlainCharacterCursor(fileOrCursor, range) {
	        if (fileOrCursor instanceof PlainCharacterCursor) {
	            this.file = fileOrCursor.file;
	            this.input = fileOrCursor.input;
	            this.end = fileOrCursor.end;
	            var state = fileOrCursor.state;
	            // Note: avoid using `{...fileOrCursor.state}` here as that has a severe performance penalty.
	            // In ES5 bundles the object spread operator is translated into the `__assign` helper, which
	            // is not optimized by VMs as efficiently as a raw object literal. Since this constructor is
	            // called in tight loops, this difference matters.
	            this.state = {
	                peek: state.peek,
	                offset: state.offset,
	                line: state.line,
	                column: state.column,
	            };
	        }
	        else {
	            if (!range) {
	                throw new Error('Programming error: the range argument must be provided with a file argument.');
	            }
	            this.file = fileOrCursor;
	            this.input = fileOrCursor.content;
	            this.end = range.endPos;
	            this.state = {
	                peek: -1,
	                offset: range.startPos,
	                line: range.startLine,
	                column: range.startCol,
	            };
	        }
	    }
	    PlainCharacterCursor.prototype.clone = function () {
	        return new PlainCharacterCursor(this);
	    };
	    PlainCharacterCursor.prototype.peek = function () {
	        return this.state.peek;
	    };
	    PlainCharacterCursor.prototype.charsLeft = function () {
	        return this.end - this.state.offset;
	    };
	    PlainCharacterCursor.prototype.diff = function (other) {
	        return this.state.offset - other.state.offset;
	    };
	    PlainCharacterCursor.prototype.advance = function () {
	        this.advanceState(this.state);
	    };
	    PlainCharacterCursor.prototype.init = function () {
	        this.updatePeek(this.state);
	    };
	    PlainCharacterCursor.prototype.getSpan = function (start, leadingTriviaCodePoints) {
	        start = start || this;
	        var cloned = false;
	        if (leadingTriviaCodePoints) {
	            while (this.diff(start) > 0 && leadingTriviaCodePoints.indexOf(start.peek()) !== -1) {
	                if (!cloned) {
	                    start = start.clone();
	                    cloned = true;
	                }
	                start.advance();
	            }
	        }
	        return new ParseSourceSpan(new ParseLocation(start.file, start.state.offset, start.state.line, start.state.column), new ParseLocation(this.file, this.state.offset, this.state.line, this.state.column));
	    };
	    PlainCharacterCursor.prototype.getChars = function (start) {
	        return this.input.substring(start.state.offset, this.state.offset);
	    };
	    PlainCharacterCursor.prototype.charAt = function (pos) {
	        return this.input.charCodeAt(pos);
	    };
	    PlainCharacterCursor.prototype.advanceState = function (state) {
	        if (state.offset >= this.end) {
	            this.state = state;
	            throw new CursorError('Unexpected character "EOF"', this);
	        }
	        var currentChar = this.charAt(state.offset);
	        if (currentChar === $LF) {
	            state.line++;
	            state.column = 0;
	        }
	        else if (!isNewLine(currentChar)) {
	            state.column++;
	        }
	        state.offset++;
	        this.updatePeek(state);
	    };
	    PlainCharacterCursor.prototype.updatePeek = function (state) {
	        state.peek = state.offset >= this.end ? $EOF : this.charAt(state.offset);
	    };
	    return PlainCharacterCursor;
	}());
	var EscapedCharacterCursor = /** @class */ (function (_super) {
	    __extends(EscapedCharacterCursor, _super);
	    function EscapedCharacterCursor(fileOrCursor, range) {
	        var _this = this;
	        if (fileOrCursor instanceof EscapedCharacterCursor) {
	            _this = _super.call(this, fileOrCursor) || this;
	            _this.internalState = __assign({}, fileOrCursor.internalState);
	        }
	        else {
	            _this = _super.call(this, fileOrCursor, range) || this;
	            _this.internalState = _this.state;
	        }
	        return _this;
	    }
	    EscapedCharacterCursor.prototype.advance = function () {
	        this.state = this.internalState;
	        _super.prototype.advance.call(this);
	        this.processEscapeSequence();
	    };
	    EscapedCharacterCursor.prototype.init = function () {
	        _super.prototype.init.call(this);
	        this.processEscapeSequence();
	    };
	    EscapedCharacterCursor.prototype.clone = function () {
	        return new EscapedCharacterCursor(this);
	    };
	    EscapedCharacterCursor.prototype.getChars = function (start) {
	        var cursor = start.clone();
	        var chars = '';
	        while (cursor.internalState.offset < this.internalState.offset) {
	            chars += String.fromCodePoint(cursor.peek());
	            cursor.advance();
	        }
	        return chars;
	    };
	    /**
	     * Process the escape sequence that starts at the current position in the text.
	     *
	     * This method is called to ensure that `peek` has the unescaped value of escape sequences.
	     */
	    EscapedCharacterCursor.prototype.processEscapeSequence = function () {
	        var _this = this;
	        var peek = function () { return _this.internalState.peek; };
	        if (peek() === $BACKSLASH) {
	            // We have hit an escape sequence so we need the internal state to become independent
	            // of the external state.
	            this.internalState = __assign({}, this.state);
	            // Move past the backslash
	            this.advanceState(this.internalState);
	            // First check for standard control char sequences
	            if (peek() === $n) {
	                this.state.peek = $LF;
	            }
	            else if (peek() === $r) {
	                this.state.peek = $CR;
	            }
	            else if (peek() === $v) {
	                this.state.peek = $VTAB;
	            }
	            else if (peek() === $t) {
	                this.state.peek = $TAB;
	            }
	            else if (peek() === $b) {
	                this.state.peek = $BSPACE;
	            }
	            else if (peek() === $f) {
	                this.state.peek = $FF;
	            }
	            // Now consider more complex sequences
	            else if (peek() === $u) {
	                // Unicode code-point sequence
	                this.advanceState(this.internalState); // advance past the `u` char
	                if (peek() === $LBRACE) {
	                    // Variable length Unicode, e.g. `\x{123}`
	                    this.advanceState(this.internalState); // advance past the `{` char
	                    // Advance past the variable number of hex digits until we hit a `}` char
	                    var digitStart = this.clone();
	                    var length_1 = 0;
	                    while (peek() !== $RBRACE) {
	                        this.advanceState(this.internalState);
	                        length_1++;
	                    }
	                    this.state.peek = this.decodeHexDigits(digitStart, length_1);
	                }
	                else {
	                    // Fixed length Unicode, e.g. `\u1234`
	                    var digitStart = this.clone();
	                    this.advanceState(this.internalState);
	                    this.advanceState(this.internalState);
	                    this.advanceState(this.internalState);
	                    this.state.peek = this.decodeHexDigits(digitStart, 4);
	                }
	            }
	            else if (peek() === $x) {
	                // Hex char code, e.g. `\x2F`
	                this.advanceState(this.internalState); // advance past the `x` char
	                var digitStart = this.clone();
	                this.advanceState(this.internalState);
	                this.state.peek = this.decodeHexDigits(digitStart, 2);
	            }
	            else if (isOctalDigit(peek())) {
	                // Octal char code, e.g. `\012`,
	                var octal = '';
	                var length_2 = 0;
	                var previous = this.clone();
	                while (isOctalDigit(peek()) && length_2 < 3) {
	                    previous = this.clone();
	                    octal += String.fromCodePoint(peek());
	                    this.advanceState(this.internalState);
	                    length_2++;
	                }
	                this.state.peek = parseInt(octal, 8);
	                // Backup one char
	                this.internalState = previous.internalState;
	            }
	            else if (isNewLine(this.internalState.peek)) {
	                // Line continuation `\` followed by a new line
	                this.advanceState(this.internalState); // advance over the newline
	                this.state = this.internalState;
	            }
	            else {
	                // If none of the `if` blocks were executed then we just have an escaped normal character.
	                // In that case we just, effectively, skip the backslash from the character.
	                this.state.peek = this.internalState.peek;
	            }
	        }
	    };
	    EscapedCharacterCursor.prototype.decodeHexDigits = function (start, length) {
	        var hex = this.input.substr(start.internalState.offset, length);
	        var charCode = parseInt(hex, 16);
	        if (!isNaN(charCode)) {
	            return charCode;
	        }
	        else {
	            start.state = start.internalState;
	            throw new CursorError('Invalid hexadecimal escape sequence', start);
	        }
	    };
	    return EscapedCharacterCursor;
	}(PlainCharacterCursor));
	var CursorError = /** @class */ (function () {
	    function CursorError(msg, cursor) {
	        this.msg = msg;
	        this.cursor = cursor;
	    }
	    return CursorError;
	}());

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	var TreeError = /** @class */ (function (_super) {
	    __extends(TreeError, _super);
	    function TreeError(elementName, span, msg) {
	        var _this = _super.call(this, span, msg) || this;
	        _this.elementName = elementName;
	        return _this;
	    }
	    TreeError.create = function (elementName, span, msg) {
	        return new TreeError(elementName, span, msg);
	    };
	    return TreeError;
	}(ParseError));
	var ParseTreeResult = /** @class */ (function () {
	    function ParseTreeResult(rootNodes, errors) {
	        this.rootNodes = rootNodes;
	        this.errors = errors;
	    }
	    return ParseTreeResult;
	}());
	var Parser = /** @class */ (function () {
	    function Parser(getTagDefinition) {
	        this.getTagDefinition = getTagDefinition;
	    }
	    Parser.prototype.parse = function (source, url, options) {
	        var tokensAndErrors = tokenize(source, url, this.getTagDefinition, options);
	        var treeAndErrors = new _TreeBuilder(tokensAndErrors.tokens, this.getTagDefinition).build();
	        return new ParseTreeResult(treeAndErrors.rootNodes, tokensAndErrors.errors.concat(treeAndErrors.errors));
	    };
	    return Parser;
	}());
	var _TreeBuilder = /** @class */ (function () {
	    function _TreeBuilder(tokens, getTagDefinition) {
	        this.tokens = tokens;
	        this.getTagDefinition = getTagDefinition;
	        this._index = -1;
	        this._rootNodes = [];
	        this._errors = [];
	        this._elementStack = [];
	        this._advance();
	    }
	    _TreeBuilder.prototype.build = function () {
	        while (this._peek.type !== TokenType.EOF) {
	            if (this._peek.type === TokenType.TAG_OPEN_START) {
	                this._consumeStartTag(this._advance());
	            }
	            else if (this._peek.type === TokenType.TAG_CLOSE) {
	                this._consumeEndTag(this._advance());
	            }
	            else if (this._peek.type === TokenType.CDATA_START) {
	                this._closeVoidElement();
	                this._consumeCdata(this._advance());
	            }
	            else if (this._peek.type === TokenType.COMMENT_START) {
	                this._closeVoidElement();
	                this._consumeComment(this._advance());
	            }
	            else if (this._peek.type === TokenType.TEXT || this._peek.type === TokenType.RAW_TEXT ||
	                this._peek.type === TokenType.ESCAPABLE_RAW_TEXT) {
	                this._closeVoidElement();
	                this._consumeText(this._advance());
	            }
	            else if (this._peek.type === TokenType.EXPANSION_FORM_START) {
	                this._consumeExpansion(this._advance());
	            }
	            else {
	                // Skip all other tokens...
	                this._advance();
	            }
	        }
	        return new ParseTreeResult(this._rootNodes, this._errors);
	    };
	    _TreeBuilder.prototype._advance = function () {
	        var prev = this._peek;
	        if (this._index < this.tokens.length - 1) {
	            // Note: there is always an EOF token at the end
	            this._index++;
	        }
	        this._peek = this.tokens[this._index];
	        return prev;
	    };
	    _TreeBuilder.prototype._advanceIf = function (type) {
	        if (this._peek.type === type) {
	            return this._advance();
	        }
	        return null;
	    };
	    _TreeBuilder.prototype._consumeCdata = function (startToken) {
	        this._consumeText(this._advance());
	        this._advanceIf(TokenType.CDATA_END);
	    };
	    _TreeBuilder.prototype._consumeComment = function (token) {
	        var text = this._advanceIf(TokenType.RAW_TEXT);
	        this._advanceIf(TokenType.COMMENT_END);
	        var value = text != null ? text.parts[0].trim() : null;
	        this._addToParent(new Comment(value, token.sourceSpan));
	    };
	    _TreeBuilder.prototype._consumeExpansion = function (token) {
	        var switchValue = this._advance();
	        var type = this._advance();
	        var cases = [];
	        // read =
	        while (this._peek.type === TokenType.EXPANSION_CASE_VALUE) {
	            var expCase = this._parseExpansionCase();
	            if (!expCase)
	                return; // error
	            cases.push(expCase);
	        }
	        // read the final }
	        if (this._peek.type !== TokenType.EXPANSION_FORM_END) {
	            this._errors.push(TreeError.create(null, this._peek.sourceSpan, "Invalid ICU message. Missing '}'."));
	            return;
	        }
	        var sourceSpan = new ParseSourceSpan(token.sourceSpan.start, this._peek.sourceSpan.end);
	        this._addToParent(new Expansion(switchValue.parts[0], type.parts[0], cases, sourceSpan, switchValue.sourceSpan));
	        this._advance();
	    };
	    _TreeBuilder.prototype._parseExpansionCase = function () {
	        var value = this._advance();
	        // read {
	        if (this._peek.type !== TokenType.EXPANSION_CASE_EXP_START) {
	            this._errors.push(TreeError.create(null, this._peek.sourceSpan, "Invalid ICU message. Missing '{'."));
	            return null;
	        }
	        // read until }
	        var start = this._advance();
	        var exp = this._collectExpansionExpTokens(start);
	        if (!exp)
	            return null;
	        var end = this._advance();
	        exp.push(new Token(TokenType.EOF, [], end.sourceSpan));
	        // parse everything in between { and }
	        var parsedExp = new _TreeBuilder(exp, this.getTagDefinition).build();
	        if (parsedExp.errors.length > 0) {
	            this._errors = this._errors.concat(parsedExp.errors);
	            return null;
	        }
	        var sourceSpan = new ParseSourceSpan(value.sourceSpan.start, end.sourceSpan.end);
	        var expSourceSpan = new ParseSourceSpan(start.sourceSpan.start, end.sourceSpan.end);
	        return new ExpansionCase(value.parts[0], parsedExp.rootNodes, sourceSpan, value.sourceSpan, expSourceSpan);
	    };
	    _TreeBuilder.prototype._collectExpansionExpTokens = function (start) {
	        var exp = [];
	        var expansionFormStack = [TokenType.EXPANSION_CASE_EXP_START];
	        while (true) {
	            if (this._peek.type === TokenType.EXPANSION_FORM_START ||
	                this._peek.type === TokenType.EXPANSION_CASE_EXP_START) {
	                expansionFormStack.push(this._peek.type);
	            }
	            if (this._peek.type === TokenType.EXPANSION_CASE_EXP_END) {
	                if (lastOnStack(expansionFormStack, TokenType.EXPANSION_CASE_EXP_START)) {
	                    expansionFormStack.pop();
	                    if (expansionFormStack.length == 0)
	                        return exp;
	                }
	                else {
	                    this._errors.push(TreeError.create(null, start.sourceSpan, "Invalid ICU message. Missing '}'."));
	                    return null;
	                }
	            }
	            if (this._peek.type === TokenType.EXPANSION_FORM_END) {
	                if (lastOnStack(expansionFormStack, TokenType.EXPANSION_FORM_START)) {
	                    expansionFormStack.pop();
	                }
	                else {
	                    this._errors.push(TreeError.create(null, start.sourceSpan, "Invalid ICU message. Missing '}'."));
	                    return null;
	                }
	            }
	            if (this._peek.type === TokenType.EOF) {
	                this._errors.push(TreeError.create(null, start.sourceSpan, "Invalid ICU message. Missing '}'."));
	                return null;
	            }
	            exp.push(this._advance());
	        }
	    };
	    _TreeBuilder.prototype._consumeText = function (token) {
	        var text = token.parts[0];
	        if (text.length > 0 && text[0] == '\n') {
	            var parent_1 = this._getParentElement();
	            if (parent_1 != null && parent_1.children.length == 0 &&
	                this.getTagDefinition(parent_1.name).ignoreFirstLf) {
	                text = text.substring(1);
	            }
	        }
	        if (text.length > 0) {
	            this._addToParent(new Text$3(text, token.sourceSpan));
	        }
	    };
	    _TreeBuilder.prototype._closeVoidElement = function () {
	        var el = this._getParentElement();
	        if (el && this.getTagDefinition(el.name).isVoid) {
	            this._elementStack.pop();
	        }
	    };
	    _TreeBuilder.prototype._consumeStartTag = function (startTagToken) {
	        var prefix = startTagToken.parts[0];
	        var name = startTagToken.parts[1];
	        var attrs = [];
	        while (this._peek.type === TokenType.ATTR_NAME) {
	            attrs.push(this._consumeAttr(this._advance()));
	        }
	        var fullName = this._getElementFullName(prefix, name, this._getParentElement());
	        var selfClosing = false;
	        // Note: There could have been a tokenizer error
	        // so that we don't get a token for the end tag...
	        if (this._peek.type === TokenType.TAG_OPEN_END_VOID) {
	            this._advance();
	            selfClosing = true;
	            var tagDef = this.getTagDefinition(fullName);
	            if (!(tagDef.canSelfClose || getNsPrefix(fullName) !== null || tagDef.isVoid)) {
	                this._errors.push(TreeError.create(fullName, startTagToken.sourceSpan, "Only void and foreign elements can be self closed \"" + startTagToken.parts[1] + "\""));
	            }
	        }
	        else if (this._peek.type === TokenType.TAG_OPEN_END) {
	            this._advance();
	            selfClosing = false;
	        }
	        var end = this._peek.sourceSpan.start;
	        var span = new ParseSourceSpan(startTagToken.sourceSpan.start, end);
	        var el = new Element$1$1(fullName, attrs, [], span, span, undefined);
	        this._pushElement(el);
	        if (selfClosing) {
	            this._popElement(fullName);
	            el.endSourceSpan = span;
	        }
	    };
	    _TreeBuilder.prototype._pushElement = function (el) {
	        var parentEl = this._getParentElement();
	        if (parentEl && this.getTagDefinition(parentEl.name).isClosedByChild(el.name)) {
	            this._elementStack.pop();
	        }
	        this._addToParent(el);
	        this._elementStack.push(el);
	    };
	    _TreeBuilder.prototype._consumeEndTag = function (endTagToken) {
	        var fullName = this._getElementFullName(endTagToken.parts[0], endTagToken.parts[1], this._getParentElement());
	        if (this._getParentElement()) {
	            this._getParentElement().endSourceSpan = endTagToken.sourceSpan;
	        }
	        if (this.getTagDefinition(fullName).isVoid) {
	            this._errors.push(TreeError.create(fullName, endTagToken.sourceSpan, "Void elements do not have end tags \"" + endTagToken.parts[1] + "\""));
	        }
	        else if (!this._popElement(fullName)) {
	            var errMsg = "Unexpected closing tag \"" + fullName + "\". It may happen when the tag has already been closed by another tag. For more info see https://www.w3.org/TR/html5/syntax.html#closing-elements-that-have-implied-end-tags";
	            this._errors.push(TreeError.create(fullName, endTagToken.sourceSpan, errMsg));
	        }
	    };
	    _TreeBuilder.prototype._popElement = function (fullName) {
	        for (var stackIndex = this._elementStack.length - 1; stackIndex >= 0; stackIndex--) {
	            var el = this._elementStack[stackIndex];
	            if (el.name == fullName) {
	                this._elementStack.splice(stackIndex, this._elementStack.length - stackIndex);
	                return true;
	            }
	            if (!this.getTagDefinition(el.name).closedByParent) {
	                return false;
	            }
	        }
	        return false;
	    };
	    _TreeBuilder.prototype._consumeAttr = function (attrName) {
	        var fullName = mergeNsAndName(attrName.parts[0], attrName.parts[1]);
	        var end = attrName.sourceSpan.end;
	        var value = '';
	        var valueSpan = undefined;
	        if (this._peek.type === TokenType.ATTR_QUOTE) {
	            this._advance();
	        }
	        if (this._peek.type === TokenType.ATTR_VALUE) {
	            var valueToken = this._advance();
	            value = valueToken.parts[0];
	            end = valueToken.sourceSpan.end;
	            valueSpan = valueToken.sourceSpan;
	        }
	        if (this._peek.type === TokenType.ATTR_QUOTE) {
	            var quoteToken = this._advance();
	            end = quoteToken.sourceSpan.end;
	        }
	        return new Attribute(fullName, value, new ParseSourceSpan(attrName.sourceSpan.start, end), valueSpan);
	    };
	    _TreeBuilder.prototype._getParentElement = function () {
	        return this._elementStack.length > 0 ? this._elementStack[this._elementStack.length - 1] : null;
	    };
	    /**
	     * Returns the parent in the DOM and the container.
	     *
	     * `<ng-container>` elements are skipped as they are not rendered as DOM element.
	     */
	    _TreeBuilder.prototype._getParentElementSkippingContainers = function () {
	        var container = null;
	        for (var i = this._elementStack.length - 1; i >= 0; i--) {
	            if (!isNgContainer(this._elementStack[i].name)) {
	                return { parent: this._elementStack[i], container: container };
	            }
	            container = this._elementStack[i];
	        }
	        return { parent: null, container: container };
	    };
	    _TreeBuilder.prototype._addToParent = function (node) {
	        var parent = this._getParentElement();
	        if (parent != null) {
	            parent.children.push(node);
	        }
	        else {
	            this._rootNodes.push(node);
	        }
	    };
	    /**
	     * Insert a node between the parent and the container.
	     * When no container is given, the node is appended as a child of the parent.
	     * Also updates the element stack accordingly.
	     *
	     * @internal
	     */
	    _TreeBuilder.prototype._insertBeforeContainer = function (parent, container, node) {
	        if (!container) {
	            this._addToParent(node);
	            this._elementStack.push(node);
	        }
	        else {
	            if (parent) {
	                // replace the container with the new node in the children
	                var index = parent.children.indexOf(container);
	                parent.children[index] = node;
	            }
	            else {
	                this._rootNodes.push(node);
	            }
	            node.children.push(container);
	            this._elementStack.splice(this._elementStack.indexOf(container), 0, node);
	        }
	    };
	    _TreeBuilder.prototype._getElementFullName = function (prefix, localName, parentElement) {
	        if (prefix === '') {
	            prefix = this.getTagDefinition(localName).implicitNamespacePrefix || '';
	            if (prefix === '' && parentElement != null) {
	                prefix = getNsPrefix(parentElement.name);
	            }
	        }
	        return mergeNsAndName(prefix, localName);
	    };
	    return _TreeBuilder;
	}());
	function lastOnStack(stack, element) {
	    return stack.length > 0 && stack[stack.length - 1] === element;
	}

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	var HtmlParser = /** @class */ (function (_super) {
	    __extends(HtmlParser, _super);
	    function HtmlParser() {
	        return _super.call(this, getHtmlTagDefinition) || this;
	    }
	    HtmlParser.prototype.parse = function (source, url, options) {
	        return _super.prototype.parse.call(this, source, url, options);
	    };
	    return HtmlParser;
	}(Parser));

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	var PRESERVE_WS_ATTR_NAME = 'ngPreserveWhitespaces';
	var SKIP_WS_TRIM_TAGS = new Set(['pre', 'template', 'textarea', 'script', 'style']);
	// Equivalent to \s with \u00a0 (non-breaking space) excluded.
	// Based on https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp
	var WS_CHARS = ' \f\n\r\t\v\u1680\u180e\u2000-\u200a\u2028\u2029\u202f\u205f\u3000\ufeff';
	var NO_WS_REGEXP = new RegExp("[^" + WS_CHARS + "]");
	var WS_REPLACE_REGEXP = new RegExp("[" + WS_CHARS + "]{2,}", 'g');
	function hasPreserveWhitespacesAttr(attrs) {
	    return attrs.some(function (attr) { return attr.name === PRESERVE_WS_ATTR_NAME; });
	}
	/**
	 * Angular Dart introduced &ngsp; as a placeholder for non-removable space, see:
	 * https://github.com/dart-lang/angular/blob/0bb611387d29d65b5af7f9d2515ab571fd3fbee4/_tests/test/compiler/preserve_whitespace_test.dart#L25-L32
	 * In Angular Dart &ngsp; is converted to the 0xE500 PUA (Private Use Areas) unicode character
	 * and later on replaced by a space. We are re-implementing the same idea here.
	 */
	function replaceNgsp(value) {
	    // lexer is replacing the &ngsp; pseudo-entity with NGSP_UNICODE
	    return value.replace(new RegExp(NGSP_UNICODE, 'g'), ' ');
	}
	/**
	 * This visitor can walk HTML parse tree and remove / trim text nodes using the following rules:
	 * - consider spaces, tabs and new lines as whitespace characters;
	 * - drop text nodes consisting of whitespace characters only;
	 * - for all other text nodes replace consecutive whitespace characters with one space;
	 * - convert &ngsp; pseudo-entity to a single space;
	 *
	 * Removal and trimming of whitespaces have positive performance impact (less code to generate
	 * while compiling templates, faster view creation). At the same time it can be "destructive"
	 * in some cases (whitespaces can influence layout). Because of the potential of breaking layout
	 * this visitor is not activated by default in Angular 5 and people need to explicitly opt-in for
	 * whitespace removal. The default option for whitespace removal will be revisited in Angular 6
	 * and might be changed to "on" by default.
	 */
	var WhitespaceVisitor = /** @class */ (function () {
	    function WhitespaceVisitor() {
	    }
	    WhitespaceVisitor.prototype.visitElement = function (element, context) {
	        if (SKIP_WS_TRIM_TAGS.has(element.name) || hasPreserveWhitespacesAttr(element.attrs)) {
	            // don't descent into elements where we need to preserve whitespaces
	            // but still visit all attributes to eliminate one used as a market to preserve WS
	            return new Element$1$1(element.name, visitAll$1(this, element.attrs), element.children, element.sourceSpan, element.startSourceSpan, element.endSourceSpan, element.i18n);
	        }
	        return new Element$1$1(element.name, element.attrs, visitAllWithSiblings(this, element.children), element.sourceSpan, element.startSourceSpan, element.endSourceSpan, element.i18n);
	    };
	    WhitespaceVisitor.prototype.visitAttribute = function (attribute, context) {
	        return attribute.name !== PRESERVE_WS_ATTR_NAME ? attribute : null;
	    };
	    WhitespaceVisitor.prototype.visitText = function (text, context) {
	        var isNotBlank = text.value.match(NO_WS_REGEXP);
	        var hasExpansionSibling = context &&
	            (context.prev instanceof Expansion || context.next instanceof Expansion);
	        if (isNotBlank || hasExpansionSibling) {
	            return new Text$3(replaceNgsp(text.value).replace(WS_REPLACE_REGEXP, ' '), text.sourceSpan, text.i18n);
	        }
	        return null;
	    };
	    WhitespaceVisitor.prototype.visitComment = function (comment, context) {
	        return comment;
	    };
	    WhitespaceVisitor.prototype.visitExpansion = function (expansion, context) {
	        return expansion;
	    };
	    WhitespaceVisitor.prototype.visitExpansionCase = function (expansionCase, context) {
	        return expansionCase;
	    };
	    return WhitespaceVisitor;
	}());
	function removeWhitespaces(htmlAstWithErrors) {
	    return new ParseTreeResult(visitAll$1(new WhitespaceVisitor(), htmlAstWithErrors.rootNodes), htmlAstWithErrors.errors);
	}
	function visitAllWithSiblings(visitor, nodes) {
	    var result = [];
	    nodes.forEach(function (ast, i) {
	        var context = { prev: nodes[i - 1], next: nodes[i + 1] };
	        var astResult = ast.visit(visitor, context);
	        if (astResult) {
	            result.push(astResult);
	        }
	    });
	    return result;
	}

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	// http://cldr.unicode.org/index/cldr-spec/plural-rules
	var PLURAL_CASES = ['zero', 'one', 'two', 'few', 'many', 'other'];
	/**
	 * Expands special forms into elements.
	 *
	 * For example,
	 *
	 * ```
	 * { messages.length, plural,
	 *   =0 {zero}
	 *   =1 {one}
	 *   other {more than one}
	 * }
	 * ```
	 *
	 * will be expanded into
	 *
	 * ```
	 * <ng-container [ngPlural]="messages.length">
	 *   <ng-template ngPluralCase="=0">zero</ng-template>
	 *   <ng-template ngPluralCase="=1">one</ng-template>
	 *   <ng-template ngPluralCase="other">more than one</ng-template>
	 * </ng-container>
	 * ```
	 */
	function expandNodes(nodes) {
	    var expander = new _Expander();
	    return new ExpansionResult(visitAll$1(expander, nodes), expander.isExpanded, expander.errors);
	}
	var ExpansionResult = /** @class */ (function () {
	    function ExpansionResult(nodes, expanded, errors) {
	        this.nodes = nodes;
	        this.expanded = expanded;
	        this.errors = errors;
	    }
	    return ExpansionResult;
	}());
	var ExpansionError = /** @class */ (function (_super) {
	    __extends(ExpansionError, _super);
	    function ExpansionError(span, errorMsg) {
	        return _super.call(this, span, errorMsg) || this;
	    }
	    return ExpansionError;
	}(ParseError));
	/**
	 * Expand expansion forms (plural, select) to directives
	 *
	 * @internal
	 */
	var _Expander = /** @class */ (function () {
	    function _Expander() {
	        this.isExpanded = false;
	        this.errors = [];
	    }
	    _Expander.prototype.visitElement = function (element, context) {
	        return new Element$1$1(element.name, element.attrs, visitAll$1(this, element.children), element.sourceSpan, element.startSourceSpan, element.endSourceSpan);
	    };
	    _Expander.prototype.visitAttribute = function (attribute, context) {
	        return attribute;
	    };
	    _Expander.prototype.visitText = function (text, context) {
	        return text;
	    };
	    _Expander.prototype.visitComment = function (comment, context) {
	        return comment;
	    };
	    _Expander.prototype.visitExpansion = function (icu, context) {
	        this.isExpanded = true;
	        return icu.type == 'plural' ? _expandPluralForm(icu, this.errors) :
	            _expandDefaultForm(icu, this.errors);
	    };
	    _Expander.prototype.visitExpansionCase = function (icuCase, context) {
	        throw new Error('Should not be reached');
	    };
	    return _Expander;
	}());
	// Plural forms are expanded to `NgPlural` and `NgPluralCase`s
	function _expandPluralForm(ast, errors) {
	    var children = ast.cases.map(function (c) {
	        if (PLURAL_CASES.indexOf(c.value) == -1 && !c.value.match(/^=\d+$/)) {
	            errors.push(new ExpansionError(c.valueSourceSpan, "Plural cases should be \"=<number>\" or one of " + PLURAL_CASES.join(', ')));
	        }
	        var expansionResult = expandNodes(c.expression);
	        errors.push.apply(errors, __spread(expansionResult.errors));
	        return new Element$1$1("ng-template", [new Attribute('ngPluralCase', "" + c.value, c.valueSourceSpan)], expansionResult.nodes, c.sourceSpan, c.sourceSpan, c.sourceSpan);
	    });
	    var switchAttr = new Attribute('[ngPlural]', ast.switchValue, ast.switchValueSourceSpan);
	    return new Element$1$1('ng-container', [switchAttr], children, ast.sourceSpan, ast.sourceSpan, ast.sourceSpan);
	}
	// ICU messages (excluding plural form) are expanded to `NgSwitch`  and `NgSwitchCase`s
	function _expandDefaultForm(ast, errors) {
	    var children = ast.cases.map(function (c) {
	        var expansionResult = expandNodes(c.expression);
	        errors.push.apply(errors, __spread(expansionResult.errors));
	        if (c.value === 'other') {
	            // other is the default case when no values match
	            return new Element$1$1("ng-template", [new Attribute('ngSwitchDefault', '', c.valueSourceSpan)], expansionResult.nodes, c.sourceSpan, c.sourceSpan, c.sourceSpan);
	        }
	        return new Element$1$1("ng-template", [new Attribute('ngSwitchCase', "" + c.value, c.valueSourceSpan)], expansionResult.nodes, c.sourceSpan, c.sourceSpan, c.sourceSpan);
	    });
	    var switchAttr = new Attribute('[ngSwitch]', ast.switchValue, ast.switchValueSourceSpan);
	    return new Element$1$1('ng-container', [switchAttr], children, ast.sourceSpan, ast.sourceSpan, ast.sourceSpan);
	}

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	var _a;
	/**
	 * A segment of text within the template.
	 */
	var TextAst = /** @class */ (function () {
	    function TextAst(value, ngContentIndex, sourceSpan) {
	        this.value = value;
	        this.ngContentIndex = ngContentIndex;
	        this.sourceSpan = sourceSpan;
	    }
	    TextAst.prototype.visit = function (visitor, context) {
	        return visitor.visitText(this, context);
	    };
	    return TextAst;
	}());
	/**
	 * A bound expression within the text of a template.
	 */
	var BoundTextAst = /** @class */ (function () {
	    function BoundTextAst(value, ngContentIndex, sourceSpan) {
	        this.value = value;
	        this.ngContentIndex = ngContentIndex;
	        this.sourceSpan = sourceSpan;
	    }
	    BoundTextAst.prototype.visit = function (visitor, context) {
	        return visitor.visitBoundText(this, context);
	    };
	    return BoundTextAst;
	}());
	/**
	 * A plain attribute on an element.
	 */
	var AttrAst = /** @class */ (function () {
	    function AttrAst(name, value, sourceSpan) {
	        this.name = name;
	        this.value = value;
	        this.sourceSpan = sourceSpan;
	    }
	    AttrAst.prototype.visit = function (visitor, context) {
	        return visitor.visitAttr(this, context);
	    };
	    return AttrAst;
	}());
	var BoundPropertyMapping = (_a = {},
	    _a[4 /* Animation */] = 4 /* Animation */,
	    _a[1 /* Attribute */] = 1 /* Attribute */,
	    _a[2 /* Class */] = 2 /* Class */,
	    _a[0 /* Property */] = 0 /* Property */,
	    _a[3 /* Style */] = 3 /* Style */,
	    _a);
	/**
	 * A binding for an element property (e.g. `[property]="expression"`) or an animation trigger (e.g.
	 * `[@trigger]="stateExp"`)
	 */
	var BoundElementPropertyAst = /** @class */ (function () {
	    function BoundElementPropertyAst(name, type, securityContext, value, unit, sourceSpan) {
	        this.name = name;
	        this.type = type;
	        this.securityContext = securityContext;
	        this.value = value;
	        this.unit = unit;
	        this.sourceSpan = sourceSpan;
	        this.isAnimation = this.type === 4 /* Animation */;
	    }
	    BoundElementPropertyAst.fromBoundProperty = function (prop) {
	        var type = BoundPropertyMapping[prop.type];
	        return new BoundElementPropertyAst(prop.name, type, prop.securityContext, prop.value, prop.unit, prop.sourceSpan);
	    };
	    BoundElementPropertyAst.prototype.visit = function (visitor, context) {
	        return visitor.visitElementProperty(this, context);
	    };
	    return BoundElementPropertyAst;
	}());
	/**
	 * A binding for an element event (e.g. `(event)="handler()"`) or an animation trigger event (e.g.
	 * `(@trigger.phase)="callback($event)"`).
	 */
	var BoundEventAst = /** @class */ (function () {
	    function BoundEventAst(name, target, phase, handler, sourceSpan, handlerSpan) {
	        this.name = name;
	        this.target = target;
	        this.phase = phase;
	        this.handler = handler;
	        this.sourceSpan = sourceSpan;
	        this.handlerSpan = handlerSpan;
	        this.fullName = BoundEventAst.calcFullName(this.name, this.target, this.phase);
	        this.isAnimation = !!this.phase;
	    }
	    BoundEventAst.calcFullName = function (name, target, phase) {
	        if (target) {
	            return target + ":" + name;
	        }
	        if (phase) {
	            return "@" + name + "." + phase;
	        }
	        return name;
	    };
	    BoundEventAst.fromParsedEvent = function (event) {
	        var target = event.type === 0 /* Regular */ ? event.targetOrPhase : null;
	        var phase = event.type === 1 /* Animation */ ? event.targetOrPhase : null;
	        return new BoundEventAst(event.name, target, phase, event.handler, event.sourceSpan, event.handlerSpan);
	    };
	    BoundEventAst.prototype.visit = function (visitor, context) {
	        return visitor.visitEvent(this, context);
	    };
	    return BoundEventAst;
	}());
	/**
	 * A reference declaration on an element (e.g. `let someName="expression"`).
	 */
	var ReferenceAst = /** @class */ (function () {
	    function ReferenceAst(name, value, originalValue, sourceSpan) {
	        this.name = name;
	        this.value = value;
	        this.originalValue = originalValue;
	        this.sourceSpan = sourceSpan;
	    }
	    ReferenceAst.prototype.visit = function (visitor, context) {
	        return visitor.visitReference(this, context);
	    };
	    return ReferenceAst;
	}());
	/**
	 * A variable declaration on a <ng-template> (e.g. `var-someName="someLocalName"`).
	 */
	var VariableAst = /** @class */ (function () {
	    function VariableAst(name, value, sourceSpan, valueSpan) {
	        this.name = name;
	        this.value = value;
	        this.sourceSpan = sourceSpan;
	        this.valueSpan = valueSpan;
	    }
	    VariableAst.fromParsedVariable = function (v) {
	        return new VariableAst(v.name, v.value, v.sourceSpan, v.valueSpan);
	    };
	    VariableAst.prototype.visit = function (visitor, context) {
	        return visitor.visitVariable(this, context);
	    };
	    return VariableAst;
	}());
	/**
	 * An element declaration in a template.
	 */
	var ElementAst = /** @class */ (function () {
	    function ElementAst(name, attrs, inputs, outputs, references, directives, providers, hasViewContainer, queryMatches, children, ngContentIndex, sourceSpan, endSourceSpan) {
	        this.name = name;
	        this.attrs = attrs;
	        this.inputs = inputs;
	        this.outputs = outputs;
	        this.references = references;
	        this.directives = directives;
	        this.providers = providers;
	        this.hasViewContainer = hasViewContainer;
	        this.queryMatches = queryMatches;
	        this.children = children;
	        this.ngContentIndex = ngContentIndex;
	        this.sourceSpan = sourceSpan;
	        this.endSourceSpan = endSourceSpan;
	    }
	    ElementAst.prototype.visit = function (visitor, context) {
	        return visitor.visitElement(this, context);
	    };
	    return ElementAst;
	}());
	/**
	 * A `<ng-template>` element included in an Angular template.
	 */
	var EmbeddedTemplateAst = /** @class */ (function () {
	    function EmbeddedTemplateAst(attrs, outputs, references, variables, directives, providers, hasViewContainer, queryMatches, children, ngContentIndex, sourceSpan) {
	        this.attrs = attrs;
	        this.outputs = outputs;
	        this.references = references;
	        this.variables = variables;
	        this.directives = directives;
	        this.providers = providers;
	        this.hasViewContainer = hasViewContainer;
	        this.queryMatches = queryMatches;
	        this.children = children;
	        this.ngContentIndex = ngContentIndex;
	        this.sourceSpan = sourceSpan;
	    }
	    EmbeddedTemplateAst.prototype.visit = function (visitor, context) {
	        return visitor.visitEmbeddedTemplate(this, context);
	    };
	    return EmbeddedTemplateAst;
	}());
	/**
	 * A directive property with a bound value (e.g. `*ngIf="condition").
	 */
	var BoundDirectivePropertyAst = /** @class */ (function () {
	    function BoundDirectivePropertyAst(directiveName, templateName, value, sourceSpan) {
	        this.directiveName = directiveName;
	        this.templateName = templateName;
	        this.value = value;
	        this.sourceSpan = sourceSpan;
	    }
	    BoundDirectivePropertyAst.prototype.visit = function (visitor, context) {
	        return visitor.visitDirectiveProperty(this, context);
	    };
	    return BoundDirectivePropertyAst;
	}());
	/**
	 * A directive declared on an element.
	 */
	var DirectiveAst = /** @class */ (function () {
	    function DirectiveAst(directive, inputs, hostProperties, hostEvents, contentQueryStartId, sourceSpan) {
	        this.directive = directive;
	        this.inputs = inputs;
	        this.hostProperties = hostProperties;
	        this.hostEvents = hostEvents;
	        this.contentQueryStartId = contentQueryStartId;
	        this.sourceSpan = sourceSpan;
	    }
	    DirectiveAst.prototype.visit = function (visitor, context) {
	        return visitor.visitDirective(this, context);
	    };
	    return DirectiveAst;
	}());
	/**
	 * A provider declared on an element
	 */
	var ProviderAst = /** @class */ (function () {
	    function ProviderAst(token, multiProvider, eager, providers, providerType, lifecycleHooks, sourceSpan, isModule) {
	        this.token = token;
	        this.multiProvider = multiProvider;
	        this.eager = eager;
	        this.providers = providers;
	        this.providerType = providerType;
	        this.lifecycleHooks = lifecycleHooks;
	        this.sourceSpan = sourceSpan;
	        this.isModule = isModule;
	    }
	    ProviderAst.prototype.visit = function (visitor, context) {
	        // No visit method in the visitor for now...
	        return null;
	    };
	    return ProviderAst;
	}());
	var ProviderAstType;
	(function (ProviderAstType) {
	    ProviderAstType[ProviderAstType["PublicService"] = 0] = "PublicService";
	    ProviderAstType[ProviderAstType["PrivateService"] = 1] = "PrivateService";
	    ProviderAstType[ProviderAstType["Component"] = 2] = "Component";
	    ProviderAstType[ProviderAstType["Directive"] = 3] = "Directive";
	    ProviderAstType[ProviderAstType["Builtin"] = 4] = "Builtin";
	})(ProviderAstType || (ProviderAstType = {}));
	/**
	 * Position where content is to be projected (instance of `<ng-content>` in a template).
	 */
	var NgContentAst = /** @class */ (function () {
	    function NgContentAst(index, ngContentIndex, sourceSpan) {
	        this.index = index;
	        this.ngContentIndex = ngContentIndex;
	        this.sourceSpan = sourceSpan;
	    }
	    NgContentAst.prototype.visit = function (visitor, context) {
	        return visitor.visitNgContent(this, context);
	    };
	    return NgContentAst;
	}());
	/**
	 * A visitor that accepts each node but doesn't do anything. It is intended to be used
	 * as the base class for a visitor that is only interested in a subset of the node types.
	 */
	var NullTemplateVisitor = /** @class */ (function () {
	    function NullTemplateVisitor() {
	    }
	    NullTemplateVisitor.prototype.visitNgContent = function (ast, context) { };
	    NullTemplateVisitor.prototype.visitEmbeddedTemplate = function (ast, context) { };
	    NullTemplateVisitor.prototype.visitElement = function (ast, context) { };
	    NullTemplateVisitor.prototype.visitReference = function (ast, context) { };
	    NullTemplateVisitor.prototype.visitVariable = function (ast, context) { };
	    NullTemplateVisitor.prototype.visitEvent = function (ast, context) { };
	    NullTemplateVisitor.prototype.visitElementProperty = function (ast, context) { };
	    NullTemplateVisitor.prototype.visitAttr = function (ast, context) { };
	    NullTemplateVisitor.prototype.visitBoundText = function (ast, context) { };
	    NullTemplateVisitor.prototype.visitText = function (ast, context) { };
	    NullTemplateVisitor.prototype.visitDirective = function (ast, context) { };
	    NullTemplateVisitor.prototype.visitDirectiveProperty = function (ast, context) { };
	    return NullTemplateVisitor;
	}());
	/**
	 * Base class that can be used to build a visitor that visits each node
	 * in an template ast recursively.
	 */
	var RecursiveTemplateAstVisitor = /** @class */ (function (_super) {
	    __extends(RecursiveTemplateAstVisitor, _super);
	    function RecursiveTemplateAstVisitor() {
	        return _super.call(this) || this;
	    }
	    // Nodes with children
	    RecursiveTemplateAstVisitor.prototype.visitEmbeddedTemplate = function (ast, context) {
	        return this.visitChildren(context, function (visit) {
	            visit(ast.attrs);
	            visit(ast.references);
	            visit(ast.variables);
	            visit(ast.directives);
	            visit(ast.providers);
	            visit(ast.children);
	        });
	    };
	    RecursiveTemplateAstVisitor.prototype.visitElement = function (ast, context) {
	        return this.visitChildren(context, function (visit) {
	            visit(ast.attrs);
	            visit(ast.inputs);
	            visit(ast.outputs);
	            visit(ast.references);
	            visit(ast.directives);
	            visit(ast.providers);
	            visit(ast.children);
	        });
	    };
	    RecursiveTemplateAstVisitor.prototype.visitDirective = function (ast, context) {
	        return this.visitChildren(context, function (visit) {
	            visit(ast.inputs);
	            visit(ast.hostProperties);
	            visit(ast.hostEvents);
	        });
	    };
	    RecursiveTemplateAstVisitor.prototype.visitChildren = function (context, cb) {
	        var results = [];
	        var t = this;
	        function visit(children) {
	            if (children && children.length)
	                results.push(templateVisitAll(t, children, context));
	        }
	        cb(visit);
	        return Array.prototype.concat.apply([], results);
	    };
	    return RecursiveTemplateAstVisitor;
	}(NullTemplateVisitor));
	/**
	 * Visit every node in a list of {@link TemplateAst}s with the given {@link TemplateAstVisitor}.
	 */
	function templateVisitAll(visitor, asts, context) {
	    if (context === void 0) { context = null; }
	    var result = [];
	    var visit = visitor.visit ?
	        function (ast) { return visitor.visit(ast, context) || ast.visit(visitor, context); } :
	        function (ast) { return ast.visit(visitor, context); };
	    asts.forEach(function (ast) {
	        var astResult = visit(ast);
	        if (astResult) {
	            result.push(astResult);
	        }
	    });
	    return result;
	}

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	var ProviderError = /** @class */ (function (_super) {
	    __extends(ProviderError, _super);
	    function ProviderError(message, span) {
	        return _super.call(this, span, message) || this;
	    }
	    return ProviderError;
	}(ParseError));
	var ProviderViewContext = /** @class */ (function () {
	    function ProviderViewContext(reflector, component) {
	        var _this = this;
	        this.reflector = reflector;
	        this.component = component;
	        this.errors = [];
	        this.viewQueries = _getViewQueries(component);
	        this.viewProviders = new Map();
	        component.viewProviders.forEach(function (provider) {
	            if (_this.viewProviders.get(tokenReference(provider.token)) == null) {
	                _this.viewProviders.set(tokenReference(provider.token), true);
	            }
	        });
	    }
	    return ProviderViewContext;
	}());
	var ProviderElementContext = /** @class */ (function () {
	    function ProviderElementContext(viewContext, _parent, _isViewRoot, _directiveAsts, attrs, refs, isTemplate, contentQueryStartId, _sourceSpan) {
	        var _this = this;
	        this.viewContext = viewContext;
	        this._parent = _parent;
	        this._isViewRoot = _isViewRoot;
	        this._directiveAsts = _directiveAsts;
	        this._sourceSpan = _sourceSpan;
	        this._transformedProviders = new Map();
	        this._seenProviders = new Map();
	        this._queriedTokens = new Map();
	        this.transformedHasViewContainer = false;
	        this._attrs = {};
	        attrs.forEach(function (attrAst) { return _this._attrs[attrAst.name] = attrAst.value; });
	        var directivesMeta = _directiveAsts.map(function (directiveAst) { return directiveAst.directive; });
	        this._allProviders =
	            _resolveProvidersFromDirectives(directivesMeta, _sourceSpan, viewContext.errors);
	        this._contentQueries = _getContentQueries(contentQueryStartId, directivesMeta);
	        Array.from(this._allProviders.values()).forEach(function (provider) {
	            _this._addQueryReadsTo(provider.token, provider.token, _this._queriedTokens);
	        });
	        if (isTemplate) {
	            var templateRefId = createTokenForExternalReference(this.viewContext.reflector, Identifiers.TemplateRef);
	            this._addQueryReadsTo(templateRefId, templateRefId, this._queriedTokens);
	        }
	        refs.forEach(function (refAst) {
	            var defaultQueryValue = refAst.value ||
	                createTokenForExternalReference(_this.viewContext.reflector, Identifiers.ElementRef);
	            _this._addQueryReadsTo({ value: refAst.name }, defaultQueryValue, _this._queriedTokens);
	        });
	        if (this._queriedTokens.get(this.viewContext.reflector.resolveExternalReference(Identifiers.ViewContainerRef))) {
	            this.transformedHasViewContainer = true;
	        }
	        // create the providers that we know are eager first
	        Array.from(this._allProviders.values()).forEach(function (provider) {
	            var eager = provider.eager || _this._queriedTokens.get(tokenReference(provider.token));
	            if (eager) {
	                _this._getOrCreateLocalProvider(provider.providerType, provider.token, true);
	            }
	        });
	    }
	    ProviderElementContext.prototype.afterElement = function () {
	        var _this = this;
	        // collect lazy providers
	        Array.from(this._allProviders.values()).forEach(function (provider) {
	            _this._getOrCreateLocalProvider(provider.providerType, provider.token, false);
	        });
	    };
	    Object.defineProperty(ProviderElementContext.prototype, "transformProviders", {
	        get: function () {
	            // Note: Maps keep their insertion order.
	            var lazyProviders = [];
	            var eagerProviders = [];
	            this._transformedProviders.forEach(function (provider) {
	                if (provider.eager) {
	                    eagerProviders.push(provider);
	                }
	                else {
	                    lazyProviders.push(provider);
	                }
	            });
	            return lazyProviders.concat(eagerProviders);
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(ProviderElementContext.prototype, "transformedDirectiveAsts", {
	        get: function () {
	            var sortedProviderTypes = this.transformProviders.map(function (provider) { return provider.token.identifier; });
	            var sortedDirectives = this._directiveAsts.slice();
	            sortedDirectives.sort(function (dir1, dir2) { return sortedProviderTypes.indexOf(dir1.directive.type) -
	                sortedProviderTypes.indexOf(dir2.directive.type); });
	            return sortedDirectives;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(ProviderElementContext.prototype, "queryMatches", {
	        get: function () {
	            var allMatches = [];
	            this._queriedTokens.forEach(function (matches) {
	                allMatches.push.apply(allMatches, __spread(matches));
	            });
	            return allMatches;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    ProviderElementContext.prototype._addQueryReadsTo = function (token, defaultValue, queryReadTokens) {
	        this._getQueriesFor(token).forEach(function (query) {
	            var queryValue = query.meta.read || defaultValue;
	            var tokenRef = tokenReference(queryValue);
	            var queryMatches = queryReadTokens.get(tokenRef);
	            if (!queryMatches) {
	                queryMatches = [];
	                queryReadTokens.set(tokenRef, queryMatches);
	            }
	            queryMatches.push({ queryId: query.queryId, value: queryValue });
	        });
	    };
	    ProviderElementContext.prototype._getQueriesFor = function (token) {
	        var result = [];
	        var currentEl = this;
	        var distance = 0;
	        var queries;
	        while (currentEl !== null) {
	            queries = currentEl._contentQueries.get(tokenReference(token));
	            if (queries) {
	                result.push.apply(result, __spread(queries.filter(function (query) { return query.meta.descendants || distance <= 1; })));
	            }
	            if (currentEl._directiveAsts.length > 0) {
	                distance++;
	            }
	            currentEl = currentEl._parent;
	        }
	        queries = this.viewContext.viewQueries.get(tokenReference(token));
	        if (queries) {
	            result.push.apply(result, __spread(queries));
	        }
	        return result;
	    };
	    ProviderElementContext.prototype._getOrCreateLocalProvider = function (requestingProviderType, token, eager) {
	        var _this = this;
	        var resolvedProvider = this._allProviders.get(tokenReference(token));
	        if (!resolvedProvider ||
	            ((requestingProviderType === ProviderAstType.Directive ||
	                requestingProviderType === ProviderAstType.PublicService) &&
	                resolvedProvider.providerType === ProviderAstType.PrivateService) ||
	            ((requestingProviderType === ProviderAstType.PrivateService ||
	                requestingProviderType === ProviderAstType.PublicService) &&
	                resolvedProvider.providerType === ProviderAstType.Builtin)) {
	            return null;
	        }
	        var transformedProviderAst = this._transformedProviders.get(tokenReference(token));
	        if (transformedProviderAst) {
	            return transformedProviderAst;
	        }
	        if (this._seenProviders.get(tokenReference(token)) != null) {
	            this.viewContext.errors.push(new ProviderError("Cannot instantiate cyclic dependency! " + tokenName(token), this._sourceSpan));
	            return null;
	        }
	        this._seenProviders.set(tokenReference(token), true);
	        var transformedProviders = resolvedProvider.providers.map(function (provider) {
	            var transformedUseValue = provider.useValue;
	            var transformedUseExisting = provider.useExisting;
	            var transformedDeps = undefined;
	            if (provider.useExisting != null) {
	                var existingDiDep = _this._getDependency(resolvedProvider.providerType, { token: provider.useExisting }, eager);
	                if (existingDiDep.token != null) {
	                    transformedUseExisting = existingDiDep.token;
	                }
	                else {
	                    transformedUseExisting = null;
	                    transformedUseValue = existingDiDep.value;
	                }
	            }
	            else if (provider.useFactory) {
	                var deps = provider.deps || provider.useFactory.diDeps;
	                transformedDeps =
	                    deps.map(function (dep) { return _this._getDependency(resolvedProvider.providerType, dep, eager); });
	            }
	            else if (provider.useClass) {
	                var deps = provider.deps || provider.useClass.diDeps;
	                transformedDeps =
	                    deps.map(function (dep) { return _this._getDependency(resolvedProvider.providerType, dep, eager); });
	            }
	            return _transformProvider(provider, {
	                useExisting: transformedUseExisting,
	                useValue: transformedUseValue,
	                deps: transformedDeps
	            });
	        });
	        transformedProviderAst =
	            _transformProviderAst(resolvedProvider, { eager: eager, providers: transformedProviders });
	        this._transformedProviders.set(tokenReference(token), transformedProviderAst);
	        return transformedProviderAst;
	    };
	    ProviderElementContext.prototype._getLocalDependency = function (requestingProviderType, dep, eager) {
	        if (eager === void 0) { eager = false; }
	        if (dep.isAttribute) {
	            var attrValue = this._attrs[dep.token.value];
	            return { isValue: true, value: attrValue == null ? null : attrValue };
	        }
	        if (dep.token != null) {
	            // access builtints
	            if ((requestingProviderType === ProviderAstType.Directive ||
	                requestingProviderType === ProviderAstType.Component)) {
	                if (tokenReference(dep.token) ===
	                    this.viewContext.reflector.resolveExternalReference(Identifiers.Renderer) ||
	                    tokenReference(dep.token) ===
	                        this.viewContext.reflector.resolveExternalReference(Identifiers.ElementRef) ||
	                    tokenReference(dep.token) ===
	                        this.viewContext.reflector.resolveExternalReference(Identifiers.ChangeDetectorRef) ||
	                    tokenReference(dep.token) ===
	                        this.viewContext.reflector.resolveExternalReference(Identifiers.TemplateRef)) {
	                    return dep;
	                }
	                if (tokenReference(dep.token) ===
	                    this.viewContext.reflector.resolveExternalReference(Identifiers.ViewContainerRef)) {
	                    this.transformedHasViewContainer = true;
	                }
	            }
	            // access the injector
	            if (tokenReference(dep.token) ===
	                this.viewContext.reflector.resolveExternalReference(Identifiers.Injector)) {
	                return dep;
	            }
	            // access providers
	            if (this._getOrCreateLocalProvider(requestingProviderType, dep.token, eager) != null) {
	                return dep;
	            }
	        }
	        return null;
	    };
	    ProviderElementContext.prototype._getDependency = function (requestingProviderType, dep, eager) {
	        if (eager === void 0) { eager = false; }
	        var currElement = this;
	        var currEager = eager;
	        var result = null;
	        if (!dep.isSkipSelf) {
	            result = this._getLocalDependency(requestingProviderType, dep, eager);
	        }
	        if (dep.isSelf) {
	            if (!result && dep.isOptional) {
	                result = { isValue: true, value: null };
	            }
	        }
	        else {
	            // check parent elements
	            while (!result && currElement._parent) {
	                var prevElement = currElement;
	                currElement = currElement._parent;
	                if (prevElement._isViewRoot) {
	                    currEager = false;
	                }
	                result = currElement._getLocalDependency(ProviderAstType.PublicService, dep, currEager);
	            }
	            // check @Host restriction
	            if (!result) {
	                if (!dep.isHost || this.viewContext.component.isHost ||
	                    this.viewContext.component.type.reference === tokenReference(dep.token) ||
	                    this.viewContext.viewProviders.get(tokenReference(dep.token)) != null) {
	                    result = dep;
	                }
	                else {
	                    result = dep.isOptional ? { isValue: true, value: null } : null;
	                }
	            }
	        }
	        if (!result) {
	            this.viewContext.errors.push(new ProviderError("No provider for " + tokenName(dep.token), this._sourceSpan));
	        }
	        return result;
	    };
	    return ProviderElementContext;
	}());
	var NgModuleProviderAnalyzer = /** @class */ (function () {
	    function NgModuleProviderAnalyzer(reflector, ngModule, extraProviders, sourceSpan) {
	        var _this = this;
	        this.reflector = reflector;
	        this._transformedProviders = new Map();
	        this._seenProviders = new Map();
	        this._errors = [];
	        this._allProviders = new Map();
	        ngModule.transitiveModule.modules.forEach(function (ngModuleType) {
	            var ngModuleProvider = { token: { identifier: ngModuleType }, useClass: ngModuleType };
	            _resolveProviders([ngModuleProvider], ProviderAstType.PublicService, true, sourceSpan, _this._errors, _this._allProviders, /* isModule */ true);
	        });
	        _resolveProviders(ngModule.transitiveModule.providers.map(function (entry) { return entry.provider; }).concat(extraProviders), ProviderAstType.PublicService, false, sourceSpan, this._errors, this._allProviders, 
	        /* isModule */ false);
	    }
	    NgModuleProviderAnalyzer.prototype.parse = function () {
	        var _this = this;
	        Array.from(this._allProviders.values()).forEach(function (provider) {
	            _this._getOrCreateLocalProvider(provider.token, provider.eager);
	        });
	        if (this._errors.length > 0) {
	            var errorString = this._errors.join('\n');
	            throw new Error("Provider parse errors:\n" + errorString);
	        }
	        // Note: Maps keep their insertion order.
	        var lazyProviders = [];
	        var eagerProviders = [];
	        this._transformedProviders.forEach(function (provider) {
	            if (provider.eager) {
	                eagerProviders.push(provider);
	            }
	            else {
	                lazyProviders.push(provider);
	            }
	        });
	        return lazyProviders.concat(eagerProviders);
	    };
	    NgModuleProviderAnalyzer.prototype._getOrCreateLocalProvider = function (token, eager) {
	        var _this = this;
	        var resolvedProvider = this._allProviders.get(tokenReference(token));
	        if (!resolvedProvider) {
	            return null;
	        }
	        var transformedProviderAst = this._transformedProviders.get(tokenReference(token));
	        if (transformedProviderAst) {
	            return transformedProviderAst;
	        }
	        if (this._seenProviders.get(tokenReference(token)) != null) {
	            this._errors.push(new ProviderError("Cannot instantiate cyclic dependency! " + tokenName(token), resolvedProvider.sourceSpan));
	            return null;
	        }
	        this._seenProviders.set(tokenReference(token), true);
	        var transformedProviders = resolvedProvider.providers.map(function (provider) {
	            var transformedUseValue = provider.useValue;
	            var transformedUseExisting = provider.useExisting;
	            var transformedDeps = undefined;
	            if (provider.useExisting != null) {
	                var existingDiDep = _this._getDependency({ token: provider.useExisting }, eager, resolvedProvider.sourceSpan);
	                if (existingDiDep.token != null) {
	                    transformedUseExisting = existingDiDep.token;
	                }
	                else {
	                    transformedUseExisting = null;
	                    transformedUseValue = existingDiDep.value;
	                }
	            }
	            else if (provider.useFactory) {
	                var deps = provider.deps || provider.useFactory.diDeps;
	                transformedDeps =
	                    deps.map(function (dep) { return _this._getDependency(dep, eager, resolvedProvider.sourceSpan); });
	            }
	            else if (provider.useClass) {
	                var deps = provider.deps || provider.useClass.diDeps;
	                transformedDeps =
	                    deps.map(function (dep) { return _this._getDependency(dep, eager, resolvedProvider.sourceSpan); });
	            }
	            return _transformProvider(provider, {
	                useExisting: transformedUseExisting,
	                useValue: transformedUseValue,
	                deps: transformedDeps
	            });
	        });
	        transformedProviderAst =
	            _transformProviderAst(resolvedProvider, { eager: eager, providers: transformedProviders });
	        this._transformedProviders.set(tokenReference(token), transformedProviderAst);
	        return transformedProviderAst;
	    };
	    NgModuleProviderAnalyzer.prototype._getDependency = function (dep, eager, requestorSourceSpan) {
	        if (eager === void 0) { eager = false; }
	        if (!dep.isSkipSelf && dep.token != null) {
	            // access the injector
	            if (tokenReference(dep.token) ===
	                this.reflector.resolveExternalReference(Identifiers.Injector) ||
	                tokenReference(dep.token) ===
	                    this.reflector.resolveExternalReference(Identifiers.ComponentFactoryResolver)) ;
	            else if (this._getOrCreateLocalProvider(dep.token, eager) != null) ;
	        }
	        return dep;
	    };
	    return NgModuleProviderAnalyzer;
	}());
	function _transformProvider(provider, _a) {
	    var useExisting = _a.useExisting, useValue = _a.useValue, deps = _a.deps;
	    return {
	        token: provider.token,
	        useClass: provider.useClass,
	        useExisting: useExisting,
	        useFactory: provider.useFactory,
	        useValue: useValue,
	        deps: deps,
	        multi: provider.multi
	    };
	}
	function _transformProviderAst(provider, _a) {
	    var eager = _a.eager, providers = _a.providers;
	    return new ProviderAst(provider.token, provider.multiProvider, provider.eager || eager, providers, provider.providerType, provider.lifecycleHooks, provider.sourceSpan, provider.isModule);
	}
	function _resolveProvidersFromDirectives(directives, sourceSpan, targetErrors) {
	    var providersByToken = new Map();
	    directives.forEach(function (directive) {
	        var dirProvider = { token: { identifier: directive.type }, useClass: directive.type };
	        _resolveProviders([dirProvider], directive.isComponent ? ProviderAstType.Component : ProviderAstType.Directive, true, sourceSpan, targetErrors, providersByToken, /* isModule */ false);
	    });
	    // Note: directives need to be able to overwrite providers of a component!
	    var directivesWithComponentFirst = directives.filter(function (dir) { return dir.isComponent; }).concat(directives.filter(function (dir) { return !dir.isComponent; }));
	    directivesWithComponentFirst.forEach(function (directive) {
	        _resolveProviders(directive.providers, ProviderAstType.PublicService, false, sourceSpan, targetErrors, providersByToken, /* isModule */ false);
	        _resolveProviders(directive.viewProviders, ProviderAstType.PrivateService, false, sourceSpan, targetErrors, providersByToken, /* isModule */ false);
	    });
	    return providersByToken;
	}
	function _resolveProviders(providers, providerType, eager, sourceSpan, targetErrors, targetProvidersByToken, isModule) {
	    providers.forEach(function (provider) {
	        var resolvedProvider = targetProvidersByToken.get(tokenReference(provider.token));
	        if (resolvedProvider != null && !!resolvedProvider.multiProvider !== !!provider.multi) {
	            targetErrors.push(new ProviderError("Mixing multi and non multi provider is not possible for token " + tokenName(resolvedProvider.token), sourceSpan));
	        }
	        if (!resolvedProvider) {
	            var lifecycleHooks = provider.token.identifier &&
	                provider.token.identifier.lifecycleHooks ?
	                provider.token.identifier.lifecycleHooks :
	                [];
	            var isUseValue = !(provider.useClass || provider.useExisting || provider.useFactory);
	            resolvedProvider = new ProviderAst(provider.token, !!provider.multi, eager || isUseValue, [provider], providerType, lifecycleHooks, sourceSpan, isModule);
	            targetProvidersByToken.set(tokenReference(provider.token), resolvedProvider);
	        }
	        else {
	            if (!provider.multi) {
	                resolvedProvider.providers.length = 0;
	            }
	            resolvedProvider.providers.push(provider);
	        }
	    });
	}
	function _getViewQueries(component) {
	    // Note: queries start with id 1 so we can use the number in a Bloom filter!
	    var viewQueryId = 1;
	    var viewQueries = new Map();
	    if (component.viewQueries) {
	        component.viewQueries.forEach(function (query) { return _addQueryToTokenMap(viewQueries, { meta: query, queryId: viewQueryId++ }); });
	    }
	    return viewQueries;
	}
	function _getContentQueries(contentQueryStartId, directives) {
	    var contentQueryId = contentQueryStartId;
	    var contentQueries = new Map();
	    directives.forEach(function (directive, directiveIndex) {
	        if (directive.queries) {
	            directive.queries.forEach(function (query) { return _addQueryToTokenMap(contentQueries, { meta: query, queryId: contentQueryId++ }); });
	        }
	    });
	    return contentQueries;
	}
	function _addQueryToTokenMap(map, query) {
	    query.meta.selectors.forEach(function (token) {
	        var entry = map.get(tokenReference(token));
	        if (!entry) {
	            entry = [];
	            map.set(tokenReference(token), entry);
	        }
	        entry.push(query);
	    });
	}

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	var StyleWithImports = /** @class */ (function () {
	    function StyleWithImports(style, styleUrls) {
	        this.style = style;
	        this.styleUrls = styleUrls;
	    }
	    return StyleWithImports;
	}());
	function isStyleUrlResolvable(url) {
	    if (url == null || url.length === 0 || url[0] == '/')
	        return false;
	    var schemeMatch = url.match(URL_WITH_SCHEMA_REGEXP);
	    return schemeMatch === null || schemeMatch[1] == 'package' || schemeMatch[1] == 'asset';
	}
	/**
	 * Rewrites stylesheets by resolving and removing the @import urls that
	 * are either relative or don't have a `package:` scheme
	 */
	function extractStyleUrls(resolver, baseUrl, cssText) {
	    var foundUrls = [];
	    var modifiedCssText = cssText.replace(CSS_STRIPPABLE_COMMENT_REGEXP, '')
	        .replace(CSS_IMPORT_REGEXP, function () {
	        var m = [];
	        for (var _i = 0; _i < arguments.length; _i++) {
	            m[_i] = arguments[_i];
	        }
	        var url = m[1] || m[2];
	        if (!isStyleUrlResolvable(url)) {
	            // Do not attempt to resolve non-package absolute URLs with URI
	            // scheme
	            return m[0];
	        }
	        foundUrls.push(resolver.resolve(baseUrl, url));
	        return '';
	    });
	    return new StyleWithImports(modifiedCssText, foundUrls);
	}
	var CSS_IMPORT_REGEXP = /@import\s+(?:url\()?\s*(?:(?:['"]([^'"]*))|([^;\)\s]*))[^;]*;?/g;
	var CSS_STRIPPABLE_COMMENT_REGEXP = /\/\*(?!#\s*(?:sourceURL|sourceMappingURL)=)[\s\S]+?\*\//g;
	var URL_WITH_SCHEMA_REGEXP = /^([^:/?#]+):/;

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	var PROPERTY_PARTS_SEPARATOR = '.';
	var ATTRIBUTE_PREFIX = 'attr';
	var CLASS_PREFIX = 'class';
	var STYLE_PREFIX = 'style';
	var TEMPLATE_ATTR_PREFIX = '*';
	var ANIMATE_PROP_PREFIX = 'animate-';
	/**
	 * Parses bindings in templates and in the directive host area.
	 */
	var BindingParser = /** @class */ (function () {
	    function BindingParser(_exprParser, _interpolationConfig, _schemaRegistry, pipes, errors) {
	        this._exprParser = _exprParser;
	        this._interpolationConfig = _interpolationConfig;
	        this._schemaRegistry = _schemaRegistry;
	        this.errors = errors;
	        this.pipesByName = null;
	        this._usedPipes = new Map();
	        // When the `pipes` parameter is `null`, do not check for used pipes
	        // This is used in IVY when we might not know the available pipes at compile time
	        if (pipes) {
	            var pipesByName_1 = new Map();
	            pipes.forEach(function (pipe) { return pipesByName_1.set(pipe.name, pipe); });
	            this.pipesByName = pipesByName_1;
	        }
	    }
	    Object.defineProperty(BindingParser.prototype, "interpolationConfig", {
	        get: function () {
	            return this._interpolationConfig;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    BindingParser.prototype.getUsedPipes = function () {
	        return Array.from(this._usedPipes.values());
	    };
	    BindingParser.prototype.createBoundHostProperties = function (dirMeta, sourceSpan) {
	        var _this = this;
	        if (dirMeta.hostProperties) {
	            var boundProps_1 = [];
	            Object.keys(dirMeta.hostProperties).forEach(function (propName) {
	                var expression = dirMeta.hostProperties[propName];
	                if (typeof expression === 'string') {
	                    _this.parsePropertyBinding(propName, expression, true, sourceSpan, sourceSpan.start.offset, undefined, [], boundProps_1);
	                }
	                else {
	                    _this._reportError("Value of the host property binding \"" + propName + "\" needs to be a string representing an expression but got \"" + expression + "\" (" + typeof expression + ")", sourceSpan);
	                }
	            });
	            return boundProps_1;
	        }
	        return null;
	    };
	    BindingParser.prototype.createDirectiveHostPropertyAsts = function (dirMeta, elementSelector, sourceSpan) {
	        var _this = this;
	        var boundProps = this.createBoundHostProperties(dirMeta, sourceSpan);
	        return boundProps &&
	            boundProps.map(function (prop) { return _this.createBoundElementProperty(elementSelector, prop); });
	    };
	    BindingParser.prototype.createDirectiveHostEventAsts = function (dirMeta, sourceSpan) {
	        var _this = this;
	        if (dirMeta.hostListeners) {
	            var targetEvents_1 = [];
	            Object.keys(dirMeta.hostListeners).forEach(function (propName) {
	                var expression = dirMeta.hostListeners[propName];
	                if (typeof expression === 'string') {
	                    // TODO: pass a more accurate handlerSpan for this event.
	                    _this.parseEvent(propName, expression, sourceSpan, sourceSpan, [], targetEvents_1);
	                }
	                else {
	                    _this._reportError("Value of the host listener \"" + propName + "\" needs to be a string representing an expression but got \"" + expression + "\" (" + typeof expression + ")", sourceSpan);
	                }
	            });
	            return targetEvents_1;
	        }
	        return null;
	    };
	    BindingParser.prototype.parseInterpolation = function (value, sourceSpan) {
	        var sourceInfo = sourceSpan.start.toString();
	        try {
	            var ast = this._exprParser.parseInterpolation(value, sourceInfo, sourceSpan.start.offset, this._interpolationConfig);
	            if (ast)
	                this._reportExpressionParserErrors(ast.errors, sourceSpan);
	            this._checkPipes(ast, sourceSpan);
	            return ast;
	        }
	        catch (e) {
	            this._reportError("" + e, sourceSpan);
	            return this._exprParser.wrapLiteralPrimitive('ERROR', sourceInfo, sourceSpan.start.offset);
	        }
	    };
	    /**
	     * Parses the bindings in a microsyntax expression, and converts them to
	     * `ParsedProperty` or `ParsedVariable`.
	     *
	     * @param tplKey template binding name
	     * @param tplValue template binding value
	     * @param sourceSpan span of template binding relative to entire the template
	     * @param absoluteValueOffset start of the tplValue relative to the entire template
	     * @param targetMatchableAttrs potential attributes to match in the template
	     * @param targetProps target property bindings in the template
	     * @param targetVars target variables in the template
	     */
	    BindingParser.prototype.parseInlineTemplateBinding = function (tplKey, tplValue, sourceSpan, absoluteValueOffset, targetMatchableAttrs, targetProps, targetVars) {
	        var e_1, _a;
	        var absoluteKeyOffset = sourceSpan.start.offset + TEMPLATE_ATTR_PREFIX.length;
	        var bindings = this._parseTemplateBindings(tplKey, tplValue, sourceSpan, absoluteKeyOffset, absoluteValueOffset);
	        try {
	            for (var bindings_1 = __values(bindings), bindings_1_1 = bindings_1.next(); !bindings_1_1.done; bindings_1_1 = bindings_1.next()) {
	                var binding = bindings_1_1.value;
	                // sourceSpan is for the entire HTML attribute. bindingSpan is for a particular
	                // binding within the microsyntax expression so it's more narrow than sourceSpan.
	                var bindingSpan = moveParseSourceSpan(sourceSpan, binding.sourceSpan);
	                var key = binding.key.source;
	                var keySpan = moveParseSourceSpan(sourceSpan, binding.key.span);
	                if (binding instanceof VariableBinding) {
	                    var value = binding.value ? binding.value.source : '$implicit';
	                    var valueSpan = binding.value ? moveParseSourceSpan(sourceSpan, binding.value.span) : undefined;
	                    targetVars.push(new ParsedVariable(key, value, bindingSpan, keySpan, valueSpan));
	                }
	                else if (binding.value) {
	                    var valueSpan = moveParseSourceSpan(sourceSpan, binding.value.ast.sourceSpan);
	                    this._parsePropertyAst(key, binding.value, sourceSpan, valueSpan, targetMatchableAttrs, targetProps);
	                }
	                else {
	                    targetMatchableAttrs.push([key, '']);
	                    this.parseLiteralAttr(key, null, sourceSpan, absoluteValueOffset, undefined, targetMatchableAttrs, targetProps);
	                }
	            }
	        }
	        catch (e_1_1) { e_1 = { error: e_1_1 }; }
	        finally {
	            try {
	                if (bindings_1_1 && !bindings_1_1.done && (_a = bindings_1.return)) _a.call(bindings_1);
	            }
	            finally { if (e_1) throw e_1.error; }
	        }
	    };
	    /**
	     * Parses the bindings in a microsyntax expression, e.g.
	     * ```
	     *    <tag *tplKey="let value1 = prop; let value2 = localVar">
	     * ```
	     *
	     * @param tplKey template binding name
	     * @param tplValue template binding value
	     * @param sourceSpan span of template binding relative to entire the template
	     * @param absoluteKeyOffset start of the `tplKey`
	     * @param absoluteValueOffset start of the `tplValue`
	     */
	    BindingParser.prototype._parseTemplateBindings = function (tplKey, tplValue, sourceSpan, absoluteKeyOffset, absoluteValueOffset) {
	        var _this = this;
	        var sourceInfo = sourceSpan.start.toString();
	        try {
	            var bindingsResult = this._exprParser.parseTemplateBindings(tplKey, tplValue, sourceInfo, absoluteKeyOffset, absoluteValueOffset);
	            this._reportExpressionParserErrors(bindingsResult.errors, sourceSpan);
	            bindingsResult.templateBindings.forEach(function (binding) {
	                if (binding.value instanceof ASTWithSource) {
	                    _this._checkPipes(binding.value, sourceSpan);
	                }
	            });
	            bindingsResult.warnings.forEach(function (warning) {
	                _this._reportError(warning, sourceSpan, ParseErrorLevel.WARNING);
	            });
	            return bindingsResult.templateBindings;
	        }
	        catch (e) {
	            this._reportError("" + e, sourceSpan);
	            return [];
	        }
	    };
	    BindingParser.prototype.parseLiteralAttr = function (name, value, sourceSpan, absoluteOffset, valueSpan, targetMatchableAttrs, targetProps) {
	        if (isAnimationLabel(name)) {
	            name = name.substring(1);
	            if (value) {
	                this._reportError("Assigning animation triggers via @prop=\"exp\" attributes with an expression is invalid." +
	                    " Use property bindings (e.g. [@prop]=\"exp\") or use an attribute without a value (e.g. @prop) instead.", sourceSpan, ParseErrorLevel.ERROR);
	            }
	            this._parseAnimation(name, value, sourceSpan, absoluteOffset, valueSpan, targetMatchableAttrs, targetProps);
	        }
	        else {
	            targetProps.push(new ParsedProperty(name, this._exprParser.wrapLiteralPrimitive(value, '', absoluteOffset), ParsedPropertyType.LITERAL_ATTR, sourceSpan, valueSpan));
	        }
	    };
	    BindingParser.prototype.parsePropertyBinding = function (name, expression, isHost, sourceSpan, absoluteOffset, valueSpan, targetMatchableAttrs, targetProps) {
	        if (name.length === 0) {
	            this._reportError("Property name is missing in binding", sourceSpan);
	        }
	        var isAnimationProp = false;
	        if (name.startsWith(ANIMATE_PROP_PREFIX)) {
	            isAnimationProp = true;
	            name = name.substring(ANIMATE_PROP_PREFIX.length);
	        }
	        else if (isAnimationLabel(name)) {
	            isAnimationProp = true;
	            name = name.substring(1);
	        }
	        if (isAnimationProp) {
	            this._parseAnimation(name, expression, sourceSpan, absoluteOffset, valueSpan, targetMatchableAttrs, targetProps);
	        }
	        else {
	            this._parsePropertyAst(name, this._parseBinding(expression, isHost, valueSpan || sourceSpan, absoluteOffset), sourceSpan, valueSpan, targetMatchableAttrs, targetProps);
	        }
	    };
	    BindingParser.prototype.parsePropertyInterpolation = function (name, value, sourceSpan, valueSpan, targetMatchableAttrs, targetProps) {
	        var expr = this.parseInterpolation(value, valueSpan || sourceSpan);
	        if (expr) {
	            this._parsePropertyAst(name, expr, sourceSpan, valueSpan, targetMatchableAttrs, targetProps);
	            return true;
	        }
	        return false;
	    };
	    BindingParser.prototype._parsePropertyAst = function (name, ast, sourceSpan, valueSpan, targetMatchableAttrs, targetProps) {
	        targetMatchableAttrs.push([name, ast.source]);
	        targetProps.push(new ParsedProperty(name, ast, ParsedPropertyType.DEFAULT, sourceSpan, valueSpan));
	    };
	    BindingParser.prototype._parseAnimation = function (name, expression, sourceSpan, absoluteOffset, valueSpan, targetMatchableAttrs, targetProps) {
	        if (name.length === 0) {
	            this._reportError('Animation trigger is missing', sourceSpan);
	        }
	        // This will occur when a @trigger is not paired with an expression.
	        // For animations it is valid to not have an expression since */void
	        // states will be applied by angular when the element is attached/detached
	        var ast = this._parseBinding(expression || 'undefined', false, valueSpan || sourceSpan, absoluteOffset);
	        targetMatchableAttrs.push([name, ast.source]);
	        targetProps.push(new ParsedProperty(name, ast, ParsedPropertyType.ANIMATION, sourceSpan, valueSpan));
	    };
	    BindingParser.prototype._parseBinding = function (value, isHostBinding, sourceSpan, absoluteOffset) {
	        var sourceInfo = (sourceSpan && sourceSpan.start || '(unknown)').toString();
	        try {
	            var ast = isHostBinding ?
	                this._exprParser.parseSimpleBinding(value, sourceInfo, absoluteOffset, this._interpolationConfig) :
	                this._exprParser.parseBinding(value, sourceInfo, absoluteOffset, this._interpolationConfig);
	            if (ast)
	                this._reportExpressionParserErrors(ast.errors, sourceSpan);
	            this._checkPipes(ast, sourceSpan);
	            return ast;
	        }
	        catch (e) {
	            this._reportError("" + e, sourceSpan);
	            return this._exprParser.wrapLiteralPrimitive('ERROR', sourceInfo, absoluteOffset);
	        }
	    };
	    BindingParser.prototype.createBoundElementProperty = function (elementSelector, boundProp, skipValidation, mapPropertyName) {
	        if (skipValidation === void 0) { skipValidation = false; }
	        if (mapPropertyName === void 0) { mapPropertyName = true; }
	        if (boundProp.isAnimation) {
	            return new BoundElementProperty(boundProp.name, 4 /* Animation */, SecurityContext.NONE, boundProp.expression, null, boundProp.sourceSpan, boundProp.valueSpan);
	        }
	        var unit = null;
	        var bindingType = undefined;
	        var boundPropertyName = null;
	        var parts = boundProp.name.split(PROPERTY_PARTS_SEPARATOR);
	        var securityContexts = undefined;
	        // Check for special cases (prefix style, attr, class)
	        if (parts.length > 1) {
	            if (parts[0] == ATTRIBUTE_PREFIX) {
	                boundPropertyName = parts.slice(1).join(PROPERTY_PARTS_SEPARATOR);
	                if (!skipValidation) {
	                    this._validatePropertyOrAttributeName(boundPropertyName, boundProp.sourceSpan, true);
	                }
	                securityContexts = calcPossibleSecurityContexts(this._schemaRegistry, elementSelector, boundPropertyName, true);
	                var nsSeparatorIdx = boundPropertyName.indexOf(':');
	                if (nsSeparatorIdx > -1) {
	                    var ns = boundPropertyName.substring(0, nsSeparatorIdx);
	                    var name_1 = boundPropertyName.substring(nsSeparatorIdx + 1);
	                    boundPropertyName = mergeNsAndName(ns, name_1);
	                }
	                bindingType = 1 /* Attribute */;
	            }
	            else if (parts[0] == CLASS_PREFIX) {
	                boundPropertyName = parts[1];
	                bindingType = 2 /* Class */;
	                securityContexts = [SecurityContext.NONE];
	            }
	            else if (parts[0] == STYLE_PREFIX) {
	                unit = parts.length > 2 ? parts[2] : null;
	                boundPropertyName = parts[1];
	                bindingType = 3 /* Style */;
	                securityContexts = [SecurityContext.STYLE];
	            }
	        }
	        // If not a special case, use the full property name
	        if (boundPropertyName === null) {
	            var mappedPropName = this._schemaRegistry.getMappedPropName(boundProp.name);
	            boundPropertyName = mapPropertyName ? mappedPropName : boundProp.name;
	            securityContexts = calcPossibleSecurityContexts(this._schemaRegistry, elementSelector, mappedPropName, false);
	            bindingType = 0 /* Property */;
	            if (!skipValidation) {
	                this._validatePropertyOrAttributeName(mappedPropName, boundProp.sourceSpan, false);
	            }
	        }
	        return new BoundElementProperty(boundPropertyName, bindingType, securityContexts[0], boundProp.expression, unit, boundProp.sourceSpan, boundProp.valueSpan);
	    };
	    BindingParser.prototype.parseEvent = function (name, expression, sourceSpan, handlerSpan, targetMatchableAttrs, targetEvents) {
	        if (name.length === 0) {
	            this._reportError("Event name is missing in binding", sourceSpan);
	        }
	        if (isAnimationLabel(name)) {
	            name = name.substr(1);
	            this._parseAnimationEvent(name, expression, sourceSpan, handlerSpan, targetEvents);
	        }
	        else {
	            this._parseRegularEvent(name, expression, sourceSpan, handlerSpan, targetMatchableAttrs, targetEvents);
	        }
	    };
	    BindingParser.prototype.calcPossibleSecurityContexts = function (selector, propName, isAttribute) {
	        var prop = this._schemaRegistry.getMappedPropName(propName);
	        return calcPossibleSecurityContexts(this._schemaRegistry, selector, prop, isAttribute);
	    };
	    BindingParser.prototype._parseAnimationEvent = function (name, expression, sourceSpan, handlerSpan, targetEvents) {
	        var matches = splitAtPeriod(name, [name, '']);
	        var eventName = matches[0];
	        var phase = matches[1].toLowerCase();
	        if (phase) {
	            switch (phase) {
	                case 'start':
	                case 'done':
	                    var ast = this._parseAction(expression, handlerSpan);
	                    targetEvents.push(new ParsedEvent(eventName, phase, 1 /* Animation */, ast, sourceSpan, handlerSpan));
	                    break;
	                default:
	                    this._reportError("The provided animation output phase value \"" + phase + "\" for \"@" + eventName + "\" is not supported (use start or done)", sourceSpan);
	                    break;
	            }
	        }
	        else {
	            this._reportError("The animation trigger output event (@" + eventName + ") is missing its phase value name (start or done are currently supported)", sourceSpan);
	        }
	    };
	    BindingParser.prototype._parseRegularEvent = function (name, expression, sourceSpan, handlerSpan, targetMatchableAttrs, targetEvents) {
	        // long format: 'target: eventName'
	        var _a = __read(splitAtColon(name, [null, name]), 2), target = _a[0], eventName = _a[1];
	        var ast = this._parseAction(expression, handlerSpan);
	        targetMatchableAttrs.push([name, ast.source]);
	        targetEvents.push(new ParsedEvent(eventName, target, 0 /* Regular */, ast, sourceSpan, handlerSpan));
	        // Don't detect directives for event names for now,
	        // so don't add the event name to the matchableAttrs
	    };
	    BindingParser.prototype._parseAction = function (value, sourceSpan) {
	        var sourceInfo = (sourceSpan && sourceSpan.start || '(unknown').toString();
	        var absoluteOffset = (sourceSpan && sourceSpan.start) ? sourceSpan.start.offset : 0;
	        try {
	            var ast = this._exprParser.parseAction(value, sourceInfo, absoluteOffset, this._interpolationConfig);
	            if (ast) {
	                this._reportExpressionParserErrors(ast.errors, sourceSpan);
	            }
	            if (!ast || ast.ast instanceof EmptyExpr) {
	                this._reportError("Empty expressions are not allowed", sourceSpan);
	                return this._exprParser.wrapLiteralPrimitive('ERROR', sourceInfo, absoluteOffset);
	            }
	            this._checkPipes(ast, sourceSpan);
	            return ast;
	        }
	        catch (e) {
	            this._reportError("" + e, sourceSpan);
	            return this._exprParser.wrapLiteralPrimitive('ERROR', sourceInfo, absoluteOffset);
	        }
	    };
	    BindingParser.prototype._reportError = function (message, sourceSpan, level) {
	        if (level === void 0) { level = ParseErrorLevel.ERROR; }
	        this.errors.push(new ParseError(sourceSpan, message, level));
	    };
	    BindingParser.prototype._reportExpressionParserErrors = function (errors, sourceSpan) {
	        var e_2, _a;
	        try {
	            for (var errors_1 = __values(errors), errors_1_1 = errors_1.next(); !errors_1_1.done; errors_1_1 = errors_1.next()) {
	                var error = errors_1_1.value;
	                this._reportError(error.message, sourceSpan);
	            }
	        }
	        catch (e_2_1) { e_2 = { error: e_2_1 }; }
	        finally {
	            try {
	                if (errors_1_1 && !errors_1_1.done && (_a = errors_1.return)) _a.call(errors_1);
	            }
	            finally { if (e_2) throw e_2.error; }
	        }
	    };
	    // Make sure all the used pipes are known in `this.pipesByName`
	    BindingParser.prototype._checkPipes = function (ast, sourceSpan) {
	        var _this = this;
	        if (ast && this.pipesByName) {
	            var collector = new PipeCollector();
	            ast.visit(collector);
	            collector.pipes.forEach(function (ast, pipeName) {
	                var pipeMeta = _this.pipesByName.get(pipeName);
	                if (!pipeMeta) {
	                    _this._reportError("The pipe '" + pipeName + "' could not be found", new ParseSourceSpan(sourceSpan.start.moveBy(ast.span.start), sourceSpan.start.moveBy(ast.span.end)));
	                }
	                else {
	                    _this._usedPipes.set(pipeName, pipeMeta);
	                }
	            });
	        }
	    };
	    /**
	     * @param propName the name of the property / attribute
	     * @param sourceSpan
	     * @param isAttr true when binding to an attribute
	     */
	    BindingParser.prototype._validatePropertyOrAttributeName = function (propName, sourceSpan, isAttr) {
	        var report = isAttr ? this._schemaRegistry.validateAttribute(propName) :
	            this._schemaRegistry.validateProperty(propName);
	        if (report.error) {
	            this._reportError(report.msg, sourceSpan, ParseErrorLevel.ERROR);
	        }
	    };
	    return BindingParser;
	}());
	var PipeCollector = /** @class */ (function (_super) {
	    __extends(PipeCollector, _super);
	    function PipeCollector() {
	        var _this = _super !== null && _super.apply(this, arguments) || this;
	        _this.pipes = new Map();
	        return _this;
	    }
	    PipeCollector.prototype.visitPipe = function (ast, context) {
	        this.pipes.set(ast.name, ast);
	        ast.exp.visit(this);
	        this.visitAll(ast.args, context);
	        return null;
	    };
	    return PipeCollector;
	}(RecursiveAstVisitor$1));
	function isAnimationLabel(name) {
	    return name[0] == '@';
	}
	function calcPossibleSecurityContexts(registry, selector, propName, isAttribute) {
	    var ctxs = [];
	    CssSelector.parse(selector).forEach(function (selector) {
	        var elementNames = selector.element ? [selector.element] : registry.allKnownElementNames();
	        var notElementNames = new Set(selector.notSelectors.filter(function (selector) { return selector.isElementSelector(); })
	            .map(function (selector) { return selector.element; }));
	        var possibleElementNames = elementNames.filter(function (elementName) { return !notElementNames.has(elementName); });
	        ctxs.push.apply(ctxs, __spread(possibleElementNames.map(function (elementName) { return registry.securityContext(elementName, propName, isAttribute); })));
	    });
	    return ctxs.length === 0 ? [SecurityContext.NONE] : Array.from(new Set(ctxs)).sort();
	}
	/**
	 * Compute a new ParseSourceSpan based off an original `sourceSpan` by using
	 * absolute offsets from the specified `absoluteSpan`.
	 *
	 * @param sourceSpan original source span
	 * @param absoluteSpan absolute source span to move to
	 */
	function moveParseSourceSpan(sourceSpan, absoluteSpan) {
	    // The difference of two absolute offsets provide the relative offset
	    var startDiff = absoluteSpan.start - sourceSpan.start.offset;
	    var endDiff = absoluteSpan.end - sourceSpan.end.offset;
	    return new ParseSourceSpan(sourceSpan.start.moveBy(startDiff), sourceSpan.end.moveBy(endDiff));
	}

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	var NG_CONTENT_SELECT_ATTR = 'select';
	var LINK_ELEMENT = 'link';
	var LINK_STYLE_REL_ATTR = 'rel';
	var LINK_STYLE_HREF_ATTR = 'href';
	var LINK_STYLE_REL_VALUE = 'stylesheet';
	var STYLE_ELEMENT = 'style';
	var SCRIPT_ELEMENT = 'script';
	var NG_NON_BINDABLE_ATTR = 'ngNonBindable';
	var NG_PROJECT_AS = 'ngProjectAs';
	function preparseElement(ast) {
	    var selectAttr = null;
	    var hrefAttr = null;
	    var relAttr = null;
	    var nonBindable = false;
	    var projectAs = '';
	    ast.attrs.forEach(function (attr) {
	        var lcAttrName = attr.name.toLowerCase();
	        if (lcAttrName == NG_CONTENT_SELECT_ATTR) {
	            selectAttr = attr.value;
	        }
	        else if (lcAttrName == LINK_STYLE_HREF_ATTR) {
	            hrefAttr = attr.value;
	        }
	        else if (lcAttrName == LINK_STYLE_REL_ATTR) {
	            relAttr = attr.value;
	        }
	        else if (attr.name == NG_NON_BINDABLE_ATTR) {
	            nonBindable = true;
	        }
	        else if (attr.name == NG_PROJECT_AS) {
	            if (attr.value.length > 0) {
	                projectAs = attr.value;
	            }
	        }
	    });
	    selectAttr = normalizeNgContentSelect(selectAttr);
	    var nodeName = ast.name.toLowerCase();
	    var type = PreparsedElementType.OTHER;
	    if (isNgContent(nodeName)) {
	        type = PreparsedElementType.NG_CONTENT;
	    }
	    else if (nodeName == STYLE_ELEMENT) {
	        type = PreparsedElementType.STYLE;
	    }
	    else if (nodeName == SCRIPT_ELEMENT) {
	        type = PreparsedElementType.SCRIPT;
	    }
	    else if (nodeName == LINK_ELEMENT && relAttr == LINK_STYLE_REL_VALUE) {
	        type = PreparsedElementType.STYLESHEET;
	    }
	    return new PreparsedElement(type, selectAttr, hrefAttr, nonBindable, projectAs);
	}
	var PreparsedElementType;
	(function (PreparsedElementType) {
	    PreparsedElementType[PreparsedElementType["NG_CONTENT"] = 0] = "NG_CONTENT";
	    PreparsedElementType[PreparsedElementType["STYLE"] = 1] = "STYLE";
	    PreparsedElementType[PreparsedElementType["STYLESHEET"] = 2] = "STYLESHEET";
	    PreparsedElementType[PreparsedElementType["SCRIPT"] = 3] = "SCRIPT";
	    PreparsedElementType[PreparsedElementType["OTHER"] = 4] = "OTHER";
	})(PreparsedElementType || (PreparsedElementType = {}));
	var PreparsedElement = /** @class */ (function () {
	    function PreparsedElement(type, selectAttr, hrefAttr, nonBindable, projectAs) {
	        this.type = type;
	        this.selectAttr = selectAttr;
	        this.hrefAttr = hrefAttr;
	        this.nonBindable = nonBindable;
	        this.projectAs = projectAs;
	    }
	    return PreparsedElement;
	}());
	function normalizeNgContentSelect(selectAttr) {
	    if (selectAttr === null || selectAttr.length === 0) {
	        return '*';
	    }
	    return selectAttr;
	}

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	var BIND_NAME_REGEXP = /^(?:(?:(?:(bind-)|(let-)|(ref-|#)|(on-)|(bindon-)|(@))(.*))|\[\(([^\)]+)\)\]|\[([^\]]+)\]|\(([^\)]+)\))$/;
	// Group 1 = "bind-"
	var KW_BIND_IDX = 1;
	// Group 2 = "let-"
	var KW_LET_IDX = 2;
	// Group 3 = "ref-/#"
	var KW_REF_IDX = 3;
	// Group 4 = "on-"
	var KW_ON_IDX = 4;
	// Group 5 = "bindon-"
	var KW_BINDON_IDX = 5;
	// Group 6 = "@"
	var KW_AT_IDX = 6;
	// Group 7 = the identifier after "bind-", "let-", "ref-/#", "on-", "bindon-" or "@"
	var IDENT_KW_IDX = 7;
	// Group 8 = identifier inside [()]
	var IDENT_BANANA_BOX_IDX = 8;
	// Group 9 = identifier inside []
	var IDENT_PROPERTY_IDX = 9;
	// Group 10 = identifier inside ()
	var IDENT_EVENT_IDX = 10;
	var TEMPLATE_ATTR_PREFIX$1 = '*';
	var CLASS_ATTR = 'class';
	var _TEXT_CSS_SELECTOR;
	function TEXT_CSS_SELECTOR() {
	    if (!_TEXT_CSS_SELECTOR) {
	        _TEXT_CSS_SELECTOR = CssSelector.parse('*')[0];
	    }
	    return _TEXT_CSS_SELECTOR;
	}
	var TemplateParseError = /** @class */ (function (_super) {
	    __extends(TemplateParseError, _super);
	    function TemplateParseError(message, span, level) {
	        return _super.call(this, span, message, level) || this;
	    }
	    return TemplateParseError;
	}(ParseError));
	var TemplateParseResult = /** @class */ (function () {
	    function TemplateParseResult(templateAst, usedPipes, errors) {
	        this.templateAst = templateAst;
	        this.usedPipes = usedPipes;
	        this.errors = errors;
	    }
	    return TemplateParseResult;
	}());
	var TemplateParser = /** @class */ (function () {
	    function TemplateParser(_config, _reflector, _exprParser, _schemaRegistry, _htmlParser, _console, transforms) {
	        this._config = _config;
	        this._reflector = _reflector;
	        this._exprParser = _exprParser;
	        this._schemaRegistry = _schemaRegistry;
	        this._htmlParser = _htmlParser;
	        this._console = _console;
	        this.transforms = transforms;
	    }
	    Object.defineProperty(TemplateParser.prototype, "expressionParser", {
	        get: function () {
	            return this._exprParser;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    TemplateParser.prototype.parse = function (component, template, directives, pipes, schemas, templateUrl, preserveWhitespaces) {
	        var result = this.tryParse(component, template, directives, pipes, schemas, templateUrl, preserveWhitespaces);
	        var warnings = result.errors.filter(function (error) { return error.level === ParseErrorLevel.WARNING; });
	        var errors = result.errors.filter(function (error) { return error.level === ParseErrorLevel.ERROR; });
	        if (warnings.length > 0) {
	            this._console.warn("Template parse warnings:\n" + warnings.join('\n'));
	        }
	        if (errors.length > 0) {
	            var errorString = errors.join('\n');
	            throw syntaxError("Template parse errors:\n" + errorString, errors);
	        }
	        return { template: result.templateAst, pipes: result.usedPipes };
	    };
	    TemplateParser.prototype.tryParse = function (component, template, directives, pipes, schemas, templateUrl, preserveWhitespaces) {
	        var htmlParseResult = typeof template === 'string' ?
	            this._htmlParser.parse(template, templateUrl, {
	                tokenizeExpansionForms: true,
	                interpolationConfig: this.getInterpolationConfig(component)
	            }) :
	            template;
	        if (!preserveWhitespaces) {
	            htmlParseResult = removeWhitespaces(htmlParseResult);
	        }
	        return this.tryParseHtml(this.expandHtml(htmlParseResult), component, directives, pipes, schemas);
	    };
	    TemplateParser.prototype.tryParseHtml = function (htmlAstWithErrors, component, directives, pipes, schemas) {
	        var result;
	        var errors = htmlAstWithErrors.errors;
	        var usedPipes = [];
	        if (htmlAstWithErrors.rootNodes.length > 0) {
	            var uniqDirectives = removeSummaryDuplicates(directives);
	            var uniqPipes = removeSummaryDuplicates(pipes);
	            var providerViewContext = new ProviderViewContext(this._reflector, component);
	            var interpolationConfig = undefined;
	            if (component.template && component.template.interpolation) {
	                interpolationConfig = {
	                    start: component.template.interpolation[0],
	                    end: component.template.interpolation[1]
	                };
	            }
	            var bindingParser = new BindingParser(this._exprParser, interpolationConfig, this._schemaRegistry, uniqPipes, errors);
	            var parseVisitor = new TemplateParseVisitor(this._reflector, this._config, providerViewContext, uniqDirectives, bindingParser, this._schemaRegistry, schemas, errors);
	            result = visitAll$1(parseVisitor, htmlAstWithErrors.rootNodes, EMPTY_ELEMENT_CONTEXT);
	            errors.push.apply(errors, __spread(providerViewContext.errors));
	            usedPipes.push.apply(usedPipes, __spread(bindingParser.getUsedPipes()));
	        }
	        else {
	            result = [];
	        }
	        this._assertNoReferenceDuplicationOnTemplate(result, errors);
	        if (errors.length > 0) {
	            return new TemplateParseResult(result, usedPipes, errors);
	        }
	        if (this.transforms) {
	            this.transforms.forEach(function (transform) {
	                result = templateVisitAll(transform, result);
	            });
	        }
	        return new TemplateParseResult(result, usedPipes, errors);
	    };
	    TemplateParser.prototype.expandHtml = function (htmlAstWithErrors, forced) {
	        if (forced === void 0) { forced = false; }
	        var errors = htmlAstWithErrors.errors;
	        if (errors.length == 0 || forced) {
	            // Transform ICU messages to angular directives
	            var expandedHtmlAst = expandNodes(htmlAstWithErrors.rootNodes);
	            errors.push.apply(errors, __spread(expandedHtmlAst.errors));
	            htmlAstWithErrors = new ParseTreeResult(expandedHtmlAst.nodes, errors);
	        }
	        return htmlAstWithErrors;
	    };
	    TemplateParser.prototype.getInterpolationConfig = function (component) {
	        if (component.template) {
	            return InterpolationConfig.fromArray(component.template.interpolation);
	        }
	        return undefined;
	    };
	    /** @internal */
	    TemplateParser.prototype._assertNoReferenceDuplicationOnTemplate = function (result, errors) {
	        var existingReferences = [];
	        result.filter(function (element) { return !!element.references; })
	            .forEach(function (element) { return element.references.forEach(function (reference) {
	            var name = reference.name;
	            if (existingReferences.indexOf(name) < 0) {
	                existingReferences.push(name);
	            }
	            else {
	                var error = new TemplateParseError("Reference \"#" + name + "\" is defined several times", reference.sourceSpan, ParseErrorLevel.ERROR);
	                errors.push(error);
	            }
	        }); });
	    };
	    return TemplateParser;
	}());
	var TemplateParseVisitor = /** @class */ (function () {
	    function TemplateParseVisitor(reflector, config, providerViewContext, directives, _bindingParser, _schemaRegistry, _schemas, _targetErrors) {
	        var _this = this;
	        this.reflector = reflector;
	        this.config = config;
	        this.providerViewContext = providerViewContext;
	        this._bindingParser = _bindingParser;
	        this._schemaRegistry = _schemaRegistry;
	        this._schemas = _schemas;
	        this._targetErrors = _targetErrors;
	        this.selectorMatcher = new SelectorMatcher();
	        this.directivesIndex = new Map();
	        this.ngContentCount = 0;
	        // Note: queries start with id 1 so we can use the number in a Bloom filter!
	        this.contentQueryStartId = providerViewContext.component.viewQueries.length + 1;
	        directives.forEach(function (directive, index) {
	            var selector = CssSelector.parse(directive.selector);
	            _this.selectorMatcher.addSelectables(selector, directive);
	            _this.directivesIndex.set(directive, index);
	        });
	    }
	    TemplateParseVisitor.prototype.visitExpansion = function (expansion, context) {
	        return null;
	    };
	    TemplateParseVisitor.prototype.visitExpansionCase = function (expansionCase, context) {
	        return null;
	    };
	    TemplateParseVisitor.prototype.visitText = function (text, parent) {
	        var ngContentIndex = parent.findNgContentIndex(TEXT_CSS_SELECTOR());
	        var valueNoNgsp = replaceNgsp(text.value);
	        var expr = this._bindingParser.parseInterpolation(valueNoNgsp, text.sourceSpan);
	        return expr ? new BoundTextAst(expr, ngContentIndex, text.sourceSpan) :
	            new TextAst(valueNoNgsp, ngContentIndex, text.sourceSpan);
	    };
	    TemplateParseVisitor.prototype.visitAttribute = function (attribute, context) {
	        return new AttrAst(attribute.name, attribute.value, attribute.sourceSpan);
	    };
	    TemplateParseVisitor.prototype.visitComment = function (comment, context) {
	        return null;
	    };
	    TemplateParseVisitor.prototype.visitElement = function (element, parent) {
	        var _this = this;
	        var queryStartIndex = this.contentQueryStartId;
	        var elName = element.name;
	        var preparsedElement = preparseElement(element);
	        if (preparsedElement.type === PreparsedElementType.SCRIPT ||
	            preparsedElement.type === PreparsedElementType.STYLE) {
	            // Skipping <script> for security reasons
	            // Skipping <style> as we already processed them
	            // in the StyleCompiler
	            return null;
	        }
	        if (preparsedElement.type === PreparsedElementType.STYLESHEET &&
	            isStyleUrlResolvable(preparsedElement.hrefAttr)) {
	            // Skipping stylesheets with either relative urls or package scheme as we already processed
	            // them in the StyleCompiler
	            return null;
	        }
	        var matchableAttrs = [];
	        var elementOrDirectiveProps = [];
	        var elementOrDirectiveRefs = [];
	        var elementVars = [];
	        var events = [];
	        var templateElementOrDirectiveProps = [];
	        var templateMatchableAttrs = [];
	        var templateElementVars = [];
	        var hasInlineTemplates = false;
	        var attrs = [];
	        var isTemplateElement = isNgTemplate(element.name);
	        element.attrs.forEach(function (attr) {
	            var parsedVariables = [];
	            var hasBinding = _this._parseAttr(isTemplateElement, attr, matchableAttrs, elementOrDirectiveProps, events, elementOrDirectiveRefs, elementVars);
	            elementVars.push.apply(elementVars, __spread(parsedVariables.map(function (v) { return VariableAst.fromParsedVariable(v); })));
	            var templateValue;
	            var templateKey;
	            var normalizedName = _this._normalizeAttributeName(attr.name);
	            if (normalizedName.startsWith(TEMPLATE_ATTR_PREFIX$1)) {
	                templateValue = attr.value;
	                templateKey = normalizedName.substring(TEMPLATE_ATTR_PREFIX$1.length);
	            }
	            var hasTemplateBinding = templateValue != null;
	            if (hasTemplateBinding) {
	                if (hasInlineTemplates) {
	                    _this._reportError("Can't have multiple template bindings on one element. Use only one attribute prefixed with *", attr.sourceSpan);
	                }
	                hasInlineTemplates = true;
	                var parsedVariables_1 = [];
	                var absoluteOffset = (attr.valueSpan || attr.sourceSpan).start.offset;
	                _this._bindingParser.parseInlineTemplateBinding(templateKey, templateValue, attr.sourceSpan, absoluteOffset, templateMatchableAttrs, templateElementOrDirectiveProps, parsedVariables_1);
	                templateElementVars.push.apply(templateElementVars, __spread(parsedVariables_1.map(function (v) { return VariableAst.fromParsedVariable(v); })));
	            }
	            if (!hasBinding && !hasTemplateBinding) {
	                // don't include the bindings as attributes as well in the AST
	                attrs.push(_this.visitAttribute(attr, null));
	                matchableAttrs.push([attr.name, attr.value]);
	            }
	        });
	        var elementCssSelector = createElementCssSelector(elName, matchableAttrs);
	        var _a = this._parseDirectives(this.selectorMatcher, elementCssSelector), directiveMetas = _a.directives, matchElement = _a.matchElement;
	        var references = [];
	        var boundDirectivePropNames = new Set();
	        var directiveAsts = this._createDirectiveAsts(isTemplateElement, element.name, directiveMetas, elementOrDirectiveProps, elementOrDirectiveRefs, element.sourceSpan, references, boundDirectivePropNames);
	        var elementProps = this._createElementPropertyAsts(element.name, elementOrDirectiveProps, boundDirectivePropNames);
	        var isViewRoot = parent.isTemplateElement || hasInlineTemplates;
	        var providerContext = new ProviderElementContext(this.providerViewContext, parent.providerContext, isViewRoot, directiveAsts, attrs, references, isTemplateElement, queryStartIndex, element.sourceSpan);
	        var children = visitAll$1(preparsedElement.nonBindable ? NON_BINDABLE_VISITOR : this, element.children, ElementContext.create(isTemplateElement, directiveAsts, isTemplateElement ? parent.providerContext : providerContext));
	        providerContext.afterElement();
	        // Override the actual selector when the `ngProjectAs` attribute is provided
	        var projectionSelector = preparsedElement.projectAs != '' ?
	            CssSelector.parse(preparsedElement.projectAs)[0] :
	            elementCssSelector;
	        var ngContentIndex = parent.findNgContentIndex(projectionSelector);
	        var parsedElement;
	        if (preparsedElement.type === PreparsedElementType.NG_CONTENT) {
	            // `<ng-content>` element
	            if (element.children && !element.children.every(_isEmptyTextNode)) {
	                this._reportError("<ng-content> element cannot have content.", element.sourceSpan);
	            }
	            parsedElement = new NgContentAst(this.ngContentCount++, hasInlineTemplates ? null : ngContentIndex, element.sourceSpan);
	        }
	        else if (isTemplateElement) {
	            // `<ng-template>` element
	            this._assertAllEventsPublishedByDirectives(directiveAsts, events);
	            this._assertNoComponentsNorElementBindingsOnTemplate(directiveAsts, elementProps, element.sourceSpan);
	            parsedElement = new EmbeddedTemplateAst(attrs, events, references, elementVars, providerContext.transformedDirectiveAsts, providerContext.transformProviders, providerContext.transformedHasViewContainer, providerContext.queryMatches, children, hasInlineTemplates ? null : ngContentIndex, element.sourceSpan);
	        }
	        else {
	            // element other than `<ng-content>` and `<ng-template>`
	            this._assertElementExists(matchElement, element);
	            this._assertOnlyOneComponent(directiveAsts, element.sourceSpan);
	            var ngContentIndex_1 = hasInlineTemplates ? null : parent.findNgContentIndex(projectionSelector);
	            parsedElement = new ElementAst(elName, attrs, elementProps, events, references, providerContext.transformedDirectiveAsts, providerContext.transformProviders, providerContext.transformedHasViewContainer, providerContext.queryMatches, children, hasInlineTemplates ? null : ngContentIndex_1, element.sourceSpan, element.endSourceSpan || null);
	        }
	        if (hasInlineTemplates) {
	            // The element as a *-attribute
	            var templateQueryStartIndex = this.contentQueryStartId;
	            var templateSelector = createElementCssSelector('ng-template', templateMatchableAttrs);
	            var directives = this._parseDirectives(this.selectorMatcher, templateSelector).directives;
	            var templateBoundDirectivePropNames = new Set();
	            var templateDirectiveAsts = this._createDirectiveAsts(true, elName, directives, templateElementOrDirectiveProps, [], element.sourceSpan, [], templateBoundDirectivePropNames);
	            var templateElementProps = this._createElementPropertyAsts(elName, templateElementOrDirectiveProps, templateBoundDirectivePropNames);
	            this._assertNoComponentsNorElementBindingsOnTemplate(templateDirectiveAsts, templateElementProps, element.sourceSpan);
	            var templateProviderContext = new ProviderElementContext(this.providerViewContext, parent.providerContext, parent.isTemplateElement, templateDirectiveAsts, [], [], true, templateQueryStartIndex, element.sourceSpan);
	            templateProviderContext.afterElement();
	            parsedElement = new EmbeddedTemplateAst([], [], [], templateElementVars, templateProviderContext.transformedDirectiveAsts, templateProviderContext.transformProviders, templateProviderContext.transformedHasViewContainer, templateProviderContext.queryMatches, [parsedElement], ngContentIndex, element.sourceSpan);
	        }
	        return parsedElement;
	    };
	    TemplateParseVisitor.prototype._parseAttr = function (isTemplateElement, attr, targetMatchableAttrs, targetProps, targetEvents, targetRefs, targetVars) {
	        var name = this._normalizeAttributeName(attr.name);
	        var value = attr.value;
	        var srcSpan = attr.sourceSpan;
	        var absoluteOffset = attr.valueSpan ? attr.valueSpan.start.offset : srcSpan.start.offset;
	        var boundEvents = [];
	        var bindParts = name.match(BIND_NAME_REGEXP);
	        var hasBinding = false;
	        if (bindParts !== null) {
	            hasBinding = true;
	            if (bindParts[KW_BIND_IDX] != null) {
	                this._bindingParser.parsePropertyBinding(bindParts[IDENT_KW_IDX], value, false, srcSpan, absoluteOffset, attr.valueSpan, targetMatchableAttrs, targetProps);
	            }
	            else if (bindParts[KW_LET_IDX]) {
	                if (isTemplateElement) {
	                    var identifier = bindParts[IDENT_KW_IDX];
	                    this._parseVariable(identifier, value, srcSpan, targetVars);
	                }
	                else {
	                    this._reportError("\"let-\" is only supported on ng-template elements.", srcSpan);
	                }
	            }
	            else if (bindParts[KW_REF_IDX]) {
	                var identifier = bindParts[IDENT_KW_IDX];
	                this._parseReference(identifier, value, srcSpan, targetRefs);
	            }
	            else if (bindParts[KW_ON_IDX]) {
	                this._bindingParser.parseEvent(bindParts[IDENT_KW_IDX], value, srcSpan, attr.valueSpan || srcSpan, targetMatchableAttrs, boundEvents);
	            }
	            else if (bindParts[KW_BINDON_IDX]) {
	                this._bindingParser.parsePropertyBinding(bindParts[IDENT_KW_IDX], value, false, srcSpan, absoluteOffset, attr.valueSpan, targetMatchableAttrs, targetProps);
	                this._parseAssignmentEvent(bindParts[IDENT_KW_IDX], value, srcSpan, attr.valueSpan || srcSpan, targetMatchableAttrs, boundEvents);
	            }
	            else if (bindParts[KW_AT_IDX]) {
	                this._bindingParser.parseLiteralAttr(name, value, srcSpan, absoluteOffset, attr.valueSpan, targetMatchableAttrs, targetProps);
	            }
	            else if (bindParts[IDENT_BANANA_BOX_IDX]) {
	                this._bindingParser.parsePropertyBinding(bindParts[IDENT_BANANA_BOX_IDX], value, false, srcSpan, absoluteOffset, attr.valueSpan, targetMatchableAttrs, targetProps);
	                this._parseAssignmentEvent(bindParts[IDENT_BANANA_BOX_IDX], value, srcSpan, attr.valueSpan || srcSpan, targetMatchableAttrs, boundEvents);
	            }
	            else if (bindParts[IDENT_PROPERTY_IDX]) {
	                this._bindingParser.parsePropertyBinding(bindParts[IDENT_PROPERTY_IDX], value, false, srcSpan, absoluteOffset, attr.valueSpan, targetMatchableAttrs, targetProps);
	            }
	            else if (bindParts[IDENT_EVENT_IDX]) {
	                this._bindingParser.parseEvent(bindParts[IDENT_EVENT_IDX], value, srcSpan, attr.valueSpan || srcSpan, targetMatchableAttrs, boundEvents);
	            }
	        }
	        else {
	            hasBinding = this._bindingParser.parsePropertyInterpolation(name, value, srcSpan, attr.valueSpan, targetMatchableAttrs, targetProps);
	        }
	        if (!hasBinding) {
	            this._bindingParser.parseLiteralAttr(name, value, srcSpan, absoluteOffset, attr.valueSpan, targetMatchableAttrs, targetProps);
	        }
	        targetEvents.push.apply(targetEvents, __spread(boundEvents.map(function (e) { return BoundEventAst.fromParsedEvent(e); })));
	        return hasBinding;
	    };
	    TemplateParseVisitor.prototype._normalizeAttributeName = function (attrName) {
	        return /^data-/i.test(attrName) ? attrName.substring(5) : attrName;
	    };
	    TemplateParseVisitor.prototype._parseVariable = function (identifier, value, sourceSpan, targetVars) {
	        if (identifier.indexOf('-') > -1) {
	            this._reportError("\"-\" is not allowed in variable names", sourceSpan);
	        }
	        else if (identifier.length === 0) {
	            this._reportError("Variable does not have a name", sourceSpan);
	        }
	        targetVars.push(new VariableAst(identifier, value, sourceSpan));
	    };
	    TemplateParseVisitor.prototype._parseReference = function (identifier, value, sourceSpan, targetRefs) {
	        if (identifier.indexOf('-') > -1) {
	            this._reportError("\"-\" is not allowed in reference names", sourceSpan);
	        }
	        else if (identifier.length === 0) {
	            this._reportError("Reference does not have a name", sourceSpan);
	        }
	        targetRefs.push(new ElementOrDirectiveRef(identifier, value, sourceSpan));
	    };
	    TemplateParseVisitor.prototype._parseAssignmentEvent = function (name, expression, sourceSpan, valueSpan, targetMatchableAttrs, targetEvents) {
	        this._bindingParser.parseEvent(name + "Change", expression + "=$event", sourceSpan, valueSpan, targetMatchableAttrs, targetEvents);
	    };
	    TemplateParseVisitor.prototype._parseDirectives = function (selectorMatcher, elementCssSelector) {
	        var _this = this;
	        // Need to sort the directives so that we get consistent results throughout,
	        // as selectorMatcher uses Maps inside.
	        // Also deduplicate directives as they might match more than one time!
	        var directives = newArray(this.directivesIndex.size);
	        // Whether any directive selector matches on the element name
	        var matchElement = false;
	        selectorMatcher.match(elementCssSelector, function (selector, directive) {
	            directives[_this.directivesIndex.get(directive)] = directive;
	            matchElement = matchElement || selector.hasElementSelector();
	        });
	        return {
	            directives: directives.filter(function (dir) { return !!dir; }),
	            matchElement: matchElement,
	        };
	    };
	    TemplateParseVisitor.prototype._createDirectiveAsts = function (isTemplateElement, elementName, directives, props, elementOrDirectiveRefs, elementSourceSpan, targetReferences, targetBoundDirectivePropNames) {
	        var _this = this;
	        var matchedReferences = new Set();
	        var component = null;
	        var directiveAsts = directives.map(function (directive) {
	            var sourceSpan = new ParseSourceSpan(elementSourceSpan.start, elementSourceSpan.end, "Directive " + identifierName(directive.type));
	            if (directive.isComponent) {
	                component = directive;
	            }
	            var directiveProperties = [];
	            var boundProperties = _this._bindingParser.createDirectiveHostPropertyAsts(directive, elementName, sourceSpan);
	            var hostProperties = boundProperties.map(function (prop) { return BoundElementPropertyAst.fromBoundProperty(prop); });
	            // Note: We need to check the host properties here as well,
	            // as we don't know the element name in the DirectiveWrapperCompiler yet.
	            hostProperties = _this._checkPropertiesInSchema(elementName, hostProperties);
	            var parsedEvents = _this._bindingParser.createDirectiveHostEventAsts(directive, sourceSpan);
	            _this._createDirectivePropertyAsts(directive.inputs, props, directiveProperties, targetBoundDirectivePropNames);
	            elementOrDirectiveRefs.forEach(function (elOrDirRef) {
	                if ((elOrDirRef.value.length === 0 && directive.isComponent) ||
	                    (elOrDirRef.isReferenceToDirective(directive))) {
	                    targetReferences.push(new ReferenceAst(elOrDirRef.name, createTokenForReference(directive.type.reference), elOrDirRef.value, elOrDirRef.sourceSpan));
	                    matchedReferences.add(elOrDirRef.name);
	                }
	            });
	            var hostEvents = parsedEvents.map(function (e) { return BoundEventAst.fromParsedEvent(e); });
	            var contentQueryStartId = _this.contentQueryStartId;
	            _this.contentQueryStartId += directive.queries.length;
	            return new DirectiveAst(directive, directiveProperties, hostProperties, hostEvents, contentQueryStartId, sourceSpan);
	        });
	        elementOrDirectiveRefs.forEach(function (elOrDirRef) {
	            if (elOrDirRef.value.length > 0) {
	                if (!matchedReferences.has(elOrDirRef.name)) {
	                    _this._reportError("There is no directive with \"exportAs\" set to \"" + elOrDirRef.value + "\"", elOrDirRef.sourceSpan);
	                }
	            }
	            else if (!component) {
	                var refToken = null;
	                if (isTemplateElement) {
	                    refToken = createTokenForExternalReference(_this.reflector, Identifiers.TemplateRef);
	                }
	                targetReferences.push(new ReferenceAst(elOrDirRef.name, refToken, elOrDirRef.value, elOrDirRef.sourceSpan));
	            }
	        });
	        return directiveAsts;
	    };
	    TemplateParseVisitor.prototype._createDirectivePropertyAsts = function (directiveProperties, boundProps, targetBoundDirectiveProps, targetBoundDirectivePropNames) {
	        if (directiveProperties) {
	            var boundPropsByName_1 = new Map();
	            boundProps.forEach(function (boundProp) {
	                var prevValue = boundPropsByName_1.get(boundProp.name);
	                if (!prevValue || prevValue.isLiteral) {
	                    // give [a]="b" a higher precedence than a="b" on the same element
	                    boundPropsByName_1.set(boundProp.name, boundProp);
	                }
	            });
	            Object.keys(directiveProperties).forEach(function (dirProp) {
	                var elProp = directiveProperties[dirProp];
	                var boundProp = boundPropsByName_1.get(elProp);
	                // Bindings are optional, so this binding only needs to be set up if an expression is given.
	                if (boundProp) {
	                    targetBoundDirectivePropNames.add(boundProp.name);
	                    if (!isEmptyExpression(boundProp.expression)) {
	                        targetBoundDirectiveProps.push(new BoundDirectivePropertyAst(dirProp, boundProp.name, boundProp.expression, boundProp.sourceSpan));
	                    }
	                }
	            });
	        }
	    };
	    TemplateParseVisitor.prototype._createElementPropertyAsts = function (elementName, props, boundDirectivePropNames) {
	        var _this = this;
	        var boundElementProps = [];
	        props.forEach(function (prop) {
	            if (!prop.isLiteral && !boundDirectivePropNames.has(prop.name)) {
	                var boundProp = _this._bindingParser.createBoundElementProperty(elementName, prop);
	                boundElementProps.push(BoundElementPropertyAst.fromBoundProperty(boundProp));
	            }
	        });
	        return this._checkPropertiesInSchema(elementName, boundElementProps);
	    };
	    TemplateParseVisitor.prototype._findComponentDirectives = function (directives) {
	        return directives.filter(function (directive) { return directive.directive.isComponent; });
	    };
	    TemplateParseVisitor.prototype._findComponentDirectiveNames = function (directives) {
	        return this._findComponentDirectives(directives)
	            .map(function (directive) { return identifierName(directive.directive.type); });
	    };
	    TemplateParseVisitor.prototype._assertOnlyOneComponent = function (directives, sourceSpan) {
	        var componentTypeNames = this._findComponentDirectiveNames(directives);
	        if (componentTypeNames.length > 1) {
	            this._reportError("More than one component matched on this element.\n" +
	                "Make sure that only one component's selector can match a given element.\n" +
	                ("Conflicting components: " + componentTypeNames.join(',')), sourceSpan);
	        }
	    };
	    /**
	     * Make sure that non-angular tags conform to the schemas.
	     *
	     * Note: An element is considered an angular tag when at least one directive selector matches the
	     * tag name.
	     *
	     * @param matchElement Whether any directive has matched on the tag name
	     * @param element the html element
	     */
	    TemplateParseVisitor.prototype._assertElementExists = function (matchElement, element) {
	        var elName = element.name.replace(/^:xhtml:/, '');
	        if (!matchElement && !this._schemaRegistry.hasElement(elName, this._schemas)) {
	            var errorMsg = "'" + elName + "' is not a known element:\n";
	            errorMsg += "1. If '" + elName + "' is an Angular component, then verify that it is part of this module.\n";
	            if (elName.indexOf('-') > -1) {
	                errorMsg += "2. If '" + elName + "' is a Web Component then add 'CUSTOM_ELEMENTS_SCHEMA' to the '@NgModule.schemas' of this component to suppress this message.";
	            }
	            else {
	                errorMsg +=
	                    "2. To allow any element add 'NO_ERRORS_SCHEMA' to the '@NgModule.schemas' of this component.";
	            }
	            this._reportError(errorMsg, element.sourceSpan);
	        }
	    };
	    TemplateParseVisitor.prototype._assertNoComponentsNorElementBindingsOnTemplate = function (directives, elementProps, sourceSpan) {
	        var _this = this;
	        var componentTypeNames = this._findComponentDirectiveNames(directives);
	        if (componentTypeNames.length > 0) {
	            this._reportError("Components on an embedded template: " + componentTypeNames.join(','), sourceSpan);
	        }
	        elementProps.forEach(function (prop) {
	            _this._reportError("Property binding " + prop.name + " not used by any directive on an embedded template. Make sure that the property name is spelled correctly and all directives are listed in the \"@NgModule.declarations\".", sourceSpan);
	        });
	    };
	    TemplateParseVisitor.prototype._assertAllEventsPublishedByDirectives = function (directives, events) {
	        var _this = this;
	        var allDirectiveEvents = new Set();
	        directives.forEach(function (directive) {
	            Object.keys(directive.directive.outputs).forEach(function (k) {
	                var eventName = directive.directive.outputs[k];
	                allDirectiveEvents.add(eventName);
	            });
	        });
	        events.forEach(function (event) {
	            if (event.target != null || !allDirectiveEvents.has(event.name)) {
	                _this._reportError("Event binding " + event
	                    .fullName + " not emitted by any directive on an embedded template. Make sure that the event name is spelled correctly and all directives are listed in the \"@NgModule.declarations\".", event.sourceSpan);
	            }
	        });
	    };
	    TemplateParseVisitor.prototype._checkPropertiesInSchema = function (elementName, boundProps) {
	        var _this = this;
	        // Note: We can't filter out empty expressions before this method,
	        // as we still want to validate them!
	        return boundProps.filter(function (boundProp) {
	            if (boundProp.type === 0 /* Property */ &&
	                !_this._schemaRegistry.hasProperty(elementName, boundProp.name, _this._schemas)) {
	                var errorMsg = "Can't bind to '" + boundProp.name + "' since it isn't a known property of '" + elementName + "'.";
	                if (elementName.startsWith('ng-')) {
	                    errorMsg +=
	                        "\n1. If '" + boundProp
	                            .name + "' is an Angular directive, then add 'CommonModule' to the '@NgModule.imports' of this component." +
	                            "\n2. To allow any property add 'NO_ERRORS_SCHEMA' to the '@NgModule.schemas' of this component.";
	                }
	                else if (elementName.indexOf('-') > -1) {
	                    errorMsg +=
	                        "\n1. If '" + elementName + "' is an Angular component and it has '" + boundProp.name + "' input, then verify that it is part of this module." +
	                            ("\n2. If '" + elementName + "' is a Web Component then add 'CUSTOM_ELEMENTS_SCHEMA' to the '@NgModule.schemas' of this component to suppress this message.") +
	                            "\n3. To allow any property add 'NO_ERRORS_SCHEMA' to the '@NgModule.schemas' of this component.";
	                }
	                _this._reportError(errorMsg, boundProp.sourceSpan);
	            }
	            return !isEmptyExpression(boundProp.value);
	        });
	    };
	    TemplateParseVisitor.prototype._reportError = function (message, sourceSpan, level) {
	        if (level === void 0) { level = ParseErrorLevel.ERROR; }
	        this._targetErrors.push(new ParseError(sourceSpan, message, level));
	    };
	    return TemplateParseVisitor;
	}());
	var NonBindableVisitor = /** @class */ (function () {
	    function NonBindableVisitor() {
	    }
	    NonBindableVisitor.prototype.visitElement = function (ast, parent) {
	        var preparsedElement = preparseElement(ast);
	        if (preparsedElement.type === PreparsedElementType.SCRIPT ||
	            preparsedElement.type === PreparsedElementType.STYLE ||
	            preparsedElement.type === PreparsedElementType.STYLESHEET) {
	            // Skipping <script> for security reasons
	            // Skipping <style> and stylesheets as we already processed them
	            // in the StyleCompiler
	            return null;
	        }
	        var attrNameAndValues = ast.attrs.map(function (attr) { return [attr.name, attr.value]; });
	        var selector = createElementCssSelector(ast.name, attrNameAndValues);
	        var ngContentIndex = parent.findNgContentIndex(selector);
	        var children = visitAll$1(this, ast.children, EMPTY_ELEMENT_CONTEXT);
	        return new ElementAst(ast.name, visitAll$1(this, ast.attrs), [], [], [], [], [], false, [], children, ngContentIndex, ast.sourceSpan, ast.endSourceSpan);
	    };
	    NonBindableVisitor.prototype.visitComment = function (comment, context) {
	        return null;
	    };
	    NonBindableVisitor.prototype.visitAttribute = function (attribute, context) {
	        return new AttrAst(attribute.name, attribute.value, attribute.sourceSpan);
	    };
	    NonBindableVisitor.prototype.visitText = function (text, parent) {
	        var ngContentIndex = parent.findNgContentIndex(TEXT_CSS_SELECTOR());
	        return new TextAst(text.value, ngContentIndex, text.sourceSpan);
	    };
	    NonBindableVisitor.prototype.visitExpansion = function (expansion, context) {
	        return expansion;
	    };
	    NonBindableVisitor.prototype.visitExpansionCase = function (expansionCase, context) {
	        return expansionCase;
	    };
	    return NonBindableVisitor;
	}());
	/**
	 * A reference to an element or directive in a template. E.g., the reference in this template:
	 *
	 * <div #myMenu="coolMenu">
	 *
	 * would be {name: 'myMenu', value: 'coolMenu', sourceSpan: ...}
	 */
	var ElementOrDirectiveRef = /** @class */ (function () {
	    function ElementOrDirectiveRef(name, value, sourceSpan) {
	        this.name = name;
	        this.value = value;
	        this.sourceSpan = sourceSpan;
	    }
	    /** Gets whether this is a reference to the given directive. */
	    ElementOrDirectiveRef.prototype.isReferenceToDirective = function (directive) {
	        return splitExportAs(directive.exportAs).indexOf(this.value) !== -1;
	    };
	    return ElementOrDirectiveRef;
	}());
	/** Splits a raw, potentially comma-delimited `exportAs` value into an array of names. */
	function splitExportAs(exportAs) {
	    return exportAs ? exportAs.split(',').map(function (e) { return e.trim(); }) : [];
	}
	function splitClasses(classAttrValue) {
	    return classAttrValue.trim().split(/\s+/g);
	}
	var ElementContext = /** @class */ (function () {
	    function ElementContext(isTemplateElement, _ngContentIndexMatcher, _wildcardNgContentIndex, providerContext) {
	        this.isTemplateElement = isTemplateElement;
	        this._ngContentIndexMatcher = _ngContentIndexMatcher;
	        this._wildcardNgContentIndex = _wildcardNgContentIndex;
	        this.providerContext = providerContext;
	    }
	    ElementContext.create = function (isTemplateElement, directives, providerContext) {
	        var matcher = new SelectorMatcher();
	        var wildcardNgContentIndex = null;
	        var component = directives.find(function (directive) { return directive.directive.isComponent; });
	        if (component) {
	            var ngContentSelectors = component.directive.template.ngContentSelectors;
	            for (var i = 0; i < ngContentSelectors.length; i++) {
	                var selector = ngContentSelectors[i];
	                if (selector === '*') {
	                    wildcardNgContentIndex = i;
	                }
	                else {
	                    matcher.addSelectables(CssSelector.parse(ngContentSelectors[i]), i);
	                }
	            }
	        }
	        return new ElementContext(isTemplateElement, matcher, wildcardNgContentIndex, providerContext);
	    };
	    ElementContext.prototype.findNgContentIndex = function (selector) {
	        var ngContentIndices = [];
	        this._ngContentIndexMatcher.match(selector, function (selector, ngContentIndex) {
	            ngContentIndices.push(ngContentIndex);
	        });
	        ngContentIndices.sort();
	        if (this._wildcardNgContentIndex != null) {
	            ngContentIndices.push(this._wildcardNgContentIndex);
	        }
	        return ngContentIndices.length > 0 ? ngContentIndices[0] : null;
	    };
	    return ElementContext;
	}());
	function createElementCssSelector(elementName, attributes) {
	    var cssSelector = new CssSelector();
	    var elNameNoNs = splitNsName(elementName)[1];
	    cssSelector.setElement(elNameNoNs);
	    for (var i = 0; i < attributes.length; i++) {
	        var attrName = attributes[i][0];
	        var attrNameNoNs = splitNsName(attrName)[1];
	        var attrValue = attributes[i][1];
	        cssSelector.addAttribute(attrNameNoNs, attrValue);
	        if (attrName.toLowerCase() == CLASS_ATTR) {
	            var classes = splitClasses(attrValue);
	            classes.forEach(function (className) { return cssSelector.addClassName(className); });
	        }
	    }
	    return cssSelector;
	}
	var EMPTY_ELEMENT_CONTEXT = new ElementContext(true, new SelectorMatcher(), null, null);
	var NON_BINDABLE_VISITOR = new NonBindableVisitor();
	function _isEmptyTextNode(node) {
	    return node instanceof Text$3 && node.value.trim().length == 0;
	}
	function removeSummaryDuplicates(items) {
	    var map = new Map();
	    items.forEach(function (item) {
	        if (!map.get(item.type.reference)) {
	            map.set(item.type.reference, item);
	        }
	    });
	    return Array.from(map.values());
	}
	function isEmptyExpression(ast) {
	    if (ast instanceof ASTWithSource) {
	        ast = ast.ast;
	    }
	    return ast instanceof EmptyExpr;
	}

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * Parses string representation of a style and converts it into object literal.
	 *
	 * @param value string representation of style as used in the `style` attribute in HTML.
	 *   Example: `color: red; height: auto`.
	 * @returns An array of style property name and value pairs, e.g. `['color', 'red', 'height',
	 * 'auto']`
	 */
	function parse(value) {
	    // we use a string array here instead of a string map
	    // because a string-map is not guaranteed to retain the
	    // order of the entries whereas a string array can be
	    // constructed in a [key, value, key, value] format.
	    var styles = [];
	    var i = 0;
	    var parenDepth = 0;
	    var quote = 0 /* QuoteNone */;
	    var valueStart = 0;
	    var propStart = 0;
	    var currentProp = null;
	    var valueHasQuotes = false;
	    while (i < value.length) {
	        var token = value.charCodeAt(i++);
	        switch (token) {
	            case 40 /* OpenParen */:
	                parenDepth++;
	                break;
	            case 41 /* CloseParen */:
	                parenDepth--;
	                break;
	            case 39 /* QuoteSingle */:
	                // valueStart needs to be there since prop values don't
	                // have quotes in CSS
	                valueHasQuotes = valueHasQuotes || valueStart > 0;
	                if (quote === 0 /* QuoteNone */) {
	                    quote = 39 /* QuoteSingle */;
	                }
	                else if (quote === 39 /* QuoteSingle */ && value.charCodeAt(i - 1) !== 92 /* BackSlash */) {
	                    quote = 0 /* QuoteNone */;
	                }
	                break;
	            case 34 /* QuoteDouble */:
	                // same logic as above
	                valueHasQuotes = valueHasQuotes || valueStart > 0;
	                if (quote === 0 /* QuoteNone */) {
	                    quote = 34 /* QuoteDouble */;
	                }
	                else if (quote === 34 /* QuoteDouble */ && value.charCodeAt(i - 1) !== 92 /* BackSlash */) {
	                    quote = 0 /* QuoteNone */;
	                }
	                break;
	            case 58 /* Colon */:
	                if (!currentProp && parenDepth === 0 && quote === 0 /* QuoteNone */) {
	                    currentProp = hyphenate(value.substring(propStart, i - 1).trim());
	                    valueStart = i;
	                }
	                break;
	            case 59 /* Semicolon */:
	                if (currentProp && valueStart > 0 && parenDepth === 0 && quote === 0 /* QuoteNone */) {
	                    var styleVal = value.substring(valueStart, i - 1).trim();
	                    styles.push(currentProp, valueHasQuotes ? stripUnnecessaryQuotes(styleVal) : styleVal);
	                    propStart = i;
	                    valueStart = 0;
	                    currentProp = null;
	                    valueHasQuotes = false;
	                }
	                break;
	        }
	    }
	    if (currentProp && valueStart) {
	        var styleVal = value.substr(valueStart).trim();
	        styles.push(currentProp, valueHasQuotes ? stripUnnecessaryQuotes(styleVal) : styleVal);
	    }
	    return styles;
	}
	function stripUnnecessaryQuotes(value) {
	    var qS = value.charCodeAt(0);
	    var qE = value.charCodeAt(value.length - 1);
	    if (qS == qE && (qS == 39 /* QuoteSingle */ || qS == 34 /* QuoteDouble */)) {
	        var tempValue = value.substring(1, value.length - 1);
	        // special case to avoid using a multi-quoted string that was just chomped
	        // (e.g. `font-family: "Verdana", "sans-serif"`)
	        if (tempValue.indexOf('\'') == -1 && tempValue.indexOf('"') == -1) {
	            value = tempValue;
	        }
	    }
	    return value;
	}
	function hyphenate(value) {
	    return value
	        .replace(/[a-z][A-Z]/g, function (v) {
	        return v.charAt(0) + '-' + v.charAt(1);
	    })
	        .toLowerCase();
	}

	var IMPORTANT_FLAG = '!important';
	/**
	 * Minimum amount of binding slots required in the runtime for style/class bindings.
	 *
	 * Styling in Angular uses up two slots in the runtime LView/TData data structures to
	 * record binding data, property information and metadata.
	 *
	 * When a binding is registered it will place the following information in the `LView`:
	 *
	 * slot 1) binding value
	 * slot 2) cached value (all other values collected before it in string form)
	 *
	 * When a binding is registered it will place the following information in the `TData`:
	 *
	 * slot 1) prop name
	 * slot 2) binding index that points to the previous style/class binding (and some extra config
	 * values)
	 *
	 * Let's imagine we have a binding that looks like so:
	 *
	 * ```
	 * <div [style.width]="x" [style.height]="y">
	 * ```
	 *
	 * Our `LView` and `TData` data-structures look like so:
	 *
	 * ```typescript
	 * LView = [
	 *   // ...
	 *   x, // value of x
	 *   "width: x",
	 *
	 *   y, // value of y
	 *   "width: x; height: y",
	 *   // ...
	 * ];
	 *
	 * TData = [
	 *   // ...
	 *   "width", // binding slot 20
	 *   0,
	 *
	 *   "height",
	 *   20,
	 *   // ...
	 * ];
	 * ```
	 *
	 * */
	var MIN_STYLING_BINDING_SLOTS_REQUIRED = 2;
	/**
	 * Produces creation/update instructions for all styling bindings (class and style)
	 *
	 * It also produces the creation instruction to register all initial styling values
	 * (which are all the static class="..." and style="..." attribute values that exist
	 * on an element within a template).
	 *
	 * The builder class below handles producing instructions for the following cases:
	 *
	 * - Static style/class attributes (style="..." and class="...")
	 * - Dynamic style/class map bindings ([style]="map" and [class]="map|string")
	 * - Dynamic style/class property bindings ([style.prop]="exp" and [class.name]="exp")
	 *
	 * Due to the complex relationship of all of these cases, the instructions generated
	 * for these attributes/properties/bindings must be done so in the correct order. The
	 * order which these must be generated is as follows:
	 *
	 * if (createMode) {
	 *   styling(...)
	 * }
	 * if (updateMode) {
	 *   styleMap(...)
	 *   classMap(...)
	 *   styleProp(...)
	 *   classProp(...)
	 * }
	 *
	 * The creation/update methods within the builder class produce these instructions.
	 */
	var StylingBuilder = /** @class */ (function () {
	    function StylingBuilder(_directiveExpr) {
	        this._directiveExpr = _directiveExpr;
	        /** Whether or not there are any static styling values present */
	        this._hasInitialValues = false;
	        /**
	         *  Whether or not there are any styling bindings present
	         *  (i.e. `[style]`, `[class]`, `[style.prop]` or `[class.name]`)
	         */
	        this.hasBindings = false;
	        this.hasBindingsWithPipes = false;
	        /** the input for [class] (if it exists) */
	        this._classMapInput = null;
	        /** the input for [style] (if it exists) */
	        this._styleMapInput = null;
	        /** an array of each [style.prop] input */
	        this._singleStyleInputs = null;
	        /** an array of each [class.name] input */
	        this._singleClassInputs = null;
	        this._lastStylingInput = null;
	        this._firstStylingInput = null;
	        // maps are used instead of hash maps because a Map will
	        // retain the ordering of the keys
	        /**
	         * Represents the location of each style binding in the template
	         * (e.g. `<div [style.width]="w" [style.height]="h">` implies
	         * that `width=0` and `height=1`)
	         */
	        this._stylesIndex = new Map();
	        /**
	         * Represents the location of each class binding in the template
	         * (e.g. `<div [class.big]="b" [class.hidden]="h">` implies
	         * that `big=0` and `hidden=1`)
	         */
	        this._classesIndex = new Map();
	        this._initialStyleValues = [];
	        this._initialClassValues = [];
	    }
	    /**
	     * Registers a given input to the styling builder to be later used when producing AOT code.
	     *
	     * The code below will only accept the input if it is somehow tied to styling (whether it be
	     * style/class bindings or static style/class attributes).
	     */
	    StylingBuilder.prototype.registerBoundInput = function (input) {
	        // [attr.style] or [attr.class] are skipped in the code below,
	        // they should not be treated as styling-based bindings since
	        // they are intended to be written directly to the attr and
	        // will therefore skip all style/class resolution that is present
	        // with style="", [style]="" and [style.prop]="", class="",
	        // [class.prop]="". [class]="" assignments
	        var binding = null;
	        var name = input.name;
	        switch (input.type) {
	            case 0 /* Property */:
	                binding = this.registerInputBasedOnName(name, input.value, input.sourceSpan);
	                break;
	            case 3 /* Style */:
	                binding = this.registerStyleInput(name, false, input.value, input.sourceSpan, input.unit);
	                break;
	            case 2 /* Class */:
	                binding = this.registerClassInput(name, false, input.value, input.sourceSpan);
	                break;
	        }
	        return binding ? true : false;
	    };
	    StylingBuilder.prototype.registerInputBasedOnName = function (name, expression, sourceSpan) {
	        var binding = null;
	        var prefix = name.substring(0, 6);
	        var isStyle = name === 'style' || prefix === 'style.' || prefix === 'style!';
	        var isClass = !isStyle && (name === 'class' || prefix === 'class.' || prefix === 'class!');
	        if (isStyle || isClass) {
	            var isMapBased = name.charAt(5) !== '.'; // style.prop or class.prop makes this a no
	            var property = name.substr(isMapBased ? 5 : 6); // the dot explains why there's a +1
	            if (isStyle) {
	                binding = this.registerStyleInput(property, isMapBased, expression, sourceSpan);
	            }
	            else {
	                binding = this.registerClassInput(property, isMapBased, expression, sourceSpan);
	            }
	        }
	        return binding;
	    };
	    StylingBuilder.prototype.registerStyleInput = function (name, isMapBased, value, sourceSpan, unit) {
	        if (isEmptyExpression(value)) {
	            return null;
	        }
	        name = normalizePropName(name);
	        var _a = parseProperty(name), property = _a.property, hasOverrideFlag = _a.hasOverrideFlag, bindingUnit = _a.unit;
	        var entry = {
	            name: property,
	            sanitize: property ? isStyleSanitizable(property) : true,
	            unit: unit || bindingUnit,
	            value: value,
	            sourceSpan: sourceSpan,
	            hasOverrideFlag: hasOverrideFlag
	        };
	        if (isMapBased) {
	            this._styleMapInput = entry;
	        }
	        else {
	            (this._singleStyleInputs = this._singleStyleInputs || []).push(entry);
	            registerIntoMap(this._stylesIndex, property);
	        }
	        this._lastStylingInput = entry;
	        this._firstStylingInput = this._firstStylingInput || entry;
	        this._checkForPipes(value);
	        this.hasBindings = true;
	        return entry;
	    };
	    StylingBuilder.prototype.registerClassInput = function (name, isMapBased, value, sourceSpan) {
	        if (isEmptyExpression(value)) {
	            return null;
	        }
	        var _a = parseProperty(name), property = _a.property, hasOverrideFlag = _a.hasOverrideFlag;
	        var entry = { name: property, value: value, sourceSpan: sourceSpan, sanitize: false, hasOverrideFlag: hasOverrideFlag, unit: null };
	        if (isMapBased) {
	            if (this._classMapInput) {
	                throw new Error('[class] and [className] bindings cannot be used on the same element simultaneously');
	            }
	            this._classMapInput = entry;
	        }
	        else {
	            (this._singleClassInputs = this._singleClassInputs || []).push(entry);
	            registerIntoMap(this._classesIndex, property);
	        }
	        this._lastStylingInput = entry;
	        this._firstStylingInput = this._firstStylingInput || entry;
	        this._checkForPipes(value);
	        this.hasBindings = true;
	        return entry;
	    };
	    StylingBuilder.prototype._checkForPipes = function (value) {
	        if ((value instanceof ASTWithSource) && (value.ast instanceof BindingPipe)) {
	            this.hasBindingsWithPipes = true;
	        }
	    };
	    /**
	     * Registers the element's static style string value to the builder.
	     *
	     * @param value the style string (e.g. `width:100px; height:200px;`)
	     */
	    StylingBuilder.prototype.registerStyleAttr = function (value) {
	        this._initialStyleValues = parse(value);
	        this._hasInitialValues = true;
	    };
	    /**
	     * Registers the element's static class string value to the builder.
	     *
	     * @param value the className string (e.g. `disabled gold zoom`)
	     */
	    StylingBuilder.prototype.registerClassAttr = function (value) {
	        this._initialClassValues = value.trim().split(/\s+/g);
	        this._hasInitialValues = true;
	    };
	    /**
	     * Appends all styling-related expressions to the provided attrs array.
	     *
	     * @param attrs an existing array where each of the styling expressions
	     * will be inserted into.
	     */
	    StylingBuilder.prototype.populateInitialStylingAttrs = function (attrs) {
	        // [CLASS_MARKER, 'foo', 'bar', 'baz' ...]
	        if (this._initialClassValues.length) {
	            attrs.push(literal(1 /* Classes */));
	            for (var i = 0; i < this._initialClassValues.length; i++) {
	                attrs.push(literal(this._initialClassValues[i]));
	            }
	        }
	        // [STYLE_MARKER, 'width', '200px', 'height', '100px', ...]
	        if (this._initialStyleValues.length) {
	            attrs.push(literal(2 /* Styles */));
	            for (var i = 0; i < this._initialStyleValues.length; i += 2) {
	                attrs.push(literal(this._initialStyleValues[i]), literal(this._initialStyleValues[i + 1]));
	            }
	        }
	    };
	    /**
	     * Builds an instruction with all the expressions and parameters for `elementHostAttrs`.
	     *
	     * The instruction generation code below is used for producing the AOT statement code which is
	     * responsible for registering initial styles (within a directive hostBindings' creation block),
	     * as well as any of the provided attribute values, to the directive host element.
	     */
	    StylingBuilder.prototype.assignHostAttrs = function (attrs, definitionMap) {
	        if (this._directiveExpr && (attrs.length || this._hasInitialValues)) {
	            this.populateInitialStylingAttrs(attrs);
	            definitionMap.set('hostAttrs', literalArr(attrs));
	        }
	    };
	    /**
	     * Builds an instruction with all the expressions and parameters for `classMap`.
	     *
	     * The instruction data will contain all expressions for `classMap` to function
	     * which includes the `[class]` expression params.
	     */
	    StylingBuilder.prototype.buildClassMapInstruction = function (valueConverter) {
	        if (this._classMapInput) {
	            return this._buildMapBasedInstruction(valueConverter, true, this._classMapInput);
	        }
	        return null;
	    };
	    /**
	     * Builds an instruction with all the expressions and parameters for `styleMap`.
	     *
	     * The instruction data will contain all expressions for `styleMap` to function
	     * which includes the `[style]` expression params.
	     */
	    StylingBuilder.prototype.buildStyleMapInstruction = function (valueConverter) {
	        if (this._styleMapInput) {
	            return this._buildMapBasedInstruction(valueConverter, false, this._styleMapInput);
	        }
	        return null;
	    };
	    StylingBuilder.prototype._buildMapBasedInstruction = function (valueConverter, isClassBased, stylingInput) {
	        // each styling binding value is stored in the LView
	        // map-based bindings allocate two slots: one for the
	        // previous binding value and another for the previous
	        // className or style attribute value.
	        var totalBindingSlotsRequired = MIN_STYLING_BINDING_SLOTS_REQUIRED;
	        // these values must be outside of the update block so that they can
	        // be evaluated (the AST visit call) during creation time so that any
	        // pipes can be picked up in time before the template is built
	        var mapValue = stylingInput.value.visit(valueConverter);
	        var reference;
	        if (mapValue instanceof Interpolation) {
	            totalBindingSlotsRequired += mapValue.expressions.length;
	            reference = isClassBased ? getClassMapInterpolationExpression(mapValue) :
	                getStyleMapInterpolationExpression(mapValue);
	        }
	        else {
	            reference = isClassBased ? Identifiers$1.classMap : Identifiers$1.styleMap;
	        }
	        return {
	            reference: reference,
	            calls: [{
	                    supportsInterpolation: true,
	                    sourceSpan: stylingInput.sourceSpan,
	                    allocateBindingSlots: totalBindingSlotsRequired,
	                    params: function (convertFn) {
	                        var convertResult = convertFn(mapValue);
	                        var params = Array.isArray(convertResult) ? convertResult : [convertResult];
	                        return params;
	                    }
	                }]
	        };
	    };
	    StylingBuilder.prototype._buildSingleInputs = function (reference, inputs, valueConverter, getInterpolationExpressionFn, isClassBased) {
	        var instructions = [];
	        inputs.forEach(function (input) {
	            var previousInstruction = instructions[instructions.length - 1];
	            var value = input.value.visit(valueConverter);
	            var referenceForCall = reference;
	            // each styling binding value is stored in the LView
	            // but there are two values stored for each binding:
	            //   1) the value itself
	            //   2) an intermediate value (concatenation of style up to this point).
	            //      We need to store the intermediate value so that we don't allocate
	            //      the strings on each CD.
	            var totalBindingSlotsRequired = MIN_STYLING_BINDING_SLOTS_REQUIRED;
	            if (value instanceof Interpolation) {
	                totalBindingSlotsRequired += value.expressions.length;
	                if (getInterpolationExpressionFn) {
	                    referenceForCall = getInterpolationExpressionFn(value);
	                }
	            }
	            var call = {
	                sourceSpan: input.sourceSpan,
	                allocateBindingSlots: totalBindingSlotsRequired,
	                supportsInterpolation: !!getInterpolationExpressionFn,
	                params: function (convertFn) {
	                    // params => stylingProp(propName, value, suffix|sanitizer)
	                    var params = [];
	                    params.push(literal(input.name));
	                    var convertResult = convertFn(value);
	                    if (Array.isArray(convertResult)) {
	                        params.push.apply(params, __spread(convertResult));
	                    }
	                    else {
	                        params.push(convertResult);
	                    }
	                    // [style.prop] bindings may use suffix values (e.g. px, em, etc...) and they
	                    // can also use a sanitizer. Sanitization occurs for url-based entries. Having
	                    // the suffix value and a sanitizer together into the instruction doesn't make
	                    // any sense (url-based entries cannot be sanitized).
	                    if (!isClassBased) {
	                        if (input.unit) {
	                            params.push(literal(input.unit));
	                        }
	                        else if (input.sanitize) {
	                            params.push(importExpr(Identifiers$1.defaultStyleSanitizer));
	                        }
	                    }
	                    return params;
	                }
	            };
	            // If we ended up generating a call to the same instruction as the previous styling property
	            // we can chain the calls together safely to save some bytes, otherwise we have to generate
	            // a separate instruction call. This is primarily a concern with interpolation instructions
	            // where we may start off with one `reference`, but end up using another based on the
	            // number of interpolations.
	            if (previousInstruction && previousInstruction.reference === referenceForCall) {
	                previousInstruction.calls.push(call);
	            }
	            else {
	                instructions.push({ reference: referenceForCall, calls: [call] });
	            }
	        });
	        return instructions;
	    };
	    StylingBuilder.prototype._buildClassInputs = function (valueConverter) {
	        if (this._singleClassInputs) {
	            return this._buildSingleInputs(Identifiers$1.classProp, this._singleClassInputs, valueConverter, null, true);
	        }
	        return [];
	    };
	    StylingBuilder.prototype._buildStyleInputs = function (valueConverter) {
	        if (this._singleStyleInputs) {
	            return this._buildSingleInputs(Identifiers$1.styleProp, this._singleStyleInputs, valueConverter, getStylePropInterpolationExpression, false);
	        }
	        return [];
	    };
	    /**
	     * Constructs all instructions which contain the expressions that will be placed
	     * into the update block of a template function or a directive hostBindings function.
	     */
	    StylingBuilder.prototype.buildUpdateLevelInstructions = function (valueConverter) {
	        var instructions = [];
	        if (this.hasBindings) {
	            var styleMapInstruction = this.buildStyleMapInstruction(valueConverter);
	            if (styleMapInstruction) {
	                instructions.push(styleMapInstruction);
	            }
	            var classMapInstruction = this.buildClassMapInstruction(valueConverter);
	            if (classMapInstruction) {
	                instructions.push(classMapInstruction);
	            }
	            instructions.push.apply(instructions, __spread(this._buildStyleInputs(valueConverter)));
	            instructions.push.apply(instructions, __spread(this._buildClassInputs(valueConverter)));
	        }
	        return instructions;
	    };
	    return StylingBuilder;
	}());
	function registerIntoMap(map, key) {
	    if (!map.has(key)) {
	        map.set(key, map.size);
	    }
	}
	function isStyleSanitizable(prop) {
	    // Note that browsers support both the dash case and
	    // camel case property names when setting through JS.
	    return prop === 'background-image' || prop === 'backgroundImage' || prop === 'background' ||
	        prop === 'border-image' || prop === 'borderImage' || prop === 'border-image-source' ||
	        prop === 'borderImageSource' || prop === 'filter' || prop === 'list-style' ||
	        prop === 'listStyle' || prop === 'list-style-image' || prop === 'listStyleImage' ||
	        prop === 'clip-path' || prop === 'clipPath';
	}
	function parseProperty(name) {
	    var hasOverrideFlag = false;
	    var overrideIndex = name.indexOf(IMPORTANT_FLAG);
	    if (overrideIndex !== -1) {
	        name = overrideIndex > 0 ? name.substring(0, overrideIndex) : '';
	        hasOverrideFlag = true;
	    }
	    var unit = '';
	    var property = name;
	    var unitIndex = name.lastIndexOf('.');
	    if (unitIndex > 0) {
	        unit = name.substr(unitIndex + 1);
	        property = name.substring(0, unitIndex);
	    }
	    return { property: property, unit: unit, hasOverrideFlag: hasOverrideFlag };
	}
	/**
	 * Gets the instruction to generate for an interpolated class map.
	 * @param interpolation An Interpolation AST
	 */
	function getClassMapInterpolationExpression(interpolation) {
	    switch (getInterpolationArgsLength(interpolation)) {
	        case 1:
	            return Identifiers$1.classMap;
	        case 3:
	            return Identifiers$1.classMapInterpolate1;
	        case 5:
	            return Identifiers$1.classMapInterpolate2;
	        case 7:
	            return Identifiers$1.classMapInterpolate3;
	        case 9:
	            return Identifiers$1.classMapInterpolate4;
	        case 11:
	            return Identifiers$1.classMapInterpolate5;
	        case 13:
	            return Identifiers$1.classMapInterpolate6;
	        case 15:
	            return Identifiers$1.classMapInterpolate7;
	        case 17:
	            return Identifiers$1.classMapInterpolate8;
	        default:
	            return Identifiers$1.classMapInterpolateV;
	    }
	}
	/**
	 * Gets the instruction to generate for an interpolated style map.
	 * @param interpolation An Interpolation AST
	 */
	function getStyleMapInterpolationExpression(interpolation) {
	    switch (getInterpolationArgsLength(interpolation)) {
	        case 1:
	            return Identifiers$1.styleMap;
	        case 3:
	            return Identifiers$1.styleMapInterpolate1;
	        case 5:
	            return Identifiers$1.styleMapInterpolate2;
	        case 7:
	            return Identifiers$1.styleMapInterpolate3;
	        case 9:
	            return Identifiers$1.styleMapInterpolate4;
	        case 11:
	            return Identifiers$1.styleMapInterpolate5;
	        case 13:
	            return Identifiers$1.styleMapInterpolate6;
	        case 15:
	            return Identifiers$1.styleMapInterpolate7;
	        case 17:
	            return Identifiers$1.styleMapInterpolate8;
	        default:
	            return Identifiers$1.styleMapInterpolateV;
	    }
	}
	/**
	 * Gets the instruction to generate for an interpolated style prop.
	 * @param interpolation An Interpolation AST
	 */
	function getStylePropInterpolationExpression(interpolation) {
	    switch (getInterpolationArgsLength(interpolation)) {
	        case 1:
	            return Identifiers$1.styleProp;
	        case 3:
	            return Identifiers$1.stylePropInterpolate1;
	        case 5:
	            return Identifiers$1.stylePropInterpolate2;
	        case 7:
	            return Identifiers$1.stylePropInterpolate3;
	        case 9:
	            return Identifiers$1.stylePropInterpolate4;
	        case 11:
	            return Identifiers$1.stylePropInterpolate5;
	        case 13:
	            return Identifiers$1.stylePropInterpolate6;
	        case 15:
	            return Identifiers$1.stylePropInterpolate7;
	        case 17:
	            return Identifiers$1.stylePropInterpolate8;
	        default:
	            return Identifiers$1.stylePropInterpolateV;
	    }
	}
	function normalizePropName(prop) {
	    return hyphenate(prop);
	}

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	var TokenType$1;
	(function (TokenType) {
	    TokenType[TokenType["Character"] = 0] = "Character";
	    TokenType[TokenType["Identifier"] = 1] = "Identifier";
	    TokenType[TokenType["Keyword"] = 2] = "Keyword";
	    TokenType[TokenType["String"] = 3] = "String";
	    TokenType[TokenType["Operator"] = 4] = "Operator";
	    TokenType[TokenType["Number"] = 5] = "Number";
	    TokenType[TokenType["Error"] = 6] = "Error";
	})(TokenType$1 || (TokenType$1 = {}));
	var KEYWORDS = ['var', 'let', 'as', 'null', 'undefined', 'true', 'false', 'if', 'else', 'this'];
	var Lexer = /** @class */ (function () {
	    function Lexer() {
	    }
	    Lexer.prototype.tokenize = function (text) {
	        var scanner = new _Scanner(text);
	        var tokens = [];
	        var token = scanner.scanToken();
	        while (token != null) {
	            tokens.push(token);
	            token = scanner.scanToken();
	        }
	        return tokens;
	    };
	    return Lexer;
	}());
	var Token$1 = /** @class */ (function () {
	    function Token(index, end, type, numValue, strValue) {
	        this.index = index;
	        this.end = end;
	        this.type = type;
	        this.numValue = numValue;
	        this.strValue = strValue;
	    }
	    Token.prototype.isCharacter = function (code) {
	        return this.type == TokenType$1.Character && this.numValue == code;
	    };
	    Token.prototype.isNumber = function () {
	        return this.type == TokenType$1.Number;
	    };
	    Token.prototype.isString = function () {
	        return this.type == TokenType$1.String;
	    };
	    Token.prototype.isOperator = function (operator) {
	        return this.type == TokenType$1.Operator && this.strValue == operator;
	    };
	    Token.prototype.isIdentifier = function () {
	        return this.type == TokenType$1.Identifier;
	    };
	    Token.prototype.isKeyword = function () {
	        return this.type == TokenType$1.Keyword;
	    };
	    Token.prototype.isKeywordLet = function () {
	        return this.type == TokenType$1.Keyword && this.strValue == 'let';
	    };
	    Token.prototype.isKeywordAs = function () {
	        return this.type == TokenType$1.Keyword && this.strValue == 'as';
	    };
	    Token.prototype.isKeywordNull = function () {
	        return this.type == TokenType$1.Keyword && this.strValue == 'null';
	    };
	    Token.prototype.isKeywordUndefined = function () {
	        return this.type == TokenType$1.Keyword && this.strValue == 'undefined';
	    };
	    Token.prototype.isKeywordTrue = function () {
	        return this.type == TokenType$1.Keyword && this.strValue == 'true';
	    };
	    Token.prototype.isKeywordFalse = function () {
	        return this.type == TokenType$1.Keyword && this.strValue == 'false';
	    };
	    Token.prototype.isKeywordThis = function () {
	        return this.type == TokenType$1.Keyword && this.strValue == 'this';
	    };
	    Token.prototype.isError = function () {
	        return this.type == TokenType$1.Error;
	    };
	    Token.prototype.toNumber = function () {
	        return this.type == TokenType$1.Number ? this.numValue : -1;
	    };
	    Token.prototype.toString = function () {
	        switch (this.type) {
	            case TokenType$1.Character:
	            case TokenType$1.Identifier:
	            case TokenType$1.Keyword:
	            case TokenType$1.Operator:
	            case TokenType$1.String:
	            case TokenType$1.Error:
	                return this.strValue;
	            case TokenType$1.Number:
	                return this.numValue.toString();
	            default:
	                return null;
	        }
	    };
	    return Token;
	}());
	function newCharacterToken(index, end, code) {
	    return new Token$1(index, end, TokenType$1.Character, code, String.fromCharCode(code));
	}
	function newIdentifierToken(index, end, text) {
	    return new Token$1(index, end, TokenType$1.Identifier, 0, text);
	}
	function newKeywordToken(index, end, text) {
	    return new Token$1(index, end, TokenType$1.Keyword, 0, text);
	}
	function newOperatorToken(index, end, text) {
	    return new Token$1(index, end, TokenType$1.Operator, 0, text);
	}
	function newStringToken(index, end, text) {
	    return new Token$1(index, end, TokenType$1.String, 0, text);
	}
	function newNumberToken(index, end, n) {
	    return new Token$1(index, end, TokenType$1.Number, n, '');
	}
	function newErrorToken(index, end, message) {
	    return new Token$1(index, end, TokenType$1.Error, 0, message);
	}
	var EOF = new Token$1(-1, -1, TokenType$1.Character, 0, '');
	var _Scanner = /** @class */ (function () {
	    function _Scanner(input) {
	        this.input = input;
	        this.peek = 0;
	        this.index = -1;
	        this.length = input.length;
	        this.advance();
	    }
	    _Scanner.prototype.advance = function () {
	        this.peek = ++this.index >= this.length ? $EOF : this.input.charCodeAt(this.index);
	    };
	    _Scanner.prototype.scanToken = function () {
	        var input = this.input, length = this.length;
	        var peek = this.peek, index = this.index;
	        // Skip whitespace.
	        while (peek <= $SPACE) {
	            if (++index >= length) {
	                peek = $EOF;
	                break;
	            }
	            else {
	                peek = input.charCodeAt(index);
	            }
	        }
	        this.peek = peek;
	        this.index = index;
	        if (index >= length) {
	            return null;
	        }
	        // Handle identifiers and numbers.
	        if (isIdentifierStart(peek))
	            return this.scanIdentifier();
	        if (isDigit(peek))
	            return this.scanNumber(index);
	        var start = index;
	        switch (peek) {
	            case $PERIOD:
	                this.advance();
	                return isDigit(this.peek) ? this.scanNumber(start) :
	                    newCharacterToken(start, this.index, $PERIOD);
	            case $LPAREN:
	            case $RPAREN:
	            case $LBRACE:
	            case $RBRACE:
	            case $LBRACKET:
	            case $RBRACKET:
	            case $COMMA:
	            case $COLON:
	            case $SEMICOLON:
	                return this.scanCharacter(start, peek);
	            case $SQ:
	            case $DQ:
	                return this.scanString();
	            case $HASH:
	            case $PLUS:
	            case $MINUS:
	            case $STAR:
	            case $SLASH:
	            case $PERCENT:
	            case $CARET:
	                return this.scanOperator(start, String.fromCharCode(peek));
	            case $QUESTION:
	                return this.scanComplexOperator(start, '?', $PERIOD, '.');
	            case $LT:
	            case $GT:
	                return this.scanComplexOperator(start, String.fromCharCode(peek), $EQ, '=');
	            case $BANG:
	            case $EQ:
	                return this.scanComplexOperator(start, String.fromCharCode(peek), $EQ, '=', $EQ, '=');
	            case $AMPERSAND:
	                return this.scanComplexOperator(start, '&', $AMPERSAND, '&');
	            case $BAR:
	                return this.scanComplexOperator(start, '|', $BAR, '|');
	            case $NBSP:
	                while (isWhitespace(this.peek))
	                    this.advance();
	                return this.scanToken();
	        }
	        this.advance();
	        return this.error("Unexpected character [" + String.fromCharCode(peek) + "]", 0);
	    };
	    _Scanner.prototype.scanCharacter = function (start, code) {
	        this.advance();
	        return newCharacterToken(start, this.index, code);
	    };
	    _Scanner.prototype.scanOperator = function (start, str) {
	        this.advance();
	        return newOperatorToken(start, this.index, str);
	    };
	    /**
	     * Tokenize a 2/3 char long operator
	     *
	     * @param start start index in the expression
	     * @param one first symbol (always part of the operator)
	     * @param twoCode code point for the second symbol
	     * @param two second symbol (part of the operator when the second code point matches)
	     * @param threeCode code point for the third symbol
	     * @param three third symbol (part of the operator when provided and matches source expression)
	     */
	    _Scanner.prototype.scanComplexOperator = function (start, one, twoCode, two, threeCode, three) {
	        this.advance();
	        var str = one;
	        if (this.peek == twoCode) {
	            this.advance();
	            str += two;
	        }
	        if (threeCode != null && this.peek == threeCode) {
	            this.advance();
	            str += three;
	        }
	        return newOperatorToken(start, this.index, str);
	    };
	    _Scanner.prototype.scanIdentifier = function () {
	        var start = this.index;
	        this.advance();
	        while (isIdentifierPart(this.peek))
	            this.advance();
	        var str = this.input.substring(start, this.index);
	        return KEYWORDS.indexOf(str) > -1 ? newKeywordToken(start, this.index, str) :
	            newIdentifierToken(start, this.index, str);
	    };
	    _Scanner.prototype.scanNumber = function (start) {
	        var simple = (this.index === start);
	        this.advance(); // Skip initial digit.
	        while (true) {
	            if (isDigit(this.peek)) ;
	            else if (this.peek == $PERIOD) {
	                simple = false;
	            }
	            else if (isExponentStart(this.peek)) {
	                this.advance();
	                if (isExponentSign(this.peek))
	                    this.advance();
	                if (!isDigit(this.peek))
	                    return this.error('Invalid exponent', -1);
	                simple = false;
	            }
	            else {
	                break;
	            }
	            this.advance();
	        }
	        var str = this.input.substring(start, this.index);
	        var value = simple ? parseIntAutoRadix(str) : parseFloat(str);
	        return newNumberToken(start, this.index, value);
	    };
	    _Scanner.prototype.scanString = function () {
	        var start = this.index;
	        var quote = this.peek;
	        this.advance(); // Skip initial quote.
	        var buffer = '';
	        var marker = this.index;
	        var input = this.input;
	        while (this.peek != quote) {
	            if (this.peek == $BACKSLASH) {
	                buffer += input.substring(marker, this.index);
	                this.advance();
	                var unescapedCode = void 0;
	                // Workaround for TS2.1-introduced type strictness
	                this.peek = this.peek;
	                if (this.peek == $u) {
	                    // 4 character hex code for unicode character.
	                    var hex = input.substring(this.index + 1, this.index + 5);
	                    if (/^[0-9a-f]+$/i.test(hex)) {
	                        unescapedCode = parseInt(hex, 16);
	                    }
	                    else {
	                        return this.error("Invalid unicode escape [\\u" + hex + "]", 0);
	                    }
	                    for (var i = 0; i < 5; i++) {
	                        this.advance();
	                    }
	                }
	                else {
	                    unescapedCode = unescape(this.peek);
	                    this.advance();
	                }
	                buffer += String.fromCharCode(unescapedCode);
	                marker = this.index;
	            }
	            else if (this.peek == $EOF) {
	                return this.error('Unterminated quote', 0);
	            }
	            else {
	                this.advance();
	            }
	        }
	        var last = input.substring(marker, this.index);
	        this.advance(); // Skip terminating quote.
	        return newStringToken(start, this.index, buffer + last);
	    };
	    _Scanner.prototype.error = function (message, offset) {
	        var position = this.index + offset;
	        return newErrorToken(position, this.index, "Lexer Error: " + message + " at column " + position + " in expression [" + this.input + "]");
	    };
	    return _Scanner;
	}());
	function isIdentifierStart(code) {
	    return ($a <= code && code <= $z) || ($A <= code && code <= $Z) ||
	        (code == $_) || (code == $$);
	}
	function isIdentifier(input) {
	    if (input.length == 0)
	        return false;
	    var scanner = new _Scanner(input);
	    if (!isIdentifierStart(scanner.peek))
	        return false;
	    scanner.advance();
	    while (scanner.peek !== $EOF) {
	        if (!isIdentifierPart(scanner.peek))
	            return false;
	        scanner.advance();
	    }
	    return true;
	}
	function isIdentifierPart(code) {
	    return isAsciiLetter(code) || isDigit(code) || (code == $_) ||
	        (code == $$);
	}
	function isExponentStart(code) {
	    return code == $e || code == $E;
	}
	function isExponentSign(code) {
	    return code == $MINUS || code == $PLUS;
	}
	function isQuote(code) {
	    return code === $SQ || code === $DQ || code === $BT;
	}
	function unescape(code) {
	    switch (code) {
	        case $n:
	            return $LF;
	        case $f:
	            return $FF;
	        case $r:
	            return $CR;
	        case $t:
	            return $TAB;
	        case $v:
	            return $VTAB;
	        default:
	            return code;
	    }
	}
	function parseIntAutoRadix(text) {
	    var result = parseInt(text);
	    if (isNaN(result)) {
	        throw new Error('Invalid integer literal when parsing ' + text);
	    }
	    return result;
	}

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	var SplitInterpolation = /** @class */ (function () {
	    function SplitInterpolation(strings, expressions, offsets) {
	        this.strings = strings;
	        this.expressions = expressions;
	        this.offsets = offsets;
	    }
	    return SplitInterpolation;
	}());
	var TemplateBindingParseResult = /** @class */ (function () {
	    function TemplateBindingParseResult(templateBindings, warnings, errors) {
	        this.templateBindings = templateBindings;
	        this.warnings = warnings;
	        this.errors = errors;
	    }
	    return TemplateBindingParseResult;
	}());
	var defaultInterpolateRegExp = _createInterpolateRegExp(DEFAULT_INTERPOLATION_CONFIG);
	function _getInterpolateRegExp(config) {
	    if (config === DEFAULT_INTERPOLATION_CONFIG) {
	        return defaultInterpolateRegExp;
	    }
	    else {
	        return _createInterpolateRegExp(config);
	    }
	}
	function _createInterpolateRegExp(config) {
	    var pattern = escapeRegExp(config.start) + '([\\s\\S]*?)' + escapeRegExp(config.end);
	    return new RegExp(pattern, 'g');
	}
	var Parser$1 = /** @class */ (function () {
	    function Parser(_lexer) {
	        this._lexer = _lexer;
	        this.errors = [];
	        this.simpleExpressionChecker = SimpleExpressionChecker;
	    }
	    Parser.prototype.parseAction = function (input, location, absoluteOffset, interpolationConfig) {
	        if (interpolationConfig === void 0) { interpolationConfig = DEFAULT_INTERPOLATION_CONFIG; }
	        this._checkNoInterpolation(input, location, interpolationConfig);
	        var sourceToLex = this._stripComments(input);
	        var tokens = this._lexer.tokenize(this._stripComments(input));
	        var ast = new _ParseAST(input, location, absoluteOffset, tokens, sourceToLex.length, true, this.errors, input.length - sourceToLex.length)
	            .parseChain();
	        return new ASTWithSource(ast, input, location, absoluteOffset, this.errors);
	    };
	    Parser.prototype.parseBinding = function (input, location, absoluteOffset, interpolationConfig) {
	        if (interpolationConfig === void 0) { interpolationConfig = DEFAULT_INTERPOLATION_CONFIG; }
	        var ast = this._parseBindingAst(input, location, absoluteOffset, interpolationConfig);
	        return new ASTWithSource(ast, input, location, absoluteOffset, this.errors);
	    };
	    Parser.prototype.checkSimpleExpression = function (ast) {
	        var checker = new this.simpleExpressionChecker();
	        ast.visit(checker);
	        return checker.errors;
	    };
	    Parser.prototype.parseSimpleBinding = function (input, location, absoluteOffset, interpolationConfig) {
	        if (interpolationConfig === void 0) { interpolationConfig = DEFAULT_INTERPOLATION_CONFIG; }
	        var ast = this._parseBindingAst(input, location, absoluteOffset, interpolationConfig);
	        var errors = this.checkSimpleExpression(ast);
	        if (errors.length > 0) {
	            this._reportError("Host binding expression cannot contain " + errors.join(' '), input, location);
	        }
	        return new ASTWithSource(ast, input, location, absoluteOffset, this.errors);
	    };
	    Parser.prototype._reportError = function (message, input, errLocation, ctxLocation) {
	        this.errors.push(new ParserError(message, input, errLocation, ctxLocation));
	    };
	    Parser.prototype._parseBindingAst = function (input, location, absoluteOffset, interpolationConfig) {
	        // Quotes expressions use 3rd-party expression language. We don't want to use
	        // our lexer or parser for that, so we check for that ahead of time.
	        var quote = this._parseQuote(input, location, absoluteOffset);
	        if (quote != null) {
	            return quote;
	        }
	        this._checkNoInterpolation(input, location, interpolationConfig);
	        var sourceToLex = this._stripComments(input);
	        var tokens = this._lexer.tokenize(sourceToLex);
	        return new _ParseAST(input, location, absoluteOffset, tokens, sourceToLex.length, false, this.errors, input.length - sourceToLex.length)
	            .parseChain();
	    };
	    Parser.prototype._parseQuote = function (input, location, absoluteOffset) {
	        if (input == null)
	            return null;
	        var prefixSeparatorIndex = input.indexOf(':');
	        if (prefixSeparatorIndex == -1)
	            return null;
	        var prefix = input.substring(0, prefixSeparatorIndex).trim();
	        if (!isIdentifier(prefix))
	            return null;
	        var uninterpretedExpression = input.substring(prefixSeparatorIndex + 1);
	        var span = new ParseSpan(0, input.length);
	        return new Quote(span, span.toAbsolute(absoluteOffset), prefix, uninterpretedExpression, location);
	    };
	    /**
	     * Parse microsyntax template expression and return a list of bindings or
	     * parsing errors in case the given expression is invalid.
	     *
	     * For example,
	     * ```
	     *   <div *ngFor="let item of items">
	     *         ^      ^ absoluteValueOffset for `templateValue`
	     *         absoluteKeyOffset for `templateKey`
	     * ```
	     * contains three bindings:
	     * 1. ngFor -> null
	     * 2. item -> NgForOfContext.$implicit
	     * 3. ngForOf -> items
	     *
	     * This is apparent from the de-sugared template:
	     * ```
	     *   <ng-template ngFor let-item [ngForOf]="items">
	     * ```
	     *
	     * @param templateKey name of directive, without the * prefix. For example: ngIf, ngFor
	     * @param templateValue RHS of the microsyntax attribute
	     * @param templateUrl template filename if it's external, component filename if it's inline
	     * @param absoluteKeyOffset start of the `templateKey`
	     * @param absoluteValueOffset start of the `templateValue`
	     */
	    Parser.prototype.parseTemplateBindings = function (templateKey, templateValue, templateUrl, absoluteKeyOffset, absoluteValueOffset) {
	        var tokens = this._lexer.tokenize(templateValue);
	        var parser = new _ParseAST(templateValue, templateUrl, absoluteValueOffset, tokens, templateValue.length, false /* parseAction */, this.errors, 0 /* relative offset */);
	        return parser.parseTemplateBindings({
	            source: templateKey,
	            span: new AbsoluteSourceSpan(absoluteKeyOffset, absoluteKeyOffset + templateKey.length),
	        });
	    };
	    Parser.prototype.parseInterpolation = function (input, location, absoluteOffset, interpolationConfig) {
	        if (interpolationConfig === void 0) { interpolationConfig = DEFAULT_INTERPOLATION_CONFIG; }
	        var split = this.splitInterpolation(input, location, interpolationConfig);
	        if (split == null)
	            return null;
	        var expressions = [];
	        for (var i = 0; i < split.expressions.length; ++i) {
	            var expressionText = split.expressions[i];
	            var sourceToLex = this._stripComments(expressionText);
	            var tokens = this._lexer.tokenize(sourceToLex);
	            var ast = new _ParseAST(input, location, absoluteOffset, tokens, sourceToLex.length, false, this.errors, split.offsets[i] + (expressionText.length - sourceToLex.length))
	                .parseChain();
	            expressions.push(ast);
	        }
	        var span = new ParseSpan(0, input == null ? 0 : input.length);
	        return new ASTWithSource(new Interpolation(span, span.toAbsolute(absoluteOffset), split.strings, expressions), input, location, absoluteOffset, this.errors);
	    };
	    Parser.prototype.splitInterpolation = function (input, location, interpolationConfig) {
	        if (interpolationConfig === void 0) { interpolationConfig = DEFAULT_INTERPOLATION_CONFIG; }
	        var regexp = _getInterpolateRegExp(interpolationConfig);
	        var parts = input.split(regexp);
	        if (parts.length <= 1) {
	            return null;
	        }
	        var strings = [];
	        var expressions = [];
	        var offsets = [];
	        var offset = 0;
	        for (var i = 0; i < parts.length; i++) {
	            var part = parts[i];
	            if (i % 2 === 0) {
	                // fixed string
	                strings.push(part);
	                offset += part.length;
	            }
	            else if (part.trim().length > 0) {
	                offset += interpolationConfig.start.length;
	                expressions.push(part);
	                offsets.push(offset);
	                offset += part.length + interpolationConfig.end.length;
	            }
	            else {
	                this._reportError('Blank expressions are not allowed in interpolated strings', input, "at column " + this._findInterpolationErrorColumn(parts, i, interpolationConfig) + " in", location);
	                expressions.push('$implicit');
	                offsets.push(offset);
	            }
	        }
	        return new SplitInterpolation(strings, expressions, offsets);
	    };
	    Parser.prototype.wrapLiteralPrimitive = function (input, location, absoluteOffset) {
	        var span = new ParseSpan(0, input == null ? 0 : input.length);
	        return new ASTWithSource(new LiteralPrimitive(span, span.toAbsolute(absoluteOffset), input), input, location, absoluteOffset, this.errors);
	    };
	    Parser.prototype._stripComments = function (input) {
	        var i = this._commentStart(input);
	        return i != null ? input.substring(0, i).trim() : input;
	    };
	    Parser.prototype._commentStart = function (input) {
	        var outerQuote = null;
	        for (var i = 0; i < input.length - 1; i++) {
	            var char = input.charCodeAt(i);
	            var nextChar = input.charCodeAt(i + 1);
	            if (char === $SLASH && nextChar == $SLASH && outerQuote == null)
	                return i;
	            if (outerQuote === char) {
	                outerQuote = null;
	            }
	            else if (outerQuote == null && isQuote(char)) {
	                outerQuote = char;
	            }
	        }
	        return null;
	    };
	    Parser.prototype._checkNoInterpolation = function (input, location, interpolationConfig) {
	        var regexp = _getInterpolateRegExp(interpolationConfig);
	        var parts = input.split(regexp);
	        if (parts.length > 1) {
	            this._reportError("Got interpolation (" + interpolationConfig.start + interpolationConfig.end + ") where expression was expected", input, "at column " + this._findInterpolationErrorColumn(parts, 1, interpolationConfig) + " in", location);
	        }
	    };
	    Parser.prototype._findInterpolationErrorColumn = function (parts, partInErrIdx, interpolationConfig) {
	        var errLocation = '';
	        for (var j = 0; j < partInErrIdx; j++) {
	            errLocation += j % 2 === 0 ?
	                parts[j] :
	                "" + interpolationConfig.start + parts[j] + interpolationConfig.end;
	        }
	        return errLocation.length;
	    };
	    return Parser;
	}());
	var IvyParser = /** @class */ (function (_super) {
	    __extends(IvyParser, _super);
	    function IvyParser() {
	        var _this = _super !== null && _super.apply(this, arguments) || this;
	        _this.simpleExpressionChecker = IvySimpleExpressionChecker; //
	        return _this;
	    }
	    return IvyParser;
	}(Parser$1));
	var _ParseAST = /** @class */ (function () {
	    function _ParseAST(input, location, absoluteOffset, tokens, inputLength, parseAction, errors, offset) {
	        this.input = input;
	        this.location = location;
	        this.absoluteOffset = absoluteOffset;
	        this.tokens = tokens;
	        this.inputLength = inputLength;
	        this.parseAction = parseAction;
	        this.errors = errors;
	        this.offset = offset;
	        this.rparensExpected = 0;
	        this.rbracketsExpected = 0;
	        this.rbracesExpected = 0;
	        // Cache of expression start and input indeces to the absolute source span they map to, used to
	        // prevent creating superfluous source spans in `sourceSpan`.
	        // A serial of the expression start and input index is used for mapping because both are stateful
	        // and may change for subsequent expressions visited by the parser.
	        this.sourceSpanCache = new Map();
	        this.index = 0;
	    }
	    _ParseAST.prototype.peek = function (offset) {
	        var i = this.index + offset;
	        return i < this.tokens.length ? this.tokens[i] : EOF;
	    };
	    Object.defineProperty(_ParseAST.prototype, "next", {
	        get: function () {
	            return this.peek(0);
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(_ParseAST.prototype, "inputIndex", {
	        get: function () {
	            return (this.index < this.tokens.length) ? this.next.index + this.offset :
	                this.inputLength + this.offset;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(_ParseAST.prototype, "currentAbsoluteOffset", {
	        /**
	         * Returns the absolute offset of the start of the current token.
	         */
	        get: function () {
	            return this.absoluteOffset + this.inputIndex;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    _ParseAST.prototype.span = function (start) {
	        // `end` is either the
	        //   - end index of the current token
	        //   - start of the first token (this can happen e.g. when creating an implicit receiver)
	        var curToken = this.peek(-1);
	        var end = this.index > 0 ? curToken.end + this.offset : this.inputIndex;
	        return new ParseSpan(start, end);
	    };
	    _ParseAST.prototype.sourceSpan = function (start) {
	        var serial = start + "@" + this.inputIndex;
	        if (!this.sourceSpanCache.has(serial)) {
	            this.sourceSpanCache.set(serial, this.span(start).toAbsolute(this.absoluteOffset));
	        }
	        return this.sourceSpanCache.get(serial);
	    };
	    _ParseAST.prototype.advance = function () {
	        this.index++;
	    };
	    _ParseAST.prototype.consumeOptionalCharacter = function (code) {
	        if (this.next.isCharacter(code)) {
	            this.advance();
	            return true;
	        }
	        else {
	            return false;
	        }
	    };
	    _ParseAST.prototype.peekKeywordLet = function () {
	        return this.next.isKeywordLet();
	    };
	    _ParseAST.prototype.peekKeywordAs = function () {
	        return this.next.isKeywordAs();
	    };
	    _ParseAST.prototype.expectCharacter = function (code) {
	        if (this.consumeOptionalCharacter(code))
	            return;
	        this.error("Missing expected " + String.fromCharCode(code));
	    };
	    _ParseAST.prototype.consumeOptionalOperator = function (op) {
	        if (this.next.isOperator(op)) {
	            this.advance();
	            return true;
	        }
	        else {
	            return false;
	        }
	    };
	    _ParseAST.prototype.expectOperator = function (operator) {
	        if (this.consumeOptionalOperator(operator))
	            return;
	        this.error("Missing expected operator " + operator);
	    };
	    _ParseAST.prototype.expectIdentifierOrKeyword = function () {
	        var n = this.next;
	        if (!n.isIdentifier() && !n.isKeyword()) {
	            this.error("Unexpected token " + n + ", expected identifier or keyword");
	            return '';
	        }
	        this.advance();
	        return n.toString();
	    };
	    _ParseAST.prototype.expectIdentifierOrKeywordOrString = function () {
	        var n = this.next;
	        if (!n.isIdentifier() && !n.isKeyword() && !n.isString()) {
	            this.error("Unexpected token " + n + ", expected identifier, keyword, or string");
	            return '';
	        }
	        this.advance();
	        return n.toString();
	    };
	    _ParseAST.prototype.parseChain = function () {
	        var exprs = [];
	        var start = this.inputIndex;
	        while (this.index < this.tokens.length) {
	            var expr = this.parsePipe();
	            exprs.push(expr);
	            if (this.consumeOptionalCharacter($SEMICOLON)) {
	                if (!this.parseAction) {
	                    this.error('Binding expression cannot contain chained expression');
	                }
	                while (this.consumeOptionalCharacter($SEMICOLON)) {
	                } // read all semicolons
	            }
	            else if (this.index < this.tokens.length) {
	                this.error("Unexpected token '" + this.next + "'");
	            }
	        }
	        if (exprs.length == 0)
	            return new EmptyExpr(this.span(start), this.sourceSpan(start));
	        if (exprs.length == 1)
	            return exprs[0];
	        return new Chain(this.span(start), this.sourceSpan(start), exprs);
	    };
	    _ParseAST.prototype.parsePipe = function () {
	        var result = this.parseExpression();
	        if (this.consumeOptionalOperator('|')) {
	            if (this.parseAction) {
	                this.error('Cannot have a pipe in an action expression');
	            }
	            do {
	                var nameStart = this.inputIndex;
	                var name_1 = this.expectIdentifierOrKeyword();
	                var nameSpan = this.sourceSpan(nameStart);
	                var args = [];
	                while (this.consumeOptionalCharacter($COLON)) {
	                    args.push(this.parseExpression());
	                }
	                var start = result.span.start;
	                result =
	                    new BindingPipe(this.span(start), this.sourceSpan(start), result, name_1, args, nameSpan);
	            } while (this.consumeOptionalOperator('|'));
	        }
	        return result;
	    };
	    _ParseAST.prototype.parseExpression = function () {
	        return this.parseConditional();
	    };
	    _ParseAST.prototype.parseConditional = function () {
	        var start = this.inputIndex;
	        var result = this.parseLogicalOr();
	        if (this.consumeOptionalOperator('?')) {
	            var yes = this.parsePipe();
	            var no = void 0;
	            if (!this.consumeOptionalCharacter($COLON)) {
	                var end = this.inputIndex;
	                var expression = this.input.substring(start, end);
	                this.error("Conditional expression " + expression + " requires all 3 expressions");
	                no = new EmptyExpr(this.span(start), this.sourceSpan(start));
	            }
	            else {
	                no = this.parsePipe();
	            }
	            return new Conditional(this.span(start), this.sourceSpan(start), result, yes, no);
	        }
	        else {
	            return result;
	        }
	    };
	    _ParseAST.prototype.parseLogicalOr = function () {
	        // '||'
	        var result = this.parseLogicalAnd();
	        while (this.consumeOptionalOperator('||')) {
	            var right = this.parseLogicalAnd();
	            var start = result.span.start;
	            result = new Binary(this.span(start), this.sourceSpan(start), '||', result, right);
	        }
	        return result;
	    };
	    _ParseAST.prototype.parseLogicalAnd = function () {
	        // '&&'
	        var result = this.parseEquality();
	        while (this.consumeOptionalOperator('&&')) {
	            var right = this.parseEquality();
	            var start = result.span.start;
	            result = new Binary(this.span(start), this.sourceSpan(start), '&&', result, right);
	        }
	        return result;
	    };
	    _ParseAST.prototype.parseEquality = function () {
	        // '==','!=','===','!=='
	        var result = this.parseRelational();
	        while (this.next.type == TokenType$1.Operator) {
	            var operator = this.next.strValue;
	            switch (operator) {
	                case '==':
	                case '===':
	                case '!=':
	                case '!==':
	                    this.advance();
	                    var right = this.parseRelational();
	                    var start = result.span.start;
	                    result = new Binary(this.span(start), this.sourceSpan(start), operator, result, right);
	                    continue;
	            }
	            break;
	        }
	        return result;
	    };
	    _ParseAST.prototype.parseRelational = function () {
	        // '<', '>', '<=', '>='
	        var result = this.parseAdditive();
	        while (this.next.type == TokenType$1.Operator) {
	            var operator = this.next.strValue;
	            switch (operator) {
	                case '<':
	                case '>':
	                case '<=':
	                case '>=':
	                    this.advance();
	                    var right = this.parseAdditive();
	                    var start = result.span.start;
	                    result = new Binary(this.span(start), this.sourceSpan(start), operator, result, right);
	                    continue;
	            }
	            break;
	        }
	        return result;
	    };
	    _ParseAST.prototype.parseAdditive = function () {
	        // '+', '-'
	        var result = this.parseMultiplicative();
	        while (this.next.type == TokenType$1.Operator) {
	            var operator = this.next.strValue;
	            switch (operator) {
	                case '+':
	                case '-':
	                    this.advance();
	                    var right = this.parseMultiplicative();
	                    var start = result.span.start;
	                    result = new Binary(this.span(start), this.sourceSpan(start), operator, result, right);
	                    continue;
	            }
	            break;
	        }
	        return result;
	    };
	    _ParseAST.prototype.parseMultiplicative = function () {
	        // '*', '%', '/'
	        var result = this.parsePrefix();
	        while (this.next.type == TokenType$1.Operator) {
	            var operator = this.next.strValue;
	            switch (operator) {
	                case '*':
	                case '%':
	                case '/':
	                    this.advance();
	                    var right = this.parsePrefix();
	                    var start = result.span.start;
	                    result = new Binary(this.span(start), this.sourceSpan(start), operator, result, right);
	                    continue;
	            }
	            break;
	        }
	        return result;
	    };
	    _ParseAST.prototype.parsePrefix = function () {
	        if (this.next.type == TokenType$1.Operator) {
	            var start = this.inputIndex;
	            var operator = this.next.strValue;
	            var literalSpan = new ParseSpan(start, start);
	            var literalSourceSpan = literalSpan.toAbsolute(this.absoluteOffset);
	            var result = void 0;
	            switch (operator) {
	                case '+':
	                    this.advance();
	                    result = this.parsePrefix();
	                    return new Binary(this.span(start), this.sourceSpan(start), '-', result, new LiteralPrimitive(literalSpan, literalSourceSpan, 0));
	                case '-':
	                    this.advance();
	                    result = this.parsePrefix();
	                    return new Binary(this.span(start), this.sourceSpan(start), operator, new LiteralPrimitive(literalSpan, literalSourceSpan, 0), result);
	                case '!':
	                    this.advance();
	                    result = this.parsePrefix();
	                    return new PrefixNot(this.span(start), this.sourceSpan(start), result);
	            }
	        }
	        return this.parseCallChain();
	    };
	    _ParseAST.prototype.parseCallChain = function () {
	        var result = this.parsePrimary();
	        var resultStart = result.span.start;
	        while (true) {
	            if (this.consumeOptionalCharacter($PERIOD)) {
	                result = this.parseAccessMemberOrMethodCall(result, false);
	            }
	            else if (this.consumeOptionalOperator('?.')) {
	                result = this.parseAccessMemberOrMethodCall(result, true);
	            }
	            else if (this.consumeOptionalCharacter($LBRACKET)) {
	                this.rbracketsExpected++;
	                var key = this.parsePipe();
	                this.rbracketsExpected--;
	                this.expectCharacter($RBRACKET);
	                if (this.consumeOptionalOperator('=')) {
	                    var value = this.parseConditional();
	                    result = new KeyedWrite(this.span(resultStart), this.sourceSpan(resultStart), result, key, value);
	                }
	                else {
	                    result = new KeyedRead(this.span(resultStart), this.sourceSpan(resultStart), result, key);
	                }
	            }
	            else if (this.consumeOptionalCharacter($LPAREN)) {
	                this.rparensExpected++;
	                var args = this.parseCallArguments();
	                this.rparensExpected--;
	                this.expectCharacter($RPAREN);
	                result =
	                    new FunctionCall(this.span(resultStart), this.sourceSpan(resultStart), result, args);
	            }
	            else if (this.consumeOptionalOperator('!')) {
	                result = new NonNullAssert(this.span(resultStart), this.sourceSpan(resultStart), result);
	            }
	            else {
	                return result;
	            }
	        }
	    };
	    _ParseAST.prototype.parsePrimary = function () {
	        var start = this.inputIndex;
	        if (this.consumeOptionalCharacter($LPAREN)) {
	            this.rparensExpected++;
	            var result = this.parsePipe();
	            this.rparensExpected--;
	            this.expectCharacter($RPAREN);
	            return result;
	        }
	        else if (this.next.isKeywordNull()) {
	            this.advance();
	            return new LiteralPrimitive(this.span(start), this.sourceSpan(start), null);
	        }
	        else if (this.next.isKeywordUndefined()) {
	            this.advance();
	            return new LiteralPrimitive(this.span(start), this.sourceSpan(start), void 0);
	        }
	        else if (this.next.isKeywordTrue()) {
	            this.advance();
	            return new LiteralPrimitive(this.span(start), this.sourceSpan(start), true);
	        }
	        else if (this.next.isKeywordFalse()) {
	            this.advance();
	            return new LiteralPrimitive(this.span(start), this.sourceSpan(start), false);
	        }
	        else if (this.next.isKeywordThis()) {
	            this.advance();
	            return new ImplicitReceiver(this.span(start), this.sourceSpan(start));
	        }
	        else if (this.consumeOptionalCharacter($LBRACKET)) {
	            this.rbracketsExpected++;
	            var elements = this.parseExpressionList($RBRACKET);
	            this.rbracketsExpected--;
	            this.expectCharacter($RBRACKET);
	            return new LiteralArray(this.span(start), this.sourceSpan(start), elements);
	        }
	        else if (this.next.isCharacter($LBRACE)) {
	            return this.parseLiteralMap();
	        }
	        else if (this.next.isIdentifier()) {
	            return this.parseAccessMemberOrMethodCall(new ImplicitReceiver(this.span(start), this.sourceSpan(start)), false);
	        }
	        else if (this.next.isNumber()) {
	            var value = this.next.toNumber();
	            this.advance();
	            return new LiteralPrimitive(this.span(start), this.sourceSpan(start), value);
	        }
	        else if (this.next.isString()) {
	            var literalValue = this.next.toString();
	            this.advance();
	            return new LiteralPrimitive(this.span(start), this.sourceSpan(start), literalValue);
	        }
	        else if (this.index >= this.tokens.length) {
	            this.error("Unexpected end of expression: " + this.input);
	            return new EmptyExpr(this.span(start), this.sourceSpan(start));
	        }
	        else {
	            this.error("Unexpected token " + this.next);
	            return new EmptyExpr(this.span(start), this.sourceSpan(start));
	        }
	    };
	    _ParseAST.prototype.parseExpressionList = function (terminator) {
	        var result = [];
	        if (!this.next.isCharacter(terminator)) {
	            do {
	                result.push(this.parsePipe());
	            } while (this.consumeOptionalCharacter($COMMA));
	        }
	        return result;
	    };
	    _ParseAST.prototype.parseLiteralMap = function () {
	        var keys = [];
	        var values = [];
	        var start = this.inputIndex;
	        this.expectCharacter($LBRACE);
	        if (!this.consumeOptionalCharacter($RBRACE)) {
	            this.rbracesExpected++;
	            do {
	                var quoted = this.next.isString();
	                var key = this.expectIdentifierOrKeywordOrString();
	                keys.push({ key: key, quoted: quoted });
	                this.expectCharacter($COLON);
	                values.push(this.parsePipe());
	            } while (this.consumeOptionalCharacter($COMMA));
	            this.rbracesExpected--;
	            this.expectCharacter($RBRACE);
	        }
	        return new LiteralMap(this.span(start), this.sourceSpan(start), keys, values);
	    };
	    _ParseAST.prototype.parseAccessMemberOrMethodCall = function (receiver, isSafe) {
	        if (isSafe === void 0) { isSafe = false; }
	        var start = receiver.span.start;
	        var id = this.expectIdentifierOrKeyword();
	        if (this.consumeOptionalCharacter($LPAREN)) {
	            this.rparensExpected++;
	            var args = this.parseCallArguments();
	            this.expectCharacter($RPAREN);
	            this.rparensExpected--;
	            var span = this.span(start);
	            var sourceSpan = this.sourceSpan(start);
	            return isSafe ? new SafeMethodCall(span, sourceSpan, receiver, id, args) :
	                new MethodCall(span, sourceSpan, receiver, id, args);
	        }
	        else {
	            if (isSafe) {
	                if (this.consumeOptionalOperator('=')) {
	                    this.error('The \'?.\' operator cannot be used in the assignment');
	                    return new EmptyExpr(this.span(start), this.sourceSpan(start));
	                }
	                else {
	                    return new SafePropertyRead(this.span(start), this.sourceSpan(start), receiver, id);
	                }
	            }
	            else {
	                if (this.consumeOptionalOperator('=')) {
	                    if (!this.parseAction) {
	                        this.error('Bindings cannot contain assignments');
	                        return new EmptyExpr(this.span(start), this.sourceSpan(start));
	                    }
	                    var value = this.parseConditional();
	                    return new PropertyWrite(this.span(start), this.sourceSpan(start), receiver, id, value);
	                }
	                else {
	                    return new PropertyRead(this.span(start), this.sourceSpan(start), receiver, id);
	                }
	            }
	        }
	    };
	    _ParseAST.prototype.parseCallArguments = function () {
	        if (this.next.isCharacter($RPAREN))
	            return [];
	        var positionals = [];
	        do {
	            positionals.push(this.parsePipe());
	        } while (this.consumeOptionalCharacter($COMMA));
	        return positionals;
	    };
	    /**
	     * Parses an identifier, a keyword, a string with an optional `-` in between,
	     * and returns the string along with its absolute source span.
	     */
	    _ParseAST.prototype.expectTemplateBindingKey = function () {
	        var result = '';
	        var operatorFound = false;
	        var start = this.currentAbsoluteOffset;
	        do {
	            result += this.expectIdentifierOrKeywordOrString();
	            operatorFound = this.consumeOptionalOperator('-');
	            if (operatorFound) {
	                result += '-';
	            }
	        } while (operatorFound);
	        return {
	            source: result,
	            span: new AbsoluteSourceSpan(start, start + result.length),
	        };
	    };
	    /**
	     * Parse microsyntax template expression and return a list of bindings or
	     * parsing errors in case the given expression is invalid.
	     *
	     * For example,
	     * ```
	     *   <div *ngFor="let item of items; index as i; trackBy: func">
	     * ```
	     * contains five bindings:
	     * 1. ngFor -> null
	     * 2. item -> NgForOfContext.$implicit
	     * 3. ngForOf -> items
	     * 4. i -> NgForOfContext.index
	     * 5. ngForTrackBy -> func
	     *
	     * For a full description of the microsyntax grammar, see
	     * https://gist.github.com/mhevery/d3530294cff2e4a1b3fe15ff75d08855
	     *
	     * @param templateKey name of the microsyntax directive, like ngIf, ngFor,
	     * without the *, along with its absolute span.
	     */
	    _ParseAST.prototype.parseTemplateBindings = function (templateKey) {
	        var bindings = [];
	        // The first binding is for the template key itself
	        // In *ngFor="let item of items", key = "ngFor", value = null
	        // In *ngIf="cond | pipe", key = "ngIf", value = "cond | pipe"
	        bindings.push.apply(bindings, __spread(this.parseDirectiveKeywordBindings(templateKey)));
	        while (this.index < this.tokens.length) {
	            // If it starts with 'let', then this must be variable declaration
	            var letBinding = this.parseLetBinding();
	            if (letBinding) {
	                bindings.push(letBinding);
	            }
	            else {
	                // Two possible cases here, either `value "as" key` or
	                // "directive-keyword expression". We don't know which case, but both
	                // "value" and "directive-keyword" are template binding key, so consume
	                // the key first.
	                var key = this.expectTemplateBindingKey();
	                // Peek at the next token, if it is "as" then this must be variable
	                // declaration.
	                var binding = this.parseAsBinding(key);
	                if (binding) {
	                    bindings.push(binding);
	                }
	                else {
	                    // Otherwise the key must be a directive keyword, like "of". Transform
	                    // the key to actual key. Eg. of -> ngForOf, trackBy -> ngForTrackBy
	                    key.source = templateKey.source + key.source[0].toUpperCase() + key.source.substring(1);
	                    bindings.push.apply(bindings, __spread(this.parseDirectiveKeywordBindings(key)));
	                }
	            }
	            this.consumeStatementTerminator();
	        }
	        return new TemplateBindingParseResult(bindings, [] /* warnings */, this.errors);
	    };
	    /**
	     * Parse a directive keyword, followed by a mandatory expression.
	     * For example, "of items", "trackBy: func".
	     * The bindings are: ngForOf -> items, ngForTrackBy -> func
	     * There could be an optional "as" binding that follows the expression.
	     * For example,
	     * ```
	     *   *ngFor="let item of items | slice:0:1 as collection".
	     *                    ^^ ^^^^^^^^^^^^^^^^^ ^^^^^^^^^^^^^
	     *               keyword    bound target   optional 'as' binding
	     * ```
	     *
	     * @param key binding key, for example, ngFor, ngIf, ngForOf, along with its
	     * absolute span.
	     */
	    _ParseAST.prototype.parseDirectiveKeywordBindings = function (key) {
	        var bindings = [];
	        this.consumeOptionalCharacter($COLON); // trackBy: trackByFunction
	        var value = this.getDirectiveBoundTarget();
	        var spanEnd = this.currentAbsoluteOffset;
	        // The binding could optionally be followed by "as". For example,
	        // *ngIf="cond | pipe as x". In this case, the key in the "as" binding
	        // is "x" and the value is the template key itself ("ngIf"). Note that the
	        // 'key' in the current context now becomes the "value" in the next binding.
	        var asBinding = this.parseAsBinding(key);
	        if (!asBinding) {
	            this.consumeStatementTerminator();
	            spanEnd = this.currentAbsoluteOffset;
	        }
	        var sourceSpan = new AbsoluteSourceSpan(key.span.start, spanEnd);
	        bindings.push(new ExpressionBinding(sourceSpan, key, value));
	        if (asBinding) {
	            bindings.push(asBinding);
	        }
	        return bindings;
	    };
	    /**
	     * Return the expression AST for the bound target of a directive keyword
	     * binding. For example,
	     * ```
	     *   *ngIf="condition | pipe"
	     *          ^^^^^^^^^^^^^^^^ bound target for "ngIf"
	     *   *ngFor="let item of items"
	     *                       ^^^^^ bound target for "ngForOf"
	     * ```
	     */
	    _ParseAST.prototype.getDirectiveBoundTarget = function () {
	        if (this.next === EOF || this.peekKeywordAs() || this.peekKeywordLet()) {
	            return null;
	        }
	        var ast = this.parsePipe(); // example: "condition | async"
	        var _a = ast.span, start = _a.start, end = _a.end;
	        var value = this.input.substring(start, end);
	        return new ASTWithSource(ast, value, this.location, this.absoluteOffset + start, this.errors);
	    };
	    /**
	     * Return the binding for a variable declared using `as`. Note that the order
	     * of the key-value pair in this declaration is reversed. For example,
	     * ```
	     *   *ngFor="let item of items; index as i"
	     *                              ^^^^^    ^
	     *                              value    key
	     * ```
	     *
	     * @param value name of the value in the declaration, "ngIf" in the example
	     * above, along with its absolute span.
	     */
	    _ParseAST.prototype.parseAsBinding = function (value) {
	        if (!this.peekKeywordAs()) {
	            return null;
	        }
	        this.advance(); // consume the 'as' keyword
	        var key = this.expectTemplateBindingKey();
	        this.consumeStatementTerminator();
	        var sourceSpan = new AbsoluteSourceSpan(value.span.start, this.currentAbsoluteOffset);
	        return new VariableBinding(sourceSpan, key, value);
	    };
	    /**
	     * Return the binding for a variable declared using `let`. For example,
	     * ```
	     *   *ngFor="let item of items; let i=index;"
	     *           ^^^^^^^^           ^^^^^^^^^^^
	     * ```
	     * In the first binding, `item` is bound to `NgForOfContext.$implicit`.
	     * In the second binding, `i` is bound to `NgForOfContext.index`.
	     */
	    _ParseAST.prototype.parseLetBinding = function () {
	        if (!this.peekKeywordLet()) {
	            return null;
	        }
	        var spanStart = this.currentAbsoluteOffset;
	        this.advance(); // consume the 'let' keyword
	        var key = this.expectTemplateBindingKey();
	        var value = null;
	        if (this.consumeOptionalOperator('=')) {
	            value = this.expectTemplateBindingKey();
	        }
	        this.consumeStatementTerminator();
	        var sourceSpan = new AbsoluteSourceSpan(spanStart, this.currentAbsoluteOffset);
	        return new VariableBinding(sourceSpan, key, value);
	    };
	    /**
	     * Consume the optional statement terminator: semicolon or comma.
	     */
	    _ParseAST.prototype.consumeStatementTerminator = function () {
	        this.consumeOptionalCharacter($SEMICOLON) || this.consumeOptionalCharacter($COMMA);
	    };
	    _ParseAST.prototype.error = function (message, index) {
	        if (index === void 0) { index = null; }
	        this.errors.push(new ParserError(message, this.input, this.locationText(index), this.location));
	        this.skip();
	    };
	    _ParseAST.prototype.locationText = function (index) {
	        if (index === void 0) { index = null; }
	        if (index == null)
	            index = this.index;
	        return (index < this.tokens.length) ? "at column " + (this.tokens[index].index + 1) + " in" :
	            "at the end of the expression";
	    };
	    // Error recovery should skip tokens until it encounters a recovery point. skip() treats
	    // the end of input and a ';' as unconditionally a recovery point. It also treats ')',
	    // '}' and ']' as conditional recovery points if one of calling productions is expecting
	    // one of these symbols. This allows skip() to recover from errors such as '(a.) + 1' allowing
	    // more of the AST to be retained (it doesn't skip any tokens as the ')' is retained because
	    // of the '(' begins an '(' <expr> ')' production). The recovery points of grouping symbols
	    // must be conditional as they must be skipped if none of the calling productions are not
	    // expecting the closing token else we will never make progress in the case of an
	    // extraneous group closing symbol (such as a stray ')'). This is not the case for ';' because
	    // parseChain() is always the root production and it expects a ';'.
	    // If a production expects one of these token it increments the corresponding nesting count,
	    // and then decrements it just prior to checking if the token is in the input.
	    _ParseAST.prototype.skip = function () {
	        var n = this.next;
	        while (this.index < this.tokens.length && !n.isCharacter($SEMICOLON) &&
	            (this.rparensExpected <= 0 || !n.isCharacter($RPAREN)) &&
	            (this.rbracesExpected <= 0 || !n.isCharacter($RBRACE)) &&
	            (this.rbracketsExpected <= 0 || !n.isCharacter($RBRACKET))) {
	            if (this.next.isError()) {
	                this.errors.push(new ParserError(this.next.toString(), this.input, this.locationText(), this.location));
	            }
	            this.advance();
	            n = this.next;
	        }
	    };
	    return _ParseAST;
	}());
	var SimpleExpressionChecker = /** @class */ (function () {
	    function SimpleExpressionChecker() {
	        this.errors = [];
	    }
	    SimpleExpressionChecker.prototype.visitImplicitReceiver = function (ast, context) { };
	    SimpleExpressionChecker.prototype.visitInterpolation = function (ast, context) { };
	    SimpleExpressionChecker.prototype.visitLiteralPrimitive = function (ast, context) { };
	    SimpleExpressionChecker.prototype.visitPropertyRead = function (ast, context) { };
	    SimpleExpressionChecker.prototype.visitPropertyWrite = function (ast, context) { };
	    SimpleExpressionChecker.prototype.visitSafePropertyRead = function (ast, context) { };
	    SimpleExpressionChecker.prototype.visitMethodCall = function (ast, context) { };
	    SimpleExpressionChecker.prototype.visitSafeMethodCall = function (ast, context) { };
	    SimpleExpressionChecker.prototype.visitFunctionCall = function (ast, context) { };
	    SimpleExpressionChecker.prototype.visitLiteralArray = function (ast, context) {
	        this.visitAll(ast.expressions);
	    };
	    SimpleExpressionChecker.prototype.visitLiteralMap = function (ast, context) {
	        this.visitAll(ast.values);
	    };
	    SimpleExpressionChecker.prototype.visitBinary = function (ast, context) { };
	    SimpleExpressionChecker.prototype.visitPrefixNot = function (ast, context) { };
	    SimpleExpressionChecker.prototype.visitNonNullAssert = function (ast, context) { };
	    SimpleExpressionChecker.prototype.visitConditional = function (ast, context) { };
	    SimpleExpressionChecker.prototype.visitPipe = function (ast, context) {
	        this.errors.push('pipes');
	    };
	    SimpleExpressionChecker.prototype.visitKeyedRead = function (ast, context) { };
	    SimpleExpressionChecker.prototype.visitKeyedWrite = function (ast, context) { };
	    SimpleExpressionChecker.prototype.visitAll = function (asts) {
	        var _this = this;
	        return asts.map(function (node) { return node.visit(_this); });
	    };
	    SimpleExpressionChecker.prototype.visitChain = function (ast, context) { };
	    SimpleExpressionChecker.prototype.visitQuote = function (ast, context) { };
	    return SimpleExpressionChecker;
	}());
	/**
	 * This class extends SimpleExpressionChecker used in View Engine and performs more strict checks to
	 * make sure host bindings do not contain pipes. In View Engine, having pipes in host bindings is
	 * not supported as well, but in some cases (like `!(value | async)`) the error is not triggered at
	 * compile time. In order to preserve View Engine behavior, more strict checks are introduced for
	 * Ivy mode only.
	 */
	var IvySimpleExpressionChecker = /** @class */ (function (_super) {
	    __extends(IvySimpleExpressionChecker, _super);
	    function IvySimpleExpressionChecker() {
	        return _super !== null && _super.apply(this, arguments) || this;
	    }
	    IvySimpleExpressionChecker.prototype.visitBinary = function (ast, context) {
	        ast.left.visit(this);
	        ast.right.visit(this);
	    };
	    IvySimpleExpressionChecker.prototype.visitPrefixNot = function (ast, context) {
	        ast.expression.visit(this);
	    };
	    return IvySimpleExpressionChecker;
	}(SimpleExpressionChecker));

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	// =================================================================================================
	// =================================================================================================
	// =========== S T O P   -  S T O P   -  S T O P   -  S T O P   -  S T O P   -  S T O P  ===========
	// =================================================================================================
	// =================================================================================================
	//
	//        DO NOT EDIT THIS LIST OF SECURITY SENSITIVE PROPERTIES WITHOUT A SECURITY REVIEW!
	//                               Reach out to mprobst for details.
	//
	// =================================================================================================
	/** Map from tagName|propertyName SecurityContext. Properties applying to all tags use '*'. */
	var _SECURITY_SCHEMA;
	function SECURITY_SCHEMA() {
	    if (!_SECURITY_SCHEMA) {
	        _SECURITY_SCHEMA = {};
	        // Case is insignificant below, all element and attribute names are lower-cased for lookup.
	        registerContext(SecurityContext.HTML, [
	            'iframe|srcdoc',
	            '*|innerHTML',
	            '*|outerHTML',
	        ]);
	        registerContext(SecurityContext.STYLE, ['*|style']);
	        // NB: no SCRIPT contexts here, they are never allowed due to the parser stripping them.
	        registerContext(SecurityContext.URL, [
	            '*|formAction', 'area|href', 'area|ping', 'audio|src', 'a|href',
	            'a|ping', 'blockquote|cite', 'body|background', 'del|cite', 'form|action',
	            'img|src', 'img|srcset', 'input|src', 'ins|cite', 'q|cite',
	            'source|src', 'source|srcset', 'track|src', 'video|poster', 'video|src',
	        ]);
	        registerContext(SecurityContext.RESOURCE_URL, [
	            'applet|code',
	            'applet|codebase',
	            'base|href',
	            'embed|src',
	            'frame|src',
	            'head|profile',
	            'html|manifest',
	            'iframe|src',
	            'link|href',
	            'media|src',
	            'object|codebase',
	            'object|data',
	            'script|src',
	        ]);
	    }
	    return _SECURITY_SCHEMA;
	}
	function registerContext(ctx, specs) {
	    var e_1, _a;
	    try {
	        for (var specs_1 = __values(specs), specs_1_1 = specs_1.next(); !specs_1_1.done; specs_1_1 = specs_1.next()) {
	            var spec = specs_1_1.value;
	            _SECURITY_SCHEMA[spec.toLowerCase()] = ctx;
	        }
	    }
	    catch (e_1_1) { e_1 = { error: e_1_1 }; }
	    finally {
	        try {
	            if (specs_1_1 && !specs_1_1.done && (_a = specs_1.return)) _a.call(specs_1);
	        }
	        finally { if (e_1) throw e_1.error; }
	    }
	}

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	var ElementSchemaRegistry = /** @class */ (function () {
	    function ElementSchemaRegistry() {
	    }
	    return ElementSchemaRegistry;
	}());

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	var BOOLEAN = 'boolean';
	var NUMBER = 'number';
	var STRING = 'string';
	var OBJECT = 'object';
	/**
	 * This array represents the DOM schema. It encodes inheritance, properties, and events.
	 *
	 * ## Overview
	 *
	 * Each line represents one kind of element. The `element_inheritance` and properties are joined
	 * using `element_inheritance|properties` syntax.
	 *
	 * ## Element Inheritance
	 *
	 * The `element_inheritance` can be further subdivided as `element1,element2,...^parentElement`.
	 * Here the individual elements are separated by `,` (commas). Every element in the list
	 * has identical properties.
	 *
	 * An `element` may inherit additional properties from `parentElement` If no `^parentElement` is
	 * specified then `""` (blank) element is assumed.
	 *
	 * NOTE: The blank element inherits from root `[Element]` element, the super element of all
	 * elements.
	 *
	 * NOTE an element prefix such as `:svg:` has no special meaning to the schema.
	 *
	 * ## Properties
	 *
	 * Each element has a set of properties separated by `,` (commas). Each property can be prefixed
	 * by a special character designating its type:
	 *
	 * - (no prefix): property is a string.
	 * - `*`: property represents an event.
	 * - `!`: property is a boolean.
	 * - `#`: property is a number.
	 * - `%`: property is an object.
	 *
	 * ## Query
	 *
	 * The class creates an internal squas representation which allows to easily answer the query of
	 * if a given property exist on a given element.
	 *
	 * NOTE: We don't yet support querying for types or events.
	 * NOTE: This schema is auto extracted from `schema_extractor.ts` located in the test folder,
	 *       see dom_element_schema_registry_spec.ts
	 */
	// =================================================================================================
	// =================================================================================================
	// =========== S T O P   -  S T O P   -  S T O P   -  S T O P   -  S T O P   -  S T O P  ===========
	// =================================================================================================
	// =================================================================================================
	//
	//                       DO NOT EDIT THIS DOM SCHEMA WITHOUT A SECURITY REVIEW!
	//
	// Newly added properties must be security reviewed and assigned an appropriate SecurityContext in
	// dom_security_schema.ts. Reach out to mprobst & rjamet for details.
	//
	// =================================================================================================
	var SCHEMA = [
	    '[Element]|textContent,%classList,className,id,innerHTML,*beforecopy,*beforecut,*beforepaste,*copy,*cut,*paste,*search,*selectstart,*webkitfullscreenchange,*webkitfullscreenerror,*wheel,outerHTML,#scrollLeft,#scrollTop,slot' +
	        /* added manually to avoid breaking changes */
	        ',*message,*mozfullscreenchange,*mozfullscreenerror,*mozpointerlockchange,*mozpointerlockerror,*webglcontextcreationerror,*webglcontextlost,*webglcontextrestored',
	    '[HTMLElement]^[Element]|accessKey,contentEditable,dir,!draggable,!hidden,innerText,lang,*abort,*auxclick,*blur,*cancel,*canplay,*canplaythrough,*change,*click,*close,*contextmenu,*cuechange,*dblclick,*drag,*dragend,*dragenter,*dragleave,*dragover,*dragstart,*drop,*durationchange,*emptied,*ended,*error,*focus,*gotpointercapture,*input,*invalid,*keydown,*keypress,*keyup,*load,*loadeddata,*loadedmetadata,*loadstart,*lostpointercapture,*mousedown,*mouseenter,*mouseleave,*mousemove,*mouseout,*mouseover,*mouseup,*mousewheel,*pause,*play,*playing,*pointercancel,*pointerdown,*pointerenter,*pointerleave,*pointermove,*pointerout,*pointerover,*pointerup,*progress,*ratechange,*reset,*resize,*scroll,*seeked,*seeking,*select,*show,*stalled,*submit,*suspend,*timeupdate,*toggle,*volumechange,*waiting,outerText,!spellcheck,%style,#tabIndex,title,!translate',
	    'abbr,address,article,aside,b,bdi,bdo,cite,code,dd,dfn,dt,em,figcaption,figure,footer,header,i,kbd,main,mark,nav,noscript,rb,rp,rt,rtc,ruby,s,samp,section,small,strong,sub,sup,u,var,wbr^[HTMLElement]|accessKey,contentEditable,dir,!draggable,!hidden,innerText,lang,*abort,*auxclick,*blur,*cancel,*canplay,*canplaythrough,*change,*click,*close,*contextmenu,*cuechange,*dblclick,*drag,*dragend,*dragenter,*dragleave,*dragover,*dragstart,*drop,*durationchange,*emptied,*ended,*error,*focus,*gotpointercapture,*input,*invalid,*keydown,*keypress,*keyup,*load,*loadeddata,*loadedmetadata,*loadstart,*lostpointercapture,*mousedown,*mouseenter,*mouseleave,*mousemove,*mouseout,*mouseover,*mouseup,*mousewheel,*pause,*play,*playing,*pointercancel,*pointerdown,*pointerenter,*pointerleave,*pointermove,*pointerout,*pointerover,*pointerup,*progress,*ratechange,*reset,*resize,*scroll,*seeked,*seeking,*select,*show,*stalled,*submit,*suspend,*timeupdate,*toggle,*volumechange,*waiting,outerText,!spellcheck,%style,#tabIndex,title,!translate',
	    'media^[HTMLElement]|!autoplay,!controls,%controlsList,%crossOrigin,#currentTime,!defaultMuted,#defaultPlaybackRate,!disableRemotePlayback,!loop,!muted,*encrypted,*waitingforkey,#playbackRate,preload,src,%srcObject,#volume',
	    ':svg:^[HTMLElement]|*abort,*auxclick,*blur,*cancel,*canplay,*canplaythrough,*change,*click,*close,*contextmenu,*cuechange,*dblclick,*drag,*dragend,*dragenter,*dragleave,*dragover,*dragstart,*drop,*durationchange,*emptied,*ended,*error,*focus,*gotpointercapture,*input,*invalid,*keydown,*keypress,*keyup,*load,*loadeddata,*loadedmetadata,*loadstart,*lostpointercapture,*mousedown,*mouseenter,*mouseleave,*mousemove,*mouseout,*mouseover,*mouseup,*mousewheel,*pause,*play,*playing,*pointercancel,*pointerdown,*pointerenter,*pointerleave,*pointermove,*pointerout,*pointerover,*pointerup,*progress,*ratechange,*reset,*resize,*scroll,*seeked,*seeking,*select,*show,*stalled,*submit,*suspend,*timeupdate,*toggle,*volumechange,*waiting,%style,#tabIndex',
	    ':svg:graphics^:svg:|',
	    ':svg:animation^:svg:|*begin,*end,*repeat',
	    ':svg:geometry^:svg:|',
	    ':svg:componentTransferFunction^:svg:|',
	    ':svg:gradient^:svg:|',
	    ':svg:textContent^:svg:graphics|',
	    ':svg:textPositioning^:svg:textContent|',
	    'a^[HTMLElement]|charset,coords,download,hash,host,hostname,href,hreflang,name,password,pathname,ping,port,protocol,referrerPolicy,rel,rev,search,shape,target,text,type,username',
	    'area^[HTMLElement]|alt,coords,download,hash,host,hostname,href,!noHref,password,pathname,ping,port,protocol,referrerPolicy,rel,search,shape,target,username',
	    'audio^media|',
	    'br^[HTMLElement]|clear',
	    'base^[HTMLElement]|href,target',
	    'body^[HTMLElement]|aLink,background,bgColor,link,*beforeunload,*blur,*error,*focus,*hashchange,*languagechange,*load,*message,*offline,*online,*pagehide,*pageshow,*popstate,*rejectionhandled,*resize,*scroll,*storage,*unhandledrejection,*unload,text,vLink',
	    'button^[HTMLElement]|!autofocus,!disabled,formAction,formEnctype,formMethod,!formNoValidate,formTarget,name,type,value',
	    'canvas^[HTMLElement]|#height,#width',
	    'content^[HTMLElement]|select',
	    'dl^[HTMLElement]|!compact',
	    'datalist^[HTMLElement]|',
	    'details^[HTMLElement]|!open',
	    'dialog^[HTMLElement]|!open,returnValue',
	    'dir^[HTMLElement]|!compact',
	    'div^[HTMLElement]|align',
	    'embed^[HTMLElement]|align,height,name,src,type,width',
	    'fieldset^[HTMLElement]|!disabled,name',
	    'font^[HTMLElement]|color,face,size',
	    'form^[HTMLElement]|acceptCharset,action,autocomplete,encoding,enctype,method,name,!noValidate,target',
	    'frame^[HTMLElement]|frameBorder,longDesc,marginHeight,marginWidth,name,!noResize,scrolling,src',
	    'frameset^[HTMLElement]|cols,*beforeunload,*blur,*error,*focus,*hashchange,*languagechange,*load,*message,*offline,*online,*pagehide,*pageshow,*popstate,*rejectionhandled,*resize,*scroll,*storage,*unhandledrejection,*unload,rows',
	    'hr^[HTMLElement]|align,color,!noShade,size,width',
	    'head^[HTMLElement]|',
	    'h1,h2,h3,h4,h5,h6^[HTMLElement]|align',
	    'html^[HTMLElement]|version',
	    'iframe^[HTMLElement]|align,!allowFullscreen,frameBorder,height,longDesc,marginHeight,marginWidth,name,referrerPolicy,%sandbox,scrolling,src,srcdoc,width',
	    'img^[HTMLElement]|align,alt,border,%crossOrigin,#height,#hspace,!isMap,longDesc,lowsrc,name,referrerPolicy,sizes,src,srcset,useMap,#vspace,#width',
	    'input^[HTMLElement]|accept,align,alt,autocapitalize,autocomplete,!autofocus,!checked,!defaultChecked,defaultValue,dirName,!disabled,%files,formAction,formEnctype,formMethod,!formNoValidate,formTarget,#height,!incremental,!indeterminate,max,#maxLength,min,#minLength,!multiple,name,pattern,placeholder,!readOnly,!required,selectionDirection,#selectionEnd,#selectionStart,#size,src,step,type,useMap,value,%valueAsDate,#valueAsNumber,#width',
	    'li^[HTMLElement]|type,#value',
	    'label^[HTMLElement]|htmlFor',
	    'legend^[HTMLElement]|align',
	    'link^[HTMLElement]|as,charset,%crossOrigin,!disabled,href,hreflang,integrity,media,referrerPolicy,rel,%relList,rev,%sizes,target,type',
	    'map^[HTMLElement]|name',
	    'marquee^[HTMLElement]|behavior,bgColor,direction,height,#hspace,#loop,#scrollAmount,#scrollDelay,!trueSpeed,#vspace,width',
	    'menu^[HTMLElement]|!compact',
	    'meta^[HTMLElement]|content,httpEquiv,name,scheme',
	    'meter^[HTMLElement]|#high,#low,#max,#min,#optimum,#value',
	    'ins,del^[HTMLElement]|cite,dateTime',
	    'ol^[HTMLElement]|!compact,!reversed,#start,type',
	    'object^[HTMLElement]|align,archive,border,code,codeBase,codeType,data,!declare,height,#hspace,name,standby,type,useMap,#vspace,width',
	    'optgroup^[HTMLElement]|!disabled,label',
	    'option^[HTMLElement]|!defaultSelected,!disabled,label,!selected,text,value',
	    'output^[HTMLElement]|defaultValue,%htmlFor,name,value',
	    'p^[HTMLElement]|align',
	    'param^[HTMLElement]|name,type,value,valueType',
	    'picture^[HTMLElement]|',
	    'pre^[HTMLElement]|#width',
	    'progress^[HTMLElement]|#max,#value',
	    'q,blockquote,cite^[HTMLElement]|',
	    'script^[HTMLElement]|!async,charset,%crossOrigin,!defer,event,htmlFor,integrity,src,text,type',
	    'select^[HTMLElement]|!autofocus,!disabled,#length,!multiple,name,!required,#selectedIndex,#size,value',
	    'shadow^[HTMLElement]|',
	    'slot^[HTMLElement]|name',
	    'source^[HTMLElement]|media,sizes,src,srcset,type',
	    'span^[HTMLElement]|',
	    'style^[HTMLElement]|!disabled,media,type',
	    'caption^[HTMLElement]|align',
	    'th,td^[HTMLElement]|abbr,align,axis,bgColor,ch,chOff,#colSpan,headers,height,!noWrap,#rowSpan,scope,vAlign,width',
	    'col,colgroup^[HTMLElement]|align,ch,chOff,#span,vAlign,width',
	    'table^[HTMLElement]|align,bgColor,border,%caption,cellPadding,cellSpacing,frame,rules,summary,%tFoot,%tHead,width',
	    'tr^[HTMLElement]|align,bgColor,ch,chOff,vAlign',
	    'tfoot,thead,tbody^[HTMLElement]|align,ch,chOff,vAlign',
	    'template^[HTMLElement]|',
	    'textarea^[HTMLElement]|autocapitalize,!autofocus,#cols,defaultValue,dirName,!disabled,#maxLength,#minLength,name,placeholder,!readOnly,!required,#rows,selectionDirection,#selectionEnd,#selectionStart,value,wrap',
	    'title^[HTMLElement]|text',
	    'track^[HTMLElement]|!default,kind,label,src,srclang',
	    'ul^[HTMLElement]|!compact,type',
	    'unknown^[HTMLElement]|',
	    'video^media|#height,poster,#width',
	    ':svg:a^:svg:graphics|',
	    ':svg:animate^:svg:animation|',
	    ':svg:animateMotion^:svg:animation|',
	    ':svg:animateTransform^:svg:animation|',
	    ':svg:circle^:svg:geometry|',
	    ':svg:clipPath^:svg:graphics|',
	    ':svg:defs^:svg:graphics|',
	    ':svg:desc^:svg:|',
	    ':svg:discard^:svg:|',
	    ':svg:ellipse^:svg:geometry|',
	    ':svg:feBlend^:svg:|',
	    ':svg:feColorMatrix^:svg:|',
	    ':svg:feComponentTransfer^:svg:|',
	    ':svg:feComposite^:svg:|',
	    ':svg:feConvolveMatrix^:svg:|',
	    ':svg:feDiffuseLighting^:svg:|',
	    ':svg:feDisplacementMap^:svg:|',
	    ':svg:feDistantLight^:svg:|',
	    ':svg:feDropShadow^:svg:|',
	    ':svg:feFlood^:svg:|',
	    ':svg:feFuncA^:svg:componentTransferFunction|',
	    ':svg:feFuncB^:svg:componentTransferFunction|',
	    ':svg:feFuncG^:svg:componentTransferFunction|',
	    ':svg:feFuncR^:svg:componentTransferFunction|',
	    ':svg:feGaussianBlur^:svg:|',
	    ':svg:feImage^:svg:|',
	    ':svg:feMerge^:svg:|',
	    ':svg:feMergeNode^:svg:|',
	    ':svg:feMorphology^:svg:|',
	    ':svg:feOffset^:svg:|',
	    ':svg:fePointLight^:svg:|',
	    ':svg:feSpecularLighting^:svg:|',
	    ':svg:feSpotLight^:svg:|',
	    ':svg:feTile^:svg:|',
	    ':svg:feTurbulence^:svg:|',
	    ':svg:filter^:svg:|',
	    ':svg:foreignObject^:svg:graphics|',
	    ':svg:g^:svg:graphics|',
	    ':svg:image^:svg:graphics|',
	    ':svg:line^:svg:geometry|',
	    ':svg:linearGradient^:svg:gradient|',
	    ':svg:mpath^:svg:|',
	    ':svg:marker^:svg:|',
	    ':svg:mask^:svg:|',
	    ':svg:metadata^:svg:|',
	    ':svg:path^:svg:geometry|',
	    ':svg:pattern^:svg:|',
	    ':svg:polygon^:svg:geometry|',
	    ':svg:polyline^:svg:geometry|',
	    ':svg:radialGradient^:svg:gradient|',
	    ':svg:rect^:svg:geometry|',
	    ':svg:svg^:svg:graphics|#currentScale,#zoomAndPan',
	    ':svg:script^:svg:|type',
	    ':svg:set^:svg:animation|',
	    ':svg:stop^:svg:|',
	    ':svg:style^:svg:|!disabled,media,title,type',
	    ':svg:switch^:svg:graphics|',
	    ':svg:symbol^:svg:|',
	    ':svg:tspan^:svg:textPositioning|',
	    ':svg:text^:svg:textPositioning|',
	    ':svg:textPath^:svg:textContent|',
	    ':svg:title^:svg:|',
	    ':svg:use^:svg:graphics|',
	    ':svg:view^:svg:|#zoomAndPan',
	    'data^[HTMLElement]|value',
	    'keygen^[HTMLElement]|!autofocus,challenge,!disabled,form,keytype,name',
	    'menuitem^[HTMLElement]|type,label,icon,!disabled,!checked,radiogroup,!default',
	    'summary^[HTMLElement]|',
	    'time^[HTMLElement]|dateTime',
	    ':svg:cursor^:svg:|',
	];
	var _ATTR_TO_PROP = {
	    'class': 'className',
	    'for': 'htmlFor',
	    'formaction': 'formAction',
	    'innerHtml': 'innerHTML',
	    'readonly': 'readOnly',
	    'tabindex': 'tabIndex',
	};
	var DomElementSchemaRegistry = /** @class */ (function (_super) {
	    __extends(DomElementSchemaRegistry, _super);
	    function DomElementSchemaRegistry() {
	        var _this = _super.call(this) || this;
	        _this._schema = {};
	        SCHEMA.forEach(function (encodedType) {
	            var type = {};
	            var _a = __read(encodedType.split('|'), 2), strType = _a[0], strProperties = _a[1];
	            var properties = strProperties.split(',');
	            var _b = __read(strType.split('^'), 2), typeNames = _b[0], superName = _b[1];
	            typeNames.split(',').forEach(function (tag) { return _this._schema[tag.toLowerCase()] = type; });
	            var superType = superName && _this._schema[superName.toLowerCase()];
	            if (superType) {
	                Object.keys(superType).forEach(function (prop) {
	                    type[prop] = superType[prop];
	                });
	            }
	            properties.forEach(function (property) {
	                if (property.length > 0) {
	                    switch (property[0]) {
	                        case '*':
	                            // We don't yet support events.
	                            // If ever allowing to bind to events, GO THROUGH A SECURITY REVIEW, allowing events
	                            // will
	                            // almost certainly introduce bad XSS vulnerabilities.
	                            // type[property.substring(1)] = EVENT;
	                            break;
	                        case '!':
	                            type[property.substring(1)] = BOOLEAN;
	                            break;
	                        case '#':
	                            type[property.substring(1)] = NUMBER;
	                            break;
	                        case '%':
	                            type[property.substring(1)] = OBJECT;
	                            break;
	                        default:
	                            type[property] = STRING;
	                    }
	                }
	            });
	        });
	        return _this;
	    }
	    DomElementSchemaRegistry.prototype.hasProperty = function (tagName, propName, schemaMetas) {
	        if (schemaMetas.some(function (schema) { return schema.name === NO_ERRORS_SCHEMA.name; })) {
	            return true;
	        }
	        if (tagName.indexOf('-') > -1) {
	            if (isNgContainer(tagName) || isNgContent(tagName)) {
	                return false;
	            }
	            if (schemaMetas.some(function (schema) { return schema.name === CUSTOM_ELEMENTS_SCHEMA.name; })) {
	                // Can't tell now as we don't know which properties a custom element will get
	                // once it is instantiated
	                return true;
	            }
	        }
	        var elementProperties = this._schema[tagName.toLowerCase()] || this._schema['unknown'];
	        return !!elementProperties[propName];
	    };
	    DomElementSchemaRegistry.prototype.hasElement = function (tagName, schemaMetas) {
	        if (schemaMetas.some(function (schema) { return schema.name === NO_ERRORS_SCHEMA.name; })) {
	            return true;
	        }
	        if (tagName.indexOf('-') > -1) {
	            if (isNgContainer(tagName) || isNgContent(tagName)) {
	                return true;
	            }
	            if (schemaMetas.some(function (schema) { return schema.name === CUSTOM_ELEMENTS_SCHEMA.name; })) {
	                // Allow any custom elements
	                return true;
	            }
	        }
	        return !!this._schema[tagName.toLowerCase()];
	    };
	    /**
	     * securityContext returns the security context for the given property on the given DOM tag.
	     *
	     * Tag and property name are statically known and cannot change at runtime, i.e. it is not
	     * possible to bind a value into a changing attribute or tag name.
	     *
	     * The filtering is based on a list of allowed tags|attributes. All attributes in the schema
	     * above are assumed to have the 'NONE' security context, i.e. that they are safe inert
	     * string values. Only specific well known attack vectors are assigned their appropriate context.
	     */
	    DomElementSchemaRegistry.prototype.securityContext = function (tagName, propName, isAttribute) {
	        if (isAttribute) {
	            // NB: For security purposes, use the mapped property name, not the attribute name.
	            propName = this.getMappedPropName(propName);
	        }
	        // Make sure comparisons are case insensitive, so that case differences between attribute and
	        // property names do not have a security impact.
	        tagName = tagName.toLowerCase();
	        propName = propName.toLowerCase();
	        var ctx = SECURITY_SCHEMA()[tagName + '|' + propName];
	        if (ctx) {
	            return ctx;
	        }
	        ctx = SECURITY_SCHEMA()['*|' + propName];
	        return ctx ? ctx : SecurityContext.NONE;
	    };
	    DomElementSchemaRegistry.prototype.getMappedPropName = function (propName) {
	        return _ATTR_TO_PROP[propName] || propName;
	    };
	    DomElementSchemaRegistry.prototype.getDefaultComponentElementName = function () {
	        return 'ng-component';
	    };
	    DomElementSchemaRegistry.prototype.validateProperty = function (name) {
	        if (name.toLowerCase().startsWith('on')) {
	            var msg = "Binding to event property '" + name + "' is disallowed for security reasons, " +
	                ("please use (" + name.slice(2) + ")=...") +
	                ("\nIf '" + name + "' is a directive input, make sure the directive is imported by the") +
	                " current module.";
	            return { error: true, msg: msg };
	        }
	        else {
	            return { error: false };
	        }
	    };
	    DomElementSchemaRegistry.prototype.validateAttribute = function (name) {
	        if (name.toLowerCase().startsWith('on')) {
	            var msg = "Binding to event attribute '" + name + "' is disallowed for security reasons, " +
	                ("please use (" + name.slice(2) + ")=...");
	            return { error: true, msg: msg };
	        }
	        else {
	            return { error: false };
	        }
	    };
	    DomElementSchemaRegistry.prototype.allKnownElementNames = function () {
	        return Object.keys(this._schema);
	    };
	    DomElementSchemaRegistry.prototype.normalizeAnimationStyleProperty = function (propName) {
	        return dashCaseToCamelCase(propName);
	    };
	    DomElementSchemaRegistry.prototype.normalizeAnimationStyleValue = function (camelCaseProp, userProvidedProp, val) {
	        var unit = '';
	        var strVal = val.toString().trim();
	        var errorMsg = null;
	        if (_isPixelDimensionStyle(camelCaseProp) && val !== 0 && val !== '0') {
	            if (typeof val === 'number') {
	                unit = 'px';
	            }
	            else {
	                var valAndSuffixMatch = val.match(/^[+-]?[\d\.]+([a-z]*)$/);
	                if (valAndSuffixMatch && valAndSuffixMatch[1].length == 0) {
	                    errorMsg = "Please provide a CSS unit value for " + userProvidedProp + ":" + val;
	                }
	            }
	        }
	        return { error: errorMsg, value: strVal + unit };
	    };
	    return DomElementSchemaRegistry;
	}(ElementSchemaRegistry));
	function _isPixelDimensionStyle(prop) {
	    switch (prop) {
	        case 'width':
	        case 'height':
	        case 'minWidth':
	        case 'minHeight':
	        case 'maxWidth':
	        case 'maxHeight':
	        case 'left':
	        case 'top':
	        case 'bottom':
	        case 'right':
	        case 'fontSize':
	        case 'outlineWidth':
	        case 'outlineOffset':
	        case 'paddingTop':
	        case 'paddingLeft':
	        case 'paddingBottom':
	        case 'paddingRight':
	        case 'marginTop':
	        case 'marginLeft':
	        case 'marginBottom':
	        case 'marginRight':
	        case 'borderRadius':
	        case 'borderWidth':
	        case 'borderTopWidth':
	        case 'borderLeftWidth':
	        case 'borderRightWidth':
	        case 'borderBottomWidth':
	        case 'textIndent':
	            return true;
	        default:
	            return false;
	    }
	}

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	var BIND_NAME_REGEXP$1 = /^(?:(?:(?:(bind-)|(let-)|(ref-|#)|(on-)|(bindon-)|(@))(.*))|\[\(([^\)]+)\)\]|\[([^\]]+)\]|\(([^\)]+)\))$/;
	// Group 1 = "bind-"
	var KW_BIND_IDX$1 = 1;
	// Group 2 = "let-"
	var KW_LET_IDX$1 = 2;
	// Group 3 = "ref-/#"
	var KW_REF_IDX$1 = 3;
	// Group 4 = "on-"
	var KW_ON_IDX$1 = 4;
	// Group 5 = "bindon-"
	var KW_BINDON_IDX$1 = 5;
	// Group 6 = "@"
	var KW_AT_IDX$1 = 6;
	// Group 7 = the identifier after "bind-", "let-", "ref-/#", "on-", "bindon-" or "@"
	var IDENT_KW_IDX$1 = 7;
	// Group 8 = identifier inside [()]
	var IDENT_BANANA_BOX_IDX$1 = 8;
	// Group 9 = identifier inside []
	var IDENT_PROPERTY_IDX$1 = 9;
	// Group 10 = identifier inside ()
	var IDENT_EVENT_IDX$1 = 10;
	var TEMPLATE_ATTR_PREFIX$2 = '*';
	function htmlAstToRender3Ast(htmlNodes, bindingParser) {
	    var transformer = new HtmlAstToIvyAst(bindingParser);
	    var ivyNodes = visitAll$1(transformer, htmlNodes);
	    // Errors might originate in either the binding parser or the html to ivy transformer
	    var allErrors = bindingParser.errors.concat(transformer.errors);
	    var errors = allErrors.filter(function (e) { return e.level === ParseErrorLevel.ERROR; });
	    if (errors.length > 0) {
	        var errorString = errors.join('\n');
	        throw syntaxError("Template parse errors:\n" + errorString, errors);
	    }
	    return {
	        nodes: ivyNodes,
	        errors: allErrors,
	        styleUrls: transformer.styleUrls,
	        styles: transformer.styles,
	        ngContentSelectors: transformer.ngContentSelectors,
	    };
	}
	var HtmlAstToIvyAst = /** @class */ (function () {
	    function HtmlAstToIvyAst(bindingParser) {
	        this.bindingParser = bindingParser;
	        this.errors = [];
	        this.styles = [];
	        this.styleUrls = [];
	        this.ngContentSelectors = [];
	        this.inI18nBlock = false;
	    }
	    // HTML visitor
	    HtmlAstToIvyAst.prototype.visitElement = function (element) {
	        var e_1, _a;
	        var _this = this;
	        var isI18nRootElement = isI18nRootNode(element.i18n);
	        if (isI18nRootElement) {
	            if (this.inI18nBlock) {
	                this.reportError('Cannot mark an element as translatable inside of a translatable section. Please remove the nested i18n marker.', element.sourceSpan);
	            }
	            this.inI18nBlock = true;
	        }
	        var preparsedElement = preparseElement(element);
	        if (preparsedElement.type === PreparsedElementType.SCRIPT) {
	            return null;
	        }
	        else if (preparsedElement.type === PreparsedElementType.STYLE) {
	            var contents = textContents(element);
	            if (contents !== null) {
	                this.styles.push(contents);
	            }
	            return null;
	        }
	        else if (preparsedElement.type === PreparsedElementType.STYLESHEET &&
	            isStyleUrlResolvable(preparsedElement.hrefAttr)) {
	            this.styleUrls.push(preparsedElement.hrefAttr);
	            return null;
	        }
	        // Whether the element is a `<ng-template>`
	        var isTemplateElement = isNgTemplate(element.name);
	        var parsedProperties = [];
	        var boundEvents = [];
	        var variables = [];
	        var references = [];
	        var attributes = [];
	        var i18nAttrsMeta = {};
	        var templateParsedProperties = [];
	        var templateVariables = [];
	        // Whether the element has any *-attribute
	        var elementHasInlineTemplate = false;
	        try {
	            for (var _b = __values(element.attrs), _c = _b.next(); !_c.done; _c = _b.next()) {
	                var attribute = _c.value;
	                var hasBinding = false;
	                var normalizedName = normalizeAttributeName(attribute.name);
	                // `*attr` defines template bindings
	                var isTemplateBinding = false;
	                if (attribute.i18n) {
	                    i18nAttrsMeta[attribute.name] = attribute.i18n;
	                }
	                if (normalizedName.startsWith(TEMPLATE_ATTR_PREFIX$2)) {
	                    // *-attributes
	                    if (elementHasInlineTemplate) {
	                        this.reportError("Can't have multiple template bindings on one element. Use only one attribute prefixed with *", attribute.sourceSpan);
	                    }
	                    isTemplateBinding = true;
	                    elementHasInlineTemplate = true;
	                    var templateValue = attribute.value;
	                    var templateKey = normalizedName.substring(TEMPLATE_ATTR_PREFIX$2.length);
	                    var parsedVariables = [];
	                    var absoluteValueOffset = attribute.valueSpan ?
	                        attribute.valueSpan.start.offset :
	                        // If there is no value span the attribute does not have a value, like `attr` in
	                        //`<div attr></div>`. In this case, point to one character beyond the last character of
	                        // the attribute name.
	                        attribute.sourceSpan.start.offset + attribute.name.length;
	                    this.bindingParser.parseInlineTemplateBinding(templateKey, templateValue, attribute.sourceSpan, absoluteValueOffset, [], templateParsedProperties, parsedVariables);
	                    templateVariables.push.apply(templateVariables, __spread(parsedVariables.map(function (v) { return new Variable(v.name, v.value, v.sourceSpan, v.valueSpan); })));
	                }
	                else {
	                    // Check for variables, events, property bindings, interpolation
	                    hasBinding = this.parseAttribute(isTemplateElement, attribute, [], parsedProperties, boundEvents, variables, references);
	                }
	                if (!hasBinding && !isTemplateBinding) {
	                    // don't include the bindings as attributes as well in the AST
	                    attributes.push(this.visitAttribute(attribute));
	                }
	            }
	        }
	        catch (e_1_1) { e_1 = { error: e_1_1 }; }
	        finally {
	            try {
	                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
	            }
	            finally { if (e_1) throw e_1.error; }
	        }
	        var children = visitAll$1(preparsedElement.nonBindable ? NON_BINDABLE_VISITOR$1 : this, element.children);
	        var parsedElement;
	        if (preparsedElement.type === PreparsedElementType.NG_CONTENT) {
	            // `<ng-content>`
	            if (element.children &&
	                !element.children.every(function (node) { return isEmptyTextNode(node) || isCommentNode(node); })) {
	                this.reportError("<ng-content> element cannot have content.", element.sourceSpan);
	            }
	            var selector = preparsedElement.selectAttr;
	            var attrs = element.attrs.map(function (attr) { return _this.visitAttribute(attr); });
	            parsedElement = new Content(selector, attrs, element.sourceSpan, element.i18n);
	            this.ngContentSelectors.push(selector);
	        }
	        else if (isTemplateElement) {
	            // `<ng-template>`
	            var attrs = this.extractAttributes(element.name, parsedProperties, i18nAttrsMeta);
	            parsedElement = new Template(element.name, attributes, attrs.bound, boundEvents, [ /* no template attributes */], children, references, variables, element.sourceSpan, element.startSourceSpan, element.endSourceSpan, element.i18n);
	        }
	        else {
	            var attrs = this.extractAttributes(element.name, parsedProperties, i18nAttrsMeta);
	            parsedElement = new Element$1(element.name, attributes, attrs.bound, boundEvents, children, references, element.sourceSpan, element.startSourceSpan, element.endSourceSpan, element.i18n);
	        }
	        if (elementHasInlineTemplate) {
	            // If this node is an inline-template (e.g. has *ngFor) then we need to create a template
	            // node that contains this node.
	            // Moreover, if the node is an element, then we need to hoist its attributes to the template
	            // node for matching against content projection selectors.
	            var attrs = this.extractAttributes('ng-template', templateParsedProperties, i18nAttrsMeta);
	            var templateAttrs_1 = [];
	            attrs.literal.forEach(function (attr) { return templateAttrs_1.push(attr); });
	            attrs.bound.forEach(function (attr) { return templateAttrs_1.push(attr); });
	            var hoistedAttrs = parsedElement instanceof Element$1 ?
	                {
	                    attributes: parsedElement.attributes,
	                    inputs: parsedElement.inputs,
	                    outputs: parsedElement.outputs,
	                } :
	                { attributes: [], inputs: [], outputs: [] };
	            // For <ng-template>s with structural directives on them, avoid passing i18n information to
	            // the wrapping template to prevent unnecessary i18n instructions from being generated. The
	            // necessary i18n meta information will be extracted from child elements.
	            var i18n_1 = isTemplateElement && isI18nRootElement ? undefined : element.i18n;
	            // TODO(pk): test for this case
	            parsedElement = new Template(parsedElement.name, hoistedAttrs.attributes, hoistedAttrs.inputs, hoistedAttrs.outputs, templateAttrs_1, [parsedElement], [ /* no references */], templateVariables, element.sourceSpan, element.startSourceSpan, element.endSourceSpan, i18n_1);
	        }
	        if (isI18nRootElement) {
	            this.inI18nBlock = false;
	        }
	        return parsedElement;
	    };
	    HtmlAstToIvyAst.prototype.visitAttribute = function (attribute) {
	        return new TextAttribute(attribute.name, attribute.value, attribute.sourceSpan, attribute.valueSpan, attribute.i18n);
	    };
	    HtmlAstToIvyAst.prototype.visitText = function (text) {
	        return this._visitTextWithInterpolation(text.value, text.sourceSpan, text.i18n);
	    };
	    HtmlAstToIvyAst.prototype.visitExpansion = function (expansion) {
	        var _this = this;
	        if (!expansion.i18n) {
	            // do not generate Icu in case it was created
	            // outside of i18n block in a template
	            return null;
	        }
	        if (!isI18nRootNode(expansion.i18n)) {
	            throw new Error("Invalid type \"" + expansion.i18n.constructor + "\" for \"i18n\" property of " + expansion.sourceSpan.toString() + ". Expected a \"Message\"");
	        }
	        var message = expansion.i18n;
	        var vars = {};
	        var placeholders = {};
	        // extract VARs from ICUs - we process them separately while
	        // assembling resulting message via goog.getMsg function, since
	        // we need to pass them to top-level goog.getMsg call
	        Object.keys(message.placeholders).forEach(function (key) {
	            var value = message.placeholders[key];
	            if (key.startsWith(I18N_ICU_VAR_PREFIX)) {
	                var config = _this.bindingParser.interpolationConfig;
	                // ICU expression is a plain string, not wrapped into start
	                // and end tags, so we wrap it before passing to binding parser
	                var wrapped = "" + config.start + value + config.end;
	                vars[key] = _this._visitTextWithInterpolation(wrapped, expansion.sourceSpan);
	            }
	            else {
	                placeholders[key] = _this._visitTextWithInterpolation(value, expansion.sourceSpan);
	            }
	        });
	        return new Icu(vars, placeholders, expansion.sourceSpan, message);
	    };
	    HtmlAstToIvyAst.prototype.visitExpansionCase = function (expansionCase) {
	        return null;
	    };
	    HtmlAstToIvyAst.prototype.visitComment = function (comment) {
	        return null;
	    };
	    // convert view engine `ParsedProperty` to a format suitable for IVY
	    HtmlAstToIvyAst.prototype.extractAttributes = function (elementName, properties, i18nPropsMeta) {
	        var _this = this;
	        var bound = [];
	        var literal = [];
	        properties.forEach(function (prop) {
	            var i18n = i18nPropsMeta[prop.name];
	            if (prop.isLiteral) {
	                literal.push(new TextAttribute(prop.name, prop.expression.source || '', prop.sourceSpan, undefined, i18n));
	            }
	            else {
	                // Note that validation is skipped and property mapping is disabled
	                // due to the fact that we need to make sure a given prop is not an
	                // input of a directive and directive matching happens at runtime.
	                var bep = _this.bindingParser.createBoundElementProperty(elementName, prop, /* skipValidation */ true, /* mapPropertyName */ false);
	                bound.push(BoundAttribute.fromBoundElementProperty(bep, i18n));
	            }
	        });
	        return { bound: bound, literal: literal };
	    };
	    HtmlAstToIvyAst.prototype.parseAttribute = function (isTemplateElement, attribute, matchableAttributes, parsedProperties, boundEvents, variables, references) {
	        var name = normalizeAttributeName(attribute.name);
	        var value = attribute.value;
	        var srcSpan = attribute.sourceSpan;
	        var absoluteOffset = attribute.valueSpan ? attribute.valueSpan.start.offset : srcSpan.start.offset;
	        var bindParts = name.match(BIND_NAME_REGEXP$1);
	        var hasBinding = false;
	        if (bindParts) {
	            hasBinding = true;
	            if (bindParts[KW_BIND_IDX$1] != null) {
	                this.bindingParser.parsePropertyBinding(bindParts[IDENT_KW_IDX$1], value, false, srcSpan, absoluteOffset, attribute.valueSpan, matchableAttributes, parsedProperties);
	            }
	            else if (bindParts[KW_LET_IDX$1]) {
	                if (isTemplateElement) {
	                    var identifier = bindParts[IDENT_KW_IDX$1];
	                    this.parseVariable(identifier, value, srcSpan, attribute.valueSpan, variables);
	                }
	                else {
	                    this.reportError("\"let-\" is only supported on ng-template elements.", srcSpan);
	                }
	            }
	            else if (bindParts[KW_REF_IDX$1]) {
	                var identifier = bindParts[IDENT_KW_IDX$1];
	                this.parseReference(identifier, value, srcSpan, attribute.valueSpan, references);
	            }
	            else if (bindParts[KW_ON_IDX$1]) {
	                var events = [];
	                this.bindingParser.parseEvent(bindParts[IDENT_KW_IDX$1], value, srcSpan, attribute.valueSpan || srcSpan, matchableAttributes, events);
	                addEvents(events, boundEvents);
	            }
	            else if (bindParts[KW_BINDON_IDX$1]) {
	                this.bindingParser.parsePropertyBinding(bindParts[IDENT_KW_IDX$1], value, false, srcSpan, absoluteOffset, attribute.valueSpan, matchableAttributes, parsedProperties);
	                this.parseAssignmentEvent(bindParts[IDENT_KW_IDX$1], value, srcSpan, attribute.valueSpan, matchableAttributes, boundEvents);
	            }
	            else if (bindParts[KW_AT_IDX$1]) {
	                this.bindingParser.parseLiteralAttr(name, value, srcSpan, absoluteOffset, attribute.valueSpan, matchableAttributes, parsedProperties);
	            }
	            else if (bindParts[IDENT_BANANA_BOX_IDX$1]) {
	                this.bindingParser.parsePropertyBinding(bindParts[IDENT_BANANA_BOX_IDX$1], value, false, srcSpan, absoluteOffset, attribute.valueSpan, matchableAttributes, parsedProperties);
	                this.parseAssignmentEvent(bindParts[IDENT_BANANA_BOX_IDX$1], value, srcSpan, attribute.valueSpan, matchableAttributes, boundEvents);
	            }
	            else if (bindParts[IDENT_PROPERTY_IDX$1]) {
	                this.bindingParser.parsePropertyBinding(bindParts[IDENT_PROPERTY_IDX$1], value, false, srcSpan, absoluteOffset, attribute.valueSpan, matchableAttributes, parsedProperties);
	            }
	            else if (bindParts[IDENT_EVENT_IDX$1]) {
	                var events = [];
	                this.bindingParser.parseEvent(bindParts[IDENT_EVENT_IDX$1], value, srcSpan, attribute.valueSpan || srcSpan, matchableAttributes, events);
	                addEvents(events, boundEvents);
	            }
	        }
	        else {
	            hasBinding = this.bindingParser.parsePropertyInterpolation(name, value, srcSpan, attribute.valueSpan, matchableAttributes, parsedProperties);
	        }
	        return hasBinding;
	    };
	    HtmlAstToIvyAst.prototype._visitTextWithInterpolation = function (value, sourceSpan, i18n) {
	        var valueNoNgsp = replaceNgsp(value);
	        var expr = this.bindingParser.parseInterpolation(valueNoNgsp, sourceSpan);
	        return expr ? new BoundText(expr, sourceSpan, i18n) : new Text(valueNoNgsp, sourceSpan);
	    };
	    HtmlAstToIvyAst.prototype.parseVariable = function (identifier, value, sourceSpan, valueSpan, variables) {
	        if (identifier.indexOf('-') > -1) {
	            this.reportError("\"-\" is not allowed in variable names", sourceSpan);
	        }
	        else if (identifier.length === 0) {
	            this.reportError("Variable does not have a name", sourceSpan);
	        }
	        variables.push(new Variable(identifier, value, sourceSpan, valueSpan));
	    };
	    HtmlAstToIvyAst.prototype.parseReference = function (identifier, value, sourceSpan, valueSpan, references) {
	        if (identifier.indexOf('-') > -1) {
	            this.reportError("\"-\" is not allowed in reference names", sourceSpan);
	        }
	        else if (identifier.length === 0) {
	            this.reportError("Reference does not have a name", sourceSpan);
	        }
	        references.push(new Reference(identifier, value, sourceSpan, valueSpan));
	    };
	    HtmlAstToIvyAst.prototype.parseAssignmentEvent = function (name, expression, sourceSpan, valueSpan, targetMatchableAttrs, boundEvents) {
	        var events = [];
	        this.bindingParser.parseEvent(name + "Change", expression + "=$event", sourceSpan, valueSpan || sourceSpan, targetMatchableAttrs, events);
	        addEvents(events, boundEvents);
	    };
	    HtmlAstToIvyAst.prototype.reportError = function (message, sourceSpan, level) {
	        if (level === void 0) { level = ParseErrorLevel.ERROR; }
	        this.errors.push(new ParseError(sourceSpan, message, level));
	    };
	    return HtmlAstToIvyAst;
	}());
	var NonBindableVisitor$1 = /** @class */ (function () {
	    function NonBindableVisitor() {
	    }
	    NonBindableVisitor.prototype.visitElement = function (ast) {
	        var preparsedElement = preparseElement(ast);
	        if (preparsedElement.type === PreparsedElementType.SCRIPT ||
	            preparsedElement.type === PreparsedElementType.STYLE ||
	            preparsedElement.type === PreparsedElementType.STYLESHEET) {
	            // Skipping <script> for security reasons
	            // Skipping <style> and stylesheets as we already processed them
	            // in the StyleCompiler
	            return null;
	        }
	        var children = visitAll$1(this, ast.children, null);
	        return new Element$1(ast.name, visitAll$1(this, ast.attrs), 
	        /* inputs */ [], /* outputs */ [], children, /* references */ [], ast.sourceSpan, ast.startSourceSpan, ast.endSourceSpan);
	    };
	    NonBindableVisitor.prototype.visitComment = function (comment) {
	        return null;
	    };
	    NonBindableVisitor.prototype.visitAttribute = function (attribute) {
	        return new TextAttribute(attribute.name, attribute.value, attribute.sourceSpan, undefined, attribute.i18n);
	    };
	    NonBindableVisitor.prototype.visitText = function (text) {
	        return new Text(text.value, text.sourceSpan);
	    };
	    NonBindableVisitor.prototype.visitExpansion = function (expansion) {
	        return null;
	    };
	    NonBindableVisitor.prototype.visitExpansionCase = function (expansionCase) {
	        return null;
	    };
	    return NonBindableVisitor;
	}());
	var NON_BINDABLE_VISITOR$1 = new NonBindableVisitor$1();
	function normalizeAttributeName(attrName) {
	    return /^data-/i.test(attrName) ? attrName.substring(5) : attrName;
	}
	function addEvents(events, boundEvents) {
	    boundEvents.push.apply(boundEvents, __spread(events.map(function (e) { return BoundEvent.fromParsedEvent(e); })));
	}
	function isEmptyTextNode(node) {
	    return node instanceof Text$3 && node.value.trim().length == 0;
	}
	function isCommentNode(node) {
	    return node instanceof Comment;
	}
	function textContents(node) {
	    if (node.children.length !== 1 || !(node.children[0] instanceof Text$3)) {
	        return null;
	    }
	    else {
	        return node.children[0].value;
	    }
	}

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	var TagType;
	(function (TagType) {
	    TagType[TagType["ELEMENT"] = 0] = "ELEMENT";
	    TagType[TagType["TEMPLATE"] = 1] = "TEMPLATE";
	    TagType[TagType["PROJECTION"] = 2] = "PROJECTION";
	})(TagType || (TagType = {}));
	/**
	 * Generates an object that is used as a shared state between parent and all child contexts.
	 */
	function setupRegistry() {
	    return { getUniqueId: getSeqNumberGenerator(), icus: new Map() };
	}
	/**
	 * I18nContext is a helper class which keeps track of all i18n-related aspects
	 * (accumulates placeholders, bindings, etc) between i18nStart and i18nEnd instructions.
	 *
	 * When we enter a nested template, the top-level context is being passed down
	 * to the nested component, which uses this context to generate a child instance
	 * of I18nContext class (to handle nested template) and at the end, reconciles it back
	 * with the parent context.
	 *
	 * @param index Instruction index of i18nStart, which initiates this context
	 * @param ref Reference to a translation const that represents the content if thus context
	 * @param level Nestng level defined for child contexts
	 * @param templateIndex Instruction index of a template which this context belongs to
	 * @param meta Meta information (id, meaning, description, etc) associated with this context
	 */
	var I18nContext = /** @class */ (function () {
	    function I18nContext(index, ref, level, templateIndex, meta, registry) {
	        if (level === void 0) { level = 0; }
	        if (templateIndex === void 0) { templateIndex = null; }
	        this.index = index;
	        this.ref = ref;
	        this.level = level;
	        this.templateIndex = templateIndex;
	        this.meta = meta;
	        this.registry = registry;
	        this.bindings = new Set();
	        this.placeholders = new Map();
	        this.isEmitted = false;
	        this._unresolvedCtxCount = 0;
	        this._registry = registry || setupRegistry();
	        this.id = this._registry.getUniqueId();
	    }
	    I18nContext.prototype.appendTag = function (type, node, index, closed) {
	        if (node.isVoid && closed) {
	            return; // ignore "close" for void tags
	        }
	        var ph = node.isVoid || !closed ? node.startName : node.closeName;
	        var content = { type: type, index: index, ctx: this.id, isVoid: node.isVoid, closed: closed };
	        updatePlaceholderMap(this.placeholders, ph, content);
	    };
	    Object.defineProperty(I18nContext.prototype, "icus", {
	        get: function () {
	            return this._registry.icus;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(I18nContext.prototype, "isRoot", {
	        get: function () {
	            return this.level === 0;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(I18nContext.prototype, "isResolved", {
	        get: function () {
	            return this._unresolvedCtxCount === 0;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    I18nContext.prototype.getSerializedPlaceholders = function () {
	        var result = new Map();
	        this.placeholders.forEach(function (values, key) { return result.set(key, values.map(serializePlaceholderValue)); });
	        return result;
	    };
	    // public API to accumulate i18n-related content
	    I18nContext.prototype.appendBinding = function (binding) {
	        this.bindings.add(binding);
	    };
	    I18nContext.prototype.appendIcu = function (name, ref) {
	        updatePlaceholderMap(this._registry.icus, name, ref);
	    };
	    I18nContext.prototype.appendBoundText = function (node) {
	        var _this = this;
	        var phs = assembleBoundTextPlaceholders(node, this.bindings.size, this.id);
	        phs.forEach(function (values, key) { return updatePlaceholderMap.apply(void 0, __spread([_this.placeholders, key], values)); });
	    };
	    I18nContext.prototype.appendTemplate = function (node, index) {
	        // add open and close tags at the same time,
	        // since we process nested templates separately
	        this.appendTag(TagType.TEMPLATE, node, index, false);
	        this.appendTag(TagType.TEMPLATE, node, index, true);
	        this._unresolvedCtxCount++;
	    };
	    I18nContext.prototype.appendElement = function (node, index, closed) {
	        this.appendTag(TagType.ELEMENT, node, index, closed);
	    };
	    I18nContext.prototype.appendProjection = function (node, index) {
	        // add open and close tags at the same time,
	        // since we process projected content separately
	        this.appendTag(TagType.PROJECTION, node, index, false);
	        this.appendTag(TagType.PROJECTION, node, index, true);
	    };
	    /**
	     * Generates an instance of a child context based on the root one,
	     * when we enter a nested template within I18n section.
	     *
	     * @param index Instruction index of corresponding i18nStart, which initiates this context
	     * @param templateIndex Instruction index of a template which this context belongs to
	     * @param meta Meta information (id, meaning, description, etc) associated with this context
	     *
	     * @returns I18nContext instance
	     */
	    I18nContext.prototype.forkChildContext = function (index, templateIndex, meta) {
	        return new I18nContext(index, this.ref, this.level + 1, templateIndex, meta, this._registry);
	    };
	    /**
	     * Reconciles child context into parent one once the end of the i18n block is reached (i18nEnd).
	     *
	     * @param context Child I18nContext instance to be reconciled with parent context.
	     */
	    I18nContext.prototype.reconcileChildContext = function (context) {
	        var _this = this;
	        // set the right context id for open and close
	        // template tags, so we can use it as sub-block ids
	        ['start', 'close'].forEach(function (op) {
	            var key = context.meta[op + "Name"];
	            var phs = _this.placeholders.get(key) || [];
	            var tag = phs.find(findTemplateFn(_this.id, context.templateIndex));
	            if (tag) {
	                tag.ctx = context.id;
	            }
	        });
	        // reconcile placeholders
	        var childPhs = context.placeholders;
	        childPhs.forEach(function (values, key) {
	            var phs = _this.placeholders.get(key);
	            if (!phs) {
	                _this.placeholders.set(key, values);
	                return;
	            }
	            // try to find matching template...
	            var tmplIdx = phs.findIndex(findTemplateFn(context.id, context.templateIndex));
	            if (tmplIdx >= 0) {
	                // ... if found - replace it with nested template content
	                var isCloseTag = key.startsWith('CLOSE');
	                var isTemplateTag = key.endsWith('NG-TEMPLATE');
	                if (isTemplateTag) {
	                    // current template's content is placed before or after
	                    // parent template tag, depending on the open/close atrribute
	                    phs.splice.apply(phs, __spread([tmplIdx + (isCloseTag ? 0 : 1), 0], values));
	                }
	                else {
	                    var idx = isCloseTag ? values.length - 1 : 0;
	                    values[idx].tmpl = phs[tmplIdx];
	                    phs.splice.apply(phs, __spread([tmplIdx, 1], values));
	                }
	            }
	            else {
	                // ... otherwise just append content to placeholder value
	                phs.push.apply(phs, __spread(values));
	            }
	            _this.placeholders.set(key, phs);
	        });
	        this._unresolvedCtxCount--;
	    };
	    return I18nContext;
	}());
	//
	// Helper methods
	//
	function wrap(symbol, index, contextId, closed) {
	    var state = closed ? '/' : '';
	    return wrapI18nPlaceholder("" + state + symbol + index, contextId);
	}
	function wrapTag(symbol, _a, closed) {
	    var index = _a.index, ctx = _a.ctx, isVoid = _a.isVoid;
	    return isVoid ? wrap(symbol, index, ctx) + wrap(symbol, index, ctx, true) :
	        wrap(symbol, index, ctx, closed);
	}
	function findTemplateFn(ctx, templateIndex) {
	    return function (token) { return typeof token === 'object' && token.type === TagType.TEMPLATE &&
	        token.index === templateIndex && token.ctx === ctx; };
	}
	function serializePlaceholderValue(value) {
	    var element = function (data, closed) { return wrapTag('#', data, closed); };
	    var template = function (data, closed) { return wrapTag('*', data, closed); };
	    var projection = function (data, closed) { return wrapTag('!', data, closed); };
	    switch (value.type) {
	        case TagType.ELEMENT:
	            // close element tag
	            if (value.closed) {
	                return element(value, true) + (value.tmpl ? template(value.tmpl, true) : '');
	            }
	            // open element tag that also initiates a template
	            if (value.tmpl) {
	                return template(value.tmpl) + element(value) +
	                    (value.isVoid ? template(value.tmpl, true) : '');
	            }
	            return element(value);
	        case TagType.TEMPLATE:
	            return template(value, value.closed);
	        case TagType.PROJECTION:
	            return projection(value, value.closed);
	        default:
	            return value;
	    }
	}

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	var IcuSerializerVisitor = /** @class */ (function () {
	    function IcuSerializerVisitor() {
	    }
	    IcuSerializerVisitor.prototype.visitText = function (text) {
	        return text.value;
	    };
	    IcuSerializerVisitor.prototype.visitContainer = function (container) {
	        var _this = this;
	        return container.children.map(function (child) { return child.visit(_this); }).join('');
	    };
	    IcuSerializerVisitor.prototype.visitIcu = function (icu) {
	        var _this = this;
	        var strCases = Object.keys(icu.cases).map(function (k) { return k + " {" + icu.cases[k].visit(_this) + "}"; });
	        var result = "{" + icu.expressionPlaceholder + ", " + icu.type + ", " + strCases.join(' ') + "}";
	        return result;
	    };
	    IcuSerializerVisitor.prototype.visitTagPlaceholder = function (ph) {
	        var _this = this;
	        return ph.isVoid ?
	            this.formatPh(ph.startName) :
	            "" + this.formatPh(ph.startName) + ph.children.map(function (child) { return child.visit(_this); }).join('') + this.formatPh(ph.closeName);
	    };
	    IcuSerializerVisitor.prototype.visitPlaceholder = function (ph) {
	        return this.formatPh(ph.name);
	    };
	    IcuSerializerVisitor.prototype.visitIcuPlaceholder = function (ph, context) {
	        return this.formatPh(ph.name);
	    };
	    IcuSerializerVisitor.prototype.formatPh = function (value) {
	        return "{" + formatI18nPlaceholderName(value, /* useCamelCase */ false) + "}";
	    };
	    return IcuSerializerVisitor;
	}());
	var serializer = new IcuSerializerVisitor();
	function serializeIcuNode(icu) {
	    return icu.visit(serializer);
	}

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	var TAG_TO_PLACEHOLDER_NAMES = {
	    'A': 'LINK',
	    'B': 'BOLD_TEXT',
	    'BR': 'LINE_BREAK',
	    'EM': 'EMPHASISED_TEXT',
	    'H1': 'HEADING_LEVEL1',
	    'H2': 'HEADING_LEVEL2',
	    'H3': 'HEADING_LEVEL3',
	    'H4': 'HEADING_LEVEL4',
	    'H5': 'HEADING_LEVEL5',
	    'H6': 'HEADING_LEVEL6',
	    'HR': 'HORIZONTAL_RULE',
	    'I': 'ITALIC_TEXT',
	    'LI': 'LIST_ITEM',
	    'LINK': 'MEDIA_LINK',
	    'OL': 'ORDERED_LIST',
	    'P': 'PARAGRAPH',
	    'Q': 'QUOTATION',
	    'S': 'STRIKETHROUGH_TEXT',
	    'SMALL': 'SMALL_TEXT',
	    'SUB': 'SUBSTRIPT',
	    'SUP': 'SUPERSCRIPT',
	    'TBODY': 'TABLE_BODY',
	    'TD': 'TABLE_CELL',
	    'TFOOT': 'TABLE_FOOTER',
	    'TH': 'TABLE_HEADER_CELL',
	    'THEAD': 'TABLE_HEADER',
	    'TR': 'TABLE_ROW',
	    'TT': 'MONOSPACED_TEXT',
	    'U': 'UNDERLINED_TEXT',
	    'UL': 'UNORDERED_LIST',
	};
	/**
	 * Creates unique names for placeholder with different content.
	 *
	 * Returns the same placeholder name when the content is identical.
	 */
	var PlaceholderRegistry = /** @class */ (function () {
	    function PlaceholderRegistry() {
	        // Count the occurrence of the base name top generate a unique name
	        this._placeHolderNameCounts = {};
	        // Maps signature to placeholder names
	        this._signatureToName = {};
	    }
	    PlaceholderRegistry.prototype.getStartTagPlaceholderName = function (tag, attrs, isVoid) {
	        var signature = this._hashTag(tag, attrs, isVoid);
	        if (this._signatureToName[signature]) {
	            return this._signatureToName[signature];
	        }
	        var upperTag = tag.toUpperCase();
	        var baseName = TAG_TO_PLACEHOLDER_NAMES[upperTag] || "TAG_" + upperTag;
	        var name = this._generateUniqueName(isVoid ? baseName : "START_" + baseName);
	        this._signatureToName[signature] = name;
	        return name;
	    };
	    PlaceholderRegistry.prototype.getCloseTagPlaceholderName = function (tag) {
	        var signature = this._hashClosingTag(tag);
	        if (this._signatureToName[signature]) {
	            return this._signatureToName[signature];
	        }
	        var upperTag = tag.toUpperCase();
	        var baseName = TAG_TO_PLACEHOLDER_NAMES[upperTag] || "TAG_" + upperTag;
	        var name = this._generateUniqueName("CLOSE_" + baseName);
	        this._signatureToName[signature] = name;
	        return name;
	    };
	    PlaceholderRegistry.prototype.getPlaceholderName = function (name, content) {
	        var upperName = name.toUpperCase();
	        var signature = "PH: " + upperName + "=" + content;
	        if (this._signatureToName[signature]) {
	            return this._signatureToName[signature];
	        }
	        var uniqueName = this._generateUniqueName(upperName);
	        this._signatureToName[signature] = uniqueName;
	        return uniqueName;
	    };
	    PlaceholderRegistry.prototype.getUniquePlaceholder = function (name) {
	        return this._generateUniqueName(name.toUpperCase());
	    };
	    // Generate a hash for a tag - does not take attribute order into account
	    PlaceholderRegistry.prototype._hashTag = function (tag, attrs, isVoid) {
	        var start = "<" + tag;
	        var strAttrs = Object.keys(attrs).sort().map(function (name) { return " " + name + "=" + attrs[name]; }).join('');
	        var end = isVoid ? '/>' : "></" + tag + ">";
	        return start + strAttrs + end;
	    };
	    PlaceholderRegistry.prototype._hashClosingTag = function (tag) {
	        return this._hashTag("/" + tag, {}, false);
	    };
	    PlaceholderRegistry.prototype._generateUniqueName = function (base) {
	        var seen = this._placeHolderNameCounts.hasOwnProperty(base);
	        if (!seen) {
	            this._placeHolderNameCounts[base] = 1;
	            return base;
	        }
	        var id = this._placeHolderNameCounts[base];
	        this._placeHolderNameCounts[base] = id + 1;
	        return base + "_" + id;
	    };
	    return PlaceholderRegistry;
	}());

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	var _expParser = new Parser$1(new Lexer());
	/**
	 * Returns a function converting html nodes to an i18n Message given an interpolationConfig
	 */
	function createI18nMessageFactory(interpolationConfig) {
	    var visitor = new _I18nVisitor(_expParser, interpolationConfig);
	    return function (nodes, meaning, description, customId, visitNodeFn) {
	        return visitor.toI18nMessage(nodes, meaning, description, customId, visitNodeFn);
	    };
	}
	function noopVisitNodeFn(_html, i18n) {
	    return i18n;
	}
	var _I18nVisitor = /** @class */ (function () {
	    function _I18nVisitor(_expressionParser, _interpolationConfig) {
	        this._expressionParser = _expressionParser;
	        this._interpolationConfig = _interpolationConfig;
	    }
	    _I18nVisitor.prototype.toI18nMessage = function (nodes, meaning, description, customId, visitNodeFn) {
	        if (meaning === void 0) { meaning = ''; }
	        if (description === void 0) { description = ''; }
	        if (customId === void 0) { customId = ''; }
	        var context = {
	            isIcu: nodes.length == 1 && nodes[0] instanceof Expansion,
	            icuDepth: 0,
	            placeholderRegistry: new PlaceholderRegistry(),
	            placeholderToContent: {},
	            placeholderToMessage: {},
	            visitNodeFn: visitNodeFn || noopVisitNodeFn,
	        };
	        var i18nodes = visitAll$1(this, nodes, context);
	        return new Message(i18nodes, context.placeholderToContent, context.placeholderToMessage, meaning, description, customId);
	    };
	    _I18nVisitor.prototype.visitElement = function (el, context) {
	        var children = visitAll$1(this, el.children, context);
	        var attrs = {};
	        el.attrs.forEach(function (attr) {
	            // Do not visit the attributes, translatable ones are top-level ASTs
	            attrs[attr.name] = attr.value;
	        });
	        var isVoid = getHtmlTagDefinition(el.name).isVoid;
	        var startPhName = context.placeholderRegistry.getStartTagPlaceholderName(el.name, attrs, isVoid);
	        context.placeholderToContent[startPhName] = el.sourceSpan.toString();
	        var closePhName = '';
	        if (!isVoid) {
	            closePhName = context.placeholderRegistry.getCloseTagPlaceholderName(el.name);
	            context.placeholderToContent[closePhName] = "</" + el.name + ">";
	        }
	        var node = new TagPlaceholder(el.name, attrs, startPhName, closePhName, children, isVoid, el.sourceSpan);
	        return context.visitNodeFn(el, node);
	    };
	    _I18nVisitor.prototype.visitAttribute = function (attribute, context) {
	        var node = this._visitTextWithInterpolation(attribute.value, attribute.sourceSpan, context);
	        return context.visitNodeFn(attribute, node);
	    };
	    _I18nVisitor.prototype.visitText = function (text, context) {
	        var node = this._visitTextWithInterpolation(text.value, text.sourceSpan, context);
	        return context.visitNodeFn(text, node);
	    };
	    _I18nVisitor.prototype.visitComment = function (comment, context) {
	        return null;
	    };
	    _I18nVisitor.prototype.visitExpansion = function (icu, context) {
	        var _this = this;
	        context.icuDepth++;
	        var i18nIcuCases = {};
	        var i18nIcu = new Icu$1(icu.switchValue, icu.type, i18nIcuCases, icu.sourceSpan);
	        icu.cases.forEach(function (caze) {
	            i18nIcuCases[caze.value] = new Container(caze.expression.map(function (node) { return node.visit(_this, context); }), caze.expSourceSpan);
	        });
	        context.icuDepth--;
	        if (context.isIcu || context.icuDepth > 0) {
	            // Returns an ICU node when:
	            // - the message (vs a part of the message) is an ICU message, or
	            // - the ICU message is nested.
	            var expPh = context.placeholderRegistry.getUniquePlaceholder("VAR_" + icu.type);
	            i18nIcu.expressionPlaceholder = expPh;
	            context.placeholderToContent[expPh] = icu.switchValue;
	            return context.visitNodeFn(icu, i18nIcu);
	        }
	        // Else returns a placeholder
	        // ICU placeholders should not be replaced with their original content but with the their
	        // translations.
	        // TODO(vicb): add a html.Node -> i18n.Message cache to avoid having to re-create the msg
	        var phName = context.placeholderRegistry.getPlaceholderName('ICU', icu.sourceSpan.toString());
	        context.placeholderToMessage[phName] = this.toI18nMessage([icu], '', '', '', undefined);
	        var node = new IcuPlaceholder(i18nIcu, phName, icu.sourceSpan);
	        return context.visitNodeFn(icu, node);
	    };
	    _I18nVisitor.prototype.visitExpansionCase = function (_icuCase, _context) {
	        throw new Error('Unreachable code');
	    };
	    _I18nVisitor.prototype._visitTextWithInterpolation = function (text, sourceSpan, context) {
	        var splitInterpolation = this._expressionParser.splitInterpolation(text, sourceSpan.start.toString(), this._interpolationConfig);
	        if (!splitInterpolation) {
	            // No expression, return a single text
	            return new Text$1(text, sourceSpan);
	        }
	        // Return a group of text + expressions
	        var nodes = [];
	        var container = new Container(nodes, sourceSpan);
	        var _a = this._interpolationConfig, sDelimiter = _a.start, eDelimiter = _a.end;
	        for (var i = 0; i < splitInterpolation.strings.length - 1; i++) {
	            var expression = splitInterpolation.expressions[i];
	            var baseName = _extractPlaceholderName(expression) || 'INTERPOLATION';
	            var phName = context.placeholderRegistry.getPlaceholderName(baseName, expression);
	            if (splitInterpolation.strings[i].length) {
	                // No need to add empty strings
	                nodes.push(new Text$1(splitInterpolation.strings[i], sourceSpan));
	            }
	            nodes.push(new Placeholder(expression, phName, sourceSpan));
	            context.placeholderToContent[phName] = sDelimiter + expression + eDelimiter;
	        }
	        // The last index contains no expression
	        var lastStringIdx = splitInterpolation.strings.length - 1;
	        if (splitInterpolation.strings[lastStringIdx].length) {
	            nodes.push(new Text$1(splitInterpolation.strings[lastStringIdx], sourceSpan));
	        }
	        return container;
	    };
	    return _I18nVisitor;
	}());
	var _CUSTOM_PH_EXP = /\/\/[\s\S]*i18n[\s\S]*\([\s\S]*ph[\s\S]*=[\s\S]*("|')([\s\S]*?)\1[\s\S]*\)/g;
	function _extractPlaceholderName(input) {
	    return input.split(_CUSTOM_PH_EXP)[2];
	}

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	var setI18nRefs = function (htmlNode, i18nNode) {
	    if (htmlNode instanceof NodeWithI18n) {
	        if (i18nNode instanceof IcuPlaceholder && htmlNode.i18n instanceof Message) {
	            // This html node represents an ICU but this is a second processing pass, and the legacy id
	            // was computed in the previous pass and stored in the `i18n` property as a message.
	            // We are about to wipe out that property so capture the previous message to be reused when
	            // generating the message for this ICU later. See `_generateI18nMessage()`.
	            i18nNode.previousMessage = htmlNode.i18n;
	        }
	        htmlNode.i18n = i18nNode;
	    }
	    return i18nNode;
	};
	/**
	 * This visitor walks over HTML parse tree and converts information stored in
	 * i18n-related attributes ("i18n" and "i18n-*") into i18n meta object that is
	 * stored with other element's and attribute's information.
	 */
	var I18nMetaVisitor = /** @class */ (function () {
	    function I18nMetaVisitor(interpolationConfig, keepI18nAttrs, enableI18nLegacyMessageIdFormat) {
	        if (interpolationConfig === void 0) { interpolationConfig = DEFAULT_INTERPOLATION_CONFIG; }
	        if (keepI18nAttrs === void 0) { keepI18nAttrs = false; }
	        if (enableI18nLegacyMessageIdFormat === void 0) { enableI18nLegacyMessageIdFormat = false; }
	        this.interpolationConfig = interpolationConfig;
	        this.keepI18nAttrs = keepI18nAttrs;
	        this.enableI18nLegacyMessageIdFormat = enableI18nLegacyMessageIdFormat;
	        // whether visited nodes contain i18n information
	        this.hasI18nMeta = false;
	        // i18n message generation factory
	        this._createI18nMessage = createI18nMessageFactory(this.interpolationConfig);
	    }
	    I18nMetaVisitor.prototype._generateI18nMessage = function (nodes, meta, visitNodeFn) {
	        if (meta === void 0) { meta = ''; }
	        var _a = this._parseMetadata(meta), meaning = _a.meaning, description = _a.description, customId = _a.customId;
	        var message = this._createI18nMessage(nodes, meaning, description, customId, visitNodeFn);
	        this._setMessageId(message, meta);
	        this._setLegacyIds(message, meta);
	        return message;
	    };
	    I18nMetaVisitor.prototype.visitElement = function (element) {
	        var e_1, _a, e_2, _b;
	        if (hasI18nAttrs(element)) {
	            this.hasI18nMeta = true;
	            var attrs = [];
	            var attrsMeta = {};
	            try {
	                for (var _c = __values(element.attrs), _d = _c.next(); !_d.done; _d = _c.next()) {
	                    var attr = _d.value;
	                    if (attr.name === I18N_ATTR) {
	                        // root 'i18n' node attribute
	                        var i18n_1 = element.i18n || attr.value;
	                        var message = this._generateI18nMessage(element.children, i18n_1, setI18nRefs);
	                        // do not assign empty i18n meta
	                        if (message.nodes.length) {
	                            element.i18n = message;
	                        }
	                    }
	                    else if (attr.name.startsWith(I18N_ATTR_PREFIX)) {
	                        // 'i18n-*' attributes
	                        var key = attr.name.slice(I18N_ATTR_PREFIX.length);
	                        attrsMeta[key] = attr.value;
	                    }
	                    else {
	                        // non-i18n attributes
	                        attrs.push(attr);
	                    }
	                }
	            }
	            catch (e_1_1) { e_1 = { error: e_1_1 }; }
	            finally {
	                try {
	                    if (_d && !_d.done && (_a = _c.return)) _a.call(_c);
	                }
	                finally { if (e_1) throw e_1.error; }
	            }
	            // set i18n meta for attributes
	            if (Object.keys(attrsMeta).length) {
	                try {
	                    for (var attrs_1 = __values(attrs), attrs_1_1 = attrs_1.next(); !attrs_1_1.done; attrs_1_1 = attrs_1.next()) {
	                        var attr = attrs_1_1.value;
	                        var meta = attrsMeta[attr.name];
	                        // do not create translation for empty attributes
	                        if (meta !== undefined && attr.value) {
	                            attr.i18n = this._generateI18nMessage([attr], attr.i18n || meta);
	                        }
	                    }
	                }
	                catch (e_2_1) { e_2 = { error: e_2_1 }; }
	                finally {
	                    try {
	                        if (attrs_1_1 && !attrs_1_1.done && (_b = attrs_1.return)) _b.call(attrs_1);
	                    }
	                    finally { if (e_2) throw e_2.error; }
	                }
	            }
	            if (!this.keepI18nAttrs) {
	                // update element's attributes,
	                // keeping only non-i18n related ones
	                element.attrs = attrs;
	            }
	        }
	        visitAll$1(this, element.children, element.i18n);
	        return element;
	    };
	    I18nMetaVisitor.prototype.visitExpansion = function (expansion, currentMessage) {
	        var message;
	        var meta = expansion.i18n;
	        this.hasI18nMeta = true;
	        if (meta instanceof IcuPlaceholder) {
	            // set ICU placeholder name (e.g. "ICU_1"),
	            // generated while processing root element contents,
	            // so we can reference it when we output translation
	            var name_1 = meta.name;
	            message = this._generateI18nMessage([expansion], meta);
	            var icu = icuFromI18nMessage(message);
	            icu.name = name_1;
	        }
	        else {
	            // ICU is a top level message, try to use metadata from container element if provided via
	            // `context` argument. Note: context may not be available for standalone ICUs (without
	            // wrapping element), so fallback to ICU metadata in this case.
	            message = this._generateI18nMessage([expansion], currentMessage || meta);
	        }
	        expansion.i18n = message;
	        return expansion;
	    };
	    I18nMetaVisitor.prototype.visitText = function (text) {
	        return text;
	    };
	    I18nMetaVisitor.prototype.visitAttribute = function (attribute) {
	        return attribute;
	    };
	    I18nMetaVisitor.prototype.visitComment = function (comment) {
	        return comment;
	    };
	    I18nMetaVisitor.prototype.visitExpansionCase = function (expansionCase) {
	        return expansionCase;
	    };
	    /**
	     * Parse the general form `meta` passed into extract the explicit metadata needed to create a
	     * `Message`.
	     *
	     * There are three possibilities for the `meta` variable
	     * 1) a string from an `i18n` template attribute: parse it to extract the metadata values.
	     * 2) a `Message` from a previous processing pass: reuse the metadata values in the message.
	     * 4) other: ignore this and just process the message metadata as normal
	     *
	     * @param meta the bucket that holds information about the message
	     * @returns the parsed metadata.
	     */
	    I18nMetaVisitor.prototype._parseMetadata = function (meta) {
	        return typeof meta === 'string' ? parseI18nMeta(meta) :
	            meta instanceof Message ? meta : {};
	    };
	    /**
	     * Generate (or restore) message id if not specified already.
	     */
	    I18nMetaVisitor.prototype._setMessageId = function (message, meta) {
	        if (!message.id) {
	            message.id = meta instanceof Message && meta.id || decimalDigest(message);
	        }
	    };
	    /**
	     * Update the `message` with a `legacyId` if necessary.
	     *
	     * @param message the message whose legacy id should be set
	     * @param meta information about the message being processed
	     */
	    I18nMetaVisitor.prototype._setLegacyIds = function (message, meta) {
	        if (this.enableI18nLegacyMessageIdFormat) {
	            message.legacyIds = [computeDigest(message), computeDecimalDigest(message)];
	        }
	        else if (typeof meta !== 'string') {
	            // This occurs if we are doing the 2nd pass after whitespace removal (see `parseTemplate()` in
	            // `packages/compiler/src/render3/view/template.ts`).
	            // In that case we want to reuse the legacy message generated in the 1st pass (see
	            // `setI18nRefs()`).
	            var previousMessage = meta instanceof Message ?
	                meta :
	                meta instanceof IcuPlaceholder ? meta.previousMessage : undefined;
	            message.legacyIds = previousMessage ? previousMessage.legacyIds : [];
	        }
	    };
	    return I18nMetaVisitor;
	}());
	/** I18n separators for metadata **/
	var I18N_MEANING_SEPARATOR = '|';
	var I18N_ID_SEPARATOR = '@@';
	/**
	 * Parses i18n metas like:
	 *  - "@@id",
	 *  - "description[@@id]",
	 *  - "meaning|description[@@id]"
	 * and returns an object with parsed output.
	 *
	 * @param meta String that represents i18n meta
	 * @returns Object with id, meaning and description fields
	 */
	function parseI18nMeta(meta) {
	    var _a, _b;
	    if (meta === void 0) { meta = ''; }
	    var customId;
	    var meaning;
	    var description;
	    meta = meta.trim();
	    if (meta) {
	        var idIndex = meta.indexOf(I18N_ID_SEPARATOR);
	        var descIndex = meta.indexOf(I18N_MEANING_SEPARATOR);
	        var meaningAndDesc = void 0;
	        _a = __read((idIndex > -1) ? [meta.slice(0, idIndex), meta.slice(idIndex + 2)] : [meta, ''], 2), meaningAndDesc = _a[0], customId = _a[1];
	        _b = __read((descIndex > -1) ?
	            [meaningAndDesc.slice(0, descIndex), meaningAndDesc.slice(descIndex + 1)] :
	            ['', meaningAndDesc], 2), meaning = _b[0], description = _b[1];
	    }
	    return { customId: customId, meaning: meaning, description: description };
	}
	// Converts i18n meta information for a message (id, description, meaning)
	// to a JsDoc statement formatted as expected by the Closure compiler.
	function i18nMetaToDocStmt(meta) {
	    var tags = [];
	    if (meta.description) {
	        tags.push({ tagName: "desc" /* Desc */, text: meta.description });
	    }
	    if (meta.meaning) {
	        tags.push({ tagName: "meaning" /* Meaning */, text: meta.meaning });
	    }
	    return tags.length == 0 ? null : new JSDocCommentStmt(tags);
	}

	/** Closure uses `goog.getMsg(message)` to lookup translations */
	var GOOG_GET_MSG = 'goog.getMsg';
	function createGoogleGetMsgStatements(variable$1, message, closureVar, params) {
	    var messageString = serializeI18nMessageForGetMsg(message);
	    var args = [literal(messageString)];
	    if (Object.keys(params).length) {
	        args.push(mapLiteral(params, true));
	    }
	    // /**
	    //  * @desc description of message
	    //  * @meaning meaning of message
	    //  */
	    // const MSG_... = goog.getMsg(..);
	    // I18N_X = MSG_...;
	    var statements = [];
	    var jsdocComment = i18nMetaToDocStmt(message);
	    if (jsdocComment !== null) {
	        statements.push(jsdocComment);
	    }
	    statements.push(closureVar.set(variable(GOOG_GET_MSG).callFn(args)).toConstDecl());
	    statements.push(new ExpressionStatement(variable$1.set(closureVar)));
	    return statements;
	}
	/**
	 * This visitor walks over i18n tree and generates its string representation, including ICUs and
	 * placeholders in `{$placeholder}` (for plain messages) or `{PLACEHOLDER}` (inside ICUs) format.
	 */
	var GetMsgSerializerVisitor = /** @class */ (function () {
	    function GetMsgSerializerVisitor() {
	    }
	    GetMsgSerializerVisitor.prototype.formatPh = function (value) {
	        return "{$" + formatI18nPlaceholderName(value) + "}";
	    };
	    GetMsgSerializerVisitor.prototype.visitText = function (text) {
	        return text.value;
	    };
	    GetMsgSerializerVisitor.prototype.visitContainer = function (container) {
	        var _this = this;
	        return container.children.map(function (child) { return child.visit(_this); }).join('');
	    };
	    GetMsgSerializerVisitor.prototype.visitIcu = function (icu) {
	        return serializeIcuNode(icu);
	    };
	    GetMsgSerializerVisitor.prototype.visitTagPlaceholder = function (ph) {
	        var _this = this;
	        return ph.isVoid ?
	            this.formatPh(ph.startName) :
	            "" + this.formatPh(ph.startName) + ph.children.map(function (child) { return child.visit(_this); }).join('') + this.formatPh(ph.closeName);
	    };
	    GetMsgSerializerVisitor.prototype.visitPlaceholder = function (ph) {
	        return this.formatPh(ph.name);
	    };
	    GetMsgSerializerVisitor.prototype.visitIcuPlaceholder = function (ph, context) {
	        return this.formatPh(ph.name);
	    };
	    return GetMsgSerializerVisitor;
	}());
	var serializerVisitor$1 = new GetMsgSerializerVisitor();
	function serializeI18nMessageForGetMsg(message) {
	    return message.nodes.map(function (node) { return node.visit(serializerVisitor$1, null); }).join('');
	}

	function createLocalizeStatements(variable, message, params) {
	    var statements = [];
	    var _a = serializeI18nMessageForLocalize(message), messageParts = _a.messageParts, placeHolders = _a.placeHolders;
	    statements.push(new ExpressionStatement(variable.set(localizedString(message, messageParts, placeHolders, placeHolders.map(function (ph) { return params[ph]; })))));
	    return statements;
	}
	var MessagePiece = /** @class */ (function () {
	    function MessagePiece(text) {
	        this.text = text;
	    }
	    return MessagePiece;
	}());
	var LiteralPiece = /** @class */ (function (_super) {
	    __extends(LiteralPiece, _super);
	    function LiteralPiece() {
	        return _super !== null && _super.apply(this, arguments) || this;
	    }
	    return LiteralPiece;
	}(MessagePiece));
	var PlaceholderPiece = /** @class */ (function (_super) {
	    __extends(PlaceholderPiece, _super);
	    function PlaceholderPiece(name) {
	        return _super.call(this, formatI18nPlaceholderName(name, /* useCamelCase */ false)) || this;
	    }
	    return PlaceholderPiece;
	}(MessagePiece));
	/**
	 * This visitor walks over an i18n tree, capturing literal strings and placeholders.
	 *
	 * The result can be used for generating the `$localize` tagged template literals.
	 */
	var LocalizeSerializerVisitor = /** @class */ (function () {
	    function LocalizeSerializerVisitor() {
	    }
	    LocalizeSerializerVisitor.prototype.visitText = function (text, context) {
	        if (context[context.length - 1] instanceof LiteralPiece) {
	            // Two literal pieces in a row means that there was some comment node in-between.
	            context[context.length - 1].text += text.value;
	        }
	        else {
	            context.push(new LiteralPiece(text.value));
	        }
	    };
	    LocalizeSerializerVisitor.prototype.visitContainer = function (container, context) {
	        var _this = this;
	        container.children.forEach(function (child) { return child.visit(_this, context); });
	    };
	    LocalizeSerializerVisitor.prototype.visitIcu = function (icu, context) {
	        context.push(new LiteralPiece(serializeIcuNode(icu)));
	    };
	    LocalizeSerializerVisitor.prototype.visitTagPlaceholder = function (ph, context) {
	        var _this = this;
	        context.push(new PlaceholderPiece(ph.startName));
	        if (!ph.isVoid) {
	            ph.children.forEach(function (child) { return child.visit(_this, context); });
	            context.push(new PlaceholderPiece(ph.closeName));
	        }
	    };
	    LocalizeSerializerVisitor.prototype.visitPlaceholder = function (ph, context) {
	        context.push(new PlaceholderPiece(ph.name));
	    };
	    LocalizeSerializerVisitor.prototype.visitIcuPlaceholder = function (ph, context) {
	        context.push(new PlaceholderPiece(ph.name));
	    };
	    return LocalizeSerializerVisitor;
	}());
	var serializerVisitor$2 = new LocalizeSerializerVisitor();
	/**
	 * Serialize an i18n message into two arrays: messageParts and placeholders.
	 *
	 * These arrays will be used to generate `$localize` tagged template literals.
	 *
	 * @param message The message to be serialized.
	 * @returns an object containing the messageParts and placeholders.
	 */
	function serializeI18nMessageForLocalize(message) {
	    var pieces = [];
	    message.nodes.forEach(function (node) { return node.visit(serializerVisitor$2, pieces); });
	    return processMessagePieces(pieces);
	}
	/**
	 * Convert the list of serialized MessagePieces into two arrays.
	 *
	 * One contains the literal string pieces and the other the placeholders that will be replaced by
	 * expressions when rendering `$localize` tagged template literals.
	 *
	 * @param pieces The pieces to process.
	 * @returns an object containing the messageParts and placeholders.
	 */
	function processMessagePieces(pieces) {
	    var messageParts = [];
	    var placeHolders = [];
	    if (pieces[0] instanceof PlaceholderPiece) {
	        // The first piece was a placeholder so we need to add an initial empty message part.
	        messageParts.push('');
	    }
	    for (var i = 0; i < pieces.length; i++) {
	        var part = pieces[i];
	        if (part instanceof LiteralPiece) {
	            messageParts.push(part.text);
	        }
	        else {
	            placeHolders.push(part.text);
	            if (pieces[i - 1] instanceof PlaceholderPiece) {
	                // There were two placeholders in a row, so we need to add an empty message part.
	                messageParts.push('');
	            }
	        }
	    }
	    if (pieces[pieces.length - 1] instanceof PlaceholderPiece) {
	        // The last piece was a placeholder so we need to add a final empty message part.
	        messageParts.push('');
	    }
	    return { messageParts: messageParts, placeHolders: placeHolders };
	}

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	// Selector attribute name of `<ng-content>`
	var NG_CONTENT_SELECT_ATTR$1 = 'select';
	// Attribute name of `ngProjectAs`.
	var NG_PROJECT_AS_ATTR_NAME = 'ngProjectAs';
	// List of supported global targets for event listeners
	var GLOBAL_TARGET_RESOLVERS = new Map([['window', Identifiers$1.resolveWindow], ['document', Identifiers$1.resolveDocument], ['body', Identifiers$1.resolveBody]]);
	var LEADING_TRIVIA_CHARS = [' ', '\n', '\r', '\t'];
	//  if (rf & flags) { .. }
	function renderFlagCheckIfStmt(flags, statements) {
	    return ifStmt(variable(RENDER_FLAGS).bitwiseAnd(literal(flags), null, false), statements);
	}
	function prepareEventListenerParameters(eventAst, handlerName, scope) {
	    if (handlerName === void 0) { handlerName = null; }
	    if (scope === void 0) { scope = null; }
	    var type = eventAst.type, name = eventAst.name, target = eventAst.target, phase = eventAst.phase, handler = eventAst.handler;
	    if (target && !GLOBAL_TARGET_RESOLVERS.has(target)) {
	        throw new Error("Unexpected global target '" + target + "' defined for '" + name + "' event.\n        Supported list of global targets: " + Array.from(GLOBAL_TARGET_RESOLVERS.keys()) + ".");
	    }
	    var eventArgumentName = '$event';
	    var implicitReceiverAccesses = new Set();
	    var implicitReceiverExpr = (scope === null || scope.bindingLevel === 0) ?
	        variable(CONTEXT_NAME) :
	        scope.getOrCreateSharedContextVar(0);
	    var bindingExpr = convertActionBinding(scope, implicitReceiverExpr, handler, 'b', function () { return error('Unexpected interpolation'); }, eventAst.handlerSpan, implicitReceiverAccesses);
	    var statements = [];
	    if (scope) {
	        statements.push.apply(statements, __spread(scope.restoreViewStatement()));
	        statements.push.apply(statements, __spread(scope.variableDeclarations()));
	    }
	    statements.push.apply(statements, __spread(bindingExpr.render3Stmts));
	    var eventName = type === 1 /* Animation */ ? prepareSyntheticListenerName(name, phase) : name;
	    var fnName = handlerName && sanitizeIdentifier(handlerName);
	    var fnArgs = [];
	    if (implicitReceiverAccesses.has(eventArgumentName)) {
	        fnArgs.push(new FnParam(eventArgumentName, DYNAMIC_TYPE));
	    }
	    var handlerFn = fn(fnArgs, statements, INFERRED_TYPE, null, fnName);
	    var params = [literal(eventName), handlerFn];
	    if (target) {
	        params.push(literal(false), // `useCapture` flag, defaults to `false`
	        importExpr(GLOBAL_TARGET_RESOLVERS.get(target)));
	    }
	    return params;
	}
	var TemplateDefinitionBuilder = /** @class */ (function () {
	    function TemplateDefinitionBuilder(constantPool, parentBindingScope, level, contextName, i18nContext, templateIndex, templateName, directiveMatcher, directives, pipeTypeByName, pipes, _namespace, relativeContextFilePath, i18nUseExternalIds, _constants) {
	        var _this = this;
	        if (level === void 0) { level = 0; }
	        if (_constants === void 0) { _constants = []; }
	        this.constantPool = constantPool;
	        this.level = level;
	        this.contextName = contextName;
	        this.i18nContext = i18nContext;
	        this.templateIndex = templateIndex;
	        this.templateName = templateName;
	        this.directiveMatcher = directiveMatcher;
	        this.directives = directives;
	        this.pipeTypeByName = pipeTypeByName;
	        this.pipes = pipes;
	        this._namespace = _namespace;
	        this.i18nUseExternalIds = i18nUseExternalIds;
	        this._constants = _constants;
	        this._dataIndex = 0;
	        this._bindingContext = 0;
	        this._prefixCode = [];
	        /**
	         * List of callbacks to generate creation mode instructions. We store them here as we process
	         * the template so bindings in listeners are resolved only once all nodes have been visited.
	         * This ensures all local refs and context variables are available for matching.
	         */
	        this._creationCodeFns = [];
	        /**
	         * List of callbacks to generate update mode instructions. We store them here as we process
	         * the template so bindings are resolved only once all nodes have been visited. This ensures
	         * all local refs and context variables are available for matching.
	         */
	        this._updateCodeFns = [];
	        /** Index of the currently-selected node. */
	        this._currentIndex = 0;
	        /** Temporary variable declarations generated from visiting pipes, literals, etc. */
	        this._tempVariables = [];
	        /**
	         * List of callbacks to build nested templates. Nested templates must not be visited until
	         * after the parent template has finished visiting all of its nodes. This ensures that all
	         * local ref bindings in nested templates are able to find local ref values if the refs
	         * are defined after the template declaration.
	         */
	        this._nestedTemplateFns = [];
	        this._unsupported = unsupported;
	        // i18n context local to this template
	        this.i18n = null;
	        // Number of slots to reserve for pureFunctions
	        this._pureFunctionSlots = 0;
	        // Number of binding slots
	        this._bindingSlots = 0;
	        // Projection slots found in the template. Projection slots can distribute projected
	        // nodes based on a selector, or can just use the wildcard selector to match
	        // all nodes which aren't matching any selector.
	        this._ngContentReservedSlots = [];
	        // Number of non-default selectors found in all parent templates of this template. We need to
	        // track it to properly adjust projection slot index in the `projection` instruction.
	        this._ngContentSelectorsOffset = 0;
	        // Expression that should be used as implicit receiver when converting template
	        // expressions to output AST.
	        this._implicitReceiverExpr = null;
	        // These should be handled in the template or element directly.
	        this.visitReference = invalid$1;
	        this.visitVariable = invalid$1;
	        this.visitTextAttribute = invalid$1;
	        this.visitBoundAttribute = invalid$1;
	        this.visitBoundEvent = invalid$1;
	        this._bindingScope = parentBindingScope.nestedScope(level);
	        // Turn the relative context file path into an identifier by replacing non-alphanumeric
	        // characters with underscores.
	        this.fileBasedI18nSuffix = relativeContextFilePath.replace(/[^A-Za-z0-9]/g, '_') + '_';
	        this._valueConverter = new ValueConverter(constantPool, function () { return _this.allocateDataSlot(); }, function (numSlots) { return _this.allocatePureFunctionSlots(numSlots); }, function (name, localName, slot, value) {
	            var pipeType = pipeTypeByName.get(name);
	            if (pipeType) {
	                _this.pipes.add(pipeType);
	            }
	            _this._bindingScope.set(_this.level, localName, value);
	            _this.creationInstruction(null, Identifiers$1.pipe, [literal(slot), literal(name)]);
	        });
	    }
	    TemplateDefinitionBuilder.prototype.buildTemplateFunction = function (nodes, variables, ngContentSelectorsOffset, i18n) {
	        var _this = this;
	        if (ngContentSelectorsOffset === void 0) { ngContentSelectorsOffset = 0; }
	        this._ngContentSelectorsOffset = ngContentSelectorsOffset;
	        if (this._namespace !== Identifiers$1.namespaceHTML) {
	            this.creationInstruction(null, this._namespace);
	        }
	        // Create variable bindings
	        variables.forEach(function (v) { return _this.registerContextVariables(v); });
	        // Initiate i18n context in case:
	        // - this template has parent i18n context
	        // - or the template has i18n meta associated with it,
	        //   but it's not initiated by the Element (e.g. <ng-template i18n>)
	        var initI18nContext = this.i18nContext ||
	            (isI18nRootNode(i18n) && !isSingleI18nIcu(i18n) &&
	                !(isSingleElementTemplate(nodes) && nodes[0].i18n === i18n));
	        var selfClosingI18nInstruction = hasTextChildrenOnly(nodes);
	        if (initI18nContext) {
	            this.i18nStart(null, i18n, selfClosingI18nInstruction);
	        }
	        // This is the initial pass through the nodes of this template. In this pass, we
	        // queue all creation mode and update mode instructions for generation in the second
	        // pass. It's necessary to separate the passes to ensure local refs are defined before
	        // resolving bindings. We also count bindings in this pass as we walk bound expressions.
	        visitAll(this, nodes);
	        // Add total binding count to pure function count so pure function instructions are
	        // generated with the correct slot offset when update instructions are processed.
	        this._pureFunctionSlots += this._bindingSlots;
	        // Pipes are walked in the first pass (to enqueue `pipe()` creation instructions and
	        // `pipeBind` update instructions), so we have to update the slot offsets manually
	        // to account for bindings.
	        this._valueConverter.updatePipeSlotOffsets(this._bindingSlots);
	        // Nested templates must be processed before creation instructions so template()
	        // instructions can be generated with the correct internal const count.
	        this._nestedTemplateFns.forEach(function (buildTemplateFn) { return buildTemplateFn(); });
	        // Output the `projectionDef` instruction when some `<ng-content>` tags are present.
	        // The `projectionDef` instruction is only emitted for the component template and
	        // is skipped for nested templates (<ng-template> tags).
	        if (this.level === 0 && this._ngContentReservedSlots.length) {
	            var parameters = [];
	            // By default the `projectionDef` instructions creates one slot for the wildcard
	            // selector if no parameters are passed. Therefore we only want to allocate a new
	            // array for the projection slots if the default projection slot is not sufficient.
	            if (this._ngContentReservedSlots.length > 1 || this._ngContentReservedSlots[0] !== '*') {
	                var r3ReservedSlots = this._ngContentReservedSlots.map(function (s) { return s !== '*' ? parseSelectorToR3Selector(s) : s; });
	                parameters.push(this.constantPool.getConstLiteral(asLiteral(r3ReservedSlots), true));
	            }
	            // Since we accumulate ngContent selectors while processing template elements,
	            // we *prepend* `projectionDef` to creation instructions block, to put it before
	            // any `projection` instructions
	            this.creationInstruction(null, Identifiers$1.projectionDef, parameters, /* prepend */ true);
	        }
	        if (initI18nContext) {
	            this.i18nEnd(null, selfClosingI18nInstruction);
	        }
	        // Generate all the creation mode instructions (e.g. resolve bindings in listeners)
	        var creationStatements = this._creationCodeFns.map(function (fn) { return fn(); });
	        // Generate all the update mode instructions (e.g. resolve property or text bindings)
	        var updateStatements = this._updateCodeFns.map(function (fn) { return fn(); });
	        //  Variable declaration must occur after binding resolution so we can generate context
	        //  instructions that build on each other.
	        // e.g. const b = nextContext().$implicit(); const b = nextContext();
	        var creationVariables = this._bindingScope.viewSnapshotStatements();
	        var updateVariables = this._bindingScope.variableDeclarations().concat(this._tempVariables);
	        var creationBlock = creationStatements.length > 0 ?
	            [renderFlagCheckIfStmt(1 /* Create */, creationVariables.concat(creationStatements))] :
	            [];
	        var updateBlock = updateStatements.length > 0 ?
	            [renderFlagCheckIfStmt(2 /* Update */, updateVariables.concat(updateStatements))] :
	            [];
	        return fn(
	        // i.e. (rf: RenderFlags, ctx: any)
	        [new FnParam(RENDER_FLAGS, NUMBER_TYPE), new FnParam(CONTEXT_NAME, null)], __spread(this._prefixCode, creationBlock, updateBlock), INFERRED_TYPE, null, this.templateName);
	    };
	    // LocalResolver
	    TemplateDefinitionBuilder.prototype.getLocal = function (name) {
	        return this._bindingScope.get(name);
	    };
	    // LocalResolver
	    TemplateDefinitionBuilder.prototype.notifyImplicitReceiverUse = function () {
	        this._bindingScope.notifyImplicitReceiverUse();
	    };
	    TemplateDefinitionBuilder.prototype.i18nTranslate = function (message, params, ref, transformFn) {
	        var _a;
	        if (params === void 0) { params = {}; }
	        var _ref = ref || variable(this.constantPool.uniqueName(TRANSLATION_PREFIX));
	        // Closure Compiler requires const names to start with `MSG_` but disallows any other const to
	        // start with `MSG_`. We define a variable starting with `MSG_` just for the `goog.getMsg` call
	        var closureVar = this.i18nGenerateClosureVar(message.id);
	        var statements = getTranslationDeclStmts(message, _ref, closureVar, params, transformFn);
	        (_a = this.constantPool.statements).push.apply(_a, __spread(statements));
	        return _ref;
	    };
	    TemplateDefinitionBuilder.prototype.registerContextVariables = function (variable$1) {
	        var scopedName = this._bindingScope.freshReferenceName();
	        var retrievalLevel = this.level;
	        var lhs = variable(variable$1.name + scopedName);
	        this._bindingScope.set(retrievalLevel, variable$1.name, lhs, 1 /* CONTEXT */, function (scope, relativeLevel) {
	            var rhs;
	            if (scope.bindingLevel === retrievalLevel) {
	                // e.g. ctx
	                rhs = variable(CONTEXT_NAME);
	            }
	            else {
	                var sharedCtxVar = scope.getSharedContextName(retrievalLevel);
	                // e.g. ctx_r0   OR  x(2);
	                rhs = sharedCtxVar ? sharedCtxVar : generateNextContextExpr(relativeLevel);
	            }
	            // e.g. const $item$ = x(2).$implicit;
	            return [lhs.set(rhs.prop(variable$1.value || IMPLICIT_REFERENCE)).toConstDecl()];
	        });
	    };
	    TemplateDefinitionBuilder.prototype.i18nAppendBindings = function (expressions) {
	        var _this = this;
	        if (expressions.length > 0) {
	            expressions.forEach(function (expression) { return _this.i18n.appendBinding(expression); });
	        }
	    };
	    TemplateDefinitionBuilder.prototype.i18nBindProps = function (props) {
	        var _this = this;
	        var bound = {};
	        Object.keys(props).forEach(function (key) {
	            var prop = props[key];
	            if (prop instanceof Text) {
	                bound[key] = literal(prop.value);
	            }
	            else {
	                var value = prop.value.visit(_this._valueConverter);
	                _this.allocateBindingSlots(value);
	                if (value instanceof Interpolation) {
	                    var strings = value.strings, expressions = value.expressions;
	                    var _a = _this.i18n, id = _a.id, bindings = _a.bindings;
	                    var label = assembleI18nBoundString(strings, bindings.size, id);
	                    _this.i18nAppendBindings(expressions);
	                    bound[key] = literal(label);
	                }
	            }
	        });
	        return bound;
	    };
	    TemplateDefinitionBuilder.prototype.i18nGenerateClosureVar = function (messageId) {
	        var name;
	        var suffix = this.fileBasedI18nSuffix.toUpperCase();
	        if (this.i18nUseExternalIds) {
	            var prefix = getTranslationConstPrefix("EXTERNAL_");
	            var uniqueSuffix = this.constantPool.uniqueName(suffix);
	            name = "" + prefix + sanitizeIdentifier(messageId) + "$$" + uniqueSuffix;
	        }
	        else {
	            var prefix = getTranslationConstPrefix(suffix);
	            name = this.constantPool.uniqueName(prefix);
	        }
	        return variable(name);
	    };
	    TemplateDefinitionBuilder.prototype.i18nUpdateRef = function (context) {
	        var icus = context.icus, meta = context.meta, isRoot = context.isRoot, isResolved = context.isResolved, isEmitted = context.isEmitted;
	        if (isRoot && isResolved && !isEmitted && !isSingleI18nIcu(meta)) {
	            context.isEmitted = true;
	            var placeholders = context.getSerializedPlaceholders();
	            var icuMapping_1 = {};
	            var params_1 = placeholders.size ? placeholdersToParams(placeholders) : {};
	            if (icus.size) {
	                icus.forEach(function (refs, key) {
	                    if (refs.length === 1) {
	                        // if we have one ICU defined for a given
	                        // placeholder - just output its reference
	                        params_1[key] = refs[0];
	                    }
	                    else {
	                        // ... otherwise we need to activate post-processing
	                        // to replace ICU placeholders with proper values
	                        var placeholder = wrapI18nPlaceholder("" + I18N_ICU_MAPPING_PREFIX + key);
	                        params_1[key] = literal(placeholder);
	                        icuMapping_1[key] = literalArr(refs);
	                    }
	                });
	            }
	            // translation requires post processing in 2 cases:
	            // - if we have placeholders with multiple values (ex. `START_DIV`: [ï¿½#1ï¿½, ï¿½#2ï¿½, ...])
	            // - if we have multiple ICUs that refer to the same placeholder name
	            var needsPostprocessing = Array.from(placeholders.values()).some(function (value) { return value.length > 1; }) ||
	                Object.keys(icuMapping_1).length;
	            var transformFn = void 0;
	            if (needsPostprocessing) {
	                transformFn = function (raw) {
	                    var args = [raw];
	                    if (Object.keys(icuMapping_1).length) {
	                        args.push(mapLiteral(icuMapping_1, true));
	                    }
	                    return instruction(null, Identifiers$1.i18nPostprocess, args);
	                };
	            }
	            this.i18nTranslate(meta, params_1, context.ref, transformFn);
	        }
	    };
	    TemplateDefinitionBuilder.prototype.i18nStart = function (span, meta, selfClosing) {
	        if (span === void 0) { span = null; }
	        var index = this.allocateDataSlot();
	        if (this.i18nContext) {
	            this.i18n = this.i18nContext.forkChildContext(index, this.templateIndex, meta);
	        }
	        else {
	            var ref_1 = variable(this.constantPool.uniqueName(TRANSLATION_PREFIX));
	            this.i18n = new I18nContext(index, ref_1, 0, this.templateIndex, meta);
	        }
	        // generate i18nStart instruction
	        var _a = this.i18n, id = _a.id, ref = _a.ref;
	        var params = [literal(index), ref];
	        if (id > 0) {
	            // do not push 3rd argument (sub-block id)
	            // into i18nStart call for top level i18n context
	            params.push(literal(id));
	        }
	        this.creationInstruction(span, selfClosing ? Identifiers$1.i18n : Identifiers$1.i18nStart, params);
	    };
	    TemplateDefinitionBuilder.prototype.i18nEnd = function (span, selfClosing) {
	        var _this = this;
	        if (span === void 0) { span = null; }
	        if (!this.i18n) {
	            throw new Error('i18nEnd is executed with no i18n context present');
	        }
	        if (this.i18nContext) {
	            this.i18nContext.reconcileChildContext(this.i18n);
	            this.i18nUpdateRef(this.i18nContext);
	        }
	        else {
	            this.i18nUpdateRef(this.i18n);
	        }
	        // setup accumulated bindings
	        var _a = this.i18n, index = _a.index, bindings = _a.bindings;
	        if (bindings.size) {
	            var chainBindings_1 = [];
	            bindings.forEach(function (binding) {
	                chainBindings_1.push({ sourceSpan: span, value: function () { return _this.convertPropertyBinding(binding); } });
	            });
	            // for i18n block, advance to the most recent element index (by taking the current number of
	            // elements and subtracting one) before invoking `i18nExp` instructions, to make sure the
	            // necessary lifecycle hooks of components/directives are properly flushed.
	            this.updateInstructionChainWithAdvance(this.getConstCount() - 1, Identifiers$1.i18nExp, chainBindings_1);
	            this.updateInstruction(span, Identifiers$1.i18nApply, [literal(index)]);
	        }
	        if (!selfClosing) {
	            this.creationInstruction(span, Identifiers$1.i18nEnd);
	        }
	        this.i18n = null; // reset local i18n context
	    };
	    TemplateDefinitionBuilder.prototype.i18nAttributesInstruction = function (nodeIndex, attrs, sourceSpan) {
	        var _this = this;
	        var hasBindings = false;
	        var i18nAttrArgs = [];
	        var bindings = [];
	        attrs.forEach(function (attr) {
	            var message = attr.i18n;
	            if (attr instanceof TextAttribute) {
	                i18nAttrArgs.push(literal(attr.name), _this.i18nTranslate(message));
	            }
	            else {
	                var converted = attr.value.visit(_this._valueConverter);
	                _this.allocateBindingSlots(converted);
	                if (converted instanceof Interpolation) {
	                    var placeholders = assembleBoundTextPlaceholders(message);
	                    var params = placeholdersToParams(placeholders);
	                    i18nAttrArgs.push(literal(attr.name), _this.i18nTranslate(message, params));
	                    converted.expressions.forEach(function (expression) {
	                        hasBindings = true;
	                        bindings.push({
	                            sourceSpan: sourceSpan,
	                            value: function () { return _this.convertPropertyBinding(expression); },
	                        });
	                    });
	                }
	            }
	        });
	        if (bindings.length > 0) {
	            this.updateInstructionChainWithAdvance(nodeIndex, Identifiers$1.i18nExp, bindings);
	        }
	        if (i18nAttrArgs.length > 0) {
	            var index = literal(this.allocateDataSlot());
	            var args = this.constantPool.getConstLiteral(literalArr(i18nAttrArgs), true);
	            this.creationInstruction(sourceSpan, Identifiers$1.i18nAttributes, [index, args]);
	            if (hasBindings) {
	                this.updateInstruction(sourceSpan, Identifiers$1.i18nApply, [index]);
	            }
	        }
	    };
	    TemplateDefinitionBuilder.prototype.getNamespaceInstruction = function (namespaceKey) {
	        switch (namespaceKey) {
	            case 'math':
	                return Identifiers$1.namespaceMathML;
	            case 'svg':
	                return Identifiers$1.namespaceSVG;
	            default:
	                return Identifiers$1.namespaceHTML;
	        }
	    };
	    TemplateDefinitionBuilder.prototype.addNamespaceInstruction = function (nsInstruction, element) {
	        this._namespace = nsInstruction;
	        this.creationInstruction(element.sourceSpan, nsInstruction);
	    };
	    /**
	     * Adds an update instruction for an interpolated property or attribute, such as
	     * `prop="{{value}}"` or `attr.title="{{value}}"`
	     */
	    TemplateDefinitionBuilder.prototype.interpolatedUpdateInstruction = function (instruction, elementIndex, attrName, input, value, params) {
	        var _this = this;
	        this.updateInstructionWithAdvance(elementIndex, input.sourceSpan, instruction, function () { return __spread([literal(attrName)], _this.getUpdateInstructionArguments(value), params); });
	    };
	    TemplateDefinitionBuilder.prototype.visitContent = function (ngContent) {
	        var slot = this.allocateDataSlot();
	        var projectionSlotIdx = this._ngContentSelectorsOffset + this._ngContentReservedSlots.length;
	        var parameters = [literal(slot)];
	        this._ngContentReservedSlots.push(ngContent.selector);
	        var nonContentSelectAttributes = ngContent.attributes.filter(function (attr) { return attr.name.toLowerCase() !== NG_CONTENT_SELECT_ATTR$1; });
	        var attributes = this.getAttributeExpressions(nonContentSelectAttributes, [], []);
	        if (attributes.length > 0) {
	            parameters.push(literal(projectionSlotIdx), literalArr(attributes));
	        }
	        else if (projectionSlotIdx !== 0) {
	            parameters.push(literal(projectionSlotIdx));
	        }
	        this.creationInstruction(ngContent.sourceSpan, Identifiers$1.projection, parameters);
	        if (this.i18n) {
	            this.i18n.appendProjection(ngContent.i18n, slot);
	        }
	    };
	    TemplateDefinitionBuilder.prototype.visitElement = function (element) {
	        var e_1, _a;
	        var _this = this;
	        var elementIndex = this.allocateDataSlot();
	        var stylingBuilder = new StylingBuilder(null);
	        var isNonBindableMode = false;
	        var isI18nRootElement = isI18nRootNode(element.i18n) && !isSingleI18nIcu(element.i18n);
	        var i18nAttrs = [];
	        var outputAttrs = [];
	        var _b = __read(splitNsName(element.name), 2), namespaceKey = _b[0], elementName = _b[1];
	        var isNgContainer$1 = isNgContainer(element.name);
	        try {
	            // Handle styling, i18n, ngNonBindable attributes
	            for (var _c = __values(element.attributes), _d = _c.next(); !_d.done; _d = _c.next()) {
	                var attr = _d.value;
	                var name_1 = attr.name, value = attr.value;
	                if (name_1 === NON_BINDABLE_ATTR) {
	                    isNonBindableMode = true;
	                }
	                else if (name_1 === 'style') {
	                    stylingBuilder.registerStyleAttr(value);
	                }
	                else if (name_1 === 'class') {
	                    stylingBuilder.registerClassAttr(value);
	                }
	                else {
	                    (attr.i18n ? i18nAttrs : outputAttrs).push(attr);
	                }
	            }
	        }
	        catch (e_1_1) { e_1 = { error: e_1_1 }; }
	        finally {
	            try {
	                if (_d && !_d.done && (_a = _c.return)) _a.call(_c);
	            }
	            finally { if (e_1) throw e_1.error; }
	        }
	        // Match directives on non i18n attributes
	        this.matchDirectives(element.name, element);
	        // Regular element or ng-container creation mode
	        var parameters = [literal(elementIndex)];
	        if (!isNgContainer$1) {
	            parameters.push(literal(elementName));
	        }
	        // Add the attributes
	        var allOtherInputs = [];
	        element.inputs.forEach(function (input) {
	            var stylingInputWasSet = stylingBuilder.registerBoundInput(input);
	            if (!stylingInputWasSet) {
	                if (input.type === 0 /* Property */ && input.i18n) {
	                    i18nAttrs.push(input);
	                }
	                else {
	                    allOtherInputs.push(input);
	                }
	            }
	        });
	        // add attributes for directive and projection matching purposes
	        var attributes = this.getAttributeExpressions(outputAttrs, allOtherInputs, element.outputs, stylingBuilder, [], i18nAttrs);
	        parameters.push(this.addAttrsToConsts(attributes));
	        // local refs (ex.: <div #foo #bar="baz">)
	        var refs = this.prepareRefsArray(element.references);
	        parameters.push(this.addToConsts(refs));
	        var wasInNamespace = this._namespace;
	        var currentNamespace = this.getNamespaceInstruction(namespaceKey);
	        // If the namespace is changing now, include an instruction to change it
	        // during element creation.
	        if (currentNamespace !== wasInNamespace) {
	            this.addNamespaceInstruction(currentNamespace, element);
	        }
	        if (this.i18n) {
	            this.i18n.appendElement(element.i18n, elementIndex);
	        }
	        // Note that we do not append text node instructions and ICUs inside i18n section,
	        // so we exclude them while calculating whether current element has children
	        var hasChildren = (!isI18nRootElement && this.i18n) ? !hasTextChildrenOnly(element.children) :
	            element.children.length > 0;
	        var createSelfClosingInstruction = !stylingBuilder.hasBindingsWithPipes &&
	            element.outputs.length === 0 && i18nAttrs.length === 0 && !hasChildren;
	        var createSelfClosingI18nInstruction = !createSelfClosingInstruction && hasTextChildrenOnly(element.children);
	        if (createSelfClosingInstruction) {
	            this.creationInstruction(element.sourceSpan, isNgContainer$1 ? Identifiers$1.elementContainer : Identifiers$1.element, trimTrailingNulls(parameters));
	        }
	        else {
	            this.creationInstruction(element.sourceSpan, isNgContainer$1 ? Identifiers$1.elementContainerStart : Identifiers$1.elementStart, trimTrailingNulls(parameters));
	            if (isNonBindableMode) {
	                this.creationInstruction(element.sourceSpan, Identifiers$1.disableBindings);
	            }
	            if (i18nAttrs.length > 0) {
	                this.i18nAttributesInstruction(elementIndex, i18nAttrs, element.sourceSpan);
	            }
	            // Generate Listeners (outputs)
	            if (element.outputs.length > 0) {
	                var listeners = element.outputs.map(function (outputAst) { return ({
	                    sourceSpan: outputAst.sourceSpan,
	                    params: _this.prepareListenerParameter(element.name, outputAst, elementIndex)
	                }); });
	                this.creationInstructionChain(Identifiers$1.listener, listeners);
	            }
	            // Note: it's important to keep i18n/i18nStart instructions after i18nAttributes and
	            // listeners, to make sure i18nAttributes instruction targets current element at runtime.
	            if (isI18nRootElement) {
	                this.i18nStart(element.sourceSpan, element.i18n, createSelfClosingI18nInstruction);
	            }
	        }
	        // the code here will collect all update-level styling instructions and add them to the
	        // update block of the template function AOT code. Instructions like `styleProp`,
	        // `styleMap`, `classMap`, `classProp`
	        // are all generated and assigned in the code below.
	        var stylingInstructions = stylingBuilder.buildUpdateLevelInstructions(this._valueConverter);
	        var limit = stylingInstructions.length - 1;
	        for (var i = 0; i <= limit; i++) {
	            var instruction_1 = stylingInstructions[i];
	            this._bindingSlots += this.processStylingUpdateInstruction(elementIndex, instruction_1);
	        }
	        // the reason why `undefined` is used is because the renderer understands this as a
	        // special value to symbolize that there is no RHS to this binding
	        // TODO (matsko): revisit this once FW-959 is approached
	        var emptyValueBindInstruction = literal(undefined);
	        var propertyBindings = [];
	        var attributeBindings = [];
	        // Generate element input bindings
	        allOtherInputs.forEach(function (input) {
	            var inputType = input.type;
	            if (inputType === 4 /* Animation */) {
	                var value_1 = input.value.visit(_this._valueConverter);
	                // animation bindings can be presented in the following formats:
	                // 1. [@binding]="fooExp"
	                // 2. [@binding]="{value:fooExp, params:{...}}"
	                // 3. [@binding]
	                // 4. @binding
	                // All formats will be valid for when a synthetic binding is created.
	                // The reasoning for this is because the renderer should get each
	                // synthetic binding value in the order of the array that they are
	                // defined in...
	                var hasValue_1 = value_1 instanceof LiteralPrimitive ? !!value_1.value : true;
	                _this.allocateBindingSlots(value_1);
	                propertyBindings.push({
	                    name: prepareSyntheticPropertyName(input.name),
	                    sourceSpan: input.sourceSpan,
	                    value: function () { return hasValue_1 ? _this.convertPropertyBinding(value_1) : emptyValueBindInstruction; }
	                });
	            }
	            else {
	                // we must skip attributes with associated i18n context, since these attributes are handled
	                // separately and corresponding `i18nExp` and `i18nApply` instructions will be generated
	                if (input.i18n)
	                    return;
	                var value_2 = input.value.visit(_this._valueConverter);
	                if (value_2 !== undefined) {
	                    var params_2 = [];
	                    var _a = __read(splitNsName(input.name), 2), attrNamespace = _a[0], attrName_1 = _a[1];
	                    var isAttributeBinding = inputType === 1 /* Attribute */;
	                    var sanitizationRef = resolveSanitizationFn(input.securityContext, isAttributeBinding);
	                    if (sanitizationRef)
	                        params_2.push(sanitizationRef);
	                    if (attrNamespace) {
	                        var namespaceLiteral = literal(attrNamespace);
	                        if (sanitizationRef) {
	                            params_2.push(namespaceLiteral);
	                        }
	                        else {
	                            // If there wasn't a sanitization ref, we need to add
	                            // an extra param so that we can pass in the namespace.
	                            params_2.push(literal(null), namespaceLiteral);
	                        }
	                    }
	                    _this.allocateBindingSlots(value_2);
	                    if (inputType === 0 /* Property */) {
	                        if (value_2 instanceof Interpolation) {
	                            // prop="{{value}}" and friends
	                            _this.interpolatedUpdateInstruction(getPropertyInterpolationExpression(value_2), elementIndex, attrName_1, input, value_2, params_2);
	                        }
	                        else {
	                            // [prop]="value"
	                            // Collect all the properties so that we can chain into a single function at the end.
	                            propertyBindings.push({
	                                name: attrName_1,
	                                sourceSpan: input.sourceSpan,
	                                value: function () { return _this.convertPropertyBinding(value_2); },
	                                params: params_2
	                            });
	                        }
	                    }
	                    else if (inputType === 1 /* Attribute */) {
	                        if (value_2 instanceof Interpolation && getInterpolationArgsLength(value_2) > 1) {
	                            // attr.name="text{{value}}" and friends
	                            _this.interpolatedUpdateInstruction(getAttributeInterpolationExpression(value_2), elementIndex, attrName_1, input, value_2, params_2);
	                        }
	                        else {
	                            var boundValue_1 = value_2 instanceof Interpolation ? value_2.expressions[0] : value_2;
	                            // [attr.name]="value" or attr.name="{{value}}"
	                            // Collect the attribute bindings so that they can be chained at the end.
	                            attributeBindings.push({
	                                name: attrName_1,
	                                sourceSpan: input.sourceSpan,
	                                value: function () { return _this.convertPropertyBinding(boundValue_1); },
	                                params: params_2
	                            });
	                        }
	                    }
	                    else {
	                        // class prop
	                        _this.updateInstructionWithAdvance(elementIndex, input.sourceSpan, Identifiers$1.classProp, function () {
	                            return __spread([
	                                literal(elementIndex), literal(attrName_1), _this.convertPropertyBinding(value_2)
	                            ], params_2);
	                        });
	                    }
	                }
	            }
	        });
	        if (propertyBindings.length > 0) {
	            this.updateInstructionChainWithAdvance(elementIndex, Identifiers$1.property, propertyBindings);
	        }
	        if (attributeBindings.length > 0) {
	            this.updateInstructionChainWithAdvance(elementIndex, Identifiers$1.attribute, attributeBindings);
	        }
	        // Traverse element child nodes
	        visitAll(this, element.children);
	        if (!isI18nRootElement && this.i18n) {
	            this.i18n.appendElement(element.i18n, elementIndex, true);
	        }
	        if (!createSelfClosingInstruction) {
	            // Finish element construction mode.
	            var span = element.endSourceSpan || element.sourceSpan;
	            if (isI18nRootElement) {
	                this.i18nEnd(span, createSelfClosingI18nInstruction);
	            }
	            if (isNonBindableMode) {
	                this.creationInstruction(span, Identifiers$1.enableBindings);
	            }
	            this.creationInstruction(span, isNgContainer$1 ? Identifiers$1.elementContainerEnd : Identifiers$1.elementEnd);
	        }
	    };
	    TemplateDefinitionBuilder.prototype.visitTemplate = function (template) {
	        var _this = this;
	        var NG_TEMPLATE_TAG_NAME = 'ng-template';
	        var templateIndex = this.allocateDataSlot();
	        if (this.i18n) {
	            this.i18n.appendTemplate(template.i18n, templateIndex);
	        }
	        var tagName = sanitizeIdentifier(template.tagName || '');
	        var contextName = "" + this.contextName + (tagName ? '_' + tagName : '') + "_" + templateIndex;
	        var templateName = contextName + "_Template";
	        var parameters = [
	            literal(templateIndex),
	            variable(templateName),
	            // We don't care about the tag's namespace here, because we infer
	            // it based on the parent nodes inside the template instruction.
	            literal(template.tagName ? splitNsName(template.tagName)[1] : template.tagName),
	        ];
	        // find directives matching on a given <ng-template> node
	        this.matchDirectives(NG_TEMPLATE_TAG_NAME, template);
	        // prepare attributes parameter (including attributes used for directive matching)
	        var _a = __read(partitionArray(template.attributes, hasI18nMeta), 2), i18nStaticAttrs = _a[0], staticAttrs = _a[1];
	        var attrsExprs = this.getAttributeExpressions(staticAttrs, template.inputs, template.outputs, undefined /* styles */, template.templateAttrs, i18nStaticAttrs);
	        parameters.push(this.addAttrsToConsts(attrsExprs));
	        // local refs (ex.: <ng-template #foo>)
	        if (template.references && template.references.length) {
	            var refs = this.prepareRefsArray(template.references);
	            parameters.push(this.addToConsts(refs));
	            parameters.push(importExpr(Identifiers$1.templateRefExtractor));
	        }
	        // Create the template function
	        var templateVisitor = new TemplateDefinitionBuilder(this.constantPool, this._bindingScope, this.level + 1, contextName, this.i18n, templateIndex, templateName, this.directiveMatcher, this.directives, this.pipeTypeByName, this.pipes, this._namespace, this.fileBasedI18nSuffix, this.i18nUseExternalIds, this._constants);
	        // Nested templates must not be visited until after their parent templates have completed
	        // processing, so they are queued here until after the initial pass. Otherwise, we wouldn't
	        // be able to support bindings in nested templates to local refs that occur after the
	        // template definition. e.g. <div *ngIf="showing">{{ foo }}</div>  <div #foo></div>
	        this._nestedTemplateFns.push(function () {
	            var _a;
	            var templateFunctionExpr = templateVisitor.buildTemplateFunction(template.children, template.variables, _this._ngContentReservedSlots.length + _this._ngContentSelectorsOffset, template.i18n);
	            _this.constantPool.statements.push(templateFunctionExpr.toDeclStmt(templateName, null));
	            if (templateVisitor._ngContentReservedSlots.length) {
	                (_a = _this._ngContentReservedSlots).push.apply(_a, __spread(templateVisitor._ngContentReservedSlots));
	            }
	        });
	        // e.g. template(1, MyComp_Template_1)
	        this.creationInstruction(template.sourceSpan, Identifiers$1.templateCreate, function () {
	            parameters.splice(2, 0, literal(templateVisitor.getConstCount()), literal(templateVisitor.getVarCount()));
	            return trimTrailingNulls(parameters);
	        });
	        // handle property bindings e.g. ÉµÉµproperty('ngForOf', ctx.items), et al;
	        this.templatePropertyBindings(templateIndex, template.templateAttrs);
	        // Only add normal input/output binding instructions on explicit <ng-template> elements.
	        if (template.tagName === NG_TEMPLATE_TAG_NAME) {
	            var _b = __read(partitionArray(template.inputs, hasI18nMeta), 2), i18nInputs = _b[0], inputs = _b[1];
	            var i18nAttrs = __spread(i18nStaticAttrs, i18nInputs);
	            // Add i18n attributes that may act as inputs to directives. If such attributes are present,
	            // generate `i18nAttributes` instruction. Note: we generate it only for explicit <ng-template>
	            // elements, in case of inline templates, corresponding instructions will be generated in the
	            // nested template function.
	            if (i18nAttrs.length > 0) {
	                this.i18nAttributesInstruction(templateIndex, i18nAttrs, template.sourceSpan);
	            }
	            // Add the input bindings
	            if (inputs.length > 0) {
	                this.templatePropertyBindings(templateIndex, inputs);
	            }
	            // Generate listeners for directive output
	            if (template.outputs.length > 0) {
	                var listeners = template.outputs.map(function (outputAst) { return ({
	                    sourceSpan: outputAst.sourceSpan,
	                    params: _this.prepareListenerParameter('ng_template', outputAst, templateIndex)
	                }); });
	                this.creationInstructionChain(Identifiers$1.listener, listeners);
	            }
	        }
	    };
	    TemplateDefinitionBuilder.prototype.visitBoundText = function (text) {
	        var _this = this;
	        if (this.i18n) {
	            var value_3 = text.value.visit(this._valueConverter);
	            this.allocateBindingSlots(value_3);
	            if (value_3 instanceof Interpolation) {
	                this.i18n.appendBoundText(text.i18n);
	                this.i18nAppendBindings(value_3.expressions);
	            }
	            return;
	        }
	        var nodeIndex = this.allocateDataSlot();
	        this.creationInstruction(text.sourceSpan, Identifiers$1.text, [literal(nodeIndex)]);
	        var value = text.value.visit(this._valueConverter);
	        this.allocateBindingSlots(value);
	        if (value instanceof Interpolation) {
	            this.updateInstructionWithAdvance(nodeIndex, text.sourceSpan, getTextInterpolationExpression(value), function () { return _this.getUpdateInstructionArguments(value); });
	        }
	        else {
	            error('Text nodes should be interpolated and never bound directly.');
	        }
	    };
	    TemplateDefinitionBuilder.prototype.visitText = function (text) {
	        // when a text element is located within a translatable
	        // block, we exclude this text element from instructions set,
	        // since it will be captured in i18n content and processed at runtime
	        if (!this.i18n) {
	            this.creationInstruction(text.sourceSpan, Identifiers$1.text, [literal(this.allocateDataSlot()), literal(text.value)]);
	        }
	    };
	    TemplateDefinitionBuilder.prototype.visitIcu = function (icu) {
	        var initWasInvoked = false;
	        // if an ICU was created outside of i18n block, we still treat
	        // it as a translatable entity and invoke i18nStart and i18nEnd
	        // to generate i18n context and the necessary instructions
	        if (!this.i18n) {
	            initWasInvoked = true;
	            this.i18nStart(null, icu.i18n, true);
	        }
	        var i18n = this.i18n;
	        var vars = this.i18nBindProps(icu.vars);
	        var placeholders = this.i18nBindProps(icu.placeholders);
	        // output ICU directly and keep ICU reference in context
	        var message = icu.i18n;
	        // we always need post-processing function for ICUs, to make sure that:
	        // - all placeholders in a form of {PLACEHOLDER} are replaced with actual values (note:
	        // `goog.getMsg` does not process ICUs and uses the `{PLACEHOLDER}` format for placeholders
	        // inside ICUs)
	        // - all ICU vars (such as `VAR_SELECT` or `VAR_PLURAL`) are replaced with correct values
	        var transformFn = function (raw) {
	            var params = __assign(__assign({}, vars), placeholders);
	            var formatted = i18nFormatPlaceholderNames(params, /* useCamelCase */ false);
	            return instruction(null, Identifiers$1.i18nPostprocess, [raw, mapLiteral(formatted, true)]);
	        };
	        // in case the whole i18n message is a single ICU - we do not need to
	        // create a separate top-level translation, we can use the root ref instead
	        // and make this ICU a top-level translation
	        // note: ICU placeholders are replaced with actual values in `i18nPostprocess` function
	        // separately, so we do not pass placeholders into `i18nTranslate` function.
	        if (isSingleI18nIcu(i18n.meta)) {
	            this.i18nTranslate(message, /* placeholders */ {}, i18n.ref, transformFn);
	        }
	        else {
	            // output ICU directly and keep ICU reference in context
	            var ref = this.i18nTranslate(message, /* placeholders */ {}, /* ref */ undefined, transformFn);
	            i18n.appendIcu(icuFromI18nMessage(message).name, ref);
	        }
	        if (initWasInvoked) {
	            this.i18nEnd(null, true);
	        }
	        return null;
	    };
	    TemplateDefinitionBuilder.prototype.allocateDataSlot = function () {
	        return this._dataIndex++;
	    };
	    TemplateDefinitionBuilder.prototype.getConstCount = function () {
	        return this._dataIndex;
	    };
	    TemplateDefinitionBuilder.prototype.getVarCount = function () {
	        return this._pureFunctionSlots;
	    };
	    TemplateDefinitionBuilder.prototype.getConsts = function () {
	        return this._constants;
	    };
	    TemplateDefinitionBuilder.prototype.getNgContentSelectors = function () {
	        return this._ngContentReservedSlots.length ?
	            this.constantPool.getConstLiteral(asLiteral(this._ngContentReservedSlots), true) :
	            null;
	    };
	    TemplateDefinitionBuilder.prototype.bindingContext = function () {
	        return "" + this._bindingContext++;
	    };
	    TemplateDefinitionBuilder.prototype.templatePropertyBindings = function (templateIndex, attrs) {
	        var _this = this;
	        var propertyBindings = [];
	        attrs.forEach(function (input) {
	            if (input instanceof BoundAttribute) {
	                var value_4 = input.value.visit(_this._valueConverter);
	                if (value_4 !== undefined) {
	                    _this.allocateBindingSlots(value_4);
	                    if (value_4 instanceof Interpolation) {
	                        // Params typically contain attribute namespace and value sanitizer, which is applicable
	                        // for regular HTML elements, but not applicable for <ng-template> (since props act as
	                        // inputs to directives), so keep params array empty.
	                        var params = [];
	                        // prop="{{value}}" case
	                        _this.interpolatedUpdateInstruction(getPropertyInterpolationExpression(value_4), templateIndex, input.name, input, value_4, params);
	                    }
	                    else {
	                        // [prop]="value" case
	                        propertyBindings.push({
	                            name: input.name,
	                            sourceSpan: input.sourceSpan,
	                            value: function () { return _this.convertPropertyBinding(value_4); }
	                        });
	                    }
	                }
	            }
	        });
	        if (propertyBindings.length > 0) {
	            this.updateInstructionChainWithAdvance(templateIndex, Identifiers$1.property, propertyBindings);
	        }
	    };
	    // Bindings must only be resolved after all local refs have been visited, so all
	    // instructions are queued in callbacks that execute once the initial pass has completed.
	    // Otherwise, we wouldn't be able to support local refs that are defined after their
	    // bindings. e.g. {{ foo }} <div #foo></div>
	    TemplateDefinitionBuilder.prototype.instructionFn = function (fns, span, reference, paramsOrFn, prepend) {
	        if (prepend === void 0) { prepend = false; }
	        fns[prepend ? 'unshift' : 'push'](function () {
	            var params = Array.isArray(paramsOrFn) ? paramsOrFn : paramsOrFn();
	            return instruction(span, reference, params).toStmt();
	        });
	    };
	    TemplateDefinitionBuilder.prototype.processStylingUpdateInstruction = function (elementIndex, instruction) {
	        var _this = this;
	        var allocateBindingSlots = 0;
	        if (instruction) {
	            var calls_1 = [];
	            instruction.calls.forEach(function (call) {
	                allocateBindingSlots += call.allocateBindingSlots;
	                calls_1.push({
	                    sourceSpan: call.sourceSpan,
	                    value: function () {
	                        return call.params(function (value) { return (call.supportsInterpolation && value instanceof Interpolation) ?
	                            _this.getUpdateInstructionArguments(value) :
	                            _this.convertPropertyBinding(value); });
	                    }
	                });
	            });
	            this.updateInstructionChainWithAdvance(elementIndex, instruction.reference, calls_1);
	        }
	        return allocateBindingSlots;
	    };
	    TemplateDefinitionBuilder.prototype.creationInstruction = function (span, reference, paramsOrFn, prepend) {
	        this.instructionFn(this._creationCodeFns, span, reference, paramsOrFn || [], prepend);
	    };
	    TemplateDefinitionBuilder.prototype.creationInstructionChain = function (reference, calls) {
	        var span = calls.length ? calls[0].sourceSpan : null;
	        this._creationCodeFns.push(function () {
	            return chainedInstruction(reference, calls.map(function (call) { return call.params(); }), span).toStmt();
	        });
	    };
	    TemplateDefinitionBuilder.prototype.updateInstructionWithAdvance = function (nodeIndex, span, reference, paramsOrFn) {
	        this.addAdvanceInstructionIfNecessary(nodeIndex, span);
	        this.updateInstruction(span, reference, paramsOrFn);
	    };
	    TemplateDefinitionBuilder.prototype.updateInstruction = function (span, reference, paramsOrFn) {
	        this.instructionFn(this._updateCodeFns, span, reference, paramsOrFn || []);
	    };
	    TemplateDefinitionBuilder.prototype.updateInstructionChain = function (reference, bindings) {
	        var span = bindings.length ? bindings[0].sourceSpan : null;
	        this._updateCodeFns.push(function () {
	            var calls = bindings.map(function (property) {
	                var value = property.value();
	                var fnParams = Array.isArray(value) ? value : [value];
	                if (property.params) {
	                    fnParams.push.apply(fnParams, __spread(property.params));
	                }
	                if (property.name) {
	                    // We want the property name to always be the first function parameter.
	                    fnParams.unshift(literal(property.name));
	                }
	                return fnParams;
	            });
	            return chainedInstruction(reference, calls, span).toStmt();
	        });
	    };
	    TemplateDefinitionBuilder.prototype.updateInstructionChainWithAdvance = function (nodeIndex, reference, bindings) {
	        this.addAdvanceInstructionIfNecessary(nodeIndex, bindings.length ? bindings[0].sourceSpan : null);
	        this.updateInstructionChain(reference, bindings);
	    };
	    TemplateDefinitionBuilder.prototype.addAdvanceInstructionIfNecessary = function (nodeIndex, span) {
	        if (nodeIndex !== this._currentIndex) {
	            var delta = nodeIndex - this._currentIndex;
	            if (delta < 1) {
	                throw new Error('advance instruction can only go forwards');
	            }
	            this.instructionFn(this._updateCodeFns, span, Identifiers$1.advance, [literal(delta)]);
	            this._currentIndex = nodeIndex;
	        }
	    };
	    TemplateDefinitionBuilder.prototype.allocatePureFunctionSlots = function (numSlots) {
	        var originalSlots = this._pureFunctionSlots;
	        this._pureFunctionSlots += numSlots;
	        return originalSlots;
	    };
	    TemplateDefinitionBuilder.prototype.allocateBindingSlots = function (value) {
	        this._bindingSlots += value instanceof Interpolation ? value.expressions.length : 1;
	    };
	    /**
	     * Gets an expression that refers to the implicit receiver. The implicit
	     * receiver is always the root level context.
	     */
	    TemplateDefinitionBuilder.prototype.getImplicitReceiverExpr = function () {
	        if (this._implicitReceiverExpr) {
	            return this._implicitReceiverExpr;
	        }
	        return this._implicitReceiverExpr = this.level === 0 ?
	            variable(CONTEXT_NAME) :
	            this._bindingScope.getOrCreateSharedContextVar(0);
	    };
	    TemplateDefinitionBuilder.prototype.convertPropertyBinding = function (value) {
	        var _a;
	        var convertedPropertyBinding = convertPropertyBinding(this, this.getImplicitReceiverExpr(), value, this.bindingContext(), BindingForm.TrySimple, function () { return error('Unexpected interpolation'); });
	        var valExpr = convertedPropertyBinding.currValExpr;
	        (_a = this._tempVariables).push.apply(_a, __spread(convertedPropertyBinding.stmts));
	        return valExpr;
	    };
	    /**
	     * Gets a list of argument expressions to pass to an update instruction expression. Also updates
	     * the temp variables state with temp variables that were identified as needing to be created
	     * while visiting the arguments.
	     * @param value The original expression we will be resolving an arguments list from.
	     */
	    TemplateDefinitionBuilder.prototype.getUpdateInstructionArguments = function (value) {
	        var _a;
	        var _b = convertUpdateArguments(this, this.getImplicitReceiverExpr(), value, this.bindingContext()), args = _b.args, stmts = _b.stmts;
	        (_a = this._tempVariables).push.apply(_a, __spread(stmts));
	        return args;
	    };
	    TemplateDefinitionBuilder.prototype.matchDirectives = function (elementName, elOrTpl) {
	        var _this = this;
	        if (this.directiveMatcher) {
	            var selector = createCssSelector(elementName, getAttrsForDirectiveMatching(elOrTpl));
	            this.directiveMatcher.match(selector, function (cssSelector, staticType) {
	                _this.directives.add(staticType);
	            });
	        }
	    };
	    /**
	     * Prepares all attribute expression values for the `TAttributes` array.
	     *
	     * The purpose of this function is to properly construct an attributes array that
	     * is passed into the `elementStart` (or just `element`) functions. Because there
	     * are many different types of attributes, the array needs to be constructed in a
	     * special way so that `elementStart` can properly evaluate them.
	     *
	     * The format looks like this:
	     *
	     * ```
	     * attrs = [prop, value, prop2, value2,
	     *   PROJECT_AS, selector,
	     *   CLASSES, class1, class2,
	     *   STYLES, style1, value1, style2, value2,
	     *   BINDINGS, name1, name2, name3,
	     *   TEMPLATE, name4, name5, name6,
	     *   I18N, name7, name8, ...]
	     * ```
	     *
	     * Note that this function will fully ignore all synthetic (@foo) attribute values
	     * because those values are intended to always be generated as property instructions.
	     */
	    TemplateDefinitionBuilder.prototype.getAttributeExpressions = function (renderAttributes, inputs, outputs, styles, templateAttrs, i18nAttrs) {
	        if (templateAttrs === void 0) { templateAttrs = []; }
	        if (i18nAttrs === void 0) { i18nAttrs = []; }
	        var alreadySeen = new Set();
	        var attrExprs = [];
	        var ngProjectAsAttr;
	        renderAttributes.forEach(function (attr) {
	            if (attr.name === NG_PROJECT_AS_ATTR_NAME) {
	                ngProjectAsAttr = attr;
	            }
	            attrExprs.push.apply(attrExprs, __spread(getAttributeNameLiterals(attr.name), [asLiteral(attr.value)]));
	        });
	        // Keep ngProjectAs next to the other name, value pairs so we can verify that we match
	        // ngProjectAs marker in the attribute name slot.
	        if (ngProjectAsAttr) {
	            attrExprs.push.apply(attrExprs, __spread(getNgProjectAsLiteral(ngProjectAsAttr)));
	        }
	        function addAttrExpr(key, value) {
	            if (typeof key === 'string') {
	                if (!alreadySeen.has(key)) {
	                    attrExprs.push.apply(attrExprs, __spread(getAttributeNameLiterals(key)));
	                    value !== undefined && attrExprs.push(value);
	                    alreadySeen.add(key);
	                }
	            }
	            else {
	                attrExprs.push(literal(key));
	            }
	        }
	        // it's important that this occurs before BINDINGS and TEMPLATE because once `elementStart`
	        // comes across the BINDINGS or TEMPLATE markers then it will continue reading each value as
	        // as single property value cell by cell.
	        if (styles) {
	            styles.populateInitialStylingAttrs(attrExprs);
	        }
	        if (inputs.length || outputs.length) {
	            var attrsLengthBeforeInputs = attrExprs.length;
	            for (var i = 0; i < inputs.length; i++) {
	                var input = inputs[i];
	                // We don't want the animation and attribute bindings in the
	                // attributes array since they aren't used for directive matching.
	                if (input.type !== 4 /* Animation */ && input.type !== 1 /* Attribute */) {
	                    addAttrExpr(input.name);
	                }
	            }
	            for (var i = 0; i < outputs.length; i++) {
	                var output = outputs[i];
	                if (output.type !== 1 /* Animation */) {
	                    addAttrExpr(output.name);
	                }
	            }
	            // this is a cheap way of adding the marker only after all the input/output
	            // values have been filtered (by not including the animation ones) and added
	            // to the expressions. The marker is important because it tells the runtime
	            // code that this is where attributes without values start...
	            if (attrExprs.length !== attrsLengthBeforeInputs) {
	                attrExprs.splice(attrsLengthBeforeInputs, 0, literal(3 /* Bindings */));
	            }
	        }
	        if (templateAttrs.length) {
	            attrExprs.push(literal(4 /* Template */));
	            templateAttrs.forEach(function (attr) { return addAttrExpr(attr.name); });
	        }
	        if (i18nAttrs.length) {
	            attrExprs.push(literal(6 /* I18n */));
	            i18nAttrs.forEach(function (attr) { return addAttrExpr(attr.name); });
	        }
	        return attrExprs;
	    };
	    TemplateDefinitionBuilder.prototype.addToConsts = function (expression) {
	        if (isNull(expression)) {
	            return TYPED_NULL_EXPR;
	        }
	        // Try to reuse a literal that's already in the array, if possible.
	        for (var i = 0; i < this._constants.length; i++) {
	            if (this._constants[i].isEquivalent(expression)) {
	                return literal(i);
	            }
	        }
	        return literal(this._constants.push(expression) - 1);
	    };
	    TemplateDefinitionBuilder.prototype.addAttrsToConsts = function (attrs) {
	        return attrs.length > 0 ? this.addToConsts(literalArr(attrs)) : TYPED_NULL_EXPR;
	    };
	    TemplateDefinitionBuilder.prototype.prepareRefsArray = function (references) {
	        var _this = this;
	        if (!references || references.length === 0) {
	            return TYPED_NULL_EXPR;
	        }
	        var refsParam = flatten(references.map(function (reference) {
	            var slot = _this.allocateDataSlot();
	            // Generate the update temporary.
	            var variableName = _this._bindingScope.freshReferenceName();
	            var retrievalLevel = _this.level;
	            var lhs = variable(variableName);
	            _this._bindingScope.set(retrievalLevel, reference.name, lhs, 0 /* DEFAULT */, function (scope, relativeLevel) {
	                // e.g. nextContext(2);
	                var nextContextStmt = relativeLevel > 0 ? [generateNextContextExpr(relativeLevel).toStmt()] : [];
	                // e.g. const $foo$ = reference(1);
	                var refExpr = lhs.set(importExpr(Identifiers$1.reference).callFn([literal(slot)]));
	                return nextContextStmt.concat(refExpr.toConstDecl());
	            }, true);
	            return [reference.name, reference.value];
	        }));
	        return asLiteral(refsParam);
	    };
	    TemplateDefinitionBuilder.prototype.prepareListenerParameter = function (tagName, outputAst, index) {
	        var _this = this;
	        return function () {
	            var eventName = outputAst.name;
	            var bindingFnName = outputAst.type === 1 /* Animation */ ?
	                // synthetic @listener.foo values are treated the exact same as are standard listeners
	                prepareSyntheticListenerFunctionName(eventName, outputAst.phase) :
	                sanitizeIdentifier(eventName);
	            var handlerName = _this.templateName + "_" + tagName + "_" + bindingFnName + "_" + index + "_listener";
	            var scope = _this._bindingScope.nestedScope(_this._bindingScope.bindingLevel);
	            return prepareEventListenerParameters(outputAst, handlerName, scope);
	        };
	    };
	    return TemplateDefinitionBuilder;
	}());
	var ValueConverter = /** @class */ (function (_super) {
	    __extends(ValueConverter, _super);
	    function ValueConverter(constantPool, allocateSlot, allocatePureFunctionSlots, definePipe) {
	        var _this = _super.call(this) || this;
	        _this.constantPool = constantPool;
	        _this.allocateSlot = allocateSlot;
	        _this.allocatePureFunctionSlots = allocatePureFunctionSlots;
	        _this.definePipe = definePipe;
	        _this._pipeBindExprs = [];
	        return _this;
	    }
	    // AstMemoryEfficientTransformer
	    ValueConverter.prototype.visitPipe = function (pipe, context) {
	        // Allocate a slot to create the pipe
	        var slot = this.allocateSlot();
	        var slotPseudoLocal = "PIPE:" + slot;
	        // Allocate one slot for the result plus one slot per pipe argument
	        var pureFunctionSlot = this.allocatePureFunctionSlots(2 + pipe.args.length);
	        var target = new PropertyRead(pipe.span, pipe.sourceSpan, new ImplicitReceiver(pipe.span, pipe.sourceSpan), slotPseudoLocal);
	        var _a = pipeBindingCallInfo(pipe.args), identifier = _a.identifier, isVarLength = _a.isVarLength;
	        this.definePipe(pipe.name, slotPseudoLocal, slot, importExpr(identifier));
	        var args = __spread([pipe.exp], pipe.args);
	        var convertedArgs = isVarLength ?
	            this.visitAll([new LiteralArray(pipe.span, pipe.sourceSpan, args)]) :
	            this.visitAll(args);
	        var pipeBindExpr = new FunctionCall(pipe.span, pipe.sourceSpan, target, __spread([
	            new LiteralPrimitive(pipe.span, pipe.sourceSpan, slot),
	            new LiteralPrimitive(pipe.span, pipe.sourceSpan, pureFunctionSlot)
	        ], convertedArgs));
	        this._pipeBindExprs.push(pipeBindExpr);
	        return pipeBindExpr;
	    };
	    ValueConverter.prototype.updatePipeSlotOffsets = function (bindingSlots) {
	        this._pipeBindExprs.forEach(function (pipe) {
	            // update the slot offset arg (index 1) to account for binding slots
	            var slotOffset = pipe.args[1];
	            slotOffset.value += bindingSlots;
	        });
	    };
	    ValueConverter.prototype.visitLiteralArray = function (array, context) {
	        var _this = this;
	        return new BuiltinFunctionCall(array.span, array.sourceSpan, this.visitAll(array.expressions), function (values) {
	            // If the literal has calculated (non-literal) elements transform it into
	            // calls to literal factories that compose the literal and will cache intermediate
	            // values.
	            var literal = literalArr(values);
	            return getLiteralFactory(_this.constantPool, literal, _this.allocatePureFunctionSlots);
	        });
	    };
	    ValueConverter.prototype.visitLiteralMap = function (map, context) {
	        var _this = this;
	        return new BuiltinFunctionCall(map.span, map.sourceSpan, this.visitAll(map.values), function (values) {
	            // If the literal has calculated (non-literal) elements  transform it into
	            // calls to literal factories that compose the literal and will cache intermediate
	            // values.
	            var literal = literalMap(values.map(function (value, index) { return ({ key: map.keys[index].key, value: value, quoted: map.keys[index].quoted }); }));
	            return getLiteralFactory(_this.constantPool, literal, _this.allocatePureFunctionSlots);
	        });
	    };
	    return ValueConverter;
	}(AstMemoryEfficientTransformer));
	// Pipes always have at least one parameter, the value they operate on
	var pipeBindingIdentifiers = [Identifiers$1.pipeBind1, Identifiers$1.pipeBind2, Identifiers$1.pipeBind3, Identifiers$1.pipeBind4];
	function pipeBindingCallInfo(args) {
	    var identifier = pipeBindingIdentifiers[args.length];
	    return {
	        identifier: identifier || Identifiers$1.pipeBindV,
	        isVarLength: !identifier,
	    };
	}
	var pureFunctionIdentifiers = [
	    Identifiers$1.pureFunction0, Identifiers$1.pureFunction1, Identifiers$1.pureFunction2, Identifiers$1.pureFunction3, Identifiers$1.pureFunction4,
	    Identifiers$1.pureFunction5, Identifiers$1.pureFunction6, Identifiers$1.pureFunction7, Identifiers$1.pureFunction8
	];
	function pureFunctionCallInfo(args) {
	    var identifier = pureFunctionIdentifiers[args.length];
	    return {
	        identifier: identifier || Identifiers$1.pureFunctionV,
	        isVarLength: !identifier,
	    };
	}
	function instruction(span, reference, params) {
	    return importExpr(reference, null, span).callFn(params, span);
	}
	// e.g. x(2);
	function generateNextContextExpr(relativeLevelDiff) {
	    return importExpr(Identifiers$1.nextContext)
	        .callFn(relativeLevelDiff > 1 ? [literal(relativeLevelDiff)] : []);
	}
	function getLiteralFactory(constantPool, literal$1, allocateSlots) {
	    var _a = constantPool.getLiteralFactory(literal$1), literalFactory = _a.literalFactory, literalFactoryArguments = _a.literalFactoryArguments;
	    // Allocate 1 slot for the result plus 1 per argument
	    var startSlot = allocateSlots(1 + literalFactoryArguments.length);
	    var _b = pureFunctionCallInfo(literalFactoryArguments), identifier = _b.identifier, isVarLength = _b.isVarLength;
	    // Literal factories are pure functions that only need to be re-invoked when the parameters
	    // change.
	    var args = [literal(startSlot), literalFactory];
	    if (isVarLength) {
	        args.push(literalArr(literalFactoryArguments));
	    }
	    else {
	        args.push.apply(args, __spread(literalFactoryArguments));
	    }
	    return importExpr(identifier).callFn(args);
	}
	/**
	 * Gets an array of literals that can be added to an expression
	 * to represent the name and namespace of an attribute. E.g.
	 * `:xlink:href` turns into `[AttributeMarker.NamespaceURI, 'xlink', 'href']`.
	 *
	 * @param name Name of the attribute, including the namespace.
	 */
	function getAttributeNameLiterals(name) {
	    var _a = __read(splitNsName(name), 2), attributeNamespace = _a[0], attributeName = _a[1];
	    var nameLiteral = literal(attributeName);
	    if (attributeNamespace) {
	        return [
	            literal(0 /* NamespaceURI */), literal(attributeNamespace), nameLiteral
	        ];
	    }
	    return [nameLiteral];
	}
	/** The prefix used to get a shared context in BindingScope's map. */
	var SHARED_CONTEXT_KEY = '$$shared_ctx$$';
	var BindingScope = /** @class */ (function () {
	    function BindingScope(bindingLevel, parent) {
	        if (bindingLevel === void 0) { bindingLevel = 0; }
	        if (parent === void 0) { parent = null; }
	        this.bindingLevel = bindingLevel;
	        this.parent = parent;
	        /** Keeps a map from local variables to their BindingData. */
	        this.map = new Map();
	        this.referenceNameIndex = 0;
	        this.restoreViewVariable = null;
	    }
	    BindingScope.createRootScope = function () {
	        return new BindingScope().set(0, '$event', variable('$event'));
	    };
	    BindingScope.prototype.get = function (name) {
	        var current = this;
	        while (current) {
	            var value = current.map.get(name);
	            if (value != null) {
	                if (current !== this) {
	                    // make a local copy and reset the `declare` state
	                    value = {
	                        retrievalLevel: value.retrievalLevel,
	                        lhs: value.lhs,
	                        declareLocalCallback: value.declareLocalCallback,
	                        declare: false,
	                        priority: value.priority,
	                        localRef: value.localRef
	                    };
	                    // Cache the value locally.
	                    this.map.set(name, value);
	                    // Possibly generate a shared context var
	                    this.maybeGenerateSharedContextVar(value);
	                    this.maybeRestoreView(value.retrievalLevel, value.localRef);
	                }
	                if (value.declareLocalCallback && !value.declare) {
	                    value.declare = true;
	                }
	                return value.lhs;
	            }
	            current = current.parent;
	        }
	        // If we get to this point, we are looking for a property on the top level component
	        // - If level === 0, we are on the top and don't need to re-declare `ctx`.
	        // - If level > 0, we are in an embedded view. We need to retrieve the name of the
	        // local var we used to store the component context, e.g. const $comp$ = x();
	        return this.bindingLevel === 0 ? null : this.getComponentProperty(name);
	    };
	    /**
	     * Create a local variable for later reference.
	     *
	     * @param retrievalLevel The level from which this value can be retrieved
	     * @param name Name of the variable.
	     * @param lhs AST representing the left hand side of the `let lhs = rhs;`.
	     * @param priority The sorting priority of this var
	     * @param declareLocalCallback The callback to invoke when declaring this local var
	     * @param localRef Whether or not this is a local ref
	     */
	    BindingScope.prototype.set = function (retrievalLevel, name, lhs, priority, declareLocalCallback, localRef) {
	        if (priority === void 0) { priority = 0 /* DEFAULT */; }
	        if (this.map.has(name)) {
	            if (localRef) {
	                // Do not throw an error if it's a local ref and do not update existing value,
	                // so the first defined ref is always returned.
	                return this;
	            }
	            error("The name " + name + " is already defined in scope to be " + this.map.get(name));
	        }
	        this.map.set(name, {
	            retrievalLevel: retrievalLevel,
	            lhs: lhs,
	            declare: false,
	            declareLocalCallback: declareLocalCallback,
	            priority: priority,
	            localRef: localRef || false
	        });
	        return this;
	    };
	    // Implemented as part of LocalResolver.
	    BindingScope.prototype.getLocal = function (name) {
	        return this.get(name);
	    };
	    // Implemented as part of LocalResolver.
	    BindingScope.prototype.notifyImplicitReceiverUse = function () {
	        if (this.bindingLevel !== 0) {
	            // Since the implicit receiver is accessed in an embedded view, we need to
	            // ensure that we declare a shared context variable for the current template
	            // in the update variables.
	            this.map.get(SHARED_CONTEXT_KEY + 0).declare = true;
	        }
	    };
	    BindingScope.prototype.nestedScope = function (level) {
	        var newScope = new BindingScope(level, this);
	        if (level > 0)
	            newScope.generateSharedContextVar(0);
	        return newScope;
	    };
	    /**
	     * Gets or creates a shared context variable and returns its expression. Note that
	     * this does not mean that the shared variable will be declared. Variables in the
	     * binding scope will be only declared if they are used.
	     */
	    BindingScope.prototype.getOrCreateSharedContextVar = function (retrievalLevel) {
	        var bindingKey = SHARED_CONTEXT_KEY + retrievalLevel;
	        if (!this.map.has(bindingKey)) {
	            this.generateSharedContextVar(retrievalLevel);
	        }
	        // Shared context variables are always generated as "ReadVarExpr".
	        return this.map.get(bindingKey).lhs;
	    };
	    BindingScope.prototype.getSharedContextName = function (retrievalLevel) {
	        var sharedCtxObj = this.map.get(SHARED_CONTEXT_KEY + retrievalLevel);
	        // Shared context variables are always generated as "ReadVarExpr".
	        return sharedCtxObj && sharedCtxObj.declare ? sharedCtxObj.lhs : null;
	    };
	    BindingScope.prototype.maybeGenerateSharedContextVar = function (value) {
	        if (value.priority === 1 /* CONTEXT */ &&
	            value.retrievalLevel < this.bindingLevel) {
	            var sharedCtxObj = this.map.get(SHARED_CONTEXT_KEY + value.retrievalLevel);
	            if (sharedCtxObj) {
	                sharedCtxObj.declare = true;
	            }
	            else {
	                this.generateSharedContextVar(value.retrievalLevel);
	            }
	        }
	    };
	    BindingScope.prototype.generateSharedContextVar = function (retrievalLevel) {
	        var lhs = variable(CONTEXT_NAME + this.freshReferenceName());
	        this.map.set(SHARED_CONTEXT_KEY + retrievalLevel, {
	            retrievalLevel: retrievalLevel,
	            lhs: lhs,
	            declareLocalCallback: function (scope, relativeLevel) {
	                // const ctx_r0 = nextContext(2);
	                return [lhs.set(generateNextContextExpr(relativeLevel)).toConstDecl()];
	            },
	            declare: false,
	            priority: 2 /* SHARED_CONTEXT */,
	            localRef: false
	        });
	    };
	    BindingScope.prototype.getComponentProperty = function (name) {
	        var componentValue = this.map.get(SHARED_CONTEXT_KEY + 0);
	        componentValue.declare = true;
	        this.maybeRestoreView(0, false);
	        return componentValue.lhs.prop(name);
	    };
	    BindingScope.prototype.maybeRestoreView = function (retrievalLevel, localRefLookup) {
	        // We want to restore the current view in listener fns if:
	        // 1 - we are accessing a value in a parent view, which requires walking the view tree rather
	        // than using the ctx arg. In this case, the retrieval and binding level will be different.
	        // 2 - we are looking up a local ref, which requires restoring the view where the local
	        // ref is stored
	        if (this.isListenerScope() && (retrievalLevel < this.bindingLevel || localRefLookup)) {
	            if (!this.parent.restoreViewVariable) {
	                // parent saves variable to generate a shared `const $s$ = getCurrentView();` instruction
	                this.parent.restoreViewVariable = variable(this.parent.freshReferenceName());
	            }
	            this.restoreViewVariable = this.parent.restoreViewVariable;
	        }
	    };
	    BindingScope.prototype.restoreViewStatement = function () {
	        // restoreView($state$);
	        return this.restoreViewVariable ?
	            [instruction(null, Identifiers$1.restoreView, [this.restoreViewVariable]).toStmt()] :
	            [];
	    };
	    BindingScope.prototype.viewSnapshotStatements = function () {
	        // const $state$ = getCurrentView();
	        var getCurrentViewInstruction = instruction(null, Identifiers$1.getCurrentView, []);
	        return this.restoreViewVariable ?
	            [this.restoreViewVariable.set(getCurrentViewInstruction).toConstDecl()] :
	            [];
	    };
	    BindingScope.prototype.isListenerScope = function () {
	        return this.parent && this.parent.bindingLevel === this.bindingLevel;
	    };
	    BindingScope.prototype.variableDeclarations = function () {
	        var _this = this;
	        var currentContextLevel = 0;
	        return Array.from(this.map.values())
	            .filter(function (value) { return value.declare; })
	            .sort(function (a, b) { return b.retrievalLevel - a.retrievalLevel || b.priority - a.priority; })
	            .reduce(function (stmts, value) {
	            var levelDiff = _this.bindingLevel - value.retrievalLevel;
	            var currStmts = value.declareLocalCallback(_this, levelDiff - currentContextLevel);
	            currentContextLevel = levelDiff;
	            return stmts.concat(currStmts);
	        }, []);
	    };
	    BindingScope.prototype.freshReferenceName = function () {
	        var current = this;
	        // Find the top scope as it maintains the global reference count
	        while (current.parent)
	            current = current.parent;
	        var ref = "" + REFERENCE_PREFIX + current.referenceNameIndex++;
	        return ref;
	    };
	    return BindingScope;
	}());
	/**
	 * Creates a `CssSelector` given a tag name and a map of attributes
	 */
	function createCssSelector(elementName, attributes) {
	    var cssSelector = new CssSelector();
	    var elementNameNoNs = splitNsName(elementName)[1];
	    cssSelector.setElement(elementNameNoNs);
	    Object.getOwnPropertyNames(attributes).forEach(function (name) {
	        var nameNoNs = splitNsName(name)[1];
	        var value = attributes[name];
	        cssSelector.addAttribute(nameNoNs, value);
	        if (name.toLowerCase() === 'class') {
	            var classes = value.trim().split(/\s+/);
	            classes.forEach(function (className) { return cssSelector.addClassName(className); });
	        }
	    });
	    return cssSelector;
	}
	/**
	 * Creates an array of expressions out of an `ngProjectAs` attributes
	 * which can be added to the instruction parameters.
	 */
	function getNgProjectAsLiteral(attribute) {
	    // Parse the attribute value into a CssSelectorList. Note that we only take the
	    // first selector, because we don't support multiple selectors in ngProjectAs.
	    var parsedR3Selector = parseSelectorToR3Selector(attribute.value)[0];
	    return [literal(5 /* ProjectAs */), asLiteral(parsedR3Selector)];
	}
	/**
	 * Gets the instruction to generate for an interpolated property
	 * @param interpolation An Interpolation AST
	 */
	function getPropertyInterpolationExpression(interpolation) {
	    switch (getInterpolationArgsLength(interpolation)) {
	        case 1:
	            return Identifiers$1.propertyInterpolate;
	        case 3:
	            return Identifiers$1.propertyInterpolate1;
	        case 5:
	            return Identifiers$1.propertyInterpolate2;
	        case 7:
	            return Identifiers$1.propertyInterpolate3;
	        case 9:
	            return Identifiers$1.propertyInterpolate4;
	        case 11:
	            return Identifiers$1.propertyInterpolate5;
	        case 13:
	            return Identifiers$1.propertyInterpolate6;
	        case 15:
	            return Identifiers$1.propertyInterpolate7;
	        case 17:
	            return Identifiers$1.propertyInterpolate8;
	        default:
	            return Identifiers$1.propertyInterpolateV;
	    }
	}
	/**
	 * Gets the instruction to generate for an interpolated attribute
	 * @param interpolation An Interpolation AST
	 */
	function getAttributeInterpolationExpression(interpolation) {
	    switch (getInterpolationArgsLength(interpolation)) {
	        case 3:
	            return Identifiers$1.attributeInterpolate1;
	        case 5:
	            return Identifiers$1.attributeInterpolate2;
	        case 7:
	            return Identifiers$1.attributeInterpolate3;
	        case 9:
	            return Identifiers$1.attributeInterpolate4;
	        case 11:
	            return Identifiers$1.attributeInterpolate5;
	        case 13:
	            return Identifiers$1.attributeInterpolate6;
	        case 15:
	            return Identifiers$1.attributeInterpolate7;
	        case 17:
	            return Identifiers$1.attributeInterpolate8;
	        default:
	            return Identifiers$1.attributeInterpolateV;
	    }
	}
	/**
	 * Gets the instruction to generate for interpolated text.
	 * @param interpolation An Interpolation AST
	 */
	function getTextInterpolationExpression(interpolation) {
	    switch (getInterpolationArgsLength(interpolation)) {
	        case 1:
	            return Identifiers$1.textInterpolate;
	        case 3:
	            return Identifiers$1.textInterpolate1;
	        case 5:
	            return Identifiers$1.textInterpolate2;
	        case 7:
	            return Identifiers$1.textInterpolate3;
	        case 9:
	            return Identifiers$1.textInterpolate4;
	        case 11:
	            return Identifiers$1.textInterpolate5;
	        case 13:
	            return Identifiers$1.textInterpolate6;
	        case 15:
	            return Identifiers$1.textInterpolate7;
	        case 17:
	            return Identifiers$1.textInterpolate8;
	        default:
	            return Identifiers$1.textInterpolateV;
	    }
	}
	/**
	 * Parse a template into render3 `Node`s and additional metadata, with no other dependencies.
	 *
	 * @param template text of the template to parse
	 * @param templateUrl URL to use for source mapping of the parsed template
	 * @param options options to modify how the template is parsed
	 */
	function parseTemplate(template, templateUrl, options) {
	    if (options === void 0) { options = {}; }
	    var interpolationConfig = options.interpolationConfig, preserveWhitespaces = options.preserveWhitespaces, enableI18nLegacyMessageIdFormat = options.enableI18nLegacyMessageIdFormat;
	    var bindingParser = makeBindingParser(interpolationConfig);
	    var htmlParser = new HtmlParser();
	    var parseResult = htmlParser.parse(template, templateUrl, __assign(__assign({ leadingTriviaChars: LEADING_TRIVIA_CHARS }, options), { tokenizeExpansionForms: true }));
	    if (parseResult.errors && parseResult.errors.length > 0) {
	        return {
	            errors: parseResult.errors,
	            nodes: [],
	            styleUrls: [],
	            styles: [],
	            ngContentSelectors: []
	        };
	    }
	    var rootNodes = parseResult.rootNodes;
	    // process i18n meta information (scan attributes, generate ids)
	    // before we run whitespace removal process, because existing i18n
	    // extraction process (ng xi18n) relies on a raw content to generate
	    // message ids
	    var i18nMetaVisitor = new I18nMetaVisitor(interpolationConfig, /* keepI18nAttrs */ !preserveWhitespaces, enableI18nLegacyMessageIdFormat);
	    rootNodes = visitAll$1(i18nMetaVisitor, rootNodes);
	    if (!preserveWhitespaces) {
	        rootNodes = visitAll$1(new WhitespaceVisitor(), rootNodes);
	        // run i18n meta visitor again in case whitespaces are removed (because that might affect
	        // generated i18n message content) and first pass indicated that i18n content is present in a
	        // template. During this pass i18n IDs generated at the first pass will be preserved, so we can
	        // mimic existing extraction process (ng xi18n)
	        if (i18nMetaVisitor.hasI18nMeta) {
	            rootNodes = visitAll$1(new I18nMetaVisitor(interpolationConfig, /* keepI18nAttrs */ false), rootNodes);
	        }
	    }
	    var _a = htmlAstToRender3Ast(rootNodes, bindingParser), nodes = _a.nodes, errors = _a.errors, styleUrls = _a.styleUrls, styles = _a.styles, ngContentSelectors = _a.ngContentSelectors;
	    if (errors && errors.length > 0) {
	        return { errors: errors, nodes: [], styleUrls: [], styles: [], ngContentSelectors: [] };
	    }
	    return { nodes: nodes, styleUrls: styleUrls, styles: styles, ngContentSelectors: ngContentSelectors };
	}
	var elementRegistry = new DomElementSchemaRegistry();
	/**
	 * Construct a `BindingParser` with a default configuration.
	 */
	function makeBindingParser(interpolationConfig) {
	    if (interpolationConfig === void 0) { interpolationConfig = DEFAULT_INTERPOLATION_CONFIG; }
	    return new BindingParser(new IvyParser(new Lexer()), interpolationConfig, elementRegistry, null, []);
	}
	function resolveSanitizationFn(context, isAttribute) {
	    switch (context) {
	        case SecurityContext.HTML:
	            return importExpr(Identifiers$1.sanitizeHtml);
	        case SecurityContext.SCRIPT:
	            return importExpr(Identifiers$1.sanitizeScript);
	        case SecurityContext.STYLE:
	            // the compiler does not fill in an instruction for [style.prop?] binding
	            // values because the style algorithm knows internally what props are subject
	            // to sanitization (only [attr.style] values are explicitly sanitized)
	            return isAttribute ? importExpr(Identifiers$1.sanitizeStyle) : null;
	        case SecurityContext.URL:
	            return importExpr(Identifiers$1.sanitizeUrl);
	        case SecurityContext.RESOURCE_URL:
	            return importExpr(Identifiers$1.sanitizeResourceUrl);
	        default:
	            return null;
	    }
	}
	function isSingleElementTemplate(children) {
	    return children.length === 1 && children[0] instanceof Element$1;
	}
	function isTextNode(node) {
	    return node instanceof Text || node instanceof BoundText || node instanceof Icu;
	}
	function hasTextChildrenOnly(children) {
	    return children.every(isTextNode);
	}
	/** Name of the global variable that is used to determine if we use Closure translations or not */
	var NG_I18N_CLOSURE_MODE = 'ngI18nClosureMode';
	/**
	 * Generate statements that define a given translation message.
	 *
	 * ```
	 * var I18N_1;
	 * if (typeof ngI18nClosureMode !== undefined && ngI18nClosureMode) {
	 *     var MSG_EXTERNAL_XXX = goog.getMsg(
	 *          "Some message with {$interpolation}!",
	 *          { "interpolation": "\uFFFD0\uFFFD" }
	 *     );
	 *     I18N_1 = MSG_EXTERNAL_XXX;
	 * }
	 * else {
	 *     I18N_1 = $localize`Some message with ${'\uFFFD0\uFFFD'}!`;
	 * }
	 * ```
	 *
	 * @param message The original i18n AST message node
	 * @param variable The variable that will be assigned the translation, e.g. `I18N_1`.
	 * @param closureVar The variable for Closure `goog.getMsg` calls, e.g. `MSG_EXTERNAL_XXX`.
	 * @param params Object mapping placeholder names to their values (e.g.
	 * `{ "interpolation": "\uFFFD0\uFFFD" }`).
	 * @param transformFn Optional transformation function that will be applied to the translation (e.g.
	 * post-processing).
	 * @returns An array of statements that defined a given translation.
	 */
	function getTranslationDeclStmts(message, variable, closureVar, params, transformFn) {
	    if (params === void 0) { params = {}; }
	    var statements = [
	        declareI18nVariable(variable),
	        ifStmt(createClosureModeGuard(), createGoogleGetMsgStatements(variable, message, closureVar, i18nFormatPlaceholderNames(params, /* useCamelCase */ true)), createLocalizeStatements(variable, message, i18nFormatPlaceholderNames(params, /* useCamelCase */ false))),
	    ];
	    if (transformFn) {
	        statements.push(new ExpressionStatement(variable.set(transformFn(variable))));
	    }
	    return statements;
	}
	/**
	 * Create the expression that will be used to guard the closure mode block
	 * It is equivalent to:
	 *
	 * ```
	 * typeof ngI18nClosureMode !== undefined && ngI18nClosureMode
	 * ```
	 */
	function createClosureModeGuard() {
	    return typeofExpr(variable(NG_I18N_CLOSURE_MODE))
	        .notIdentical(literal('undefined', STRING_TYPE))
	        .and(variable(NG_I18N_CLOSURE_MODE));
	}
	// This regex matches any binding names that contain the "attr." prefix, e.g. "attr.required"
	// If there is a match, the first matching group will contain the attribute name to bind.
	var ATTR_REGEX = /attr\.([^\]]+)/;
	function baseDirectiveFields(meta, constantPool, bindingParser) {
	    var definitionMap = new DefinitionMap();
	    var selectors = parseSelectorToR3Selector(meta.selector);
	    // e.g. `type: MyDirective`
	    definitionMap.set('type', meta.internalType);
	    // e.g. `selectors: [['', 'someDir', '']]`
	    if (selectors.length > 0) {
	        definitionMap.set('selectors', asLiteral(selectors));
	    }
	    if (meta.queries.length > 0) {
	        // e.g. `contentQueries: (rf, ctx, dirIndex) => { ... }
	        definitionMap.set('contentQueries', createContentQueriesFunction(meta.queries, constantPool, meta.name));
	    }
	    if (meta.viewQueries.length) {
	        definitionMap.set('viewQuery', createViewQueriesFunction(meta.viewQueries, constantPool, meta.name));
	    }
	    // e.g. `hostBindings: (rf, ctx) => { ... }
	    definitionMap.set('hostBindings', createHostBindingsFunction(meta.host, meta.typeSourceSpan, bindingParser, constantPool, meta.selector || '', meta.name, definitionMap));
	    // e.g 'inputs: {a: 'a'}`
	    definitionMap.set('inputs', conditionallyCreateMapObjectLiteral(meta.inputs, true));
	    // e.g 'outputs: {a: 'a'}`
	    definitionMap.set('outputs', conditionallyCreateMapObjectLiteral(meta.outputs));
	    if (meta.exportAs !== null) {
	        definitionMap.set('exportAs', literalArr(meta.exportAs.map(function (e) { return literal(e); })));
	    }
	    return definitionMap;
	}
	/**
	 * Add features to the definition map.
	 */
	function addFeatures(definitionMap, meta) {
	    // e.g. `features: [NgOnChangesFeature]`
	    var features = [];
	    var providers = meta.providers;
	    var viewProviders = meta.viewProviders;
	    if (providers || viewProviders) {
	        var args = [providers || new LiteralArrayExpr([])];
	        if (viewProviders) {
	            args.push(viewProviders);
	        }
	        features.push(importExpr(Identifiers$1.ProvidersFeature).callFn(args));
	    }
	    if (meta.usesInheritance) {
	        features.push(importExpr(Identifiers$1.InheritDefinitionFeature));
	    }
	    if (meta.fullInheritance) {
	        features.push(importExpr(Identifiers$1.CopyDefinitionFeature));
	    }
	    if (meta.lifecycle.usesOnChanges) {
	        features.push(importExpr(Identifiers$1.NgOnChangesFeature));
	    }
	    if (features.length) {
	        definitionMap.set('features', literalArr(features));
	    }
	}
	/**
	 * Compile a directive for the render3 runtime as defined by the `R3DirectiveMetadata`.
	 */
	function compileDirectiveFromMetadata(meta, constantPool, bindingParser) {
	    var definitionMap = baseDirectiveFields(meta, constantPool, bindingParser);
	    addFeatures(definitionMap, meta);
	    var expression = importExpr(Identifiers$1.defineDirective).callFn([definitionMap.toLiteralMap()]);
	    var typeParams = createDirectiveTypeParams(meta);
	    var type = expressionType(importExpr(Identifiers$1.DirectiveDefWithMeta, typeParams));
	    return { expression: expression, type: type };
	}
	/**
	 * Compile a component for the render3 runtime as defined by the `R3ComponentMetadata`.
	 */
	function compileComponentFromMetadata(meta, constantPool, bindingParser) {
	    var e_1, _a;
	    var definitionMap = baseDirectiveFields(meta, constantPool, bindingParser);
	    addFeatures(definitionMap, meta);
	    var selector = meta.selector && CssSelector.parse(meta.selector);
	    var firstSelector = selector && selector[0];
	    // e.g. `attr: ["class", ".my.app"]`
	    // This is optional an only included if the first selector of a component specifies attributes.
	    if (firstSelector) {
	        var selectorAttributes = firstSelector.getAttrs();
	        if (selectorAttributes.length) {
	            definitionMap.set('attrs', constantPool.getConstLiteral(literalArr(selectorAttributes.map(function (value) { return value != null ? literal(value) : literal(undefined); })), 
	            /* forceShared */ true));
	        }
	    }
	    // Generate the CSS matcher that recognize directive
	    var directiveMatcher = null;
	    if (meta.directives.length > 0) {
	        var matcher = new SelectorMatcher();
	        try {
	            for (var _b = __values(meta.directives), _c = _b.next(); !_c.done; _c = _b.next()) {
	                var _d = _c.value, selector_1 = _d.selector, expression_1 = _d.expression;
	                matcher.addSelectables(CssSelector.parse(selector_1), expression_1);
	            }
	        }
	        catch (e_1_1) { e_1 = { error: e_1_1 }; }
	        finally {
	            try {
	                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
	            }
	            finally { if (e_1) throw e_1.error; }
	        }
	        directiveMatcher = matcher;
	    }
	    // e.g. `template: function MyComponent_Template(_ctx, _cm) {...}`
	    var templateTypeName = meta.name;
	    var templateName = templateTypeName ? templateTypeName + "_Template" : null;
	    var directivesUsed = new Set();
	    var pipesUsed = new Set();
	    var changeDetection = meta.changeDetection;
	    var template = meta.template;
	    var templateBuilder = new TemplateDefinitionBuilder(constantPool, BindingScope.createRootScope(), 0, templateTypeName, null, null, templateName, directiveMatcher, directivesUsed, meta.pipes, pipesUsed, Identifiers$1.namespaceHTML, meta.relativeContextFilePath, meta.i18nUseExternalIds);
	    var templateFunctionExpression = templateBuilder.buildTemplateFunction(template.nodes, []);
	    // We need to provide this so that dynamically generated components know what
	    // projected content blocks to pass through to the component when it is instantiated.
	    var ngContentSelectors = templateBuilder.getNgContentSelectors();
	    if (ngContentSelectors) {
	        definitionMap.set('ngContentSelectors', ngContentSelectors);
	    }
	    // e.g. `decls: 2`
	    definitionMap.set('decls', literal(templateBuilder.getConstCount()));
	    // e.g. `vars: 2`
	    definitionMap.set('vars', literal(templateBuilder.getVarCount()));
	    // e.g. `consts: [['one', 'two'], ['three', 'four']]
	    var consts = templateBuilder.getConsts();
	    if (consts.length > 0) {
	        definitionMap.set('consts', literalArr(consts));
	    }
	    definitionMap.set('template', templateFunctionExpression);
	    // e.g. `directives: [MyDirective]`
	    if (directivesUsed.size) {
	        var directivesExpr = literalArr(Array.from(directivesUsed));
	        if (meta.wrapDirectivesAndPipesInClosure) {
	            directivesExpr = fn([], [new ReturnStatement(directivesExpr)]);
	        }
	        definitionMap.set('directives', directivesExpr);
	    }
	    // e.g. `pipes: [MyPipe]`
	    if (pipesUsed.size) {
	        var pipesExpr = literalArr(Array.from(pipesUsed));
	        if (meta.wrapDirectivesAndPipesInClosure) {
	            pipesExpr = fn([], [new ReturnStatement(pipesExpr)]);
	        }
	        definitionMap.set('pipes', pipesExpr);
	    }
	    if (meta.encapsulation === null) {
	        meta.encapsulation = ViewEncapsulation.Emulated;
	    }
	    // e.g. `styles: [str1, str2]`
	    if (meta.styles && meta.styles.length) {
	        var styleValues = meta.encapsulation == ViewEncapsulation.Emulated ?
	            compileStyles(meta.styles, CONTENT_ATTR, HOST_ATTR) :
	            meta.styles;
	        var strings = styleValues.map(function (str) { return literal(str); });
	        definitionMap.set('styles', literalArr(strings));
	    }
	    else if (meta.encapsulation === ViewEncapsulation.Emulated) {
	        // If there is no style, don't generate css selectors on elements
	        meta.encapsulation = ViewEncapsulation.None;
	    }
	    // Only set view encapsulation if it's not the default value
	    if (meta.encapsulation !== ViewEncapsulation.Emulated) {
	        definitionMap.set('encapsulation', literal(meta.encapsulation));
	    }
	    // e.g. `animation: [trigger('123', [])]`
	    if (meta.animations !== null) {
	        definitionMap.set('data', literalMap([{ key: 'animation', value: meta.animations, quoted: false }]));
	    }
	    // Only set the change detection flag if it's defined and it's not the default.
	    if (changeDetection != null && changeDetection !== ChangeDetectionStrategy.Default) {
	        definitionMap.set('changeDetection', literal(changeDetection));
	    }
	    var expression = importExpr(Identifiers$1.defineComponent).callFn([definitionMap.toLiteralMap()]);
	    var typeParams = createDirectiveTypeParams(meta);
	    typeParams.push(stringArrayAsType(meta.template.ngContentSelectors));
	    var type = expressionType(importExpr(Identifiers$1.ComponentDefWithMeta, typeParams));
	    return { expression: expression, type: type };
	}
	function prepareQueryParams(query, constantPool) {
	    var parameters = [getQueryPredicate(query, constantPool), literal(query.descendants)];
	    if (query.read) {
	        parameters.push(query.read);
	    }
	    return parameters;
	}
	function convertAttributesToExpressions(attributes) {
	    var e_2, _a;
	    var values = [];
	    try {
	        for (var _b = __values(Object.getOwnPropertyNames(attributes)), _c = _b.next(); !_c.done; _c = _b.next()) {
	            var key = _c.value;
	            var value = attributes[key];
	            values.push(literal(key), value);
	        }
	    }
	    catch (e_2_1) { e_2 = { error: e_2_1 }; }
	    finally {
	        try {
	            if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
	        }
	        finally { if (e_2) throw e_2.error; }
	    }
	    return values;
	}
	// Define and update any content queries
	function createContentQueriesFunction(queries, constantPool, name) {
	    var e_3, _a;
	    var createStatements = [];
	    var updateStatements = [];
	    var tempAllocator = temporaryAllocator(updateStatements, TEMPORARY_NAME);
	    try {
	        for (var queries_1 = __values(queries), queries_1_1 = queries_1.next(); !queries_1_1.done; queries_1_1 = queries_1.next()) {
	            var query = queries_1_1.value;
	            var queryInstruction = query.static ? Identifiers$1.staticContentQuery : Identifiers$1.contentQuery;
	            // creation, e.g. r3.contentQuery(dirIndex, somePredicate, true, null);
	            createStatements.push(importExpr(queryInstruction)
	                .callFn(__spread([variable('dirIndex')], prepareQueryParams(query, constantPool)))
	                .toStmt());
	            // update, e.g. (r3.queryRefresh(tmp = r3.loadQuery()) && (ctx.someDir = tmp));
	            var temporary = tempAllocator();
	            var getQueryList = importExpr(Identifiers$1.loadQuery).callFn([]);
	            var refresh = importExpr(Identifiers$1.queryRefresh).callFn([temporary.set(getQueryList)]);
	            var updateDirective = variable(CONTEXT_NAME)
	                .prop(query.propertyName)
	                .set(query.first ? temporary.prop('first') : temporary);
	            updateStatements.push(refresh.and(updateDirective).toStmt());
	        }
	    }
	    catch (e_3_1) { e_3 = { error: e_3_1 }; }
	    finally {
	        try {
	            if (queries_1_1 && !queries_1_1.done && (_a = queries_1.return)) _a.call(queries_1);
	        }
	        finally { if (e_3) throw e_3.error; }
	    }
	    var contentQueriesFnName = name ? name + "_ContentQueries" : null;
	    return fn([
	        new FnParam(RENDER_FLAGS, NUMBER_TYPE), new FnParam(CONTEXT_NAME, null),
	        new FnParam('dirIndex', null)
	    ], [
	        renderFlagCheckIfStmt(1 /* Create */, createStatements),
	        renderFlagCheckIfStmt(2 /* Update */, updateStatements)
	    ], INFERRED_TYPE, null, contentQueriesFnName);
	}
	function stringAsType(str) {
	    return expressionType(literal(str));
	}
	function stringMapAsType(map) {
	    var mapValues = Object.keys(map).map(function (key) {
	        var value = Array.isArray(map[key]) ? map[key][0] : map[key];
	        return {
	            key: key,
	            value: literal(value),
	            quoted: true,
	        };
	    });
	    return expressionType(literalMap(mapValues));
	}
	function stringArrayAsType(arr) {
	    return arr.length > 0 ? expressionType(literalArr(arr.map(function (value) { return literal(value); }))) :
	        NONE_TYPE;
	}
	function createDirectiveTypeParams(meta) {
	    // On the type side, remove newlines from the selector as it will need to fit into a TypeScript
	    // string literal, which must be on one line.
	    var selectorForType = meta.selector !== null ? meta.selector.replace(/\n/g, '') : null;
	    return [
	        typeWithParameters(meta.type.type, meta.typeArgumentCount),
	        selectorForType !== null ? stringAsType(selectorForType) : NONE_TYPE,
	        meta.exportAs !== null ? stringArrayAsType(meta.exportAs) : NONE_TYPE,
	        stringMapAsType(meta.inputs),
	        stringMapAsType(meta.outputs),
	        stringArrayAsType(meta.queries.map(function (q) { return q.propertyName; })),
	    ];
	}
	// Define and update any view queries
	function createViewQueriesFunction(viewQueries, constantPool, name) {
	    var createStatements = [];
	    var updateStatements = [];
	    var tempAllocator = temporaryAllocator(updateStatements, TEMPORARY_NAME);
	    viewQueries.forEach(function (query) {
	        var queryInstruction = query.static ? Identifiers$1.staticViewQuery : Identifiers$1.viewQuery;
	        // creation, e.g. r3.viewQuery(somePredicate, true);
	        var queryDefinition = importExpr(queryInstruction).callFn(prepareQueryParams(query, constantPool));
	        createStatements.push(queryDefinition.toStmt());
	        // update, e.g. (r3.queryRefresh(tmp = r3.loadQuery()) && (ctx.someDir = tmp));
	        var temporary = tempAllocator();
	        var getQueryList = importExpr(Identifiers$1.loadQuery).callFn([]);
	        var refresh = importExpr(Identifiers$1.queryRefresh).callFn([temporary.set(getQueryList)]);
	        var updateDirective = variable(CONTEXT_NAME)
	            .prop(query.propertyName)
	            .set(query.first ? temporary.prop('first') : temporary);
	        updateStatements.push(refresh.and(updateDirective).toStmt());
	    });
	    var viewQueryFnName = name ? name + "_Query" : null;
	    return fn([new FnParam(RENDER_FLAGS, NUMBER_TYPE), new FnParam(CONTEXT_NAME, null)], [
	        renderFlagCheckIfStmt(1 /* Create */, createStatements),
	        renderFlagCheckIfStmt(2 /* Update */, updateStatements)
	    ], INFERRED_TYPE, null, viewQueryFnName);
	}
	// Return a host binding function or null if one is not necessary.
	function createHostBindingsFunction(hostBindingsMetadata, typeSourceSpan, bindingParser, constantPool, selector, name, definitionMap) {
	    var bindingContext = variable(CONTEXT_NAME);
	    var styleBuilder = new StylingBuilder(bindingContext);
	    var _a = hostBindingsMetadata.specialAttributes, styleAttr = _a.styleAttr, classAttr = _a.classAttr;
	    if (styleAttr !== undefined) {
	        styleBuilder.registerStyleAttr(styleAttr);
	    }
	    if (classAttr !== undefined) {
	        styleBuilder.registerClassAttr(classAttr);
	    }
	    var createStatements = [];
	    var updateStatements = [];
	    var hostBindingSourceSpan = typeSourceSpan;
	    var directiveSummary = metadataAsSummary(hostBindingsMetadata);
	    // Calculate host event bindings
	    var eventBindings = bindingParser.createDirectiveHostEventAsts(directiveSummary, hostBindingSourceSpan);
	    if (eventBindings && eventBindings.length) {
	        var listeners = createHostListeners(eventBindings, name);
	        createStatements.push.apply(createStatements, __spread(listeners));
	    }
	    // Calculate the host property bindings
	    var bindings = bindingParser.createBoundHostProperties(directiveSummary, hostBindingSourceSpan);
	    var allOtherBindings = [];
	    // We need to calculate the total amount of binding slots required by
	    // all the instructions together before any value conversions happen.
	    // Value conversions may require additional slots for interpolation and
	    // bindings with pipes. These calculates happen after this block.
	    var totalHostVarsCount = 0;
	    bindings && bindings.forEach(function (binding) {
	        var name = binding.name;
	        var stylingInputWasSet = styleBuilder.registerInputBasedOnName(name, binding.expression, binding.sourceSpan);
	        if (stylingInputWasSet) {
	            totalHostVarsCount += MIN_STYLING_BINDING_SLOTS_REQUIRED;
	        }
	        else {
	            allOtherBindings.push(binding);
	            totalHostVarsCount++;
	        }
	    });
	    var valueConverter;
	    var getValueConverter = function () {
	        if (!valueConverter) {
	            var hostVarsCountFn = function (numSlots) {
	                var originalVarsCount = totalHostVarsCount;
	                totalHostVarsCount += numSlots;
	                return originalVarsCount;
	            };
	            valueConverter = new ValueConverter(constantPool, function () { return error('Unexpected node'); }, // new nodes are illegal here
	            hostVarsCountFn, function () { return error('Unexpected pipe'); }); // pipes are illegal here
	        }
	        return valueConverter;
	    };
	    var propertyBindings = [];
	    var attributeBindings = [];
	    var syntheticHostBindings = [];
	    allOtherBindings.forEach(function (binding) {
	        // resolve literal arrays and literal objects
	        var value = binding.expression.visit(getValueConverter());
	        var bindingExpr = bindingFn(bindingContext, value);
	        var _a = getBindingNameAndInstruction(binding), bindingName = _a.bindingName, instruction = _a.instruction, isAttribute = _a.isAttribute;
	        var securityContexts = bindingParser.calcPossibleSecurityContexts(selector, bindingName, isAttribute)
	            .filter(function (context) { return context !== SecurityContext.NONE; });
	        var sanitizerFn = null;
	        if (securityContexts.length) {
	            if (securityContexts.length === 2 &&
	                securityContexts.indexOf(SecurityContext.URL) > -1 &&
	                securityContexts.indexOf(SecurityContext.RESOURCE_URL) > -1) {
	                // Special case for some URL attributes (such as "src" and "href") that may be a part
	                // of different security contexts. In this case we use special santitization function and
	                // select the actual sanitizer at runtime based on a tag name that is provided while
	                // invoking sanitization function.
	                sanitizerFn = importExpr(Identifiers$1.sanitizeUrlOrResourceUrl);
	            }
	            else {
	                sanitizerFn = resolveSanitizationFn(securityContexts[0], isAttribute);
	            }
	        }
	        var instructionParams = [literal(bindingName), bindingExpr.currValExpr];
	        if (sanitizerFn) {
	            instructionParams.push(sanitizerFn);
	        }
	        updateStatements.push.apply(updateStatements, __spread(bindingExpr.stmts));
	        if (instruction === Identifiers$1.hostProperty) {
	            propertyBindings.push(instructionParams);
	        }
	        else if (instruction === Identifiers$1.attribute) {
	            attributeBindings.push(instructionParams);
	        }
	        else if (instruction === Identifiers$1.updateSyntheticHostBinding) {
	            syntheticHostBindings.push(instructionParams);
	        }
	        else {
	            updateStatements.push(importExpr(instruction).callFn(instructionParams).toStmt());
	        }
	    });
	    if (propertyBindings.length > 0) {
	        updateStatements.push(chainedInstruction(Identifiers$1.hostProperty, propertyBindings).toStmt());
	    }
	    if (attributeBindings.length > 0) {
	        updateStatements.push(chainedInstruction(Identifiers$1.attribute, attributeBindings).toStmt());
	    }
	    if (syntheticHostBindings.length > 0) {
	        updateStatements.push(chainedInstruction(Identifiers$1.updateSyntheticHostBinding, syntheticHostBindings).toStmt());
	    }
	    // since we're dealing with directives/components and both have hostBinding
	    // functions, we need to generate a special hostAttrs instruction that deals
	    // with both the assignment of styling as well as static attributes to the host
	    // element. The instruction below will instruct all initial styling (styling
	    // that is inside of a host binding within a directive/component) to be attached
	    // to the host element alongside any of the provided host attributes that were
	    // collected earlier.
	    var hostAttrs = convertAttributesToExpressions(hostBindingsMetadata.attributes);
	    styleBuilder.assignHostAttrs(hostAttrs, definitionMap);
	    if (styleBuilder.hasBindings) {
	        // finally each binding that was registered in the statement above will need to be added to
	        // the update block of a component/directive templateFn/hostBindingsFn so that the bindings
	        // are evaluated and updated for the element.
	        styleBuilder.buildUpdateLevelInstructions(getValueConverter()).forEach(function (instruction) {
	            if (instruction.calls.length > 0) {
	                var calls_1 = [];
	                instruction.calls.forEach(function (call) {
	                    // we subtract a value of `1` here because the binding slot was already allocated
	                    // at the top of this method when all the input bindings were counted.
	                    totalHostVarsCount +=
	                        Math.max(call.allocateBindingSlots - MIN_STYLING_BINDING_SLOTS_REQUIRED, 0);
	                    calls_1.push(convertStylingCall(call, bindingContext, bindingFn));
	                });
	                updateStatements.push(chainedInstruction(instruction.reference, calls_1).toStmt());
	            }
	        });
	    }
	    if (totalHostVarsCount) {
	        definitionMap.set('hostVars', literal(totalHostVarsCount));
	    }
	    if (createStatements.length > 0 || updateStatements.length > 0) {
	        var hostBindingsFnName = name ? name + "_HostBindings" : null;
	        var statements = [];
	        if (createStatements.length > 0) {
	            statements.push(renderFlagCheckIfStmt(1 /* Create */, createStatements));
	        }
	        if (updateStatements.length > 0) {
	            statements.push(renderFlagCheckIfStmt(2 /* Update */, updateStatements));
	        }
	        return fn([new FnParam(RENDER_FLAGS, NUMBER_TYPE), new FnParam(CONTEXT_NAME, null)], statements, INFERRED_TYPE, null, hostBindingsFnName);
	    }
	    return null;
	}
	function bindingFn(implicit, value) {
	    return convertPropertyBinding(null, implicit, value, 'b', BindingForm.TrySimple, function () { return error('Unexpected interpolation'); });
	}
	function convertStylingCall(call, bindingContext, bindingFn) {
	    return call.params(function (value) { return bindingFn(bindingContext, value).currValExpr; });
	}
	function getBindingNameAndInstruction(binding) {
	    var bindingName = binding.name;
	    var instruction;
	    // Check to see if this is an attr binding or a property binding
	    var attrMatches = bindingName.match(ATTR_REGEX);
	    if (attrMatches) {
	        bindingName = attrMatches[1];
	        instruction = Identifiers$1.attribute;
	    }
	    else {
	        if (binding.isAnimation) {
	            bindingName = prepareSyntheticPropertyName(bindingName);
	            // host bindings that have a synthetic property (e.g. @foo) should always be rendered
	            // in the context of the component and not the parent. Therefore there is a special
	            // compatibility instruction available for this purpose.
	            instruction = Identifiers$1.updateSyntheticHostBinding;
	        }
	        else {
	            instruction = Identifiers$1.hostProperty;
	        }
	    }
	    return { bindingName: bindingName, instruction: instruction, isAttribute: !!attrMatches };
	}
	function createHostListeners(eventBindings, name) {
	    var listeners = [];
	    var syntheticListeners = [];
	    var instructions = [];
	    eventBindings.forEach(function (binding) {
	        var bindingName = binding.name && sanitizeIdentifier(binding.name);
	        var bindingFnName = binding.type === 1 /* Animation */ ?
	            prepareSyntheticListenerFunctionName(bindingName, binding.targetOrPhase) :
	            bindingName;
	        var handlerName = name && bindingName ? name + "_" + bindingFnName + "_HostBindingHandler" : null;
	        var params = prepareEventListenerParameters(BoundEvent.fromParsedEvent(binding), handlerName);
	        if (binding.type == 1 /* Animation */) {
	            syntheticListeners.push(params);
	        }
	        else {
	            listeners.push(params);
	        }
	    });
	    if (syntheticListeners.length > 0) {
	        instructions.push(chainedInstruction(Identifiers$1.componentHostSyntheticListener, syntheticListeners).toStmt());
	    }
	    if (listeners.length > 0) {
	        instructions.push(chainedInstruction(Identifiers$1.listener, listeners).toStmt());
	    }
	    return instructions;
	}
	function metadataAsSummary(meta) {
	    // clang-format off
	    return {
	        // This is used by the BindingParser, which only deals with listeners and properties. There's no
	        // need to pass attributes to it.
	        hostAttributes: {},
	        hostListeners: meta.listeners,
	        hostProperties: meta.properties,
	    };
	    // clang-format on
	}
	var HOST_REG_EXP$1 = /^(?:\[([^\]]+)\])|(?:\(([^\)]+)\))$/;
	function parseHostBindings(host) {
	    var e_4, _a;
	    var attributes = {};
	    var listeners = {};
	    var properties = {};
	    var specialAttributes = {};
	    try {
	        for (var _b = __values(Object.keys(host)), _c = _b.next(); !_c.done; _c = _b.next()) {
	            var key = _c.value;
	            var value = host[key];
	            var matches = key.match(HOST_REG_EXP$1);
	            if (matches === null) {
	                switch (key) {
	                    case 'class':
	                        if (typeof value !== 'string') {
	                            // TODO(alxhub): make this a diagnostic.
	                            throw new Error("Class binding must be string");
	                        }
	                        specialAttributes.classAttr = value;
	                        break;
	                    case 'style':
	                        if (typeof value !== 'string') {
	                            // TODO(alxhub): make this a diagnostic.
	                            throw new Error("Style binding must be string");
	                        }
	                        specialAttributes.styleAttr = value;
	                        break;
	                    default:
	                        if (typeof value === 'string') {
	                            attributes[key] = literal(value);
	                        }
	                        else {
	                            attributes[key] = value;
	                        }
	                }
	            }
	            else if (matches[1 /* Binding */] != null) {
	                if (typeof value !== 'string') {
	                    // TODO(alxhub): make this a diagnostic.
	                    throw new Error("Property binding must be string");
	                }
	                // synthetic properties (the ones that have a `@` as a prefix)
	                // are still treated the same as regular properties. Therefore
	                // there is no point in storing them in a separate map.
	                properties[matches[1 /* Binding */]] = value;
	            }
	            else if (matches[2 /* Event */] != null) {
	                if (typeof value !== 'string') {
	                    // TODO(alxhub): make this a diagnostic.
	                    throw new Error("Event binding must be string");
	                }
	                listeners[matches[2 /* Event */]] = value;
	            }
	        }
	    }
	    catch (e_4_1) { e_4 = { error: e_4_1 }; }
	    finally {
	        try {
	            if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
	        }
	        finally { if (e_4) throw e_4.error; }
	    }
	    return { attributes: attributes, listeners: listeners, properties: properties, specialAttributes: specialAttributes };
	}
	/**
	 * Verifies host bindings and returns the list of errors (if any). Empty array indicates that a
	 * given set of host bindings has no errors.
	 *
	 * @param bindings set of host bindings to verify.
	 * @param sourceSpan source span where host bindings were defined.
	 * @returns array of errors associated with a given set of host bindings.
	 */
	function verifyHostBindings(bindings, sourceSpan) {
	    var summary = metadataAsSummary(bindings);
	    // TODO: abstract out host bindings verification logic and use it instead of
	    // creating events and properties ASTs to detect errors (FW-996)
	    var bindingParser = makeBindingParser();
	    bindingParser.createDirectiveHostEventAsts(summary, sourceSpan);
	    bindingParser.createBoundHostProperties(summary, sourceSpan);
	    return bindingParser.errors;
	}
	function compileStyles(styles, selector, hostSelector) {
	    var shadowCss = new ShadowCss();
	    return styles.map(function (style) {
	        return shadowCss.shimCssText(style, selector, hostSelector);
	    });
	}

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * An interface for retrieving documents by URL that the compiler uses
	 * to load templates.
	 */
	var ResourceLoader = /** @class */ (function () {
	    function ResourceLoader() {
	    }
	    ResourceLoader.prototype.get = function (url) {
	        return '';
	    };
	    return ResourceLoader;
	}());

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	var CompilerFacadeImpl = /** @class */ (function () {
	    function CompilerFacadeImpl(jitEvaluator) {
	        if (jitEvaluator === void 0) { jitEvaluator = new JitEvaluator(); }
	        this.jitEvaluator = jitEvaluator;
	        this.R3ResolvedDependencyType = R3ResolvedDependencyType;
	        this.R3FactoryTarget = R3FactoryTarget;
	        this.ResourceLoader = ResourceLoader;
	        this.elementSchemaRegistry = new DomElementSchemaRegistry();
	    }
	    CompilerFacadeImpl.prototype.compilePipe = function (angularCoreEnv, sourceMapUrl, facade) {
	        var metadata = {
	            name: facade.name,
	            type: wrapReference$1(facade.type),
	            internalType: new WrappedNodeExpr(facade.type),
	            typeArgumentCount: facade.typeArgumentCount,
	            deps: convertR3DependencyMetadataArray(facade.deps),
	            pipeName: facade.pipeName,
	            pure: facade.pure,
	        };
	        var res = compilePipeFromMetadata(metadata);
	        return this.jitExpression(res.expression, angularCoreEnv, sourceMapUrl, []);
	    };
	    CompilerFacadeImpl.prototype.compileInjectable = function (angularCoreEnv, sourceMapUrl, facade) {
	        var _a = compileInjectable({
	            name: facade.name,
	            type: wrapReference$1(facade.type),
	            internalType: new WrappedNodeExpr(facade.type),
	            typeArgumentCount: facade.typeArgumentCount,
	            providedIn: computeProvidedIn(facade.providedIn),
	            useClass: wrapExpression(facade, USE_CLASS),
	            useFactory: wrapExpression(facade, USE_FACTORY),
	            useValue: wrapExpression(facade, USE_VALUE),
	            useExisting: wrapExpression(facade, USE_EXISTING),
	            userDeps: convertR3DependencyMetadataArray(facade.userDeps) || undefined,
	        }), expression = _a.expression, statements = _a.statements;
	        return this.jitExpression(expression, angularCoreEnv, sourceMapUrl, statements);
	    };
	    CompilerFacadeImpl.prototype.compileInjector = function (angularCoreEnv, sourceMapUrl, facade) {
	        var meta = {
	            name: facade.name,
	            type: wrapReference$1(facade.type),
	            internalType: new WrappedNodeExpr(facade.type),
	            deps: convertR3DependencyMetadataArray(facade.deps),
	            providers: new WrappedNodeExpr(facade.providers),
	            imports: facade.imports.map(function (i) { return new WrappedNodeExpr(i); }),
	        };
	        var res = compileInjector(meta);
	        return this.jitExpression(res.expression, angularCoreEnv, sourceMapUrl, res.statements);
	    };
	    CompilerFacadeImpl.prototype.compileNgModule = function (angularCoreEnv, sourceMapUrl, facade) {
	        var meta = {
	            type: wrapReference$1(facade.type),
	            internalType: new WrappedNodeExpr(facade.type),
	            adjacentType: new WrappedNodeExpr(facade.type),
	            bootstrap: facade.bootstrap.map(wrapReference$1),
	            declarations: facade.declarations.map(wrapReference$1),
	            imports: facade.imports.map(wrapReference$1),
	            exports: facade.exports.map(wrapReference$1),
	            emitInline: true,
	            containsForwardDecls: false,
	            schemas: facade.schemas ? facade.schemas.map(wrapReference$1) : null,
	            id: facade.id ? new WrappedNodeExpr(facade.id) : null,
	        };
	        var res = compileNgModule(meta);
	        return this.jitExpression(res.expression, angularCoreEnv, sourceMapUrl, []);
	    };
	    CompilerFacadeImpl.prototype.compileDirective = function (angularCoreEnv, sourceMapUrl, facade) {
	        var constantPool = new ConstantPool();
	        var bindingParser = makeBindingParser();
	        var meta = convertDirectiveFacadeToMetadata(facade);
	        var res = compileDirectiveFromMetadata(meta, constantPool, bindingParser);
	        return this.jitExpression(res.expression, angularCoreEnv, sourceMapUrl, constantPool.statements);
	    };
	    CompilerFacadeImpl.prototype.compileComponent = function (angularCoreEnv, sourceMapUrl, facade) {
	        // The ConstantPool is a requirement of the JIT'er.
	        var constantPool = new ConstantPool();
	        var interpolationConfig = facade.interpolation ?
	            InterpolationConfig.fromArray(facade.interpolation) :
	            DEFAULT_INTERPOLATION_CONFIG;
	        // Parse the template and check for errors.
	        var template = parseTemplate(facade.template, sourceMapUrl, { preserveWhitespaces: facade.preserveWhitespaces, interpolationConfig: interpolationConfig });
	        if (template.errors !== undefined) {
	            var errors = template.errors.map(function (err) { return err.toString(); }).join(', ');
	            throw new Error("Errors during JIT compilation of template for " + facade.name + ": " + errors);
	        }
	        // Compile the component metadata, including template, into an expression.
	        // TODO(alxhub): implement inputs, outputs, queries, etc.
	        var metadata = __assign(__assign(__assign({}, facade), convertDirectiveFacadeToMetadata(facade)), { selector: facade.selector || this.elementSchemaRegistry.getDefaultComponentElementName(), template: template, wrapDirectivesAndPipesInClosure: false, styles: __spread(facade.styles, template.styles), encapsulation: facade.encapsulation, interpolation: interpolationConfig, changeDetection: facade.changeDetection, animations: facade.animations != null ? new WrappedNodeExpr(facade.animations) : null, viewProviders: facade.viewProviders != null ? new WrappedNodeExpr(facade.viewProviders) :
	                null, relativeContextFilePath: '', i18nUseExternalIds: true });
	        var res = compileComponentFromMetadata(metadata, constantPool, makeBindingParser(interpolationConfig));
	        var jitExpressionSourceMap = "ng:///" + facade.name + ".js";
	        return this.jitExpression(res.expression, angularCoreEnv, jitExpressionSourceMap, constantPool.statements);
	    };
	    CompilerFacadeImpl.prototype.compileFactory = function (angularCoreEnv, sourceMapUrl, meta) {
	        var factoryRes = compileFactoryFunction({
	            name: meta.name,
	            type: wrapReference$1(meta.type),
	            internalType: new WrappedNodeExpr(meta.type),
	            typeArgumentCount: meta.typeArgumentCount,
	            deps: convertR3DependencyMetadataArray(meta.deps),
	            injectFn: meta.injectFn === 'directiveInject' ? Identifiers.directiveInject :
	                Identifiers.inject,
	            target: meta.target,
	        });
	        return this.jitExpression(factoryRes.factory, angularCoreEnv, sourceMapUrl, factoryRes.statements);
	    };
	    CompilerFacadeImpl.prototype.createParseSourceSpan = function (kind, typeName, sourceUrl) {
	        return r3JitTypeSourceSpan(kind, typeName, sourceUrl);
	    };
	    /**
	     * JIT compiles an expression and returns the result of executing that expression.
	     *
	     * @param def the definition which will be compiled and executed to get the value to patch
	     * @param context an object map of @angular/core symbol names to symbols which will be available
	     * in the context of the compiled expression
	     * @param sourceUrl a URL to use for the source map of the compiled expression
	     * @param preStatements a collection of statements that should be evaluated before the expression.
	     */
	    CompilerFacadeImpl.prototype.jitExpression = function (def, context, sourceUrl, preStatements) {
	        // The ConstantPool may contain Statements which declare variables used in the final expression.
	        // Therefore, its statements need to precede the actual JIT operation. The final statement is a
	        // declaration of $def which is set to the expression being compiled.
	        var statements = __spread(preStatements, [
	            new DeclareVarStmt('$def', def, undefined, [StmtModifier.Exported]),
	        ]);
	        var res = this.jitEvaluator.evaluateStatements(sourceUrl, statements, new R3JitReflector(context), /* enableSourceMaps */ true);
	        return res['$def'];
	    };
	    return CompilerFacadeImpl;
	}());
	var USE_CLASS = Object.keys({ useClass: null })[0];
	var USE_FACTORY = Object.keys({ useFactory: null })[0];
	var USE_VALUE = Object.keys({ useValue: null })[0];
	var USE_EXISTING = Object.keys({ useExisting: null })[0];
	var wrapReference$1 = function (value) {
	    var wrapped = new WrappedNodeExpr(value);
	    return { value: wrapped, type: wrapped };
	};
	function convertToR3QueryMetadata(facade) {
	    return __assign(__assign({}, facade), { predicate: Array.isArray(facade.predicate) ? facade.predicate :
	            new WrappedNodeExpr(facade.predicate), read: facade.read ? new WrappedNodeExpr(facade.read) : null, static: facade.static });
	}
	function convertDirectiveFacadeToMetadata(facade) {
	    var inputsFromMetadata = parseInputOutputs(facade.inputs || []);
	    var outputsFromMetadata = parseInputOutputs(facade.outputs || []);
	    var propMetadata = facade.propMetadata;
	    var inputsFromType = {};
	    var outputsFromType = {};
	    var _loop_1 = function (field) {
	        if (propMetadata.hasOwnProperty(field)) {
	            propMetadata[field].forEach(function (ann) {
	                if (isInput(ann)) {
	                    inputsFromType[field] =
	                        ann.bindingPropertyName ? [ann.bindingPropertyName, field] : field;
	                }
	                else if (isOutput(ann)) {
	                    outputsFromType[field] = ann.bindingPropertyName || field;
	                }
	            });
	        }
	    };
	    for (var field in propMetadata) {
	        _loop_1(field);
	    }
	    return __assign(__assign({}, facade), { typeSourceSpan: facade.typeSourceSpan, type: wrapReference$1(facade.type), internalType: new WrappedNodeExpr(facade.type), deps: convertR3DependencyMetadataArray(facade.deps), host: extractHostBindings(facade.propMetadata, facade.typeSourceSpan, facade.host), inputs: __assign(__assign({}, inputsFromMetadata), inputsFromType), outputs: __assign(__assign({}, outputsFromMetadata), outputsFromType), queries: facade.queries.map(convertToR3QueryMetadata), providers: facade.providers != null ? new WrappedNodeExpr(facade.providers) : null, viewQueries: facade.viewQueries.map(convertToR3QueryMetadata), fullInheritance: false });
	}
	function wrapExpression(obj, property) {
	    if (obj.hasOwnProperty(property)) {
	        return new WrappedNodeExpr(obj[property]);
	    }
	    else {
	        return undefined;
	    }
	}
	function computeProvidedIn(providedIn) {
	    if (providedIn == null || typeof providedIn === 'string') {
	        return new LiteralExpr(providedIn);
	    }
	    else {
	        return new WrappedNodeExpr(providedIn);
	    }
	}
	function convertR3DependencyMetadata(facade) {
	    var tokenExpr;
	    if (facade.token === null) {
	        tokenExpr = new LiteralExpr(null);
	    }
	    else if (facade.resolved === R3ResolvedDependencyType.Attribute) {
	        tokenExpr = new LiteralExpr(facade.token);
	    }
	    else {
	        tokenExpr = new WrappedNodeExpr(facade.token);
	    }
	    return {
	        token: tokenExpr,
	        attribute: null,
	        resolved: facade.resolved,
	        host: facade.host,
	        optional: facade.optional,
	        self: facade.self,
	        skipSelf: facade.skipSelf,
	    };
	}
	function convertR3DependencyMetadataArray(facades) {
	    return facades == null ? null : facades.map(convertR3DependencyMetadata);
	}
	function extractHostBindings(propMetadata, sourceSpan, host) {
	    // First parse the declarations from the metadata.
	    var bindings = parseHostBindings(host || {});
	    // After that check host bindings for errors
	    var errors = verifyHostBindings(bindings, sourceSpan);
	    if (errors.length) {
	        throw new Error(errors.map(function (error) { return error.msg; }).join('\n'));
	    }
	    var _loop_2 = function (field) {
	        if (propMetadata.hasOwnProperty(field)) {
	            propMetadata[field].forEach(function (ann) {
	                if (isHostBinding(ann)) {
	                    bindings.properties[ann.hostPropertyName || field] = field;
	                }
	                else if (isHostListener(ann)) {
	                    bindings.listeners[ann.eventName || field] = field + "(" + (ann.args || []).join(',') + ")";
	                }
	            });
	        }
	    };
	    // Next, loop over the properties of the object, looking for @HostBinding and @HostListener.
	    for (var field in propMetadata) {
	        _loop_2(field);
	    }
	    return bindings;
	}
	function isHostBinding(value) {
	    return value.ngMetadataName === 'HostBinding';
	}
	function isHostListener(value) {
	    return value.ngMetadataName === 'HostListener';
	}
	function isInput(value) {
	    return value.ngMetadataName === 'Input';
	}
	function isOutput(value) {
	    return value.ngMetadataName === 'Output';
	}
	function parseInputOutputs(values) {
	    return values.reduce(function (map, value) {
	        var _a = __read(value.split(',').map(function (piece) { return piece.trim(); }), 2), field = _a[0], property = _a[1];
	        map[field] = property || field;
	        return map;
	    }, {});
	}
	function publishFacade(global) {
	    var ng = global.ng || (global.ng = {});
	    ng.ÉµcompilerFacade = new CompilerFacadeImpl();
	}

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	var VERSION$1 = new Version('9.1.6');

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	var CompilerConfig = /** @class */ (function () {
	    function CompilerConfig(_a) {
	        var _b = _a === void 0 ? {} : _a, _c = _b.defaultEncapsulation, defaultEncapsulation = _c === void 0 ? ViewEncapsulation.Emulated : _c, _d = _b.useJit, useJit = _d === void 0 ? true : _d, _e = _b.jitDevMode, jitDevMode = _e === void 0 ? false : _e, _f = _b.missingTranslation, missingTranslation = _f === void 0 ? null : _f, preserveWhitespaces = _b.preserveWhitespaces, strictInjectionParameters = _b.strictInjectionParameters;
	        this.defaultEncapsulation = defaultEncapsulation;
	        this.useJit = !!useJit;
	        this.jitDevMode = !!jitDevMode;
	        this.missingTranslation = missingTranslation;
	        this.preserveWhitespaces = preserveWhitespacesDefault(noUndefined(preserveWhitespaces));
	        this.strictInjectionParameters = strictInjectionParameters === true;
	    }
	    return CompilerConfig;
	}());
	function preserveWhitespacesDefault(preserveWhitespacesOption, defaultSetting) {
	    if (defaultSetting === void 0) { defaultSetting = false; }
	    return preserveWhitespacesOption === null ? defaultSetting : preserveWhitespacesOption;
	}

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	var DirectiveNormalizer = /** @class */ (function () {
	    function DirectiveNormalizer(_resourceLoader, _urlResolver, _htmlParser, _config) {
	        this._resourceLoader = _resourceLoader;
	        this._urlResolver = _urlResolver;
	        this._htmlParser = _htmlParser;
	        this._config = _config;
	        this._resourceLoaderCache = new Map();
	    }
	    DirectiveNormalizer.prototype.clearCache = function () {
	        this._resourceLoaderCache.clear();
	    };
	    DirectiveNormalizer.prototype.clearCacheFor = function (normalizedDirective) {
	        var _this = this;
	        if (!normalizedDirective.isComponent) {
	            return;
	        }
	        var template = normalizedDirective.template;
	        this._resourceLoaderCache.delete(template.templateUrl);
	        template.externalStylesheets.forEach(function (stylesheet) {
	            _this._resourceLoaderCache.delete(stylesheet.moduleUrl);
	        });
	    };
	    DirectiveNormalizer.prototype._fetch = function (url) {
	        var result = this._resourceLoaderCache.get(url);
	        if (!result) {
	            result = this._resourceLoader.get(url);
	            this._resourceLoaderCache.set(url, result);
	        }
	        return result;
	    };
	    DirectiveNormalizer.prototype.normalizeTemplate = function (prenormData) {
	        var _this = this;
	        if (isDefined(prenormData.template)) {
	            if (isDefined(prenormData.templateUrl)) {
	                throw syntaxError("'" + stringify(prenormData
	                    .componentType) + "' component cannot define both template and templateUrl");
	            }
	            if (typeof prenormData.template !== 'string') {
	                throw syntaxError("The template specified for component " + stringify(prenormData.componentType) + " is not a string");
	            }
	        }
	        else if (isDefined(prenormData.templateUrl)) {
	            if (typeof prenormData.templateUrl !== 'string') {
	                throw syntaxError("The templateUrl specified for component " + stringify(prenormData.componentType) + " is not a string");
	            }
	        }
	        else {
	            throw syntaxError("No template specified for component " + stringify(prenormData.componentType));
	        }
	        if (isDefined(prenormData.preserveWhitespaces) &&
	            typeof prenormData.preserveWhitespaces !== 'boolean') {
	            throw syntaxError("The preserveWhitespaces option for component " + stringify(prenormData.componentType) + " must be a boolean");
	        }
	        return SyncAsync.then(this._preParseTemplate(prenormData), function (preparsedTemplate) { return _this._normalizeTemplateMetadata(prenormData, preparsedTemplate); });
	    };
	    DirectiveNormalizer.prototype._preParseTemplate = function (prenomData) {
	        var _this = this;
	        var template;
	        var templateUrl;
	        if (prenomData.template != null) {
	            template = prenomData.template;
	            templateUrl = prenomData.moduleUrl;
	        }
	        else {
	            templateUrl = this._urlResolver.resolve(prenomData.moduleUrl, prenomData.templateUrl);
	            template = this._fetch(templateUrl);
	        }
	        return SyncAsync.then(template, function (template) { return _this._preparseLoadedTemplate(prenomData, template, templateUrl); });
	    };
	    DirectiveNormalizer.prototype._preparseLoadedTemplate = function (prenormData, template, templateAbsUrl) {
	        var isInline = !!prenormData.template;
	        var interpolationConfig = InterpolationConfig.fromArray(prenormData.interpolation);
	        var templateUrl = templateSourceUrl({ reference: prenormData.ngModuleType }, { type: { reference: prenormData.componentType } }, { isInline: isInline, templateUrl: templateAbsUrl });
	        var rootNodesAndErrors = this._htmlParser.parse(template, templateUrl, { tokenizeExpansionForms: true, interpolationConfig: interpolationConfig });
	        if (rootNodesAndErrors.errors.length > 0) {
	            var errorString = rootNodesAndErrors.errors.join('\n');
	            throw syntaxError("Template parse errors:\n" + errorString);
	        }
	        var templateMetadataStyles = this._normalizeStylesheet(new CompileStylesheetMetadata({ styles: prenormData.styles, moduleUrl: prenormData.moduleUrl }));
	        var visitor = new TemplatePreparseVisitor();
	        visitAll$1(visitor, rootNodesAndErrors.rootNodes);
	        var templateStyles = this._normalizeStylesheet(new CompileStylesheetMetadata({ styles: visitor.styles, styleUrls: visitor.styleUrls, moduleUrl: templateAbsUrl }));
	        var styles = templateMetadataStyles.styles.concat(templateStyles.styles);
	        var inlineStyleUrls = templateMetadataStyles.styleUrls.concat(templateStyles.styleUrls);
	        var styleUrls = this
	            ._normalizeStylesheet(new CompileStylesheetMetadata({ styleUrls: prenormData.styleUrls, moduleUrl: prenormData.moduleUrl }))
	            .styleUrls;
	        return {
	            template: template,
	            templateUrl: templateAbsUrl,
	            isInline: isInline,
	            htmlAst: rootNodesAndErrors,
	            styles: styles,
	            inlineStyleUrls: inlineStyleUrls,
	            styleUrls: styleUrls,
	            ngContentSelectors: visitor.ngContentSelectors,
	        };
	    };
	    DirectiveNormalizer.prototype._normalizeTemplateMetadata = function (prenormData, preparsedTemplate) {
	        var _this = this;
	        return SyncAsync.then(this._loadMissingExternalStylesheets(preparsedTemplate.styleUrls.concat(preparsedTemplate.inlineStyleUrls)), function (externalStylesheets) { return _this._normalizeLoadedTemplateMetadata(prenormData, preparsedTemplate, externalStylesheets); });
	    };
	    DirectiveNormalizer.prototype._normalizeLoadedTemplateMetadata = function (prenormData, preparsedTemplate, stylesheets) {
	        // Algorithm:
	        // - produce exactly 1 entry per original styleUrl in
	        // CompileTemplateMetadata.externalStylesheets with all styles inlined
	        // - inline all styles that are referenced by the template into CompileTemplateMetadata.styles.
	        // Reason: be able to determine how many stylesheets there are even without loading
	        // the template nor the stylesheets, so we can create a stub for TypeScript always synchronously
	        // (as resource loading may be async)
	        var _this = this;
	        var styles = __spread(preparsedTemplate.styles);
	        this._inlineStyles(preparsedTemplate.inlineStyleUrls, stylesheets, styles);
	        var styleUrls = preparsedTemplate.styleUrls;
	        var externalStylesheets = styleUrls.map(function (styleUrl) {
	            var stylesheet = stylesheets.get(styleUrl);
	            var styles = __spread(stylesheet.styles);
	            _this._inlineStyles(stylesheet.styleUrls, stylesheets, styles);
	            return new CompileStylesheetMetadata({ moduleUrl: styleUrl, styles: styles });
	        });
	        var encapsulation = prenormData.encapsulation;
	        if (encapsulation == null) {
	            encapsulation = this._config.defaultEncapsulation;
	        }
	        if (encapsulation === ViewEncapsulation.Emulated && styles.length === 0 &&
	            styleUrls.length === 0) {
	            encapsulation = ViewEncapsulation.None;
	        }
	        return new CompileTemplateMetadata({
	            encapsulation: encapsulation,
	            template: preparsedTemplate.template,
	            templateUrl: preparsedTemplate.templateUrl,
	            htmlAst: preparsedTemplate.htmlAst,
	            styles: styles,
	            styleUrls: styleUrls,
	            ngContentSelectors: preparsedTemplate.ngContentSelectors,
	            animations: prenormData.animations,
	            interpolation: prenormData.interpolation,
	            isInline: preparsedTemplate.isInline,
	            externalStylesheets: externalStylesheets,
	            preserveWhitespaces: preserveWhitespacesDefault(prenormData.preserveWhitespaces, this._config.preserveWhitespaces),
	        });
	    };
	    DirectiveNormalizer.prototype._inlineStyles = function (styleUrls, stylesheets, targetStyles) {
	        var _this = this;
	        styleUrls.forEach(function (styleUrl) {
	            var stylesheet = stylesheets.get(styleUrl);
	            stylesheet.styles.forEach(function (style) { return targetStyles.push(style); });
	            _this._inlineStyles(stylesheet.styleUrls, stylesheets, targetStyles);
	        });
	    };
	    DirectiveNormalizer.prototype._loadMissingExternalStylesheets = function (styleUrls, loadedStylesheets) {
	        var _this = this;
	        if (loadedStylesheets === void 0) { loadedStylesheets = new Map(); }
	        return SyncAsync.then(SyncAsync.all(styleUrls.filter(function (styleUrl) { return !loadedStylesheets.has(styleUrl); })
	            .map(function (styleUrl) { return SyncAsync.then(_this._fetch(styleUrl), function (loadedStyle) {
	            var stylesheet = _this._normalizeStylesheet(new CompileStylesheetMetadata({ styles: [loadedStyle], moduleUrl: styleUrl }));
	            loadedStylesheets.set(styleUrl, stylesheet);
	            return _this._loadMissingExternalStylesheets(stylesheet.styleUrls, loadedStylesheets);
	        }); })), function (_) { return loadedStylesheets; });
	    };
	    DirectiveNormalizer.prototype._normalizeStylesheet = function (stylesheet) {
	        var _this = this;
	        var moduleUrl = stylesheet.moduleUrl;
	        var allStyleUrls = stylesheet.styleUrls.filter(isStyleUrlResolvable)
	            .map(function (url) { return _this._urlResolver.resolve(moduleUrl, url); });
	        var allStyles = stylesheet.styles.map(function (style) {
	            var styleWithImports = extractStyleUrls(_this._urlResolver, moduleUrl, style);
	            allStyleUrls.push.apply(allStyleUrls, __spread(styleWithImports.styleUrls));
	            return styleWithImports.style;
	        });
	        return new CompileStylesheetMetadata({ styles: allStyles, styleUrls: allStyleUrls, moduleUrl: moduleUrl });
	    };
	    return DirectiveNormalizer;
	}());
	var TemplatePreparseVisitor = /** @class */ (function () {
	    function TemplatePreparseVisitor() {
	        this.ngContentSelectors = [];
	        this.styles = [];
	        this.styleUrls = [];
	        this.ngNonBindableStackCount = 0;
	    }
	    TemplatePreparseVisitor.prototype.visitElement = function (ast, context) {
	        var preparsedElement = preparseElement(ast);
	        switch (preparsedElement.type) {
	            case PreparsedElementType.NG_CONTENT:
	                if (this.ngNonBindableStackCount === 0) {
	                    this.ngContentSelectors.push(preparsedElement.selectAttr);
	                }
	                break;
	            case PreparsedElementType.STYLE:
	                var textContent_1 = '';
	                ast.children.forEach(function (child) {
	                    if (child instanceof Text$3) {
	                        textContent_1 += child.value;
	                    }
	                });
	                this.styles.push(textContent_1);
	                break;
	            case PreparsedElementType.STYLESHEET:
	                this.styleUrls.push(preparsedElement.hrefAttr);
	                break;
	        }
	        if (preparsedElement.nonBindable) {
	            this.ngNonBindableStackCount++;
	        }
	        visitAll$1(this, ast.children);
	        if (preparsedElement.nonBindable) {
	            this.ngNonBindableStackCount--;
	        }
	        return null;
	    };
	    TemplatePreparseVisitor.prototype.visitExpansion = function (ast, context) {
	        visitAll$1(this, ast.cases);
	    };
	    TemplatePreparseVisitor.prototype.visitExpansionCase = function (ast, context) {
	        visitAll$1(this, ast.expression);
	    };
	    TemplatePreparseVisitor.prototype.visitComment = function (ast, context) {
	        return null;
	    };
	    TemplatePreparseVisitor.prototype.visitAttribute = function (ast, context) {
	        return null;
	    };
	    TemplatePreparseVisitor.prototype.visitText = function (ast, context) {
	        return null;
	    };
	    return TemplatePreparseVisitor;
	}());

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	var QUERY_METADATA_IDENTIFIERS = [
	    createViewChild,
	    createViewChildren,
	    createContentChild,
	    createContentChildren,
	];
	/*
	 * Resolve a `Type` for {@link Directive}.
	 *
	 * This interface can be overridden by the application developer to create custom behavior.
	 *
	 * See {@link Compiler}
	 */
	var DirectiveResolver = /** @class */ (function () {
	    function DirectiveResolver(_reflector) {
	        this._reflector = _reflector;
	    }
	    DirectiveResolver.prototype.isDirective = function (type) {
	        var typeMetadata = this._reflector.annotations(resolveForwardRef(type));
	        return typeMetadata && typeMetadata.some(isDirectiveMetadata);
	    };
	    DirectiveResolver.prototype.resolve = function (type, throwIfNotFound) {
	        if (throwIfNotFound === void 0) { throwIfNotFound = true; }
	        var typeMetadata = this._reflector.annotations(resolveForwardRef(type));
	        if (typeMetadata) {
	            var metadata = findLast(typeMetadata, isDirectiveMetadata);
	            if (metadata) {
	                var propertyMetadata = this._reflector.propMetadata(type);
	                var guards = this._reflector.guards(type);
	                return this._mergeWithPropertyMetadata(metadata, propertyMetadata, guards, type);
	            }
	        }
	        if (throwIfNotFound) {
	            throw new Error("No Directive annotation found on " + stringify(type));
	        }
	        return null;
	    };
	    DirectiveResolver.prototype._mergeWithPropertyMetadata = function (dm, propertyMetadata, guards, directiveType) {
	        var inputs = [];
	        var outputs = [];
	        var host = {};
	        var queries = {};
	        Object.keys(propertyMetadata).forEach(function (propName) {
	            var input = findLast(propertyMetadata[propName], function (a) { return createInput.isTypeOf(a); });
	            if (input) {
	                if (input.bindingPropertyName) {
	                    inputs.push(propName + ": " + input.bindingPropertyName);
	                }
	                else {
	                    inputs.push(propName);
	                }
	            }
	            var output = findLast(propertyMetadata[propName], function (a) { return createOutput.isTypeOf(a); });
	            if (output) {
	                if (output.bindingPropertyName) {
	                    outputs.push(propName + ": " + output.bindingPropertyName);
	                }
	                else {
	                    outputs.push(propName);
	                }
	            }
	            var hostBindings = propertyMetadata[propName].filter(function (a) { return createHostBinding.isTypeOf(a); });
	            hostBindings.forEach(function (hostBinding) {
	                if (hostBinding.hostPropertyName) {
	                    var startWith = hostBinding.hostPropertyName[0];
	                    if (startWith === '(') {
	                        throw new Error("@HostBinding can not bind to events. Use @HostListener instead.");
	                    }
	                    else if (startWith === '[') {
	                        throw new Error("@HostBinding parameter should be a property name, 'class.<name>', or 'attr.<name>'.");
	                    }
	                    host["[" + hostBinding.hostPropertyName + "]"] = propName;
	                }
	                else {
	                    host["[" + propName + "]"] = propName;
	                }
	            });
	            var hostListeners = propertyMetadata[propName].filter(function (a) { return createHostListener.isTypeOf(a); });
	            hostListeners.forEach(function (hostListener) {
	                var args = hostListener.args || [];
	                host["(" + hostListener.eventName + ")"] = propName + "(" + args.join(',') + ")";
	            });
	            var query = findLast(propertyMetadata[propName], function (a) { return QUERY_METADATA_IDENTIFIERS.some(function (i) { return i.isTypeOf(a); }); });
	            if (query) {
	                queries[propName] = query;
	            }
	        });
	        return this._merge(dm, inputs, outputs, host, queries, guards, directiveType);
	    };
	    DirectiveResolver.prototype._extractPublicName = function (def) {
	        return splitAtColon(def, [null, def])[1].trim();
	    };
	    DirectiveResolver.prototype._dedupeBindings = function (bindings) {
	        var names = new Set();
	        var publicNames = new Set();
	        var reversedResult = [];
	        // go last to first to allow later entries to overwrite previous entries
	        for (var i = bindings.length - 1; i >= 0; i--) {
	            var binding = bindings[i];
	            var name_1 = this._extractPublicName(binding);
	            publicNames.add(name_1);
	            if (!names.has(name_1)) {
	                names.add(name_1);
	                reversedResult.push(binding);
	            }
	        }
	        return reversedResult.reverse();
	    };
	    DirectiveResolver.prototype._merge = function (directive, inputs, outputs, host, queries, guards, directiveType) {
	        var mergedInputs = this._dedupeBindings(directive.inputs ? directive.inputs.concat(inputs) : inputs);
	        var mergedOutputs = this._dedupeBindings(directive.outputs ? directive.outputs.concat(outputs) : outputs);
	        var mergedHost = directive.host ? __assign(__assign({}, directive.host), host) : host;
	        var mergedQueries = directive.queries ? __assign(__assign({}, directive.queries), queries) : queries;
	        if (createComponent.isTypeOf(directive)) {
	            var comp = directive;
	            return createComponent({
	                selector: comp.selector,
	                inputs: mergedInputs,
	                outputs: mergedOutputs,
	                host: mergedHost,
	                exportAs: comp.exportAs,
	                moduleId: comp.moduleId,
	                queries: mergedQueries,
	                changeDetection: comp.changeDetection,
	                providers: comp.providers,
	                viewProviders: comp.viewProviders,
	                entryComponents: comp.entryComponents,
	                template: comp.template,
	                templateUrl: comp.templateUrl,
	                styles: comp.styles,
	                styleUrls: comp.styleUrls,
	                encapsulation: comp.encapsulation,
	                animations: comp.animations,
	                interpolation: comp.interpolation,
	                preserveWhitespaces: directive.preserveWhitespaces,
	            });
	        }
	        else {
	            return createDirective({
	                selector: directive.selector,
	                inputs: mergedInputs,
	                outputs: mergedOutputs,
	                host: mergedHost,
	                exportAs: directive.exportAs,
	                queries: mergedQueries,
	                providers: directive.providers,
	                guards: guards
	            });
	        }
	    };
	    return DirectiveResolver;
	}());
	function isDirectiveMetadata(type) {
	    return createDirective.isTypeOf(type) || createComponent.isTypeOf(type);
	}
	function findLast(arr, condition) {
	    for (var i = arr.length - 1; i >= 0; i--) {
	        if (condition(arr[i])) {
	            return arr[i];
	        }
	    }
	    return null;
	}

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * An i18n error.
	 */
	var I18nError = /** @class */ (function (_super) {
	    __extends(I18nError, _super);
	    function I18nError(span, msg) {
	        return _super.call(this, span, msg) || this;
	    }
	    return I18nError;
	}(ParseError));

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	var _I18N_ATTR = 'i18n';
	var _I18N_ATTR_PREFIX = 'i18n-';
	var _I18N_COMMENT_PREFIX_REGEXP = /^i18n:?/;
	var MEANING_SEPARATOR = '|';
	var ID_SEPARATOR = '@@';
	var i18nCommentsWarned = false;
	function mergeTranslations(nodes, translations, interpolationConfig, implicitTags, implicitAttrs) {
	    var visitor = new _Visitor$2(implicitTags, implicitAttrs);
	    return visitor.merge(nodes, translations, interpolationConfig);
	}
	var ExtractionResult = /** @class */ (function () {
	    function ExtractionResult(messages, errors) {
	        this.messages = messages;
	        this.errors = errors;
	    }
	    return ExtractionResult;
	}());
	var _VisitorMode;
	(function (_VisitorMode) {
	    _VisitorMode[_VisitorMode["Extract"] = 0] = "Extract";
	    _VisitorMode[_VisitorMode["Merge"] = 1] = "Merge";
	})(_VisitorMode || (_VisitorMode = {}));
	/**
	 * This Visitor is used:
	 * 1. to extract all the translatable strings from an html AST (see `extract()`),
	 * 2. to replace the translatable strings with the actual translations (see `merge()`)
	 *
	 * @internal
	 */
	var _Visitor$2 = /** @class */ (function () {
	    function _Visitor(_implicitTags, _implicitAttrs) {
	        this._implicitTags = _implicitTags;
	        this._implicitAttrs = _implicitAttrs;
	    }
	    /**
	     * Extracts the messages from the tree
	     */
	    _Visitor.prototype.extract = function (nodes, interpolationConfig) {
	        var _this = this;
	        this._init(_VisitorMode.Extract, interpolationConfig);
	        nodes.forEach(function (node) { return node.visit(_this, null); });
	        if (this._inI18nBlock) {
	            this._reportError(nodes[nodes.length - 1], 'Unclosed block');
	        }
	        return new ExtractionResult(this._messages, this._errors);
	    };
	    /**
	     * Returns a tree where all translatable nodes are translated
	     */
	    _Visitor.prototype.merge = function (nodes, translations, interpolationConfig) {
	        this._init(_VisitorMode.Merge, interpolationConfig);
	        this._translations = translations;
	        // Construct a single fake root element
	        var wrapper = new Element$1$1('wrapper', [], nodes, undefined, undefined, undefined);
	        var translatedNode = wrapper.visit(this, null);
	        if (this._inI18nBlock) {
	            this._reportError(nodes[nodes.length - 1], 'Unclosed block');
	        }
	        return new ParseTreeResult(translatedNode.children, this._errors);
	    };
	    _Visitor.prototype.visitExpansionCase = function (icuCase, context) {
	        // Parse cases for translatable html attributes
	        var expression = visitAll$1(this, icuCase.expression, context);
	        if (this._mode === _VisitorMode.Merge) {
	            return new ExpansionCase(icuCase.value, expression, icuCase.sourceSpan, icuCase.valueSourceSpan, icuCase.expSourceSpan);
	        }
	    };
	    _Visitor.prototype.visitExpansion = function (icu, context) {
	        this._mayBeAddBlockChildren(icu);
	        var wasInIcu = this._inIcu;
	        if (!this._inIcu) {
	            // nested ICU messages should not be extracted but top-level translated as a whole
	            if (this._isInTranslatableSection) {
	                this._addMessage([icu]);
	            }
	            this._inIcu = true;
	        }
	        var cases = visitAll$1(this, icu.cases, context);
	        if (this._mode === _VisitorMode.Merge) {
	            icu = new Expansion(icu.switchValue, icu.type, cases, icu.sourceSpan, icu.switchValueSourceSpan);
	        }
	        this._inIcu = wasInIcu;
	        return icu;
	    };
	    _Visitor.prototype.visitComment = function (comment, context) {
	        var isOpening = _isOpeningComment(comment);
	        if (isOpening && this._isInTranslatableSection) {
	            this._reportError(comment, 'Could not start a block inside a translatable section');
	            return;
	        }
	        var isClosing = _isClosingComment(comment);
	        if (isClosing && !this._inI18nBlock) {
	            this._reportError(comment, 'Trying to close an unopened block');
	            return;
	        }
	        if (!this._inI18nNode && !this._inIcu) {
	            if (!this._inI18nBlock) {
	                if (isOpening) {
	                    // deprecated from v5 you should use <ng-container i18n> instead of i18n comments
	                    if (!i18nCommentsWarned && console && console.warn) {
	                        i18nCommentsWarned = true;
	                        var details = comment.sourceSpan.details ? ", " + comment.sourceSpan.details : '';
	                        // TODO(ocombe): use a log service once there is a public one available
	                        console.warn("I18n comments are deprecated, use an <ng-container> element instead (" + comment.sourceSpan.start + details + ")");
	                    }
	                    this._inI18nBlock = true;
	                    this._blockStartDepth = this._depth;
	                    this._blockChildren = [];
	                    this._blockMeaningAndDesc =
	                        comment.value.replace(_I18N_COMMENT_PREFIX_REGEXP, '').trim();
	                    this._openTranslatableSection(comment);
	                }
	            }
	            else {
	                if (isClosing) {
	                    if (this._depth == this._blockStartDepth) {
	                        this._closeTranslatableSection(comment, this._blockChildren);
	                        this._inI18nBlock = false;
	                        var message = this._addMessage(this._blockChildren, this._blockMeaningAndDesc);
	                        // merge attributes in sections
	                        var nodes = this._translateMessage(comment, message);
	                        return visitAll$1(this, nodes);
	                    }
	                    else {
	                        this._reportError(comment, 'I18N blocks should not cross element boundaries');
	                        return;
	                    }
	                }
	            }
	        }
	    };
	    _Visitor.prototype.visitText = function (text, context) {
	        if (this._isInTranslatableSection) {
	            this._mayBeAddBlockChildren(text);
	        }
	        return text;
	    };
	    _Visitor.prototype.visitElement = function (el, context) {
	        var _this = this;
	        this._mayBeAddBlockChildren(el);
	        this._depth++;
	        var wasInI18nNode = this._inI18nNode;
	        var wasInImplicitNode = this._inImplicitNode;
	        var childNodes = [];
	        var translatedChildNodes = undefined;
	        // Extract:
	        // - top level nodes with the (implicit) "i18n" attribute if not already in a section
	        // - ICU messages
	        var i18nAttr = _getI18nAttr(el);
	        var i18nMeta = i18nAttr ? i18nAttr.value : '';
	        var isImplicit = this._implicitTags.some(function (tag) { return el.name === tag; }) && !this._inIcu &&
	            !this._isInTranslatableSection;
	        var isTopLevelImplicit = !wasInImplicitNode && isImplicit;
	        this._inImplicitNode = wasInImplicitNode || isImplicit;
	        if (!this._isInTranslatableSection && !this._inIcu) {
	            if (i18nAttr || isTopLevelImplicit) {
	                this._inI18nNode = true;
	                var message = this._addMessage(el.children, i18nMeta);
	                translatedChildNodes = this._translateMessage(el, message);
	            }
	            if (this._mode == _VisitorMode.Extract) {
	                var isTranslatable = i18nAttr || isTopLevelImplicit;
	                if (isTranslatable)
	                    this._openTranslatableSection(el);
	                visitAll$1(this, el.children);
	                if (isTranslatable)
	                    this._closeTranslatableSection(el, el.children);
	            }
	        }
	        else {
	            if (i18nAttr || isTopLevelImplicit) {
	                this._reportError(el, 'Could not mark an element as translatable inside a translatable section');
	            }
	            if (this._mode == _VisitorMode.Extract) {
	                // Descend into child nodes for extraction
	                visitAll$1(this, el.children);
	            }
	        }
	        if (this._mode === _VisitorMode.Merge) {
	            var visitNodes = translatedChildNodes || el.children;
	            visitNodes.forEach(function (child) {
	                var visited = child.visit(_this, context);
	                if (visited && !_this._isInTranslatableSection) {
	                    // Do not add the children from translatable sections (= i18n blocks here)
	                    // They will be added later in this loop when the block closes (i.e. on `<!-- /i18n -->`)
	                    childNodes = childNodes.concat(visited);
	                }
	            });
	        }
	        this._visitAttributesOf(el);
	        this._depth--;
	        this._inI18nNode = wasInI18nNode;
	        this._inImplicitNode = wasInImplicitNode;
	        if (this._mode === _VisitorMode.Merge) {
	            var translatedAttrs = this._translateAttributes(el);
	            return new Element$1$1(el.name, translatedAttrs, childNodes, el.sourceSpan, el.startSourceSpan, el.endSourceSpan);
	        }
	        return null;
	    };
	    _Visitor.prototype.visitAttribute = function (attribute, context) {
	        throw new Error('unreachable code');
	    };
	    _Visitor.prototype._init = function (mode, interpolationConfig) {
	        this._mode = mode;
	        this._inI18nBlock = false;
	        this._inI18nNode = false;
	        this._depth = 0;
	        this._inIcu = false;
	        this._msgCountAtSectionStart = undefined;
	        this._errors = [];
	        this._messages = [];
	        this._inImplicitNode = false;
	        this._createI18nMessage = createI18nMessageFactory(interpolationConfig);
	    };
	    // looks for translatable attributes
	    _Visitor.prototype._visitAttributesOf = function (el) {
	        var _this = this;
	        var explicitAttrNameToValue = {};
	        var implicitAttrNames = this._implicitAttrs[el.name] || [];
	        el.attrs.filter(function (attr) { return attr.name.startsWith(_I18N_ATTR_PREFIX); })
	            .forEach(function (attr) { return explicitAttrNameToValue[attr.name.slice(_I18N_ATTR_PREFIX.length)] =
	            attr.value; });
	        el.attrs.forEach(function (attr) {
	            if (attr.name in explicitAttrNameToValue) {
	                _this._addMessage([attr], explicitAttrNameToValue[attr.name]);
	            }
	            else if (implicitAttrNames.some(function (name) { return attr.name === name; })) {
	                _this._addMessage([attr]);
	            }
	        });
	    };
	    // add a translatable message
	    _Visitor.prototype._addMessage = function (ast, msgMeta) {
	        if (ast.length == 0 ||
	            ast.length == 1 && ast[0] instanceof Attribute && !ast[0].value) {
	            // Do not create empty messages
	            return null;
	        }
	        var _a = _parseMessageMeta(msgMeta), meaning = _a.meaning, description = _a.description, id = _a.id;
	        var message = this._createI18nMessage(ast, meaning, description, id);
	        this._messages.push(message);
	        return message;
	    };
	    // Translates the given message given the `TranslationBundle`
	    // This is used for translating elements / blocks - see `_translateAttributes` for attributes
	    // no-op when called in extraction mode (returns [])
	    _Visitor.prototype._translateMessage = function (el, message) {
	        if (message && this._mode === _VisitorMode.Merge) {
	            var nodes = this._translations.get(message);
	            if (nodes) {
	                return nodes;
	            }
	            this._reportError(el, "Translation unavailable for message id=\"" + this._translations.digest(message) + "\"");
	        }
	        return [];
	    };
	    // translate the attributes of an element and remove i18n specific attributes
	    _Visitor.prototype._translateAttributes = function (el) {
	        var _this = this;
	        var attributes = el.attrs;
	        var i18nParsedMessageMeta = {};
	        attributes.forEach(function (attr) {
	            if (attr.name.startsWith(_I18N_ATTR_PREFIX)) {
	                i18nParsedMessageMeta[attr.name.slice(_I18N_ATTR_PREFIX.length)] =
	                    _parseMessageMeta(attr.value);
	            }
	        });
	        var translatedAttributes = [];
	        attributes.forEach(function (attr) {
	            if (attr.name === _I18N_ATTR || attr.name.startsWith(_I18N_ATTR_PREFIX)) {
	                // strip i18n specific attributes
	                return;
	            }
	            if (attr.value && attr.value != '' && i18nParsedMessageMeta.hasOwnProperty(attr.name)) {
	                var _a = i18nParsedMessageMeta[attr.name], meaning = _a.meaning, description = _a.description, id = _a.id;
	                var message = _this._createI18nMessage([attr], meaning, description, id);
	                var nodes = _this._translations.get(message);
	                if (nodes) {
	                    if (nodes.length == 0) {
	                        translatedAttributes.push(new Attribute(attr.name, '', attr.sourceSpan));
	                    }
	                    else if (nodes[0] instanceof Text$3) {
	                        var value = nodes[0].value;
	                        translatedAttributes.push(new Attribute(attr.name, value, attr.sourceSpan));
	                    }
	                    else {
	                        _this._reportError(el, "Unexpected translation for attribute \"" + attr.name + "\" (id=\"" + (id || _this._translations.digest(message)) + "\")");
	                    }
	                }
	                else {
	                    _this._reportError(el, "Translation unavailable for attribute \"" + attr.name + "\" (id=\"" + (id || _this._translations.digest(message)) + "\")");
	                }
	            }
	            else {
	                translatedAttributes.push(attr);
	            }
	        });
	        return translatedAttributes;
	    };
	    /**
	     * Add the node as a child of the block when:
	     * - we are in a block,
	     * - we are not inside a ICU message (those are handled separately),
	     * - the node is a "direct child" of the block
	     */
	    _Visitor.prototype._mayBeAddBlockChildren = function (node) {
	        if (this._inI18nBlock && !this._inIcu && this._depth == this._blockStartDepth) {
	            this._blockChildren.push(node);
	        }
	    };
	    /**
	     * Marks the start of a section, see `_closeTranslatableSection`
	     */
	    _Visitor.prototype._openTranslatableSection = function (node) {
	        if (this._isInTranslatableSection) {
	            this._reportError(node, 'Unexpected section start');
	        }
	        else {
	            this._msgCountAtSectionStart = this._messages.length;
	        }
	    };
	    Object.defineProperty(_Visitor.prototype, "_isInTranslatableSection", {
	        /**
	         * A translatable section could be:
	         * - the content of translatable element,
	         * - nodes between `<!-- i18n -->` and `<!-- /i18n -->` comments
	         */
	        get: function () {
	            return this._msgCountAtSectionStart !== void 0;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    /**
	     * Terminates a section.
	     *
	     * If a section has only one significant children (comments not significant) then we should not
	     * keep the message from this children:
	     *
	     * `<p i18n="meaning|description">{ICU message}</p>` would produce two messages:
	     * - one for the <p> content with meaning and description,
	     * - another one for the ICU message.
	     *
	     * In this case the last message is discarded as it contains less information (the AST is
	     * otherwise identical).
	     *
	     * Note that we should still keep messages extracted from attributes inside the section (ie in the
	     * ICU message here)
	     */
	    _Visitor.prototype._closeTranslatableSection = function (node, directChildren) {
	        if (!this._isInTranslatableSection) {
	            this._reportError(node, 'Unexpected section end');
	            return;
	        }
	        var startIndex = this._msgCountAtSectionStart;
	        var significantChildren = directChildren.reduce(function (count, node) { return count + (node instanceof Comment ? 0 : 1); }, 0);
	        if (significantChildren == 1) {
	            for (var i = this._messages.length - 1; i >= startIndex; i--) {
	                var ast = this._messages[i].nodes;
	                if (!(ast.length == 1 && ast[0] instanceof Text$1)) {
	                    this._messages.splice(i, 1);
	                    break;
	                }
	            }
	        }
	        this._msgCountAtSectionStart = undefined;
	    };
	    _Visitor.prototype._reportError = function (node, msg) {
	        this._errors.push(new I18nError(node.sourceSpan, msg));
	    };
	    return _Visitor;
	}());
	function _isOpeningComment(n) {
	    return !!(n instanceof Comment && n.value && n.value.startsWith('i18n'));
	}
	function _isClosingComment(n) {
	    return !!(n instanceof Comment && n.value && n.value === '/i18n');
	}
	function _getI18nAttr(p) {
	    return p.attrs.find(function (attr) { return attr.name === _I18N_ATTR; }) || null;
	}
	function _parseMessageMeta(i18n) {
	    if (!i18n)
	        return { meaning: '', description: '', id: '' };
	    var idIndex = i18n.indexOf(ID_SEPARATOR);
	    var descIndex = i18n.indexOf(MEANING_SEPARATOR);
	    var _a = __read((idIndex > -1) ? [i18n.slice(0, idIndex), i18n.slice(idIndex + 2)] : [i18n, ''], 2), meaningAndDesc = _a[0], id = _a[1];
	    var _b = __read((descIndex > -1) ?
	        [meaningAndDesc.slice(0, descIndex), meaningAndDesc.slice(descIndex + 1)] :
	        ['', meaningAndDesc], 2), meaning = _b[0], description = _b[1];
	    return { meaning: meaning, description: description, id: id.trim() };
	}

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	var XmlTagDefinition = /** @class */ (function () {
	    function XmlTagDefinition() {
	        this.closedByParent = false;
	        this.contentType = TagContentType.PARSABLE_DATA;
	        this.isVoid = false;
	        this.ignoreFirstLf = false;
	        this.canSelfClose = true;
	    }
	    XmlTagDefinition.prototype.requireExtraParent = function (currentParent) {
	        return false;
	    };
	    XmlTagDefinition.prototype.isClosedByChild = function (name) {
	        return false;
	    };
	    return XmlTagDefinition;
	}());
	var _TAG_DEFINITION = new XmlTagDefinition();
	function getXmlTagDefinition(tagName) {
	    return _TAG_DEFINITION;
	}

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	var XmlParser = /** @class */ (function (_super) {
	    __extends(XmlParser, _super);
	    function XmlParser() {
	        return _super.call(this, getXmlTagDefinition) || this;
	    }
	    XmlParser.prototype.parse = function (source, url, options) {
	        return _super.prototype.parse.call(this, source, url, options);
	    };
	    return XmlParser;
	}(Parser));

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	var _VERSION = '1.2';
	var _XMLNS = 'urn:oasis:names:tc:xliff:document:1.2';
	// TODO(vicb): make this a param (s/_/-/)
	var _DEFAULT_SOURCE_LANG = 'en';
	var _PLACEHOLDER_TAG$1 = 'x';
	var _MARKER_TAG = 'mrk';
	var _FILE_TAG = 'file';
	var _SOURCE_TAG$1 = 'source';
	var _SEGMENT_SOURCE_TAG = 'seg-source';
	var _ALT_TRANS_TAG = 'alt-trans';
	var _TARGET_TAG = 'target';
	var _UNIT_TAG = 'trans-unit';
	var _CONTEXT_GROUP_TAG = 'context-group';
	var _CONTEXT_TAG = 'context';
	// http://docs.oasis-open.org/xliff/v1.2/os/xliff-core.html
	// http://docs.oasis-open.org/xliff/v1.2/xliff-profile-html/xliff-profile-html-1.2.html
	var Xliff = /** @class */ (function (_super) {
	    __extends(Xliff, _super);
	    function Xliff() {
	        return _super !== null && _super.apply(this, arguments) || this;
	    }
	    Xliff.prototype.write = function (messages, locale) {
	        var visitor = new _WriteVisitor();
	        var transUnits = [];
	        messages.forEach(function (message) {
	            var _a;
	            var contextTags = [];
	            message.sources.forEach(function (source) {
	                var contextGroupTag = new Tag(_CONTEXT_GROUP_TAG, { purpose: 'location' });
	                contextGroupTag.children.push(new CR(10), new Tag(_CONTEXT_TAG, { 'context-type': 'sourcefile' }, [new Text$2(source.filePath)]), new CR(10), new Tag(_CONTEXT_TAG, { 'context-type': 'linenumber' }, [new Text$2("" + source.startLine)]), new CR(8));
	                contextTags.push(new CR(8), contextGroupTag);
	            });
	            var transUnit = new Tag(_UNIT_TAG, { id: message.id, datatype: 'html' });
	            (_a = transUnit.children).push.apply(_a, __spread([new CR(8), new Tag(_SOURCE_TAG$1, {}, visitor.serialize(message.nodes))], contextTags));
	            if (message.description) {
	                transUnit.children.push(new CR(8), new Tag('note', { priority: '1', from: 'description' }, [new Text$2(message.description)]));
	            }
	            if (message.meaning) {
	                transUnit.children.push(new CR(8), new Tag('note', { priority: '1', from: 'meaning' }, [new Text$2(message.meaning)]));
	            }
	            transUnit.children.push(new CR(6));
	            transUnits.push(new CR(6), transUnit);
	        });
	        var body = new Tag('body', {}, __spread(transUnits, [new CR(4)]));
	        var file = new Tag('file', {
	            'source-language': locale || _DEFAULT_SOURCE_LANG,
	            datatype: 'plaintext',
	            original: 'ng2.template',
	        }, [new CR(4), body, new CR(2)]);
	        var xliff = new Tag('xliff', { version: _VERSION, xmlns: _XMLNS }, [new CR(2), file, new CR()]);
	        return serialize([
	            new Declaration({ version: '1.0', encoding: 'UTF-8' }), new CR(), xliff, new CR()
	        ]);
	    };
	    Xliff.prototype.load = function (content, url) {
	        // xliff to xml nodes
	        var xliffParser = new XliffParser();
	        var _a = xliffParser.parse(content, url), locale = _a.locale, msgIdToHtml = _a.msgIdToHtml, errors = _a.errors;
	        // xml nodes to i18n nodes
	        var i18nNodesByMsgId = {};
	        var converter = new XmlToI18n();
	        Object.keys(msgIdToHtml).forEach(function (msgId) {
	            var _a = converter.convert(msgIdToHtml[msgId], url), i18nNodes = _a.i18nNodes, e = _a.errors;
	            errors.push.apply(errors, __spread(e));
	            i18nNodesByMsgId[msgId] = i18nNodes;
	        });
	        if (errors.length) {
	            throw new Error("xliff parse errors:\n" + errors.join('\n'));
	        }
	        return { locale: locale, i18nNodesByMsgId: i18nNodesByMsgId };
	    };
	    Xliff.prototype.digest = function (message) {
	        return digest(message);
	    };
	    return Xliff;
	}(Serializer));
	var _WriteVisitor = /** @class */ (function () {
	    function _WriteVisitor() {
	    }
	    _WriteVisitor.prototype.visitText = function (text, context) {
	        return [new Text$2(text.value)];
	    };
	    _WriteVisitor.prototype.visitContainer = function (container, context) {
	        var _this = this;
	        var nodes = [];
	        container.children.forEach(function (node) { return nodes.push.apply(nodes, __spread(node.visit(_this))); });
	        return nodes;
	    };
	    _WriteVisitor.prototype.visitIcu = function (icu, context) {
	        var _this = this;
	        var nodes = [new Text$2("{" + icu.expressionPlaceholder + ", " + icu.type + ", ")];
	        Object.keys(icu.cases).forEach(function (c) {
	            nodes.push.apply(nodes, __spread([new Text$2(c + " {")], icu.cases[c].visit(_this), [new Text$2("} ")]));
	        });
	        nodes.push(new Text$2("}"));
	        return nodes;
	    };
	    _WriteVisitor.prototype.visitTagPlaceholder = function (ph, context) {
	        var ctype = getCtypeForTag(ph.tag);
	        if (ph.isVoid) {
	            // void tags have no children nor closing tags
	            return [new Tag(_PLACEHOLDER_TAG$1, { id: ph.startName, ctype: ctype, 'equiv-text': "<" + ph.tag + "/>" })];
	        }
	        var startTagPh = new Tag(_PLACEHOLDER_TAG$1, { id: ph.startName, ctype: ctype, 'equiv-text': "<" + ph.tag + ">" });
	        var closeTagPh = new Tag(_PLACEHOLDER_TAG$1, { id: ph.closeName, ctype: ctype, 'equiv-text': "</" + ph.tag + ">" });
	        return __spread([startTagPh], this.serialize(ph.children), [closeTagPh]);
	    };
	    _WriteVisitor.prototype.visitPlaceholder = function (ph, context) {
	        return [new Tag(_PLACEHOLDER_TAG$1, { id: ph.name, 'equiv-text': "{{" + ph.value + "}}" })];
	    };
	    _WriteVisitor.prototype.visitIcuPlaceholder = function (ph, context) {
	        var equivText = "{" + ph.value.expression + ", " + ph.value.type + ", " + Object.keys(ph.value.cases).map(function (value) { return value + ' {...}'; }).join(' ') + "}";
	        return [new Tag(_PLACEHOLDER_TAG$1, { id: ph.name, 'equiv-text': equivText })];
	    };
	    _WriteVisitor.prototype.serialize = function (nodes) {
	        var _this = this;
	        return [].concat.apply([], __spread(nodes.map(function (node) { return node.visit(_this); })));
	    };
	    return _WriteVisitor;
	}());
	// TODO(vicb): add error management (structure)
	// Extract messages as xml nodes from the xliff file
	var XliffParser = /** @class */ (function () {
	    function XliffParser() {
	        this._locale = null;
	    }
	    XliffParser.prototype.parse = function (xliff, url) {
	        this._unitMlString = null;
	        this._msgIdToHtml = {};
	        var xml = new XmlParser().parse(xliff, url);
	        this._errors = xml.errors;
	        visitAll$1(this, xml.rootNodes, null);
	        return {
	            msgIdToHtml: this._msgIdToHtml,
	            errors: this._errors,
	            locale: this._locale,
	        };
	    };
	    XliffParser.prototype.visitElement = function (element, context) {
	        switch (element.name) {
	            case _UNIT_TAG:
	                this._unitMlString = null;
	                var idAttr = element.attrs.find(function (attr) { return attr.name === 'id'; });
	                if (!idAttr) {
	                    this._addError(element, "<" + _UNIT_TAG + "> misses the \"id\" attribute");
	                }
	                else {
	                    var id = idAttr.value;
	                    if (this._msgIdToHtml.hasOwnProperty(id)) {
	                        this._addError(element, "Duplicated translations for msg " + id);
	                    }
	                    else {
	                        visitAll$1(this, element.children, null);
	                        if (typeof this._unitMlString === 'string') {
	                            this._msgIdToHtml[id] = this._unitMlString;
	                        }
	                        else {
	                            this._addError(element, "Message " + id + " misses a translation");
	                        }
	                    }
	                }
	                break;
	            // ignore those tags
	            case _SOURCE_TAG$1:
	            case _SEGMENT_SOURCE_TAG:
	            case _ALT_TRANS_TAG:
	                break;
	            case _TARGET_TAG:
	                var innerTextStart = element.startSourceSpan.end.offset;
	                var innerTextEnd = element.endSourceSpan.start.offset;
	                var content = element.startSourceSpan.start.file.content;
	                var innerText = content.slice(innerTextStart, innerTextEnd);
	                this._unitMlString = innerText;
	                break;
	            case _FILE_TAG:
	                var localeAttr = element.attrs.find(function (attr) { return attr.name === 'target-language'; });
	                if (localeAttr) {
	                    this._locale = localeAttr.value;
	                }
	                visitAll$1(this, element.children, null);
	                break;
	            default:
	                // TODO(vicb): assert file structure, xliff version
	                // For now only recurse on unhandled nodes
	                visitAll$1(this, element.children, null);
	        }
	    };
	    XliffParser.prototype.visitAttribute = function (attribute, context) { };
	    XliffParser.prototype.visitText = function (text, context) { };
	    XliffParser.prototype.visitComment = function (comment, context) { };
	    XliffParser.prototype.visitExpansion = function (expansion, context) { };
	    XliffParser.prototype.visitExpansionCase = function (expansionCase, context) { };
	    XliffParser.prototype._addError = function (node, message) {
	        this._errors.push(new I18nError(node.sourceSpan, message));
	    };
	    return XliffParser;
	}());
	// Convert ml nodes (xliff syntax) to i18n nodes
	var XmlToI18n = /** @class */ (function () {
	    function XmlToI18n() {
	    }
	    XmlToI18n.prototype.convert = function (message, url) {
	        var xmlIcu = new XmlParser().parse(message, url, { tokenizeExpansionForms: true });
	        this._errors = xmlIcu.errors;
	        var i18nNodes = this._errors.length > 0 || xmlIcu.rootNodes.length == 0 ?
	            [] : [].concat.apply([], __spread(visitAll$1(this, xmlIcu.rootNodes)));
	        return {
	            i18nNodes: i18nNodes,
	            errors: this._errors,
	        };
	    };
	    XmlToI18n.prototype.visitText = function (text, context) {
	        return new Text$1(text.value, text.sourceSpan);
	    };
	    XmlToI18n.prototype.visitElement = function (el, context) {
	        if (el.name === _PLACEHOLDER_TAG$1) {
	            var nameAttr = el.attrs.find(function (attr) { return attr.name === 'id'; });
	            if (nameAttr) {
	                return new Placeholder('', nameAttr.value, el.sourceSpan);
	            }
	            this._addError(el, "<" + _PLACEHOLDER_TAG$1 + "> misses the \"id\" attribute");
	            return null;
	        }
	        if (el.name === _MARKER_TAG) {
	            return [].concat.apply([], __spread(visitAll$1(this, el.children)));
	        }
	        this._addError(el, "Unexpected tag");
	        return null;
	    };
	    XmlToI18n.prototype.visitExpansion = function (icu, context) {
	        var caseMap = {};
	        visitAll$1(this, icu.cases).forEach(function (c) {
	            caseMap[c.value] = new Container(c.nodes, icu.sourceSpan);
	        });
	        return new Icu$1(icu.switchValue, icu.type, caseMap, icu.sourceSpan);
	    };
	    XmlToI18n.prototype.visitExpansionCase = function (icuCase, context) {
	        return {
	            value: icuCase.value,
	            nodes: visitAll$1(this, icuCase.expression),
	        };
	    };
	    XmlToI18n.prototype.visitComment = function (comment, context) { };
	    XmlToI18n.prototype.visitAttribute = function (attribute, context) { };
	    XmlToI18n.prototype._addError = function (node, message) {
	        this._errors.push(new I18nError(node.sourceSpan, message));
	    };
	    return XmlToI18n;
	}());
	function getCtypeForTag(tag) {
	    switch (tag.toLowerCase()) {
	        case 'br':
	            return 'lb';
	        case 'img':
	            return 'image';
	        default:
	            return "x-" + tag;
	    }
	}

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	var _VERSION$1 = '2.0';
	var _XMLNS$1 = 'urn:oasis:names:tc:xliff:document:2.0';
	// TODO(vicb): make this a param (s/_/-/)
	var _DEFAULT_SOURCE_LANG$1 = 'en';
	var _PLACEHOLDER_TAG$2 = 'ph';
	var _PLACEHOLDER_SPANNING_TAG = 'pc';
	var _MARKER_TAG$1 = 'mrk';
	var _XLIFF_TAG = 'xliff';
	var _SOURCE_TAG$2 = 'source';
	var _TARGET_TAG$1 = 'target';
	var _UNIT_TAG$1 = 'unit';
	// http://docs.oasis-open.org/xliff/xliff-core/v2.0/os/xliff-core-v2.0-os.html
	var Xliff2 = /** @class */ (function (_super) {
	    __extends(Xliff2, _super);
	    function Xliff2() {
	        return _super !== null && _super.apply(this, arguments) || this;
	    }
	    Xliff2.prototype.write = function (messages, locale) {
	        var visitor = new _WriteVisitor$1();
	        var units = [];
	        messages.forEach(function (message) {
	            var unit = new Tag(_UNIT_TAG$1, { id: message.id });
	            var notes = new Tag('notes');
	            if (message.description || message.meaning) {
	                if (message.description) {
	                    notes.children.push(new CR(8), new Tag('note', { category: 'description' }, [new Text$2(message.description)]));
	                }
	                if (message.meaning) {
	                    notes.children.push(new CR(8), new Tag('note', { category: 'meaning' }, [new Text$2(message.meaning)]));
	                }
	            }
	            message.sources.forEach(function (source) {
	                notes.children.push(new CR(8), new Tag('note', { category: 'location' }, [
	                    new Text$2(source.filePath + ":" + source.startLine + (source.endLine !== source.startLine ? ',' + source.endLine : ''))
	                ]));
	            });
	            notes.children.push(new CR(6));
	            unit.children.push(new CR(6), notes);
	            var segment = new Tag('segment');
	            segment.children.push(new CR(8), new Tag(_SOURCE_TAG$2, {}, visitor.serialize(message.nodes)), new CR(6));
	            unit.children.push(new CR(6), segment, new CR(4));
	            units.push(new CR(4), unit);
	        });
	        var file = new Tag('file', { 'original': 'ng.template', id: 'ngi18n' }, __spread(units, [new CR(2)]));
	        var xliff = new Tag(_XLIFF_TAG, { version: _VERSION$1, xmlns: _XMLNS$1, srcLang: locale || _DEFAULT_SOURCE_LANG$1 }, [new CR(2), file, new CR()]);
	        return serialize([
	            new Declaration({ version: '1.0', encoding: 'UTF-8' }), new CR(), xliff, new CR()
	        ]);
	    };
	    Xliff2.prototype.load = function (content, url) {
	        // xliff to xml nodes
	        var xliff2Parser = new Xliff2Parser();
	        var _a = xliff2Parser.parse(content, url), locale = _a.locale, msgIdToHtml = _a.msgIdToHtml, errors = _a.errors;
	        // xml nodes to i18n nodes
	        var i18nNodesByMsgId = {};
	        var converter = new XmlToI18n$1();
	        Object.keys(msgIdToHtml).forEach(function (msgId) {
	            var _a = converter.convert(msgIdToHtml[msgId], url), i18nNodes = _a.i18nNodes, e = _a.errors;
	            errors.push.apply(errors, __spread(e));
	            i18nNodesByMsgId[msgId] = i18nNodes;
	        });
	        if (errors.length) {
	            throw new Error("xliff2 parse errors:\n" + errors.join('\n'));
	        }
	        return { locale: locale, i18nNodesByMsgId: i18nNodesByMsgId };
	    };
	    Xliff2.prototype.digest = function (message) {
	        return decimalDigest(message);
	    };
	    return Xliff2;
	}(Serializer));
	var _WriteVisitor$1 = /** @class */ (function () {
	    function _WriteVisitor() {
	    }
	    _WriteVisitor.prototype.visitText = function (text, context) {
	        return [new Text$2(text.value)];
	    };
	    _WriteVisitor.prototype.visitContainer = function (container, context) {
	        var _this = this;
	        var nodes = [];
	        container.children.forEach(function (node) { return nodes.push.apply(nodes, __spread(node.visit(_this))); });
	        return nodes;
	    };
	    _WriteVisitor.prototype.visitIcu = function (icu, context) {
	        var _this = this;
	        var nodes = [new Text$2("{" + icu.expressionPlaceholder + ", " + icu.type + ", ")];
	        Object.keys(icu.cases).forEach(function (c) {
	            nodes.push.apply(nodes, __spread([new Text$2(c + " {")], icu.cases[c].visit(_this), [new Text$2("} ")]));
	        });
	        nodes.push(new Text$2("}"));
	        return nodes;
	    };
	    _WriteVisitor.prototype.visitTagPlaceholder = function (ph, context) {
	        var _this = this;
	        var type = getTypeForTag(ph.tag);
	        if (ph.isVoid) {
	            var tagPh = new Tag(_PLACEHOLDER_TAG$2, {
	                id: (this._nextPlaceholderId++).toString(),
	                equiv: ph.startName,
	                type: type,
	                disp: "<" + ph.tag + "/>",
	            });
	            return [tagPh];
	        }
	        var tagPc = new Tag(_PLACEHOLDER_SPANNING_TAG, {
	            id: (this._nextPlaceholderId++).toString(),
	            equivStart: ph.startName,
	            equivEnd: ph.closeName,
	            type: type,
	            dispStart: "<" + ph.tag + ">",
	            dispEnd: "</" + ph.tag + ">",
	        });
	        var nodes = [].concat.apply([], __spread(ph.children.map(function (node) { return node.visit(_this); })));
	        if (nodes.length) {
	            nodes.forEach(function (node) { return tagPc.children.push(node); });
	        }
	        else {
	            tagPc.children.push(new Text$2(''));
	        }
	        return [tagPc];
	    };
	    _WriteVisitor.prototype.visitPlaceholder = function (ph, context) {
	        var idStr = (this._nextPlaceholderId++).toString();
	        return [new Tag(_PLACEHOLDER_TAG$2, {
	                id: idStr,
	                equiv: ph.name,
	                disp: "{{" + ph.value + "}}",
	            })];
	    };
	    _WriteVisitor.prototype.visitIcuPlaceholder = function (ph, context) {
	        var cases = Object.keys(ph.value.cases).map(function (value) { return value + ' {...}'; }).join(' ');
	        var idStr = (this._nextPlaceholderId++).toString();
	        return [new Tag(_PLACEHOLDER_TAG$2, { id: idStr, equiv: ph.name, disp: "{" + ph.value.expression + ", " + ph.value.type + ", " + cases + "}" })];
	    };
	    _WriteVisitor.prototype.serialize = function (nodes) {
	        var _this = this;
	        this._nextPlaceholderId = 0;
	        return [].concat.apply([], __spread(nodes.map(function (node) { return node.visit(_this); })));
	    };
	    return _WriteVisitor;
	}());
	// Extract messages as xml nodes from the xliff file
	var Xliff2Parser = /** @class */ (function () {
	    function Xliff2Parser() {
	        this._locale = null;
	    }
	    Xliff2Parser.prototype.parse = function (xliff, url) {
	        this._unitMlString = null;
	        this._msgIdToHtml = {};
	        var xml = new XmlParser().parse(xliff, url);
	        this._errors = xml.errors;
	        visitAll$1(this, xml.rootNodes, null);
	        return {
	            msgIdToHtml: this._msgIdToHtml,
	            errors: this._errors,
	            locale: this._locale,
	        };
	    };
	    Xliff2Parser.prototype.visitElement = function (element, context) {
	        switch (element.name) {
	            case _UNIT_TAG$1:
	                this._unitMlString = null;
	                var idAttr = element.attrs.find(function (attr) { return attr.name === 'id'; });
	                if (!idAttr) {
	                    this._addError(element, "<" + _UNIT_TAG$1 + "> misses the \"id\" attribute");
	                }
	                else {
	                    var id = idAttr.value;
	                    if (this._msgIdToHtml.hasOwnProperty(id)) {
	                        this._addError(element, "Duplicated translations for msg " + id);
	                    }
	                    else {
	                        visitAll$1(this, element.children, null);
	                        if (typeof this._unitMlString === 'string') {
	                            this._msgIdToHtml[id] = this._unitMlString;
	                        }
	                        else {
	                            this._addError(element, "Message " + id + " misses a translation");
	                        }
	                    }
	                }
	                break;
	            case _SOURCE_TAG$2:
	                // ignore source message
	                break;
	            case _TARGET_TAG$1:
	                var innerTextStart = element.startSourceSpan.end.offset;
	                var innerTextEnd = element.endSourceSpan.start.offset;
	                var content = element.startSourceSpan.start.file.content;
	                var innerText = content.slice(innerTextStart, innerTextEnd);
	                this._unitMlString = innerText;
	                break;
	            case _XLIFF_TAG:
	                var localeAttr = element.attrs.find(function (attr) { return attr.name === 'trgLang'; });
	                if (localeAttr) {
	                    this._locale = localeAttr.value;
	                }
	                var versionAttr = element.attrs.find(function (attr) { return attr.name === 'version'; });
	                if (versionAttr) {
	                    var version = versionAttr.value;
	                    if (version !== '2.0') {
	                        this._addError(element, "The XLIFF file version " + version + " is not compatible with XLIFF 2.0 serializer");
	                    }
	                    else {
	                        visitAll$1(this, element.children, null);
	                    }
	                }
	                break;
	            default:
	                visitAll$1(this, element.children, null);
	        }
	    };
	    Xliff2Parser.prototype.visitAttribute = function (attribute, context) { };
	    Xliff2Parser.prototype.visitText = function (text, context) { };
	    Xliff2Parser.prototype.visitComment = function (comment, context) { };
	    Xliff2Parser.prototype.visitExpansion = function (expansion, context) { };
	    Xliff2Parser.prototype.visitExpansionCase = function (expansionCase, context) { };
	    Xliff2Parser.prototype._addError = function (node, message) {
	        this._errors.push(new I18nError(node.sourceSpan, message));
	    };
	    return Xliff2Parser;
	}());
	// Convert ml nodes (xliff syntax) to i18n nodes
	var XmlToI18n$1 = /** @class */ (function () {
	    function XmlToI18n() {
	    }
	    XmlToI18n.prototype.convert = function (message, url) {
	        var xmlIcu = new XmlParser().parse(message, url, { tokenizeExpansionForms: true });
	        this._errors = xmlIcu.errors;
	        var i18nNodes = this._errors.length > 0 || xmlIcu.rootNodes.length == 0 ?
	            [] : [].concat.apply([], __spread(visitAll$1(this, xmlIcu.rootNodes)));
	        return {
	            i18nNodes: i18nNodes,
	            errors: this._errors,
	        };
	    };
	    XmlToI18n.prototype.visitText = function (text, context) {
	        return new Text$1(text.value, text.sourceSpan);
	    };
	    XmlToI18n.prototype.visitElement = function (el, context) {
	        var _this = this;
	        switch (el.name) {
	            case _PLACEHOLDER_TAG$2:
	                var nameAttr = el.attrs.find(function (attr) { return attr.name === 'equiv'; });
	                if (nameAttr) {
	                    return [new Placeholder('', nameAttr.value, el.sourceSpan)];
	                }
	                this._addError(el, "<" + _PLACEHOLDER_TAG$2 + "> misses the \"equiv\" attribute");
	                break;
	            case _PLACEHOLDER_SPANNING_TAG:
	                var startAttr = el.attrs.find(function (attr) { return attr.name === 'equivStart'; });
	                var endAttr = el.attrs.find(function (attr) { return attr.name === 'equivEnd'; });
	                if (!startAttr) {
	                    this._addError(el, "<" + _PLACEHOLDER_TAG$2 + "> misses the \"equivStart\" attribute");
	                }
	                else if (!endAttr) {
	                    this._addError(el, "<" + _PLACEHOLDER_TAG$2 + "> misses the \"equivEnd\" attribute");
	                }
	                else {
	                    var startId = startAttr.value;
	                    var endId = endAttr.value;
	                    var nodes = [];
	                    return nodes.concat.apply(nodes, __spread([new Placeholder('', startId, el.sourceSpan)], el.children.map(function (node) { return node.visit(_this, null); }), [new Placeholder('', endId, el.sourceSpan)]));
	                }
	                break;
	            case _MARKER_TAG$1:
	                return [].concat.apply([], __spread(visitAll$1(this, el.children)));
	            default:
	                this._addError(el, "Unexpected tag");
	        }
	        return null;
	    };
	    XmlToI18n.prototype.visitExpansion = function (icu, context) {
	        var caseMap = {};
	        visitAll$1(this, icu.cases).forEach(function (c) {
	            caseMap[c.value] = new Container(c.nodes, icu.sourceSpan);
	        });
	        return new Icu$1(icu.switchValue, icu.type, caseMap, icu.sourceSpan);
	    };
	    XmlToI18n.prototype.visitExpansionCase = function (icuCase, context) {
	        return {
	            value: icuCase.value,
	            nodes: [].concat.apply([], __spread(visitAll$1(this, icuCase.expression))),
	        };
	    };
	    XmlToI18n.prototype.visitComment = function (comment, context) { };
	    XmlToI18n.prototype.visitAttribute = function (attribute, context) { };
	    XmlToI18n.prototype._addError = function (node, message) {
	        this._errors.push(new I18nError(node.sourceSpan, message));
	    };
	    return XmlToI18n;
	}());
	function getTypeForTag(tag) {
	    switch (tag.toLowerCase()) {
	        case 'br':
	        case 'b':
	        case 'i':
	        case 'u':
	            return 'fmt';
	        case 'img':
	            return 'image';
	        case 'a':
	            return 'link';
	        default:
	            return 'other';
	    }
	}

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	var _TRANSLATIONS_TAG = 'translationbundle';
	var _TRANSLATION_TAG = 'translation';
	var _PLACEHOLDER_TAG$3 = 'ph';
	var Xtb = /** @class */ (function (_super) {
	    __extends(Xtb, _super);
	    function Xtb() {
	        return _super !== null && _super.apply(this, arguments) || this;
	    }
	    Xtb.prototype.write = function (messages, locale) {
	        throw new Error('Unsupported');
	    };
	    Xtb.prototype.load = function (content, url) {
	        // xtb to xml nodes
	        var xtbParser = new XtbParser();
	        var _a = xtbParser.parse(content, url), locale = _a.locale, msgIdToHtml = _a.msgIdToHtml, errors = _a.errors;
	        // xml nodes to i18n nodes
	        var i18nNodesByMsgId = {};
	        var converter = new XmlToI18n$2();
	        // Because we should be able to load xtb files that rely on features not supported by angular,
	        // we need to delay the conversion of html to i18n nodes so that non angular messages are not
	        // converted
	        Object.keys(msgIdToHtml).forEach(function (msgId) {
	            var valueFn = function () {
	                var _a = converter.convert(msgIdToHtml[msgId], url), i18nNodes = _a.i18nNodes, errors = _a.errors;
	                if (errors.length) {
	                    throw new Error("xtb parse errors:\n" + errors.join('\n'));
	                }
	                return i18nNodes;
	            };
	            createLazyProperty(i18nNodesByMsgId, msgId, valueFn);
	        });
	        if (errors.length) {
	            throw new Error("xtb parse errors:\n" + errors.join('\n'));
	        }
	        return { locale: locale, i18nNodesByMsgId: i18nNodesByMsgId };
	    };
	    Xtb.prototype.digest = function (message) {
	        return digest$1(message);
	    };
	    Xtb.prototype.createNameMapper = function (message) {
	        return new SimplePlaceholderMapper(message, toPublicName);
	    };
	    return Xtb;
	}(Serializer));
	function createLazyProperty(messages, id, valueFn) {
	    Object.defineProperty(messages, id, {
	        configurable: true,
	        enumerable: true,
	        get: function () {
	            var value = valueFn();
	            Object.defineProperty(messages, id, { enumerable: true, value: value });
	            return value;
	        },
	        set: function (_) {
	            throw new Error('Could not overwrite an XTB translation');
	        },
	    });
	}
	// Extract messages as xml nodes from the xtb file
	var XtbParser = /** @class */ (function () {
	    function XtbParser() {
	        this._locale = null;
	    }
	    XtbParser.prototype.parse = function (xtb, url) {
	        this._bundleDepth = 0;
	        this._msgIdToHtml = {};
	        // We can not parse the ICU messages at this point as some messages might not originate
	        // from Angular that could not be lex'd.
	        var xml = new XmlParser().parse(xtb, url);
	        this._errors = xml.errors;
	        visitAll$1(this, xml.rootNodes);
	        return {
	            msgIdToHtml: this._msgIdToHtml,
	            errors: this._errors,
	            locale: this._locale,
	        };
	    };
	    XtbParser.prototype.visitElement = function (element, context) {
	        switch (element.name) {
	            case _TRANSLATIONS_TAG:
	                this._bundleDepth++;
	                if (this._bundleDepth > 1) {
	                    this._addError(element, "<" + _TRANSLATIONS_TAG + "> elements can not be nested");
	                }
	                var langAttr = element.attrs.find(function (attr) { return attr.name === 'lang'; });
	                if (langAttr) {
	                    this._locale = langAttr.value;
	                }
	                visitAll$1(this, element.children, null);
	                this._bundleDepth--;
	                break;
	            case _TRANSLATION_TAG:
	                var idAttr = element.attrs.find(function (attr) { return attr.name === 'id'; });
	                if (!idAttr) {
	                    this._addError(element, "<" + _TRANSLATION_TAG + "> misses the \"id\" attribute");
	                }
	                else {
	                    var id = idAttr.value;
	                    if (this._msgIdToHtml.hasOwnProperty(id)) {
	                        this._addError(element, "Duplicated translations for msg " + id);
	                    }
	                    else {
	                        var innerTextStart = element.startSourceSpan.end.offset;
	                        var innerTextEnd = element.endSourceSpan.start.offset;
	                        var content = element.startSourceSpan.start.file.content;
	                        var innerText = content.slice(innerTextStart, innerTextEnd);
	                        this._msgIdToHtml[id] = innerText;
	                    }
	                }
	                break;
	            default:
	                this._addError(element, 'Unexpected tag');
	        }
	    };
	    XtbParser.prototype.visitAttribute = function (attribute, context) { };
	    XtbParser.prototype.visitText = function (text, context) { };
	    XtbParser.prototype.visitComment = function (comment, context) { };
	    XtbParser.prototype.visitExpansion = function (expansion, context) { };
	    XtbParser.prototype.visitExpansionCase = function (expansionCase, context) { };
	    XtbParser.prototype._addError = function (node, message) {
	        this._errors.push(new I18nError(node.sourceSpan, message));
	    };
	    return XtbParser;
	}());
	// Convert ml nodes (xtb syntax) to i18n nodes
	var XmlToI18n$2 = /** @class */ (function () {
	    function XmlToI18n() {
	    }
	    XmlToI18n.prototype.convert = function (message, url) {
	        var xmlIcu = new XmlParser().parse(message, url, { tokenizeExpansionForms: true });
	        this._errors = xmlIcu.errors;
	        var i18nNodes = this._errors.length > 0 || xmlIcu.rootNodes.length == 0 ?
	            [] :
	            visitAll$1(this, xmlIcu.rootNodes);
	        return {
	            i18nNodes: i18nNodes,
	            errors: this._errors,
	        };
	    };
	    XmlToI18n.prototype.visitText = function (text, context) {
	        return new Text$1(text.value, text.sourceSpan);
	    };
	    XmlToI18n.prototype.visitExpansion = function (icu, context) {
	        var caseMap = {};
	        visitAll$1(this, icu.cases).forEach(function (c) {
	            caseMap[c.value] = new Container(c.nodes, icu.sourceSpan);
	        });
	        return new Icu$1(icu.switchValue, icu.type, caseMap, icu.sourceSpan);
	    };
	    XmlToI18n.prototype.visitExpansionCase = function (icuCase, context) {
	        return {
	            value: icuCase.value,
	            nodes: visitAll$1(this, icuCase.expression),
	        };
	    };
	    XmlToI18n.prototype.visitElement = function (el, context) {
	        if (el.name === _PLACEHOLDER_TAG$3) {
	            var nameAttr = el.attrs.find(function (attr) { return attr.name === 'name'; });
	            if (nameAttr) {
	                return new Placeholder('', nameAttr.value, el.sourceSpan);
	            }
	            this._addError(el, "<" + _PLACEHOLDER_TAG$3 + "> misses the \"name\" attribute");
	        }
	        else {
	            this._addError(el, "Unexpected tag");
	        }
	        return null;
	    };
	    XmlToI18n.prototype.visitComment = function (comment, context) { };
	    XmlToI18n.prototype.visitAttribute = function (attribute, context) { };
	    XmlToI18n.prototype._addError = function (node, message) {
	        this._errors.push(new I18nError(node.sourceSpan, message));
	    };
	    return XmlToI18n;
	}());

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * A container for translated messages
	 */
	var TranslationBundle = /** @class */ (function () {
	    function TranslationBundle(_i18nNodesByMsgId, locale, digest, mapperFactory, missingTranslationStrategy, console) {
	        if (_i18nNodesByMsgId === void 0) { _i18nNodesByMsgId = {}; }
	        if (missingTranslationStrategy === void 0) { missingTranslationStrategy = MissingTranslationStrategy.Warning; }
	        this._i18nNodesByMsgId = _i18nNodesByMsgId;
	        this.digest = digest;
	        this.mapperFactory = mapperFactory;
	        this._i18nToHtml = new I18nToHtmlVisitor(_i18nNodesByMsgId, locale, digest, mapperFactory, missingTranslationStrategy, console);
	    }
	    // Creates a `TranslationBundle` by parsing the given `content` with the `serializer`.
	    TranslationBundle.load = function (content, url, serializer, missingTranslationStrategy, console) {
	        var _a = serializer.load(content, url), locale = _a.locale, i18nNodesByMsgId = _a.i18nNodesByMsgId;
	        var digestFn = function (m) { return serializer.digest(m); };
	        var mapperFactory = function (m) { return serializer.createNameMapper(m); };
	        return new TranslationBundle(i18nNodesByMsgId, locale, digestFn, mapperFactory, missingTranslationStrategy, console);
	    };
	    // Returns the translation as HTML nodes from the given source message.
	    TranslationBundle.prototype.get = function (srcMsg) {
	        var html = this._i18nToHtml.convert(srcMsg);
	        if (html.errors.length) {
	            throw new Error(html.errors.join('\n'));
	        }
	        return html.nodes;
	    };
	    TranslationBundle.prototype.has = function (srcMsg) {
	        return this.digest(srcMsg) in this._i18nNodesByMsgId;
	    };
	    return TranslationBundle;
	}());
	var I18nToHtmlVisitor = /** @class */ (function () {
	    function I18nToHtmlVisitor(_i18nNodesByMsgId, _locale, _digest, _mapperFactory, _missingTranslationStrategy, _console) {
	        if (_i18nNodesByMsgId === void 0) { _i18nNodesByMsgId = {}; }
	        this._i18nNodesByMsgId = _i18nNodesByMsgId;
	        this._locale = _locale;
	        this._digest = _digest;
	        this._mapperFactory = _mapperFactory;
	        this._missingTranslationStrategy = _missingTranslationStrategy;
	        this._console = _console;
	        this._contextStack = [];
	        this._errors = [];
	    }
	    I18nToHtmlVisitor.prototype.convert = function (srcMsg) {
	        this._contextStack.length = 0;
	        this._errors.length = 0;
	        // i18n to text
	        var text = this._convertToText(srcMsg);
	        // text to html
	        var url = srcMsg.nodes[0].sourceSpan.start.file.url;
	        var html = new HtmlParser().parse(text, url, { tokenizeExpansionForms: true });
	        return {
	            nodes: html.rootNodes,
	            errors: __spread(this._errors, html.errors),
	        };
	    };
	    I18nToHtmlVisitor.prototype.visitText = function (text, context) {
	        // `convert()` uses an `HtmlParser` to return `html.Node`s
	        // we should then make sure that any special characters are escaped
	        return escapeXml(text.value);
	    };
	    I18nToHtmlVisitor.prototype.visitContainer = function (container, context) {
	        var _this = this;
	        return container.children.map(function (n) { return n.visit(_this); }).join('');
	    };
	    I18nToHtmlVisitor.prototype.visitIcu = function (icu, context) {
	        var _this = this;
	        var cases = Object.keys(icu.cases).map(function (k) { return k + " {" + icu.cases[k].visit(_this) + "}"; });
	        // TODO(vicb): Once all format switch to using expression placeholders
	        // we should throw when the placeholder is not in the source message
	        var exp = this._srcMsg.placeholders.hasOwnProperty(icu.expression) ?
	            this._srcMsg.placeholders[icu.expression] :
	            icu.expression;
	        return "{" + exp + ", " + icu.type + ", " + cases.join(' ') + "}";
	    };
	    I18nToHtmlVisitor.prototype.visitPlaceholder = function (ph, context) {
	        var phName = this._mapper(ph.name);
	        if (this._srcMsg.placeholders.hasOwnProperty(phName)) {
	            return this._srcMsg.placeholders[phName];
	        }
	        if (this._srcMsg.placeholderToMessage.hasOwnProperty(phName)) {
	            return this._convertToText(this._srcMsg.placeholderToMessage[phName]);
	        }
	        this._addError(ph, "Unknown placeholder \"" + ph.name + "\"");
	        return '';
	    };
	    // Loaded message contains only placeholders (vs tag and icu placeholders).
	    // However when a translation can not be found, we need to serialize the source message
	    // which can contain tag placeholders
	    I18nToHtmlVisitor.prototype.visitTagPlaceholder = function (ph, context) {
	        var _this = this;
	        var tag = "" + ph.tag;
	        var attrs = Object.keys(ph.attrs).map(function (name) { return name + "=\"" + ph.attrs[name] + "\""; }).join(' ');
	        if (ph.isVoid) {
	            return "<" + tag + " " + attrs + "/>";
	        }
	        var children = ph.children.map(function (c) { return c.visit(_this); }).join('');
	        return "<" + tag + " " + attrs + ">" + children + "</" + tag + ">";
	    };
	    // Loaded message contains only placeholders (vs tag and icu placeholders).
	    // However when a translation can not be found, we need to serialize the source message
	    // which can contain tag placeholders
	    I18nToHtmlVisitor.prototype.visitIcuPlaceholder = function (ph, context) {
	        // An ICU placeholder references the source message to be serialized
	        return this._convertToText(this._srcMsg.placeholderToMessage[ph.name]);
	    };
	    /**
	     * Convert a source message to a translated text string:
	     * - text nodes are replaced with their translation,
	     * - placeholders are replaced with their content,
	     * - ICU nodes are converted to ICU expressions.
	     */
	    I18nToHtmlVisitor.prototype._convertToText = function (srcMsg) {
	        var _this = this;
	        var id = this._digest(srcMsg);
	        var mapper = this._mapperFactory ? this._mapperFactory(srcMsg) : null;
	        var nodes;
	        this._contextStack.push({ msg: this._srcMsg, mapper: this._mapper });
	        this._srcMsg = srcMsg;
	        if (this._i18nNodesByMsgId.hasOwnProperty(id)) {
	            // When there is a translation use its nodes as the source
	            // And create a mapper to convert serialized placeholder names to internal names
	            nodes = this._i18nNodesByMsgId[id];
	            this._mapper = function (name) { return mapper ? mapper.toInternalName(name) : name; };
	        }
	        else {
	            // When no translation has been found
	            // - report an error / a warning / nothing,
	            // - use the nodes from the original message
	            // - placeholders are already internal and need no mapper
	            if (this._missingTranslationStrategy === MissingTranslationStrategy.Error) {
	                var ctx = this._locale ? " for locale \"" + this._locale + "\"" : '';
	                this._addError(srcMsg.nodes[0], "Missing translation for message \"" + id + "\"" + ctx);
	            }
	            else if (this._console &&
	                this._missingTranslationStrategy === MissingTranslationStrategy.Warning) {
	                var ctx = this._locale ? " for locale \"" + this._locale + "\"" : '';
	                this._console.warn("Missing translation for message \"" + id + "\"" + ctx);
	            }
	            nodes = srcMsg.nodes;
	            this._mapper = function (name) { return name; };
	        }
	        var text = nodes.map(function (node) { return node.visit(_this); }).join('');
	        var context = this._contextStack.pop();
	        this._srcMsg = context.msg;
	        this._mapper = context.mapper;
	        return text;
	    };
	    I18nToHtmlVisitor.prototype._addError = function (el, msg) {
	        this._errors.push(new I18nError(el.sourceSpan, msg));
	    };
	    return I18nToHtmlVisitor;
	}());

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	var I18NHtmlParser = /** @class */ (function () {
	    function I18NHtmlParser(_htmlParser, translations, translationsFormat, missingTranslation, console) {
	        if (missingTranslation === void 0) { missingTranslation = MissingTranslationStrategy.Warning; }
	        this._htmlParser = _htmlParser;
	        if (translations) {
	            var serializer = createSerializer(translationsFormat);
	            this._translationBundle =
	                TranslationBundle.load(translations, 'i18n', serializer, missingTranslation, console);
	        }
	        else {
	            this._translationBundle =
	                new TranslationBundle({}, null, digest, undefined, missingTranslation, console);
	        }
	    }
	    I18NHtmlParser.prototype.parse = function (source, url, options) {
	        if (options === void 0) { options = {}; }
	        var interpolationConfig = options.interpolationConfig || DEFAULT_INTERPOLATION_CONFIG;
	        var parseResult = this._htmlParser.parse(source, url, __assign({ interpolationConfig: interpolationConfig }, options));
	        if (parseResult.errors.length) {
	            return new ParseTreeResult(parseResult.rootNodes, parseResult.errors);
	        }
	        return mergeTranslations(parseResult.rootNodes, this._translationBundle, interpolationConfig, [], {});
	    };
	    return I18NHtmlParser;
	}());
	function createSerializer(format) {
	    format = (format || 'xlf').toLowerCase();
	    switch (format) {
	        case 'xmb':
	            return new Xmb();
	        case 'xtb':
	            return new Xtb();
	        case 'xliff2':
	        case 'xlf2':
	            return new Xliff2();
	        case 'xliff':
	        case 'xlf':
	        default:
	            return new Xliff();
	    }
	}

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	var QUOTED_KEYS = '$quoted$';
	function convertValueToOutputAst(ctx, value, type) {
	    if (type === void 0) { type = null; }
	    return visitValue(value, new _ValueOutputAstTransformer(ctx), type);
	}
	var _ValueOutputAstTransformer = /** @class */ (function () {
	    function _ValueOutputAstTransformer(ctx) {
	        this.ctx = ctx;
	    }
	    _ValueOutputAstTransformer.prototype.visitArray = function (arr, type) {
	        var values = [];
	        // Note Array.map() must not be used to convert the values because it will
	        // skip over empty elements in arrays constructed using `new Array(length)`,
	        // resulting in `undefined` elements. This breaks the type guarantee that
	        // all values in `o.LiteralArrayExpr` are of type `o.Expression`.
	        // See test case in `value_util_spec.ts`.
	        for (var i = 0; i < arr.length; ++i) {
	            values.push(visitValue(arr[i], this, null /* context */));
	        }
	        return literalArr(values, type);
	    };
	    _ValueOutputAstTransformer.prototype.visitStringMap = function (map, type) {
	        var _this = this;
	        var entries = [];
	        var quotedSet = new Set(map && map[QUOTED_KEYS]);
	        Object.keys(map).forEach(function (key) {
	            entries.push(new LiteralMapEntry(key, visitValue(map[key], _this, null), quotedSet.has(key)));
	        });
	        return new LiteralMapExpr(entries, type);
	    };
	    _ValueOutputAstTransformer.prototype.visitPrimitive = function (value, type) {
	        return literal(value, type);
	    };
	    _ValueOutputAstTransformer.prototype.visitOther = function (value, type) {
	        if (value instanceof Expression) {
	            return value;
	        }
	        else {
	            return this.ctx.importExpr(value);
	        }
	    };
	    return _ValueOutputAstTransformer;
	}());
	function ngfactoryFilePath(filePath, forceSourceFile) {
	    if (forceSourceFile === void 0) { forceSourceFile = false; }
	    var urlWithSuffix = splitTypescriptSuffix(filePath, forceSourceFile);
	    return urlWithSuffix[0] + ".ngfactory" + normalizeGenFileSuffix(urlWithSuffix[1]);
	}
	function splitTypescriptSuffix(path, forceSourceFile) {
	    if (forceSourceFile === void 0) { forceSourceFile = false; }
	    if (path.endsWith('.d.ts')) {
	        return [path.slice(0, -5), forceSourceFile ? '.ts' : '.d.ts'];
	    }
	    var lastDot = path.lastIndexOf('.');
	    if (lastDot !== -1) {
	        return [path.substring(0, lastDot), path.substring(lastDot)];
	    }
	    return [path, ''];
	}
	function normalizeGenFileSuffix(srcFileSuffix) {
	    return srcFileSuffix === '.tsx' ? '.ts' : srcFileSuffix;
	}
	var LOWERED_SYMBOL = /\u0275\d+/;
	function isLoweredSymbol(name) {
	    return LOWERED_SYMBOL.test(name);
	}

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	var LifecycleHooks;
	(function (LifecycleHooks) {
	    LifecycleHooks[LifecycleHooks["OnInit"] = 0] = "OnInit";
	    LifecycleHooks[LifecycleHooks["OnDestroy"] = 1] = "OnDestroy";
	    LifecycleHooks[LifecycleHooks["DoCheck"] = 2] = "DoCheck";
	    LifecycleHooks[LifecycleHooks["OnChanges"] = 3] = "OnChanges";
	    LifecycleHooks[LifecycleHooks["AfterContentInit"] = 4] = "AfterContentInit";
	    LifecycleHooks[LifecycleHooks["AfterContentChecked"] = 5] = "AfterContentChecked";
	    LifecycleHooks[LifecycleHooks["AfterViewInit"] = 6] = "AfterViewInit";
	    LifecycleHooks[LifecycleHooks["AfterViewChecked"] = 7] = "AfterViewChecked";
	})(LifecycleHooks || (LifecycleHooks = {}));
	var LIFECYCLE_HOOKS_VALUES = [
	    LifecycleHooks.OnInit, LifecycleHooks.OnDestroy, LifecycleHooks.DoCheck, LifecycleHooks.OnChanges,
	    LifecycleHooks.AfterContentInit, LifecycleHooks.AfterContentChecked, LifecycleHooks.AfterViewInit,
	    LifecycleHooks.AfterViewChecked
	];
	function hasLifecycleHook(reflector, hook, token) {
	    return reflector.hasLifecycleHook(token, getHookName(hook));
	}
	function getAllLifecycleHooks(reflector, token) {
	    return LIFECYCLE_HOOKS_VALUES.filter(function (hook) { return hasLifecycleHook(reflector, hook, token); });
	}
	function getHookName(hook) {
	    switch (hook) {
	        case LifecycleHooks.OnInit:
	            return 'ngOnInit';
	        case LifecycleHooks.OnDestroy:
	            return 'ngOnDestroy';
	        case LifecycleHooks.DoCheck:
	            return 'ngDoCheck';
	        case LifecycleHooks.OnChanges:
	            return 'ngOnChanges';
	        case LifecycleHooks.AfterContentInit:
	            return 'ngAfterContentInit';
	        case LifecycleHooks.AfterContentChecked:
	            return 'ngAfterContentChecked';
	        case LifecycleHooks.AfterViewInit:
	            return 'ngAfterViewInit';
	        case LifecycleHooks.AfterViewChecked:
	            return 'ngAfterViewChecked';
	        default:
	            // This default case is not needed by TypeScript compiler, as the switch is exhaustive.
	            // However Closure Compiler does not understand that and reports an error in typed mode.
	            // The `throw new Error` below works around the problem, and the unexpected: never variable
	            // makes sure tsc still checks this code is unreachable.
	            var unexpected = hook;
	            throw new Error("unexpected " + unexpected);
	    }
	}

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	var ERROR_COMPONENT_TYPE = 'ngComponentType';
	// Design notes:
	// - don't lazily create metadata:
	//   For some metadata, we need to do async work sometimes,
	//   so the user has to kick off this loading.
	//   But we want to report errors even when the async work is
	//   not required to check that the user would have been able
	//   to wait correctly.
	var CompileMetadataResolver = /** @class */ (function () {
	    function CompileMetadataResolver(_config, _htmlParser, _ngModuleResolver, _directiveResolver, _pipeResolver, _summaryResolver, _schemaRegistry, _directiveNormalizer, _console, _staticSymbolCache, _reflector, _errorCollector) {
	        this._config = _config;
	        this._htmlParser = _htmlParser;
	        this._ngModuleResolver = _ngModuleResolver;
	        this._directiveResolver = _directiveResolver;
	        this._pipeResolver = _pipeResolver;
	        this._summaryResolver = _summaryResolver;
	        this._schemaRegistry = _schemaRegistry;
	        this._directiveNormalizer = _directiveNormalizer;
	        this._console = _console;
	        this._staticSymbolCache = _staticSymbolCache;
	        this._reflector = _reflector;
	        this._errorCollector = _errorCollector;
	        this._nonNormalizedDirectiveCache = new Map();
	        this._directiveCache = new Map();
	        this._summaryCache = new Map();
	        this._pipeCache = new Map();
	        this._ngModuleCache = new Map();
	        this._ngModuleOfTypes = new Map();
	        this._shallowModuleCache = new Map();
	    }
	    CompileMetadataResolver.prototype.getReflector = function () {
	        return this._reflector;
	    };
	    CompileMetadataResolver.prototype.clearCacheFor = function (type) {
	        var dirMeta = this._directiveCache.get(type);
	        this._directiveCache.delete(type);
	        this._nonNormalizedDirectiveCache.delete(type);
	        this._summaryCache.delete(type);
	        this._pipeCache.delete(type);
	        this._ngModuleOfTypes.delete(type);
	        // Clear all of the NgModule as they contain transitive information!
	        this._ngModuleCache.clear();
	        if (dirMeta) {
	            this._directiveNormalizer.clearCacheFor(dirMeta);
	        }
	    };
	    CompileMetadataResolver.prototype.clearCache = function () {
	        this._directiveCache.clear();
	        this._nonNormalizedDirectiveCache.clear();
	        this._summaryCache.clear();
	        this._pipeCache.clear();
	        this._ngModuleCache.clear();
	        this._ngModuleOfTypes.clear();
	        this._directiveNormalizer.clearCache();
	    };
	    CompileMetadataResolver.prototype._createProxyClass = function (baseType, name) {
	        var delegate = null;
	        var proxyClass = function () {
	            if (!delegate) {
	                throw new Error("Illegal state: Class " + name + " for type " + stringify(baseType) + " is not compiled yet!");
	            }
	            return delegate.apply(this, arguments);
	        };
	        proxyClass.setDelegate = function (d) {
	            delegate = d;
	            proxyClass.prototype = d.prototype;
	        };
	        // Make stringify work correctly
	        proxyClass.overriddenName = name;
	        return proxyClass;
	    };
	    CompileMetadataResolver.prototype.getGeneratedClass = function (dirType, name) {
	        if (dirType instanceof StaticSymbol) {
	            return this._staticSymbolCache.get(ngfactoryFilePath(dirType.filePath), name);
	        }
	        else {
	            return this._createProxyClass(dirType, name);
	        }
	    };
	    CompileMetadataResolver.prototype.getComponentViewClass = function (dirType) {
	        return this.getGeneratedClass(dirType, viewClassName(dirType, 0));
	    };
	    CompileMetadataResolver.prototype.getHostComponentViewClass = function (dirType) {
	        return this.getGeneratedClass(dirType, hostViewClassName(dirType));
	    };
	    CompileMetadataResolver.prototype.getHostComponentType = function (dirType) {
	        var name = identifierName({ reference: dirType }) + "_Host";
	        if (dirType instanceof StaticSymbol) {
	            return this._staticSymbolCache.get(dirType.filePath, name);
	        }
	        return this._createProxyClass(dirType, name);
	    };
	    CompileMetadataResolver.prototype.getRendererType = function (dirType) {
	        if (dirType instanceof StaticSymbol) {
	            return this._staticSymbolCache.get(ngfactoryFilePath(dirType.filePath), rendererTypeName(dirType));
	        }
	        else {
	            // returning an object as proxy,
	            // that we fill later during runtime compilation.
	            return {};
	        }
	    };
	    CompileMetadataResolver.prototype.getComponentFactory = function (selector, dirType, inputs, outputs) {
	        if (dirType instanceof StaticSymbol) {
	            return this._staticSymbolCache.get(ngfactoryFilePath(dirType.filePath), componentFactoryName(dirType));
	        }
	        else {
	            var hostView = this.getHostComponentViewClass(dirType);
	            // Note: ngContentSelectors will be filled later once the template is
	            // loaded.
	            var createComponentFactory = this._reflector.resolveExternalReference(Identifiers.createComponentFactory);
	            return createComponentFactory(selector, dirType, hostView, inputs, outputs, []);
	        }
	    };
	    CompileMetadataResolver.prototype.initComponentFactory = function (factory, ngContentSelectors) {
	        var _a;
	        if (!(factory instanceof StaticSymbol)) {
	            (_a = factory.ngContentSelectors).push.apply(_a, __spread(ngContentSelectors));
	        }
	    };
	    CompileMetadataResolver.prototype._loadSummary = function (type, kind) {
	        var typeSummary = this._summaryCache.get(type);
	        if (!typeSummary) {
	            var summary = this._summaryResolver.resolveSummary(type);
	            typeSummary = summary ? summary.type : null;
	            this._summaryCache.set(type, typeSummary || null);
	        }
	        return typeSummary && typeSummary.summaryKind === kind ? typeSummary : null;
	    };
	    CompileMetadataResolver.prototype.getHostComponentMetadata = function (compMeta, hostViewType) {
	        var hostType = this.getHostComponentType(compMeta.type.reference);
	        if (!hostViewType) {
	            hostViewType = this.getHostComponentViewClass(hostType);
	        }
	        // Note: ! is ok here as this method should only be called with normalized directive
	        // metadata, which always fills in the selector.
	        var template = CssSelector.parse(compMeta.selector)[0].getMatchingElementTemplate();
	        var templateUrl = '';
	        var htmlAst = this._htmlParser.parse(template, templateUrl);
	        return CompileDirectiveMetadata.create({
	            isHost: true,
	            type: { reference: hostType, diDeps: [], lifecycleHooks: [] },
	            template: new CompileTemplateMetadata({
	                encapsulation: ViewEncapsulation.None,
	                template: template,
	                templateUrl: templateUrl,
	                htmlAst: htmlAst,
	                styles: [],
	                styleUrls: [],
	                ngContentSelectors: [],
	                animations: [],
	                isInline: true,
	                externalStylesheets: [],
	                interpolation: null,
	                preserveWhitespaces: false,
	            }),
	            exportAs: null,
	            changeDetection: ChangeDetectionStrategy.Default,
	            inputs: [],
	            outputs: [],
	            host: {},
	            isComponent: true,
	            selector: '*',
	            providers: [],
	            viewProviders: [],
	            queries: [],
	            guards: {},
	            viewQueries: [],
	            componentViewType: hostViewType,
	            rendererType: { id: '__Host__', encapsulation: ViewEncapsulation.None, styles: [], data: {} },
	            entryComponents: [],
	            componentFactory: null
	        });
	    };
	    CompileMetadataResolver.prototype.loadDirectiveMetadata = function (ngModuleType, directiveType, isSync) {
	        var _this = this;
	        if (this._directiveCache.has(directiveType)) {
	            return null;
	        }
	        directiveType = resolveForwardRef(directiveType);
	        var _a = this.getNonNormalizedDirectiveMetadata(directiveType), annotation = _a.annotation, metadata = _a.metadata;
	        var createDirectiveMetadata = function (templateMetadata) {
	            var normalizedDirMeta = new CompileDirectiveMetadata({
	                isHost: false,
	                type: metadata.type,
	                isComponent: metadata.isComponent,
	                selector: metadata.selector,
	                exportAs: metadata.exportAs,
	                changeDetection: metadata.changeDetection,
	                inputs: metadata.inputs,
	                outputs: metadata.outputs,
	                hostListeners: metadata.hostListeners,
	                hostProperties: metadata.hostProperties,
	                hostAttributes: metadata.hostAttributes,
	                providers: metadata.providers,
	                viewProviders: metadata.viewProviders,
	                queries: metadata.queries,
	                guards: metadata.guards,
	                viewQueries: metadata.viewQueries,
	                entryComponents: metadata.entryComponents,
	                componentViewType: metadata.componentViewType,
	                rendererType: metadata.rendererType,
	                componentFactory: metadata.componentFactory,
	                template: templateMetadata
	            });
	            if (templateMetadata) {
	                _this.initComponentFactory(metadata.componentFactory, templateMetadata.ngContentSelectors);
	            }
	            _this._directiveCache.set(directiveType, normalizedDirMeta);
	            _this._summaryCache.set(directiveType, normalizedDirMeta.toSummary());
	            return null;
	        };
	        if (metadata.isComponent) {
	            var template = metadata.template;
	            var templateMeta = this._directiveNormalizer.normalizeTemplate({
	                ngModuleType: ngModuleType,
	                componentType: directiveType,
	                moduleUrl: this._reflector.componentModuleUrl(directiveType, annotation),
	                encapsulation: template.encapsulation,
	                template: template.template,
	                templateUrl: template.templateUrl,
	                styles: template.styles,
	                styleUrls: template.styleUrls,
	                animations: template.animations,
	                interpolation: template.interpolation,
	                preserveWhitespaces: template.preserveWhitespaces
	            });
	            if (isPromise(templateMeta) && isSync) {
	                this._reportError(componentStillLoadingError(directiveType), directiveType);
	                return null;
	            }
	            return SyncAsync.then(templateMeta, createDirectiveMetadata);
	        }
	        else {
	            // directive
	            createDirectiveMetadata(null);
	            return null;
	        }
	    };
	    CompileMetadataResolver.prototype.getNonNormalizedDirectiveMetadata = function (directiveType) {
	        var _this = this;
	        directiveType = resolveForwardRef(directiveType);
	        if (!directiveType) {
	            return null;
	        }
	        var cacheEntry = this._nonNormalizedDirectiveCache.get(directiveType);
	        if (cacheEntry) {
	            return cacheEntry;
	        }
	        var dirMeta = this._directiveResolver.resolve(directiveType, false);
	        if (!dirMeta) {
	            return null;
	        }
	        var nonNormalizedTemplateMetadata = undefined;
	        if (createComponent.isTypeOf(dirMeta)) {
	            // component
	            var compMeta = dirMeta;
	            assertArrayOfStrings('styles', compMeta.styles);
	            assertArrayOfStrings('styleUrls', compMeta.styleUrls);
	            assertInterpolationSymbols('interpolation', compMeta.interpolation);
	            var animations = compMeta.animations;
	            nonNormalizedTemplateMetadata = new CompileTemplateMetadata({
	                encapsulation: noUndefined(compMeta.encapsulation),
	                template: noUndefined(compMeta.template),
	                templateUrl: noUndefined(compMeta.templateUrl),
	                htmlAst: null,
	                styles: compMeta.styles || [],
	                styleUrls: compMeta.styleUrls || [],
	                animations: animations || [],
	                interpolation: noUndefined(compMeta.interpolation),
	                isInline: !!compMeta.template,
	                externalStylesheets: [],
	                ngContentSelectors: [],
	                preserveWhitespaces: noUndefined(dirMeta.preserveWhitespaces),
	            });
	        }
	        var changeDetectionStrategy = null;
	        var viewProviders = [];
	        var entryComponentMetadata = [];
	        var selector = dirMeta.selector;
	        if (createComponent.isTypeOf(dirMeta)) {
	            // Component
	            var compMeta = dirMeta;
	            changeDetectionStrategy = compMeta.changeDetection;
	            if (compMeta.viewProviders) {
	                viewProviders = this._getProvidersMetadata(compMeta.viewProviders, entryComponentMetadata, "viewProviders for \"" + stringifyType(directiveType) + "\"", [], directiveType);
	            }
	            if (compMeta.entryComponents) {
	                entryComponentMetadata = flattenAndDedupeArray(compMeta.entryComponents)
	                    .map(function (type) { return _this._getEntryComponentMetadata(type); })
	                    .concat(entryComponentMetadata);
	            }
	            if (!selector) {
	                selector = this._schemaRegistry.getDefaultComponentElementName();
	            }
	        }
	        else {
	            // Directive
	            if (!selector) {
	                selector = null;
	            }
	        }
	        var providers = [];
	        if (dirMeta.providers != null) {
	            providers = this._getProvidersMetadata(dirMeta.providers, entryComponentMetadata, "providers for \"" + stringifyType(directiveType) + "\"", [], directiveType);
	        }
	        var queries = [];
	        var viewQueries = [];
	        if (dirMeta.queries != null) {
	            queries = this._getQueriesMetadata(dirMeta.queries, false, directiveType);
	            viewQueries = this._getQueriesMetadata(dirMeta.queries, true, directiveType);
	        }
	        var metadata = CompileDirectiveMetadata.create({
	            isHost: false,
	            selector: selector,
	            exportAs: noUndefined(dirMeta.exportAs),
	            isComponent: !!nonNormalizedTemplateMetadata,
	            type: this._getTypeMetadata(directiveType),
	            template: nonNormalizedTemplateMetadata,
	            changeDetection: changeDetectionStrategy,
	            inputs: dirMeta.inputs || [],
	            outputs: dirMeta.outputs || [],
	            host: dirMeta.host || {},
	            providers: providers || [],
	            viewProviders: viewProviders || [],
	            queries: queries || [],
	            guards: dirMeta.guards || {},
	            viewQueries: viewQueries || [],
	            entryComponents: entryComponentMetadata,
	            componentViewType: nonNormalizedTemplateMetadata ? this.getComponentViewClass(directiveType) :
	                null,
	            rendererType: nonNormalizedTemplateMetadata ? this.getRendererType(directiveType) : null,
	            componentFactory: null
	        });
	        if (nonNormalizedTemplateMetadata) {
	            metadata.componentFactory =
	                this.getComponentFactory(selector, directiveType, metadata.inputs, metadata.outputs);
	        }
	        cacheEntry = { metadata: metadata, annotation: dirMeta };
	        this._nonNormalizedDirectiveCache.set(directiveType, cacheEntry);
	        return cacheEntry;
	    };
	    /**
	     * Gets the metadata for the given directive.
	     * This assumes `loadNgModuleDirectiveAndPipeMetadata` has been called first.
	     */
	    CompileMetadataResolver.prototype.getDirectiveMetadata = function (directiveType) {
	        var dirMeta = this._directiveCache.get(directiveType);
	        if (!dirMeta) {
	            this._reportError(syntaxError("Illegal state: getDirectiveMetadata can only be called after loadNgModuleDirectiveAndPipeMetadata for a module that declares it. Directive " + stringifyType(directiveType) + "."), directiveType);
	        }
	        return dirMeta;
	    };
	    CompileMetadataResolver.prototype.getDirectiveSummary = function (dirType) {
	        var dirSummary = this._loadSummary(dirType, CompileSummaryKind.Directive);
	        if (!dirSummary) {
	            this._reportError(syntaxError("Illegal state: Could not load the summary for directive " + stringifyType(dirType) + "."), dirType);
	        }
	        return dirSummary;
	    };
	    CompileMetadataResolver.prototype.isDirective = function (type) {
	        return !!this._loadSummary(type, CompileSummaryKind.Directive) ||
	            this._directiveResolver.isDirective(type);
	    };
	    CompileMetadataResolver.prototype.isAbstractDirective = function (type) {
	        var summary = this._loadSummary(type, CompileSummaryKind.Directive);
	        if (summary && !summary.isComponent) {
	            return !summary.selector;
	        }
	        var meta = this._directiveResolver.resolve(type, false);
	        if (meta && !createComponent.isTypeOf(meta)) {
	            return !meta.selector;
	        }
	        return false;
	    };
	    CompileMetadataResolver.prototype.isPipe = function (type) {
	        return !!this._loadSummary(type, CompileSummaryKind.Pipe) ||
	            this._pipeResolver.isPipe(type);
	    };
	    CompileMetadataResolver.prototype.isNgModule = function (type) {
	        return !!this._loadSummary(type, CompileSummaryKind.NgModule) ||
	            this._ngModuleResolver.isNgModule(type);
	    };
	    CompileMetadataResolver.prototype.getNgModuleSummary = function (moduleType, alreadyCollecting) {
	        if (alreadyCollecting === void 0) { alreadyCollecting = null; }
	        var moduleSummary = this._loadSummary(moduleType, CompileSummaryKind.NgModule);
	        if (!moduleSummary) {
	            var moduleMeta = this.getNgModuleMetadata(moduleType, false, alreadyCollecting);
	            moduleSummary = moduleMeta ? moduleMeta.toSummary() : null;
	            if (moduleSummary) {
	                this._summaryCache.set(moduleType, moduleSummary);
	            }
	        }
	        return moduleSummary;
	    };
	    /**
	     * Loads the declared directives and pipes of an NgModule.
	     */
	    CompileMetadataResolver.prototype.loadNgModuleDirectiveAndPipeMetadata = function (moduleType, isSync, throwIfNotFound) {
	        var _this = this;
	        if (throwIfNotFound === void 0) { throwIfNotFound = true; }
	        var ngModule = this.getNgModuleMetadata(moduleType, throwIfNotFound);
	        var loading = [];
	        if (ngModule) {
	            ngModule.declaredDirectives.forEach(function (id) {
	                var promise = _this.loadDirectiveMetadata(moduleType, id.reference, isSync);
	                if (promise) {
	                    loading.push(promise);
	                }
	            });
	            ngModule.declaredPipes.forEach(function (id) { return _this._loadPipeMetadata(id.reference); });
	        }
	        return Promise.all(loading);
	    };
	    CompileMetadataResolver.prototype.getShallowModuleMetadata = function (moduleType) {
	        var compileMeta = this._shallowModuleCache.get(moduleType);
	        if (compileMeta) {
	            return compileMeta;
	        }
	        var ngModuleMeta = findLast(this._reflector.shallowAnnotations(moduleType), createNgModule.isTypeOf);
	        compileMeta = {
	            type: this._getTypeMetadata(moduleType),
	            rawExports: ngModuleMeta.exports,
	            rawImports: ngModuleMeta.imports,
	            rawProviders: ngModuleMeta.providers,
	        };
	        this._shallowModuleCache.set(moduleType, compileMeta);
	        return compileMeta;
	    };
	    CompileMetadataResolver.prototype.getNgModuleMetadata = function (moduleType, throwIfNotFound, alreadyCollecting) {
	        var _this = this;
	        if (throwIfNotFound === void 0) { throwIfNotFound = true; }
	        if (alreadyCollecting === void 0) { alreadyCollecting = null; }
	        moduleType = resolveForwardRef(moduleType);
	        var compileMeta = this._ngModuleCache.get(moduleType);
	        if (compileMeta) {
	            return compileMeta;
	        }
	        var meta = this._ngModuleResolver.resolve(moduleType, throwIfNotFound);
	        if (!meta) {
	            return null;
	        }
	        var declaredDirectives = [];
	        var exportedNonModuleIdentifiers = [];
	        var declaredPipes = [];
	        var importedModules = [];
	        var exportedModules = [];
	        var providers = [];
	        var entryComponents = [];
	        var bootstrapComponents = [];
	        var schemas = [];
	        if (meta.imports) {
	            flattenAndDedupeArray(meta.imports).forEach(function (importedType) {
	                var importedModuleType = undefined;
	                if (isValidType(importedType)) {
	                    importedModuleType = importedType;
	                }
	                else if (importedType && importedType.ngModule) {
	                    var moduleWithProviders = importedType;
	                    importedModuleType = moduleWithProviders.ngModule;
	                    if (moduleWithProviders.providers) {
	                        providers.push.apply(providers, __spread(_this._getProvidersMetadata(moduleWithProviders.providers, entryComponents, "provider for the NgModule '" + stringifyType(importedModuleType) + "'", [], importedType)));
	                    }
	                }
	                if (importedModuleType) {
	                    if (_this._checkSelfImport(moduleType, importedModuleType))
	                        return;
	                    if (!alreadyCollecting)
	                        alreadyCollecting = new Set();
	                    if (alreadyCollecting.has(importedModuleType)) {
	                        _this._reportError(syntaxError(_this._getTypeDescriptor(importedModuleType) + " '" + stringifyType(importedType) + "' is imported recursively by the module '" + stringifyType(moduleType) + "'."), moduleType);
	                        return;
	                    }
	                    alreadyCollecting.add(importedModuleType);
	                    var importedModuleSummary = _this.getNgModuleSummary(importedModuleType, alreadyCollecting);
	                    alreadyCollecting.delete(importedModuleType);
	                    if (!importedModuleSummary) {
	                        _this._reportError(syntaxError("Unexpected " + _this._getTypeDescriptor(importedType) + " '" + stringifyType(importedType) + "' imported by the module '" + stringifyType(moduleType) + "'. Please add a @NgModule annotation."), moduleType);
	                        return;
	                    }
	                    importedModules.push(importedModuleSummary);
	                }
	                else {
	                    _this._reportError(syntaxError("Unexpected value '" + stringifyType(importedType) + "' imported by the module '" + stringifyType(moduleType) + "'"), moduleType);
	                    return;
	                }
	            });
	        }
	        if (meta.exports) {
	            flattenAndDedupeArray(meta.exports).forEach(function (exportedType) {
	                if (!isValidType(exportedType)) {
	                    _this._reportError(syntaxError("Unexpected value '" + stringifyType(exportedType) + "' exported by the module '" + stringifyType(moduleType) + "'"), moduleType);
	                    return;
	                }
	                if (!alreadyCollecting)
	                    alreadyCollecting = new Set();
	                if (alreadyCollecting.has(exportedType)) {
	                    _this._reportError(syntaxError(_this._getTypeDescriptor(exportedType) + " '" + stringify(exportedType) + "' is exported recursively by the module '" + stringifyType(moduleType) + "'"), moduleType);
	                    return;
	                }
	                alreadyCollecting.add(exportedType);
	                var exportedModuleSummary = _this.getNgModuleSummary(exportedType, alreadyCollecting);
	                alreadyCollecting.delete(exportedType);
	                if (exportedModuleSummary) {
	                    exportedModules.push(exportedModuleSummary);
	                }
	                else {
	                    exportedNonModuleIdentifiers.push(_this._getIdentifierMetadata(exportedType));
	                }
	            });
	        }
	        // Note: This will be modified later, so we rely on
	        // getting a new instance every time!
	        var transitiveModule = this._getTransitiveNgModuleMetadata(importedModules, exportedModules);
	        if (meta.declarations) {
	            flattenAndDedupeArray(meta.declarations).forEach(function (declaredType) {
	                if (!isValidType(declaredType)) {
	                    _this._reportError(syntaxError("Unexpected value '" + stringifyType(declaredType) + "' declared by the module '" + stringifyType(moduleType) + "'"), moduleType);
	                    return;
	                }
	                var declaredIdentifier = _this._getIdentifierMetadata(declaredType);
	                if (_this.isDirective(declaredType)) {
	                    if (_this.isAbstractDirective(declaredType)) {
	                        _this._reportError(syntaxError("Directive " + stringifyType(declaredType) + " has no selector, please add it!"), declaredType);
	                    }
	                    transitiveModule.addDirective(declaredIdentifier);
	                    declaredDirectives.push(declaredIdentifier);
	                    _this._addTypeToModule(declaredType, moduleType);
	                }
	                else if (_this.isPipe(declaredType)) {
	                    transitiveModule.addPipe(declaredIdentifier);
	                    transitiveModule.pipes.push(declaredIdentifier);
	                    declaredPipes.push(declaredIdentifier);
	                    _this._addTypeToModule(declaredType, moduleType);
	                }
	                else {
	                    _this._reportError(syntaxError("Unexpected " + _this._getTypeDescriptor(declaredType) + " '" + stringifyType(declaredType) + "' declared by the module '" + stringifyType(moduleType) + "'. Please add a @Pipe/@Directive/@Component annotation."), moduleType);
	                    return;
	                }
	            });
	        }
	        var exportedDirectives = [];
	        var exportedPipes = [];
	        exportedNonModuleIdentifiers.forEach(function (exportedId) {
	            if (transitiveModule.directivesSet.has(exportedId.reference)) {
	                exportedDirectives.push(exportedId);
	                transitiveModule.addExportedDirective(exportedId);
	            }
	            else if (transitiveModule.pipesSet.has(exportedId.reference)) {
	                exportedPipes.push(exportedId);
	                transitiveModule.addExportedPipe(exportedId);
	            }
	            else {
	                _this._reportError(syntaxError("Can't export " + _this._getTypeDescriptor(exportedId.reference) + " " + stringifyType(exportedId.reference) + " from " + stringifyType(moduleType) + " as it was neither declared nor imported!"), moduleType);
	                return;
	            }
	        });
	        // The providers of the module have to go last
	        // so that they overwrite any other provider we already added.
	        if (meta.providers) {
	            providers.push.apply(providers, __spread(this._getProvidersMetadata(meta.providers, entryComponents, "provider for the NgModule '" + stringifyType(moduleType) + "'", [], moduleType)));
	        }
	        if (meta.entryComponents) {
	            entryComponents.push.apply(entryComponents, __spread(flattenAndDedupeArray(meta.entryComponents)
	                .map(function (type) { return _this._getEntryComponentMetadata(type); })));
	        }
	        if (meta.bootstrap) {
	            flattenAndDedupeArray(meta.bootstrap).forEach(function (type) {
	                if (!isValidType(type)) {
	                    _this._reportError(syntaxError("Unexpected value '" + stringifyType(type) + "' used in the bootstrap property of module '" + stringifyType(moduleType) + "'"), moduleType);
	                    return;
	                }
	                bootstrapComponents.push(_this._getIdentifierMetadata(type));
	            });
	        }
	        entryComponents.push.apply(entryComponents, __spread(bootstrapComponents.map(function (type) { return _this._getEntryComponentMetadata(type.reference); })));
	        if (meta.schemas) {
	            schemas.push.apply(schemas, __spread(flattenAndDedupeArray(meta.schemas)));
	        }
	        compileMeta = new CompileNgModuleMetadata({
	            type: this._getTypeMetadata(moduleType),
	            providers: providers,
	            entryComponents: entryComponents,
	            bootstrapComponents: bootstrapComponents,
	            schemas: schemas,
	            declaredDirectives: declaredDirectives,
	            exportedDirectives: exportedDirectives,
	            declaredPipes: declaredPipes,
	            exportedPipes: exportedPipes,
	            importedModules: importedModules,
	            exportedModules: exportedModules,
	            transitiveModule: transitiveModule,
	            id: meta.id || null,
	        });
	        entryComponents.forEach(function (id) { return transitiveModule.addEntryComponent(id); });
	        providers.forEach(function (provider) { return transitiveModule.addProvider(provider, compileMeta.type); });
	        transitiveModule.addModule(compileMeta.type);
	        this._ngModuleCache.set(moduleType, compileMeta);
	        return compileMeta;
	    };
	    CompileMetadataResolver.prototype._checkSelfImport = function (moduleType, importedModuleType) {
	        if (moduleType === importedModuleType) {
	            this._reportError(syntaxError("'" + stringifyType(moduleType) + "' module can't import itself"), moduleType);
	            return true;
	        }
	        return false;
	    };
	    CompileMetadataResolver.prototype._getTypeDescriptor = function (type) {
	        if (isValidType(type)) {
	            if (this.isDirective(type)) {
	                return 'directive';
	            }
	            if (this.isPipe(type)) {
	                return 'pipe';
	            }
	            if (this.isNgModule(type)) {
	                return 'module';
	            }
	        }
	        if (type.provide) {
	            return 'provider';
	        }
	        return 'value';
	    };
	    CompileMetadataResolver.prototype._addTypeToModule = function (type, moduleType) {
	        var oldModule = this._ngModuleOfTypes.get(type);
	        if (oldModule && oldModule !== moduleType) {
	            this._reportError(syntaxError("Type " + stringifyType(type) + " is part of the declarations of 2 modules: " + stringifyType(oldModule) + " and " + stringifyType(moduleType) + "! " +
	                ("Please consider moving " + stringifyType(type) + " to a higher module that imports " + stringifyType(oldModule) + " and " + stringifyType(moduleType) + ". ") +
	                ("You can also create a new NgModule that exports and includes " + stringifyType(type) + " then import that NgModule in " + stringifyType(oldModule) + " and " + stringifyType(moduleType) + ".")), moduleType);
	            return;
	        }
	        this._ngModuleOfTypes.set(type, moduleType);
	    };
	    CompileMetadataResolver.prototype._getTransitiveNgModuleMetadata = function (importedModules, exportedModules) {
	        // collect `providers` / `entryComponents` from all imported and all exported modules
	        var result = new TransitiveCompileNgModuleMetadata();
	        var modulesByToken = new Map();
	        importedModules.concat(exportedModules).forEach(function (modSummary) {
	            modSummary.modules.forEach(function (mod) { return result.addModule(mod); });
	            modSummary.entryComponents.forEach(function (comp) { return result.addEntryComponent(comp); });
	            var addedTokens = new Set();
	            modSummary.providers.forEach(function (entry) {
	                var tokenRef = tokenReference(entry.provider.token);
	                var prevModules = modulesByToken.get(tokenRef);
	                if (!prevModules) {
	                    prevModules = new Set();
	                    modulesByToken.set(tokenRef, prevModules);
	                }
	                var moduleRef = entry.module.reference;
	                // Note: the providers of one module may still contain multiple providers
	                // per token (e.g. for multi providers), and we need to preserve these.
	                if (addedTokens.has(tokenRef) || !prevModules.has(moduleRef)) {
	                    prevModules.add(moduleRef);
	                    addedTokens.add(tokenRef);
	                    result.addProvider(entry.provider, entry.module);
	                }
	            });
	        });
	        exportedModules.forEach(function (modSummary) {
	            modSummary.exportedDirectives.forEach(function (id) { return result.addExportedDirective(id); });
	            modSummary.exportedPipes.forEach(function (id) { return result.addExportedPipe(id); });
	        });
	        importedModules.forEach(function (modSummary) {
	            modSummary.exportedDirectives.forEach(function (id) { return result.addDirective(id); });
	            modSummary.exportedPipes.forEach(function (id) { return result.addPipe(id); });
	        });
	        return result;
	    };
	    CompileMetadataResolver.prototype._getIdentifierMetadata = function (type) {
	        type = resolveForwardRef(type);
	        return { reference: type };
	    };
	    CompileMetadataResolver.prototype.isInjectable = function (type) {
	        var annotations = this._reflector.tryAnnotations(type);
	        return annotations.some(function (ann) { return createInjectable.isTypeOf(ann); });
	    };
	    CompileMetadataResolver.prototype.getInjectableSummary = function (type) {
	        return {
	            summaryKind: CompileSummaryKind.Injectable,
	            type: this._getTypeMetadata(type, null, false)
	        };
	    };
	    CompileMetadataResolver.prototype.getInjectableMetadata = function (type, dependencies, throwOnUnknownDeps) {
	        if (dependencies === void 0) { dependencies = null; }
	        if (throwOnUnknownDeps === void 0) { throwOnUnknownDeps = true; }
	        var typeSummary = this._loadSummary(type, CompileSummaryKind.Injectable);
	        var typeMetadata = typeSummary ?
	            typeSummary.type :
	            this._getTypeMetadata(type, dependencies, throwOnUnknownDeps);
	        var annotations = this._reflector.annotations(type).filter(function (ann) { return createInjectable.isTypeOf(ann); });
	        if (annotations.length === 0) {
	            return null;
	        }
	        var meta = annotations[annotations.length - 1];
	        return {
	            symbol: type,
	            type: typeMetadata,
	            providedIn: meta.providedIn,
	            useValue: meta.useValue,
	            useClass: meta.useClass,
	            useExisting: meta.useExisting,
	            useFactory: meta.useFactory,
	            deps: meta.deps,
	        };
	    };
	    CompileMetadataResolver.prototype._getTypeMetadata = function (type, dependencies, throwOnUnknownDeps) {
	        if (dependencies === void 0) { dependencies = null; }
	        if (throwOnUnknownDeps === void 0) { throwOnUnknownDeps = true; }
	        var identifier = this._getIdentifierMetadata(type);
	        return {
	            reference: identifier.reference,
	            diDeps: this._getDependenciesMetadata(identifier.reference, dependencies, throwOnUnknownDeps),
	            lifecycleHooks: getAllLifecycleHooks(this._reflector, identifier.reference),
	        };
	    };
	    CompileMetadataResolver.prototype._getFactoryMetadata = function (factory, dependencies) {
	        if (dependencies === void 0) { dependencies = null; }
	        factory = resolveForwardRef(factory);
	        return { reference: factory, diDeps: this._getDependenciesMetadata(factory, dependencies) };
	    };
	    /**
	     * Gets the metadata for the given pipe.
	     * This assumes `loadNgModuleDirectiveAndPipeMetadata` has been called first.
	     */
	    CompileMetadataResolver.prototype.getPipeMetadata = function (pipeType) {
	        var pipeMeta = this._pipeCache.get(pipeType);
	        if (!pipeMeta) {
	            this._reportError(syntaxError("Illegal state: getPipeMetadata can only be called after loadNgModuleDirectiveAndPipeMetadata for a module that declares it. Pipe " + stringifyType(pipeType) + "."), pipeType);
	        }
	        return pipeMeta || null;
	    };
	    CompileMetadataResolver.prototype.getPipeSummary = function (pipeType) {
	        var pipeSummary = this._loadSummary(pipeType, CompileSummaryKind.Pipe);
	        if (!pipeSummary) {
	            this._reportError(syntaxError("Illegal state: Could not load the summary for pipe " + stringifyType(pipeType) + "."), pipeType);
	        }
	        return pipeSummary;
	    };
	    CompileMetadataResolver.prototype.getOrLoadPipeMetadata = function (pipeType) {
	        var pipeMeta = this._pipeCache.get(pipeType);
	        if (!pipeMeta) {
	            pipeMeta = this._loadPipeMetadata(pipeType);
	        }
	        return pipeMeta;
	    };
	    CompileMetadataResolver.prototype._loadPipeMetadata = function (pipeType) {
	        pipeType = resolveForwardRef(pipeType);
	        var pipeAnnotation = this._pipeResolver.resolve(pipeType);
	        var pipeMeta = new CompilePipeMetadata({
	            type: this._getTypeMetadata(pipeType),
	            name: pipeAnnotation.name,
	            pure: !!pipeAnnotation.pure
	        });
	        this._pipeCache.set(pipeType, pipeMeta);
	        this._summaryCache.set(pipeType, pipeMeta.toSummary());
	        return pipeMeta;
	    };
	    CompileMetadataResolver.prototype._getDependenciesMetadata = function (typeOrFunc, dependencies, throwOnUnknownDeps) {
	        var _this = this;
	        if (throwOnUnknownDeps === void 0) { throwOnUnknownDeps = true; }
	        var hasUnknownDeps = false;
	        var params = dependencies || this._reflector.parameters(typeOrFunc) || [];
	        var dependenciesMetadata = params.map(function (param) {
	            var isAttribute = false;
	            var isHost = false;
	            var isSelf = false;
	            var isSkipSelf = false;
	            var isOptional = false;
	            var token = null;
	            if (Array.isArray(param)) {
	                param.forEach(function (paramEntry) {
	                    if (createHost.isTypeOf(paramEntry)) {
	                        isHost = true;
	                    }
	                    else if (createSelf.isTypeOf(paramEntry)) {
	                        isSelf = true;
	                    }
	                    else if (createSkipSelf.isTypeOf(paramEntry)) {
	                        isSkipSelf = true;
	                    }
	                    else if (createOptional.isTypeOf(paramEntry)) {
	                        isOptional = true;
	                    }
	                    else if (createAttribute.isTypeOf(paramEntry)) {
	                        isAttribute = true;
	                        token = paramEntry.attributeName;
	                    }
	                    else if (createInject.isTypeOf(paramEntry)) {
	                        token = paramEntry.token;
	                    }
	                    else if (createInjectionToken.isTypeOf(paramEntry) ||
	                        paramEntry instanceof StaticSymbol) {
	                        token = paramEntry;
	                    }
	                    else if (isValidType(paramEntry) && token == null) {
	                        token = paramEntry;
	                    }
	                });
	            }
	            else {
	                token = param;
	            }
	            if (token == null) {
	                hasUnknownDeps = true;
	                return {};
	            }
	            return {
	                isAttribute: isAttribute,
	                isHost: isHost,
	                isSelf: isSelf,
	                isSkipSelf: isSkipSelf,
	                isOptional: isOptional,
	                token: _this._getTokenMetadata(token)
	            };
	        });
	        if (hasUnknownDeps) {
	            var depsTokens = dependenciesMetadata.map(function (dep) { return dep.token ? stringifyType(dep.token) : '?'; }).join(', ');
	            var message = "Can't resolve all parameters for " + stringifyType(typeOrFunc) + ": (" + depsTokens + ").";
	            if (throwOnUnknownDeps || this._config.strictInjectionParameters) {
	                this._reportError(syntaxError(message), typeOrFunc);
	            }
	            else {
	                this._console.warn("Warning: " + message + " This will become an error in Angular v6.x");
	            }
	        }
	        return dependenciesMetadata;
	    };
	    CompileMetadataResolver.prototype._getTokenMetadata = function (token) {
	        token = resolveForwardRef(token);
	        var compileToken;
	        if (typeof token === 'string') {
	            compileToken = { value: token };
	        }
	        else {
	            compileToken = { identifier: { reference: token } };
	        }
	        return compileToken;
	    };
	    CompileMetadataResolver.prototype._getProvidersMetadata = function (providers, targetEntryComponents, debugInfo, compileProviders, type) {
	        var _this = this;
	        if (compileProviders === void 0) { compileProviders = []; }
	        providers.forEach(function (provider, providerIdx) {
	            if (Array.isArray(provider)) {
	                _this._getProvidersMetadata(provider, targetEntryComponents, debugInfo, compileProviders);
	            }
	            else {
	                provider = resolveForwardRef(provider);
	                var providerMeta = undefined;
	                if (provider && typeof provider === 'object' && provider.hasOwnProperty('provide')) {
	                    _this._validateProvider(provider);
	                    providerMeta = new ProviderMeta(provider.provide, provider);
	                }
	                else if (isValidType(provider)) {
	                    providerMeta = new ProviderMeta(provider, { useClass: provider });
	                }
	                else if (provider === void 0) {
	                    _this._reportError(syntaxError("Encountered undefined provider! Usually this means you have a circular dependencies. This might be caused by using 'barrel' index.ts files."));
	                    return;
	                }
	                else {
	                    var providersInfo = providers
	                        .reduce(function (soFar, seenProvider, seenProviderIdx) {
	                        if (seenProviderIdx < providerIdx) {
	                            soFar.push("" + stringifyType(seenProvider));
	                        }
	                        else if (seenProviderIdx == providerIdx) {
	                            soFar.push("?" + stringifyType(seenProvider) + "?");
	                        }
	                        else if (seenProviderIdx == providerIdx + 1) {
	                            soFar.push('...');
	                        }
	                        return soFar;
	                    }, [])
	                        .join(', ');
	                    _this._reportError(syntaxError("Invalid " + (debugInfo ?
	                        debugInfo :
	                        'provider') + " - only instances of Provider and Type are allowed, got: [" + providersInfo + "]"), type);
	                    return;
	                }
	                if (providerMeta.token ===
	                    _this._reflector.resolveExternalReference(Identifiers.ANALYZE_FOR_ENTRY_COMPONENTS)) {
	                    targetEntryComponents.push.apply(targetEntryComponents, __spread(_this._getEntryComponentsFromProvider(providerMeta, type)));
	                }
	                else {
	                    compileProviders.push(_this.getProviderMetadata(providerMeta));
	                }
	            }
	        });
	        return compileProviders;
	    };
	    CompileMetadataResolver.prototype._validateProvider = function (provider) {
	        if (provider.hasOwnProperty('useClass') && provider.useClass == null) {
	            this._reportError(syntaxError("Invalid provider for " + stringifyType(provider.provide) + ". useClass cannot be " + provider.useClass + ".\n           Usually it happens when:\n           1. There's a circular dependency (might be caused by using index.ts (barrel) files).\n           2. Class was used before it was declared. Use forwardRef in this case."));
	        }
	    };
	    CompileMetadataResolver.prototype._getEntryComponentsFromProvider = function (provider, type) {
	        var _this = this;
	        var components = [];
	        var collectedIdentifiers = [];
	        if (provider.useFactory || provider.useExisting || provider.useClass) {
	            this._reportError(syntaxError("The ANALYZE_FOR_ENTRY_COMPONENTS token only supports useValue!"), type);
	            return [];
	        }
	        if (!provider.multi) {
	            this._reportError(syntaxError("The ANALYZE_FOR_ENTRY_COMPONENTS token only supports 'multi = true'!"), type);
	            return [];
	        }
	        extractIdentifiers(provider.useValue, collectedIdentifiers);
	        collectedIdentifiers.forEach(function (identifier) {
	            var entry = _this._getEntryComponentMetadata(identifier.reference, false);
	            if (entry) {
	                components.push(entry);
	            }
	        });
	        return components;
	    };
	    CompileMetadataResolver.prototype._getEntryComponentMetadata = function (dirType, throwIfNotFound) {
	        if (throwIfNotFound === void 0) { throwIfNotFound = true; }
	        var dirMeta = this.getNonNormalizedDirectiveMetadata(dirType);
	        if (dirMeta && dirMeta.metadata.isComponent) {
	            return { componentType: dirType, componentFactory: dirMeta.metadata.componentFactory };
	        }
	        var dirSummary = this._loadSummary(dirType, CompileSummaryKind.Directive);
	        if (dirSummary && dirSummary.isComponent) {
	            return { componentType: dirType, componentFactory: dirSummary.componentFactory };
	        }
	        if (throwIfNotFound) {
	            throw syntaxError(dirType.name + " cannot be used as an entry component.");
	        }
	        return null;
	    };
	    CompileMetadataResolver.prototype._getInjectableTypeMetadata = function (type, dependencies) {
	        if (dependencies === void 0) { dependencies = null; }
	        var typeSummary = this._loadSummary(type, CompileSummaryKind.Injectable);
	        if (typeSummary) {
	            return typeSummary.type;
	        }
	        return this._getTypeMetadata(type, dependencies);
	    };
	    CompileMetadataResolver.prototype.getProviderMetadata = function (provider) {
	        var compileDeps = undefined;
	        var compileTypeMetadata = null;
	        var compileFactoryMetadata = null;
	        var token = this._getTokenMetadata(provider.token);
	        if (provider.useClass) {
	            compileTypeMetadata =
	                this._getInjectableTypeMetadata(provider.useClass, provider.dependencies);
	            compileDeps = compileTypeMetadata.diDeps;
	            if (provider.token === provider.useClass) {
	                // use the compileTypeMetadata as it contains information about lifecycleHooks...
	                token = { identifier: compileTypeMetadata };
	            }
	        }
	        else if (provider.useFactory) {
	            compileFactoryMetadata = this._getFactoryMetadata(provider.useFactory, provider.dependencies);
	            compileDeps = compileFactoryMetadata.diDeps;
	        }
	        return {
	            token: token,
	            useClass: compileTypeMetadata,
	            useValue: provider.useValue,
	            useFactory: compileFactoryMetadata,
	            useExisting: provider.useExisting ? this._getTokenMetadata(provider.useExisting) : undefined,
	            deps: compileDeps,
	            multi: provider.multi
	        };
	    };
	    CompileMetadataResolver.prototype._getQueriesMetadata = function (queries, isViewQuery, directiveType) {
	        var _this = this;
	        var res = [];
	        Object.keys(queries).forEach(function (propertyName) {
	            var query = queries[propertyName];
	            if (query.isViewQuery === isViewQuery) {
	                res.push(_this._getQueryMetadata(query, propertyName, directiveType));
	            }
	        });
	        return res;
	    };
	    CompileMetadataResolver.prototype._queryVarBindings = function (selector) {
	        return selector.split(/\s*,\s*/);
	    };
	    CompileMetadataResolver.prototype._getQueryMetadata = function (q, propertyName, typeOrFunc) {
	        var _this = this;
	        var selectors;
	        if (typeof q.selector === 'string') {
	            selectors =
	                this._queryVarBindings(q.selector).map(function (varName) { return _this._getTokenMetadata(varName); });
	        }
	        else {
	            if (!q.selector) {
	                this._reportError(syntaxError("Can't construct a query for the property \"" + propertyName + "\" of \"" + stringifyType(typeOrFunc) + "\" since the query selector wasn't defined."), typeOrFunc);
	                selectors = [];
	            }
	            else {
	                selectors = [this._getTokenMetadata(q.selector)];
	            }
	        }
	        return {
	            selectors: selectors,
	            first: q.first,
	            descendants: q.descendants,
	            propertyName: propertyName,
	            read: q.read ? this._getTokenMetadata(q.read) : null,
	            static: q.static
	        };
	    };
	    CompileMetadataResolver.prototype._reportError = function (error, type, otherType) {
	        if (this._errorCollector) {
	            this._errorCollector(error, type);
	            if (otherType) {
	                this._errorCollector(error, otherType);
	            }
	        }
	        else {
	            throw error;
	        }
	    };
	    return CompileMetadataResolver;
	}());
	function flattenArray(tree, out) {
	    if (out === void 0) { out = []; }
	    if (tree) {
	        for (var i = 0; i < tree.length; i++) {
	            var item = resolveForwardRef(tree[i]);
	            if (Array.isArray(item)) {
	                flattenArray(item, out);
	            }
	            else {
	                out.push(item);
	            }
	        }
	    }
	    return out;
	}
	function dedupeArray(array) {
	    if (array) {
	        return Array.from(new Set(array));
	    }
	    return [];
	}
	function flattenAndDedupeArray(tree) {
	    return dedupeArray(flattenArray(tree));
	}
	function isValidType(value) {
	    return (value instanceof StaticSymbol) || (value instanceof Type);
	}
	function extractIdentifiers(value, targetIdentifiers) {
	    visitValue(value, new _CompileValueConverter(), targetIdentifiers);
	}
	var _CompileValueConverter = /** @class */ (function (_super) {
	    __extends(_CompileValueConverter, _super);
	    function _CompileValueConverter() {
	        return _super !== null && _super.apply(this, arguments) || this;
	    }
	    _CompileValueConverter.prototype.visitOther = function (value, targetIdentifiers) {
	        targetIdentifiers.push({ reference: value });
	    };
	    return _CompileValueConverter;
	}(ValueTransformer));
	function stringifyType(type) {
	    if (type instanceof StaticSymbol) {
	        return type.name + " in " + type.filePath;
	    }
	    else {
	        return stringify(type);
	    }
	}
	/**
	 * Indicates that a component is still being loaded in a synchronous compile.
	 */
	function componentStillLoadingError(compType) {
	    var error = Error("Can't compile synchronously as " + stringify(compType) + " is still being loaded!");
	    error[ERROR_COMPONENT_TYPE] = compType;
	    return error;
	}

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	function providerDef(ctx, providerAst) {
	    var flags = 0 /* None */;
	    if (!providerAst.eager) {
	        flags |= 4096 /* LazyProvider */;
	    }
	    if (providerAst.providerType === ProviderAstType.PrivateService) {
	        flags |= 8192 /* PrivateProvider */;
	    }
	    if (providerAst.isModule) {
	        flags |= 1073741824 /* TypeModuleProvider */;
	    }
	    providerAst.lifecycleHooks.forEach(function (lifecycleHook) {
	        // for regular providers, we only support ngOnDestroy
	        if (lifecycleHook === LifecycleHooks.OnDestroy ||
	            providerAst.providerType === ProviderAstType.Directive ||
	            providerAst.providerType === ProviderAstType.Component) {
	            flags |= lifecycleHookToNodeFlag(lifecycleHook);
	        }
	    });
	    var _a = providerAst.multiProvider ?
	        multiProviderDef(ctx, flags, providerAst.providers) :
	        singleProviderDef(ctx, flags, providerAst.providerType, providerAst.providers[0]), providerExpr = _a.providerExpr, providerFlags = _a.flags, depsExpr = _a.depsExpr;
	    return {
	        providerExpr: providerExpr,
	        flags: providerFlags,
	        depsExpr: depsExpr,
	        tokenExpr: tokenExpr(ctx, providerAst.token),
	    };
	}
	function multiProviderDef(ctx, flags, providers) {
	    var allDepDefs = [];
	    var allParams = [];
	    var exprs = providers.map(function (provider, providerIndex) {
	        var expr;
	        if (provider.useClass) {
	            var depExprs = convertDeps(providerIndex, provider.deps || provider.useClass.diDeps);
	            expr = ctx.importExpr(provider.useClass.reference).instantiate(depExprs);
	        }
	        else if (provider.useFactory) {
	            var depExprs = convertDeps(providerIndex, provider.deps || provider.useFactory.diDeps);
	            expr = ctx.importExpr(provider.useFactory.reference).callFn(depExprs);
	        }
	        else if (provider.useExisting) {
	            var depExprs = convertDeps(providerIndex, [{ token: provider.useExisting }]);
	            expr = depExprs[0];
	        }
	        else {
	            expr = convertValueToOutputAst(ctx, provider.useValue);
	        }
	        return expr;
	    });
	    var providerExpr = fn(allParams, [new ReturnStatement(literalArr(exprs))], INFERRED_TYPE);
	    return {
	        providerExpr: providerExpr,
	        flags: flags | 1024 /* TypeFactoryProvider */,
	        depsExpr: literalArr(allDepDefs)
	    };
	    function convertDeps(providerIndex, deps) {
	        return deps.map(function (dep, depIndex) {
	            var paramName = "p" + providerIndex + "_" + depIndex;
	            allParams.push(new FnParam(paramName, DYNAMIC_TYPE));
	            allDepDefs.push(depDef(ctx, dep));
	            return variable(paramName);
	        });
	    }
	}
	function singleProviderDef(ctx, flags, providerType, providerMeta) {
	    var providerExpr;
	    var deps;
	    if (providerType === ProviderAstType.Directive || providerType === ProviderAstType.Component) {
	        providerExpr = ctx.importExpr(providerMeta.useClass.reference);
	        flags |= 16384 /* TypeDirective */;
	        deps = providerMeta.deps || providerMeta.useClass.diDeps;
	    }
	    else {
	        if (providerMeta.useClass) {
	            providerExpr = ctx.importExpr(providerMeta.useClass.reference);
	            flags |= 512 /* TypeClassProvider */;
	            deps = providerMeta.deps || providerMeta.useClass.diDeps;
	        }
	        else if (providerMeta.useFactory) {
	            providerExpr = ctx.importExpr(providerMeta.useFactory.reference);
	            flags |= 1024 /* TypeFactoryProvider */;
	            deps = providerMeta.deps || providerMeta.useFactory.diDeps;
	        }
	        else if (providerMeta.useExisting) {
	            providerExpr = NULL_EXPR;
	            flags |= 2048 /* TypeUseExistingProvider */;
	            deps = [{ token: providerMeta.useExisting }];
	        }
	        else {
	            providerExpr = convertValueToOutputAst(ctx, providerMeta.useValue);
	            flags |= 256 /* TypeValueProvider */;
	            deps = [];
	        }
	    }
	    var depsExpr = literalArr(deps.map(function (dep) { return depDef(ctx, dep); }));
	    return { providerExpr: providerExpr, flags: flags, depsExpr: depsExpr };
	}
	function tokenExpr(ctx, tokenMeta) {
	    return tokenMeta.identifier ? ctx.importExpr(tokenMeta.identifier.reference) :
	        literal(tokenMeta.value);
	}
	function depDef(ctx, dep) {
	    // Note: the following fields have already been normalized out by provider_analyzer:
	    // - isAttribute, isHost
	    var expr = dep.isValue ? convertValueToOutputAst(ctx, dep.value) : tokenExpr(ctx, dep.token);
	    var flags = 0 /* None */;
	    if (dep.isSkipSelf) {
	        flags |= 1 /* SkipSelf */;
	    }
	    if (dep.isOptional) {
	        flags |= 2 /* Optional */;
	    }
	    if (dep.isSelf) {
	        flags |= 4 /* Self */;
	    }
	    if (dep.isValue) {
	        flags |= 8 /* Value */;
	    }
	    return flags === 0 /* None */ ? expr : literalArr([literal(flags), expr]);
	}
	function lifecycleHookToNodeFlag(lifecycleHook) {
	    var nodeFlag = 0 /* None */;
	    switch (lifecycleHook) {
	        case LifecycleHooks.AfterContentChecked:
	            nodeFlag = 2097152 /* AfterContentChecked */;
	            break;
	        case LifecycleHooks.AfterContentInit:
	            nodeFlag = 1048576 /* AfterContentInit */;
	            break;
	        case LifecycleHooks.AfterViewChecked:
	            nodeFlag = 8388608 /* AfterViewChecked */;
	            break;
	        case LifecycleHooks.AfterViewInit:
	            nodeFlag = 4194304 /* AfterViewInit */;
	            break;
	        case LifecycleHooks.DoCheck:
	            nodeFlag = 262144 /* DoCheck */;
	            break;
	        case LifecycleHooks.OnChanges:
	            nodeFlag = 524288 /* OnChanges */;
	            break;
	        case LifecycleHooks.OnDestroy:
	            nodeFlag = 131072 /* OnDestroy */;
	            break;
	        case LifecycleHooks.OnInit:
	            nodeFlag = 65536 /* OnInit */;
	            break;
	    }
	    return nodeFlag;
	}
	function componentFactoryResolverProviderDef(reflector, ctx, flags, entryComponents) {
	    var entryComponentFactories = entryComponents.map(function (entryComponent) { return ctx.importExpr(entryComponent.componentFactory); });
	    var token = createTokenForExternalReference(reflector, Identifiers.ComponentFactoryResolver);
	    var classMeta = {
	        diDeps: [
	            { isValue: true, value: literalArr(entryComponentFactories) },
	            { token: token, isSkipSelf: true, isOptional: true },
	            { token: createTokenForExternalReference(reflector, Identifiers.NgModuleRef) },
	        ],
	        lifecycleHooks: [],
	        reference: reflector.resolveExternalReference(Identifiers.CodegenComponentFactoryResolver)
	    };
	    var _a = singleProviderDef(ctx, flags, ProviderAstType.PrivateService, {
	        token: token,
	        multi: false,
	        useClass: classMeta,
	    }), providerExpr = _a.providerExpr, providerFlags = _a.flags, depsExpr = _a.depsExpr;
	    return { providerExpr: providerExpr, flags: providerFlags, depsExpr: depsExpr, tokenExpr: tokenExpr(ctx, token) };
	}

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	var NgModuleCompileResult = /** @class */ (function () {
	    function NgModuleCompileResult(ngModuleFactoryVar) {
	        this.ngModuleFactoryVar = ngModuleFactoryVar;
	    }
	    return NgModuleCompileResult;
	}());
	var LOG_VAR = variable('_l');
	var NgModuleCompiler = /** @class */ (function () {
	    function NgModuleCompiler(reflector) {
	        this.reflector = reflector;
	    }
	    NgModuleCompiler.prototype.compile = function (ctx, ngModuleMeta, extraProviders) {
	        var sourceSpan = typeSourceSpan('NgModule', ngModuleMeta.type);
	        var entryComponentFactories = ngModuleMeta.transitiveModule.entryComponents;
	        var bootstrapComponents = ngModuleMeta.bootstrapComponents;
	        var providerParser = new NgModuleProviderAnalyzer(this.reflector, ngModuleMeta, extraProviders, sourceSpan);
	        var providerDefs = [componentFactoryResolverProviderDef(this.reflector, ctx, 0 /* None */, entryComponentFactories)]
	            .concat(providerParser.parse().map(function (provider) { return providerDef(ctx, provider); }))
	            .map(function (_a) {
	            var providerExpr = _a.providerExpr, depsExpr = _a.depsExpr, flags = _a.flags, tokenExpr = _a.tokenExpr;
	            return importExpr(Identifiers.moduleProviderDef).callFn([
	                literal(flags), tokenExpr, providerExpr, depsExpr
	            ]);
	        });
	        var ngModuleDef = importExpr(Identifiers.moduleDef).callFn([literalArr(providerDefs)]);
	        var ngModuleDefFactory = fn([new FnParam(LOG_VAR.name)], [new ReturnStatement(ngModuleDef)], INFERRED_TYPE);
	        var ngModuleFactoryVar = identifierName(ngModuleMeta.type) + "NgFactory";
	        this._createNgModuleFactory(ctx, ngModuleMeta.type.reference, importExpr(Identifiers.createModuleFactory).callFn([
	            ctx.importExpr(ngModuleMeta.type.reference),
	            literalArr(bootstrapComponents.map(function (id) { return ctx.importExpr(id.reference); })),
	            ngModuleDefFactory
	        ]));
	        if (ngModuleMeta.id) {
	            var id = typeof ngModuleMeta.id === 'string' ? literal(ngModuleMeta.id) :
	                ctx.importExpr(ngModuleMeta.id);
	            var registerFactoryStmt = importExpr(Identifiers.RegisterModuleFactoryFn)
	                .callFn([id, variable(ngModuleFactoryVar)])
	                .toStmt();
	            ctx.statements.push(registerFactoryStmt);
	        }
	        return new NgModuleCompileResult(ngModuleFactoryVar);
	    };
	    NgModuleCompiler.prototype.createStub = function (ctx, ngModuleReference) {
	        this._createNgModuleFactory(ctx, ngModuleReference, NULL_EXPR);
	    };
	    NgModuleCompiler.prototype._createNgModuleFactory = function (ctx, reference, value) {
	        var ngModuleFactoryVar = identifierName({ reference: reference }) + "NgFactory";
	        var ngModuleFactoryStmt = variable(ngModuleFactoryVar)
	            .set(value)
	            .toDeclStmt(importType(Identifiers.NgModuleFactory, [expressionType(ctx.importExpr(reference))], [TypeModifier.Const]), [StmtModifier.Final, StmtModifier.Exported]);
	        ctx.statements.push(ngModuleFactoryStmt);
	    };
	    return NgModuleCompiler;
	}());

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * Resolves types to {@link NgModule}.
	 */
	var NgModuleResolver = /** @class */ (function () {
	    function NgModuleResolver(_reflector) {
	        this._reflector = _reflector;
	    }
	    NgModuleResolver.prototype.isNgModule = function (type) {
	        return this._reflector.annotations(type).some(createNgModule.isTypeOf);
	    };
	    NgModuleResolver.prototype.resolve = function (type, throwIfNotFound) {
	        if (throwIfNotFound === void 0) { throwIfNotFound = true; }
	        var ngModuleMeta = findLast(this._reflector.annotations(type), createNgModule.isTypeOf);
	        if (ngModuleMeta) {
	            return ngModuleMeta;
	        }
	        else {
	            if (throwIfNotFound) {
	                throw new Error("No NgModule metadata found for '" + stringify(type) + "'.");
	            }
	            return null;
	        }
	    };
	    return NgModuleResolver;
	}());
	function debugOutputAstAsTypeScript(ast) {
	    var converter = new _TsEmitterVisitor();
	    var ctx = EmitterVisitorContext.createRoot();
	    var asts = Array.isArray(ast) ? ast : [ast];
	    asts.forEach(function (ast) {
	        if (ast instanceof Statement) {
	            ast.visitStatement(converter, ctx);
	        }
	        else if (ast instanceof Expression) {
	            ast.visitExpression(converter, ctx);
	        }
	        else if (ast instanceof Type$1) {
	            ast.visitType(converter, ctx);
	        }
	        else {
	            throw new Error("Don't know how to print debug info for " + ast);
	        }
	    });
	    return ctx.toSource();
	}
	var _TsEmitterVisitor = /** @class */ (function (_super) {
	    __extends(_TsEmitterVisitor, _super);
	    function _TsEmitterVisitor(referenceFilter, importFilter) {
	        var _this = _super.call(this, false) || this;
	        _this.referenceFilter = referenceFilter;
	        _this.importFilter = importFilter;
	        _this.typeExpression = 0;
	        _this.importsWithPrefixes = new Map();
	        _this.reexports = new Map();
	        return _this;
	    }
	    _TsEmitterVisitor.prototype.visitType = function (t, ctx, defaultType) {
	        if (defaultType === void 0) { defaultType = 'any'; }
	        if (t) {
	            this.typeExpression++;
	            t.visitType(this, ctx);
	            this.typeExpression--;
	        }
	        else {
	            ctx.print(null, defaultType);
	        }
	    };
	    _TsEmitterVisitor.prototype.visitLiteralExpr = function (ast, ctx) {
	        var value = ast.value;
	        if (value == null && ast.type != INFERRED_TYPE) {
	            ctx.print(ast, "(" + value + " as any)");
	            return null;
	        }
	        return _super.prototype.visitLiteralExpr.call(this, ast, ctx);
	    };
	    // Temporary workaround to support strictNullCheck enabled consumers of ngc emit.
	    // In SNC mode, [] have the type never[], so we cast here to any[].
	    // TODO: narrow the cast to a more explicit type, or use a pattern that does not
	    // start with [].concat. see https://github.com/angular/angular/pull/11846
	    _TsEmitterVisitor.prototype.visitLiteralArrayExpr = function (ast, ctx) {
	        if (ast.entries.length === 0) {
	            ctx.print(ast, '(');
	        }
	        var result = _super.prototype.visitLiteralArrayExpr.call(this, ast, ctx);
	        if (ast.entries.length === 0) {
	            ctx.print(ast, ' as any[])');
	        }
	        return result;
	    };
	    _TsEmitterVisitor.prototype.visitExternalExpr = function (ast, ctx) {
	        this._visitIdentifier(ast.value, ast.typeParams, ctx);
	        return null;
	    };
	    _TsEmitterVisitor.prototype.visitAssertNotNullExpr = function (ast, ctx) {
	        var result = _super.prototype.visitAssertNotNullExpr.call(this, ast, ctx);
	        ctx.print(ast, '!');
	        return result;
	    };
	    _TsEmitterVisitor.prototype.visitDeclareVarStmt = function (stmt, ctx) {
	        if (stmt.hasModifier(StmtModifier.Exported) && stmt.value instanceof ExternalExpr &&
	            !stmt.type) {
	            // check for a reexport
	            var _a = stmt.value.value, name_1 = _a.name, moduleName = _a.moduleName;
	            if (moduleName) {
	                var reexports = this.reexports.get(moduleName);
	                if (!reexports) {
	                    reexports = [];
	                    this.reexports.set(moduleName, reexports);
	                }
	                reexports.push({ name: name_1, as: stmt.name });
	                return null;
	            }
	        }
	        if (stmt.hasModifier(StmtModifier.Exported)) {
	            ctx.print(stmt, "export ");
	        }
	        if (stmt.hasModifier(StmtModifier.Final)) {
	            ctx.print(stmt, "const");
	        }
	        else {
	            ctx.print(stmt, "var");
	        }
	        ctx.print(stmt, " " + stmt.name);
	        this._printColonType(stmt.type, ctx);
	        if (stmt.value) {
	            ctx.print(stmt, " = ");
	            stmt.value.visitExpression(this, ctx);
	        }
	        ctx.println(stmt, ";");
	        return null;
	    };
	    _TsEmitterVisitor.prototype.visitWrappedNodeExpr = function (ast, ctx) {
	        throw new Error('Cannot visit a WrappedNodeExpr when outputting Typescript.');
	    };
	    _TsEmitterVisitor.prototype.visitCastExpr = function (ast, ctx) {
	        ctx.print(ast, "(<");
	        ast.type.visitType(this, ctx);
	        ctx.print(ast, ">");
	        ast.value.visitExpression(this, ctx);
	        ctx.print(ast, ")");
	        return null;
	    };
	    _TsEmitterVisitor.prototype.visitInstantiateExpr = function (ast, ctx) {
	        ctx.print(ast, "new ");
	        this.typeExpression++;
	        ast.classExpr.visitExpression(this, ctx);
	        this.typeExpression--;
	        ctx.print(ast, "(");
	        this.visitAllExpressions(ast.args, ctx, ',');
	        ctx.print(ast, ")");
	        return null;
	    };
	    _TsEmitterVisitor.prototype.visitDeclareClassStmt = function (stmt, ctx) {
	        var _this = this;
	        ctx.pushClass(stmt);
	        if (stmt.hasModifier(StmtModifier.Exported)) {
	            ctx.print(stmt, "export ");
	        }
	        ctx.print(stmt, "class " + stmt.name);
	        if (stmt.parent != null) {
	            ctx.print(stmt, " extends ");
	            this.typeExpression++;
	            stmt.parent.visitExpression(this, ctx);
	            this.typeExpression--;
	        }
	        ctx.println(stmt, " {");
	        ctx.incIndent();
	        stmt.fields.forEach(function (field) { return _this._visitClassField(field, ctx); });
	        if (stmt.constructorMethod != null) {
	            this._visitClassConstructor(stmt, ctx);
	        }
	        stmt.getters.forEach(function (getter) { return _this._visitClassGetter(getter, ctx); });
	        stmt.methods.forEach(function (method) { return _this._visitClassMethod(method, ctx); });
	        ctx.decIndent();
	        ctx.println(stmt, "}");
	        ctx.popClass();
	        return null;
	    };
	    _TsEmitterVisitor.prototype._visitClassField = function (field, ctx) {
	        if (field.hasModifier(StmtModifier.Private)) {
	            // comment out as a workaround for #10967
	            ctx.print(null, "/*private*/ ");
	        }
	        if (field.hasModifier(StmtModifier.Static)) {
	            ctx.print(null, 'static ');
	        }
	        ctx.print(null, field.name);
	        this._printColonType(field.type, ctx);
	        if (field.initializer) {
	            ctx.print(null, ' = ');
	            field.initializer.visitExpression(this, ctx);
	        }
	        ctx.println(null, ";");
	    };
	    _TsEmitterVisitor.prototype._visitClassGetter = function (getter, ctx) {
	        if (getter.hasModifier(StmtModifier.Private)) {
	            ctx.print(null, "private ");
	        }
	        ctx.print(null, "get " + getter.name + "()");
	        this._printColonType(getter.type, ctx);
	        ctx.println(null, " {");
	        ctx.incIndent();
	        this.visitAllStatements(getter.body, ctx);
	        ctx.decIndent();
	        ctx.println(null, "}");
	    };
	    _TsEmitterVisitor.prototype._visitClassConstructor = function (stmt, ctx) {
	        ctx.print(stmt, "constructor(");
	        this._visitParams(stmt.constructorMethod.params, ctx);
	        ctx.println(stmt, ") {");
	        ctx.incIndent();
	        this.visitAllStatements(stmt.constructorMethod.body, ctx);
	        ctx.decIndent();
	        ctx.println(stmt, "}");
	    };
	    _TsEmitterVisitor.prototype._visitClassMethod = function (method, ctx) {
	        if (method.hasModifier(StmtModifier.Private)) {
	            ctx.print(null, "private ");
	        }
	        ctx.print(null, method.name + "(");
	        this._visitParams(method.params, ctx);
	        ctx.print(null, ")");
	        this._printColonType(method.type, ctx, 'void');
	        ctx.println(null, " {");
	        ctx.incIndent();
	        this.visitAllStatements(method.body, ctx);
	        ctx.decIndent();
	        ctx.println(null, "}");
	    };
	    _TsEmitterVisitor.prototype.visitFunctionExpr = function (ast, ctx) {
	        if (ast.name) {
	            ctx.print(ast, 'function ');
	            ctx.print(ast, ast.name);
	        }
	        ctx.print(ast, "(");
	        this._visitParams(ast.params, ctx);
	        ctx.print(ast, ")");
	        this._printColonType(ast.type, ctx, 'void');
	        if (!ast.name) {
	            ctx.print(ast, " => ");
	        }
	        ctx.println(ast, '{');
	        ctx.incIndent();
	        this.visitAllStatements(ast.statements, ctx);
	        ctx.decIndent();
	        ctx.print(ast, "}");
	        return null;
	    };
	    _TsEmitterVisitor.prototype.visitDeclareFunctionStmt = function (stmt, ctx) {
	        if (stmt.hasModifier(StmtModifier.Exported)) {
	            ctx.print(stmt, "export ");
	        }
	        ctx.print(stmt, "function " + stmt.name + "(");
	        this._visitParams(stmt.params, ctx);
	        ctx.print(stmt, ")");
	        this._printColonType(stmt.type, ctx, 'void');
	        ctx.println(stmt, " {");
	        ctx.incIndent();
	        this.visitAllStatements(stmt.statements, ctx);
	        ctx.decIndent();
	        ctx.println(stmt, "}");
	        return null;
	    };
	    _TsEmitterVisitor.prototype.visitTryCatchStmt = function (stmt, ctx) {
	        ctx.println(stmt, "try {");
	        ctx.incIndent();
	        this.visitAllStatements(stmt.bodyStmts, ctx);
	        ctx.decIndent();
	        ctx.println(stmt, "} catch (" + CATCH_ERROR_VAR$1.name + ") {");
	        ctx.incIndent();
	        var catchStmts = [CATCH_STACK_VAR$1.set(CATCH_ERROR_VAR$1.prop('stack', null)).toDeclStmt(null, [
	                StmtModifier.Final
	            ])].concat(stmt.catchStmts);
	        this.visitAllStatements(catchStmts, ctx);
	        ctx.decIndent();
	        ctx.println(stmt, "}");
	        return null;
	    };
	    _TsEmitterVisitor.prototype.visitBuiltinType = function (type, ctx) {
	        var typeStr;
	        switch (type.name) {
	            case BuiltinTypeName.Bool:
	                typeStr = 'boolean';
	                break;
	            case BuiltinTypeName.Dynamic:
	                typeStr = 'any';
	                break;
	            case BuiltinTypeName.Function:
	                typeStr = 'Function';
	                break;
	            case BuiltinTypeName.Number:
	                typeStr = 'number';
	                break;
	            case BuiltinTypeName.Int:
	                typeStr = 'number';
	                break;
	            case BuiltinTypeName.String:
	                typeStr = 'string';
	                break;
	            case BuiltinTypeName.None:
	                typeStr = 'never';
	                break;
	            default:
	                throw new Error("Unsupported builtin type " + type.name);
	        }
	        ctx.print(null, typeStr);
	        return null;
	    };
	    _TsEmitterVisitor.prototype.visitExpressionType = function (ast, ctx) {
	        var _this = this;
	        ast.value.visitExpression(this, ctx);
	        if (ast.typeParams !== null) {
	            ctx.print(null, '<');
	            this.visitAllObjects(function (type) { return _this.visitType(type, ctx); }, ast.typeParams, ctx, ',');
	            ctx.print(null, '>');
	        }
	        return null;
	    };
	    _TsEmitterVisitor.prototype.visitArrayType = function (type, ctx) {
	        this.visitType(type.of, ctx);
	        ctx.print(null, "[]");
	        return null;
	    };
	    _TsEmitterVisitor.prototype.visitMapType = function (type, ctx) {
	        ctx.print(null, "{[key: string]:");
	        this.visitType(type.valueType, ctx);
	        ctx.print(null, "}");
	        return null;
	    };
	    _TsEmitterVisitor.prototype.getBuiltinMethodName = function (method) {
	        var name;
	        switch (method) {
	            case BuiltinMethod.ConcatArray:
	                name = 'concat';
	                break;
	            case BuiltinMethod.SubscribeObservable:
	                name = 'subscribe';
	                break;
	            case BuiltinMethod.Bind:
	                name = 'bind';
	                break;
	            default:
	                throw new Error("Unknown builtin method: " + method);
	        }
	        return name;
	    };
	    _TsEmitterVisitor.prototype._visitParams = function (params, ctx) {
	        var _this = this;
	        this.visitAllObjects(function (param) {
	            ctx.print(null, param.name);
	            _this._printColonType(param.type, ctx);
	        }, params, ctx, ',');
	    };
	    _TsEmitterVisitor.prototype._visitIdentifier = function (value, typeParams, ctx) {
	        var _this = this;
	        var name = value.name, moduleName = value.moduleName;
	        if (this.referenceFilter && this.referenceFilter(value)) {
	            ctx.print(null, '(null as any)');
	            return;
	        }
	        if (moduleName && (!this.importFilter || !this.importFilter(value))) {
	            var prefix = this.importsWithPrefixes.get(moduleName);
	            if (prefix == null) {
	                prefix = "i" + this.importsWithPrefixes.size;
	                this.importsWithPrefixes.set(moduleName, prefix);
	            }
	            ctx.print(null, prefix + ".");
	        }
	        ctx.print(null, name);
	        if (this.typeExpression > 0) {
	            // If we are in a type expression that refers to a generic type then supply
	            // the required type parameters. If there were not enough type parameters
	            // supplied, supply any as the type. Outside a type expression the reference
	            // should not supply type parameters and be treated as a simple value reference
	            // to the constructor function itself.
	            var suppliedParameters = typeParams || [];
	            if (suppliedParameters.length > 0) {
	                ctx.print(null, "<");
	                this.visitAllObjects(function (type) { return type.visitType(_this, ctx); }, typeParams, ctx, ',');
	                ctx.print(null, ">");
	            }
	        }
	    };
	    _TsEmitterVisitor.prototype._printColonType = function (type, ctx, defaultType) {
	        if (type !== INFERRED_TYPE) {
	            ctx.print(null, ':');
	            this.visitType(type, ctx, defaultType);
	        }
	    };
	    return _TsEmitterVisitor;
	}(AbstractEmitterVisitor));

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * Resolve a `Type` for {@link Pipe}.
	 *
	 * This interface can be overridden by the application developer to create custom behavior.
	 *
	 * See {@link Compiler}
	 */
	var PipeResolver = /** @class */ (function () {
	    function PipeResolver(_reflector) {
	        this._reflector = _reflector;
	    }
	    PipeResolver.prototype.isPipe = function (type) {
	        var typeMetadata = this._reflector.annotations(resolveForwardRef(type));
	        return typeMetadata && typeMetadata.some(createPipe.isTypeOf);
	    };
	    /**
	     * Return {@link Pipe} for a given `Type`.
	     */
	    PipeResolver.prototype.resolve = function (type, throwIfNotFound) {
	        if (throwIfNotFound === void 0) { throwIfNotFound = true; }
	        var metas = this._reflector.annotations(resolveForwardRef(type));
	        if (metas) {
	            var annotation = findLast(metas, createPipe.isTypeOf);
	            if (annotation) {
	                return annotation;
	            }
	        }
	        if (throwIfNotFound) {
	            throw new Error("No Pipe decorator found on " + stringify(type));
	        }
	        return null;
	    };
	    return PipeResolver;
	}());

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	var CLASS_ATTR$1 = 'class';
	var STYLE_ATTR = 'style';
	var IMPLICIT_TEMPLATE_VAR = '\$implicit';
	var ViewCompileResult = /** @class */ (function () {
	    function ViewCompileResult(viewClassVar, rendererTypeVar) {
	        this.viewClassVar = viewClassVar;
	        this.rendererTypeVar = rendererTypeVar;
	    }
	    return ViewCompileResult;
	}());
	var ViewCompiler = /** @class */ (function () {
	    function ViewCompiler(_reflector) {
	        this._reflector = _reflector;
	    }
	    ViewCompiler.prototype.compileComponent = function (outputCtx, component, template, styles, usedPipes) {
	        var _a;
	        var _this = this;
	        var embeddedViewCount = 0;
	        var renderComponentVarName = undefined;
	        if (!component.isHost) {
	            var template_1 = component.template;
	            var customRenderData = [];
	            if (template_1.animations && template_1.animations.length) {
	                customRenderData.push(new LiteralMapEntry('animation', convertValueToOutputAst(outputCtx, template_1.animations), true));
	            }
	            var renderComponentVar = variable(rendererTypeName(component.type.reference));
	            renderComponentVarName = renderComponentVar.name;
	            outputCtx.statements.push(renderComponentVar
	                .set(importExpr(Identifiers.createRendererType2).callFn([new LiteralMapExpr([
	                    new LiteralMapEntry('encapsulation', literal(template_1.encapsulation), false),
	                    new LiteralMapEntry('styles', styles, false),
	                    new LiteralMapEntry('data', new LiteralMapExpr(customRenderData), false)
	                ])]))
	                .toDeclStmt(importType(Identifiers.RendererType2), [StmtModifier.Final, StmtModifier.Exported]));
	        }
	        var viewBuilderFactory = function (parent) {
	            var embeddedViewIndex = embeddedViewCount++;
	            return new ViewBuilder$1(_this._reflector, outputCtx, parent, component, embeddedViewIndex, usedPipes, viewBuilderFactory);
	        };
	        var visitor = viewBuilderFactory(null);
	        visitor.visitAll([], template);
	        (_a = outputCtx.statements).push.apply(_a, __spread(visitor.build()));
	        return new ViewCompileResult(visitor.viewName, renderComponentVarName);
	    };
	    return ViewCompiler;
	}());
	var LOG_VAR$1 = variable('_l');
	var VIEW_VAR = variable('_v');
	var CHECK_VAR = variable('_ck');
	var COMP_VAR = variable('_co');
	var EVENT_NAME_VAR = variable('en');
	var ALLOW_DEFAULT_VAR = variable("ad");
	var ViewBuilder$1 = /** @class */ (function () {
	    function ViewBuilder(reflector, outputCtx, parent, component, embeddedViewIndex, usedPipes, viewBuilderFactory) {
	        this.reflector = reflector;
	        this.outputCtx = outputCtx;
	        this.parent = parent;
	        this.component = component;
	        this.embeddedViewIndex = embeddedViewIndex;
	        this.usedPipes = usedPipes;
	        this.viewBuilderFactory = viewBuilderFactory;
	        this.nodes = [];
	        this.purePipeNodeIndices = Object.create(null);
	        // Need Object.create so that we don't have builtin values...
	        this.refNodeIndices = Object.create(null);
	        this.variables = [];
	        this.children = [];
	        // TODO(tbosch): The old view compiler used to use an `any` type
	        // for the context in any embedded view. We keep this behaivor for now
	        // to be able to introduce the new view compiler without too many errors.
	        this.compType = this.embeddedViewIndex > 0 ?
	            DYNAMIC_TYPE :
	            expressionType(outputCtx.importExpr(this.component.type.reference));
	        this.viewName = viewClassName(this.component.type.reference, this.embeddedViewIndex);
	    }
	    ViewBuilder.prototype.visitAll = function (variables, astNodes) {
	        var _this = this;
	        this.variables = variables;
	        // create the pipes for the pure pipes immediately, so that we know their indices.
	        if (!this.parent) {
	            this.usedPipes.forEach(function (pipe) {
	                if (pipe.pure) {
	                    _this.purePipeNodeIndices[pipe.name] = _this._createPipe(null, pipe);
	                }
	            });
	        }
	        if (!this.parent) {
	            this.component.viewQueries.forEach(function (query, queryIndex) {
	                // Note: queries start with id 1 so we can use the number in a Bloom filter!
	                var queryId = queryIndex + 1;
	                var bindingType = query.first ? 0 /* First */ : 1 /* All */;
	                var flags = 134217728 /* TypeViewQuery */ | calcStaticDynamicQueryFlags(query);
	                _this.nodes.push(function () { return ({
	                    sourceSpan: null,
	                    nodeFlags: flags,
	                    nodeDef: importExpr(Identifiers.queryDef).callFn([
	                        literal(flags), literal(queryId),
	                        new LiteralMapExpr([new LiteralMapEntry(query.propertyName, literal(bindingType), false)])
	                    ])
	                }); });
	            });
	        }
	        templateVisitAll(this, astNodes);
	        if (this.parent && (astNodes.length === 0 || needsAdditionalRootNode(astNodes))) {
	            // if the view is an embedded view, then we need to add an additional root node in some cases
	            this.nodes.push(function () { return ({
	                sourceSpan: null,
	                nodeFlags: 1 /* TypeElement */,
	                nodeDef: importExpr(Identifiers.anchorDef).callFn([
	                    literal(0 /* None */), NULL_EXPR, NULL_EXPR, literal(0)
	                ])
	            }); });
	        }
	    };
	    ViewBuilder.prototype.build = function (targetStatements) {
	        if (targetStatements === void 0) { targetStatements = []; }
	        this.children.forEach(function (child) { return child.build(targetStatements); });
	        var _a = this._createNodeExpressions(), updateRendererStmts = _a.updateRendererStmts, updateDirectivesStmts = _a.updateDirectivesStmts, nodeDefExprs = _a.nodeDefExprs;
	        var updateRendererFn = this._createUpdateFn(updateRendererStmts);
	        var updateDirectivesFn = this._createUpdateFn(updateDirectivesStmts);
	        var viewFlags = 0 /* None */;
	        if (!this.parent && this.component.changeDetection === ChangeDetectionStrategy.OnPush) {
	            viewFlags |= 2 /* OnPush */;
	        }
	        var viewFactory = new DeclareFunctionStmt(this.viewName, [new FnParam(LOG_VAR$1.name)], [new ReturnStatement(importExpr(Identifiers.viewDef).callFn([
	                literal(viewFlags),
	                literalArr(nodeDefExprs),
	                updateDirectivesFn,
	                updateRendererFn,
	            ]))], importType(Identifiers.ViewDefinition), this.embeddedViewIndex === 0 ? [StmtModifier.Exported] : []);
	        targetStatements.push(viewFactory);
	        return targetStatements;
	    };
	    ViewBuilder.prototype._createUpdateFn = function (updateStmts) {
	        var updateFn;
	        if (updateStmts.length > 0) {
	            var preStmts = [];
	            if (!this.component.isHost && findReadVarNames(updateStmts).has(COMP_VAR.name)) {
	                preStmts.push(COMP_VAR.set(VIEW_VAR.prop('component')).toDeclStmt(this.compType));
	            }
	            updateFn = fn([
	                new FnParam(CHECK_VAR.name, INFERRED_TYPE),
	                new FnParam(VIEW_VAR.name, INFERRED_TYPE)
	            ], __spread(preStmts, updateStmts), INFERRED_TYPE);
	        }
	        else {
	            updateFn = NULL_EXPR;
	        }
	        return updateFn;
	    };
	    ViewBuilder.prototype.visitNgContent = function (ast, context) {
	        // ngContentDef(ngContentIndex: number, index: number): NodeDef;
	        this.nodes.push(function () { return ({
	            sourceSpan: ast.sourceSpan,
	            nodeFlags: 8 /* TypeNgContent */,
	            nodeDef: importExpr(Identifiers.ngContentDef)
	                .callFn([literal(ast.ngContentIndex), literal(ast.index)])
	        }); });
	    };
	    ViewBuilder.prototype.visitText = function (ast, context) {
	        // Static text nodes have no check function
	        var checkIndex = -1;
	        this.nodes.push(function () { return ({
	            sourceSpan: ast.sourceSpan,
	            nodeFlags: 2 /* TypeText */,
	            nodeDef: importExpr(Identifiers.textDef).callFn([
	                literal(checkIndex),
	                literal(ast.ngContentIndex),
	                literalArr([literal(ast.value)]),
	            ])
	        }); });
	    };
	    ViewBuilder.prototype.visitBoundText = function (ast, context) {
	        var _this = this;
	        var nodeIndex = this.nodes.length;
	        // reserve the space in the nodeDefs array
	        this.nodes.push(null);
	        var astWithSource = ast.value;
	        var inter = astWithSource.ast;
	        var updateRendererExpressions = inter.expressions.map(function (expr, bindingIndex) { return _this._preprocessUpdateExpression({ nodeIndex: nodeIndex, bindingIndex: bindingIndex, sourceSpan: ast.sourceSpan, context: COMP_VAR, value: expr }); });
	        // Check index is the same as the node index during compilation
	        // They might only differ at runtime
	        var checkIndex = nodeIndex;
	        this.nodes[nodeIndex] = function () { return ({
	            sourceSpan: ast.sourceSpan,
	            nodeFlags: 2 /* TypeText */,
	            nodeDef: importExpr(Identifiers.textDef).callFn([
	                literal(checkIndex),
	                literal(ast.ngContentIndex),
	                literalArr(inter.strings.map(function (s) { return literal(s); })),
	            ]),
	            updateRenderer: updateRendererExpressions
	        }); };
	    };
	    ViewBuilder.prototype.visitEmbeddedTemplate = function (ast, context) {
	        var _this = this;
	        var nodeIndex = this.nodes.length;
	        // reserve the space in the nodeDefs array
	        this.nodes.push(null);
	        var _a = this._visitElementOrTemplate(nodeIndex, ast), flags = _a.flags, queryMatchesExpr = _a.queryMatchesExpr, hostEvents = _a.hostEvents;
	        var childVisitor = this.viewBuilderFactory(this);
	        this.children.push(childVisitor);
	        childVisitor.visitAll(ast.variables, ast.children);
	        var childCount = this.nodes.length - nodeIndex - 1;
	        // anchorDef(
	        //   flags: NodeFlags, matchedQueries: [string, QueryValueType][], ngContentIndex: number,
	        //   childCount: number, handleEventFn?: ElementHandleEventFn, templateFactory?:
	        //   ViewDefinitionFactory): NodeDef;
	        this.nodes[nodeIndex] = function () { return ({
	            sourceSpan: ast.sourceSpan,
	            nodeFlags: 1 /* TypeElement */ | flags,
	            nodeDef: importExpr(Identifiers.anchorDef).callFn([
	                literal(flags),
	                queryMatchesExpr,
	                literal(ast.ngContentIndex),
	                literal(childCount),
	                _this._createElementHandleEventFn(nodeIndex, hostEvents),
	                variable(childVisitor.viewName),
	            ])
	        }); };
	    };
	    ViewBuilder.prototype.visitElement = function (ast, context) {
	        var _this = this;
	        var nodeIndex = this.nodes.length;
	        // reserve the space in the nodeDefs array so we can add children
	        this.nodes.push(null);
	        // Using a null element name creates an anchor.
	        var elName = isNgContainer(ast.name) ? null : ast.name;
	        var _a = this._visitElementOrTemplate(nodeIndex, ast), flags = _a.flags, usedEvents = _a.usedEvents, queryMatchesExpr = _a.queryMatchesExpr, dirHostBindings = _a.hostBindings, hostEvents = _a.hostEvents;
	        var inputDefs = [];
	        var updateRendererExpressions = [];
	        var outputDefs = [];
	        if (elName) {
	            var hostBindings = ast.inputs
	                .map(function (inputAst) { return ({
	                context: COMP_VAR,
	                inputAst: inputAst,
	                dirAst: null,
	            }); })
	                .concat(dirHostBindings);
	            if (hostBindings.length) {
	                updateRendererExpressions =
	                    hostBindings.map(function (hostBinding, bindingIndex) { return _this._preprocessUpdateExpression({
	                        context: hostBinding.context,
	                        nodeIndex: nodeIndex,
	                        bindingIndex: bindingIndex,
	                        sourceSpan: hostBinding.inputAst.sourceSpan,
	                        value: hostBinding.inputAst.value
	                    }); });
	                inputDefs = hostBindings.map(function (hostBinding) { return elementBindingDef(hostBinding.inputAst, hostBinding.dirAst); });
	            }
	            outputDefs = usedEvents.map(function (_a) {
	                var _b = __read(_a, 2), target = _b[0], eventName = _b[1];
	                return literalArr([literal(target), literal(eventName)]);
	            });
	        }
	        templateVisitAll(this, ast.children);
	        var childCount = this.nodes.length - nodeIndex - 1;
	        var compAst = ast.directives.find(function (dirAst) { return dirAst.directive.isComponent; });
	        var compRendererType = NULL_EXPR;
	        var compView = NULL_EXPR;
	        if (compAst) {
	            compView = this.outputCtx.importExpr(compAst.directive.componentViewType);
	            compRendererType = this.outputCtx.importExpr(compAst.directive.rendererType);
	        }
	        // Check index is the same as the node index during compilation
	        // They might only differ at runtime
	        var checkIndex = nodeIndex;
	        this.nodes[nodeIndex] = function () { return ({
	            sourceSpan: ast.sourceSpan,
	            nodeFlags: 1 /* TypeElement */ | flags,
	            nodeDef: importExpr(Identifiers.elementDef).callFn([
	                literal(checkIndex),
	                literal(flags),
	                queryMatchesExpr,
	                literal(ast.ngContentIndex),
	                literal(childCount),
	                literal(elName),
	                elName ? fixedAttrsDef(ast) : NULL_EXPR,
	                inputDefs.length ? literalArr(inputDefs) : NULL_EXPR,
	                outputDefs.length ? literalArr(outputDefs) : NULL_EXPR,
	                _this._createElementHandleEventFn(nodeIndex, hostEvents),
	                compView,
	                compRendererType,
	            ]),
	            updateRenderer: updateRendererExpressions
	        }); };
	    };
	    ViewBuilder.prototype._visitElementOrTemplate = function (nodeIndex, ast) {
	        var _this = this;
	        var flags = 0 /* None */;
	        if (ast.hasViewContainer) {
	            flags |= 16777216 /* EmbeddedViews */;
	        }
	        var usedEvents = new Map();
	        ast.outputs.forEach(function (event) {
	            var _a = elementEventNameAndTarget(event, null), name = _a.name, target = _a.target;
	            usedEvents.set(elementEventFullName(target, name), [target, name]);
	        });
	        ast.directives.forEach(function (dirAst) {
	            dirAst.hostEvents.forEach(function (event) {
	                var _a = elementEventNameAndTarget(event, dirAst), name = _a.name, target = _a.target;
	                usedEvents.set(elementEventFullName(target, name), [target, name]);
	            });
	        });
	        var hostBindings = [];
	        var hostEvents = [];
	        this._visitComponentFactoryResolverProvider(ast.directives);
	        ast.providers.forEach(function (providerAst) {
	            var dirAst = undefined;
	            ast.directives.forEach(function (localDirAst) {
	                if (localDirAst.directive.type.reference === tokenReference(providerAst.token)) {
	                    dirAst = localDirAst;
	                }
	            });
	            if (dirAst) {
	                var _a = _this._visitDirective(providerAst, dirAst, ast.references, ast.queryMatches, usedEvents), dirHostBindings = _a.hostBindings, dirHostEvents = _a.hostEvents;
	                hostBindings.push.apply(hostBindings, __spread(dirHostBindings));
	                hostEvents.push.apply(hostEvents, __spread(dirHostEvents));
	            }
	            else {
	                _this._visitProvider(providerAst, ast.queryMatches);
	            }
	        });
	        var queryMatchExprs = [];
	        ast.queryMatches.forEach(function (match) {
	            var valueType = undefined;
	            if (tokenReference(match.value) ===
	                _this.reflector.resolveExternalReference(Identifiers.ElementRef)) {
	                valueType = 0 /* ElementRef */;
	            }
	            else if (tokenReference(match.value) ===
	                _this.reflector.resolveExternalReference(Identifiers.ViewContainerRef)) {
	                valueType = 3 /* ViewContainerRef */;
	            }
	            else if (tokenReference(match.value) ===
	                _this.reflector.resolveExternalReference(Identifiers.TemplateRef)) {
	                valueType = 2 /* TemplateRef */;
	            }
	            if (valueType != null) {
	                queryMatchExprs.push(literalArr([literal(match.queryId), literal(valueType)]));
	            }
	        });
	        ast.references.forEach(function (ref) {
	            var valueType = undefined;
	            if (!ref.value) {
	                valueType = 1 /* RenderElement */;
	            }
	            else if (tokenReference(ref.value) ===
	                _this.reflector.resolveExternalReference(Identifiers.TemplateRef)) {
	                valueType = 2 /* TemplateRef */;
	            }
	            if (valueType != null) {
	                _this.refNodeIndices[ref.name] = nodeIndex;
	                queryMatchExprs.push(literalArr([literal(ref.name), literal(valueType)]));
	            }
	        });
	        ast.outputs.forEach(function (outputAst) {
	            hostEvents.push({ context: COMP_VAR, eventAst: outputAst, dirAst: null });
	        });
	        return {
	            flags: flags,
	            usedEvents: Array.from(usedEvents.values()),
	            queryMatchesExpr: queryMatchExprs.length ? literalArr(queryMatchExprs) : NULL_EXPR,
	            hostBindings: hostBindings,
	            hostEvents: hostEvents
	        };
	    };
	    ViewBuilder.prototype._visitDirective = function (providerAst, dirAst, refs, queryMatches, usedEvents) {
	        var _this = this;
	        var nodeIndex = this.nodes.length;
	        // reserve the space in the nodeDefs array so we can add children
	        this.nodes.push(null);
	        dirAst.directive.queries.forEach(function (query, queryIndex) {
	            var queryId = dirAst.contentQueryStartId + queryIndex;
	            var flags = 67108864 /* TypeContentQuery */ | calcStaticDynamicQueryFlags(query);
	            var bindingType = query.first ? 0 /* First */ : 1 /* All */;
	            _this.nodes.push(function () { return ({
	                sourceSpan: dirAst.sourceSpan,
	                nodeFlags: flags,
	                nodeDef: importExpr(Identifiers.queryDef).callFn([
	                    literal(flags), literal(queryId),
	                    new LiteralMapExpr([new LiteralMapEntry(query.propertyName, literal(bindingType), false)])
	                ]),
	            }); });
	        });
	        // Note: the operation below might also create new nodeDefs,
	        // but we don't want them to be a child of a directive,
	        // as they might be a provider/pipe on their own.
	        // I.e. we only allow queries as children of directives nodes.
	        var childCount = this.nodes.length - nodeIndex - 1;
	        var _a = this._visitProviderOrDirective(providerAst, queryMatches), flags = _a.flags, queryMatchExprs = _a.queryMatchExprs, providerExpr = _a.providerExpr, depsExpr = _a.depsExpr;
	        refs.forEach(function (ref) {
	            if (ref.value && tokenReference(ref.value) === tokenReference(providerAst.token)) {
	                _this.refNodeIndices[ref.name] = nodeIndex;
	                queryMatchExprs.push(literalArr([literal(ref.name), literal(4 /* Provider */)]));
	            }
	        });
	        if (dirAst.directive.isComponent) {
	            flags |= 32768 /* Component */;
	        }
	        var inputDefs = dirAst.inputs.map(function (inputAst, inputIndex) {
	            var mapValue = literalArr([literal(inputIndex), literal(inputAst.directiveName)]);
	            // Note: it's important to not quote the key so that we can capture renames by minifiers!
	            return new LiteralMapEntry(inputAst.directiveName, mapValue, false);
	        });
	        var outputDefs = [];
	        var dirMeta = dirAst.directive;
	        Object.keys(dirMeta.outputs).forEach(function (propName) {
	            var eventName = dirMeta.outputs[propName];
	            if (usedEvents.has(eventName)) {
	                // Note: it's important to not quote the key so that we can capture renames by minifiers!
	                outputDefs.push(new LiteralMapEntry(propName, literal(eventName), false));
	            }
	        });
	        var updateDirectiveExpressions = [];
	        if (dirAst.inputs.length || (flags & (262144 /* DoCheck */ | 65536 /* OnInit */)) > 0) {
	            updateDirectiveExpressions =
	                dirAst.inputs.map(function (input, bindingIndex) { return _this._preprocessUpdateExpression({
	                    nodeIndex: nodeIndex,
	                    bindingIndex: bindingIndex,
	                    sourceSpan: input.sourceSpan,
	                    context: COMP_VAR,
	                    value: input.value
	                }); });
	        }
	        var dirContextExpr = importExpr(Identifiers.nodeValue).callFn([VIEW_VAR, literal(nodeIndex)]);
	        var hostBindings = dirAst.hostProperties.map(function (inputAst) { return ({
	            context: dirContextExpr,
	            dirAst: dirAst,
	            inputAst: inputAst,
	        }); });
	        var hostEvents = dirAst.hostEvents.map(function (hostEventAst) { return ({
	            context: dirContextExpr,
	            eventAst: hostEventAst,
	            dirAst: dirAst,
	        }); });
	        // Check index is the same as the node index during compilation
	        // They might only differ at runtime
	        var checkIndex = nodeIndex;
	        this.nodes[nodeIndex] = function () { return ({
	            sourceSpan: dirAst.sourceSpan,
	            nodeFlags: 16384 /* TypeDirective */ | flags,
	            nodeDef: importExpr(Identifiers.directiveDef).callFn([
	                literal(checkIndex),
	                literal(flags),
	                queryMatchExprs.length ? literalArr(queryMatchExprs) : NULL_EXPR,
	                literal(childCount),
	                providerExpr,
	                depsExpr,
	                inputDefs.length ? new LiteralMapExpr(inputDefs) : NULL_EXPR,
	                outputDefs.length ? new LiteralMapExpr(outputDefs) : NULL_EXPR,
	            ]),
	            updateDirectives: updateDirectiveExpressions,
	            directive: dirAst.directive.type,
	        }); };
	        return { hostBindings: hostBindings, hostEvents: hostEvents };
	    };
	    ViewBuilder.prototype._visitProvider = function (providerAst, queryMatches) {
	        this._addProviderNode(this._visitProviderOrDirective(providerAst, queryMatches));
	    };
	    ViewBuilder.prototype._visitComponentFactoryResolverProvider = function (directives) {
	        var componentDirMeta = directives.find(function (dirAst) { return dirAst.directive.isComponent; });
	        if (componentDirMeta && componentDirMeta.directive.entryComponents.length) {
	            var _a = componentFactoryResolverProviderDef(this.reflector, this.outputCtx, 8192 /* PrivateProvider */, componentDirMeta.directive.entryComponents), providerExpr = _a.providerExpr, depsExpr = _a.depsExpr, flags = _a.flags, tokenExpr = _a.tokenExpr;
	            this._addProviderNode({
	                providerExpr: providerExpr,
	                depsExpr: depsExpr,
	                flags: flags,
	                tokenExpr: tokenExpr,
	                queryMatchExprs: [],
	                sourceSpan: componentDirMeta.sourceSpan
	            });
	        }
	    };
	    ViewBuilder.prototype._addProviderNode = function (data) {
	        // providerDef(
	        //   flags: NodeFlags, matchedQueries: [string, QueryValueType][], token:any,
	        //   value: any, deps: ([DepFlags, any] | any)[]): NodeDef;
	        this.nodes.push(function () { return ({
	            sourceSpan: data.sourceSpan,
	            nodeFlags: data.flags,
	            nodeDef: importExpr(Identifiers.providerDef).callFn([
	                literal(data.flags),
	                data.queryMatchExprs.length ? literalArr(data.queryMatchExprs) : NULL_EXPR,
	                data.tokenExpr, data.providerExpr, data.depsExpr
	            ])
	        }); });
	    };
	    ViewBuilder.prototype._visitProviderOrDirective = function (providerAst, queryMatches) {
	        var flags = 0 /* None */;
	        var queryMatchExprs = [];
	        queryMatches.forEach(function (match) {
	            if (tokenReference(match.value) === tokenReference(providerAst.token)) {
	                queryMatchExprs.push(literalArr([literal(match.queryId), literal(4 /* Provider */)]));
	            }
	        });
	        var _a = providerDef(this.outputCtx, providerAst), providerExpr = _a.providerExpr, depsExpr = _a.depsExpr, providerFlags = _a.flags, tokenExpr = _a.tokenExpr;
	        return {
	            flags: flags | providerFlags,
	            queryMatchExprs: queryMatchExprs,
	            providerExpr: providerExpr,
	            depsExpr: depsExpr,
	            tokenExpr: tokenExpr,
	            sourceSpan: providerAst.sourceSpan
	        };
	    };
	    ViewBuilder.prototype.getLocal = function (name) {
	        if (name == EventHandlerVars.event.name) {
	            return EventHandlerVars.event;
	        }
	        var currViewExpr = VIEW_VAR;
	        for (var currBuilder = this; currBuilder; currBuilder = currBuilder.parent,
	            currViewExpr = currViewExpr.prop('parent').cast(DYNAMIC_TYPE)) {
	            // check references
	            var refNodeIndex = currBuilder.refNodeIndices[name];
	            if (refNodeIndex != null) {
	                return importExpr(Identifiers.nodeValue).callFn([currViewExpr, literal(refNodeIndex)]);
	            }
	            // check variables
	            var varAst = currBuilder.variables.find(function (varAst) { return varAst.name === name; });
	            if (varAst) {
	                var varValue = varAst.value || IMPLICIT_TEMPLATE_VAR;
	                return currViewExpr.prop('context').prop(varValue);
	            }
	        }
	        return null;
	    };
	    ViewBuilder.prototype.notifyImplicitReceiverUse = function () {
	        // Not needed in View Engine as View Engine walks through the generated
	        // expressions to figure out if the implicit receiver is used and needs
	        // to be generated as part of the pre-update statements.
	    };
	    ViewBuilder.prototype._createLiteralArrayConverter = function (sourceSpan, argCount) {
	        if (argCount === 0) {
	            var valueExpr_1 = importExpr(Identifiers.EMPTY_ARRAY);
	            return function () { return valueExpr_1; };
	        }
	        var checkIndex = this.nodes.length;
	        this.nodes.push(function () { return ({
	            sourceSpan: sourceSpan,
	            nodeFlags: 32 /* TypePureArray */,
	            nodeDef: importExpr(Identifiers.pureArrayDef).callFn([
	                literal(checkIndex),
	                literal(argCount),
	            ])
	        }); });
	        return function (args) { return callCheckStmt(checkIndex, args); };
	    };
	    ViewBuilder.prototype._createLiteralMapConverter = function (sourceSpan, keys) {
	        if (keys.length === 0) {
	            var valueExpr_2 = importExpr(Identifiers.EMPTY_MAP);
	            return function () { return valueExpr_2; };
	        }
	        var map = literalMap(keys.map(function (e, i) { return (__assign(__assign({}, e), { value: literal(i) })); }));
	        var checkIndex = this.nodes.length;
	        this.nodes.push(function () { return ({
	            sourceSpan: sourceSpan,
	            nodeFlags: 64 /* TypePureObject */,
	            nodeDef: importExpr(Identifiers.pureObjectDef).callFn([
	                literal(checkIndex),
	                map,
	            ])
	        }); });
	        return function (args) { return callCheckStmt(checkIndex, args); };
	    };
	    ViewBuilder.prototype._createPipeConverter = function (expression, name, argCount) {
	        var pipe = this.usedPipes.find(function (pipeSummary) { return pipeSummary.name === name; });
	        if (pipe.pure) {
	            var checkIndex_1 = this.nodes.length;
	            this.nodes.push(function () { return ({
	                sourceSpan: expression.sourceSpan,
	                nodeFlags: 128 /* TypePurePipe */,
	                nodeDef: importExpr(Identifiers.purePipeDef).callFn([
	                    literal(checkIndex_1),
	                    literal(argCount),
	                ])
	            }); });
	            // find underlying pipe in the component view
	            var compViewExpr = VIEW_VAR;
	            var compBuilder = this;
	            while (compBuilder.parent) {
	                compBuilder = compBuilder.parent;
	                compViewExpr = compViewExpr.prop('parent').cast(DYNAMIC_TYPE);
	            }
	            var pipeNodeIndex = compBuilder.purePipeNodeIndices[name];
	            var pipeValueExpr_1 = importExpr(Identifiers.nodeValue).callFn([compViewExpr, literal(pipeNodeIndex)]);
	            return function (args) { return callUnwrapValue(expression.nodeIndex, expression.bindingIndex, callCheckStmt(checkIndex_1, [pipeValueExpr_1].concat(args))); };
	        }
	        else {
	            var nodeIndex = this._createPipe(expression.sourceSpan, pipe);
	            var nodeValueExpr_1 = importExpr(Identifiers.nodeValue).callFn([VIEW_VAR, literal(nodeIndex)]);
	            return function (args) { return callUnwrapValue(expression.nodeIndex, expression.bindingIndex, nodeValueExpr_1.callMethod('transform', args)); };
	        }
	    };
	    ViewBuilder.prototype._createPipe = function (sourceSpan, pipe) {
	        var _this = this;
	        var nodeIndex = this.nodes.length;
	        var flags = 0 /* None */;
	        pipe.type.lifecycleHooks.forEach(function (lifecycleHook) {
	            // for pipes, we only support ngOnDestroy
	            if (lifecycleHook === LifecycleHooks.OnDestroy) {
	                flags |= lifecycleHookToNodeFlag(lifecycleHook);
	            }
	        });
	        var depExprs = pipe.type.diDeps.map(function (diDep) { return depDef(_this.outputCtx, diDep); });
	        // function pipeDef(
	        //   flags: NodeFlags, ctor: any, deps: ([DepFlags, any] | any)[]): NodeDef
	        this.nodes.push(function () { return ({
	            sourceSpan: sourceSpan,
	            nodeFlags: 16 /* TypePipe */,
	            nodeDef: importExpr(Identifiers.pipeDef).callFn([
	                literal(flags), _this.outputCtx.importExpr(pipe.type.reference), literalArr(depExprs)
	            ])
	        }); });
	        return nodeIndex;
	    };
	    /**
	     * For the AST in `UpdateExpression.value`:
	     * - create nodes for pipes, literal arrays and, literal maps,
	     * - update the AST to replace pipes, literal arrays and, literal maps with calls to check fn.
	     *
	     * WARNING: This might create new nodeDefs (for pipes and literal arrays and literal maps)!
	     */
	    ViewBuilder.prototype._preprocessUpdateExpression = function (expression) {
	        var _this = this;
	        return {
	            nodeIndex: expression.nodeIndex,
	            bindingIndex: expression.bindingIndex,
	            sourceSpan: expression.sourceSpan,
	            context: expression.context,
	            value: convertPropertyBindingBuiltins({
	                createLiteralArrayConverter: function (argCount) {
	                    return _this._createLiteralArrayConverter(expression.sourceSpan, argCount);
	                },
	                createLiteralMapConverter: function (keys) {
	                    return _this._createLiteralMapConverter(expression.sourceSpan, keys);
	                },
	                createPipeConverter: function (name, argCount) {
	                    return _this._createPipeConverter(expression, name, argCount);
	                }
	            }, expression.value)
	        };
	    };
	    ViewBuilder.prototype._createNodeExpressions = function () {
	        var self = this;
	        var updateBindingCount = 0;
	        var updateRendererStmts = [];
	        var updateDirectivesStmts = [];
	        var nodeDefExprs = this.nodes.map(function (factory, nodeIndex) {
	            var _a = factory(), nodeDef = _a.nodeDef, nodeFlags = _a.nodeFlags, updateDirectives = _a.updateDirectives, updateRenderer = _a.updateRenderer, sourceSpan = _a.sourceSpan;
	            if (updateRenderer) {
	                updateRendererStmts.push.apply(updateRendererStmts, __spread(createUpdateStatements(nodeIndex, sourceSpan, updateRenderer, false)));
	            }
	            if (updateDirectives) {
	                updateDirectivesStmts.push.apply(updateDirectivesStmts, __spread(createUpdateStatements(nodeIndex, sourceSpan, updateDirectives, (nodeFlags & (262144 /* DoCheck */ | 65536 /* OnInit */)) > 0)));
	            }
	            // We use a comma expression to call the log function before
	            // the nodeDef function, but still use the result of the nodeDef function
	            // as the value.
	            // Note: We only add the logger to elements / text nodes,
	            // so we don't generate too much code.
	            var logWithNodeDef = nodeFlags & 3 /* CatRenderNode */ ?
	                new CommaExpr([LOG_VAR$1.callFn([]).callFn([]), nodeDef]) :
	                nodeDef;
	            return applySourceSpanToExpressionIfNeeded(logWithNodeDef, sourceSpan);
	        });
	        return { updateRendererStmts: updateRendererStmts, updateDirectivesStmts: updateDirectivesStmts, nodeDefExprs: nodeDefExprs };
	        function createUpdateStatements(nodeIndex, sourceSpan, expressions, allowEmptyExprs) {
	            var updateStmts = [];
	            var exprs = expressions.map(function (_a) {
	                var sourceSpan = _a.sourceSpan, context = _a.context, value = _a.value;
	                var bindingId = "" + updateBindingCount++;
	                var nameResolver = context === COMP_VAR ? self : null;
	                var _b = convertPropertyBinding(nameResolver, context, value, bindingId, BindingForm.General), stmts = _b.stmts, currValExpr = _b.currValExpr;
	                updateStmts.push.apply(updateStmts, __spread(stmts.map(function (stmt) { return applySourceSpanToStatementIfNeeded(stmt, sourceSpan); })));
	                return applySourceSpanToExpressionIfNeeded(currValExpr, sourceSpan);
	            });
	            if (expressions.length || allowEmptyExprs) {
	                updateStmts.push(applySourceSpanToStatementIfNeeded(callCheckStmt(nodeIndex, exprs).toStmt(), sourceSpan));
	            }
	            return updateStmts;
	        }
	    };
	    ViewBuilder.prototype._createElementHandleEventFn = function (nodeIndex, handlers) {
	        var _this = this;
	        var handleEventStmts = [];
	        var handleEventBindingCount = 0;
	        handlers.forEach(function (_a) {
	            var context = _a.context, eventAst = _a.eventAst, dirAst = _a.dirAst;
	            var bindingId = "" + handleEventBindingCount++;
	            var nameResolver = context === COMP_VAR ? _this : null;
	            var _b = convertActionBinding(nameResolver, context, eventAst.handler, bindingId), stmts = _b.stmts, allowDefault = _b.allowDefault;
	            var trueStmts = stmts;
	            if (allowDefault) {
	                trueStmts.push(ALLOW_DEFAULT_VAR.set(allowDefault.and(ALLOW_DEFAULT_VAR)).toStmt());
	            }
	            var _c = elementEventNameAndTarget(eventAst, dirAst), eventTarget = _c.target, eventName = _c.name;
	            var fullEventName = elementEventFullName(eventTarget, eventName);
	            handleEventStmts.push(applySourceSpanToStatementIfNeeded(new IfStmt(literal(fullEventName).identical(EVENT_NAME_VAR), trueStmts), eventAst.sourceSpan));
	        });
	        var handleEventFn;
	        if (handleEventStmts.length > 0) {
	            var preStmts = [ALLOW_DEFAULT_VAR.set(literal(true)).toDeclStmt(BOOL_TYPE)];
	            if (!this.component.isHost && findReadVarNames(handleEventStmts).has(COMP_VAR.name)) {
	                preStmts.push(COMP_VAR.set(VIEW_VAR.prop('component')).toDeclStmt(this.compType));
	            }
	            handleEventFn = fn([
	                new FnParam(VIEW_VAR.name, INFERRED_TYPE),
	                new FnParam(EVENT_NAME_VAR.name, INFERRED_TYPE),
	                new FnParam(EventHandlerVars.event.name, INFERRED_TYPE)
	            ], __spread(preStmts, handleEventStmts, [new ReturnStatement(ALLOW_DEFAULT_VAR)]), INFERRED_TYPE);
	        }
	        else {
	            handleEventFn = NULL_EXPR;
	        }
	        return handleEventFn;
	    };
	    ViewBuilder.prototype.visitDirective = function (ast, context) { };
	    ViewBuilder.prototype.visitDirectiveProperty = function (ast, context) { };
	    ViewBuilder.prototype.visitReference = function (ast, context) { };
	    ViewBuilder.prototype.visitVariable = function (ast, context) { };
	    ViewBuilder.prototype.visitEvent = function (ast, context) { };
	    ViewBuilder.prototype.visitElementProperty = function (ast, context) { };
	    ViewBuilder.prototype.visitAttr = function (ast, context) { };
	    return ViewBuilder;
	}());
	function needsAdditionalRootNode(astNodes) {
	    var lastAstNode = astNodes[astNodes.length - 1];
	    if (lastAstNode instanceof EmbeddedTemplateAst) {
	        return lastAstNode.hasViewContainer;
	    }
	    if (lastAstNode instanceof ElementAst) {
	        if (isNgContainer(lastAstNode.name) && lastAstNode.children.length) {
	            return needsAdditionalRootNode(lastAstNode.children);
	        }
	        return lastAstNode.hasViewContainer;
	    }
	    return lastAstNode instanceof NgContentAst;
	}
	function elementBindingDef(inputAst, dirAst) {
	    var inputType = inputAst.type;
	    switch (inputType) {
	        case 1 /* Attribute */:
	            return literalArr([
	                literal(1 /* TypeElementAttribute */), literal(inputAst.name),
	                literal(inputAst.securityContext)
	            ]);
	        case 0 /* Property */:
	            return literalArr([
	                literal(8 /* TypeProperty */), literal(inputAst.name),
	                literal(inputAst.securityContext)
	            ]);
	        case 4 /* Animation */:
	            var bindingType = 8 /* TypeProperty */ |
	                (dirAst && dirAst.directive.isComponent ? 32 /* SyntheticHostProperty */ :
	                    16 /* SyntheticProperty */);
	            return literalArr([
	                literal(bindingType), literal('@' + inputAst.name), literal(inputAst.securityContext)
	            ]);
	        case 2 /* Class */:
	            return literalArr([literal(2 /* TypeElementClass */), literal(inputAst.name), NULL_EXPR]);
	        case 3 /* Style */:
	            return literalArr([
	                literal(4 /* TypeElementStyle */), literal(inputAst.name), literal(inputAst.unit)
	            ]);
	        default:
	            // This default case is not needed by TypeScript compiler, as the switch is exhaustive.
	            // However Closure Compiler does not understand that and reports an error in typed mode.
	            // The `throw new Error` below works around the problem, and the unexpected: never variable
	            // makes sure tsc still checks this code is unreachable.
	            var unexpected = inputType;
	            throw new Error("unexpected " + unexpected);
	    }
	}
	function fixedAttrsDef(elementAst) {
	    var mapResult = Object.create(null);
	    elementAst.attrs.forEach(function (attrAst) {
	        mapResult[attrAst.name] = attrAst.value;
	    });
	    elementAst.directives.forEach(function (dirAst) {
	        Object.keys(dirAst.directive.hostAttributes).forEach(function (name) {
	            var value = dirAst.directive.hostAttributes[name];
	            var prevValue = mapResult[name];
	            mapResult[name] = prevValue != null ? mergeAttributeValue(name, prevValue, value) : value;
	        });
	    });
	    // Note: We need to sort to get a defined output order
	    // for tests and for caching generated artifacts...
	    return literalArr(Object.keys(mapResult).sort().map(function (attrName) { return literalArr([literal(attrName), literal(mapResult[attrName])]); }));
	}
	function mergeAttributeValue(attrName, attrValue1, attrValue2) {
	    if (attrName == CLASS_ATTR$1 || attrName == STYLE_ATTR) {
	        return attrValue1 + " " + attrValue2;
	    }
	    else {
	        return attrValue2;
	    }
	}
	function callCheckStmt(nodeIndex, exprs) {
	    if (exprs.length > 10) {
	        return CHECK_VAR.callFn([VIEW_VAR, literal(nodeIndex), literal(1 /* Dynamic */), literalArr(exprs)]);
	    }
	    else {
	        return CHECK_VAR.callFn(__spread([VIEW_VAR, literal(nodeIndex), literal(0 /* Inline */)], exprs));
	    }
	}
	function callUnwrapValue(nodeIndex, bindingIdx, expr) {
	    return importExpr(Identifiers.unwrapValue).callFn([
	        VIEW_VAR, literal(nodeIndex), literal(bindingIdx), expr
	    ]);
	}
	function elementEventNameAndTarget(eventAst, dirAst) {
	    if (eventAst.isAnimation) {
	        return {
	            name: "@" + eventAst.name + "." + eventAst.phase,
	            target: dirAst && dirAst.directive.isComponent ? 'component' : null
	        };
	    }
	    else {
	        return eventAst;
	    }
	}
	function calcStaticDynamicQueryFlags(query) {
	    var flags = 0 /* None */;
	    // Note: We only make queries static that query for a single item and the user specifically
	    // set the to be static. This is because of backwards compatibility with the old view compiler...
	    if (query.first && query.static) {
	        flags |= 268435456 /* StaticQuery */;
	    }
	    else {
	        flags |= 536870912 /* DynamicQuery */;
	    }
	    return flags;
	}
	function elementEventFullName(target, name) {
	    return target ? target + ":" + name : name;
	}
	// Transform an i18n AST by renaming the placeholder nodes with the given mapper
	var MapPlaceholderNames = /** @class */ (function (_super) {
	    __extends(MapPlaceholderNames, _super);
	    function MapPlaceholderNames() {
	        return _super !== null && _super.apply(this, arguments) || this;
	    }
	    MapPlaceholderNames.prototype.convert = function (nodes, mapper) {
	        var _this = this;
	        return mapper ? nodes.map(function (n) { return n.visit(_this, mapper); }) : nodes;
	    };
	    MapPlaceholderNames.prototype.visitTagPlaceholder = function (ph, mapper) {
	        var _this = this;
	        var startName = mapper.toPublicName(ph.startName);
	        var closeName = ph.closeName ? mapper.toPublicName(ph.closeName) : ph.closeName;
	        var children = ph.children.map(function (n) { return n.visit(_this, mapper); });
	        return new TagPlaceholder(ph.tag, ph.attrs, startName, closeName, children, ph.isVoid, ph.sourceSpan);
	    };
	    MapPlaceholderNames.prototype.visitPlaceholder = function (ph, mapper) {
	        return new Placeholder(ph.value, mapper.toPublicName(ph.name), ph.sourceSpan);
	    };
	    MapPlaceholderNames.prototype.visitIcuPlaceholder = function (ph, mapper) {
	        return new IcuPlaceholder(ph.value, mapper.toPublicName(ph.name), ph.sourceSpan);
	    };
	    return MapPlaceholderNames;
	}(CloneVisitor));
	function unwrapResolvedMetadata(metadata) {
	    if (metadata && metadata.__symbolic === 'resolved') {
	        return metadata.symbol;
	    }
	    return metadata;
	}
	var ToJsonSerializer = /** @class */ (function (_super) {
	    __extends(ToJsonSerializer, _super);
	    function ToJsonSerializer(symbolResolver, summaryResolver, srcFileName) {
	        var _this = _super.call(this) || this;
	        _this.symbolResolver = symbolResolver;
	        _this.summaryResolver = summaryResolver;
	        _this.srcFileName = srcFileName;
	        // Note: This only contains symbols without members.
	        _this.symbols = [];
	        _this.indexBySymbol = new Map();
	        _this.reexportedBy = new Map();
	        // This now contains a `__symbol: number` in the place of
	        // StaticSymbols, but otherwise has the same shape as the original objects.
	        _this.processedSummaryBySymbol = new Map();
	        _this.processedSummaries = [];
	        _this.unprocessedSymbolSummariesBySymbol = new Map();
	        _this.moduleName = symbolResolver.getKnownModuleName(srcFileName);
	        return _this;
	    }
	    ToJsonSerializer.prototype.addSummary = function (summary) {
	        var _this = this;
	        var unprocessedSummary = this.unprocessedSymbolSummariesBySymbol.get(summary.symbol);
	        var processedSummary = this.processedSummaryBySymbol.get(summary.symbol);
	        if (!unprocessedSummary) {
	            unprocessedSummary = { symbol: summary.symbol, metadata: undefined };
	            this.unprocessedSymbolSummariesBySymbol.set(summary.symbol, unprocessedSummary);
	            processedSummary = { symbol: this.processValue(summary.symbol, 0 /* None */) };
	            this.processedSummaries.push(processedSummary);
	            this.processedSummaryBySymbol.set(summary.symbol, processedSummary);
	        }
	        if (!unprocessedSummary.metadata && summary.metadata) {
	            var metadata_1 = summary.metadata || {};
	            if (metadata_1.__symbolic === 'class') {
	                // For classes, we keep everything except their class decorators.
	                // We need to keep e.g. the ctor args, method names, method decorators
	                // so that the class can be extended in another compilation unit.
	                // We don't keep the class decorators as
	                // 1) they refer to data
	                //   that should not cause a rebuild of downstream compilation units
	                //   (e.g. inline templates of @Component, or @NgModule.declarations)
	                // 2) their data is already captured in TypeSummaries, e.g. DirectiveSummary.
	                var clone_1 = {};
	                Object.keys(metadata_1).forEach(function (propName) {
	                    if (propName !== 'decorators') {
	                        clone_1[propName] = metadata_1[propName];
	                    }
	                });
	                metadata_1 = clone_1;
	            }
	            else if (isCall(metadata_1)) {
	                if (!isFunctionCall(metadata_1) && !isMethodCallOnVariable(metadata_1)) {
	                    // Don't store complex calls as we won't be able to simplify them anyways later on.
	                    metadata_1 = {
	                        __symbolic: 'error',
	                        message: 'Complex function calls are not supported.',
	                    };
	                }
	            }
	            // Note: We need to keep storing ctor calls for e.g.
	            // `export const x = new InjectionToken(...)`
	            unprocessedSummary.metadata = metadata_1;
	            processedSummary.metadata = this.processValue(metadata_1, 1 /* ResolveValue */);
	            if (metadata_1 instanceof StaticSymbol &&
	                this.summaryResolver.isLibraryFile(metadata_1.filePath)) {
	                var declarationSymbol = this.symbols[this.indexBySymbol.get(metadata_1)];
	                if (!isLoweredSymbol(declarationSymbol.name)) {
	                    // Note: symbols that were introduced during codegen in the user file can have a reexport
	                    // if a user used `export *`. However, we can't rely on this as tsickle will change
	                    // `export *` into named exports, using only the information from the typechecker.
	                    // As we introduce the new symbols after typecheck, Tsickle does not know about them,
	                    // and omits them when expanding `export *`.
	                    // So we have to keep reexporting these symbols manually via .ngfactory files.
	                    this.reexportedBy.set(declarationSymbol, summary.symbol);
	                }
	            }
	        }
	        if (!unprocessedSummary.type && summary.type) {
	            unprocessedSummary.type = summary.type;
	            // Note: We don't add the summaries of all referenced symbols as for the ResolvedSymbols,
	            // as the type summaries already contain the transitive data that they require
	            // (in a minimal way).
	            processedSummary.type = this.processValue(summary.type, 0 /* None */);
	            // except for reexported directives / pipes, so we need to store
	            // their summaries explicitly.
	            if (summary.type.summaryKind === CompileSummaryKind.NgModule) {
	                var ngModuleSummary = summary.type;
	                ngModuleSummary.exportedDirectives.concat(ngModuleSummary.exportedPipes).forEach(function (id) {
	                    var symbol = id.reference;
	                    if (_this.summaryResolver.isLibraryFile(symbol.filePath) &&
	                        !_this.unprocessedSymbolSummariesBySymbol.has(symbol)) {
	                        var summary_1 = _this.summaryResolver.resolveSummary(symbol);
	                        if (summary_1) {
	                            _this.addSummary(summary_1);
	                        }
	                    }
	                });
	            }
	        }
	    };
	    /**
	     * @param createExternalSymbolReexports Whether external static symbols should be re-exported.
	     * This can be enabled if external symbols should be re-exported by the current module in
	     * order to avoid dynamically generated module dependencies which can break strict dependency
	     * enforcements (as in Google3). Read more here: https://github.com/angular/angular/issues/25644
	     */
	    ToJsonSerializer.prototype.serialize = function (createExternalSymbolReexports) {
	        var _this = this;
	        var exportAs = [];
	        var json = JSON.stringify({
	            moduleName: this.moduleName,
	            summaries: this.processedSummaries,
	            symbols: this.symbols.map(function (symbol, index) {
	                symbol.assertNoMembers();
	                var importAs = undefined;
	                if (_this.summaryResolver.isLibraryFile(symbol.filePath)) {
	                    var reexportSymbol = _this.reexportedBy.get(symbol);
	                    if (reexportSymbol) {
	                        // In case the given external static symbol is already manually exported by the
	                        // user, we just proxy the external static symbol reference to the manual export.
	                        // This ensures that the AOT compiler imports the external symbol through the
	                        // user export and does not introduce another dependency which is not needed.
	                        importAs = _this.indexBySymbol.get(reexportSymbol);
	                    }
	                    else if (createExternalSymbolReexports) {
	                        // In this case, the given external static symbol is *not* manually exported by
	                        // the user, and we manually create a re-export in the factory file so that we
	                        // don't introduce another module dependency. This is useful when running within
	                        // Bazel so that the AOT compiler does not introduce any module dependencies
	                        // which can break the strict dependency enforcement. (e.g. as in Google3)
	                        // Read more about this here: https://github.com/angular/angular/issues/25644
	                        var summary = _this.unprocessedSymbolSummariesBySymbol.get(symbol);
	                        if (!summary || !summary.metadata || summary.metadata.__symbolic !== 'interface') {
	                            importAs = symbol.name + "_" + index;
	                            exportAs.push({ symbol: symbol, exportAs: importAs });
	                        }
	                    }
	                }
	                return {
	                    __symbol: index,
	                    name: symbol.name,
	                    filePath: _this.summaryResolver.toSummaryFileName(symbol.filePath, _this.srcFileName),
	                    importAs: importAs
	                };
	            })
	        });
	        return { json: json, exportAs: exportAs };
	    };
	    ToJsonSerializer.prototype.processValue = function (value, flags) {
	        return visitValue(value, this, flags);
	    };
	    ToJsonSerializer.prototype.visitOther = function (value, context) {
	        if (value instanceof StaticSymbol) {
	            var baseSymbol = this.symbolResolver.getStaticSymbol(value.filePath, value.name);
	            var index = this.visitStaticSymbol(baseSymbol, context);
	            return { __symbol: index, members: value.members };
	        }
	    };
	    /**
	     * Strip line and character numbers from ngsummaries.
	     * Emitting them causes white spaces changes to retrigger upstream
	     * recompilations in bazel.
	     * TODO: find out a way to have line and character numbers in errors without
	     * excessive recompilation in bazel.
	     */
	    ToJsonSerializer.prototype.visitStringMap = function (map, context) {
	        if (map['__symbolic'] === 'resolved') {
	            return visitValue(map['symbol'], this, context);
	        }
	        if (map['__symbolic'] === 'error') {
	            delete map['line'];
	            delete map['character'];
	        }
	        return _super.prototype.visitStringMap.call(this, map, context);
	    };
	    /**
	     * Returns null if the options.resolveValue is true, and the summary for the symbol
	     * resolved to a type or could not be resolved.
	     */
	    ToJsonSerializer.prototype.visitStaticSymbol = function (baseSymbol, flags) {
	        var index = this.indexBySymbol.get(baseSymbol);
	        var summary = null;
	        if (flags & 1 /* ResolveValue */ &&
	            this.summaryResolver.isLibraryFile(baseSymbol.filePath)) {
	            if (this.unprocessedSymbolSummariesBySymbol.has(baseSymbol)) {
	                // the summary for this symbol was already added
	                // -> nothing to do.
	                return index;
	            }
	            summary = this.loadSummary(baseSymbol);
	            if (summary && summary.metadata instanceof StaticSymbol) {
	                // The summary is a reexport
	                index = this.visitStaticSymbol(summary.metadata, flags);
	                // reset the summary as it is just a reexport, so we don't want to store it.
	                summary = null;
	            }
	        }
	        else if (index != null) {
	            // Note: == on purpose to compare with undefined!
	            // No summary and the symbol is already added -> nothing to do.
	            return index;
	        }
	        // Note: == on purpose to compare with undefined!
	        if (index == null) {
	            index = this.symbols.length;
	            this.symbols.push(baseSymbol);
	        }
	        this.indexBySymbol.set(baseSymbol, index);
	        if (summary) {
	            this.addSummary(summary);
	        }
	        return index;
	    };
	    ToJsonSerializer.prototype.loadSummary = function (symbol) {
	        var summary = this.summaryResolver.resolveSummary(symbol);
	        if (!summary) {
	            // some symbols might originate from a plain typescript library
	            // that just exported .d.ts and .metadata.json files, i.e. where no summary
	            // files were created.
	            var resolvedSymbol = this.symbolResolver.resolveSymbol(symbol);
	            if (resolvedSymbol) {
	                summary = { symbol: resolvedSymbol.symbol, metadata: resolvedSymbol.metadata };
	            }
	        }
	        return summary;
	    };
	    return ToJsonSerializer;
	}(ValueTransformer));
	var FromJsonDeserializer = /** @class */ (function (_super) {
	    __extends(FromJsonDeserializer, _super);
	    function FromJsonDeserializer(symbolCache, summaryResolver) {
	        var _this = _super.call(this) || this;
	        _this.symbolCache = symbolCache;
	        _this.summaryResolver = summaryResolver;
	        return _this;
	    }
	    FromJsonDeserializer.prototype.deserialize = function (libraryFileName, json) {
	        var _this = this;
	        var data = JSON.parse(json);
	        var allImportAs = [];
	        this.symbols = data.symbols.map(function (serializedSymbol) { return _this.symbolCache.get(_this.summaryResolver.fromSummaryFileName(serializedSymbol.filePath, libraryFileName), serializedSymbol.name); });
	        data.symbols.forEach(function (serializedSymbol, index) {
	            var symbol = _this.symbols[index];
	            var importAs = serializedSymbol.importAs;
	            if (typeof importAs === 'number') {
	                allImportAs.push({ symbol: symbol, importAs: _this.symbols[importAs] });
	            }
	            else if (typeof importAs === 'string') {
	                allImportAs.push({ symbol: symbol, importAs: _this.symbolCache.get(ngfactoryFilePath(libraryFileName), importAs) });
	            }
	        });
	        var summaries = visitValue(data.summaries, this, null);
	        return { moduleName: data.moduleName, summaries: summaries, importAs: allImportAs };
	    };
	    FromJsonDeserializer.prototype.visitStringMap = function (map, context) {
	        if ('__symbol' in map) {
	            var baseSymbol = this.symbols[map['__symbol']];
	            var members = map['members'];
	            return members.length ? this.symbolCache.get(baseSymbol.filePath, baseSymbol.name, members) :
	                baseSymbol;
	        }
	        else {
	            return _super.prototype.visitStringMap.call(this, map, context);
	        }
	    };
	    return FromJsonDeserializer;
	}(ValueTransformer));
	function isCall(metadata) {
	    return metadata && metadata.__symbolic === 'call';
	}
	function isFunctionCall(metadata) {
	    return isCall(metadata) && unwrapResolvedMetadata(metadata.expression) instanceof StaticSymbol;
	}
	function isMethodCallOnVariable(metadata) {
	    return isCall(metadata) && metadata.expression && metadata.expression.__symbolic === 'select' &&
	        unwrapResolvedMetadata(metadata.expression.expression) instanceof StaticSymbol;
	}
	var BindingScope$1 = /** @class */ (function () {
	    function BindingScope() {
	    }
	    BindingScope.build = function () {
	        var current = new Map();
	        return {
	            define: function (name, value) {
	                current.set(name, value);
	                return this;
	            },
	            done: function () {
	                return current.size > 0 ? new PopulatedScope(current) : BindingScope.empty;
	            }
	        };
	    };
	    BindingScope.missing = {};
	    BindingScope.empty = { resolve: function (name) { return BindingScope.missing; } };
	    return BindingScope;
	}());
	var PopulatedScope = /** @class */ (function (_super) {
	    __extends(PopulatedScope, _super);
	    function PopulatedScope(bindings) {
	        var _this = _super.call(this) || this;
	        _this.bindings = bindings;
	        return _this;
	    }
	    PopulatedScope.prototype.resolve = function (name) {
	        return this.bindings.has(name) ? this.bindings.get(name) : BindingScope$1.missing;
	    };
	    return PopulatedScope;
	}(BindingScope$1));

	var SummaryResolver = /** @class */ (function () {
	    function SummaryResolver() {
	    }
	    return SummaryResolver;
	}());
	var JitSummaryResolver = /** @class */ (function () {
	    function JitSummaryResolver() {
	        this._summaries = new Map();
	    }
	    JitSummaryResolver.prototype.isLibraryFile = function () {
	        return false;
	    };
	    JitSummaryResolver.prototype.toSummaryFileName = function (fileName) {
	        return fileName;
	    };
	    JitSummaryResolver.prototype.fromSummaryFileName = function (fileName) {
	        return fileName;
	    };
	    JitSummaryResolver.prototype.resolveSummary = function (reference) {
	        return this._summaries.get(reference) || null;
	    };
	    JitSummaryResolver.prototype.getSymbolsOf = function () {
	        return [];
	    };
	    JitSummaryResolver.prototype.getImportAs = function (reference) {
	        return reference;
	    };
	    JitSummaryResolver.prototype.getKnownModuleName = function (fileName) {
	        return null;
	    };
	    JitSummaryResolver.prototype.addSummary = function (summary) {
	        this._summaries.set(summary.symbol, summary);
	    };
	    return JitSummaryResolver;
	}());

	function interpretStatements(statements, reflector) {
	    var ctx = new _ExecutionContext(null, null, null, new Map());
	    var visitor = new StatementInterpreter(reflector);
	    visitor.visitAllStatements(statements, ctx);
	    var result = {};
	    ctx.exports.forEach(function (exportName) {
	        result[exportName] = ctx.vars.get(exportName);
	    });
	    return result;
	}
	function _executeFunctionStatements(varNames, varValues, statements, ctx, visitor) {
	    var childCtx = ctx.createChildWihtLocalVars();
	    for (var i = 0; i < varNames.length; i++) {
	        childCtx.vars.set(varNames[i], varValues[i]);
	    }
	    var result = visitor.visitAllStatements(statements, childCtx);
	    return result ? result.value : null;
	}
	var _ExecutionContext = /** @class */ (function () {
	    function _ExecutionContext(parent, instance, className, vars) {
	        this.parent = parent;
	        this.instance = instance;
	        this.className = className;
	        this.vars = vars;
	        this.exports = [];
	    }
	    _ExecutionContext.prototype.createChildWihtLocalVars = function () {
	        return new _ExecutionContext(this, this.instance, this.className, new Map());
	    };
	    return _ExecutionContext;
	}());
	var ReturnValue = /** @class */ (function () {
	    function ReturnValue(value) {
	        this.value = value;
	    }
	    return ReturnValue;
	}());
	function createDynamicClass(_classStmt, _ctx, _visitor) {
	    var propertyDescriptors = {};
	    _classStmt.getters.forEach(function (getter) {
	        // Note: use `function` instead of arrow function to capture `this`
	        propertyDescriptors[getter.name] = {
	            configurable: false,
	            get: function () {
	                var instanceCtx = new _ExecutionContext(_ctx, this, _classStmt.name, _ctx.vars);
	                return _executeFunctionStatements([], [], getter.body, instanceCtx, _visitor);
	            }
	        };
	    });
	    _classStmt.methods.forEach(function (method) {
	        var paramNames = method.params.map(function (param) { return param.name; });
	        // Note: use `function` instead of arrow function to capture `this`
	        propertyDescriptors[method.name] = {
	            writable: false,
	            configurable: false,
	            value: function () {
	                var args = [];
	                for (var _i = 0; _i < arguments.length; _i++) {
	                    args[_i] = arguments[_i];
	                }
	                var instanceCtx = new _ExecutionContext(_ctx, this, _classStmt.name, _ctx.vars);
	                return _executeFunctionStatements(paramNames, args, method.body, instanceCtx, _visitor);
	            }
	        };
	    });
	    var ctorParamNames = _classStmt.constructorMethod.params.map(function (param) { return param.name; });
	    // Note: use `function` instead of arrow function to capture `this`
	    var ctor = function () {
	        var _this = this;
	        var args = [];
	        for (var _i = 0; _i < arguments.length; _i++) {
	            args[_i] = arguments[_i];
	        }
	        var instanceCtx = new _ExecutionContext(_ctx, this, _classStmt.name, _ctx.vars);
	        _classStmt.fields.forEach(function (field) {
	            _this[field.name] = undefined;
	        });
	        _executeFunctionStatements(ctorParamNames, args, _classStmt.constructorMethod.body, instanceCtx, _visitor);
	    };
	    var superClass = _classStmt.parent ? _classStmt.parent.visitExpression(_visitor, _ctx) : Object;
	    ctor.prototype = Object.create(superClass.prototype, propertyDescriptors);
	    return ctor;
	}
	var StatementInterpreter = /** @class */ (function () {
	    function StatementInterpreter(reflector) {
	        this.reflector = reflector;
	    }
	    StatementInterpreter.prototype.debugAst = function (ast) {
	        return debugOutputAstAsTypeScript(ast);
	    };
	    StatementInterpreter.prototype.visitDeclareVarStmt = function (stmt, ctx) {
	        var initialValue = stmt.value ? stmt.value.visitExpression(this, ctx) : undefined;
	        ctx.vars.set(stmt.name, initialValue);
	        if (stmt.hasModifier(StmtModifier.Exported)) {
	            ctx.exports.push(stmt.name);
	        }
	        return null;
	    };
	    StatementInterpreter.prototype.visitWriteVarExpr = function (expr, ctx) {
	        var value = expr.value.visitExpression(this, ctx);
	        var currCtx = ctx;
	        while (currCtx != null) {
	            if (currCtx.vars.has(expr.name)) {
	                currCtx.vars.set(expr.name, value);
	                return value;
	            }
	            currCtx = currCtx.parent;
	        }
	        throw new Error("Not declared variable " + expr.name);
	    };
	    StatementInterpreter.prototype.visitWrappedNodeExpr = function (ast, ctx) {
	        throw new Error('Cannot interpret a WrappedNodeExpr.');
	    };
	    StatementInterpreter.prototype.visitTypeofExpr = function (ast, ctx) {
	        throw new Error('Cannot interpret a TypeofExpr');
	    };
	    StatementInterpreter.prototype.visitReadVarExpr = function (ast, ctx) {
	        var varName = ast.name;
	        if (ast.builtin != null) {
	            switch (ast.builtin) {
	                case BuiltinVar.Super:
	                    return Object.getPrototypeOf(ctx.instance);
	                case BuiltinVar.This:
	                    return ctx.instance;
	                case BuiltinVar.CatchError:
	                    varName = CATCH_ERROR_VAR$2;
	                    break;
	                case BuiltinVar.CatchStack:
	                    varName = CATCH_STACK_VAR$2;
	                    break;
	                default:
	                    throw new Error("Unknown builtin variable " + ast.builtin);
	            }
	        }
	        var currCtx = ctx;
	        while (currCtx != null) {
	            if (currCtx.vars.has(varName)) {
	                return currCtx.vars.get(varName);
	            }
	            currCtx = currCtx.parent;
	        }
	        throw new Error("Not declared variable " + varName);
	    };
	    StatementInterpreter.prototype.visitWriteKeyExpr = function (expr, ctx) {
	        var receiver = expr.receiver.visitExpression(this, ctx);
	        var index = expr.index.visitExpression(this, ctx);
	        var value = expr.value.visitExpression(this, ctx);
	        receiver[index] = value;
	        return value;
	    };
	    StatementInterpreter.prototype.visitWritePropExpr = function (expr, ctx) {
	        var receiver = expr.receiver.visitExpression(this, ctx);
	        var value = expr.value.visitExpression(this, ctx);
	        receiver[expr.name] = value;
	        return value;
	    };
	    StatementInterpreter.prototype.visitInvokeMethodExpr = function (expr, ctx) {
	        var receiver = expr.receiver.visitExpression(this, ctx);
	        var args = this.visitAllExpressions(expr.args, ctx);
	        var result;
	        if (expr.builtin != null) {
	            switch (expr.builtin) {
	                case BuiltinMethod.ConcatArray:
	                    result = receiver.concat.apply(receiver, __spread(args));
	                    break;
	                case BuiltinMethod.SubscribeObservable:
	                    result = receiver.subscribe({ next: args[0] });
	                    break;
	                case BuiltinMethod.Bind:
	                    result = receiver.bind.apply(receiver, __spread(args));
	                    break;
	                default:
	                    throw new Error("Unknown builtin method " + expr.builtin);
	            }
	        }
	        else {
	            result = receiver[expr.name].apply(receiver, args);
	        }
	        return result;
	    };
	    StatementInterpreter.prototype.visitInvokeFunctionExpr = function (stmt, ctx) {
	        var args = this.visitAllExpressions(stmt.args, ctx);
	        var fnExpr = stmt.fn;
	        if (fnExpr instanceof ReadVarExpr && fnExpr.builtin === BuiltinVar.Super) {
	            ctx.instance.constructor.prototype.constructor.apply(ctx.instance, args);
	            return null;
	        }
	        else {
	            var fn = stmt.fn.visitExpression(this, ctx);
	            return fn.apply(null, args);
	        }
	    };
	    StatementInterpreter.prototype.visitReturnStmt = function (stmt, ctx) {
	        return new ReturnValue(stmt.value.visitExpression(this, ctx));
	    };
	    StatementInterpreter.prototype.visitDeclareClassStmt = function (stmt, ctx) {
	        var clazz = createDynamicClass(stmt, ctx, this);
	        ctx.vars.set(stmt.name, clazz);
	        if (stmt.hasModifier(StmtModifier.Exported)) {
	            ctx.exports.push(stmt.name);
	        }
	        return null;
	    };
	    StatementInterpreter.prototype.visitExpressionStmt = function (stmt, ctx) {
	        return stmt.expr.visitExpression(this, ctx);
	    };
	    StatementInterpreter.prototype.visitIfStmt = function (stmt, ctx) {
	        var condition = stmt.condition.visitExpression(this, ctx);
	        if (condition) {
	            return this.visitAllStatements(stmt.trueCase, ctx);
	        }
	        else if (stmt.falseCase != null) {
	            return this.visitAllStatements(stmt.falseCase, ctx);
	        }
	        return null;
	    };
	    StatementInterpreter.prototype.visitTryCatchStmt = function (stmt, ctx) {
	        try {
	            return this.visitAllStatements(stmt.bodyStmts, ctx);
	        }
	        catch (e) {
	            var childCtx = ctx.createChildWihtLocalVars();
	            childCtx.vars.set(CATCH_ERROR_VAR$2, e);
	            childCtx.vars.set(CATCH_STACK_VAR$2, e.stack);
	            return this.visitAllStatements(stmt.catchStmts, childCtx);
	        }
	    };
	    StatementInterpreter.prototype.visitThrowStmt = function (stmt, ctx) {
	        throw stmt.error.visitExpression(this, ctx);
	    };
	    StatementInterpreter.prototype.visitCommentStmt = function (stmt, context) {
	        return null;
	    };
	    StatementInterpreter.prototype.visitJSDocCommentStmt = function (stmt, context) {
	        return null;
	    };
	    StatementInterpreter.prototype.visitInstantiateExpr = function (ast, ctx) {
	        var args = this.visitAllExpressions(ast.args, ctx);
	        var clazz = ast.classExpr.visitExpression(this, ctx);
	        return new (clazz.bind.apply(clazz, __spread([void 0], args)))();
	    };
	    StatementInterpreter.prototype.visitLiteralExpr = function (ast, ctx) {
	        return ast.value;
	    };
	    StatementInterpreter.prototype.visitLocalizedString = function (ast, context) {
	        return null;
	    };
	    StatementInterpreter.prototype.visitExternalExpr = function (ast, ctx) {
	        return this.reflector.resolveExternalReference(ast.value);
	    };
	    StatementInterpreter.prototype.visitConditionalExpr = function (ast, ctx) {
	        if (ast.condition.visitExpression(this, ctx)) {
	            return ast.trueCase.visitExpression(this, ctx);
	        }
	        else if (ast.falseCase != null) {
	            return ast.falseCase.visitExpression(this, ctx);
	        }
	        return null;
	    };
	    StatementInterpreter.prototype.visitNotExpr = function (ast, ctx) {
	        return !ast.condition.visitExpression(this, ctx);
	    };
	    StatementInterpreter.prototype.visitAssertNotNullExpr = function (ast, ctx) {
	        return ast.condition.visitExpression(this, ctx);
	    };
	    StatementInterpreter.prototype.visitCastExpr = function (ast, ctx) {
	        return ast.value.visitExpression(this, ctx);
	    };
	    StatementInterpreter.prototype.visitFunctionExpr = function (ast, ctx) {
	        var paramNames = ast.params.map(function (param) { return param.name; });
	        return _declareFn(paramNames, ast.statements, ctx, this);
	    };
	    StatementInterpreter.prototype.visitDeclareFunctionStmt = function (stmt, ctx) {
	        var paramNames = stmt.params.map(function (param) { return param.name; });
	        ctx.vars.set(stmt.name, _declareFn(paramNames, stmt.statements, ctx, this));
	        if (stmt.hasModifier(StmtModifier.Exported)) {
	            ctx.exports.push(stmt.name);
	        }
	        return null;
	    };
	    StatementInterpreter.prototype.visitBinaryOperatorExpr = function (ast, ctx) {
	        var _this = this;
	        var lhs = function () { return ast.lhs.visitExpression(_this, ctx); };
	        var rhs = function () { return ast.rhs.visitExpression(_this, ctx); };
	        switch (ast.operator) {
	            case BinaryOperator.Equals:
	                return lhs() == rhs();
	            case BinaryOperator.Identical:
	                return lhs() === rhs();
	            case BinaryOperator.NotEquals:
	                return lhs() != rhs();
	            case BinaryOperator.NotIdentical:
	                return lhs() !== rhs();
	            case BinaryOperator.And:
	                return lhs() && rhs();
	            case BinaryOperator.Or:
	                return lhs() || rhs();
	            case BinaryOperator.Plus:
	                return lhs() + rhs();
	            case BinaryOperator.Minus:
	                return lhs() - rhs();
	            case BinaryOperator.Divide:
	                return lhs() / rhs();
	            case BinaryOperator.Multiply:
	                return lhs() * rhs();
	            case BinaryOperator.Modulo:
	                return lhs() % rhs();
	            case BinaryOperator.Lower:
	                return lhs() < rhs();
	            case BinaryOperator.LowerEquals:
	                return lhs() <= rhs();
	            case BinaryOperator.Bigger:
	                return lhs() > rhs();
	            case BinaryOperator.BiggerEquals:
	                return lhs() >= rhs();
	            default:
	                throw new Error("Unknown operator " + ast.operator);
	        }
	    };
	    StatementInterpreter.prototype.visitReadPropExpr = function (ast, ctx) {
	        var result;
	        var receiver = ast.receiver.visitExpression(this, ctx);
	        result = receiver[ast.name];
	        return result;
	    };
	    StatementInterpreter.prototype.visitReadKeyExpr = function (ast, ctx) {
	        var receiver = ast.receiver.visitExpression(this, ctx);
	        var prop = ast.index.visitExpression(this, ctx);
	        return receiver[prop];
	    };
	    StatementInterpreter.prototype.visitLiteralArrayExpr = function (ast, ctx) {
	        return this.visitAllExpressions(ast.entries, ctx);
	    };
	    StatementInterpreter.prototype.visitLiteralMapExpr = function (ast, ctx) {
	        var _this = this;
	        var result = {};
	        ast.entries.forEach(function (entry) { return result[entry.key] = entry.value.visitExpression(_this, ctx); });
	        return result;
	    };
	    StatementInterpreter.prototype.visitCommaExpr = function (ast, context) {
	        var values = this.visitAllExpressions(ast.parts, context);
	        return values[values.length - 1];
	    };
	    StatementInterpreter.prototype.visitAllExpressions = function (expressions, ctx) {
	        var _this = this;
	        return expressions.map(function (expr) { return expr.visitExpression(_this, ctx); });
	    };
	    StatementInterpreter.prototype.visitAllStatements = function (statements, ctx) {
	        for (var i = 0; i < statements.length; i++) {
	            var stmt = statements[i];
	            var val = stmt.visitStatement(this, ctx);
	            if (val instanceof ReturnValue) {
	                return val;
	            }
	        }
	        return null;
	    };
	    return StatementInterpreter;
	}());
	function _declareFn(varNames, statements, ctx, visitor) {
	    return function () {
	        var args = [];
	        for (var _i = 0; _i < arguments.length; _i++) {
	            args[_i] = arguments[_i];
	        }
	        return _executeFunctionStatements(varNames, args, statements, ctx, visitor);
	    };
	}
	var CATCH_ERROR_VAR$2 = 'error';
	var CATCH_STACK_VAR$2 = 'stack';

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * An internal module of the Angular compiler that begins with component types,
	 * extracts templates, and eventually produces a compiled version of the component
	 * ready for linking into an application.
	 *
	 * @security  When compiling templates at runtime, you must ensure that the entire template comes
	 * from a trusted source. Attacker-controlled data introduced by a template could expose your
	 * application to XSS risks.  For more detail, see the [Security Guide](http://g.co/ng/security).
	 */
	var JitCompiler = /** @class */ (function () {
	    function JitCompiler(_metadataResolver, _templateParser, _styleCompiler, _viewCompiler, _ngModuleCompiler, _summaryResolver, _reflector, _jitEvaluator, _compilerConfig, _console, getExtraNgModuleProviders) {
	        this._metadataResolver = _metadataResolver;
	        this._templateParser = _templateParser;
	        this._styleCompiler = _styleCompiler;
	        this._viewCompiler = _viewCompiler;
	        this._ngModuleCompiler = _ngModuleCompiler;
	        this._summaryResolver = _summaryResolver;
	        this._reflector = _reflector;
	        this._jitEvaluator = _jitEvaluator;
	        this._compilerConfig = _compilerConfig;
	        this._console = _console;
	        this.getExtraNgModuleProviders = getExtraNgModuleProviders;
	        this._compiledTemplateCache = new Map();
	        this._compiledHostTemplateCache = new Map();
	        this._compiledDirectiveWrapperCache = new Map();
	        this._compiledNgModuleCache = new Map();
	        this._sharedStylesheetCount = 0;
	        this._addedAotSummaries = new Set();
	    }
	    JitCompiler.prototype.compileModuleSync = function (moduleType) {
	        return SyncAsync.assertSync(this._compileModuleAndComponents(moduleType, true));
	    };
	    JitCompiler.prototype.compileModuleAsync = function (moduleType) {
	        return Promise.resolve(this._compileModuleAndComponents(moduleType, false));
	    };
	    JitCompiler.prototype.compileModuleAndAllComponentsSync = function (moduleType) {
	        return SyncAsync.assertSync(this._compileModuleAndAllComponents(moduleType, true));
	    };
	    JitCompiler.prototype.compileModuleAndAllComponentsAsync = function (moduleType) {
	        return Promise.resolve(this._compileModuleAndAllComponents(moduleType, false));
	    };
	    JitCompiler.prototype.getComponentFactory = function (component) {
	        var summary = this._metadataResolver.getDirectiveSummary(component);
	        return summary.componentFactory;
	    };
	    JitCompiler.prototype.loadAotSummaries = function (summaries) {
	        this.clearCache();
	        this._addAotSummaries(summaries);
	    };
	    JitCompiler.prototype._addAotSummaries = function (fn) {
	        if (this._addedAotSummaries.has(fn)) {
	            return;
	        }
	        this._addedAotSummaries.add(fn);
	        var summaries = fn();
	        for (var i = 0; i < summaries.length; i++) {
	            var entry = summaries[i];
	            if (typeof entry === 'function') {
	                this._addAotSummaries(entry);
	            }
	            else {
	                var summary = entry;
	                this._summaryResolver.addSummary({ symbol: summary.type.reference, metadata: null, type: summary });
	            }
	        }
	    };
	    JitCompiler.prototype.hasAotSummary = function (ref) {
	        return !!this._summaryResolver.resolveSummary(ref);
	    };
	    JitCompiler.prototype._filterJitIdentifiers = function (ids) {
	        var _this = this;
	        return ids.map(function (mod) { return mod.reference; }).filter(function (ref) { return !_this.hasAotSummary(ref); });
	    };
	    JitCompiler.prototype._compileModuleAndComponents = function (moduleType, isSync) {
	        var _this = this;
	        return SyncAsync.then(this._loadModules(moduleType, isSync), function () {
	            _this._compileComponents(moduleType, null);
	            return _this._compileModule(moduleType);
	        });
	    };
	    JitCompiler.prototype._compileModuleAndAllComponents = function (moduleType, isSync) {
	        var _this = this;
	        return SyncAsync.then(this._loadModules(moduleType, isSync), function () {
	            var componentFactories = [];
	            _this._compileComponents(moduleType, componentFactories);
	            return {
	                ngModuleFactory: _this._compileModule(moduleType),
	                componentFactories: componentFactories
	            };
	        });
	    };
	    JitCompiler.prototype._loadModules = function (mainModule, isSync) {
	        var _this = this;
	        var loading = [];
	        var mainNgModule = this._metadataResolver.getNgModuleMetadata(mainModule);
	        // Note: for runtime compilation, we want to transitively compile all modules,
	        // so we also need to load the declared directives / pipes for all nested modules.
	        this._filterJitIdentifiers(mainNgModule.transitiveModule.modules).forEach(function (nestedNgModule) {
	            // getNgModuleMetadata only returns null if the value passed in is not an NgModule
	            var moduleMeta = _this._metadataResolver.getNgModuleMetadata(nestedNgModule);
	            _this._filterJitIdentifiers(moduleMeta.declaredDirectives).forEach(function (ref) {
	                var promise = _this._metadataResolver.loadDirectiveMetadata(moduleMeta.type.reference, ref, isSync);
	                if (promise) {
	                    loading.push(promise);
	                }
	            });
	            _this._filterJitIdentifiers(moduleMeta.declaredPipes)
	                .forEach(function (ref) { return _this._metadataResolver.getOrLoadPipeMetadata(ref); });
	        });
	        return SyncAsync.all(loading);
	    };
	    JitCompiler.prototype._compileModule = function (moduleType) {
	        var ngModuleFactory = this._compiledNgModuleCache.get(moduleType);
	        if (!ngModuleFactory) {
	            var moduleMeta = this._metadataResolver.getNgModuleMetadata(moduleType);
	            // Always provide a bound Compiler
	            var extraProviders = this.getExtraNgModuleProviders(moduleMeta.type.reference);
	            var outputCtx = createOutputContext();
	            var compileResult = this._ngModuleCompiler.compile(outputCtx, moduleMeta, extraProviders);
	            ngModuleFactory = this._interpretOrJit(ngModuleJitUrl(moduleMeta), outputCtx.statements)[compileResult.ngModuleFactoryVar];
	            this._compiledNgModuleCache.set(moduleMeta.type.reference, ngModuleFactory);
	        }
	        return ngModuleFactory;
	    };
	    /**
	     * @internal
	     */
	    JitCompiler.prototype._compileComponents = function (mainModule, allComponentFactories) {
	        var _this = this;
	        var ngModule = this._metadataResolver.getNgModuleMetadata(mainModule);
	        var moduleByJitDirective = new Map();
	        var templates = new Set();
	        var transJitModules = this._filterJitIdentifiers(ngModule.transitiveModule.modules);
	        transJitModules.forEach(function (localMod) {
	            var localModuleMeta = _this._metadataResolver.getNgModuleMetadata(localMod);
	            _this._filterJitIdentifiers(localModuleMeta.declaredDirectives).forEach(function (dirRef) {
	                moduleByJitDirective.set(dirRef, localModuleMeta);
	                var dirMeta = _this._metadataResolver.getDirectiveMetadata(dirRef);
	                if (dirMeta.isComponent) {
	                    templates.add(_this._createCompiledTemplate(dirMeta, localModuleMeta));
	                    if (allComponentFactories) {
	                        var template = _this._createCompiledHostTemplate(dirMeta.type.reference, localModuleMeta);
	                        templates.add(template);
	                        allComponentFactories.push(dirMeta.componentFactory);
	                    }
	                }
	            });
	        });
	        transJitModules.forEach(function (localMod) {
	            var localModuleMeta = _this._metadataResolver.getNgModuleMetadata(localMod);
	            _this._filterJitIdentifiers(localModuleMeta.declaredDirectives).forEach(function (dirRef) {
	                var dirMeta = _this._metadataResolver.getDirectiveMetadata(dirRef);
	                if (dirMeta.isComponent) {
	                    dirMeta.entryComponents.forEach(function (entryComponentType) {
	                        var moduleMeta = moduleByJitDirective.get(entryComponentType.componentType);
	                        templates.add(_this._createCompiledHostTemplate(entryComponentType.componentType, moduleMeta));
	                    });
	                }
	            });
	            localModuleMeta.entryComponents.forEach(function (entryComponentType) {
	                if (!_this.hasAotSummary(entryComponentType.componentType)) {
	                    var moduleMeta = moduleByJitDirective.get(entryComponentType.componentType);
	                    templates.add(_this._createCompiledHostTemplate(entryComponentType.componentType, moduleMeta));
	                }
	            });
	        });
	        templates.forEach(function (template) { return _this._compileTemplate(template); });
	    };
	    JitCompiler.prototype.clearCacheFor = function (type) {
	        this._compiledNgModuleCache.delete(type);
	        this._metadataResolver.clearCacheFor(type);
	        this._compiledHostTemplateCache.delete(type);
	        var compiledTemplate = this._compiledTemplateCache.get(type);
	        if (compiledTemplate) {
	            this._compiledTemplateCache.delete(type);
	        }
	    };
	    JitCompiler.prototype.clearCache = function () {
	        // Note: don't clear the _addedAotSummaries, as they don't change!
	        this._metadataResolver.clearCache();
	        this._compiledTemplateCache.clear();
	        this._compiledHostTemplateCache.clear();
	        this._compiledNgModuleCache.clear();
	    };
	    JitCompiler.prototype._createCompiledHostTemplate = function (compType, ngModule) {
	        if (!ngModule) {
	            throw new Error("Component " + stringify(compType) + " is not part of any NgModule or the module has not been imported into your module.");
	        }
	        var compiledTemplate = this._compiledHostTemplateCache.get(compType);
	        if (!compiledTemplate) {
	            var compMeta = this._metadataResolver.getDirectiveMetadata(compType);
	            assertComponent(compMeta);
	            var hostMeta = this._metadataResolver.getHostComponentMetadata(compMeta, compMeta.componentFactory.viewDefFactory);
	            compiledTemplate =
	                new CompiledTemplate(true, compMeta.type, hostMeta, ngModule, [compMeta.type]);
	            this._compiledHostTemplateCache.set(compType, compiledTemplate);
	        }
	        return compiledTemplate;
	    };
	    JitCompiler.prototype._createCompiledTemplate = function (compMeta, ngModule) {
	        var compiledTemplate = this._compiledTemplateCache.get(compMeta.type.reference);
	        if (!compiledTemplate) {
	            assertComponent(compMeta);
	            compiledTemplate = new CompiledTemplate(false, compMeta.type, compMeta, ngModule, ngModule.transitiveModule.directives);
	            this._compiledTemplateCache.set(compMeta.type.reference, compiledTemplate);
	        }
	        return compiledTemplate;
	    };
	    JitCompiler.prototype._compileTemplate = function (template) {
	        var _this = this;
	        if (template.isCompiled) {
	            return;
	        }
	        var compMeta = template.compMeta;
	        var externalStylesheetsByModuleUrl = new Map();
	        var outputContext = createOutputContext();
	        var componentStylesheet = this._styleCompiler.compileComponent(outputContext, compMeta);
	        compMeta.template.externalStylesheets.forEach(function (stylesheetMeta) {
	            var compiledStylesheet = _this._styleCompiler.compileStyles(createOutputContext(), compMeta, stylesheetMeta);
	            externalStylesheetsByModuleUrl.set(stylesheetMeta.moduleUrl, compiledStylesheet);
	        });
	        this._resolveStylesCompileResult(componentStylesheet, externalStylesheetsByModuleUrl);
	        var pipes = template.ngModule.transitiveModule.pipes.map(function (pipe) { return _this._metadataResolver.getPipeSummary(pipe.reference); });
	        var _a = this._parseTemplate(compMeta, template.ngModule, template.directives), parsedTemplate = _a.template, usedPipes = _a.pipes;
	        var compileResult = this._viewCompiler.compileComponent(outputContext, compMeta, parsedTemplate, variable(componentStylesheet.stylesVar), usedPipes);
	        var evalResult = this._interpretOrJit(templateJitUrl(template.ngModule.type, template.compMeta), outputContext.statements);
	        var viewClass = evalResult[compileResult.viewClassVar];
	        var rendererType = evalResult[compileResult.rendererTypeVar];
	        template.compiled(viewClass, rendererType);
	    };
	    JitCompiler.prototype._parseTemplate = function (compMeta, ngModule, directiveIdentifiers) {
	        var _this = this;
	        // Note: ! is ok here as components always have a template.
	        var preserveWhitespaces = compMeta.template.preserveWhitespaces;
	        var directives = directiveIdentifiers.map(function (dir) { return _this._metadataResolver.getDirectiveSummary(dir.reference); });
	        var pipes = ngModule.transitiveModule.pipes.map(function (pipe) { return _this._metadataResolver.getPipeSummary(pipe.reference); });
	        return this._templateParser.parse(compMeta, compMeta.template.htmlAst, directives, pipes, ngModule.schemas, templateSourceUrl(ngModule.type, compMeta, compMeta.template), preserveWhitespaces);
	    };
	    JitCompiler.prototype._resolveStylesCompileResult = function (result, externalStylesheetsByModuleUrl) {
	        var _this = this;
	        result.dependencies.forEach(function (dep, i) {
	            var nestedCompileResult = externalStylesheetsByModuleUrl.get(dep.moduleUrl);
	            var nestedStylesArr = _this._resolveAndEvalStylesCompileResult(nestedCompileResult, externalStylesheetsByModuleUrl);
	            dep.setValue(nestedStylesArr);
	        });
	    };
	    JitCompiler.prototype._resolveAndEvalStylesCompileResult = function (result, externalStylesheetsByModuleUrl) {
	        this._resolveStylesCompileResult(result, externalStylesheetsByModuleUrl);
	        return this._interpretOrJit(sharedStylesheetJitUrl(result.meta, this._sharedStylesheetCount++), result.outputCtx.statements)[result.stylesVar];
	    };
	    JitCompiler.prototype._interpretOrJit = function (sourceUrl, statements) {
	        if (!this._compilerConfig.useJit) {
	            return interpretStatements(statements, this._reflector);
	        }
	        else {
	            return this._jitEvaluator.evaluateStatements(sourceUrl, statements, this._reflector, this._compilerConfig.jitDevMode);
	        }
	    };
	    return JitCompiler;
	}());
	var CompiledTemplate = /** @class */ (function () {
	    function CompiledTemplate(isHost, compType, compMeta, ngModule, directives) {
	        this.isHost = isHost;
	        this.compType = compType;
	        this.compMeta = compMeta;
	        this.ngModule = ngModule;
	        this.directives = directives;
	        this._viewClass = null;
	        this.isCompiled = false;
	    }
	    CompiledTemplate.prototype.compiled = function (viewClass, rendererType) {
	        this._viewClass = viewClass;
	        this.compMeta.componentViewType.setDelegate(viewClass);
	        for (var prop in rendererType) {
	            this.compMeta.rendererType[prop] = rendererType[prop];
	        }
	        this.isCompiled = true;
	    };
	    return CompiledTemplate;
	}());
	function assertComponent(meta) {
	    if (!meta.isComponent) {
	        throw new Error("Could not compile '" + identifierName(meta.type) + "' because it is not a component.");
	    }
	}
	function createOutputContext() {
	    var importExpr$1 = function (symbol) {
	        return importExpr({ name: identifierName(symbol), moduleName: null, runtime: symbol });
	    };
	    return { statements: [], genFilePath: '', importExpr: importExpr$1, constantPool: new ConstantPool() };
	}

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * Provides access to reflection data about symbols that the compiler needs.
	 */
	var CompileReflector = /** @class */ (function () {
	    function CompileReflector() {
	    }
	    return CompileReflector;
	}());
	var UrlResolver = /** @class */ (function () {
	    function UrlResolverImpl(_packagePrefix) {
	        if (_packagePrefix === void 0) { _packagePrefix = null; }
	        this._packagePrefix = _packagePrefix;
	    }
	    /**
	     * Resolves the `url` given the `baseUrl`:
	     * - when the `url` is null, the `baseUrl` is returned,
	     * - if `url` is relative ('path/to/here', './path/to/here'), the resolved url is a combination of
	     * `baseUrl` and `url`,
	     * - if `url` is absolute (it has a scheme: 'http://', 'https://' or start with '/'), the `url` is
	     * returned as is (ignoring the `baseUrl`)
	     */
	    UrlResolverImpl.prototype.resolve = function (baseUrl, url) {
	        var resolvedUrl = url;
	        if (baseUrl != null && baseUrl.length > 0) {
	            resolvedUrl = _resolveUrl(baseUrl, resolvedUrl);
	        }
	        var resolvedParts = _split(resolvedUrl);
	        var prefix = this._packagePrefix;
	        if (prefix != null && resolvedParts != null &&
	            resolvedParts[_ComponentIndex.Scheme] == 'package') {
	            var path = resolvedParts[_ComponentIndex.Path];
	            prefix = prefix.replace(/\/+$/, '');
	            path = path.replace(/^\/+/, '');
	            return prefix + "/" + path;
	        }
	        return resolvedUrl;
	    };
	    return UrlResolverImpl;
	}());
	/**
	 * Extract the scheme of a URL.
	 */
	function getUrlScheme(url) {
	    var match = _split(url);
	    return (match && match[_ComponentIndex.Scheme]) || '';
	}
	// The code below is adapted from Traceur:
	// https://github.com/google/traceur-compiler/blob/9511c1dafa972bf0de1202a8a863bad02f0f95a8/src/runtime/url.js
	/**
	 * Builds a URI string from already-encoded parts.
	 *
	 * No encoding is performed.  Any component may be omitted as either null or
	 * undefined.
	 *
	 * @param opt_scheme The scheme such as 'http'.
	 * @param opt_userInfo The user name before the '@'.
	 * @param opt_domain The domain such as 'www.google.com', already
	 *     URI-encoded.
	 * @param opt_port The port number.
	 * @param opt_path The path, already URI-encoded.  If it is not
	 *     empty, it must begin with a slash.
	 * @param opt_queryData The URI-encoded query data.
	 * @param opt_fragment The URI-encoded fragment identifier.
	 * @return The fully combined URI.
	 */
	function _buildFromEncodedParts(opt_scheme, opt_userInfo, opt_domain, opt_port, opt_path, opt_queryData, opt_fragment) {
	    var out = [];
	    if (opt_scheme != null) {
	        out.push(opt_scheme + ':');
	    }
	    if (opt_domain != null) {
	        out.push('//');
	        if (opt_userInfo != null) {
	            out.push(opt_userInfo + '@');
	        }
	        out.push(opt_domain);
	        if (opt_port != null) {
	            out.push(':' + opt_port);
	        }
	    }
	    if (opt_path != null) {
	        out.push(opt_path);
	    }
	    if (opt_queryData != null) {
	        out.push('?' + opt_queryData);
	    }
	    if (opt_fragment != null) {
	        out.push('#' + opt_fragment);
	    }
	    return out.join('');
	}
	/**
	 * A regular expression for breaking a URI into its component parts.
	 *
	 * {@link http://www.gbiv.com/protocols/uri/rfc/rfc3986.html#RFC2234} says
	 * As the "first-match-wins" algorithm is identical to the "greedy"
	 * disambiguation method used by POSIX regular expressions, it is natural and
	 * commonplace to use a regular expression for parsing the potential five
	 * components of a URI reference.
	 *
	 * The following line is the regular expression for breaking-down a
	 * well-formed URI reference into its components.
	 *
	 * <pre>
	 * ^(([^:/?#]+):)?(//([^/?#]*))?([^?#]*)(\?([^#]*))?(#(.*))?
	 *  12            3  4          5       6  7        8 9
	 * </pre>
	 *
	 * The numbers in the second line above are only to assist readability; they
	 * indicate the reference points for each subexpression (i.e., each paired
	 * parenthesis). We refer to the value matched for subexpression <n> as $<n>.
	 * For example, matching the above expression to
	 * <pre>
	 *     http://www.ics.uci.edu/pub/ietf/uri/#Related
	 * </pre>
	 * results in the following subexpression matches:
	 * <pre>
	 *    $1 = http:
	 *    $2 = http
	 *    $3 = //www.ics.uci.edu
	 *    $4 = www.ics.uci.edu
	 *    $5 = /pub/ietf/uri/
	 *    $6 = <undefined>
	 *    $7 = <undefined>
	 *    $8 = #Related
	 *    $9 = Related
	 * </pre>
	 * where <undefined> indicates that the component is not present, as is the
	 * case for the query component in the above example. Therefore, we can
	 * determine the value of the five components as
	 * <pre>
	 *    scheme    = $2
	 *    authority = $4
	 *    path      = $5
	 *    query     = $7
	 *    fragment  = $9
	 * </pre>
	 *
	 * The regular expression has been modified slightly to expose the
	 * userInfo, domain, and port separately from the authority.
	 * The modified version yields
	 * <pre>
	 *    $1 = http              scheme
	 *    $2 = <undefined>       userInfo -\
	 *    $3 = www.ics.uci.edu   domain     | authority
	 *    $4 = <undefined>       port     -/
	 *    $5 = /pub/ietf/uri/    path
	 *    $6 = <undefined>       query without ?
	 *    $7 = Related           fragment without #
	 * </pre>
	 * @internal
	 */
	var _splitRe = new RegExp('^' +
	    '(?:' +
	    '([^:/?#.]+)' + // scheme - ignore special characters
	    // used by other URL parts such as :,
	    // ?, /, #, and .
	    ':)?' +
	    '(?://' +
	    '(?:([^/?#]*)@)?' + // userInfo
	    '([\\w\\d\\-\\u0100-\\uffff.%]*)' + // domain - restrict to letters,
	    // digits, dashes, dots, percent
	    // escapes, and unicode characters.
	    '(?::([0-9]+))?' + // port
	    ')?' +
	    '([^?#]+)?' + // path
	    '(?:\\?([^#]*))?' + // query
	    '(?:#(.*))?' + // fragment
	    '$');
	/**
	 * The index of each URI component in the return value of goog.uri.utils.split.
	 * @enum {number}
	 */
	var _ComponentIndex;
	(function (_ComponentIndex) {
	    _ComponentIndex[_ComponentIndex["Scheme"] = 1] = "Scheme";
	    _ComponentIndex[_ComponentIndex["UserInfo"] = 2] = "UserInfo";
	    _ComponentIndex[_ComponentIndex["Domain"] = 3] = "Domain";
	    _ComponentIndex[_ComponentIndex["Port"] = 4] = "Port";
	    _ComponentIndex[_ComponentIndex["Path"] = 5] = "Path";
	    _ComponentIndex[_ComponentIndex["QueryData"] = 6] = "QueryData";
	    _ComponentIndex[_ComponentIndex["Fragment"] = 7] = "Fragment";
	})(_ComponentIndex || (_ComponentIndex = {}));
	/**
	 * Splits a URI into its component parts.
	 *
	 * Each component can be accessed via the component indices; for example:
	 * <pre>
	 * goog.uri.utils.split(someStr)[goog.uri.utils.CompontentIndex.QUERY_DATA];
	 * </pre>
	 *
	 * @param uri The URI string to examine.
	 * @return Each component still URI-encoded.
	 *     Each component that is present will contain the encoded value, whereas
	 *     components that are not present will be undefined or empty, depending
	 *     on the browser's regular expression implementation.  Never null, since
	 *     arbitrary strings may still look like path names.
	 */
	function _split(uri) {
	    return uri.match(_splitRe);
	}
	/**
	 * Removes dot segments in given path component, as described in
	 * RFC 3986, section 5.2.4.
	 *
	 * @param path A non-empty path component.
	 * @return Path component with removed dot segments.
	 */
	function _removeDotSegments(path) {
	    if (path == '/')
	        return '/';
	    var leadingSlash = path[0] == '/' ? '/' : '';
	    var trailingSlash = path[path.length - 1] === '/' ? '/' : '';
	    var segments = path.split('/');
	    var out = [];
	    var up = 0;
	    for (var pos = 0; pos < segments.length; pos++) {
	        var segment = segments[pos];
	        switch (segment) {
	            case '':
	            case '.':
	                break;
	            case '..':
	                if (out.length > 0) {
	                    out.pop();
	                }
	                else {
	                    up++;
	                }
	                break;
	            default:
	                out.push(segment);
	        }
	    }
	    if (leadingSlash == '') {
	        while (up-- > 0) {
	            out.unshift('..');
	        }
	        if (out.length === 0)
	            out.push('.');
	    }
	    return leadingSlash + out.join('/') + trailingSlash;
	}
	/**
	 * Takes an array of the parts from split and canonicalizes the path part
	 * and then joins all the parts.
	 */
	function _joinAndCanonicalizePath(parts) {
	    var path = parts[_ComponentIndex.Path];
	    path = path == null ? '' : _removeDotSegments(path);
	    parts[_ComponentIndex.Path] = path;
	    return _buildFromEncodedParts(parts[_ComponentIndex.Scheme], parts[_ComponentIndex.UserInfo], parts[_ComponentIndex.Domain], parts[_ComponentIndex.Port], path, parts[_ComponentIndex.QueryData], parts[_ComponentIndex.Fragment]);
	}
	/**
	 * Resolves a URL.
	 * @param base The URL acting as the base URL.
	 * @param to The URL to resolve.
	 */
	function _resolveUrl(base, url) {
	    var parts = _split(encodeURI(url));
	    var baseParts = _split(base);
	    if (parts[_ComponentIndex.Scheme] != null) {
	        return _joinAndCanonicalizePath(parts);
	    }
	    else {
	        parts[_ComponentIndex.Scheme] = baseParts[_ComponentIndex.Scheme];
	    }
	    for (var i = _ComponentIndex.Scheme; i <= _ComponentIndex.Port; i++) {
	        if (parts[i] == null) {
	            parts[i] = baseParts[i];
	        }
	    }
	    if (parts[_ComponentIndex.Path][0] == '/') {
	        return _joinAndCanonicalizePath(parts);
	    }
	    var path = baseParts[_ComponentIndex.Path];
	    if (path == null)
	        path = '/';
	    var index = path.lastIndexOf('/');
	    path = path.substring(0, index + 1) + parts[_ComponentIndex.Path];
	    parts[_ComponentIndex.Path] = path;
	    return _joinAndCanonicalizePath(parts);
	}
	/**
	 * Represents a binding scope within a template.
	 *
	 * Any variables, references, or other named entities declared within the template will
	 * be captured and available by name in `namedEntities`. Additionally, child templates will
	 * be analyzed and have their child `Scope`s available in `childScopes`.
	 */
	var Scope = /** @class */ (function () {
	    function Scope(parentScope) {
	        this.parentScope = parentScope;
	        /**
	         * Named members of the `Scope`, such as `Reference`s or `Variable`s.
	         */
	        this.namedEntities = new Map();
	        /**
	         * Child `Scope`s for immediately nested `Template`s.
	         */
	        this.childScopes = new Map();
	    }
	    /**
	     * Process a template (either as a `Template` sub-template with variables, or a plain array of
	     * template `Node`s) and construct its `Scope`.
	     */
	    Scope.apply = function (template) {
	        var scope = new Scope();
	        scope.ingest(template);
	        return scope;
	    };
	    /**
	     * Internal method to process the template and populate the `Scope`.
	     */
	    Scope.prototype.ingest = function (template) {
	        var _this = this;
	        if (template instanceof Template) {
	            // Variables on an <ng-template> are defined in the inner scope.
	            template.variables.forEach(function (node) { return _this.visitVariable(node); });
	            // Process the nodes of the template.
	            template.children.forEach(function (node) { return node.visit(_this); });
	        }
	        else {
	            // No overarching `Template` instance, so process the nodes directly.
	            template.forEach(function (node) { return node.visit(_this); });
	        }
	    };
	    Scope.prototype.visitElement = function (element) {
	        var _this = this;
	        // `Element`s in the template may have `Reference`s which are captured in the scope.
	        element.references.forEach(function (node) { return _this.visitReference(node); });
	        // Recurse into the `Element`'s children.
	        element.children.forEach(function (node) { return node.visit(_this); });
	    };
	    Scope.prototype.visitTemplate = function (template) {
	        var _this = this;
	        // References on a <ng-template> are defined in the outer scope, so capture them before
	        // processing the template's child scope.
	        template.references.forEach(function (node) { return _this.visitReference(node); });
	        // Next, create an inner scope and process the template within it.
	        var scope = new Scope(this);
	        scope.ingest(template);
	        this.childScopes.set(template, scope);
	    };
	    Scope.prototype.visitVariable = function (variable) {
	        // Declare the variable if it's not already.
	        this.maybeDeclare(variable);
	    };
	    Scope.prototype.visitReference = function (reference) {
	        // Declare the variable if it's not already.
	        this.maybeDeclare(reference);
	    };
	    // Unused visitors.
	    Scope.prototype.visitContent = function (content) { };
	    Scope.prototype.visitBoundAttribute = function (attr) { };
	    Scope.prototype.visitBoundEvent = function (event) { };
	    Scope.prototype.visitBoundText = function (text) { };
	    Scope.prototype.visitText = function (text) { };
	    Scope.prototype.visitTextAttribute = function (attr) { };
	    Scope.prototype.visitIcu = function (icu) { };
	    Scope.prototype.maybeDeclare = function (thing) {
	        // Declare something with a name, as long as that name isn't taken.
	        if (!this.namedEntities.has(thing.name)) {
	            this.namedEntities.set(thing.name, thing);
	        }
	    };
	    /**
	     * Look up a variable within this `Scope`.
	     *
	     * This can recurse into a parent `Scope` if it's available.
	     */
	    Scope.prototype.lookup = function (name) {
	        if (this.namedEntities.has(name)) {
	            // Found in the local scope.
	            return this.namedEntities.get(name);
	        }
	        else if (this.parentScope !== undefined) {
	            // Not in the local scope, but there's a parent scope so check there.
	            return this.parentScope.lookup(name);
	        }
	        else {
	            // At the top level and it wasn't found.
	            return null;
	        }
	    };
	    /**
	     * Get the child scope for a `Template`.
	     *
	     * This should always be defined.
	     */
	    Scope.prototype.getChildScope = function (template) {
	        var res = this.childScopes.get(template);
	        if (res === undefined) {
	            throw new Error("Assertion error: child scope for " + template + " not found");
	        }
	        return res;
	    };
	    return Scope;
	}());
	/**
	 * Processes a template and matches directives on nodes (elements and templates).
	 *
	 * Usually used via the static `apply()` method.
	 */
	var DirectiveBinder = /** @class */ (function () {
	    function DirectiveBinder(matcher, directives, bindings, references) {
	        this.matcher = matcher;
	        this.directives = directives;
	        this.bindings = bindings;
	        this.references = references;
	    }
	    /**
	     * Process a template (list of `Node`s) and perform directive matching against each node.
	     *
	     * @param template the list of template `Node`s to match (recursively).
	     * @param selectorMatcher a `SelectorMatcher` containing the directives that are in scope for
	     * this template.
	     * @returns three maps which contain information about directives in the template: the
	     * `directives` map which lists directives matched on each node, the `bindings` map which
	     * indicates which directives claimed which bindings (inputs, outputs, etc), and the `references`
	     * map which resolves #references (`Reference`s) within the template to the named directive or
	     * template node.
	     */
	    DirectiveBinder.apply = function (template, selectorMatcher) {
	        var directives = new Map();
	        var bindings = new Map();
	        var references = new Map();
	        var matcher = new DirectiveBinder(selectorMatcher, directives, bindings, references);
	        matcher.ingest(template);
	        return { directives: directives, bindings: bindings, references: references };
	    };
	    DirectiveBinder.prototype.ingest = function (template) {
	        var _this = this;
	        template.forEach(function (node) { return node.visit(_this); });
	    };
	    DirectiveBinder.prototype.visitElement = function (element) {
	        this.visitElementOrTemplate(element.name, element);
	    };
	    DirectiveBinder.prototype.visitTemplate = function (template) {
	        this.visitElementOrTemplate('ng-template', template);
	    };
	    DirectiveBinder.prototype.visitElementOrTemplate = function (elementName, node) {
	        var _this = this;
	        // First, determine the HTML shape of the node for the purpose of directive matching.
	        // Do this by building up a `CssSelector` for the node.
	        var cssSelector = createCssSelector(elementName, getAttrsForDirectiveMatching(node));
	        // Next, use the `SelectorMatcher` to get the list of directives on the node.
	        var directives = [];
	        this.matcher.match(cssSelector, function (_, directive) { return directives.push(directive); });
	        if (directives.length > 0) {
	            this.directives.set(node, directives);
	        }
	        // Resolve any references that are created on this node.
	        node.references.forEach(function (ref) {
	            var dirTarget = null;
	            // If the reference expression is empty, then it matches the "primary" directive on the node
	            // (if there is one). Otherwise it matches the host node itself (either an element or
	            // <ng-template> node).
	            if (ref.value.trim() === '') {
	                // This could be a reference to a component if there is one.
	                dirTarget = directives.find(function (dir) { return dir.isComponent; }) || null;
	            }
	            else {
	                // This should be a reference to a directive exported via exportAs.
	                dirTarget =
	                    directives.find(function (dir) { return dir.exportAs !== null && dir.exportAs.some(function (value) { return value === ref.value; }); }) ||
	                        null;
	                // Check if a matching directive was found.
	                if (dirTarget === null) {
	                    // No matching directive was found - this reference points to an unknown target. Leave it
	                    // unmapped.
	                    return;
	                }
	            }
	            if (dirTarget !== null) {
	                // This reference points to a directive.
	                _this.references.set(ref, { directive: dirTarget, node: node });
	            }
	            else {
	                // This reference points to the node itself.
	                _this.references.set(ref, node);
	            }
	        });
	        var setAttributeBinding = function (attribute, ioType) {
	            var dir = directives.find(function (dir) { return dir[ioType].hasOwnProperty(attribute.name); });
	            var binding = dir !== undefined ? dir : node;
	            _this.bindings.set(attribute, binding);
	        };
	        // Node inputs (bound attributes) and text attributes can be bound to an
	        // input on a directive.
	        node.inputs.forEach(function (input) { return setAttributeBinding(input, 'inputs'); });
	        node.attributes.forEach(function (attr) { return setAttributeBinding(attr, 'inputs'); });
	        if (node instanceof Template) {
	            node.templateAttrs.forEach(function (attr) { return setAttributeBinding(attr, 'inputs'); });
	        }
	        // Node outputs (bound events) can be bound to an output on a directive.
	        node.outputs.forEach(function (output) { return setAttributeBinding(output, 'outputs'); });
	        // Recurse into the node's children.
	        node.children.forEach(function (child) { return child.visit(_this); });
	    };
	    // Unused visitors.
	    DirectiveBinder.prototype.visitContent = function (content) { };
	    DirectiveBinder.prototype.visitVariable = function (variable) { };
	    DirectiveBinder.prototype.visitReference = function (reference) { };
	    DirectiveBinder.prototype.visitTextAttribute = function (attribute) { };
	    DirectiveBinder.prototype.visitBoundAttribute = function (attribute) { };
	    DirectiveBinder.prototype.visitBoundEvent = function (attribute) { };
	    DirectiveBinder.prototype.visitBoundAttributeOrEvent = function (node) { };
	    DirectiveBinder.prototype.visitText = function (text) { };
	    DirectiveBinder.prototype.visitBoundText = function (text) { };
	    DirectiveBinder.prototype.visitIcu = function (icu) { };
	    return DirectiveBinder;
	}());
	/**
	 * Processes a template and extract metadata about expressions and symbols within.
	 *
	 * This is a companion to the `DirectiveBinder` that doesn't require knowledge of directives matched
	 * within the template in order to operate.
	 *
	 * Expressions are visited by the superclass `RecursiveAstVisitor`, with custom logic provided
	 * by overridden methods from that visitor.
	 */
	var TemplateBinder = /** @class */ (function (_super) {
	    __extends(TemplateBinder, _super);
	    function TemplateBinder(bindings, symbols, usedPipes, nestingLevel, scope, template, level) {
	        var _this = _super.call(this) || this;
	        _this.bindings = bindings;
	        _this.symbols = symbols;
	        _this.usedPipes = usedPipes;
	        _this.nestingLevel = nestingLevel;
	        _this.scope = scope;
	        _this.template = template;
	        _this.level = level;
	        _this.pipesUsed = [];
	        // Save a bit of processing time by constructing this closure in advance.
	        _this.visitNode = function (node) { return node.visit(_this); };
	        return _this;
	    }
	    // This method is defined to reconcile the type of TemplateBinder since both
	    // RecursiveAstVisitor and Visitor define the visit() method in their
	    // interfaces.
	    TemplateBinder.prototype.visit = function (node, context) {
	        if (node instanceof AST) {
	            node.visit(this, context);
	        }
	        else {
	            node.visit(this);
	        }
	    };
	    /**
	     * Process a template and extract metadata about expressions and symbols within.
	     *
	     * @param template the nodes of the template to process
	     * @param scope the `Scope` of the template being processed.
	     * @returns three maps which contain metadata about the template: `expressions` which interprets
	     * special `AST` nodes in expressions as pointing to references or variables declared within the
	     * template, `symbols` which maps those variables and references to the nested `Template` which
	     * declares them, if any, and `nestingLevel` which associates each `Template` with a integer
	     * nesting level (how many levels deep within the template structure the `Template` is), starting
	     * at 1.
	     */
	    TemplateBinder.apply = function (template, scope) {
	        var expressions = new Map();
	        var symbols = new Map();
	        var nestingLevel = new Map();
	        var usedPipes = new Set();
	        // The top-level template has nesting level 0.
	        var binder = new TemplateBinder(expressions, symbols, usedPipes, nestingLevel, scope, template instanceof Template ? template : null, 0);
	        binder.ingest(template);
	        return { expressions: expressions, symbols: symbols, nestingLevel: nestingLevel, usedPipes: usedPipes };
	    };
	    TemplateBinder.prototype.ingest = function (template) {
	        if (template instanceof Template) {
	            // For <ng-template>s, process only variables and child nodes. Inputs, outputs, templateAttrs,
	            // and references were all processed in the scope of the containing template.
	            template.variables.forEach(this.visitNode);
	            template.children.forEach(this.visitNode);
	            // Set the nesting level.
	            this.nestingLevel.set(template, this.level);
	        }
	        else {
	            // Visit each node from the top-level template.
	            template.forEach(this.visitNode);
	        }
	    };
	    TemplateBinder.prototype.visitElement = function (element) {
	        // Visit the inputs, outputs, and children of the element.
	        element.inputs.forEach(this.visitNode);
	        element.outputs.forEach(this.visitNode);
	        element.children.forEach(this.visitNode);
	    };
	    TemplateBinder.prototype.visitTemplate = function (template) {
	        // First, visit inputs, outputs and template attributes of the template node.
	        template.inputs.forEach(this.visitNode);
	        template.outputs.forEach(this.visitNode);
	        template.templateAttrs.forEach(this.visitNode);
	        // References are also evaluated in the outer context.
	        template.references.forEach(this.visitNode);
	        // Next, recurse into the template using its scope, and bumping the nesting level up by one.
	        var childScope = this.scope.getChildScope(template);
	        var binder = new TemplateBinder(this.bindings, this.symbols, this.usedPipes, this.nestingLevel, childScope, template, this.level + 1);
	        binder.ingest(template);
	    };
	    TemplateBinder.prototype.visitVariable = function (variable) {
	        // Register the `Variable` as a symbol in the current `Template`.
	        if (this.template !== null) {
	            this.symbols.set(variable, this.template);
	        }
	    };
	    TemplateBinder.prototype.visitReference = function (reference) {
	        // Register the `Reference` as a symbol in the current `Template`.
	        if (this.template !== null) {
	            this.symbols.set(reference, this.template);
	        }
	    };
	    // Unused template visitors
	    TemplateBinder.prototype.visitText = function (text) { };
	    TemplateBinder.prototype.visitContent = function (content) { };
	    TemplateBinder.prototype.visitTextAttribute = function (attribute) { };
	    TemplateBinder.prototype.visitIcu = function (icu) { };
	    // The remaining visitors are concerned with processing AST expressions within template bindings
	    TemplateBinder.prototype.visitBoundAttribute = function (attribute) {
	        attribute.value.visit(this);
	    };
	    TemplateBinder.prototype.visitBoundEvent = function (event) {
	        event.handler.visit(this);
	    };
	    TemplateBinder.prototype.visitBoundText = function (text) {
	        text.value.visit(this);
	    };
	    TemplateBinder.prototype.visitPipe = function (ast, context) {
	        this.usedPipes.add(ast.name);
	        return _super.prototype.visitPipe.call(this, ast, context);
	    };
	    // These five types of AST expressions can refer to expression roots, which could be variables
	    // or references in the current scope.
	    TemplateBinder.prototype.visitPropertyRead = function (ast, context) {
	        this.maybeMap(context, ast, ast.name);
	        return _super.prototype.visitPropertyRead.call(this, ast, context);
	    };
	    TemplateBinder.prototype.visitSafePropertyRead = function (ast, context) {
	        this.maybeMap(context, ast, ast.name);
	        return _super.prototype.visitSafePropertyRead.call(this, ast, context);
	    };
	    TemplateBinder.prototype.visitPropertyWrite = function (ast, context) {
	        this.maybeMap(context, ast, ast.name);
	        return _super.prototype.visitPropertyWrite.call(this, ast, context);
	    };
	    TemplateBinder.prototype.visitMethodCall = function (ast, context) {
	        this.maybeMap(context, ast, ast.name);
	        return _super.prototype.visitMethodCall.call(this, ast, context);
	    };
	    TemplateBinder.prototype.visitSafeMethodCall = function (ast, context) {
	        this.maybeMap(context, ast, ast.name);
	        return _super.prototype.visitSafeMethodCall.call(this, ast, context);
	    };
	    TemplateBinder.prototype.maybeMap = function (scope, ast, name) {
	        // If the receiver of the expression isn't the `ImplicitReceiver`, this isn't the root of an
	        // `AST` expression that maps to a `Variable` or `Reference`.
	        if (!(ast.receiver instanceof ImplicitReceiver)) {
	            return;
	        }
	        // Check whether the name exists in the current scope. If so, map it. Otherwise, the name is
	        // probably a property on the top-level component context.
	        var target = this.scope.lookup(name);
	        if (target !== null) {
	            this.bindings.set(ast, target);
	        }
	    };
	    return TemplateBinder;
	}(RecursiveAstVisitor$1));

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	// This file only reexports content of the `src` folder. Keep it that way.
	// This function call has a global side effects and publishes the compiler into global namespace for
	// the late binding of the Compiler to the @angular/core for jit compilation.
	publishFacade(_global);

	/** PURE_IMPORTS_START  PURE_IMPORTS_END */
	function isFunction(x) {
	    return typeof x === 'function';
	}

	/** PURE_IMPORTS_START  PURE_IMPORTS_END */
	var _enable_super_gross_mode_that_will_cause_bad_things = false;
	var config = {
	    Promise: undefined,
	    set useDeprecatedSynchronousErrorHandling(value) {
	        if (value) {
	            var error = /*@__PURE__*/ new Error();
	            /*@__PURE__*/ console.warn('DEPRECATED! RxJS was set to use deprecated synchronous error handling behavior by code at: \n' + error.stack);
	        }
	        _enable_super_gross_mode_that_will_cause_bad_things = value;
	    },
	    get useDeprecatedSynchronousErrorHandling() {
	        return _enable_super_gross_mode_that_will_cause_bad_things;
	    },
	};

	/** PURE_IMPORTS_START  PURE_IMPORTS_END */
	function hostReportError(err) {
	    setTimeout(function () { throw err; }, 0);
	}

	/** PURE_IMPORTS_START _config,_util_hostReportError PURE_IMPORTS_END */
	var empty = {
	    closed: true,
	    next: function (value) { },
	    error: function (err) {
	        if (config.useDeprecatedSynchronousErrorHandling) {
	            throw err;
	        }
	        else {
	            hostReportError(err);
	        }
	    },
	    complete: function () { }
	};

	/** PURE_IMPORTS_START  PURE_IMPORTS_END */
	var isArray$1 = /*@__PURE__*/ (function () { return Array.isArray || (function (x) { return x && typeof x.length === 'number'; }); })();

	/** PURE_IMPORTS_START  PURE_IMPORTS_END */
	function isObject$1(x) {
	    return x !== null && typeof x === 'object';
	}

	/** PURE_IMPORTS_START  PURE_IMPORTS_END */
	var UnsubscriptionErrorImpl = /*@__PURE__*/ (function () {
	    function UnsubscriptionErrorImpl(errors) {
	        Error.call(this);
	        this.message = errors ?
	            errors.length + " errors occurred during unsubscription:\n" + errors.map(function (err, i) { return i + 1 + ") " + err.toString(); }).join('\n  ') : '';
	        this.name = 'UnsubscriptionError';
	        this.errors = errors;
	        return this;
	    }
	    UnsubscriptionErrorImpl.prototype = /*@__PURE__*/ Object.create(Error.prototype);
	    return UnsubscriptionErrorImpl;
	})();
	var UnsubscriptionError = UnsubscriptionErrorImpl;

	/** PURE_IMPORTS_START _util_isArray,_util_isObject,_util_isFunction,_util_UnsubscriptionError PURE_IMPORTS_END */
	var Subscription = /*@__PURE__*/ (function () {
	    function Subscription(unsubscribe) {
	        this.closed = false;
	        this._parentOrParents = null;
	        this._subscriptions = null;
	        if (unsubscribe) {
	            this._unsubscribe = unsubscribe;
	        }
	    }
	    Subscription.prototype.unsubscribe = function () {
	        var errors;
	        if (this.closed) {
	            return;
	        }
	        var _a = this, _parentOrParents = _a._parentOrParents, _unsubscribe = _a._unsubscribe, _subscriptions = _a._subscriptions;
	        this.closed = true;
	        this._parentOrParents = null;
	        this._subscriptions = null;
	        if (_parentOrParents instanceof Subscription) {
	            _parentOrParents.remove(this);
	        }
	        else if (_parentOrParents !== null) {
	            for (var index = 0; index < _parentOrParents.length; ++index) {
	                var parent_1 = _parentOrParents[index];
	                parent_1.remove(this);
	            }
	        }
	        if (isFunction(_unsubscribe)) {
	            try {
	                _unsubscribe.call(this);
	            }
	            catch (e) {
	                errors = e instanceof UnsubscriptionError ? flattenUnsubscriptionErrors(e.errors) : [e];
	            }
	        }
	        if (isArray$1(_subscriptions)) {
	            var index = -1;
	            var len = _subscriptions.length;
	            while (++index < len) {
	                var sub = _subscriptions[index];
	                if (isObject$1(sub)) {
	                    try {
	                        sub.unsubscribe();
	                    }
	                    catch (e) {
	                        errors = errors || [];
	                        if (e instanceof UnsubscriptionError) {
	                            errors = errors.concat(flattenUnsubscriptionErrors(e.errors));
	                        }
	                        else {
	                            errors.push(e);
	                        }
	                    }
	                }
	            }
	        }
	        if (errors) {
	            throw new UnsubscriptionError(errors);
	        }
	    };
	    Subscription.prototype.add = function (teardown) {
	        var subscription = teardown;
	        if (!teardown) {
	            return Subscription.EMPTY;
	        }
	        switch (typeof teardown) {
	            case 'function':
	                subscription = new Subscription(teardown);
	            case 'object':
	                if (subscription === this || subscription.closed || typeof subscription.unsubscribe !== 'function') {
	                    return subscription;
	                }
	                else if (this.closed) {
	                    subscription.unsubscribe();
	                    return subscription;
	                }
	                else if (!(subscription instanceof Subscription)) {
	                    var tmp = subscription;
	                    subscription = new Subscription();
	                    subscription._subscriptions = [tmp];
	                }
	                break;
	            default: {
	                throw new Error('unrecognized teardown ' + teardown + ' added to Subscription.');
	            }
	        }
	        var _parentOrParents = subscription._parentOrParents;
	        if (_parentOrParents === null) {
	            subscription._parentOrParents = this;
	        }
	        else if (_parentOrParents instanceof Subscription) {
	            if (_parentOrParents === this) {
	                return subscription;
	            }
	            subscription._parentOrParents = [_parentOrParents, this];
	        }
	        else if (_parentOrParents.indexOf(this) === -1) {
	            _parentOrParents.push(this);
	        }
	        else {
	            return subscription;
	        }
	        var subscriptions = this._subscriptions;
	        if (subscriptions === null) {
	            this._subscriptions = [subscription];
	        }
	        else {
	            subscriptions.push(subscription);
	        }
	        return subscription;
	    };
	    Subscription.prototype.remove = function (subscription) {
	        var subscriptions = this._subscriptions;
	        if (subscriptions) {
	            var subscriptionIndex = subscriptions.indexOf(subscription);
	            if (subscriptionIndex !== -1) {
	                subscriptions.splice(subscriptionIndex, 1);
	            }
	        }
	    };
	    Subscription.EMPTY = (function (empty) {
	        empty.closed = true;
	        return empty;
	    }(new Subscription()));
	    return Subscription;
	}());
	function flattenUnsubscriptionErrors(errors) {
	    return errors.reduce(function (errs, err) { return errs.concat((err instanceof UnsubscriptionError) ? err.errors : err); }, []);
	}

	/** PURE_IMPORTS_START  PURE_IMPORTS_END */
	var rxSubscriber = /*@__PURE__*/ (function () {
	    return typeof Symbol === 'function'
	        ? /*@__PURE__*/ Symbol('rxSubscriber')
	        : '@@rxSubscriber_' + /*@__PURE__*/ Math.random();
	})();

	/** PURE_IMPORTS_START tslib,_util_isFunction,_Observer,_Subscription,_internal_symbol_rxSubscriber,_config,_util_hostReportError PURE_IMPORTS_END */
	var Subscriber = /*@__PURE__*/ (function (_super) {
	    __extends(Subscriber, _super);
	    function Subscriber(destinationOrNext, error, complete) {
	        var _this = _super.call(this) || this;
	        _this.syncErrorValue = null;
	        _this.syncErrorThrown = false;
	        _this.syncErrorThrowable = false;
	        _this.isStopped = false;
	        switch (arguments.length) {
	            case 0:
	                _this.destination = empty;
	                break;
	            case 1:
	                if (!destinationOrNext) {
	                    _this.destination = empty;
	                    break;
	                }
	                if (typeof destinationOrNext === 'object') {
	                    if (destinationOrNext instanceof Subscriber) {
	                        _this.syncErrorThrowable = destinationOrNext.syncErrorThrowable;
	                        _this.destination = destinationOrNext;
	                        destinationOrNext.add(_this);
	                    }
	                    else {
	                        _this.syncErrorThrowable = true;
	                        _this.destination = new SafeSubscriber(_this, destinationOrNext);
	                    }
	                    break;
	                }
	            default:
	                _this.syncErrorThrowable = true;
	                _this.destination = new SafeSubscriber(_this, destinationOrNext, error, complete);
	                break;
	        }
	        return _this;
	    }
	    Subscriber.prototype[rxSubscriber] = function () { return this; };
	    Subscriber.create = function (next, error, complete) {
	        var subscriber = new Subscriber(next, error, complete);
	        subscriber.syncErrorThrowable = false;
	        return subscriber;
	    };
	    Subscriber.prototype.next = function (value) {
	        if (!this.isStopped) {
	            this._next(value);
	        }
	    };
	    Subscriber.prototype.error = function (err) {
	        if (!this.isStopped) {
	            this.isStopped = true;
	            this._error(err);
	        }
	    };
	    Subscriber.prototype.complete = function () {
	        if (!this.isStopped) {
	            this.isStopped = true;
	            this._complete();
	        }
	    };
	    Subscriber.prototype.unsubscribe = function () {
	        if (this.closed) {
	            return;
	        }
	        this.isStopped = true;
	        _super.prototype.unsubscribe.call(this);
	    };
	    Subscriber.prototype._next = function (value) {
	        this.destination.next(value);
	    };
	    Subscriber.prototype._error = function (err) {
	        this.destination.error(err);
	        this.unsubscribe();
	    };
	    Subscriber.prototype._complete = function () {
	        this.destination.complete();
	        this.unsubscribe();
	    };
	    Subscriber.prototype._unsubscribeAndRecycle = function () {
	        var _parentOrParents = this._parentOrParents;
	        this._parentOrParents = null;
	        this.unsubscribe();
	        this.closed = false;
	        this.isStopped = false;
	        this._parentOrParents = _parentOrParents;
	        return this;
	    };
	    return Subscriber;
	}(Subscription));
	var SafeSubscriber = /*@__PURE__*/ (function (_super) {
	    __extends(SafeSubscriber, _super);
	    function SafeSubscriber(_parentSubscriber, observerOrNext, error, complete) {
	        var _this = _super.call(this) || this;
	        _this._parentSubscriber = _parentSubscriber;
	        var next;
	        var context = _this;
	        if (isFunction(observerOrNext)) {
	            next = observerOrNext;
	        }
	        else if (observerOrNext) {
	            next = observerOrNext.next;
	            error = observerOrNext.error;
	            complete = observerOrNext.complete;
	            if (observerOrNext !== empty) {
	                context = Object.create(observerOrNext);
	                if (isFunction(context.unsubscribe)) {
	                    _this.add(context.unsubscribe.bind(context));
	                }
	                context.unsubscribe = _this.unsubscribe.bind(_this);
	            }
	        }
	        _this._context = context;
	        _this._next = next;
	        _this._error = error;
	        _this._complete = complete;
	        return _this;
	    }
	    SafeSubscriber.prototype.next = function (value) {
	        if (!this.isStopped && this._next) {
	            var _parentSubscriber = this._parentSubscriber;
	            if (!config.useDeprecatedSynchronousErrorHandling || !_parentSubscriber.syncErrorThrowable) {
	                this.__tryOrUnsub(this._next, value);
	            }
	            else if (this.__tryOrSetError(_parentSubscriber, this._next, value)) {
	                this.unsubscribe();
	            }
	        }
	    };
	    SafeSubscriber.prototype.error = function (err) {
	        if (!this.isStopped) {
	            var _parentSubscriber = this._parentSubscriber;
	            var useDeprecatedSynchronousErrorHandling = config.useDeprecatedSynchronousErrorHandling;
	            if (this._error) {
	                if (!useDeprecatedSynchronousErrorHandling || !_parentSubscriber.syncErrorThrowable) {
	                    this.__tryOrUnsub(this._error, err);
	                    this.unsubscribe();
	                }
	                else {
	                    this.__tryOrSetError(_parentSubscriber, this._error, err);
	                    this.unsubscribe();
	                }
	            }
	            else if (!_parentSubscriber.syncErrorThrowable) {
	                this.unsubscribe();
	                if (useDeprecatedSynchronousErrorHandling) {
	                    throw err;
	                }
	                hostReportError(err);
	            }
	            else {
	                if (useDeprecatedSynchronousErrorHandling) {
	                    _parentSubscriber.syncErrorValue = err;
	                    _parentSubscriber.syncErrorThrown = true;
	                }
	                else {
	                    hostReportError(err);
	                }
	                this.unsubscribe();
	            }
	        }
	    };
	    SafeSubscriber.prototype.complete = function () {
	        var _this = this;
	        if (!this.isStopped) {
	            var _parentSubscriber = this._parentSubscriber;
	            if (this._complete) {
	                var wrappedComplete = function () { return _this._complete.call(_this._context); };
	                if (!config.useDeprecatedSynchronousErrorHandling || !_parentSubscriber.syncErrorThrowable) {
	                    this.__tryOrUnsub(wrappedComplete);
	                    this.unsubscribe();
	                }
	                else {
	                    this.__tryOrSetError(_parentSubscriber, wrappedComplete);
	                    this.unsubscribe();
	                }
	            }
	            else {
	                this.unsubscribe();
	            }
	        }
	    };
	    SafeSubscriber.prototype.__tryOrUnsub = function (fn, value) {
	        try {
	            fn.call(this._context, value);
	        }
	        catch (err) {
	            this.unsubscribe();
	            if (config.useDeprecatedSynchronousErrorHandling) {
	                throw err;
	            }
	            else {
	                hostReportError(err);
	            }
	        }
	    };
	    SafeSubscriber.prototype.__tryOrSetError = function (parent, fn, value) {
	        if (!config.useDeprecatedSynchronousErrorHandling) {
	            throw new Error('bad call');
	        }
	        try {
	            fn.call(this._context, value);
	        }
	        catch (err) {
	            if (config.useDeprecatedSynchronousErrorHandling) {
	                parent.syncErrorValue = err;
	                parent.syncErrorThrown = true;
	                return true;
	            }
	            else {
	                hostReportError(err);
	                return true;
	            }
	        }
	        return false;
	    };
	    SafeSubscriber.prototype._unsubscribe = function () {
	        var _parentSubscriber = this._parentSubscriber;
	        this._context = null;
	        this._parentSubscriber = null;
	        _parentSubscriber.unsubscribe();
	    };
	    return SafeSubscriber;
	}(Subscriber));

	/** PURE_IMPORTS_START _Subscriber PURE_IMPORTS_END */
	function canReportError(observer) {
	    while (observer) {
	        var _a = observer, closed_1 = _a.closed, destination = _a.destination, isStopped = _a.isStopped;
	        if (closed_1 || isStopped) {
	            return false;
	        }
	        else if (destination && destination instanceof Subscriber) {
	            observer = destination;
	        }
	        else {
	            observer = null;
	        }
	    }
	    return true;
	}

	/** PURE_IMPORTS_START _Subscriber,_symbol_rxSubscriber,_Observer PURE_IMPORTS_END */
	function toSubscriber(nextOrObserver, error, complete) {
	    if (nextOrObserver) {
	        if (nextOrObserver instanceof Subscriber) {
	            return nextOrObserver;
	        }
	        if (nextOrObserver[rxSubscriber]) {
	            return nextOrObserver[rxSubscriber]();
	        }
	    }
	    if (!nextOrObserver && !error && !complete) {
	        return new Subscriber(empty);
	    }
	    return new Subscriber(nextOrObserver, error, complete);
	}

	/** PURE_IMPORTS_START  PURE_IMPORTS_END */
	var observable = /*@__PURE__*/ (function () { return typeof Symbol === 'function' && Symbol.observable || '@@observable'; })();

	/** PURE_IMPORTS_START  PURE_IMPORTS_END */
	function identity(x) {
	    return x;
	}

	/** PURE_IMPORTS_START _identity PURE_IMPORTS_END */
	function pipeFromArray(fns) {
	    if (fns.length === 0) {
	        return identity;
	    }
	    if (fns.length === 1) {
	        return fns[0];
	    }
	    return function piped(input) {
	        return fns.reduce(function (prev, fn) { return fn(prev); }, input);
	    };
	}

	/** PURE_IMPORTS_START _util_canReportError,_util_toSubscriber,_symbol_observable,_util_pipe,_config PURE_IMPORTS_END */
	var Observable = /*@__PURE__*/ (function () {
	    function Observable(subscribe) {
	        this._isScalar = false;
	        if (subscribe) {
	            this._subscribe = subscribe;
	        }
	    }
	    Observable.prototype.lift = function (operator) {
	        var observable = new Observable();
	        observable.source = this;
	        observable.operator = operator;
	        return observable;
	    };
	    Observable.prototype.subscribe = function (observerOrNext, error, complete) {
	        var operator = this.operator;
	        var sink = toSubscriber(observerOrNext, error, complete);
	        if (operator) {
	            sink.add(operator.call(sink, this.source));
	        }
	        else {
	            sink.add(this.source || (config.useDeprecatedSynchronousErrorHandling && !sink.syncErrorThrowable) ?
	                this._subscribe(sink) :
	                this._trySubscribe(sink));
	        }
	        if (config.useDeprecatedSynchronousErrorHandling) {
	            if (sink.syncErrorThrowable) {
	                sink.syncErrorThrowable = false;
	                if (sink.syncErrorThrown) {
	                    throw sink.syncErrorValue;
	                }
	            }
	        }
	        return sink;
	    };
	    Observable.prototype._trySubscribe = function (sink) {
	        try {
	            return this._subscribe(sink);
	        }
	        catch (err) {
	            if (config.useDeprecatedSynchronousErrorHandling) {
	                sink.syncErrorThrown = true;
	                sink.syncErrorValue = err;
	            }
	            if (canReportError(sink)) {
	                sink.error(err);
	            }
	            else {
	                console.warn(err);
	            }
	        }
	    };
	    Observable.prototype.forEach = function (next, promiseCtor) {
	        var _this = this;
	        promiseCtor = getPromiseCtor(promiseCtor);
	        return new promiseCtor(function (resolve, reject) {
	            var subscription;
	            subscription = _this.subscribe(function (value) {
	                try {
	                    next(value);
	                }
	                catch (err) {
	                    reject(err);
	                    if (subscription) {
	                        subscription.unsubscribe();
	                    }
	                }
	            }, reject, resolve);
	        });
	    };
	    Observable.prototype._subscribe = function (subscriber) {
	        var source = this.source;
	        return source && source.subscribe(subscriber);
	    };
	    Observable.prototype[observable] = function () {
	        return this;
	    };
	    Observable.prototype.pipe = function () {
	        var operations = [];
	        for (var _i = 0; _i < arguments.length; _i++) {
	            operations[_i] = arguments[_i];
	        }
	        if (operations.length === 0) {
	            return this;
	        }
	        return pipeFromArray(operations)(this);
	    };
	    Observable.prototype.toPromise = function (promiseCtor) {
	        var _this = this;
	        promiseCtor = getPromiseCtor(promiseCtor);
	        return new promiseCtor(function (resolve, reject) {
	            var value;
	            _this.subscribe(function (x) { return value = x; }, function (err) { return reject(err); }, function () { return resolve(value); });
	        });
	    };
	    Observable.create = function (subscribe) {
	        return new Observable(subscribe);
	    };
	    return Observable;
	}());
	function getPromiseCtor(promiseCtor) {
	    if (!promiseCtor) {
	        promiseCtor =  Promise;
	    }
	    if (!promiseCtor) {
	        throw new Error('no Promise impl found');
	    }
	    return promiseCtor;
	}

	/** PURE_IMPORTS_START  PURE_IMPORTS_END */
	var ObjectUnsubscribedErrorImpl = /*@__PURE__*/ (function () {
	    function ObjectUnsubscribedErrorImpl() {
	        Error.call(this);
	        this.message = 'object unsubscribed';
	        this.name = 'ObjectUnsubscribedError';
	        return this;
	    }
	    ObjectUnsubscribedErrorImpl.prototype = /*@__PURE__*/ Object.create(Error.prototype);
	    return ObjectUnsubscribedErrorImpl;
	})();
	var ObjectUnsubscribedError = ObjectUnsubscribedErrorImpl;

	/** PURE_IMPORTS_START tslib,_Subscription PURE_IMPORTS_END */
	var SubjectSubscription = /*@__PURE__*/ (function (_super) {
	    __extends(SubjectSubscription, _super);
	    function SubjectSubscription(subject, subscriber) {
	        var _this = _super.call(this) || this;
	        _this.subject = subject;
	        _this.subscriber = subscriber;
	        _this.closed = false;
	        return _this;
	    }
	    SubjectSubscription.prototype.unsubscribe = function () {
	        if (this.closed) {
	            return;
	        }
	        this.closed = true;
	        var subject = this.subject;
	        var observers = subject.observers;
	        this.subject = null;
	        if (!observers || observers.length === 0 || subject.isStopped || subject.closed) {
	            return;
	        }
	        var subscriberIndex = observers.indexOf(this.subscriber);
	        if (subscriberIndex !== -1) {
	            observers.splice(subscriberIndex, 1);
	        }
	    };
	    return SubjectSubscription;
	}(Subscription));

	/** PURE_IMPORTS_START tslib,_Observable,_Subscriber,_Subscription,_util_ObjectUnsubscribedError,_SubjectSubscription,_internal_symbol_rxSubscriber PURE_IMPORTS_END */
	var SubjectSubscriber = /*@__PURE__*/ (function (_super) {
	    __extends(SubjectSubscriber, _super);
	    function SubjectSubscriber(destination) {
	        var _this = _super.call(this, destination) || this;
	        _this.destination = destination;
	        return _this;
	    }
	    return SubjectSubscriber;
	}(Subscriber));
	var Subject = /*@__PURE__*/ (function (_super) {
	    __extends(Subject, _super);
	    function Subject() {
	        var _this = _super.call(this) || this;
	        _this.observers = [];
	        _this.closed = false;
	        _this.isStopped = false;
	        _this.hasError = false;
	        _this.thrownError = null;
	        return _this;
	    }
	    Subject.prototype[rxSubscriber] = function () {
	        return new SubjectSubscriber(this);
	    };
	    Subject.prototype.lift = function (operator) {
	        var subject = new AnonymousSubject(this, this);
	        subject.operator = operator;
	        return subject;
	    };
	    Subject.prototype.next = function (value) {
	        if (this.closed) {
	            throw new ObjectUnsubscribedError();
	        }
	        if (!this.isStopped) {
	            var observers = this.observers;
	            var len = observers.length;
	            var copy = observers.slice();
	            for (var i = 0; i < len; i++) {
	                copy[i].next(value);
	            }
	        }
	    };
	    Subject.prototype.error = function (err) {
	        if (this.closed) {
	            throw new ObjectUnsubscribedError();
	        }
	        this.hasError = true;
	        this.thrownError = err;
	        this.isStopped = true;
	        var observers = this.observers;
	        var len = observers.length;
	        var copy = observers.slice();
	        for (var i = 0; i < len; i++) {
	            copy[i].error(err);
	        }
	        this.observers.length = 0;
	    };
	    Subject.prototype.complete = function () {
	        if (this.closed) {
	            throw new ObjectUnsubscribedError();
	        }
	        this.isStopped = true;
	        var observers = this.observers;
	        var len = observers.length;
	        var copy = observers.slice();
	        for (var i = 0; i < len; i++) {
	            copy[i].complete();
	        }
	        this.observers.length = 0;
	    };
	    Subject.prototype.unsubscribe = function () {
	        this.isStopped = true;
	        this.closed = true;
	        this.observers = null;
	    };
	    Subject.prototype._trySubscribe = function (subscriber) {
	        if (this.closed) {
	            throw new ObjectUnsubscribedError();
	        }
	        else {
	            return _super.prototype._trySubscribe.call(this, subscriber);
	        }
	    };
	    Subject.prototype._subscribe = function (subscriber) {
	        if (this.closed) {
	            throw new ObjectUnsubscribedError();
	        }
	        else if (this.hasError) {
	            subscriber.error(this.thrownError);
	            return Subscription.EMPTY;
	        }
	        else if (this.isStopped) {
	            subscriber.complete();
	            return Subscription.EMPTY;
	        }
	        else {
	            this.observers.push(subscriber);
	            return new SubjectSubscription(this, subscriber);
	        }
	    };
	    Subject.prototype.asObservable = function () {
	        var observable = new Observable();
	        observable.source = this;
	        return observable;
	    };
	    Subject.create = function (destination, source) {
	        return new AnonymousSubject(destination, source);
	    };
	    return Subject;
	}(Observable));
	var AnonymousSubject = /*@__PURE__*/ (function (_super) {
	    __extends(AnonymousSubject, _super);
	    function AnonymousSubject(destination, source) {
	        var _this = _super.call(this) || this;
	        _this.destination = destination;
	        _this.source = source;
	        return _this;
	    }
	    AnonymousSubject.prototype.next = function (value) {
	        var destination = this.destination;
	        if (destination && destination.next) {
	            destination.next(value);
	        }
	    };
	    AnonymousSubject.prototype.error = function (err) {
	        var destination = this.destination;
	        if (destination && destination.error) {
	            this.destination.error(err);
	        }
	    };
	    AnonymousSubject.prototype.complete = function () {
	        var destination = this.destination;
	        if (destination && destination.complete) {
	            this.destination.complete();
	        }
	    };
	    AnonymousSubject.prototype._subscribe = function (subscriber) {
	        var source = this.source;
	        if (source) {
	            return this.source.subscribe(subscriber);
	        }
	        else {
	            return Subscription.EMPTY;
	        }
	    };
	    return AnonymousSubject;
	}(Subject));

	/** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */
	function refCount() {
	    return function refCountOperatorFunction(source) {
	        return source.lift(new RefCountOperator(source));
	    };
	}
	var RefCountOperator = /*@__PURE__*/ (function () {
	    function RefCountOperator(connectable) {
	        this.connectable = connectable;
	    }
	    RefCountOperator.prototype.call = function (subscriber, source) {
	        var connectable = this.connectable;
	        connectable._refCount++;
	        var refCounter = new RefCountSubscriber(subscriber, connectable);
	        var subscription = source.subscribe(refCounter);
	        if (!refCounter.closed) {
	            refCounter.connection = connectable.connect();
	        }
	        return subscription;
	    };
	    return RefCountOperator;
	}());
	var RefCountSubscriber = /*@__PURE__*/ (function (_super) {
	    __extends(RefCountSubscriber, _super);
	    function RefCountSubscriber(destination, connectable) {
	        var _this = _super.call(this, destination) || this;
	        _this.connectable = connectable;
	        return _this;
	    }
	    RefCountSubscriber.prototype._unsubscribe = function () {
	        var connectable = this.connectable;
	        if (!connectable) {
	            this.connection = null;
	            return;
	        }
	        this.connectable = null;
	        var refCount = connectable._refCount;
	        if (refCount <= 0) {
	            this.connection = null;
	            return;
	        }
	        connectable._refCount = refCount - 1;
	        if (refCount > 1) {
	            this.connection = null;
	            return;
	        }
	        var connection = this.connection;
	        var sharedConnection = connectable._connection;
	        this.connection = null;
	        if (sharedConnection && (!connection || sharedConnection === connection)) {
	            sharedConnection.unsubscribe();
	        }
	    };
	    return RefCountSubscriber;
	}(Subscriber));

	/** PURE_IMPORTS_START tslib,_Subject,_Observable,_Subscriber,_Subscription,_operators_refCount PURE_IMPORTS_END */
	var ConnectableObservable = /*@__PURE__*/ (function (_super) {
	    __extends(ConnectableObservable, _super);
	    function ConnectableObservable(source, subjectFactory) {
	        var _this = _super.call(this) || this;
	        _this.source = source;
	        _this.subjectFactory = subjectFactory;
	        _this._refCount = 0;
	        _this._isComplete = false;
	        return _this;
	    }
	    ConnectableObservable.prototype._subscribe = function (subscriber) {
	        return this.getSubject().subscribe(subscriber);
	    };
	    ConnectableObservable.prototype.getSubject = function () {
	        var subject = this._subject;
	        if (!subject || subject.isStopped) {
	            this._subject = this.subjectFactory();
	        }
	        return this._subject;
	    };
	    ConnectableObservable.prototype.connect = function () {
	        var connection = this._connection;
	        if (!connection) {
	            this._isComplete = false;
	            connection = this._connection = new Subscription();
	            connection.add(this.source
	                .subscribe(new ConnectableSubscriber(this.getSubject(), this)));
	            if (connection.closed) {
	                this._connection = null;
	                connection = Subscription.EMPTY;
	            }
	        }
	        return connection;
	    };
	    ConnectableObservable.prototype.refCount = function () {
	        return refCount()(this);
	    };
	    return ConnectableObservable;
	}(Observable));
	var connectableObservableDescriptor = /*@__PURE__*/ (function () {
	    var connectableProto = ConnectableObservable.prototype;
	    return {
	        operator: { value: null },
	        _refCount: { value: 0, writable: true },
	        _subject: { value: null, writable: true },
	        _connection: { value: null, writable: true },
	        _subscribe: { value: connectableProto._subscribe },
	        _isComplete: { value: connectableProto._isComplete, writable: true },
	        getSubject: { value: connectableProto.getSubject },
	        connect: { value: connectableProto.connect },
	        refCount: { value: connectableProto.refCount }
	    };
	})();
	var ConnectableSubscriber = /*@__PURE__*/ (function (_super) {
	    __extends(ConnectableSubscriber, _super);
	    function ConnectableSubscriber(destination, connectable) {
	        var _this = _super.call(this, destination) || this;
	        _this.connectable = connectable;
	        return _this;
	    }
	    ConnectableSubscriber.prototype._error = function (err) {
	        this._unsubscribe();
	        _super.prototype._error.call(this, err);
	    };
	    ConnectableSubscriber.prototype._complete = function () {
	        this.connectable._isComplete = true;
	        this._unsubscribe();
	        _super.prototype._complete.call(this);
	    };
	    ConnectableSubscriber.prototype._unsubscribe = function () {
	        var connectable = this.connectable;
	        if (connectable) {
	            this.connectable = null;
	            var connection = connectable._connection;
	            connectable._refCount = 0;
	            connectable._subject = null;
	            connectable._connection = null;
	            if (connection) {
	                connection.unsubscribe();
	            }
	        }
	    };
	    return ConnectableSubscriber;
	}(SubjectSubscriber));

	/** PURE_IMPORTS_START tslib,_Subscription PURE_IMPORTS_END */
	var Action = /*@__PURE__*/ (function (_super) {
	    __extends(Action, _super);
	    function Action(scheduler, work) {
	        return _super.call(this) || this;
	    }
	    Action.prototype.schedule = function (state, delay) {
	        return this;
	    };
	    return Action;
	}(Subscription));

	/** PURE_IMPORTS_START tslib,_Action PURE_IMPORTS_END */
	var AsyncAction = /*@__PURE__*/ (function (_super) {
	    __extends(AsyncAction, _super);
	    function AsyncAction(scheduler, work) {
	        var _this = _super.call(this, scheduler, work) || this;
	        _this.scheduler = scheduler;
	        _this.work = work;
	        _this.pending = false;
	        return _this;
	    }
	    AsyncAction.prototype.schedule = function (state, delay) {
	        if (delay === void 0) {
	            delay = 0;
	        }
	        if (this.closed) {
	            return this;
	        }
	        this.state = state;
	        var id = this.id;
	        var scheduler = this.scheduler;
	        if (id != null) {
	            this.id = this.recycleAsyncId(scheduler, id, delay);
	        }
	        this.pending = true;
	        this.delay = delay;
	        this.id = this.id || this.requestAsyncId(scheduler, this.id, delay);
	        return this;
	    };
	    AsyncAction.prototype.requestAsyncId = function (scheduler, id, delay) {
	        if (delay === void 0) {
	            delay = 0;
	        }
	        return setInterval(scheduler.flush.bind(scheduler, this), delay);
	    };
	    AsyncAction.prototype.recycleAsyncId = function (scheduler, id, delay) {
	        if (delay === void 0) {
	            delay = 0;
	        }
	        if (delay !== null && this.delay === delay && this.pending === false) {
	            return id;
	        }
	        clearInterval(id);
	        return undefined;
	    };
	    AsyncAction.prototype.execute = function (state, delay) {
	        if (this.closed) {
	            return new Error('executing a cancelled action');
	        }
	        this.pending = false;
	        var error = this._execute(state, delay);
	        if (error) {
	            return error;
	        }
	        else if (this.pending === false && this.id != null) {
	            this.id = this.recycleAsyncId(this.scheduler, this.id, null);
	        }
	    };
	    AsyncAction.prototype._execute = function (state, delay) {
	        var errored = false;
	        var errorValue = undefined;
	        try {
	            this.work(state);
	        }
	        catch (e) {
	            errored = true;
	            errorValue = !!e && e || new Error(e);
	        }
	        if (errored) {
	            this.unsubscribe();
	            return errorValue;
	        }
	    };
	    AsyncAction.prototype._unsubscribe = function () {
	        var id = this.id;
	        var scheduler = this.scheduler;
	        var actions = scheduler.actions;
	        var index = actions.indexOf(this);
	        this.work = null;
	        this.state = null;
	        this.pending = false;
	        this.scheduler = null;
	        if (index !== -1) {
	            actions.splice(index, 1);
	        }
	        if (id != null) {
	            this.id = this.recycleAsyncId(scheduler, id, null);
	        }
	        this.delay = null;
	    };
	    return AsyncAction;
	}(Action));

	var Scheduler = /*@__PURE__*/ (function () {
	    function Scheduler(SchedulerAction, now) {
	        if (now === void 0) {
	            now = Scheduler.now;
	        }
	        this.SchedulerAction = SchedulerAction;
	        this.now = now;
	    }
	    Scheduler.prototype.schedule = function (work, delay, state) {
	        if (delay === void 0) {
	            delay = 0;
	        }
	        return new this.SchedulerAction(this, work).schedule(state, delay);
	    };
	    Scheduler.now = function () { return Date.now(); };
	    return Scheduler;
	}());

	/** PURE_IMPORTS_START tslib,_Scheduler PURE_IMPORTS_END */
	var AsyncScheduler = /*@__PURE__*/ (function (_super) {
	    __extends(AsyncScheduler, _super);
	    function AsyncScheduler(SchedulerAction, now) {
	        if (now === void 0) {
	            now = Scheduler.now;
	        }
	        var _this = _super.call(this, SchedulerAction, function () {
	            if (AsyncScheduler.delegate && AsyncScheduler.delegate !== _this) {
	                return AsyncScheduler.delegate.now();
	            }
	            else {
	                return now();
	            }
	        }) || this;
	        _this.actions = [];
	        _this.active = false;
	        _this.scheduled = undefined;
	        return _this;
	    }
	    AsyncScheduler.prototype.schedule = function (work, delay, state) {
	        if (delay === void 0) {
	            delay = 0;
	        }
	        if (AsyncScheduler.delegate && AsyncScheduler.delegate !== this) {
	            return AsyncScheduler.delegate.schedule(work, delay, state);
	        }
	        else {
	            return _super.prototype.schedule.call(this, work, delay, state);
	        }
	    };
	    AsyncScheduler.prototype.flush = function (action) {
	        var actions = this.actions;
	        if (this.active) {
	            actions.push(action);
	            return;
	        }
	        var error;
	        this.active = true;
	        do {
	            if (error = action.execute(action.state, action.delay)) {
	                break;
	            }
	        } while (action = actions.shift());
	        this.active = false;
	        if (error) {
	            while (action = actions.shift()) {
	                action.unsubscribe();
	            }
	            throw error;
	        }
	    };
	    return AsyncScheduler;
	}(Scheduler));

	/** PURE_IMPORTS_START _Observable PURE_IMPORTS_END */
	var EMPTY = /*@__PURE__*/ new Observable(function (subscriber) { return subscriber.complete(); });
	function empty$1(scheduler) {
	    return scheduler ? emptyScheduled(scheduler) : EMPTY;
	}
	function emptyScheduled(scheduler) {
	    return new Observable(function (subscriber) { return scheduler.schedule(function () { return subscriber.complete(); }); });
	}

	/** PURE_IMPORTS_START  PURE_IMPORTS_END */
	function isScheduler(value) {
	    return value && typeof value.schedule === 'function';
	}

	/** PURE_IMPORTS_START  PURE_IMPORTS_END */
	var subscribeToArray = function (array) {
	    return function (subscriber) {
	        for (var i = 0, len = array.length; i < len && !subscriber.closed; i++) {
	            subscriber.next(array[i]);
	        }
	        subscriber.complete();
	    };
	};

	/** PURE_IMPORTS_START _Observable,_Subscription PURE_IMPORTS_END */
	function scheduleArray(input, scheduler) {
	    return new Observable(function (subscriber) {
	        var sub = new Subscription();
	        var i = 0;
	        sub.add(scheduler.schedule(function () {
	            if (i === input.length) {
	                subscriber.complete();
	                return;
	            }
	            subscriber.next(input[i++]);
	            if (!subscriber.closed) {
	                sub.add(this.schedule());
	            }
	        }));
	        return sub;
	    });
	}

	/** PURE_IMPORTS_START _Observable,_util_subscribeToArray,_scheduled_scheduleArray PURE_IMPORTS_END */
	function fromArray(input, scheduler) {
	    if (!scheduler) {
	        return new Observable(subscribeToArray(input));
	    }
	    else {
	        return scheduleArray(input, scheduler);
	    }
	}

	/** PURE_IMPORTS_START _util_isScheduler,_fromArray,_scheduled_scheduleArray PURE_IMPORTS_END */
	function of() {
	    var args = [];
	    for (var _i = 0; _i < arguments.length; _i++) {
	        args[_i] = arguments[_i];
	    }
	    var scheduler = args[args.length - 1];
	    if (isScheduler(scheduler)) {
	        args.pop();
	        return scheduleArray(args, scheduler);
	    }
	    else {
	        return fromArray(args);
	    }
	}

	/** PURE_IMPORTS_START _Observable PURE_IMPORTS_END */
	function throwError(error, scheduler) {
	    if (!scheduler) {
	        return new Observable(function (subscriber) { return subscriber.error(error); });
	    }
	    else {
	        return new Observable(function (subscriber) { return scheduler.schedule(dispatch, 0, { error: error, subscriber: subscriber }); });
	    }
	}
	function dispatch(_a) {
	    var error = _a.error, subscriber = _a.subscriber;
	    subscriber.error(error);
	}

	/** PURE_IMPORTS_START _AsyncAction,_AsyncScheduler PURE_IMPORTS_END */
	var async = /*@__PURE__*/ new AsyncScheduler(AsyncAction);

	/** PURE_IMPORTS_START  PURE_IMPORTS_END */
	function noop() { }

	/** PURE_IMPORTS_START _Observable PURE_IMPORTS_END */
	function isObservable(obj) {
	    return !!obj && (obj instanceof Observable || (typeof obj.lift === 'function' && typeof obj.subscribe === 'function'));
	}

	/** PURE_IMPORTS_START  PURE_IMPORTS_END */
	var ArgumentOutOfRangeErrorImpl = /*@__PURE__*/ (function () {
	    function ArgumentOutOfRangeErrorImpl() {
	        Error.call(this);
	        this.message = 'argument out of range';
	        this.name = 'ArgumentOutOfRangeError';
	        return this;
	    }
	    ArgumentOutOfRangeErrorImpl.prototype = /*@__PURE__*/ Object.create(Error.prototype);
	    return ArgumentOutOfRangeErrorImpl;
	})();
	var ArgumentOutOfRangeError = ArgumentOutOfRangeErrorImpl;

	/** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */
	function map(project, thisArg) {
	    return function mapOperation(source) {
	        if (typeof project !== 'function') {
	            throw new TypeError('argument is not a function. Are you looking for `mapTo()`?');
	        }
	        return source.lift(new MapOperator(project, thisArg));
	    };
	}
	var MapOperator = /*@__PURE__*/ (function () {
	    function MapOperator(project, thisArg) {
	        this.project = project;
	        this.thisArg = thisArg;
	    }
	    MapOperator.prototype.call = function (subscriber, source) {
	        return source.subscribe(new MapSubscriber(subscriber, this.project, this.thisArg));
	    };
	    return MapOperator;
	}());
	var MapSubscriber = /*@__PURE__*/ (function (_super) {
	    __extends(MapSubscriber, _super);
	    function MapSubscriber(destination, project, thisArg) {
	        var _this = _super.call(this, destination) || this;
	        _this.project = project;
	        _this.count = 0;
	        _this.thisArg = thisArg || _this;
	        return _this;
	    }
	    MapSubscriber.prototype._next = function (value) {
	        var result;
	        try {
	            result = this.project.call(this.thisArg, value, this.count++);
	        }
	        catch (err) {
	            this.destination.error(err);
	            return;
	        }
	        this.destination.next(result);
	    };
	    return MapSubscriber;
	}(Subscriber));

	/** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */
	var OuterSubscriber = /*@__PURE__*/ (function (_super) {
	    __extends(OuterSubscriber, _super);
	    function OuterSubscriber() {
	        return _super !== null && _super.apply(this, arguments) || this;
	    }
	    OuterSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
	        this.destination.next(innerValue);
	    };
	    OuterSubscriber.prototype.notifyError = function (error, innerSub) {
	        this.destination.error(error);
	    };
	    OuterSubscriber.prototype.notifyComplete = function (innerSub) {
	        this.destination.complete();
	    };
	    return OuterSubscriber;
	}(Subscriber));

	/** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */
	var InnerSubscriber = /*@__PURE__*/ (function (_super) {
	    __extends(InnerSubscriber, _super);
	    function InnerSubscriber(parent, outerValue, outerIndex) {
	        var _this = _super.call(this) || this;
	        _this.parent = parent;
	        _this.outerValue = outerValue;
	        _this.outerIndex = outerIndex;
	        _this.index = 0;
	        return _this;
	    }
	    InnerSubscriber.prototype._next = function (value) {
	        this.parent.notifyNext(this.outerValue, value, this.outerIndex, this.index++, this);
	    };
	    InnerSubscriber.prototype._error = function (error) {
	        this.parent.notifyError(error, this);
	        this.unsubscribe();
	    };
	    InnerSubscriber.prototype._complete = function () {
	        this.parent.notifyComplete(this);
	        this.unsubscribe();
	    };
	    return InnerSubscriber;
	}(Subscriber));

	/** PURE_IMPORTS_START _hostReportError PURE_IMPORTS_END */
	var subscribeToPromise = function (promise) {
	    return function (subscriber) {
	        promise.then(function (value) {
	            if (!subscriber.closed) {
	                subscriber.next(value);
	                subscriber.complete();
	            }
	        }, function (err) { return subscriber.error(err); })
	            .then(null, hostReportError);
	        return subscriber;
	    };
	};

	/** PURE_IMPORTS_START  PURE_IMPORTS_END */
	function getSymbolIterator() {
	    if (typeof Symbol !== 'function' || !Symbol.iterator) {
	        return '@@iterator';
	    }
	    return Symbol.iterator;
	}
	var iterator = /*@__PURE__*/ getSymbolIterator();

	/** PURE_IMPORTS_START _symbol_iterator PURE_IMPORTS_END */
	var subscribeToIterable = function (iterable) {
	    return function (subscriber) {
	        var iterator$1 = iterable[iterator]();
	        do {
	            var item = iterator$1.next();
	            if (item.done) {
	                subscriber.complete();
	                break;
	            }
	            subscriber.next(item.value);
	            if (subscriber.closed) {
	                break;
	            }
	        } while (true);
	        if (typeof iterator$1.return === 'function') {
	            subscriber.add(function () {
	                if (iterator$1.return) {
	                    iterator$1.return();
	                }
	            });
	        }
	        return subscriber;
	    };
	};

	/** PURE_IMPORTS_START _symbol_observable PURE_IMPORTS_END */
	var subscribeToObservable = function (obj) {
	    return function (subscriber) {
	        var obs = obj[observable]();
	        if (typeof obs.subscribe !== 'function') {
	            throw new TypeError('Provided object does not correctly implement Symbol.observable');
	        }
	        else {
	            return obs.subscribe(subscriber);
	        }
	    };
	};

	/** PURE_IMPORTS_START  PURE_IMPORTS_END */
	var isArrayLike = (function (x) { return x && typeof x.length === 'number' && typeof x !== 'function'; });

	/** PURE_IMPORTS_START  PURE_IMPORTS_END */
	function isPromise$1(value) {
	    return !!value && typeof value.subscribe !== 'function' && typeof value.then === 'function';
	}

	/** PURE_IMPORTS_START _subscribeToArray,_subscribeToPromise,_subscribeToIterable,_subscribeToObservable,_isArrayLike,_isPromise,_isObject,_symbol_iterator,_symbol_observable PURE_IMPORTS_END */
	var subscribeTo = function (result) {
	    if (!!result && typeof result[observable] === 'function') {
	        return subscribeToObservable(result);
	    }
	    else if (isArrayLike(result)) {
	        return subscribeToArray(result);
	    }
	    else if (isPromise$1(result)) {
	        return subscribeToPromise(result);
	    }
	    else if (!!result && typeof result[iterator] === 'function') {
	        return subscribeToIterable(result);
	    }
	    else {
	        var value = isObject$1(result) ? 'an invalid object' : "'" + result + "'";
	        var msg = "You provided " + value + " where a stream was expected."
	            + ' You can provide an Observable, Promise, Array, or Iterable.';
	        throw new TypeError(msg);
	    }
	};

	/** PURE_IMPORTS_START _InnerSubscriber,_subscribeTo,_Observable PURE_IMPORTS_END */
	function subscribeToResult(outerSubscriber, result, outerValue, outerIndex, innerSubscriber) {
	    if (innerSubscriber === void 0) {
	        innerSubscriber = new InnerSubscriber(outerSubscriber, outerValue, outerIndex);
	    }
	    if (innerSubscriber.closed) {
	        return undefined;
	    }
	    if (result instanceof Observable) {
	        return result.subscribe(innerSubscriber);
	    }
	    return subscribeTo(result)(innerSubscriber);
	}

	/** PURE_IMPORTS_START _Observable,_Subscription,_symbol_observable PURE_IMPORTS_END */
	function scheduleObservable(input, scheduler) {
	    return new Observable(function (subscriber) {
	        var sub = new Subscription();
	        sub.add(scheduler.schedule(function () {
	            var observable$1 = input[observable]();
	            sub.add(observable$1.subscribe({
	                next: function (value) { sub.add(scheduler.schedule(function () { return subscriber.next(value); })); },
	                error: function (err) { sub.add(scheduler.schedule(function () { return subscriber.error(err); })); },
	                complete: function () { sub.add(scheduler.schedule(function () { return subscriber.complete(); })); },
	            }));
	        }));
	        return sub;
	    });
	}

	/** PURE_IMPORTS_START _Observable,_Subscription PURE_IMPORTS_END */
	function schedulePromise(input, scheduler) {
	    return new Observable(function (subscriber) {
	        var sub = new Subscription();
	        sub.add(scheduler.schedule(function () {
	            return input.then(function (value) {
	                sub.add(scheduler.schedule(function () {
	                    subscriber.next(value);
	                    sub.add(scheduler.schedule(function () { return subscriber.complete(); }));
	                }));
	            }, function (err) {
	                sub.add(scheduler.schedule(function () { return subscriber.error(err); }));
	            });
	        }));
	        return sub;
	    });
	}

	/** PURE_IMPORTS_START _Observable,_Subscription,_symbol_iterator PURE_IMPORTS_END */
	function scheduleIterable(input, scheduler) {
	    if (!input) {
	        throw new Error('Iterable cannot be null');
	    }
	    return new Observable(function (subscriber) {
	        var sub = new Subscription();
	        var iterator$1;
	        sub.add(function () {
	            if (iterator$1 && typeof iterator$1.return === 'function') {
	                iterator$1.return();
	            }
	        });
	        sub.add(scheduler.schedule(function () {
	            iterator$1 = input[iterator]();
	            sub.add(scheduler.schedule(function () {
	                if (subscriber.closed) {
	                    return;
	                }
	                var value;
	                var done;
	                try {
	                    var result = iterator$1.next();
	                    value = result.value;
	                    done = result.done;
	                }
	                catch (err) {
	                    subscriber.error(err);
	                    return;
	                }
	                if (done) {
	                    subscriber.complete();
	                }
	                else {
	                    subscriber.next(value);
	                    this.schedule();
	                }
	            }));
	        }));
	        return sub;
	    });
	}

	/** PURE_IMPORTS_START _symbol_observable PURE_IMPORTS_END */
	function isInteropObservable(input) {
	    return input && typeof input[observable] === 'function';
	}

	/** PURE_IMPORTS_START _symbol_iterator PURE_IMPORTS_END */
	function isIterable(input) {
	    return input && typeof input[iterator] === 'function';
	}

	/** PURE_IMPORTS_START _scheduleObservable,_schedulePromise,_scheduleArray,_scheduleIterable,_util_isInteropObservable,_util_isPromise,_util_isArrayLike,_util_isIterable PURE_IMPORTS_END */
	function scheduled(input, scheduler) {
	    if (input != null) {
	        if (isInteropObservable(input)) {
	            return scheduleObservable(input, scheduler);
	        }
	        else if (isPromise$1(input)) {
	            return schedulePromise(input, scheduler);
	        }
	        else if (isArrayLike(input)) {
	            return scheduleArray(input, scheduler);
	        }
	        else if (isIterable(input) || typeof input === 'string') {
	            return scheduleIterable(input, scheduler);
	        }
	    }
	    throw new TypeError((input !== null && typeof input || input) + ' is not observable');
	}

	/** PURE_IMPORTS_START _Observable,_util_subscribeTo,_scheduled_scheduled PURE_IMPORTS_END */
	function from$1(input, scheduler) {
	    if (!scheduler) {
	        if (input instanceof Observable) {
	            return input;
	        }
	        return new Observable(subscribeTo(input));
	    }
	    else {
	        return scheduled(input, scheduler);
	    }
	}

	/** PURE_IMPORTS_START tslib,_util_subscribeToResult,_OuterSubscriber,_InnerSubscriber,_map,_observable_from PURE_IMPORTS_END */
	function mergeMap(project, resultSelector, concurrent) {
	    if (concurrent === void 0) {
	        concurrent = Number.POSITIVE_INFINITY;
	    }
	    if (typeof resultSelector === 'function') {
	        return function (source) { return source.pipe(mergeMap(function (a, i) { return from$1(project(a, i)).pipe(map(function (b, ii) { return resultSelector(a, b, i, ii); })); }, concurrent)); };
	    }
	    else if (typeof resultSelector === 'number') {
	        concurrent = resultSelector;
	    }
	    return function (source) { return source.lift(new MergeMapOperator(project, concurrent)); };
	}
	var MergeMapOperator = /*@__PURE__*/ (function () {
	    function MergeMapOperator(project, concurrent) {
	        if (concurrent === void 0) {
	            concurrent = Number.POSITIVE_INFINITY;
	        }
	        this.project = project;
	        this.concurrent = concurrent;
	    }
	    MergeMapOperator.prototype.call = function (observer, source) {
	        return source.subscribe(new MergeMapSubscriber(observer, this.project, this.concurrent));
	    };
	    return MergeMapOperator;
	}());
	var MergeMapSubscriber = /*@__PURE__*/ (function (_super) {
	    __extends(MergeMapSubscriber, _super);
	    function MergeMapSubscriber(destination, project, concurrent) {
	        if (concurrent === void 0) {
	            concurrent = Number.POSITIVE_INFINITY;
	        }
	        var _this = _super.call(this, destination) || this;
	        _this.project = project;
	        _this.concurrent = concurrent;
	        _this.hasCompleted = false;
	        _this.buffer = [];
	        _this.active = 0;
	        _this.index = 0;
	        return _this;
	    }
	    MergeMapSubscriber.prototype._next = function (value) {
	        if (this.active < this.concurrent) {
	            this._tryNext(value);
	        }
	        else {
	            this.buffer.push(value);
	        }
	    };
	    MergeMapSubscriber.prototype._tryNext = function (value) {
	        var result;
	        var index = this.index++;
	        try {
	            result = this.project(value, index);
	        }
	        catch (err) {
	            this.destination.error(err);
	            return;
	        }
	        this.active++;
	        this._innerSub(result, value, index);
	    };
	    MergeMapSubscriber.prototype._innerSub = function (ish, value, index) {
	        var innerSubscriber = new InnerSubscriber(this, value, index);
	        var destination = this.destination;
	        destination.add(innerSubscriber);
	        var innerSubscription = subscribeToResult(this, ish, undefined, undefined, innerSubscriber);
	        if (innerSubscription !== innerSubscriber) {
	            destination.add(innerSubscription);
	        }
	    };
	    MergeMapSubscriber.prototype._complete = function () {
	        this.hasCompleted = true;
	        if (this.active === 0 && this.buffer.length === 0) {
	            this.destination.complete();
	        }
	        this.unsubscribe();
	    };
	    MergeMapSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
	        this.destination.next(innerValue);
	    };
	    MergeMapSubscriber.prototype.notifyComplete = function (innerSub) {
	        var buffer = this.buffer;
	        this.remove(innerSub);
	        this.active--;
	        if (buffer.length > 0) {
	            this._next(buffer.shift());
	        }
	        else if (this.active === 0 && this.hasCompleted) {
	            this.destination.complete();
	        }
	    };
	    return MergeMapSubscriber;
	}(OuterSubscriber));

	/** PURE_IMPORTS_START _mergeMap,_util_identity PURE_IMPORTS_END */
	function mergeAll(concurrent) {
	    if (concurrent === void 0) {
	        concurrent = Number.POSITIVE_INFINITY;
	    }
	    return mergeMap(identity, concurrent);
	}

	/** PURE_IMPORTS_START _mergeAll PURE_IMPORTS_END */
	function concatAll() {
	    return mergeAll(1);
	}

	/** PURE_IMPORTS_START _of,_operators_concatAll PURE_IMPORTS_END */
	function concat() {
	    var observables = [];
	    for (var _i = 0; _i < arguments.length; _i++) {
	        observables[_i] = arguments[_i];
	    }
	    return concatAll()(of.apply(void 0, observables));
	}

	/** PURE_IMPORTS_START _Observable,_util_isArray,_operators_map,_util_isObject,_from PURE_IMPORTS_END */
	function forkJoin() {
	    var sources = [];
	    for (var _i = 0; _i < arguments.length; _i++) {
	        sources[_i] = arguments[_i];
	    }
	    if (sources.length === 1) {
	        var first_1 = sources[0];
	        if (isArray$1(first_1)) {
	            return forkJoinInternal(first_1, null);
	        }
	        if (isObject$1(first_1) && Object.getPrototypeOf(first_1) === Object.prototype) {
	            var keys = Object.keys(first_1);
	            return forkJoinInternal(keys.map(function (key) { return first_1[key]; }), keys);
	        }
	    }
	    if (typeof sources[sources.length - 1] === 'function') {
	        var resultSelector_1 = sources.pop();
	        sources = (sources.length === 1 && isArray$1(sources[0])) ? sources[0] : sources;
	        return forkJoinInternal(sources, null).pipe(map(function (args) { return resultSelector_1.apply(void 0, args); }));
	    }
	    return forkJoinInternal(sources, null);
	}
	function forkJoinInternal(sources, keys) {
	    return new Observable(function (subscriber) {
	        var len = sources.length;
	        if (len === 0) {
	            subscriber.complete();
	            return;
	        }
	        var values = new Array(len);
	        var completed = 0;
	        var emitted = 0;
	        var _loop_1 = function (i) {
	            var source = from$1(sources[i]);
	            var hasValue = false;
	            subscriber.add(source.subscribe({
	                next: function (value) {
	                    if (!hasValue) {
	                        hasValue = true;
	                        emitted++;
	                    }
	                    values[i] = value;
	                },
	                error: function (err) { return subscriber.error(err); },
	                complete: function () {
	                    completed++;
	                    if (completed === len || !hasValue) {
	                        if (emitted === len) {
	                            subscriber.next(keys ?
	                                keys.reduce(function (result, key, i) { return (result[key] = values[i], result); }, {}) :
	                                values);
	                        }
	                        subscriber.complete();
	                    }
	                }
	            }));
	        };
	        for (var i = 0; i < len; i++) {
	            _loop_1(i);
	        }
	    });
	}

	/** PURE_IMPORTS_START _Observable,_util_isScheduler,_operators_mergeAll,_fromArray PURE_IMPORTS_END */
	function merge() {
	    var observables = [];
	    for (var _i = 0; _i < arguments.length; _i++) {
	        observables[_i] = arguments[_i];
	    }
	    var concurrent = Number.POSITIVE_INFINITY;
	    var scheduler = null;
	    var last = observables[observables.length - 1];
	    if (isScheduler(last)) {
	        scheduler = observables.pop();
	        if (observables.length > 1 && typeof observables[observables.length - 1] === 'number') {
	            concurrent = observables.pop();
	        }
	    }
	    else if (typeof last === 'number') {
	        concurrent = observables.pop();
	    }
	    if (scheduler === null && observables.length === 1 && observables[0] instanceof Observable) {
	        return observables[0];
	    }
	    return mergeAll(concurrent)(fromArray(observables, scheduler));
	}

	/** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */
	function filter(predicate, thisArg) {
	    return function filterOperatorFunction(source) {
	        return source.lift(new FilterOperator(predicate, thisArg));
	    };
	}
	var FilterOperator = /*@__PURE__*/ (function () {
	    function FilterOperator(predicate, thisArg) {
	        this.predicate = predicate;
	        this.thisArg = thisArg;
	    }
	    FilterOperator.prototype.call = function (subscriber, source) {
	        return source.subscribe(new FilterSubscriber(subscriber, this.predicate, this.thisArg));
	    };
	    return FilterOperator;
	}());
	var FilterSubscriber = /*@__PURE__*/ (function (_super) {
	    __extends(FilterSubscriber, _super);
	    function FilterSubscriber(destination, predicate, thisArg) {
	        var _this = _super.call(this, destination) || this;
	        _this.predicate = predicate;
	        _this.thisArg = thisArg;
	        _this.count = 0;
	        return _this;
	    }
	    FilterSubscriber.prototype._next = function (value) {
	        var result;
	        try {
	            result = this.predicate.call(this.thisArg, value, this.count++);
	        }
	        catch (err) {
	            this.destination.error(err);
	            return;
	        }
	        if (result) {
	            this.destination.next(value);
	        }
	    };
	    return FilterSubscriber;
	}(Subscriber));

	/** PURE_IMPORTS_START tslib,_OuterSubscriber,_InnerSubscriber,_util_subscribeToResult PURE_IMPORTS_END */
	function catchError(selector) {
	    return function catchErrorOperatorFunction(source) {
	        var operator = new CatchOperator(selector);
	        var caught = source.lift(operator);
	        return (operator.caught = caught);
	    };
	}
	var CatchOperator = /*@__PURE__*/ (function () {
	    function CatchOperator(selector) {
	        this.selector = selector;
	    }
	    CatchOperator.prototype.call = function (subscriber, source) {
	        return source.subscribe(new CatchSubscriber(subscriber, this.selector, this.caught));
	    };
	    return CatchOperator;
	}());
	var CatchSubscriber = /*@__PURE__*/ (function (_super) {
	    __extends(CatchSubscriber, _super);
	    function CatchSubscriber(destination, selector, caught) {
	        var _this = _super.call(this, destination) || this;
	        _this.selector = selector;
	        _this.caught = caught;
	        return _this;
	    }
	    CatchSubscriber.prototype.error = function (err) {
	        if (!this.isStopped) {
	            var result = void 0;
	            try {
	                result = this.selector(err, this.caught);
	            }
	            catch (err2) {
	                _super.prototype.error.call(this, err2);
	                return;
	            }
	            this._unsubscribeAndRecycle();
	            var innerSubscriber = new InnerSubscriber(this, undefined, undefined);
	            this.add(innerSubscriber);
	            var innerSubscription = subscribeToResult(this, result, undefined, undefined, innerSubscriber);
	            if (innerSubscription !== innerSubscriber) {
	                this.add(innerSubscription);
	            }
	        }
	    };
	    return CatchSubscriber;
	}(OuterSubscriber));

	/** PURE_IMPORTS_START _mergeMap PURE_IMPORTS_END */
	function concatMap(project, resultSelector) {
	    return mergeMap(project, resultSelector, 1);
	}

	/** PURE_IMPORTS_START tslib,_Subscriber,_scheduler_async PURE_IMPORTS_END */
	function debounceTime(dueTime, scheduler) {
	    if (scheduler === void 0) {
	        scheduler = async;
	    }
	    return function (source) { return source.lift(new DebounceTimeOperator(dueTime, scheduler)); };
	}
	var DebounceTimeOperator = /*@__PURE__*/ (function () {
	    function DebounceTimeOperator(dueTime, scheduler) {
	        this.dueTime = dueTime;
	        this.scheduler = scheduler;
	    }
	    DebounceTimeOperator.prototype.call = function (subscriber, source) {
	        return source.subscribe(new DebounceTimeSubscriber(subscriber, this.dueTime, this.scheduler));
	    };
	    return DebounceTimeOperator;
	}());
	var DebounceTimeSubscriber = /*@__PURE__*/ (function (_super) {
	    __extends(DebounceTimeSubscriber, _super);
	    function DebounceTimeSubscriber(destination, dueTime, scheduler) {
	        var _this = _super.call(this, destination) || this;
	        _this.dueTime = dueTime;
	        _this.scheduler = scheduler;
	        _this.debouncedSubscription = null;
	        _this.lastValue = null;
	        _this.hasValue = false;
	        return _this;
	    }
	    DebounceTimeSubscriber.prototype._next = function (value) {
	        this.clearDebounce();
	        this.lastValue = value;
	        this.hasValue = true;
	        this.add(this.debouncedSubscription = this.scheduler.schedule(dispatchNext, this.dueTime, this));
	    };
	    DebounceTimeSubscriber.prototype._complete = function () {
	        this.debouncedNext();
	        this.destination.complete();
	    };
	    DebounceTimeSubscriber.prototype.debouncedNext = function () {
	        this.clearDebounce();
	        if (this.hasValue) {
	            var lastValue = this.lastValue;
	            this.lastValue = null;
	            this.hasValue = false;
	            this.destination.next(lastValue);
	        }
	    };
	    DebounceTimeSubscriber.prototype.clearDebounce = function () {
	        var debouncedSubscription = this.debouncedSubscription;
	        if (debouncedSubscription !== null) {
	            this.remove(debouncedSubscription);
	            debouncedSubscription.unsubscribe();
	            this.debouncedSubscription = null;
	        }
	    };
	    return DebounceTimeSubscriber;
	}(Subscriber));
	function dispatchNext(subscriber) {
	    subscriber.debouncedNext();
	}

	/** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */
	function distinctUntilChanged(compare, keySelector) {
	    return function (source) { return source.lift(new DistinctUntilChangedOperator(compare, keySelector)); };
	}
	var DistinctUntilChangedOperator = /*@__PURE__*/ (function () {
	    function DistinctUntilChangedOperator(compare, keySelector) {
	        this.compare = compare;
	        this.keySelector = keySelector;
	    }
	    DistinctUntilChangedOperator.prototype.call = function (subscriber, source) {
	        return source.subscribe(new DistinctUntilChangedSubscriber(subscriber, this.compare, this.keySelector));
	    };
	    return DistinctUntilChangedOperator;
	}());
	var DistinctUntilChangedSubscriber = /*@__PURE__*/ (function (_super) {
	    __extends(DistinctUntilChangedSubscriber, _super);
	    function DistinctUntilChangedSubscriber(destination, compare, keySelector) {
	        var _this = _super.call(this, destination) || this;
	        _this.keySelector = keySelector;
	        _this.hasKey = false;
	        if (typeof compare === 'function') {
	            _this.compare = compare;
	        }
	        return _this;
	    }
	    DistinctUntilChangedSubscriber.prototype.compare = function (x, y) {
	        return x === y;
	    };
	    DistinctUntilChangedSubscriber.prototype._next = function (value) {
	        var key;
	        try {
	            var keySelector = this.keySelector;
	            key = keySelector ? keySelector(value) : value;
	        }
	        catch (err) {
	            return this.destination.error(err);
	        }
	        var result = false;
	        if (this.hasKey) {
	            try {
	                var compare = this.compare;
	                result = compare(this.key, key);
	            }
	            catch (err) {
	                return this.destination.error(err);
	            }
	        }
	        else {
	            this.hasKey = true;
	        }
	        if (!result) {
	            this.key = key;
	            this.destination.next(value);
	        }
	    };
	    return DistinctUntilChangedSubscriber;
	}(Subscriber));

	/** PURE_IMPORTS_START tslib,_Subscriber,_util_ArgumentOutOfRangeError,_observable_empty PURE_IMPORTS_END */
	function take(count) {
	    return function (source) {
	        if (count === 0) {
	            return empty$1();
	        }
	        else {
	            return source.lift(new TakeOperator(count));
	        }
	    };
	}
	var TakeOperator = /*@__PURE__*/ (function () {
	    function TakeOperator(total) {
	        this.total = total;
	        if (this.total < 0) {
	            throw new ArgumentOutOfRangeError;
	        }
	    }
	    TakeOperator.prototype.call = function (subscriber, source) {
	        return source.subscribe(new TakeSubscriber(subscriber, this.total));
	    };
	    return TakeOperator;
	}());
	var TakeSubscriber = /*@__PURE__*/ (function (_super) {
	    __extends(TakeSubscriber, _super);
	    function TakeSubscriber(destination, total) {
	        var _this = _super.call(this, destination) || this;
	        _this.total = total;
	        _this.count = 0;
	        return _this;
	    }
	    TakeSubscriber.prototype._next = function (value) {
	        var total = this.total;
	        var count = ++this.count;
	        if (count <= total) {
	            this.destination.next(value);
	            if (count === total) {
	                this.destination.complete();
	                this.unsubscribe();
	            }
	        }
	    };
	    return TakeSubscriber;
	}(Subscriber));

	/** PURE_IMPORTS_START tslib,_Subscriber,_Subscription PURE_IMPORTS_END */
	function finalize(callback) {
	    return function (source) { return source.lift(new FinallyOperator(callback)); };
	}
	var FinallyOperator = /*@__PURE__*/ (function () {
	    function FinallyOperator(callback) {
	        this.callback = callback;
	    }
	    FinallyOperator.prototype.call = function (subscriber, source) {
	        return source.subscribe(new FinallySubscriber(subscriber, this.callback));
	    };
	    return FinallyOperator;
	}());
	var FinallySubscriber = /*@__PURE__*/ (function (_super) {
	    __extends(FinallySubscriber, _super);
	    function FinallySubscriber(destination, callback) {
	        var _this = _super.call(this, destination) || this;
	        _this.add(new Subscription(callback));
	        return _this;
	    }
	    return FinallySubscriber;
	}(Subscriber));

	/** PURE_IMPORTS_START _observable_ConnectableObservable PURE_IMPORTS_END */
	function multicast(subjectOrSubjectFactory, selector) {
	    return function multicastOperatorFunction(source) {
	        var subjectFactory;
	        if (typeof subjectOrSubjectFactory === 'function') {
	            subjectFactory = subjectOrSubjectFactory;
	        }
	        else {
	            subjectFactory = function subjectFactory() {
	                return subjectOrSubjectFactory;
	            };
	        }
	        if (typeof selector === 'function') {
	            return source.lift(new MulticastOperator(subjectFactory, selector));
	        }
	        var connectable = Object.create(source, connectableObservableDescriptor);
	        connectable.source = source;
	        connectable.subjectFactory = subjectFactory;
	        return connectable;
	    };
	}
	var MulticastOperator = /*@__PURE__*/ (function () {
	    function MulticastOperator(subjectFactory, selector) {
	        this.subjectFactory = subjectFactory;
	        this.selector = selector;
	    }
	    MulticastOperator.prototype.call = function (subscriber, source) {
	        var selector = this.selector;
	        var subject = this.subjectFactory();
	        var subscription = selector(subject).subscribe(subscriber);
	        subscription.add(source.subscribe(subject));
	        return subscription;
	    };
	    return MulticastOperator;
	}());

	/** PURE_IMPORTS_START _multicast,_refCount,_Subject PURE_IMPORTS_END */
	function shareSubjectFactory() {
	    return new Subject();
	}
	function share() {
	    return function (source) { return refCount()(multicast(shareSubjectFactory)(source)); };
	}

	/** PURE_IMPORTS_START _observable_concat,_util_isScheduler PURE_IMPORTS_END */
	function startWith() {
	    var array = [];
	    for (var _i = 0; _i < arguments.length; _i++) {
	        array[_i] = arguments[_i];
	    }
	    var scheduler = array[array.length - 1];
	    if (isScheduler(scheduler)) {
	        array.pop();
	        return function (source) { return concat(array, source, scheduler); };
	    }
	    else {
	        return function (source) { return concat(array, source); };
	    }
	}

	/** PURE_IMPORTS_START tslib,_OuterSubscriber,_util_subscribeToResult PURE_IMPORTS_END */
	function takeUntil(notifier) {
	    return function (source) { return source.lift(new TakeUntilOperator(notifier)); };
	}
	var TakeUntilOperator = /*@__PURE__*/ (function () {
	    function TakeUntilOperator(notifier) {
	        this.notifier = notifier;
	    }
	    TakeUntilOperator.prototype.call = function (subscriber, source) {
	        var takeUntilSubscriber = new TakeUntilSubscriber(subscriber);
	        var notifierSubscription = subscribeToResult(takeUntilSubscriber, this.notifier);
	        if (notifierSubscription && !takeUntilSubscriber.seenValue) {
	            takeUntilSubscriber.add(notifierSubscription);
	            return source.subscribe(takeUntilSubscriber);
	        }
	        return takeUntilSubscriber;
	    };
	    return TakeUntilOperator;
	}());
	var TakeUntilSubscriber = /*@__PURE__*/ (function (_super) {
	    __extends(TakeUntilSubscriber, _super);
	    function TakeUntilSubscriber(destination) {
	        var _this = _super.call(this, destination) || this;
	        _this.seenValue = false;
	        return _this;
	    }
	    TakeUntilSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
	        this.seenValue = true;
	        this.complete();
	    };
	    TakeUntilSubscriber.prototype.notifyComplete = function () {
	    };
	    return TakeUntilSubscriber;
	}(OuterSubscriber));

	/** PURE_IMPORTS_START tslib,_Subscriber,_util_noop,_util_isFunction PURE_IMPORTS_END */
	function tap(nextOrObserver, error, complete) {
	    return function tapOperatorFunction(source) {
	        return source.lift(new DoOperator(nextOrObserver, error, complete));
	    };
	}
	var DoOperator = /*@__PURE__*/ (function () {
	    function DoOperator(nextOrObserver, error, complete) {
	        this.nextOrObserver = nextOrObserver;
	        this.error = error;
	        this.complete = complete;
	    }
	    DoOperator.prototype.call = function (subscriber, source) {
	        return source.subscribe(new TapSubscriber(subscriber, this.nextOrObserver, this.error, this.complete));
	    };
	    return DoOperator;
	}());
	var TapSubscriber = /*@__PURE__*/ (function (_super) {
	    __extends(TapSubscriber, _super);
	    function TapSubscriber(destination, observerOrNext, error, complete) {
	        var _this = _super.call(this, destination) || this;
	        _this._tapNext = noop;
	        _this._tapError = noop;
	        _this._tapComplete = noop;
	        _this._tapError = error || noop;
	        _this._tapComplete = complete || noop;
	        if (isFunction(observerOrNext)) {
	            _this._context = _this;
	            _this._tapNext = observerOrNext;
	        }
	        else if (observerOrNext) {
	            _this._context = observerOrNext;
	            _this._tapNext = observerOrNext.next || noop;
	            _this._tapError = observerOrNext.error || noop;
	            _this._tapComplete = observerOrNext.complete || noop;
	        }
	        return _this;
	    }
	    TapSubscriber.prototype._next = function (value) {
	        try {
	            this._tapNext.call(this._context, value);
	        }
	        catch (err) {
	            this.destination.error(err);
	            return;
	        }
	        this.destination.next(value);
	    };
	    TapSubscriber.prototype._error = function (err) {
	        try {
	            this._tapError.call(this._context, err);
	        }
	        catch (err) {
	            this.destination.error(err);
	            return;
	        }
	        this.destination.error(err);
	    };
	    TapSubscriber.prototype._complete = function () {
	        try {
	            this._tapComplete.call(this._context);
	        }
	        catch (err) {
	            this.destination.error(err);
	            return;
	        }
	        return this.destination.complete();
	    };
	    return TapSubscriber;
	}(Subscriber));

	/**
	 * @license Angular v9.1.6
	 * (c) 2010-2020 Google LLC. https://angular.io/
	 * License: MIT
	 */

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * Convince closure compiler that the wrapped function has no side-effects.
	 *
	 * Closure compiler always assumes that `toString` has no side-effects. We use this quirk to
	 * allow us to execute a function but have closure compiler mark the call as no-side-effects.
	 * It is important that the return value for the `noSideEffects` function be assigned
	 * to something which is retained otherwise the call to `noSideEffects` will be removed by closure
	 * compiler.
	 */
	function noSideEffects(fn) {
	    return { toString: fn }.toString();
	}

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	var ANNOTATIONS = '__annotations__';
	var PARAMETERS = '__parameters__';
	var PROP_METADATA = '__prop__metadata__';
	/**
	 * @suppress {globalThis}
	 */
	function makeDecorator(name, props, parentClass, additionalProcessing, typeFn) {
	    return noSideEffects(function () {
	        var metaCtor = makeMetadataCtor(props);
	        function DecoratorFactory() {
	            var _a;
	            var args = [];
	            for (var _i = 0; _i < arguments.length; _i++) {
	                args[_i] = arguments[_i];
	            }
	            if (this instanceof DecoratorFactory) {
	                metaCtor.call.apply(metaCtor, __spread([this], args));
	                return this;
	            }
	            var annotationInstance = new ((_a = DecoratorFactory).bind.apply(_a, __spread([void 0], args)))();
	            return function TypeDecorator(cls) {
	                if (typeFn)
	                    typeFn.apply(void 0, __spread([cls], args));
	                // Use of Object.defineProperty is important since it creates non-enumerable property which
	                // prevents the property is copied during subclassing.
	                var annotations = cls.hasOwnProperty(ANNOTATIONS) ?
	                    cls[ANNOTATIONS] :
	                    Object.defineProperty(cls, ANNOTATIONS, { value: [] })[ANNOTATIONS];
	                annotations.push(annotationInstance);
	                if (additionalProcessing)
	                    additionalProcessing(cls);
	                return cls;
	            };
	        }
	        if (parentClass) {
	            DecoratorFactory.prototype = Object.create(parentClass.prototype);
	        }
	        DecoratorFactory.prototype.ngMetadataName = name;
	        DecoratorFactory.annotationCls = DecoratorFactory;
	        return DecoratorFactory;
	    });
	}
	function makeMetadataCtor(props) {
	    return function ctor() {
	        var args = [];
	        for (var _i = 0; _i < arguments.length; _i++) {
	            args[_i] = arguments[_i];
	        }
	        if (props) {
	            var values = props.apply(void 0, __spread(args));
	            for (var propName in values) {
	                this[propName] = values[propName];
	            }
	        }
	    };
	}
	function makeParamDecorator(name, props, parentClass) {
	    return noSideEffects(function () {
	        var metaCtor = makeMetadataCtor(props);
	        function ParamDecoratorFactory() {
	            var _a;
	            var args = [];
	            for (var _i = 0; _i < arguments.length; _i++) {
	                args[_i] = arguments[_i];
	            }
	            if (this instanceof ParamDecoratorFactory) {
	                metaCtor.apply(this, args);
	                return this;
	            }
	            var annotationInstance = new ((_a = ParamDecoratorFactory).bind.apply(_a, __spread([void 0], args)))();
	            ParamDecorator.annotation = annotationInstance;
	            return ParamDecorator;
	            function ParamDecorator(cls, unusedKey, index) {
	                // Use of Object.defineProperty is important since it creates non-enumerable property which
	                // prevents the property is copied during subclassing.
	                var parameters = cls.hasOwnProperty(PARAMETERS) ?
	                    cls[PARAMETERS] :
	                    Object.defineProperty(cls, PARAMETERS, { value: [] })[PARAMETERS];
	                // there might be gaps if some in between parameters do not have annotations.
	                // we pad with nulls.
	                while (parameters.length <= index) {
	                    parameters.push(null);
	                }
	                (parameters[index] = parameters[index] || []).push(annotationInstance);
	                return cls;
	            }
	        }
	        if (parentClass) {
	            ParamDecoratorFactory.prototype = Object.create(parentClass.prototype);
	        }
	        ParamDecoratorFactory.prototype.ngMetadataName = name;
	        ParamDecoratorFactory.annotationCls = ParamDecoratorFactory;
	        return ParamDecoratorFactory;
	    });
	}
	function makePropDecorator(name, props, parentClass, additionalProcessing) {
	    return noSideEffects(function () {
	        var metaCtor = makeMetadataCtor(props);
	        function PropDecoratorFactory() {
	            var _a;
	            var args = [];
	            for (var _i = 0; _i < arguments.length; _i++) {
	                args[_i] = arguments[_i];
	            }
	            if (this instanceof PropDecoratorFactory) {
	                metaCtor.apply(this, args);
	                return this;
	            }
	            var decoratorInstance = new ((_a = PropDecoratorFactory).bind.apply(_a, __spread([void 0], args)))();
	            function PropDecorator(target, name) {
	                var constructor = target.constructor;
	                // Use of Object.defineProperty is important since it creates non-enumerable property which
	                // prevents the property is copied during subclassing.
	                var meta = constructor.hasOwnProperty(PROP_METADATA) ?
	                    constructor[PROP_METADATA] :
	                    Object.defineProperty(constructor, PROP_METADATA, { value: {} })[PROP_METADATA];
	                meta[name] = meta.hasOwnProperty(name) && meta[name] || [];
	                meta[name].unshift(decoratorInstance);
	                if (additionalProcessing)
	                    additionalProcessing.apply(void 0, __spread([target, name], args));
	            }
	            return PropDecorator;
	        }
	        if (parentClass) {
	            PropDecoratorFactory.prototype = Object.create(parentClass.prototype);
	        }
	        PropDecoratorFactory.prototype.ngMetadataName = name;
	        PropDecoratorFactory.annotationCls = PropDecoratorFactory;
	        return PropDecoratorFactory;
	    });
	}

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	var Éµ0 = function (token) { return ({ token: token }); };
	/**
	 * Inject decorator and metadata.
	 *
	 * @Annotation
	 * @publicApi
	 */
	var Inject = makeParamDecorator('Inject', Éµ0);
	/**
	 * Optional decorator and metadata.
	 *
	 * @Annotation
	 * @publicApi
	 */
	var Optional = makeParamDecorator('Optional');
	/**
	 * Self decorator and metadata.
	 *
	 * @Annotation
	 * @publicApi
	 */
	var Self = makeParamDecorator('Self');
	/**
	 * SkipSelf decorator and metadata.
	 *
	 * @Annotation
	 * @publicApi
	 */
	var SkipSelf = makeParamDecorator('SkipSelf');
	/**
	 * Host decorator and metadata.
	 *
	 * @Annotation
	 * @publicApi
	 */
	var Host = makeParamDecorator('Host');
	var Éµ1 = function (attributeName) { return ({ attributeName: attributeName }); };
	/**
	 * Attribute decorator and metadata.
	 *
	 * @Annotation
	 * @publicApi
	 */
	var Attribute$1 = makeParamDecorator('Attribute', Éµ1);

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * Injection flags for DI.
	 *
	 * @publicApi
	 */
	var InjectFlags;
	(function (InjectFlags) {
	    // TODO(alxhub): make this 'const' when ngc no longer writes exports of it into ngfactory files.
	    /** Check self and check parent injector if needed */
	    InjectFlags[InjectFlags["Default"] = 0] = "Default";
	    /**
	     * Specifies that an injector should retrieve a dependency from any injector until reaching the
	     * host element of the current component. (Only used with Element Injector)
	     */
	    InjectFlags[InjectFlags["Host"] = 1] = "Host";
	    /** Don't ascend to ancestors of the node requesting injection. */
	    InjectFlags[InjectFlags["Self"] = 2] = "Self";
	    /** Skip the node that is requesting injection. */
	    InjectFlags[InjectFlags["SkipSelf"] = 4] = "SkipSelf";
	    /** Inject `defaultValue` instead if token not found. */
	    InjectFlags[InjectFlags["Optional"] = 8] = "Optional";
	})(InjectFlags || (InjectFlags = {}));

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	function getClosureSafeProperty(objWithPropertyToExtract) {
	    for (var key in objWithPropertyToExtract) {
	        if (objWithPropertyToExtract[key] === getClosureSafeProperty) {
	            return key;
	        }
	    }
	    throw Error('Could not find renamed property on target object.');
	}

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * Construct an `InjectableDef` which defines how a token will be constructed by the DI system, and
	 * in which injectors (if any) it will be available.
	 *
	 * This should be assigned to a static `Éµprov` field on a type, which will then be an
	 * `InjectableType`.
	 *
	 * Options:
	 * * `providedIn` determines which injectors will include the injectable, by either associating it
	 *   with an `@NgModule` or other `InjectorType`, or by specifying that this injectable should be
	 *   provided in the `'root'` injector, which will be the application-level injector in most apps.
	 * * `factory` gives the zero argument function which will create an instance of the injectable.
	 *   The factory can call `inject` to access the `Injector` and request injection of dependencies.
	 *
	 * @codeGenApi
	 */
	function ÉµÉµdefineInjectable(opts) {
	    return {
	        token: opts.token,
	        providedIn: opts.providedIn || null,
	        factory: opts.factory,
	        value: undefined,
	    };
	}
	/**
	 * Construct an `InjectorDef` which configures an injector.
	 *
	 * This should be assigned to a static injector def (`Éµinj`) field on a type, which will then be an
	 * `InjectorType`.
	 *
	 * Options:
	 *
	 * * `factory`: an `InjectorType` is an instantiable type, so a zero argument `factory` function to
	 *   create the type must be provided. If that factory function needs to inject arguments, it can
	 *   use the `inject` function.
	 * * `providers`: an optional array of providers to add to the injector. Each provider must
	 *   either have a factory or point to a type which has a `Éµprov` static property (the
	 *   type must be an `InjectableType`).
	 * * `imports`: an optional array of imports of other `InjectorType`s or `InjectorTypeWithModule`s
	 *   whose providers will also be added to the injector. Locally provided types will override
	 *   providers from imports.
	 *
	 * @publicApi
	 */
	function ÉµÉµdefineInjector(options) {
	    return {
	        factory: options.factory,
	        providers: options.providers || [],
	        imports: options.imports || [],
	    };
	}
	/**
	 * Read the injectable def (`Éµprov`) for `type` in a way which is immune to accidentally reading
	 * inherited value.
	 *
	 * @param type A type which may have its own (non-inherited) `Éµprov`.
	 */
	function getInjectableDef(type) {
	    return getOwnDefinition(type, type[NG_PROV_DEF]) ||
	        getOwnDefinition(type, type[NG_INJECTABLE_DEF]);
	}
	/**
	 * Return `def` only if it is defined directly on `type` and is not inherited from a base
	 * class of `type`.
	 *
	 * The function `Object.hasOwnProperty` is not sufficient to distinguish this case because in older
	 * browsers (e.g. IE10) static property inheritance is implemented by copying the properties.
	 *
	 * Instead, the definition's `token` is compared to the `type`, and if they don't match then the
	 * property was not defined directly on the type itself, and was likely inherited. The definition
	 * is only returned if the `type` matches the `def.token`.
	 */
	function getOwnDefinition(type, def) {
	    return def && def.token === type ? def : null;
	}
	/**
	 * Read the injectable def (`Éµprov`) for `type` or read the `Éµprov` from one of its ancestors.
	 *
	 * @param type A type which may have `Éµprov`, via inheritance.
	 *
	 * @deprecated Will be removed in v10, where an error will occur in the scenario if we find the
	 * `Éµprov` on an ancestor only.
	 */
	function getInheritedInjectableDef(type) {
	    // See `jit/injectable.ts#compileInjectable` for context on NG_PROV_DEF_FALLBACK.
	    var def = type &&
	        (type[NG_PROV_DEF] || type[NG_INJECTABLE_DEF] ||
	            (type[NG_PROV_DEF_FALLBACK] && type[NG_PROV_DEF_FALLBACK]()));
	    if (def) {
	        var typeName = getTypeName(type);
	        // TODO(FW-1307): Re-add ngDevMode when closure can handle it
	        // ngDevMode &&
	        console.warn("DEPRECATED: DI is instantiating a token \"" + typeName + "\" that inherits its @Injectable decorator but does not provide one itself.\n" +
	            ("This will become an error in v10. Please add @Injectable() to the \"" + typeName + "\" class."));
	        return def;
	    }
	    else {
	        return null;
	    }
	}
	/** Gets the name of a type, accounting for some cross-browser differences. */
	function getTypeName(type) {
	    // `Function.prototype.name` behaves differently between IE and other browsers. In most browsers
	    // it'll always return the name of the function itself, no matter how many other functions it
	    // inherits from. On IE the function doesn't have its own `name` property, but it takes it from
	    // the lowest level in the prototype chain. E.g. if we have `class Foo extends Parent` most
	    // browsers will evaluate `Foo.name` to `Foo` while IE will return `Parent`. We work around
	    // the issue by converting the function to a string and parsing its name out that way via a regex.
	    if (type.hasOwnProperty('name')) {
	        return type.name;
	    }
	    var match = ('' + type).match(/^function\s*([^\s(]+)/);
	    return match === null ? '' : match[1];
	}
	/**
	 * Read the injector def type in a way which is immune to accidentally reading inherited value.
	 *
	 * @param type type which may have an injector def (`Éµinj`)
	 */
	function getInjectorDef(type) {
	    return type && (type.hasOwnProperty(NG_INJ_DEF) || type.hasOwnProperty(NG_INJECTOR_DEF)) ?
	        type[NG_INJ_DEF] :
	        null;
	}
	var NG_PROV_DEF = getClosureSafeProperty({ Éµprov: getClosureSafeProperty });
	var NG_INJ_DEF = getClosureSafeProperty({ Éµinj: getClosureSafeProperty });
	// On IE10 properties defined via `defineProperty` won't be inherited by child classes,
	// which will break inheriting the injectable definition from a grandparent through an
	// undecorated parent class. We work around it by defining a fallback method which will be
	// used to retrieve the definition. This should only be a problem in JIT mode, because in
	// AOT TypeScript seems to have a workaround for static properties. When inheriting from an
	// undecorated parent is no longer supported in v10, this can safely be removed.
	var NG_PROV_DEF_FALLBACK = getClosureSafeProperty({ ÉµprovFallback: getClosureSafeProperty });
	// We need to keep these around so we can read off old defs if new defs are unavailable
	var NG_INJECTABLE_DEF = getClosureSafeProperty({ ngInjectableDef: getClosureSafeProperty });
	var NG_INJECTOR_DEF = getClosureSafeProperty({ ngInjectorDef: getClosureSafeProperty });

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	function stringify$1(token) {
	    if (typeof token === 'string') {
	        return token;
	    }
	    if (Array.isArray(token)) {
	        return '[' + token.map(stringify$1).join(', ') + ']';
	    }
	    if (token == null) {
	        return '' + token;
	    }
	    if (token.overriddenName) {
	        return "" + token.overriddenName;
	    }
	    if (token.name) {
	        return "" + token.name;
	    }
	    var res = token.toString();
	    if (res == null) {
	        return '' + res;
	    }
	    var newLineIndex = res.indexOf('\n');
	    return newLineIndex === -1 ? res : res.substring(0, newLineIndex);
	}
	/**
	 * Concatenates two strings with separator, allocating new strings only when necessary.
	 *
	 * @param before before string.
	 * @param separator separator string.
	 * @param after after string.
	 * @returns concatenated string.
	 */
	function concatStringsWithSpace(before, after) {
	    return (before == null || before === '') ?
	        (after === null ? '' : after) :
	        ((after == null || after === '') ? before : before + ' ' + after);
	}

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	var __forward_ref__ = getClosureSafeProperty({ __forward_ref__: getClosureSafeProperty });
	/**
	 * Allows to refer to references which are not yet defined.
	 *
	 * For instance, `forwardRef` is used when the `token` which we need to refer to for the purposes of
	 * DI is declared, but not yet defined. It is also used when the `token` which we use when creating
	 * a query is not yet defined.
	 *
	 * @usageNotes
	 * ### Example
	 * {@example core/di/ts/forward_ref/forward_ref_spec.ts region='forward_ref'}
	 * @publicApi
	 */
	function forwardRef(forwardRefFn) {
	    forwardRefFn.__forward_ref__ = forwardRef;
	    forwardRefFn.toString = function () {
	        return stringify$1(this());
	    };
	    return forwardRefFn;
	}
	/**
	 * Lazily retrieves the reference value from a forwardRef.
	 *
	 * Acts as the identity function when given a non-forward-ref value.
	 *
	 * @usageNotes
	 * ### Example
	 *
	 * {@example core/di/ts/forward_ref/forward_ref_spec.ts region='resolve_forward_ref'}
	 *
	 * @see `forwardRef`
	 * @publicApi
	 */
	function resolveForwardRef$1(type) {
	    return isForwardRef(type) ? type() : type;
	}
	/** Checks whether a function is wrapped by a `forwardRef`. */
	function isForwardRef(fn) {
	    return typeof fn === 'function' && fn.hasOwnProperty(__forward_ref__) &&
	        fn.__forward_ref__ === forwardRef;
	}

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	var __globalThis = typeof globalThis !== 'undefined' && globalThis;
	var __window$1 = typeof window !== 'undefined' && window;
	var __self$1 = typeof self !== 'undefined' && typeof WorkerGlobalScope !== 'undefined' &&
	    self instanceof WorkerGlobalScope && self;
	var __global$1 = typeof global !== 'undefined' && global;
	// Always use __globalThis if available, which is the spec-defined global variable across all
	// environments, then fallback to __global first, because in Node tests both __global and
	// __window may be defined and _global should be __global in that case.
	var _global$1 = __globalThis || __global$1 || __window$1 || __self$1;

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	var R3ResolvedDependencyType$1;
	(function (R3ResolvedDependencyType) {
	    R3ResolvedDependencyType[R3ResolvedDependencyType["Token"] = 0] = "Token";
	    R3ResolvedDependencyType[R3ResolvedDependencyType["Attribute"] = 1] = "Attribute";
	    R3ResolvedDependencyType[R3ResolvedDependencyType["ChangeDetectorRef"] = 2] = "ChangeDetectorRef";
	    R3ResolvedDependencyType[R3ResolvedDependencyType["Invalid"] = 3] = "Invalid";
	})(R3ResolvedDependencyType$1 || (R3ResolvedDependencyType$1 = {}));
	var R3FactoryTarget$1;
	(function (R3FactoryTarget) {
	    R3FactoryTarget[R3FactoryTarget["Directive"] = 0] = "Directive";
	    R3FactoryTarget[R3FactoryTarget["Component"] = 1] = "Component";
	    R3FactoryTarget[R3FactoryTarget["Injectable"] = 2] = "Injectable";
	    R3FactoryTarget[R3FactoryTarget["Pipe"] = 3] = "Pipe";
	    R3FactoryTarget[R3FactoryTarget["NgModule"] = 4] = "NgModule";
	})(R3FactoryTarget$1 || (R3FactoryTarget$1 = {}));
	var ViewEncapsulation$1;
	(function (ViewEncapsulation) {
	    ViewEncapsulation[ViewEncapsulation["Emulated"] = 0] = "Emulated";
	    ViewEncapsulation[ViewEncapsulation["Native"] = 1] = "Native";
	    ViewEncapsulation[ViewEncapsulation["None"] = 2] = "None";
	    ViewEncapsulation[ViewEncapsulation["ShadowDom"] = 3] = "ShadowDom";
	})(ViewEncapsulation$1 || (ViewEncapsulation$1 = {}));

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	var NG_COMP_DEF = getClosureSafeProperty({ Éµcmp: getClosureSafeProperty });
	var NG_DIR_DEF = getClosureSafeProperty({ Éµdir: getClosureSafeProperty });
	var NG_PIPE_DEF = getClosureSafeProperty({ Éµpipe: getClosureSafeProperty });
	var NG_MOD_DEF = getClosureSafeProperty({ Éµmod: getClosureSafeProperty });
	var NG_LOC_ID_DEF = getClosureSafeProperty({ Éµloc: getClosureSafeProperty });
	var NG_FACTORY_DEF = getClosureSafeProperty({ Éµfac: getClosureSafeProperty });
	/**
	 * If a directive is diPublic, bloomAdd sets a property on the type with this constant as
	 * the key and the directive's unique ID as the value. This allows us to map directives to their
	 * bloom filter bit for DI.
	 */
	// TODO(misko): This is wrong. The NG_ELEMENT_ID should never be minified.
	var NG_ELEMENT_ID = getClosureSafeProperty({ __NG_ELEMENT_ID__: getClosureSafeProperty });

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	function ngDevModeResetPerfCounters() {
	    var locationString = typeof location !== 'undefined' ? location.toString() : '';
	    var newCounters = {
	        namedConstructors: locationString.indexOf('ngDevMode=namedConstructors') != -1,
	        firstCreatePass: 0,
	        tNode: 0,
	        tView: 0,
	        rendererCreateTextNode: 0,
	        rendererSetText: 0,
	        rendererCreateElement: 0,
	        rendererAddEventListener: 0,
	        rendererSetAttribute: 0,
	        rendererRemoveAttribute: 0,
	        rendererSetProperty: 0,
	        rendererSetClassName: 0,
	        rendererAddClass: 0,
	        rendererRemoveClass: 0,
	        rendererSetStyle: 0,
	        rendererRemoveStyle: 0,
	        rendererDestroy: 0,
	        rendererDestroyNode: 0,
	        rendererMoveNode: 0,
	        rendererRemoveNode: 0,
	        rendererAppendChild: 0,
	        rendererInsertBefore: 0,
	        rendererCreateComment: 0,
	    };
	    // Make sure to refer to ngDevMode as ['ngDevMode'] for closure.
	    var allowNgDevModeTrue = locationString.indexOf('ngDevMode=false') === -1;
	    _global$1['ngDevMode'] = allowNgDevModeTrue && newCounters;
	    return newCounters;
	}
	/**
	 * This function checks to see if the `ngDevMode` has been set. If yes,
	 * then we honor it, otherwise we default to dev mode with additional checks.
	 *
	 * The idea is that unless we are doing production build where we explicitly
	 * set `ngDevMode == false` we should be helping the developer by providing
	 * as much early warning and errors as possible.
	 *
	 * `ÉµÉµdefineComponent` is guaranteed to have been called before any component template functions
	 * (and thus Ivy instructions), so a single initialization there is sufficient to ensure ngDevMode
	 * is defined for the entire instruction set.
	 *
	 * When using checking `ngDevMode` on toplevel, always init it before referencing it
	 * (e.g. `((typeof ngDevMode === 'undefined' || ngDevMode) && initNgDevMode())`), otherwise you can
	 *  get a `ReferenceError` like in https://github.com/angular/angular/issues/31595.
	 *
	 * Details on possible values for `ngDevMode` can be found on its docstring.
	 *
	 * NOTE:
	 * - changes to the `ngDevMode` name must be synced with `compiler-cli/src/tooling.ts`.
	 */
	function initNgDevMode() {
	    // The below checks are to ensure that calling `initNgDevMode` multiple times does not
	    // reset the counters.
	    // If the `ngDevMode` is not an object, then it means we have not created the perf counters
	    // yet.
	    if (typeof ngDevMode === 'undefined' || ngDevMode) {
	        if (typeof ngDevMode !== 'object') {
	            ngDevModeResetPerfCounters();
	        }
	        return !!ngDevMode;
	    }
	    return false;
	}

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * Creates a token that can be used in a DI Provider.
	 *
	 * Use an `InjectionToken` whenever the type you are injecting is not reified (does not have a
	 * runtime representation) such as when injecting an interface, callable type, array or
	 * parameterized type.
	 *
	 * `InjectionToken` is parameterized on `T` which is the type of object which will be returned by
	 * the `Injector`. This provides additional level of type safety.
	 *
	 * ```
	 * interface MyInterface {...}
	 * var myInterface = injector.get(new InjectionToken<MyInterface>('SomeToken'));
	 * // myInterface is inferred to be MyInterface.
	 * ```
	 *
	 * When creating an `InjectionToken`, you can optionally specify a factory function which returns
	 * (possibly by creating) a default value of the parameterized type `T`. This sets up the
	 * `InjectionToken` using this factory as a provider as if it was defined explicitly in the
	 * application's root injector. If the factory function, which takes zero arguments, needs to inject
	 * dependencies, it can do so using the `inject` function. See below for an example.
	 *
	 * Additionally, if a `factory` is specified you can also specify the `providedIn` option, which
	 * overrides the above behavior and marks the token as belonging to a particular `@NgModule`. As
	 * mentioned above, `'root'` is the default value for `providedIn`.
	 *
	 * @usageNotes
	 * ### Basic Example
	 *
	 * ### Plain InjectionToken
	 *
	 * {@example core/di/ts/injector_spec.ts region='InjectionToken'}
	 *
	 * ### Tree-shakable InjectionToken
	 *
	 * {@example core/di/ts/injector_spec.ts region='ShakableInjectionToken'}
	 *
	 *
	 * @publicApi
	 */
	var InjectionToken = /** @class */ (function () {
	    function InjectionToken(_desc, options) {
	        this._desc = _desc;
	        /** @internal */
	        this.ngMetadataName = 'InjectionToken';
	        this.Éµprov = undefined;
	        if (typeof options == 'number') {
	            // This is a special hack to assign __NG_ELEMENT_ID__ to this instance.
	            // __NG_ELEMENT_ID__ is Used by Ivy to determine bloom filter id.
	            // We are using it to assign `-1` which is used to identify `Injector`.
	            this.__NG_ELEMENT_ID__ = options;
	        }
	        else if (options !== undefined) {
	            this.Éµprov = ÉµÉµdefineInjectable({
	                token: this,
	                providedIn: options.providedIn || 'root',
	                factory: options.factory,
	            });
	        }
	    }
	    InjectionToken.prototype.toString = function () {
	        return "InjectionToken " + this._desc;
	    };
	    return InjectionToken;
	}());

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * An InjectionToken that gets the current `Injector` for `createInjector()`-style injectors.
	 *
	 * Requesting this token instead of `Injector` allows `StaticInjector` to be tree-shaken from a
	 * project.
	 *
	 * @publicApi
	 */
	var INJECTOR = new InjectionToken('INJECTOR', -1 // `-1` is used by Ivy DI system as special value to recognize it as `Injector`.
	);
	var _THROW_IF_NOT_FOUND = {};
	var THROW_IF_NOT_FOUND = _THROW_IF_NOT_FOUND;
	var NG_TEMP_TOKEN_PATH = 'ngTempTokenPath';
	var NG_TOKEN_PATH = 'ngTokenPath';
	var NEW_LINE = /\n/gm;
	var NO_NEW_LINE = 'Éµ';
	var SOURCE = '__source';
	var Éµ0$1 = getClosureSafeProperty;
	var USE_VALUE$1 = getClosureSafeProperty({ provide: String, useValue: Éµ0$1 });
	/**
	 * Current injector value used by `inject`.
	 * - `undefined`: it is an error to call `inject`
	 * - `null`: `inject` can be called but there is no injector (limp-mode).
	 * - Injector instance: Use the injector for resolution.
	 */
	var _currentInjector = undefined;
	function setCurrentInjector(injector) {
	    var former = _currentInjector;
	    _currentInjector = injector;
	    return former;
	}
	/**
	 * Current implementation of inject.
	 *
	 * By default, it is `injectInjectorOnly`, which makes it `Injector`-only aware. It can be changed
	 * to `directiveInject`, which brings in the `NodeInjector` system of ivy. It is designed this
	 * way for two reasons:
	 *  1. `Injector` should not depend on ivy logic.
	 *  2. To maintain tree shake-ability we don't want to bring in unnecessary code.
	 */
	var _injectImplementation;
	/**
	 * Sets the current inject implementation.
	 */
	function setInjectImplementation(impl) {
	    var previous = _injectImplementation;
	    _injectImplementation = impl;
	    return previous;
	}
	function injectInjectorOnly(token, flags) {
	    if (flags === void 0) { flags = InjectFlags.Default; }
	    if (_currentInjector === undefined) {
	        throw new Error("inject() must be called from an injection context");
	    }
	    else if (_currentInjector === null) {
	        return injectRootLimpMode(token, undefined, flags);
	    }
	    else {
	        return _currentInjector.get(token, flags & InjectFlags.Optional ? null : undefined, flags);
	    }
	}
	function ÉµÉµinject(token, flags) {
	    if (flags === void 0) { flags = InjectFlags.Default; }
	    return (_injectImplementation || injectInjectorOnly)(resolveForwardRef$1(token), flags);
	}
	/**
	 * Injects a token from the currently active injector.
	 *
	 * Must be used in the context of a factory function such as one defined for an
	 * `InjectionToken`. Throws an error if not called from such a context.
	 *
	 * Within such a factory function, using this function to request injection of a dependency
	 * is faster and more type-safe than providing an additional array of dependencies
	 * (as has been common with `useFactory` providers).
	 *
	 * @param token The injection token for the dependency to be injected.
	 * @param flags Optional flags that control how injection is executed.
	 * The flags correspond to injection strategies that can be specified with
	 * parameter decorators `@Host`, `@Self`, `@SkipSef`, and `@Optional`.
	 * @returns True if injection is successful, null otherwise.
	 *
	 * @usageNotes
	 *
	 * ### Example
	 *
	 * {@example core/di/ts/injector_spec.ts region='ShakableInjectionToken'}
	 *
	 * @publicApi
	 */
	var inject = ÉµÉµinject;
	/**
	 * Injects `root` tokens in limp mode.
	 *
	 * If no injector exists, we can still inject tree-shakable providers which have `providedIn` set to
	 * `"root"`. This is known as the limp mode injection. In such case the value is stored in the
	 * `InjectableDef`.
	 */
	function injectRootLimpMode(token, notFoundValue, flags) {
	    var injectableDef = getInjectableDef(token);
	    if (injectableDef && injectableDef.providedIn == 'root') {
	        return injectableDef.value === undefined ? injectableDef.value = injectableDef.factory() :
	            injectableDef.value;
	    }
	    if (flags & InjectFlags.Optional)
	        return null;
	    if (notFoundValue !== undefined)
	        return notFoundValue;
	    throw new Error("Injector: NOT_FOUND [" + stringify$1(token) + "]");
	}
	function injectArgs(types) {
	    var args = [];
	    for (var i = 0; i < types.length; i++) {
	        var arg = resolveForwardRef$1(types[i]);
	        if (Array.isArray(arg)) {
	            if (arg.length === 0) {
	                throw new Error('Arguments array must have arguments.');
	            }
	            var type = undefined;
	            var flags = InjectFlags.Default;
	            for (var j = 0; j < arg.length; j++) {
	                var meta = arg[j];
	                if (meta instanceof Optional || meta.ngMetadataName === 'Optional' || meta === Optional) {
	                    flags |= InjectFlags.Optional;
	                }
	                else if (meta instanceof SkipSelf || meta.ngMetadataName === 'SkipSelf' || meta === SkipSelf) {
	                    flags |= InjectFlags.SkipSelf;
	                }
	                else if (meta instanceof Self || meta.ngMetadataName === 'Self' || meta === Self) {
	                    flags |= InjectFlags.Self;
	                }
	                else if (meta instanceof Inject || meta === Inject) {
	                    type = meta.token;
	                }
	                else {
	                    type = meta;
	                }
	            }
	            args.push(ÉµÉµinject(type, flags));
	        }
	        else {
	            args.push(ÉµÉµinject(arg));
	        }
	    }
	    return args;
	}
	var NullInjector = /** @class */ (function () {
	    function NullInjector() {
	    }
	    NullInjector.prototype.get = function (token, notFoundValue) {
	        if (notFoundValue === void 0) { notFoundValue = THROW_IF_NOT_FOUND; }
	        if (notFoundValue === THROW_IF_NOT_FOUND) {
	            // Intentionally left behind: With dev tools open the debugger will stop here. There is no
	            // reason why correctly written application should cause this exception.
	            // TODO(misko): uncomment the next line once `ngDevMode` works with closure.
	            // if (ngDevMode) debugger;
	            var error = new Error("NullInjectorError: No provider for " + stringify$1(token) + "!");
	            error.name = 'NullInjectorError';
	            throw error;
	        }
	        return notFoundValue;
	    };
	    return NullInjector;
	}());
	function catchInjectorError(e, token, injectorErrorName, source) {
	    var tokenPath = e[NG_TEMP_TOKEN_PATH];
	    if (token[SOURCE]) {
	        tokenPath.unshift(token[SOURCE]);
	    }
	    e.message = formatError('\n' + e.message, tokenPath, injectorErrorName, source);
	    e[NG_TOKEN_PATH] = tokenPath;
	    e[NG_TEMP_TOKEN_PATH] = null;
	    throw e;
	}
	function formatError(text, obj, injectorErrorName, source) {
	    if (source === void 0) { source = null; }
	    text = text && text.charAt(0) === '\n' && text.charAt(1) == NO_NEW_LINE ? text.substr(2) : text;
	    var context = stringify$1(obj);
	    if (Array.isArray(obj)) {
	        context = obj.map(stringify$1).join(' -> ');
	    }
	    else if (typeof obj === 'object') {
	        var parts = [];
	        for (var key in obj) {
	            if (obj.hasOwnProperty(key)) {
	                var value = obj[key];
	                parts.push(key + ':' + (typeof value === 'string' ? JSON.stringify(value) : stringify$1(value)));
	            }
	        }
	        context = "{" + parts.join(', ') + "}";
	    }
	    return "" + injectorErrorName + (source ? '(' + source + ')' : '') + "[" + context + "]: " + text.replace(NEW_LINE, '\n  ');
	}

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * Represents an instance of an NgModule created via a {@link NgModuleFactory}.
	 *
	 * `NgModuleRef` provides access to the NgModule Instance as well other objects related to this
	 * NgModule Instance.
	 *
	 * @publicApi
	 */
	var NgModuleRef = /** @class */ (function () {
	    function NgModuleRef() {
	    }
	    return NgModuleRef;
	}());
	/**
	 * @publicApi
	 */
	var NgModuleFactory = /** @class */ (function () {
	    function NgModuleFactory() {
	    }
	    return NgModuleFactory;
	}());

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	function assertNumber(actual, msg) {
	    if (!(typeof actual === 'number')) {
	        throwError$1(msg, typeof actual, 'number', '===');
	    }
	}
	function assertString(actual, msg) {
	    if (!(typeof actual === 'string')) {
	        throwError$1(msg, actual === null ? 'null' : typeof actual, 'string', '===');
	    }
	}
	function assertEqual(actual, expected, msg) {
	    if (!(actual == expected)) {
	        throwError$1(msg, actual, expected, '==');
	    }
	}
	function assertNotEqual(actual, expected, msg) {
	    if (!(actual != expected)) {
	        throwError$1(msg, actual, expected, '!=');
	    }
	}
	function assertSame(actual, expected, msg) {
	    if (!(actual === expected)) {
	        throwError$1(msg, actual, expected, '===');
	    }
	}
	function assertLessThan(actual, expected, msg) {
	    if (!(actual < expected)) {
	        throwError$1(msg, actual, expected, '<');
	    }
	}
	function assertGreaterThan(actual, expected, msg) {
	    if (!(actual > expected)) {
	        throwError$1(msg, actual, expected, '>');
	    }
	}
	function assertDefined(actual, msg) {
	    if (actual == null) {
	        throwError$1(msg, actual, null, '!=');
	    }
	}
	function throwError$1(msg, actual, expected, comparison) {
	    throw new Error("ASSERTION ERROR: " + msg +
	        (comparison == null ? '' : " [Expected=> " + expected + " " + comparison + " " + actual + " <=Actual]"));
	}
	function assertDomNode(node) {
	    // If we're in a worker, `Node` will not be defined.
	    assertEqual((typeof Node !== 'undefined' && node instanceof Node) ||
	        (typeof node === 'object' && node != null &&
	            node.constructor.name === 'WebWorkerRenderNode'), true, "The provided value must be an instance of a DOM Node but got " + stringify$1(node));
	}
	function assertDataInRange(arr, index) {
	    var maxLen = arr ? arr.length : 0;
	    assertLessThan(index, maxLen, "Index expected to be less than " + maxLen + " but got " + index);
	}
	/**
	 * Flattens an array.
	 */
	function flatten$1(list, dst) {
	    if (dst === undefined)
	        dst = list;
	    for (var i = 0; i < list.length; i++) {
	        var item = list[i];
	        if (Array.isArray(item)) {
	            // we need to inline it.
	            if (dst === list) {
	                // Our assumption that the list was already flat was wrong and
	                // we need to clone flat since we need to write to it.
	                dst = list.slice(0, i);
	            }
	            flatten$1(item, dst);
	        }
	        else if (dst !== list) {
	            dst.push(item);
	        }
	    }
	    return dst;
	}
	function deepForEach(input, fn) {
	    input.forEach(function (value) { return Array.isArray(value) ? deepForEach(value, fn) : fn(value); });
	}
	function addToArray(arr, index, value) {
	    // perf: array.push is faster than array.splice!
	    if (index >= arr.length) {
	        arr.push(value);
	    }
	    else {
	        arr.splice(index, 0, value);
	    }
	}
	function removeFromArray(arr, index) {
	    // perf: array.pop is faster than array.splice!
	    if (index >= arr.length - 1) {
	        return arr.pop();
	    }
	    else {
	        return arr.splice(index, 1)[0];
	    }
	}
	function newArray$1(size, value) {
	    var list = [];
	    for (var i = 0; i < size; i++) {
	        list.push(value);
	    }
	    return list;
	}

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * The strategy that the default change detector uses to detect changes.
	 * When set, takes effect the next time change detection is triggered.
	 *
	 * @publicApi
	 */
	var ChangeDetectionStrategy$1;
	(function (ChangeDetectionStrategy) {
	    /**
	     * Use the `CheckOnce` strategy, meaning that automatic change detection is deactivated
	     * until reactivated by setting the strategy to `Default` (`CheckAlways`).
	     * Change detection can still be explicitly invoked.
	     * This strategy applies to all child directives and cannot be overridden.
	     */
	    ChangeDetectionStrategy[ChangeDetectionStrategy["OnPush"] = 0] = "OnPush";
	    /**
	     * Use the default `CheckAlways` strategy, in which change detection is automatic until
	     * explicitly deactivated.
	     */
	    ChangeDetectionStrategy[ChangeDetectionStrategy["Default"] = 1] = "Default";
	})(ChangeDetectionStrategy$1 || (ChangeDetectionStrategy$1 = {}));
	/**
	 * Defines the possible states of the default change detector.
	 * @see `ChangeDetectorRef`
	 */
	var ChangeDetectorStatus;
	(function (ChangeDetectorStatus) {
	    /**
	     * A state in which, after calling `detectChanges()`, the change detector
	     * state becomes `Checked`, and must be explicitly invoked or reactivated.
	     */
	    ChangeDetectorStatus[ChangeDetectorStatus["CheckOnce"] = 0] = "CheckOnce";
	    /**
	     * A state in which change detection is skipped until the change detector mode
	     * becomes `CheckOnce`.
	     */
	    ChangeDetectorStatus[ChangeDetectorStatus["Checked"] = 1] = "Checked";
	    /**
	     * A state in which change detection continues automatically until explicitly
	     * deactivated.
	     */
	    ChangeDetectorStatus[ChangeDetectorStatus["CheckAlways"] = 2] = "CheckAlways";
	    /**
	     * A state in which a change detector sub tree is not a part of the main tree and
	     * should be skipped.
	     */
	    ChangeDetectorStatus[ChangeDetectorStatus["Detached"] = 3] = "Detached";
	    /**
	     * Indicates that the change detector encountered an error checking a binding
	     * or calling a directive lifecycle method and is now in an inconsistent state. Change
	     * detectors in this state do not detect changes.
	     */
	    ChangeDetectorStatus[ChangeDetectorStatus["Errored"] = 4] = "Errored";
	    /**
	     * Indicates that the change detector has been destroyed.
	     */
	    ChangeDetectorStatus[ChangeDetectorStatus["Destroyed"] = 5] = "Destroyed";
	})(ChangeDetectorStatus || (ChangeDetectorStatus = {}));

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * Defines template and style encapsulation options available for Component's {@link Component}.
	 *
	 * See {@link Component#encapsulation encapsulation}.
	 *
	 * @usageNotes
	 * ### Example
	 *
	 * {@example core/ts/metadata/encapsulation.ts region='longform'}
	 *
	 * @publicApi
	 */
	var ViewEncapsulation$1$1;
	(function (ViewEncapsulation) {
	    /**
	     * Emulate `Native` scoping of styles by adding an attribute containing surrogate id to the Host
	     * Element and pre-processing the style rules provided via {@link Component#styles styles} or
	     * {@link Component#styleUrls styleUrls}, and adding the new Host Element attribute to all
	     * selectors.
	     *
	     * This is the default option.
	     */
	    ViewEncapsulation[ViewEncapsulation["Emulated"] = 0] = "Emulated";
	    /**
	     * @deprecated v6.1.0 - use {ViewEncapsulation.ShadowDom} instead.
	     * Use the native encapsulation mechanism of the renderer.
	     *
	     * For the DOM this means using the deprecated [Shadow DOM
	     * v0](https://w3c.github.io/webcomponents/spec/shadow/) and
	     * creating a ShadowRoot for Component's Host Element.
	     */
	    ViewEncapsulation[ViewEncapsulation["Native"] = 1] = "Native";
	    /**
	     * Don't provide any template or style encapsulation.
	     */
	    ViewEncapsulation[ViewEncapsulation["None"] = 2] = "None";
	    /**
	     * Use Shadow DOM to encapsulate styles.
	     *
	     * For the DOM this means using modern [Shadow
	     * DOM](https://w3c.github.io/webcomponents/spec/shadow/) and
	     * creating a ShadowRoot for Component's Host Element.
	     */
	    ViewEncapsulation[ViewEncapsulation["ShadowDom"] = 3] = "ShadowDom";
	})(ViewEncapsulation$1$1 || (ViewEncapsulation$1$1 = {}));

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * This file contains reuseable "empty" symbols that can be used as default return values
	 * in different parts of the rendering code. Because the same symbols are returned, this
	 * allows for identity checks against these values to be consistently used by the framework
	 * code.
	 */
	var EMPTY_OBJ = {};
	var EMPTY_ARRAY = [];
	// freezing the values prevents any code from accidentally inserting new values in
	if ((typeof ngDevMode === 'undefined' || ngDevMode) && initNgDevMode()) {
	    // These property accesses can be ignored because ngDevMode will be set to false
	    // when optimizing code and the whole if statement will be dropped.
	    // tslint:disable-next-line:no-toplevel-property-access
	    Object.freeze(EMPTY_OBJ);
	    // tslint:disable-next-line:no-toplevel-property-access
	    Object.freeze(EMPTY_ARRAY);
	}
	/**
	 * The following getter methods retrieve the definition form the type. Currently the retrieval
	 * honors inheritance, but in the future we may change the rule to require that definitions are
	 * explicit. This would require some sort of migration strategy.
	 */
	function getComponentDef(type) {
	    return type[NG_COMP_DEF] || null;
	}
	function getFactoryDef(type, throwNotFound) {
	    var hasFactoryDef = type.hasOwnProperty(NG_FACTORY_DEF);
	    if (!hasFactoryDef && throwNotFound === true && ngDevMode) {
	        throw new Error("Type " + stringify$1(type) + " does not have '\u0275fac' property.");
	    }
	    return hasFactoryDef ? type[NG_FACTORY_DEF] : null;
	}
	function getNgModuleDef(type, throwNotFound) {
	    var ngModuleDef = type[NG_MOD_DEF] || null;
	    if (!ngModuleDef && throwNotFound === true) {
	        throw new Error("Type " + stringify$1(type) + " does not have '\u0275mod' property.");
	    }
	    return ngModuleDef;
	}
	function getNgLocaleIdDef(type) {
	    return type[NG_LOC_ID_DEF] || null;
	}

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	// Below are constants for LView indices to help us look up LView members
	// without having to remember the specific indices.
	// Uglify will inline these when minifying so there shouldn't be a cost.
	var HOST = 0;
	var TVIEW = 1;
	var FLAGS = 2;
	var PARENT = 3;
	var NEXT = 4;
	var TRANSPLANTED_VIEWS_TO_REFRESH = 5;
	var T_HOST = 6;
	var CLEANUP = 7;
	var CONTEXT = 8;
	var INJECTOR$1 = 9;
	var RENDERER_FACTORY = 10;
	var RENDERER = 11;
	var SANITIZER = 12;
	var CHILD_HEAD = 13;
	var CHILD_TAIL = 14;
	var DECLARATION_VIEW = 15;
	var DECLARATION_COMPONENT_VIEW = 16;
	var DECLARATION_LCONTAINER = 17;
	var PREORDER_HOOK_FLAGS = 18;
	var QUERIES = 19;
	/** Size of LView's header. Necessary to adjust for it when setting slots.  */
	var HEADER_OFFSET = 20;

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * Special location which allows easy identification of type. If we have an array which was
	 * retrieved from the `LView` and that array has `true` at `TYPE` location, we know it is
	 * `LContainer`.
	 */
	var TYPE = 1;
	/**
	 * Below are constants for LContainer indices to help us look up LContainer members
	 * without having to remember the specific indices.
	 * Uglify will inline these when minifying so there shouldn't be a cost.
	 */
	var ACTIVE_INDEX = 2;
	// PARENT, NEXT, TRANSPLANTED_VIEWS_TO_REFRESH are indices 3, 4, and 5
	// As we already have these constants in LView, we don't need to re-create them.
	// T_HOST is index 6
	// We already have this constants in LView, we don't need to re-create it.
	var NATIVE$1 = 7;
	var MOVED_VIEWS = 9;
	/**
	 * Size of LContainer's header. Represents the index after which all views in the
	 * container will be inserted. We need to keep a record of current views so we know
	 * which views are already in the DOM (and don't need to be re-added) and so we can
	 * remove views from the DOM when they are no longer required.
	 */
	var CONTAINER_HEADER_OFFSET = 10;

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * True if `value` is `LView`.
	 * @param value wrapped value of `RNode`, `LView`, `LContainer`
	 */
	function isLView(value) {
	    return Array.isArray(value) && typeof value[TYPE] === 'object';
	}
	/**
	 * True if `value` is `LContainer`.
	 * @param value wrapped value of `RNode`, `LView`, `LContainer`
	 */
	function isLContainer(value) {
	    return Array.isArray(value) && value[TYPE] === true;
	}
	function isComponentHost(tNode) {
	    return (tNode.flags & 2 /* isComponentHost */) === 2 /* isComponentHost */;
	}
	function isComponentDef(def) {
	    return def.template !== null;
	}
	function isRootView(target) {
	    return (target[FLAGS] & 512 /* IsRoot */) !== 0;
	}

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	// [Assert functions do not constraint type when they are guarded by a truthy
	// expression.](https://github.com/microsoft/TypeScript/issues/37295)
	function assertTNodeForLView(tNode, lView) {
	    tNode.hasOwnProperty('tView_') &&
	        assertEqual(tNode.tView_, lView[TVIEW], 'This TNode does not belong to this LView.');
	}
	function assertComponentType(actual, msg) {
	    if (msg === void 0) { msg = 'Type passed in is not ComponentType, it does not have \'Éµcmp\' property.'; }
	    if (!getComponentDef(actual)) {
	        throwError$1(msg);
	    }
	}
	function assertLContainer(value) {
	    assertDefined(value, 'LContainer must be defined');
	    assertEqual(isLContainer(value), true, 'Expecting LContainer');
	}
	function assertLViewOrUndefined(value) {
	    value && assertEqual(isLView(value), true, 'Expecting LView or undefined or null');
	}
	function assertLView(value) {
	    assertDefined(value, 'LView must be defined');
	    assertEqual(isLView(value), true, 'Expecting LView');
	}
	function assertFirstCreatePass(tView, errMessage) {
	    assertEqual(tView.firstCreatePass, true, errMessage || 'Should only be called in first create pass.');
	}
	/**
	 * This is a basic sanity check that an object is probably a directive def. DirectiveDef is
	 * an interface, so we can't do a direct instanceof check.
	 */
	function assertDirectiveDef(obj) {
	    if (obj.type === undefined || obj.selectors == undefined || obj.inputs === undefined) {
	        throwError$1("Expected a DirectiveDef/ComponentDef and this object does not seem to have the expected shape.");
	    }
	}

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	var SVG_NAMESPACE = 'http://www.w3.org/2000/svg';
	var MATH_ML_NAMESPACE = 'http://www.w3.org/1998/MathML/';

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * This property will be monkey-patched on elements, components and directives
	 */
	var MONKEY_PATCH_KEY_NAME = '__ngContext__';

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * Most of the use of `document` in Angular is from within the DI system so it is possible to simply
	 * inject the `DOCUMENT` token and are done.
	 *
	 * Ivy is special because it does not rely upon the DI and must get hold of the document some other
	 * way.
	 *
	 * The solution is to define `getDocument()` and `setDocument()` top-level functions for ivy.
	 * Wherever ivy needs the global document, it calls `getDocument()` instead.
	 *
	 * When running ivy outside of a browser environment, it is necessary to call `setDocument()` to
	 * tell ivy what the global `document` is.
	 *
	 * Angular does this for us in each of the standard platforms (`Browser`, `Server`, and `WebWorker`)
	 * by calling `setDocument()` when providing the `DOCUMENT` token.
	 */
	var DOCUMENT = undefined;
	/**
	 * Tell ivy what the `document` is for this platform.
	 *
	 * It is only necessary to call this if the current platform is not a browser.
	 *
	 * @param document The object representing the global `document` in this environment.
	 */
	function setDocument(document) {
	    DOCUMENT = document;
	}
	/**
	 * Access the object that represents the `document` for this platform.
	 *
	 * Ivy calls this whenever it needs to access the `document` object.
	 * For example to create the renderer or to do sanitization.
	 */
	function getDocument() {
	    if (DOCUMENT !== undefined) {
	        return DOCUMENT;
	    }
	    else if (typeof document !== 'undefined') {
	        return document;
	    }
	    // No "document" can be found. This should only happen if we are running ivy outside Angular and
	    // the current platform is not a browser. Since this is not a supported scenario at the moment
	    // this should not happen in Angular apps.
	    // Once we support running ivy outside of Angular we will need to publish `setDocument()` as a
	    // public API. Meanwhile we just return `undefined` and let the application fail.
	    return undefined;
	}

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	// TODO: cleanup once the code is merged in angular/angular
	var RendererStyleFlags3;
	(function (RendererStyleFlags3) {
	    RendererStyleFlags3[RendererStyleFlags3["Important"] = 1] = "Important";
	    RendererStyleFlags3[RendererStyleFlags3["DashCase"] = 2] = "DashCase";
	})(RendererStyleFlags3 || (RendererStyleFlags3 = {}));
	/** Returns whether the `renderer` is a `ProceduralRenderer3` */
	function isProceduralRenderer(renderer) {
	    return !!(renderer.listen);
	}
	var Éµ0$2 = function (hostElement, rendererType) {
	    return getDocument();
	};
	var domRendererFactory3 = {
	    createRenderer: Éµ0$2
	};

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * For efficiency reasons we often put several different data types (`RNode`, `LView`, `LContainer`)
	 * in same location in `LView`. This is because we don't want to pre-allocate space for it
	 * because the storage is sparse. This file contains utilities for dealing with such data types.
	 *
	 * How do we know what is stored at a given location in `LView`.
	 * - `Array.isArray(value) === false` => `RNode` (The normal storage value)
	 * - `Array.isArray(value) === true` => then the `value[0]` represents the wrapped value.
	 *   - `typeof value[TYPE] === 'object'` => `LView`
	 *      - This happens when we have a component at a given location
	 *   - `typeof value[TYPE] === true` => `LContainer`
	 *      - This happens when we have `LContainer` binding at a given location.
	 *
	 *
	 * NOTE: it is assumed that `Array.isArray` and `typeof` operations are very efficient.
	 */
	/**
	 * Returns `RNode`.
	 * @param value wrapped value of `RNode`, `LView`, `LContainer`
	 */
	function unwrapRNode(value) {
	    while (Array.isArray(value)) {
	        value = value[HOST];
	    }
	    return value;
	}
	/**
	 * Retrieve an `RNode` for a given `TNode` and `LView`.
	 *
	 * This function guarantees in dev mode to retrieve a non-null `RNode`.
	 *
	 * @param tNode
	 * @param lView
	 */
	function getNativeByTNode(tNode, lView) {
	    ngDevMode && assertTNodeForLView(tNode, lView);
	    ngDevMode && assertDataInRange(lView, tNode.index);
	    var node = unwrapRNode(lView[tNode.index]);
	    ngDevMode && !isProceduralRenderer(lView[RENDERER]) && assertDomNode(node);
	    return node;
	}
	/**
	 * Retrieve an `RNode` or `null` for a given `TNode` and `LView`.
	 *
	 * Some `TNode`s don't have associated `RNode`s. For example `Projection`
	 *
	 * @param tNode
	 * @param lView
	 */
	function getNativeByTNodeOrNull(tNode, lView) {
	    var index = tNode.index;
	    if (index !== -1) {
	        ngDevMode && assertTNodeForLView(tNode, lView);
	        var node = unwrapRNode(lView[index]);
	        ngDevMode && node !== null && !isProceduralRenderer(lView[RENDERER]) && assertDomNode(node);
	        return node;
	    }
	    return null;
	}
	function getTNode(tView, index) {
	    ngDevMode && assertGreaterThan(index, -1, 'wrong index for TNode');
	    ngDevMode && assertLessThan(index, tView.data.length, 'wrong index for TNode');
	    return tView.data[index + HEADER_OFFSET];
	}
	function getComponentLViewByIndex(nodeIndex, hostView) {
	    // Could be an LView or an LContainer. If LContainer, unwrap to find LView.
	    ngDevMode && assertDataInRange(hostView, nodeIndex);
	    var slotValue = hostView[nodeIndex];
	    var lView = isLView(slotValue) ? slotValue : slotValue[HOST];
	    return lView;
	}
	/**
	 * Returns the monkey-patch value data present on the target (which could be
	 * a component, directive or a DOM node).
	 */
	function readPatchedData(target) {
	    ngDevMode && assertDefined(target, 'Target expected');
	    return target[MONKEY_PATCH_KEY_NAME] || null;
	}
	function readPatchedLView(target) {
	    var value = readPatchedData(target);
	    if (value) {
	        return Array.isArray(value) ? value : value.lView;
	    }
	    return null;
	}
	/** Checks whether a given view is in creation mode */
	function isCreationMode(view) {
	    return (view[FLAGS] & 4 /* CreationMode */) === 4 /* CreationMode */;
	}
	/**
	 * Returns a boolean for whether the view is attached to the change detection tree.
	 *
	 * Note: This determines whether a view should be checked, not whether it's inserted
	 * into a container. For that, you'll want `viewAttachedToContainer` below.
	 */
	function viewAttachedToChangeDetector(view) {
	    return (view[FLAGS] & 128 /* Attached */) === 128 /* Attached */;
	}
	/**
	 * Resets the pre-order hook flags of the view.
	 * @param lView the LView on which the flags are reset
	 */
	function resetPreOrderHookFlags(lView) {
	    lView[PREORDER_HOOK_FLAGS] = 0;
	}
	function getLContainerActiveIndex(lContainer) {
	    return lContainer[ACTIVE_INDEX] >> 1 /* SHIFT */;
	}
	/**
	 * Updates the `TRANSPLANTED_VIEWS_TO_REFRESH` counter on the `LContainer` as well as the parents
	 * whose
	 *  1. counter goes from 0 to 1, indicating that there is a new child that has a view to refresh
	 *  or
	 *  2. counter goes from 1 to 0, indicating there are no more descendant views to refresh
	 */
	function updateTransplantedViewCount(lContainer, amount) {
	    lContainer[TRANSPLANTED_VIEWS_TO_REFRESH] += amount;
	    var viewOrContainer = lContainer;
	    var parent = lContainer[PARENT];
	    while (parent !== null &&
	        ((amount === 1 && viewOrContainer[TRANSPLANTED_VIEWS_TO_REFRESH] === 1) ||
	            (amount === -1 && viewOrContainer[TRANSPLANTED_VIEWS_TO_REFRESH] === 0))) {
	        parent[TRANSPLANTED_VIEWS_TO_REFRESH] += amount;
	        viewOrContainer = parent;
	        parent = parent[PARENT];
	    }
	}

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	var instructionState = {
	    lFrame: createLFrame(null),
	    bindingsEnabled: true,
	    checkNoChangesMode: false,
	};
	/**
	 * Return the current `TView`.
	 */
	function getTView() {
	    return instructionState.lFrame.tView;
	}
	function getPreviousOrParentTNode() {
	    return instructionState.lFrame.previousOrParentTNode;
	}
	function setPreviousOrParentTNode(tNode, isParent) {
	    instructionState.lFrame.previousOrParentTNode = tNode;
	    instructionState.lFrame.isParent = isParent;
	}
	function getIsParent() {
	    return instructionState.lFrame.isParent;
	}
	function getCheckNoChangesMode() {
	    // TODO(misko): remove this from the LView since it is ngDevMode=true mode only.
	    return instructionState.checkNoChangesMode;
	}
	function setCheckNoChangesMode(mode) {
	    instructionState.checkNoChangesMode = mode;
	}
	function setBindingIndex(value) {
	    return instructionState.lFrame.bindingIndex = value;
	}
	/**
	 * Set a new binding root index so that host template functions can execute.
	 *
	 * Bindings inside the host template are 0 index. But because we don't know ahead of time
	 * how many host bindings we have we can't pre-compute them. For this reason they are all
	 * 0 index and we just shift the root so that they match next available location in the LView.
	 *
	 * @param bindingRootIndex Root index for `hostBindings`
	 * @param currentDirectiveIndex `TData[currentDirectiveIndex]` will point to the current directive
	 *        whose `hostBindings` are being processed.
	 */
	function setBindingRootForHostBindings(bindingRootIndex, currentDirectiveIndex) {
	    var lFrame = instructionState.lFrame;
	    lFrame.bindingIndex = lFrame.bindingRootIndex = bindingRootIndex;
	    setCurrentDirectiveIndex(currentDirectiveIndex);
	}
	/**
	 * Sets an index of a directive whose `hostBindings` are being processed.
	 *
	 * @param currentDirectiveIndex `TData` index where current directive instance can be found.
	 */
	function setCurrentDirectiveIndex(currentDirectiveIndex) {
	    instructionState.lFrame.currentDirectiveIndex = currentDirectiveIndex;
	}
	function setCurrentQueryIndex(value) {
	    instructionState.lFrame.currentQueryIndex = value;
	}
	/**
	 * This is a light weight version of the `enterView` which is needed by the DI system.
	 * @param newView
	 * @param tNode
	 */
	function enterDI(newView, tNode) {
	    ngDevMode && assertLViewOrUndefined(newView);
	    var newLFrame = allocLFrame();
	    instructionState.lFrame = newLFrame;
	    newLFrame.previousOrParentTNode = tNode;
	    newLFrame.lView = newView;
	}
	/**
	 * Swap the current lView with a new lView.
	 *
	 * For performance reasons we store the lView in the top level of the module.
	 * This way we minimize the number of properties to read. Whenever a new view
	 * is entered we have to store the lView for later, and when the view is
	 * exited the state has to be restored
	 *
	 * @param newView New lView to become active
	 * @param tNode Element to which the View is a child of
	 * @returns the previously active lView;
	 */
	function enterView(newView, tNode) {
	    ngDevMode && assertLViewOrUndefined(newView);
	    var newLFrame = allocLFrame();
	    if (ngDevMode) {
	        assertEqual(newLFrame.isParent, true, 'Expected clean LFrame');
	        assertEqual(newLFrame.lView, null, 'Expected clean LFrame');
	        assertEqual(newLFrame.tView, null, 'Expected clean LFrame');
	        assertEqual(newLFrame.selectedIndex, 0, 'Expected clean LFrame');
	        assertEqual(newLFrame.elementDepthCount, 0, 'Expected clean LFrame');
	        assertEqual(newLFrame.currentDirectiveIndex, -1, 'Expected clean LFrame');
	        assertEqual(newLFrame.currentNamespace, null, 'Expected clean LFrame');
	        assertEqual(newLFrame.currentSanitizer, null, 'Expected clean LFrame');
	        assertEqual(newLFrame.bindingRootIndex, -1, 'Expected clean LFrame');
	        assertEqual(newLFrame.currentQueryIndex, 0, 'Expected clean LFrame');
	    }
	    var tView = newView[TVIEW];
	    instructionState.lFrame = newLFrame;
	    newLFrame.previousOrParentTNode = tNode;
	    newLFrame.lView = newView;
	    newLFrame.tView = tView;
	    newLFrame.contextLView = newView;
	    newLFrame.bindingIndex = tView.bindingStartIndex;
	}
	/**
	 * Allocates next free LFrame. This function tries to reuse the `LFrame`s to lower memory pressure.
	 */
	function allocLFrame() {
	    var currentLFrame = instructionState.lFrame;
	    var childLFrame = currentLFrame === null ? null : currentLFrame.child;
	    var newLFrame = childLFrame === null ? createLFrame(currentLFrame) : childLFrame;
	    return newLFrame;
	}
	function createLFrame(parent) {
	    var lFrame = {
	        previousOrParentTNode: null,
	        isParent: true,
	        lView: null,
	        tView: null,
	        selectedIndex: 0,
	        contextLView: null,
	        elementDepthCount: 0,
	        currentNamespace: null,
	        currentSanitizer: null,
	        currentDirectiveIndex: -1,
	        bindingRootIndex: -1,
	        bindingIndex: -1,
	        currentQueryIndex: 0,
	        parent: parent,
	        child: null,
	    };
	    parent !== null && (parent.child = lFrame); // link the new LFrame for reuse.
	    return lFrame;
	}
	/**
	 * A lightweight version of leave which is used with DI.
	 *
	 * This function only resets `previousOrParentTNode` and `LView` as those are the only properties
	 * used with DI (`enterDI()`).
	 *
	 * NOTE: This function is reexported as `leaveDI`. However `leaveDI` has return type of `void` where
	 * as `leaveViewLight` has `LFrame`. This is so that `leaveViewLight` can be used in `leaveView`.
	 */
	function leaveViewLight() {
	    var oldLFrame = instructionState.lFrame;
	    instructionState.lFrame = oldLFrame.parent;
	    oldLFrame.previousOrParentTNode = null;
	    oldLFrame.lView = null;
	    return oldLFrame;
	}
	/**
	 * This is a lightweight version of the `leaveView` which is needed by the DI system.
	 *
	 * NOTE: this function is an alias so that we can change the type of the function to have `void`
	 * return type.
	 */
	var leaveDI = leaveViewLight;
	/**
	 * Leave the current `LView`
	 *
	 * This pops the `LFrame` with the associated `LView` from the stack.
	 *
	 * IMPORTANT: We must zero out the `LFrame` values here otherwise they will be retained. This is
	 * because for performance reasons we don't release `LFrame` but rather keep it for next use.
	 */
	function leaveView() {
	    var oldLFrame = leaveViewLight();
	    oldLFrame.isParent = true;
	    oldLFrame.tView = null;
	    oldLFrame.selectedIndex = 0;
	    oldLFrame.contextLView = null;
	    oldLFrame.elementDepthCount = 0;
	    oldLFrame.currentDirectiveIndex = -1;
	    oldLFrame.currentNamespace = null;
	    oldLFrame.currentSanitizer = null;
	    oldLFrame.bindingRootIndex = -1;
	    oldLFrame.bindingIndex = -1;
	    oldLFrame.currentQueryIndex = 0;
	}
	/**
	 * Gets the currently selected element index.
	 *
	 * Used with {@link property} instruction (and more in the future) to identify the index in the
	 * current `LView` to act on.
	 */
	function getSelectedIndex() {
	    return instructionState.lFrame.selectedIndex;
	}
	/**
	 * Sets the most recent index passed to {@link select}
	 *
	 * Used with {@link property} instruction (and more in the future) to identify the index in the
	 * current `LView` to act on.
	 *
	 * (Note that if an "exit function" was set earlier (via `setElementExitFn()`) then that will be
	 * run if and when the provided `index` value is different from the current selected index value.)
	 */
	function setSelectedIndex(index) {
	    instructionState.lFrame.selectedIndex = index;
	}

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * Adds all directive lifecycle hooks from the given `DirectiveDef` to the given `TView`.
	 *
	 * Must be run *only* on the first template pass.
	 *
	 * Sets up the pre-order hooks on the provided `tView`,
	 * see {@link HookData} for details about the data structure.
	 *
	 * @param directiveIndex The index of the directive in LView
	 * @param directiveDef The definition containing the hooks to setup in tView
	 * @param tView The current TView
	 */
	function registerPreOrderHooks(directiveIndex, directiveDef, tView) {
	    ngDevMode && assertFirstCreatePass(tView);
	    var onChanges = directiveDef.onChanges, onInit = directiveDef.onInit, doCheck = directiveDef.doCheck;
	    if (onChanges) {
	        (tView.preOrderHooks || (tView.preOrderHooks = [])).push(directiveIndex, onChanges);
	        (tView.preOrderCheckHooks || (tView.preOrderCheckHooks = [])).push(directiveIndex, onChanges);
	    }
	    if (onInit) {
	        (tView.preOrderHooks || (tView.preOrderHooks = [])).push(-directiveIndex, onInit);
	    }
	    if (doCheck) {
	        (tView.preOrderHooks || (tView.preOrderHooks = [])).push(directiveIndex, doCheck);
	        (tView.preOrderCheckHooks || (tView.preOrderCheckHooks = [])).push(directiveIndex, doCheck);
	    }
	}
	/**
	 *
	 * Loops through the directives on the provided `tNode` and queues hooks to be
	 * run that are not initialization hooks.
	 *
	 * Should be executed during `elementEnd()` and similar to
	 * preserve hook execution order. Content, view, and destroy hooks for projected
	 * components and directives must be called *before* their hosts.
	 *
	 * Sets up the content, view, and destroy hooks on the provided `tView`,
	 * see {@link HookData} for details about the data structure.
	 *
	 * NOTE: This does not set up `onChanges`, `onInit` or `doCheck`, those are set up
	 * separately at `elementStart`.
	 *
	 * @param tView The current TView
	 * @param tNode The TNode whose directives are to be searched for hooks to queue
	 */
	function registerPostOrderHooks(tView, tNode) {
	    ngDevMode && assertFirstCreatePass(tView);
	    // It's necessary to loop through the directives at elementEnd() (rather than processing in
	    // directiveCreate) so we can preserve the current hook order. Content, view, and destroy
	    // hooks for projected components and directives must be called *before* their hosts.
	    for (var i = tNode.directiveStart, end = tNode.directiveEnd; i < end; i++) {
	        var directiveDef = tView.data[i];
	        if (directiveDef.afterContentInit) {
	            (tView.contentHooks || (tView.contentHooks = [])).push(-i, directiveDef.afterContentInit);
	        }
	        if (directiveDef.afterContentChecked) {
	            (tView.contentHooks || (tView.contentHooks = [])).push(i, directiveDef.afterContentChecked);
	            (tView.contentCheckHooks || (tView.contentCheckHooks = []))
	                .push(i, directiveDef.afterContentChecked);
	        }
	        if (directiveDef.afterViewInit) {
	            (tView.viewHooks || (tView.viewHooks = [])).push(-i, directiveDef.afterViewInit);
	        }
	        if (directiveDef.afterViewChecked) {
	            (tView.viewHooks || (tView.viewHooks = [])).push(i, directiveDef.afterViewChecked);
	            (tView.viewCheckHooks || (tView.viewCheckHooks = [])).push(i, directiveDef.afterViewChecked);
	        }
	        if (directiveDef.onDestroy != null) {
	            (tView.destroyHooks || (tView.destroyHooks = [])).push(i, directiveDef.onDestroy);
	        }
	    }
	}
	/**
	 * Executing hooks requires complex logic as we need to deal with 2 constraints.
	 *
	 * 1. Init hooks (ngOnInit, ngAfterContentInit, ngAfterViewInit) must all be executed once and only
	 * once, across many change detection cycles. This must be true even if some hooks throw, or if
	 * some recursively trigger a change detection cycle.
	 * To solve that, it is required to track the state of the execution of these init hooks.
	 * This is done by storing and maintaining flags in the view: the {@link InitPhaseState},
	 * and the index within that phase. They can be seen as a cursor in the following structure:
	 * [[onInit1, onInit2], [afterContentInit1], [afterViewInit1, afterViewInit2, afterViewInit3]]
	 * They are are stored as flags in LView[FLAGS].
	 *
	 * 2. Pre-order hooks can be executed in batches, because of the select instruction.
	 * To be able to pause and resume their execution, we also need some state about the hook's array
	 * that is being processed:
	 * - the index of the next hook to be executed
	 * - the number of init hooks already found in the processed part of the  array
	 * They are are stored as flags in LView[PREORDER_HOOK_FLAGS].
	 */
	/**
	 * Executes pre-order check hooks ( OnChanges, DoChanges) given a view where all the init hooks were
	 * executed once. This is a light version of executeInitAndCheckPreOrderHooks where we can skip read
	 * / write of the init-hooks related flags.
	 * @param lView The LView where hooks are defined
	 * @param hooks Hooks to be run
	 * @param nodeIndex 3 cases depending on the value:
	 * - undefined: all hooks from the array should be executed (post-order case)
	 * - null: execute hooks only from the saved index until the end of the array (pre-order case, when
	 * flushing the remaining hooks)
	 * - number: execute hooks only from the saved index until that node index exclusive (pre-order
	 * case, when executing select(number))
	 */
	function executeCheckHooks(lView, hooks, nodeIndex) {
	    callHooks(lView, hooks, 3 /* InitPhaseCompleted */, nodeIndex);
	}
	/**
	 * Executes post-order init and check hooks (one of AfterContentInit, AfterContentChecked,
	 * AfterViewInit, AfterViewChecked) given a view where there are pending init hooks to be executed.
	 * @param lView The LView where hooks are defined
	 * @param hooks Hooks to be run
	 * @param initPhase A phase for which hooks should be run
	 * @param nodeIndex 3 cases depending on the value:
	 * - undefined: all hooks from the array should be executed (post-order case)
	 * - null: execute hooks only from the saved index until the end of the array (pre-order case, when
	 * flushing the remaining hooks)
	 * - number: execute hooks only from the saved index until that node index exclusive (pre-order
	 * case, when executing select(number))
	 */
	function executeInitAndCheckHooks(lView, hooks, initPhase, nodeIndex) {
	    ngDevMode &&
	        assertNotEqual(initPhase, 3 /* InitPhaseCompleted */, 'Init pre-order hooks should not be called more than once');
	    if ((lView[FLAGS] & 3 /* InitPhaseStateMask */) === initPhase) {
	        callHooks(lView, hooks, initPhase, nodeIndex);
	    }
	}
	function incrementInitPhaseFlags(lView, initPhase) {
	    ngDevMode &&
	        assertNotEqual(initPhase, 3 /* InitPhaseCompleted */, 'Init hooks phase should not be incremented after all init hooks have been run.');
	    var flags = lView[FLAGS];
	    if ((flags & 3 /* InitPhaseStateMask */) === initPhase) {
	        flags &= 2047 /* IndexWithinInitPhaseReset */;
	        flags += 1 /* InitPhaseStateIncrementer */;
	        lView[FLAGS] = flags;
	    }
	}
	/**
	 * Calls lifecycle hooks with their contexts, skipping init hooks if it's not
	 * the first LView pass
	 *
	 * @param currentView The current view
	 * @param arr The array in which the hooks are found
	 * @param initPhaseState the current state of the init phase
	 * @param currentNodeIndex 3 cases depending on the value:
	 * - undefined: all hooks from the array should be executed (post-order case)
	 * - null: execute hooks only from the saved index until the end of the array (pre-order case, when
	 * flushing the remaining hooks)
	 * - number: execute hooks only from the saved index until that node index exclusive (pre-order
	 * case, when executing select(number))
	 */
	function callHooks(currentView, arr, initPhase, currentNodeIndex) {
	    ngDevMode &&
	        assertEqual(getCheckNoChangesMode(), false, 'Hooks should never be run in the check no changes mode.');
	    var startIndex = currentNodeIndex !== undefined ?
	        (currentView[PREORDER_HOOK_FLAGS] & 65535 /* IndexOfTheNextPreOrderHookMaskMask */) :
	        0;
	    var nodeIndexLimit = currentNodeIndex != null ? currentNodeIndex : -1;
	    var lastNodeIndexFound = 0;
	    for (var i = startIndex; i < arr.length; i++) {
	        var hook = arr[i + 1];
	        if (typeof hook === 'number') {
	            lastNodeIndexFound = arr[i];
	            if (currentNodeIndex != null && lastNodeIndexFound >= currentNodeIndex) {
	                break;
	            }
	        }
	        else {
	            var isInitHook = arr[i] < 0;
	            if (isInitHook)
	                currentView[PREORDER_HOOK_FLAGS] += 65536 /* NumberOfInitHooksCalledIncrementer */;
	            if (lastNodeIndexFound < nodeIndexLimit || nodeIndexLimit == -1) {
	                callHook(currentView, initPhase, arr, i);
	                currentView[PREORDER_HOOK_FLAGS] =
	                    (currentView[PREORDER_HOOK_FLAGS] & 4294901760 /* NumberOfInitHooksCalledMask */) + i +
	                        2;
	            }
	            i++;
	        }
	    }
	}
	/**
	 * Execute one hook against the current `LView`.
	 *
	 * @param currentView The current view
	 * @param initPhaseState the current state of the init phase
	 * @param arr The array in which the hooks are found
	 * @param i The current index within the hook data array
	 */
	function callHook(currentView, initPhase, arr, i) {
	    var isInitHook = arr[i] < 0;
	    var hook = arr[i + 1];
	    var directiveIndex = isInitHook ? -arr[i] : arr[i];
	    var directive = currentView[directiveIndex];
	    if (isInitHook) {
	        var indexWithintInitPhase = currentView[FLAGS] >> 11 /* IndexWithinInitPhaseShift */;
	        // The init phase state must be always checked here as it may have been recursively
	        // updated
	        if (indexWithintInitPhase <
	            (currentView[PREORDER_HOOK_FLAGS] >> 16 /* NumberOfInitHooksCalledShift */) &&
	            (currentView[FLAGS] & 3 /* InitPhaseStateMask */) === initPhase) {
	            currentView[FLAGS] += 2048 /* IndexWithinInitPhaseIncrementer */;
	            hook.call(directive);
	        }
	    }
	    else {
	        hook.call(directive);
	    }
	}

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	var TNODE = 8;
	var PARENT_INJECTOR = 8;
	var INJECTOR_BLOOM_PARENT_SIZE = 9;
	var NO_PARENT_INJECTOR = -1;
	/**
	 * Each injector is saved in 9 contiguous slots in `LView` and 9 contiguous slots in
	 * `TView.data`. This allows us to store information about the current node's tokens (which
	 * can be shared in `TView`) as well as the tokens of its ancestor nodes (which cannot be
	 * shared, so they live in `LView`).
	 *
	 * Each of these slots (aside from the last slot) contains a bloom filter. This bloom filter
	 * determines whether a directive is available on the associated node or not. This prevents us
	 * from searching the directives array at this level unless it's probable the directive is in it.
	 *
	 * See: https://en.wikipedia.org/wiki/Bloom_filter for more about bloom filters.
	 *
	 * Because all injectors have been flattened into `LView` and `TViewData`, they cannot typed
	 * using interfaces as they were previously. The start index of each `LInjector` and `TInjector`
	 * will differ based on where it is flattened into the main array, so it's not possible to know
	 * the indices ahead of time and save their types here. The interfaces are still included here
	 * for documentation purposes.
	 *
	 * export interface LInjector extends Array<any> {
	 *
	 *    // Cumulative bloom for directive IDs 0-31  (IDs are % BLOOM_SIZE)
	 *    [0]: number;
	 *
	 *    // Cumulative bloom for directive IDs 32-63
	 *    [1]: number;
	 *
	 *    // Cumulative bloom for directive IDs 64-95
	 *    [2]: number;
	 *
	 *    // Cumulative bloom for directive IDs 96-127
	 *    [3]: number;
	 *
	 *    // Cumulative bloom for directive IDs 128-159
	 *    [4]: number;
	 *
	 *    // Cumulative bloom for directive IDs 160 - 191
	 *    [5]: number;
	 *
	 *    // Cumulative bloom for directive IDs 192 - 223
	 *    [6]: number;
	 *
	 *    // Cumulative bloom for directive IDs 224 - 255
	 *    [7]: number;
	 *
	 *    // We need to store a reference to the injector's parent so DI can keep looking up
	 *    // the injector tree until it finds the dependency it's looking for.
	 *    [PARENT_INJECTOR]: number;
	 * }
	 *
	 * export interface TInjector extends Array<any> {
	 *
	 *    // Shared node bloom for directive IDs 0-31  (IDs are % BLOOM_SIZE)
	 *    [0]: number;
	 *
	 *    // Shared node bloom for directive IDs 32-63
	 *    [1]: number;
	 *
	 *    // Shared node bloom for directive IDs 64-95
	 *    [2]: number;
	 *
	 *    // Shared node bloom for directive IDs 96-127
	 *    [3]: number;
	 *
	 *    // Shared node bloom for directive IDs 128-159
	 *    [4]: number;
	 *
	 *    // Shared node bloom for directive IDs 160 - 191
	 *    [5]: number;
	 *
	 *    // Shared node bloom for directive IDs 192 - 223
	 *    [6]: number;
	 *
	 *    // Shared node bloom for directive IDs 224 - 255
	 *    [7]: number;
	 *
	 *    // Necessary to find directive indices for a particular node.
	 *    [TNODE]: TElementNode|TElementContainerNode|TContainerNode;
	 *  }
	 */
	/**
	 * Factory for creating instances of injectors in the NodeInjector.
	 *
	 * This factory is complicated by the fact that it can resolve `multi` factories as well.
	 *
	 * NOTE: Some of the fields are optional which means that this class has two hidden classes.
	 * - One without `multi` support (most common)
	 * - One with `multi` values, (rare).
	 *
	 * Since VMs can cache up to 4 inline hidden classes this is OK.
	 *
	 * - Single factory: Only `resolving` and `factory` is defined.
	 * - `providers` factory: `componentProviders` is a number and `index = -1`.
	 * - `viewProviders` factory: `componentProviders` is a number and `index` points to `providers`.
	 */
	var NodeInjectorFactory = /** @class */ (function () {
	    function NodeInjectorFactory(
	    /**
	     * Factory to invoke in order to create a new instance.
	     */
	    factory, 
	    /**
	     * Set to `true` if the token is declared in `viewProviders` (or if it is component).
	     */
	    isViewProvider, injectImplementation) {
	        this.factory = factory;
	        /**
	         * Marker set to true during factory invocation to see if we get into recursive loop.
	         * Recursive loop causes an error to be displayed.
	         */
	        this.resolving = false;
	        this.canSeeViewProviders = isViewProvider;
	        this.injectImpl = injectImplementation;
	    }
	    return NodeInjectorFactory;
	}());
	function isFactory(obj) {
	    return obj instanceof NodeInjectorFactory;
	}

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	function assertNodeType(tNode, type) {
	    assertDefined(tNode, 'should be called with a TNode');
	    assertEqual(tNode.type, type, "should be a " + typeName(type));
	}
	function assertNodeOfPossibleTypes(tNode) {
	    var types = [];
	    for (var _i = 1; _i < arguments.length; _i++) {
	        types[_i - 1] = arguments[_i];
	    }
	    assertDefined(tNode, 'should be called with a TNode');
	    var found = types.some(function (type) { return tNode.type === type; });
	    assertEqual(found, true, "Should be one of " + types.map(typeName).join(', ') + " but got " + typeName(tNode.type));
	}
	function typeName(type) {
	    if (type == 1 /* Projection */)
	        return 'Projection';
	    if (type == 0 /* Container */)
	        return 'Container';
	    if (type == 5 /* IcuContainer */)
	        return 'IcuContainer';
	    if (type == 2 /* View */)
	        return 'View';
	    if (type == 3 /* Element */)
	        return 'Element';
	    if (type == 4 /* ElementContainer */)
	        return 'ElementContainer';
	    return '<unknown>';
	}

	/**
	 * Assigns all attribute values to the provided element via the inferred renderer.
	 *
	 * This function accepts two forms of attribute entries:
	 *
	 * default: (key, value):
	 *  attrs = [key1, value1, key2, value2]
	 *
	 * namespaced: (NAMESPACE_MARKER, uri, name, value)
	 *  attrs = [NAMESPACE_MARKER, uri, name, value, NAMESPACE_MARKER, uri, name, value]
	 *
	 * The `attrs` array can contain a mix of both the default and namespaced entries.
	 * The "default" values are set without a marker, but if the function comes across
	 * a marker value then it will attempt to set a namespaced value. If the marker is
	 * not of a namespaced value then the function will quit and return the index value
	 * where it stopped during the iteration of the attrs array.
	 *
	 * See [AttributeMarker] to understand what the namespace marker value is.
	 *
	 * Note that this instruction does not support assigning style and class values to
	 * an element. See `elementStart` and `elementHostAttrs` to learn how styling values
	 * are applied to an element.
	 * @param renderer The renderer to be used
	 * @param native The element that the attributes will be assigned to
	 * @param attrs The attribute array of values that will be assigned to the element
	 * @returns the index value that was last accessed in the attributes array
	 */
	function setUpAttributes(renderer, native, attrs) {
	    var isProc = isProceduralRenderer(renderer);
	    var i = 0;
	    while (i < attrs.length) {
	        var value = attrs[i];
	        if (typeof value === 'number') {
	            // only namespaces are supported. Other value types (such as style/class
	            // entries) are not supported in this function.
	            if (value !== 0 /* NamespaceURI */) {
	                break;
	            }
	            // we just landed on the marker value ... therefore
	            // we should skip to the next entry
	            i++;
	            var namespaceURI = attrs[i++];
	            var attrName = attrs[i++];
	            var attrVal = attrs[i++];
	            ngDevMode && ngDevMode.rendererSetAttribute++;
	            isProc ?
	                renderer.setAttribute(native, attrName, attrVal, namespaceURI) :
	                native.setAttributeNS(namespaceURI, attrName, attrVal);
	        }
	        else {
	            // attrName is string;
	            var attrName = value;
	            var attrVal = attrs[++i];
	            // Standard attributes
	            ngDevMode && ngDevMode.rendererSetAttribute++;
	            if (isAnimationProp(attrName)) {
	                if (isProc) {
	                    renderer.setProperty(native, attrName, attrVal);
	                }
	            }
	            else {
	                isProc ?
	                    renderer.setAttribute(native, attrName, attrVal) :
	                    native.setAttribute(attrName, attrVal);
	            }
	            i++;
	        }
	    }
	    // another piece of code may iterate over the same attributes array. Therefore
	    // it may be helpful to return the exact spot where the attributes array exited
	    // whether by running into an unsupported marker or if all the static values were
	    // iterated over.
	    return i;
	}
	function isAnimationProp(name) {
	    // Perf note: accessing charCodeAt to check for the first character of a string is faster as
	    // compared to accessing a character at index 0 (ex. name[0]). The main reason for this is that
	    // charCodeAt doesn't allocate memory to return a substring.
	    return name.charCodeAt(0) === 64 /* AT_SIGN */;
	}

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/// Parent Injector Utils ///////////////////////////////////////////////////////////////
	function hasParentInjector(parentLocation) {
	    return parentLocation !== NO_PARENT_INJECTOR;
	}
	function getParentInjectorIndex(parentLocation) {
	    return parentLocation & 32767 /* InjectorIndexMask */;
	}
	function getParentInjectorViewOffset(parentLocation) {
	    return parentLocation >> 16 /* ViewOffsetShift */;
	}
	/**
	 * Unwraps a parent injector location number to find the view offset from the current injector,
	 * then walks up the declaration view tree until the view is found that contains the parent
	 * injector.
	 *
	 * @param location The location of the parent injector, which contains the view offset
	 * @param startView The LView instance from which to start walking up the view tree
	 * @returns The LView instance that contains the parent injector
	 */
	function getParentInjectorView(location, startView) {
	    var viewOffset = getParentInjectorViewOffset(location);
	    var parentView = startView;
	    // For most cases, the parent injector can be found on the host node (e.g. for component
	    // or container), but we must keep the loop here to support the rarer case of deeply nested
	    // <ng-template> tags or inline views, where the parent injector might live many views
	    // above the child injector.
	    while (viewOffset > 0) {
	        parentView = parentView[DECLARATION_VIEW];
	        viewOffset--;
	    }
	    return parentView;
	}

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * Used for stringify render output in Ivy.
	 * Important! This function is very performance-sensitive and we should
	 * be extra careful not to introduce megamorphic reads in it.
	 */
	function renderStringify(value) {
	    if (typeof value === 'string')
	        return value;
	    if (value == null)
	        return '';
	    return '' + value;
	}
	/**
	 * Used to stringify a value so that it can be displayed in an error message.
	 * Important! This function contains a megamorphic read and should only be
	 * used for error messages.
	 */
	function stringifyForError(value) {
	    if (typeof value === 'function')
	        return value.name || value.toString();
	    if (typeof value === 'object' && value != null && typeof value.type === 'function') {
	        return value.type.name || value.type.toString();
	    }
	    return renderStringify(value);
	}
	var Éµ0$3 = function () { return (typeof requestAnimationFrame !== 'undefined' &&
	    requestAnimationFrame || // browser only
	    setTimeout // everything else
	)
	    .bind(_global$1); };
	var defaultScheduler = (Éµ0$3)();
	/**
	 * The special delimiter we use to separate property names, prefixes, and suffixes
	 * in property binding metadata. See storeBindingMetadata().
	 *
	 * We intentionally use the Unicode "REPLACEMENT CHARACTER" (U+FFFD) as a delimiter
	 * because it is a very uncommon character that is unlikely to be part of a user's
	 * property names or interpolation strings. If it is in fact used in a property
	 * binding, DebugElement.properties will not return the correct value for that
	 * binding. However, there should be no runtime effect for real applications.
	 *
	 * This character is typically rendered as a question mark inside of a diamond.
	 * See https://en.wikipedia.org/wiki/Specials_(Unicode_block)
	 *
	 */
	var INTERPOLATION_DELIMITER = "\uFFFD";
	/**
	 * Unwrap a value which might be behind a closure (for forward declaration reasons).
	 */
	function maybeUnwrapFn(value) {
	    if (value instanceof Function) {
	        return value();
	    }
	    else {
	        return value;
	    }
	}

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * Defines if the call to `inject` should include `viewProviders` in its resolution.
	 *
	 * This is set to true when we try to instantiate a component. This value is reset in
	 * `getNodeInjectable` to a value which matches the declaration location of the token about to be
	 * instantiated. This is done so that if we are injecting a token which was declared outside of
	 * `viewProviders` we don't accidentally pull `viewProviders` in.
	 *
	 * Example:
	 *
	 * ```
	 * @Injectable()
	 * class MyService {
	 *   constructor(public value: String) {}
	 * }
	 *
	 * @Component({
	 *   providers: [
	 *     MyService,
	 *     {provide: String, value: 'providers' }
	 *   ]
	 *   viewProviders: [
	 *     {provide: String, value: 'viewProviders'}
	 *   ]
	 * })
	 * class MyComponent {
	 *   constructor(myService: MyService, value: String) {
	 *     // We expect that Component can see into `viewProviders`.
	 *     expect(value).toEqual('viewProviders');
	 *     // `MyService` was not declared in `viewProviders` hence it can't see it.
	 *     expect(myService.value).toEqual('providers');
	 *   }
	 * }
	 *
	 * ```
	 */
	var includeViewProviders = true;
	function setIncludeViewProviders(v) {
	    var oldValue = includeViewProviders;
	    includeViewProviders = v;
	    return oldValue;
	}
	/**
	 * The number of slots in each bloom filter (used by DI). The larger this number, the fewer
	 * directives that will share slots, and thus, the fewer false positives when checking for
	 * the existence of a directive.
	 */
	var BLOOM_SIZE = 256;
	var BLOOM_MASK = BLOOM_SIZE - 1;
	/** Counter used to generate unique IDs for directives. */
	var nextNgElementId = 0;
	/**
	 * Registers this directive as present in its node's injector by flipping the directive's
	 * corresponding bit in the injector's bloom filter.
	 *
	 * @param injectorIndex The index of the node injector where this token should be registered
	 * @param tView The TView for the injector's bloom filters
	 * @param type The directive token to register
	 */
	function bloomAdd(injectorIndex, tView, type) {
	    ngDevMode && assertEqual(tView.firstCreatePass, true, 'expected firstCreatePass to be true');
	    var id = typeof type !== 'string' ? type[NG_ELEMENT_ID] : type.charCodeAt(0) || 0;
	    // Set a unique ID on the directive type, so if something tries to inject the directive,
	    // we can easily retrieve the ID and hash it into the bloom bit that should be checked.
	    if (id == null) {
	        id = type[NG_ELEMENT_ID] = nextNgElementId++;
	    }
	    // We only have BLOOM_SIZE (256) slots in our bloom filter (8 buckets * 32 bits each),
	    // so all unique IDs must be modulo-ed into a number from 0 - 255 to fit into the filter.
	    var bloomBit = id & BLOOM_MASK;
	    // Create a mask that targets the specific bit associated with the directive.
	    // JS bit operations are 32 bits, so this will be a number between 2^0 and 2^31, corresponding
	    // to bit positions 0 - 31 in a 32 bit integer.
	    var mask = 1 << bloomBit;
	    // Use the raw bloomBit number to determine which bloom filter bucket we should check
	    // e.g: bf0 = [0 - 31], bf1 = [32 - 63], bf2 = [64 - 95], bf3 = [96 - 127], etc
	    var b7 = bloomBit & 0x80;
	    var b6 = bloomBit & 0x40;
	    var b5 = bloomBit & 0x20;
	    var tData = tView.data;
	    if (b7) {
	        b6 ? (b5 ? (tData[injectorIndex + 7] |= mask) : (tData[injectorIndex + 6] |= mask)) :
	            (b5 ? (tData[injectorIndex + 5] |= mask) : (tData[injectorIndex + 4] |= mask));
	    }
	    else {
	        b6 ? (b5 ? (tData[injectorIndex + 3] |= mask) : (tData[injectorIndex + 2] |= mask)) :
	            (b5 ? (tData[injectorIndex + 1] |= mask) : (tData[injectorIndex] |= mask));
	    }
	}
	/**
	 * Creates (or gets an existing) injector for a given element or container.
	 *
	 * @param tNode for which an injector should be retrieved / created.
	 * @param hostView View where the node is stored
	 * @returns Node injector
	 */
	function getOrCreateNodeInjectorForNode(tNode, hostView) {
	    var existingInjectorIndex = getInjectorIndex(tNode, hostView);
	    if (existingInjectorIndex !== -1) {
	        return existingInjectorIndex;
	    }
	    var tView = hostView[TVIEW];
	    if (tView.firstCreatePass) {
	        tNode.injectorIndex = hostView.length;
	        insertBloom(tView.data, tNode); // foundation for node bloom
	        insertBloom(hostView, null); // foundation for cumulative bloom
	        insertBloom(tView.blueprint, null);
	    }
	    var parentLoc = getParentInjectorLocation(tNode, hostView);
	    var injectorIndex = tNode.injectorIndex;
	    // If a parent injector can't be found, its location is set to -1.
	    // In that case, we don't need to set up a cumulative bloom
	    if (hasParentInjector(parentLoc)) {
	        var parentIndex = getParentInjectorIndex(parentLoc);
	        var parentLView = getParentInjectorView(parentLoc, hostView);
	        var parentData = parentLView[TVIEW].data;
	        // Creates a cumulative bloom filter that merges the parent's bloom filter
	        // and its own cumulative bloom (which contains tokens for all ancestors)
	        for (var i = 0; i < 8; i++) {
	            hostView[injectorIndex + i] = parentLView[parentIndex + i] | parentData[parentIndex + i];
	        }
	    }
	    hostView[injectorIndex + PARENT_INJECTOR] = parentLoc;
	    return injectorIndex;
	}
	function insertBloom(arr, footer) {
	    arr.push(0, 0, 0, 0, 0, 0, 0, 0, footer);
	}
	function getInjectorIndex(tNode, hostView) {
	    if (tNode.injectorIndex === -1 ||
	        // If the injector index is the same as its parent's injector index, then the index has been
	        // copied down from the parent node. No injector has been created yet on this node.
	        (tNode.parent && tNode.parent.injectorIndex === tNode.injectorIndex) ||
	        // After the first template pass, the injector index might exist but the parent values
	        // might not have been calculated yet for this instance
	        hostView[tNode.injectorIndex + PARENT_INJECTOR] == null) {
	        return -1;
	    }
	    else {
	        return tNode.injectorIndex;
	    }
	}
	/**
	 * Finds the index of the parent injector, with a view offset if applicable. Used to set the
	 * parent injector initially.
	 *
	 * Returns a combination of number of `ViewData` we have to go up and index in that `Viewdata`
	 */
	function getParentInjectorLocation(tNode, view) {
	    if (tNode.parent && tNode.parent.injectorIndex !== -1) {
	        return tNode.parent.injectorIndex; // ViewOffset is 0
	    }
	    // For most cases, the parent injector index can be found on the host node (e.g. for component
	    // or container), so this loop will be skipped, but we must keep the loop here to support
	    // the rarer case of deeply nested <ng-template> tags or inline views.
	    var hostTNode = view[T_HOST];
	    var viewOffset = 1;
	    while (hostTNode && hostTNode.injectorIndex === -1) {
	        view = view[DECLARATION_VIEW];
	        hostTNode = view ? view[T_HOST] : null;
	        viewOffset++;
	    }
	    return hostTNode ?
	        hostTNode.injectorIndex | (viewOffset << 16 /* ViewOffsetShift */) :
	        -1;
	}
	/**
	 * Makes a type or an injection token public to the DI system by adding it to an
	 * injector's bloom filter.
	 *
	 * @param di The node injector in which a directive will be added
	 * @param token The type or the injection token to be made public
	 */
	function diPublicInInjector(injectorIndex, tView, token) {
	    bloomAdd(injectorIndex, tView, token);
	}
	/**
	 * Returns the value associated to the given token from the NodeInjectors => ModuleInjector.
	 *
	 * Look for the injector providing the token by walking up the node injector tree and then
	 * the module injector tree.
	 *
	 * This function patches `token` with `__NG_ELEMENT_ID__` which contains the id for the bloom
	 * filter. Negative values are reserved for special objects.
	 *   - `-1` is reserved for injecting `Injector` (implemented by `NodeInjector`)
	 *
	 * @param tNode The Node where the search for the injector should start
	 * @param lView The `LView` that contains the `tNode`
	 * @param token The token to look for
	 * @param flags Injection flags
	 * @param notFoundValue The value to return when the injection flags is `InjectFlags.Optional`
	 * @returns the value from the injector, `null` when not found, or `notFoundValue` if provided
	 */
	function getOrCreateInjectable(tNode, lView, token, flags, notFoundValue) {
	    if (flags === void 0) { flags = InjectFlags.Default; }
	    if (tNode !== null) {
	        var bloomHash = bloomHashBitOrFactory(token);
	        // If the ID stored here is a function, this is a special object like ElementRef or TemplateRef
	        // so just call the factory function to create it.
	        if (typeof bloomHash === 'function') {
	            enterDI(lView, tNode);
	            try {
	                var value = bloomHash();
	                if (value == null && !(flags & InjectFlags.Optional)) {
	                    throw new Error("No provider for " + stringifyForError(token) + "!");
	                }
	                else {
	                    return value;
	                }
	            }
	            finally {
	                leaveDI();
	            }
	        }
	        else if (typeof bloomHash == 'number') {
	            if (bloomHash === -1) {
	                // `-1` is a special value used to identify `Injector` types.
	                return new NodeInjector(tNode, lView);
	            }
	            // If the token has a bloom hash, then it is a token which could be in NodeInjector.
	            // A reference to the previous injector TView that was found while climbing the element
	            // injector tree. This is used to know if viewProviders can be accessed on the current
	            // injector.
	            var previousTView = null;
	            var injectorIndex = getInjectorIndex(tNode, lView);
	            var parentLocation = NO_PARENT_INJECTOR;
	            var hostTElementNode = flags & InjectFlags.Host ? lView[DECLARATION_COMPONENT_VIEW][T_HOST] : null;
	            // If we should skip this injector, or if there is no injector on this node, start by
	            // searching
	            // the parent injector.
	            if (injectorIndex === -1 || flags & InjectFlags.SkipSelf) {
	                parentLocation = injectorIndex === -1 ? getParentInjectorLocation(tNode, lView) :
	                    lView[injectorIndex + PARENT_INJECTOR];
	                if (!shouldSearchParent(flags, false)) {
	                    injectorIndex = -1;
	                }
	                else {
	                    previousTView = lView[TVIEW];
	                    injectorIndex = getParentInjectorIndex(parentLocation);
	                    lView = getParentInjectorView(parentLocation, lView);
	                }
	            }
	            // Traverse up the injector tree until we find a potential match or until we know there
	            // *isn't* a match.
	            while (injectorIndex !== -1) {
	                parentLocation = lView[injectorIndex + PARENT_INJECTOR];
	                // Check the current injector. If it matches, see if it contains token.
	                var tView = lView[TVIEW];
	                if (bloomHasToken(bloomHash, injectorIndex, tView.data)) {
	                    // At this point, we have an injector which *may* contain the token, so we step through
	                    // the providers and directives associated with the injector's corresponding node to get
	                    // the instance.
	                    var instance = searchTokensOnInjector(injectorIndex, lView, token, previousTView, flags, hostTElementNode);
	                    if (instance !== NOT_FOUND) {
	                        return instance;
	                    }
	                }
	                if (shouldSearchParent(flags, lView[TVIEW].data[injectorIndex + TNODE] === hostTElementNode) &&
	                    bloomHasToken(bloomHash, injectorIndex, lView)) {
	                    // The def wasn't found anywhere on this node, so it was a false positive.
	                    // Traverse up the tree and continue searching.
	                    previousTView = tView;
	                    injectorIndex = getParentInjectorIndex(parentLocation);
	                    lView = getParentInjectorView(parentLocation, lView);
	                }
	                else {
	                    // If we should not search parent OR If the ancestor bloom filter value does not have the
	                    // bit corresponding to the directive we can give up on traversing up to find the specific
	                    // injector.
	                    injectorIndex = -1;
	                }
	            }
	        }
	    }
	    if (flags & InjectFlags.Optional && notFoundValue === undefined) {
	        // This must be set or the NullInjector will throw for optional deps
	        notFoundValue = null;
	    }
	    if ((flags & (InjectFlags.Self | InjectFlags.Host)) === 0) {
	        var moduleInjector = lView[INJECTOR$1];
	        // switch to `injectInjectorOnly` implementation for module injector, since module injector
	        // should not have access to Component/Directive DI scope (that may happen through
	        // `directiveInject` implementation)
	        var previousInjectImplementation = setInjectImplementation(undefined);
	        try {
	            if (moduleInjector) {
	                return moduleInjector.get(token, notFoundValue, flags & InjectFlags.Optional);
	            }
	            else {
	                return injectRootLimpMode(token, notFoundValue, flags & InjectFlags.Optional);
	            }
	        }
	        finally {
	            setInjectImplementation(previousInjectImplementation);
	        }
	    }
	    if (flags & InjectFlags.Optional) {
	        return notFoundValue;
	    }
	    else {
	        throw new Error("NodeInjector: NOT_FOUND [" + stringifyForError(token) + "]");
	    }
	}
	var NOT_FOUND = {};
	function searchTokensOnInjector(injectorIndex, lView, token, previousTView, flags, hostTElementNode) {
	    var currentTView = lView[TVIEW];
	    var tNode = currentTView.data[injectorIndex + TNODE];
	    // First, we need to determine if view providers can be accessed by the starting element.
	    // There are two possibities
	    var canAccessViewProviders = previousTView == null ?
	        // 1) This is the first invocation `previousTView == null` which means that we are at the
	        // `TNode` of where injector is starting to look. In such a case the only time we are allowed
	        // to look into the ViewProviders is if:
	        // - we are on a component
	        // - AND the injector set `includeViewProviders` to true (implying that the token can see
	        // ViewProviders because it is the Component or a Service which itself was declared in
	        // ViewProviders)
	        (isComponentHost(tNode) && includeViewProviders) :
	        // 2) `previousTView != null` which means that we are now walking across the parent nodes.
	        // In such a case we are only allowed to look into the ViewProviders if:
	        // - We just crossed from child View to Parent View `previousTView != currentTView`
	        // - AND the parent TNode is an Element.
	        // This means that we just came from the Component's View and therefore are allowed to see
	        // into the ViewProviders.
	        (previousTView != currentTView && (tNode.type === 3 /* Element */));
	    // This special case happens when there is a @host on the inject and when we are searching
	    // on the host element node.
	    var isHostSpecialCase = (flags & InjectFlags.Host) && hostTElementNode === tNode;
	    var injectableIdx = locateDirectiveOrProvider(tNode, currentTView, token, canAccessViewProviders, isHostSpecialCase);
	    if (injectableIdx !== null) {
	        return getNodeInjectable(lView, currentTView, injectableIdx, tNode);
	    }
	    else {
	        return NOT_FOUND;
	    }
	}
	/**
	 * Searches for the given token among the node's directives and providers.
	 *
	 * @param tNode TNode on which directives are present.
	 * @param tView The tView we are currently processing
	 * @param token Provider token or type of a directive to look for.
	 * @param canAccessViewProviders Whether view providers should be considered.
	 * @param isHostSpecialCase Whether the host special case applies.
	 * @returns Index of a found directive or provider, or null when none found.
	 */
	function locateDirectiveOrProvider(tNode, tView, token, canAccessViewProviders, isHostSpecialCase) {
	    var nodeProviderIndexes = tNode.providerIndexes;
	    var tInjectables = tView.data;
	    var injectablesStart = nodeProviderIndexes & 65535 /* ProvidersStartIndexMask */;
	    var directivesStart = tNode.directiveStart;
	    var directiveEnd = tNode.directiveEnd;
	    var cptViewProvidersCount = nodeProviderIndexes >> 16 /* CptViewProvidersCountShift */;
	    var startingIndex = canAccessViewProviders ? injectablesStart : injectablesStart + cptViewProvidersCount;
	    // When the host special case applies, only the viewProviders and the component are visible
	    var endIndex = isHostSpecialCase ? injectablesStart + cptViewProvidersCount : directiveEnd;
	    for (var i = startingIndex; i < endIndex; i++) {
	        var providerTokenOrDef = tInjectables[i];
	        if (i < directivesStart && token === providerTokenOrDef ||
	            i >= directivesStart && providerTokenOrDef.type === token) {
	            return i;
	        }
	    }
	    if (isHostSpecialCase) {
	        var dirDef = tInjectables[directivesStart];
	        if (dirDef && isComponentDef(dirDef) && dirDef.type === token) {
	            return directivesStart;
	        }
	    }
	    return null;
	}
	/**
	 * Retrieve or instantiate the injectable from the `LView` at particular `index`.
	 *
	 * This function checks to see if the value has already been instantiated and if so returns the
	 * cached `injectable`. Otherwise if it detects that the value is still a factory it
	 * instantiates the `injectable` and caches the value.
	 */
	function getNodeInjectable(lView, tView, index, tNode) {
	    var value = lView[index];
	    var tData = tView.data;
	    if (isFactory(value)) {
	        var factory = value;
	        if (factory.resolving) {
	            throw new Error("Circular dep for " + stringifyForError(tData[index]));
	        }
	        var previousIncludeViewProviders = setIncludeViewProviders(factory.canSeeViewProviders);
	        factory.resolving = true;
	        var previousInjectImplementation = void 0;
	        if (factory.injectImpl) {
	            previousInjectImplementation = setInjectImplementation(factory.injectImpl);
	        }
	        enterDI(lView, tNode);
	        try {
	            value = lView[index] = factory.factory(undefined, tData, lView, tNode);
	            // This code path is hit for both directives and providers.
	            // For perf reasons, we want to avoid searching for hooks on providers.
	            // It does no harm to try (the hooks just won't exist), but the extra
	            // checks are unnecessary and this is a hot path. So we check to see
	            // if the index of the dependency is in the directive range for this
	            // tNode. If it's not, we know it's a provider and skip hook registration.
	            if (tView.firstCreatePass && index >= tNode.directiveStart) {
	                ngDevMode && assertDirectiveDef(tData[index]);
	                registerPreOrderHooks(index, tData[index], tView);
	            }
	        }
	        finally {
	            if (factory.injectImpl)
	                setInjectImplementation(previousInjectImplementation);
	            setIncludeViewProviders(previousIncludeViewProviders);
	            factory.resolving = false;
	            leaveDI();
	        }
	    }
	    return value;
	}
	/**
	 * Returns the bit in an injector's bloom filter that should be used to determine whether or not
	 * the directive might be provided by the injector.
	 *
	 * When a directive is public, it is added to the bloom filter and given a unique ID that can be
	 * retrieved on the Type. When the directive isn't public or the token is not a directive `null`
	 * is returned as the node injector can not possibly provide that token.
	 *
	 * @param token the injection token
	 * @returns the matching bit to check in the bloom filter or `null` if the token is not known.
	 *   When the returned value is negative then it represents special values such as `Injector`.
	 */
	function bloomHashBitOrFactory(token) {
	    ngDevMode && assertDefined(token, 'token must be defined');
	    if (typeof token === 'string') {
	        return token.charCodeAt(0) || 0;
	    }
	    var tokenId = token[NG_ELEMENT_ID];
	    // Negative token IDs are used for special objects such as `Injector`
	    return (typeof tokenId === 'number' && tokenId > 0) ? tokenId & BLOOM_MASK : tokenId;
	}
	function bloomHasToken(bloomHash, injectorIndex, injectorView) {
	    // Create a mask that targets the specific bit associated with the directive we're looking for.
	    // JS bit operations are 32 bits, so this will be a number between 2^0 and 2^31, corresponding
	    // to bit positions 0 - 31 in a 32 bit integer.
	    var mask = 1 << bloomHash;
	    var b7 = bloomHash & 0x80;
	    var b6 = bloomHash & 0x40;
	    var b5 = bloomHash & 0x20;
	    // Our bloom filter size is 256 bits, which is eight 32-bit bloom filter buckets:
	    // bf0 = [0 - 31], bf1 = [32 - 63], bf2 = [64 - 95], bf3 = [96 - 127], etc.
	    // Get the bloom filter value from the appropriate bucket based on the directive's bloomBit.
	    var value;
	    if (b7) {
	        value = b6 ? (b5 ? injectorView[injectorIndex + 7] : injectorView[injectorIndex + 6]) :
	            (b5 ? injectorView[injectorIndex + 5] : injectorView[injectorIndex + 4]);
	    }
	    else {
	        value = b6 ? (b5 ? injectorView[injectorIndex + 3] : injectorView[injectorIndex + 2]) :
	            (b5 ? injectorView[injectorIndex + 1] : injectorView[injectorIndex]);
	    }
	    // If the bloom filter value has the bit corresponding to the directive's bloomBit flipped on,
	    // this injector is a potential match.
	    return !!(value & mask);
	}
	/** Returns true if flags prevent parent injector from being searched for tokens */
	function shouldSearchParent(flags, isFirstHostTNode) {
	    return !(flags & InjectFlags.Self) && !(flags & InjectFlags.Host && isFirstHostTNode);
	}
	var NodeInjector = /** @class */ (function () {
	    function NodeInjector(_tNode, _lView) {
	        this._tNode = _tNode;
	        this._lView = _lView;
	    }
	    NodeInjector.prototype.get = function (token, notFoundValue) {
	        return getOrCreateInjectable(this._tNode, this._lView, token, undefined, notFoundValue);
	    };
	    return NodeInjector;
	}());
	var ERROR_DEBUG_CONTEXT = 'ngDebugContext';
	var ERROR_ORIGINAL_ERROR = 'ngOriginalError';
	var ERROR_LOGGER = 'ngErrorLogger';
	function wrappedError(message, originalError) {
	    var msg = message + " caused by: " + (originalError instanceof Error ? originalError.message : originalError);
	    var error = Error(msg);
	    error[ERROR_ORIGINAL_ERROR] = originalError;
	    return error;
	}
	function getDebugContext(error) {
	    return error[ERROR_DEBUG_CONTEXT];
	}
	function getOriginalError(error) {
	    return error[ERROR_ORIGINAL_ERROR];
	}
	function getErrorLogger(error) {
	    return error[ERROR_LOGGER] || defaultErrorLogger;
	}
	function defaultErrorLogger(console) {
	    var values = [];
	    for (var _i = 1; _i < arguments.length; _i++) {
	        values[_i - 1] = arguments[_i];
	    }
	    console.error.apply(console, __spread(values));
	}

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * Provides a hook for centralized exception handling.
	 *
	 * The default implementation of `ErrorHandler` prints error messages to the `console`. To
	 * intercept error handling, write a custom exception handler that replaces this default as
	 * appropriate for your app.
	 *
	 * @usageNotes
	 * ### Example
	 *
	 * ```
	 * class MyErrorHandler implements ErrorHandler {
	 *   handleError(error) {
	 *     // do something with the exception
	 *   }
	 * }
	 *
	 * @NgModule({
	 *   providers: [{provide: ErrorHandler, useClass: MyErrorHandler}]
	 * })
	 * class MyModule {}
	 * ```
	 *
	 * @publicApi
	 */
	var ErrorHandler = /** @class */ (function () {
	    function ErrorHandler() {
	        /**
	         * @internal
	         */
	        this._console = console;
	    }
	    ErrorHandler.prototype.handleError = function (error) {
	        var originalError = this._findOriginalError(error);
	        var context = this._findContext(error);
	        // Note: Browser consoles show the place from where console.error was called.
	        // We can use this to give users additional information about the error.
	        var errorLogger = getErrorLogger(error);
	        errorLogger(this._console, "ERROR", error);
	        if (originalError) {
	            errorLogger(this._console, "ORIGINAL ERROR", originalError);
	        }
	        if (context) {
	            errorLogger(this._console, 'ERROR CONTEXT', context);
	        }
	    };
	    /** @internal */
	    ErrorHandler.prototype._findContext = function (error) {
	        if (error) {
	            return getDebugContext(error) ? getDebugContext(error) :
	                this._findContext(getOriginalError(error));
	        }
	        return null;
	    };
	    /** @internal */
	    ErrorHandler.prototype._findOriginalError = function (error) {
	        var e = getOriginalError(error);
	        while (e && getOriginalError(e)) {
	            e = getOriginalError(e);
	        }
	        return e;
	    };
	    return ErrorHandler;
	}());

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	var SafeValueImpl = /** @class */ (function () {
	    function SafeValueImpl(changingThisBreaksApplicationSecurity) {
	        this.changingThisBreaksApplicationSecurity = changingThisBreaksApplicationSecurity;
	    }
	    SafeValueImpl.prototype.toString = function () {
	        return "SafeValue must use [property]=binding: " + this.changingThisBreaksApplicationSecurity +
	            " (see http://g.co/ng/security#xss)";
	    };
	    return SafeValueImpl;
	}());
	var SafeHtmlImpl = /** @class */ (function (_super) {
	    __extends(SafeHtmlImpl, _super);
	    function SafeHtmlImpl() {
	        return _super !== null && _super.apply(this, arguments) || this;
	    }
	    SafeHtmlImpl.prototype.getTypeName = function () {
	        return "HTML" /* Html */;
	    };
	    return SafeHtmlImpl;
	}(SafeValueImpl));
	var SafeStyleImpl = /** @class */ (function (_super) {
	    __extends(SafeStyleImpl, _super);
	    function SafeStyleImpl() {
	        return _super !== null && _super.apply(this, arguments) || this;
	    }
	    SafeStyleImpl.prototype.getTypeName = function () {
	        return "Style" /* Style */;
	    };
	    return SafeStyleImpl;
	}(SafeValueImpl));
	var SafeScriptImpl = /** @class */ (function (_super) {
	    __extends(SafeScriptImpl, _super);
	    function SafeScriptImpl() {
	        return _super !== null && _super.apply(this, arguments) || this;
	    }
	    SafeScriptImpl.prototype.getTypeName = function () {
	        return "Script" /* Script */;
	    };
	    return SafeScriptImpl;
	}(SafeValueImpl));
	var SafeUrlImpl = /** @class */ (function (_super) {
	    __extends(SafeUrlImpl, _super);
	    function SafeUrlImpl() {
	        return _super !== null && _super.apply(this, arguments) || this;
	    }
	    SafeUrlImpl.prototype.getTypeName = function () {
	        return "URL" /* Url */;
	    };
	    return SafeUrlImpl;
	}(SafeValueImpl));
	var SafeResourceUrlImpl = /** @class */ (function (_super) {
	    __extends(SafeResourceUrlImpl, _super);
	    function SafeResourceUrlImpl() {
	        return _super !== null && _super.apply(this, arguments) || this;
	    }
	    SafeResourceUrlImpl.prototype.getTypeName = function () {
	        return "ResourceURL" /* ResourceUrl */;
	    };
	    return SafeResourceUrlImpl;
	}(SafeValueImpl));
	function unwrapSafeValue(value) {
	    return value instanceof SafeValueImpl ? value.changingThisBreaksApplicationSecurity :
	        value;
	}
	function allowSanitizationBypassAndThrow(value, type) {
	    var actualType = getSanitizationBypassType(value);
	    if (actualType != null && actualType !== type) {
	        // Allow ResourceURLs in URL contexts, they are strictly more trusted.
	        if (actualType === "ResourceURL" /* ResourceUrl */ && type === "URL" /* Url */)
	            return true;
	        throw new Error("Required a safe " + type + ", got a " + actualType + " (see http://g.co/ng/security#xss)");
	    }
	    return actualType === type;
	}
	function getSanitizationBypassType(value) {
	    return value instanceof SafeValueImpl && value.getTypeName() || null;
	}
	/**
	 * Mark `html` string as trusted.
	 *
	 * This function wraps the trusted string in `String` and brands it in a way which makes it
	 * recognizable to {@link htmlSanitizer} to be trusted implicitly.
	 *
	 * @param trustedHtml `html` string which needs to be implicitly trusted.
	 * @returns a `html` which has been branded to be implicitly trusted.
	 */
	function bypassSanitizationTrustHtml(trustedHtml) {
	    return new SafeHtmlImpl(trustedHtml);
	}
	/**
	 * Mark `style` string as trusted.
	 *
	 * This function wraps the trusted string in `String` and brands it in a way which makes it
	 * recognizable to {@link styleSanitizer} to be trusted implicitly.
	 *
	 * @param trustedStyle `style` string which needs to be implicitly trusted.
	 * @returns a `style` hich has been branded to be implicitly trusted.
	 */
	function bypassSanitizationTrustStyle(trustedStyle) {
	    return new SafeStyleImpl(trustedStyle);
	}
	/**
	 * Mark `script` string as trusted.
	 *
	 * This function wraps the trusted string in `String` and brands it in a way which makes it
	 * recognizable to {@link scriptSanitizer} to be trusted implicitly.
	 *
	 * @param trustedScript `script` string which needs to be implicitly trusted.
	 * @returns a `script` which has been branded to be implicitly trusted.
	 */
	function bypassSanitizationTrustScript(trustedScript) {
	    return new SafeScriptImpl(trustedScript);
	}
	/**
	 * Mark `url` string as trusted.
	 *
	 * This function wraps the trusted string in `String` and brands it in a way which makes it
	 * recognizable to {@link urlSanitizer} to be trusted implicitly.
	 *
	 * @param trustedUrl `url` string which needs to be implicitly trusted.
	 * @returns a `url`  which has been branded to be implicitly trusted.
	 */
	function bypassSanitizationTrustUrl(trustedUrl) {
	    return new SafeUrlImpl(trustedUrl);
	}
	/**
	 * Mark `url` string as trusted.
	 *
	 * This function wraps the trusted string in `String` and brands it in a way which makes it
	 * recognizable to {@link resourceUrlSanitizer} to be trusted implicitly.
	 *
	 * @param trustedResourceUrl `url` string which needs to be implicitly trusted.
	 * @returns a `url` which has been branded to be implicitly trusted.
	 */
	function bypassSanitizationTrustResourceUrl(trustedResourceUrl) {
	    return new SafeResourceUrlImpl(trustedResourceUrl);
	}

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * This file is used to control if the default rendering pipeline should be `ViewEngine` or `Ivy`.
	 *
	 * For more information on how to run and debug tests with either Ivy or View Engine (legacy),
	 * please see [BAZEL.md](./docs/BAZEL.md).
	 */
	var _devMode = true;
	/**
	 * Returns whether Angular is in development mode. After called once,
	 * the value is locked and won't change any more.
	 *
	 * By default, this is true, unless a user calls `enableProdMode` before calling this.
	 *
	 * @publicApi
	 */
	function isDevMode() {
	    return _devMode;
	}

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * This helper class is used to get hold of an inert tree of DOM elements containing dirty HTML
	 * that needs sanitizing.
	 * Depending upon browser support we must use one of three strategies for doing this.
	 * Support: Safari 10.x -> XHR strategy
	 * Support: Firefox -> DomParser strategy
	 * Default: InertDocument strategy
	 */
	var InertBodyHelper = /** @class */ (function () {
	    function InertBodyHelper(defaultDoc) {
	        this.defaultDoc = defaultDoc;
	        this.inertDocument = this.defaultDoc.implementation.createHTMLDocument('sanitization-inert');
	        var inertBodyElement = this.inertDocument.body;
	        if (inertBodyElement == null) {
	            // usually there should be only one body element in the document, but IE doesn't have any, so
	            // we need to create one.
	            var inertHtml = this.inertDocument.createElement('html');
	            this.inertDocument.appendChild(inertHtml);
	            inertBodyElement = this.inertDocument.createElement('body');
	            inertHtml.appendChild(inertBodyElement);
	        }
	        inertBodyElement.innerHTML = '<svg><g onload="this.parentNode.remove()"></g></svg>';
	        if (inertBodyElement.querySelector && !inertBodyElement.querySelector('svg')) {
	            // We just hit the Safari 10.1 bug - which allows JS to run inside the SVG G element
	            // so use the XHR strategy.
	            this.getInertBodyElement = this.getInertBodyElement_XHR;
	            return;
	        }
	        inertBodyElement.innerHTML = '<svg><p><style><img src="</style><img src=x onerror=alert(1)//">';
	        if (inertBodyElement.querySelector && inertBodyElement.querySelector('svg img')) {
	            // We just hit the Firefox bug - which prevents the inner img JS from being sanitized
	            // so use the DOMParser strategy, if it is available.
	            // If the DOMParser is not available then we are not in Firefox (Server/WebWorker?) so we
	            // fall through to the default strategy below.
	            if (isDOMParserAvailable()) {
	                this.getInertBodyElement = this.getInertBodyElement_DOMParser;
	                return;
	            }
	        }
	        // None of the bugs were hit so it is safe for us to use the default InertDocument strategy
	        this.getInertBodyElement = this.getInertBodyElement_InertDocument;
	    }
	    /**
	     * Use XHR to create and fill an inert body element (on Safari 10.1)
	     * See
	     * https://github.com/cure53/DOMPurify/blob/a992d3a75031cb8bb032e5ea8399ba972bdf9a65/src/purify.js#L439-L449
	     */
	    InertBodyHelper.prototype.getInertBodyElement_XHR = function (html) {
	        // We add these extra elements to ensure that the rest of the content is parsed as expected
	        // e.g. leading whitespace is maintained and tags like `<meta>` do not get hoisted to the
	        // `<head>` tag.
	        html = '<body><remove></remove>' + html + '</body>';
	        try {
	            html = encodeURI(html);
	        }
	        catch (_a) {
	            return null;
	        }
	        var xhr = new XMLHttpRequest();
	        xhr.responseType = 'document';
	        xhr.open('GET', 'data:text/html;charset=utf-8,' + html, false);
	        xhr.send(undefined);
	        var body = xhr.response.body;
	        body.removeChild(body.firstChild);
	        return body;
	    };
	    /**
	     * Use DOMParser to create and fill an inert body element (on Firefox)
	     * See https://github.com/cure53/DOMPurify/releases/tag/0.6.7
	     *
	     */
	    InertBodyHelper.prototype.getInertBodyElement_DOMParser = function (html) {
	        // We add these extra elements to ensure that the rest of the content is parsed as expected
	        // e.g. leading whitespace is maintained and tags like `<meta>` do not get hoisted to the
	        // `<head>` tag.
	        html = '<body><remove></remove>' + html + '</body>';
	        try {
	            var body = new window.DOMParser().parseFromString(html, 'text/html').body;
	            body.removeChild(body.firstChild);
	            return body;
	        }
	        catch (_a) {
	            return null;
	        }
	    };
	    /**
	     * Use an HTML5 `template` element, if supported, or an inert body element created via
	     * `createHtmlDocument` to create and fill an inert DOM element.
	     * This is the default sane strategy to use if the browser does not require one of the specialised
	     * strategies above.
	     */
	    InertBodyHelper.prototype.getInertBodyElement_InertDocument = function (html) {
	        // Prefer using <template> element if supported.
	        var templateEl = this.inertDocument.createElement('template');
	        if ('content' in templateEl) {
	            templateEl.innerHTML = html;
	            return templateEl;
	        }
	        // Note that previously we used to do something like `this.inertDocument.body.innerHTML = html`
	        // and we returned the inert `body` node. This was changed, because IE seems to treat setting
	        // `innerHTML` on an inserted element differently, compared to one that hasn't been inserted
	        // yet. In particular, IE appears to split some of the text into multiple text nodes rather
	        // than keeping them in a single one which ends up messing with Ivy's i18n parsing further
	        // down the line. This has been worked around by creating a new inert `body` and using it as
	        // the root node in which we insert the HTML.
	        var inertBody = this.inertDocument.createElement('body');
	        inertBody.innerHTML = html;
	        // Support: IE 9-11 only
	        // strip custom-namespaced attributes on IE<=11
	        if (this.defaultDoc.documentMode) {
	            this.stripCustomNsAttrs(inertBody);
	        }
	        return inertBody;
	    };
	    /**
	     * When IE9-11 comes across an unknown namespaced attribute e.g. 'xlink:foo' it adds 'xmlns:ns1'
	     * attribute to declare ns1 namespace and prefixes the attribute with 'ns1' (e.g.
	     * 'ns1:xlink:foo').
	     *
	     * This is undesirable since we don't want to allow any of these custom attributes. This method
	     * strips them all.
	     */
	    InertBodyHelper.prototype.stripCustomNsAttrs = function (el) {
	        var elAttrs = el.attributes;
	        // loop backwards so that we can support removals.
	        for (var i = elAttrs.length - 1; 0 < i; i--) {
	            var attrib = elAttrs.item(i);
	            var attrName = attrib.name;
	            if (attrName === 'xmlns:ns1' || attrName.indexOf('ns1:') === 0) {
	                el.removeAttribute(attrName);
	            }
	        }
	        var childNode = el.firstChild;
	        while (childNode) {
	            if (childNode.nodeType === Node.ELEMENT_NODE)
	                this.stripCustomNsAttrs(childNode);
	            childNode = childNode.nextSibling;
	        }
	    };
	    return InertBodyHelper;
	}());
	/**
	 * We need to determine whether the DOMParser exists in the global context.
	 * The try-catch is because, on some browsers, trying to access this property
	 * on window can actually throw an error.
	 *
	 * @suppress {uselessCode}
	 */
	function isDOMParserAvailable() {
	    try {
	        return !!window.DOMParser;
	    }
	    catch (_a) {
	        return false;
	    }
	}

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * A pattern that recognizes a commonly useful subset of URLs that are safe.
	 *
	 * This regular expression matches a subset of URLs that will not cause script
	 * execution if used in URL context within a HTML document. Specifically, this
	 * regular expression matches if (comment from here on and regex copied from
	 * Soy's EscapingConventions):
	 * (1) Either an allowed protocol (http, https, mailto or ftp).
	 * (2) or no protocol.  A protocol must be followed by a colon. The below
	 *     allows that by allowing colons only after one of the characters [/?#].
	 *     A colon after a hash (#) must be in the fragment.
	 *     Otherwise, a colon after a (?) must be in a query.
	 *     Otherwise, a colon after a single solidus (/) must be in a path.
	 *     Otherwise, a colon after a double solidus (//) must be in the authority
	 *     (before port).
	 *
	 * The pattern disallows &, used in HTML entity declarations before
	 * one of the characters in [/?#]. This disallows HTML entities used in the
	 * protocol name, which should never happen, e.g. "h&#116;tp" for "http".
	 * It also disallows HTML entities in the first path part of a relative path,
	 * e.g. "foo&lt;bar/baz".  Our existing escaping functions should not produce
	 * that. More importantly, it disallows masking of a colon,
	 * e.g. "javascript&#58;...".
	 *
	 * This regular expression was taken from the Closure sanitization library.
	 */
	var SAFE_URL_PATTERN = /^(?:(?:https?|mailto|ftp|tel|file):|[^&:/?#]*(?:[/?#]|$))/gi;
	/** A pattern that matches safe data URLs. Only matches image, video and audio types. */
	var DATA_URL_PATTERN = /^data:(?:image\/(?:bmp|gif|jpeg|jpg|png|tiff|webp)|video\/(?:mpeg|mp4|ogg|webm)|audio\/(?:mp3|oga|ogg|opus));base64,[a-z0-9+\/]+=*$/i;
	function _sanitizeUrl(url) {
	    url = String(url);
	    if (url.match(SAFE_URL_PATTERN) || url.match(DATA_URL_PATTERN))
	        return url;
	    {
	        console.warn("WARNING: sanitizing unsafe URL value " + url + " (see http://g.co/ng/security#xss)");
	    }
	    return 'unsafe:' + url;
	}
	function sanitizeSrcset(srcset) {
	    srcset = String(srcset);
	    return srcset.split(',').map(function (srcset) { return _sanitizeUrl(srcset.trim()); }).join(', ');
	}

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	function tagSet(tags) {
	    var e_1, _a;
	    var res = {};
	    try {
	        for (var _b = __values(tags.split(',')), _c = _b.next(); !_c.done; _c = _b.next()) {
	            var t = _c.value;
	            res[t] = true;
	        }
	    }
	    catch (e_1_1) { e_1 = { error: e_1_1 }; }
	    finally {
	        try {
	            if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
	        }
	        finally { if (e_1) throw e_1.error; }
	    }
	    return res;
	}
	function merge$1() {
	    var e_2, _a;
	    var sets = [];
	    for (var _i = 0; _i < arguments.length; _i++) {
	        sets[_i] = arguments[_i];
	    }
	    var res = {};
	    try {
	        for (var sets_1 = __values(sets), sets_1_1 = sets_1.next(); !sets_1_1.done; sets_1_1 = sets_1.next()) {
	            var s = sets_1_1.value;
	            for (var v in s) {
	                if (s.hasOwnProperty(v))
	                    res[v] = true;
	            }
	        }
	    }
	    catch (e_2_1) { e_2 = { error: e_2_1 }; }
	    finally {
	        try {
	            if (sets_1_1 && !sets_1_1.done && (_a = sets_1.return)) _a.call(sets_1);
	        }
	        finally { if (e_2) throw e_2.error; }
	    }
	    return res;
	}
	// Good source of info about elements and attributes
	// http://dev.w3.org/html5/spec/Overview.html#semantics
	// http://simon.html5.org/html-elements
	// Safe Void Elements - HTML5
	// http://dev.w3.org/html5/spec/Overview.html#void-elements
	var VOID_ELEMENTS = tagSet('area,br,col,hr,img,wbr');
	// Elements that you can, intentionally, leave open (and which close themselves)
	// http://dev.w3.org/html5/spec/Overview.html#optional-tags
	var OPTIONAL_END_TAG_BLOCK_ELEMENTS = tagSet('colgroup,dd,dt,li,p,tbody,td,tfoot,th,thead,tr');
	var OPTIONAL_END_TAG_INLINE_ELEMENTS = tagSet('rp,rt');
	var OPTIONAL_END_TAG_ELEMENTS = merge$1(OPTIONAL_END_TAG_INLINE_ELEMENTS, OPTIONAL_END_TAG_BLOCK_ELEMENTS);
	// Safe Block Elements - HTML5
	var BLOCK_ELEMENTS = merge$1(OPTIONAL_END_TAG_BLOCK_ELEMENTS, tagSet('address,article,' +
	    'aside,blockquote,caption,center,del,details,dialog,dir,div,dl,figure,figcaption,footer,h1,h2,h3,h4,h5,' +
	    'h6,header,hgroup,hr,ins,main,map,menu,nav,ol,pre,section,summary,table,ul'));
	// Inline Elements - HTML5
	var INLINE_ELEMENTS = merge$1(OPTIONAL_END_TAG_INLINE_ELEMENTS, tagSet('a,abbr,acronym,audio,b,' +
	    'bdi,bdo,big,br,cite,code,del,dfn,em,font,i,img,ins,kbd,label,map,mark,picture,q,ruby,rp,rt,s,' +
	    'samp,small,source,span,strike,strong,sub,sup,time,track,tt,u,var,video'));
	var VALID_ELEMENTS = merge$1(VOID_ELEMENTS, BLOCK_ELEMENTS, INLINE_ELEMENTS, OPTIONAL_END_TAG_ELEMENTS);
	// Attributes that have href and hence need to be sanitized
	var URI_ATTRS = tagSet('background,cite,href,itemtype,longdesc,poster,src,xlink:href');
	// Attributes that have special href set hence need to be sanitized
	var SRCSET_ATTRS = tagSet('srcset');
	var HTML_ATTRS = tagSet('abbr,accesskey,align,alt,autoplay,axis,bgcolor,border,cellpadding,cellspacing,class,clear,color,cols,colspan,' +
	    'compact,controls,coords,datetime,default,dir,download,face,headers,height,hidden,hreflang,hspace,' +
	    'ismap,itemscope,itemprop,kind,label,lang,language,loop,media,muted,nohref,nowrap,open,preload,rel,rev,role,rows,rowspan,rules,' +
	    'scope,scrolling,shape,size,sizes,span,srclang,start,summary,tabindex,target,title,translate,type,usemap,' +
	    'valign,value,vspace,width');
	// Accessibility attributes as per WAI-ARIA 1.1 (W3C Working Draft 14 December 2018)
	var ARIA_ATTRS = tagSet('aria-activedescendant,aria-atomic,aria-autocomplete,aria-busy,aria-checked,aria-colcount,aria-colindex,' +
	    'aria-colspan,aria-controls,aria-current,aria-describedby,aria-details,aria-disabled,aria-dropeffect,' +
	    'aria-errormessage,aria-expanded,aria-flowto,aria-grabbed,aria-haspopup,aria-hidden,aria-invalid,' +
	    'aria-keyshortcuts,aria-label,aria-labelledby,aria-level,aria-live,aria-modal,aria-multiline,' +
	    'aria-multiselectable,aria-orientation,aria-owns,aria-placeholder,aria-posinset,aria-pressed,aria-readonly,' +
	    'aria-relevant,aria-required,aria-roledescription,aria-rowcount,aria-rowindex,aria-rowspan,aria-selected,' +
	    'aria-setsize,aria-sort,aria-valuemax,aria-valuemin,aria-valuenow,aria-valuetext');
	// NB: This currently consciously doesn't support SVG. SVG sanitization has had several security
	// issues in the past, so it seems safer to leave it out if possible. If support for binding SVG via
	// innerHTML is required, SVG attributes should be added here.
	// NB: Sanitization does not allow <form> elements or other active elements (<button> etc). Those
	// can be sanitized, but they increase security surface area without a legitimate use case, so they
	// are left out here.
	var VALID_ATTRS = merge$1(URI_ATTRS, SRCSET_ATTRS, HTML_ATTRS, ARIA_ATTRS);
	// Elements whose content should not be traversed/preserved, if the elements themselves are invalid.
	//
	// Typically, `<invalid>Some content</invalid>` would traverse (and in this case preserve)
	// `Some content`, but strip `invalid-element` opening/closing tags. For some elements, though, we
	// don't want to preserve the content, if the elements themselves are going to be removed.
	var SKIP_TRAVERSING_CONTENT_IF_INVALID_ELEMENTS = tagSet('script,style,template');
	/**
	 * SanitizingHtmlSerializer serializes a DOM fragment, stripping out any unsafe elements and unsafe
	 * attributes.
	 */
	var SanitizingHtmlSerializer = /** @class */ (function () {
	    function SanitizingHtmlSerializer() {
	        // Explicitly track if something was stripped, to avoid accidentally warning of sanitization just
	        // because characters were re-encoded.
	        this.sanitizedSomething = false;
	        this.buf = [];
	    }
	    SanitizingHtmlSerializer.prototype.sanitizeChildren = function (el) {
	        // This cannot use a TreeWalker, as it has to run on Angular's various DOM adapters.
	        // However this code never accesses properties off of `document` before deleting its contents
	        // again, so it shouldn't be vulnerable to DOM clobbering.
	        var current = el.firstChild;
	        var traverseContent = true;
	        while (current) {
	            if (current.nodeType === Node.ELEMENT_NODE) {
	                traverseContent = this.startElement(current);
	            }
	            else if (current.nodeType === Node.TEXT_NODE) {
	                this.chars(current.nodeValue);
	            }
	            else {
	                // Strip non-element, non-text nodes.
	                this.sanitizedSomething = true;
	            }
	            if (traverseContent && current.firstChild) {
	                current = current.firstChild;
	                continue;
	            }
	            while (current) {
	                // Leaving the element. Walk up and to the right, closing tags as we go.
	                if (current.nodeType === Node.ELEMENT_NODE) {
	                    this.endElement(current);
	                }
	                var next = this.checkClobberedElement(current, current.nextSibling);
	                if (next) {
	                    current = next;
	                    break;
	                }
	                current = this.checkClobberedElement(current, current.parentNode);
	            }
	        }
	        return this.buf.join('');
	    };
	    /**
	     * Sanitizes an opening element tag (if valid) and returns whether the element's contents should
	     * be traversed. Element content must always be traversed (even if the element itself is not
	     * valid/safe), unless the element is one of `SKIP_TRAVERSING_CONTENT_IF_INVALID_ELEMENTS`.
	     *
	     * @param element The element to sanitize.
	     * @return True if the element's contents should be traversed.
	     */
	    SanitizingHtmlSerializer.prototype.startElement = function (element) {
	        var tagName = element.nodeName.toLowerCase();
	        if (!VALID_ELEMENTS.hasOwnProperty(tagName)) {
	            this.sanitizedSomething = true;
	            return !SKIP_TRAVERSING_CONTENT_IF_INVALID_ELEMENTS.hasOwnProperty(tagName);
	        }
	        this.buf.push('<');
	        this.buf.push(tagName);
	        var elAttrs = element.attributes;
	        for (var i = 0; i < elAttrs.length; i++) {
	            var elAttr = elAttrs.item(i);
	            var attrName = elAttr.name;
	            var lower = attrName.toLowerCase();
	            if (!VALID_ATTRS.hasOwnProperty(lower)) {
	                this.sanitizedSomething = true;
	                continue;
	            }
	            var value = elAttr.value;
	            // TODO(martinprobst): Special case image URIs for data:image/...
	            if (URI_ATTRS[lower])
	                value = _sanitizeUrl(value);
	            if (SRCSET_ATTRS[lower])
	                value = sanitizeSrcset(value);
	            this.buf.push(' ', attrName, '="', encodeEntities(value), '"');
	        }
	        this.buf.push('>');
	        return true;
	    };
	    SanitizingHtmlSerializer.prototype.endElement = function (current) {
	        var tagName = current.nodeName.toLowerCase();
	        if (VALID_ELEMENTS.hasOwnProperty(tagName) && !VOID_ELEMENTS.hasOwnProperty(tagName)) {
	            this.buf.push('</');
	            this.buf.push(tagName);
	            this.buf.push('>');
	        }
	    };
	    SanitizingHtmlSerializer.prototype.chars = function (chars) {
	        this.buf.push(encodeEntities(chars));
	    };
	    SanitizingHtmlSerializer.prototype.checkClobberedElement = function (node, nextNode) {
	        if (nextNode &&
	            (node.compareDocumentPosition(nextNode) &
	                Node.DOCUMENT_POSITION_CONTAINED_BY) === Node.DOCUMENT_POSITION_CONTAINED_BY) {
	            throw new Error("Failed to sanitize html because the element is clobbered: " + node.outerHTML);
	        }
	        return nextNode;
	    };
	    return SanitizingHtmlSerializer;
	}());
	// Regular Expressions for parsing tags and attributes
	var SURROGATE_PAIR_REGEXP = /[\uD800-\uDBFF][\uDC00-\uDFFF]/g;
	// ! to ~ is the ASCII range.
	var NON_ALPHANUMERIC_REGEXP = /([^\#-~ |!])/g;
	/**
	 * Escapes all potentially dangerous characters, so that the
	 * resulting string can be safely inserted into attribute or
	 * element text.
	 * @param value
	 */
	function encodeEntities(value) {
	    return value.replace(/&/g, '&amp;')
	        .replace(SURROGATE_PAIR_REGEXP, function (match) {
	        var hi = match.charCodeAt(0);
	        var low = match.charCodeAt(1);
	        return '&#' + (((hi - 0xD800) * 0x400) + (low - 0xDC00) + 0x10000) + ';';
	    })
	        .replace(NON_ALPHANUMERIC_REGEXP, function (match) {
	        return '&#' + match.charCodeAt(0) + ';';
	    })
	        .replace(/</g, '&lt;')
	        .replace(/>/g, '&gt;');
	}
	var inertBodyHelper;
	/**
	 * Sanitizes the given unsafe, untrusted HTML fragment, and returns HTML text that is safe to add to
	 * the DOM in a browser environment.
	 */
	function _sanitizeHtml(defaultDoc, unsafeHtmlInput) {
	    var inertBodyElement = null;
	    try {
	        inertBodyHelper = inertBodyHelper || new InertBodyHelper(defaultDoc);
	        // Make sure unsafeHtml is actually a string (TypeScript types are not enforced at runtime).
	        var unsafeHtml = unsafeHtmlInput ? String(unsafeHtmlInput) : '';
	        inertBodyElement = inertBodyHelper.getInertBodyElement(unsafeHtml);
	        // mXSS protection. Repeatedly parse the document to make sure it stabilizes, so that a browser
	        // trying to auto-correct incorrect HTML cannot cause formerly inert HTML to become dangerous.
	        var mXSSAttempts = 5;
	        var parsedHtml = unsafeHtml;
	        do {
	            if (mXSSAttempts === 0) {
	                throw new Error('Failed to sanitize html because the input is unstable');
	            }
	            mXSSAttempts--;
	            unsafeHtml = parsedHtml;
	            parsedHtml = inertBodyElement.innerHTML;
	            inertBodyElement = inertBodyHelper.getInertBodyElement(unsafeHtml);
	        } while (unsafeHtml !== parsedHtml);
	        var sanitizer = new SanitizingHtmlSerializer();
	        var safeHtml = sanitizer.sanitizeChildren(getTemplateContent(inertBodyElement) || inertBodyElement);
	        if (isDevMode() && sanitizer.sanitizedSomething) {
	            console.warn('WARNING: sanitizing HTML stripped some content, see http://g.co/ng/security#xss');
	        }
	        return safeHtml;
	    }
	    finally {
	        // In case anything goes wrong, clear out inertElement to reset the entire DOM structure.
	        if (inertBodyElement) {
	            var parent_1 = getTemplateContent(inertBodyElement) || inertBodyElement;
	            while (parent_1.firstChild) {
	                parent_1.removeChild(parent_1.firstChild);
	            }
	        }
	    }
	}
	function getTemplateContent(el) {
	    return 'content' in el /** Microsoft/TypeScript#21517 */ && isTemplateElement(el) ?
	        el.content :
	        null;
	}
	function isTemplateElement(el) {
	    return el.nodeType === Node.ELEMENT_NODE && el.nodeName === 'TEMPLATE';
	}

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * A SecurityContext marks a location that has dangerous security implications, e.g. a DOM property
	 * like `innerHTML` that could cause Cross Site Scripting (XSS) security bugs when improperly
	 * handled.
	 *
	 * See DomSanitizer for more details on security in Angular applications.
	 *
	 * @publicApi
	 */
	var SecurityContext$1;
	(function (SecurityContext) {
	    SecurityContext[SecurityContext["NONE"] = 0] = "NONE";
	    SecurityContext[SecurityContext["HTML"] = 1] = "HTML";
	    SecurityContext[SecurityContext["STYLE"] = 2] = "STYLE";
	    SecurityContext[SecurityContext["SCRIPT"] = 3] = "SCRIPT";
	    SecurityContext[SecurityContext["URL"] = 4] = "URL";
	    SecurityContext[SecurityContext["RESOURCE_URL"] = 5] = "RESOURCE_URL";
	})(SecurityContext$1 || (SecurityContext$1 = {}));

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * Regular expression for safe style values.
	 *
	 * Quotes (" and ') are allowed, but a check must be done elsewhere to ensure they're balanced.
	 *
	 * ',' allows multiple values to be assigned to the same property (e.g. background-attachment or
	 * font-family) and hence could allow multiple values to get injected, but that should pose no risk
	 * of XSS.
	 *
	 * The function expression checks only for XSS safety, not for CSS validity.
	 *
	 * This regular expression was taken from the Closure sanitization library, and augmented for
	 * transformation values.
	 */
	var VALUES$1 = '[-,."\'%_!# a-zA-Z0-9]+';
	var TRANSFORMATION_FNS = '(?:matrix|translate|scale|rotate|skew|perspective)(?:X|Y|Z|3d)?';
	var COLOR_FNS = '(?:rgb|hsl)a?';
	var GRADIENTS = '(?:repeating-)?(?:linear|radial)-gradient';
	var CSS3_FNS = '(?:attr|calc|var)';
	var FN_ARGS = '\\([-0-9.%, #a-zA-Z]+\\)';
	var SAFE_STYLE_VALUE = new RegExp("^(" + VALUES$1 + "|" +
	    ("(?:" + TRANSFORMATION_FNS + "|" + COLOR_FNS + "|" + GRADIENTS + "|" + CSS3_FNS + ")") +
	    (FN_ARGS + ")$"), 'g');
	/**
	 * Matches a `url(...)` value with an arbitrary argument as long as it does
	 * not contain parentheses.
	 *
	 * The URL value still needs to be sanitized separately.
	 *
	 * `url(...)` values are a very common use case, e.g. for `background-image`. With carefully crafted
	 * CSS style rules, it is possible to construct an information leak with `url` values in CSS, e.g.
	 * by observing whether scroll bars are displayed, or character ranges used by a font face
	 * definition.
	 *
	 * Angular only allows binding CSS values (as opposed to entire CSS rules), so it is unlikely that
	 * binding a URL value without further cooperation from the page will cause an information leak, and
	 * if so, it is just a leak, not a full blown XSS vulnerability.
	 *
	 * Given the common use case, low likelihood of attack vector, and low impact of an attack, this
	 * code is permissive and allows URLs that sanitize otherwise.
	 */
	var URL_RE = /^url\(([^)]+)\)$/;
	/**
	 * Checks that quotes (" and ') are properly balanced inside a string. Assumes
	 * that neither escape (\) nor any other character that could result in
	 * breaking out of a string parsing context are allowed;
	 * see http://www.w3.org/TR/css3-syntax/#string-token-diagram.
	 *
	 * This code was taken from the Closure sanitization library.
	 */
	function hasBalancedQuotes(value) {
	    var outsideSingle = true;
	    var outsideDouble = true;
	    for (var i = 0; i < value.length; i++) {
	        var c = value.charAt(i);
	        if (c === '\'' && outsideDouble) {
	            outsideSingle = !outsideSingle;
	        }
	        else if (c === '"' && outsideSingle) {
	            outsideDouble = !outsideDouble;
	        }
	    }
	    return outsideSingle && outsideDouble;
	}
	/**
	 * Sanitizes the given untrusted CSS style property value (i.e. not an entire object, just a single
	 * value) and returns a value that is safe to use in a browser environment.
	 */
	function _sanitizeStyle(value) {
	    value = String(value).trim(); // Make sure it's actually a string.
	    if (!value)
	        return '';
	    // Single url(...) values are supported, but only for URLs that sanitize cleanly. See above for
	    // reasoning behind this.
	    var urlMatch = value.match(URL_RE);
	    if ((urlMatch && _sanitizeUrl(urlMatch[1]) === urlMatch[1]) ||
	        value.match(SAFE_STYLE_VALUE) && hasBalancedQuotes(value)) {
	        return value; // Safe style values.
	    }
	    {
	        console.warn("WARNING: sanitizing unsafe style value " + value + " (see http://g.co/ng/security#xss).");
	    }
	    return 'unsafe';
	}

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * THIS FILE CONTAINS CODE WHICH SHOULD BE TREE SHAKEN AND NEVER CALLED FROM PRODUCTION CODE!!!
	 */
	/**
	 * Creates an `Array` construction with a given name. This is useful when
	 * looking for memory consumption to see what time of array it is.
	 *
	 *
	 * @param name Name to give to the constructor
	 * @returns A subclass of `Array` if possible. This can only be done in
	 *          environments which support `class` construct.
	 */
	function createNamedArrayType(name) {
	    // This should never be called in prod mode, so let's verify that is the case.
	    if (ngDevMode) {
	        try {
	            // We need to do it this way so that TypeScript does not down-level the below code.
	            var FunctionConstructor = createNamedArrayType.constructor;
	            return (new FunctionConstructor('Array', "return class " + name + " extends Array{}"))(Array);
	        }
	        catch (e) {
	            // If it does not work just give up and fall back to regular Array.
	            return Array;
	        }
	    }
	    else {
	        throw new Error('Looks like we are in \'prod mode\', but we are creating a named Array type, which is wrong! Check your code');
	    }
	}

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	function normalizeDebugBindingName(name) {
	    // Attribute names with `$` (eg `x-y$`) are valid per spec, but unsupported by some browsers
	    name = camelCaseToDashCase(name.replace(/[$@]/g, '_'));
	    return "ng-reflect-" + name;
	}
	var CAMEL_CASE_REGEXP = /([A-Z])/g;
	function camelCaseToDashCase(input) {
	    return input.replace(CAMEL_CASE_REGEXP, function () {
	        var m = [];
	        for (var _i = 0; _i < arguments.length; _i++) {
	            m[_i] = arguments[_i];
	        }
	        return '-' + m[1].toLowerCase();
	    });
	}
	function normalizeDebugBindingValue(value) {
	    try {
	        // Limit the size of the value as otherwise the DOM just gets polluted.
	        return value != null ? value.toString().slice(0, 30) : value;
	    }
	    catch (e) {
	        return '[ERROR] Exception while trying to serialize the value';
	    }
	}

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * Returns the matching `LContext` data for a given DOM node, directive or component instance.
	 *
	 * This function will examine the provided DOM element, component, or directive instance\'s
	 * monkey-patched property to derive the `LContext` data. Once called then the monkey-patched
	 * value will be that of the newly created `LContext`.
	 *
	 * If the monkey-patched value is the `LView` instance then the context value for that
	 * target will be created and the monkey-patch reference will be updated. Therefore when this
	 * function is called it may mutate the provided element\'s, component\'s or any of the associated
	 * directive\'s monkey-patch values.
	 *
	 * If the monkey-patch value is not detected then the code will walk up the DOM until an element
	 * is found which contains a monkey-patch reference. When that occurs then the provided element
	 * will be updated with a new context (which is then returned). If the monkey-patch value is not
	 * detected for a component/directive instance then it will throw an error (all components and
	 * directives should be automatically monkey-patched by ivy).
	 *
	 * @param target Component, Directive or DOM Node.
	 */
	function getLContext(target) {
	    var mpValue = readPatchedData(target);
	    if (mpValue) {
	        // only when it's an array is it considered an LView instance
	        // ... otherwise it's an already constructed LContext instance
	        if (Array.isArray(mpValue)) {
	            var lView = mpValue;
	            var nodeIndex = void 0;
	            var component = undefined;
	            var directives = undefined;
	            if (isComponentInstance(target)) {
	                nodeIndex = findViaComponent(lView, target);
	                if (nodeIndex == -1) {
	                    throw new Error('The provided component was not found in the application');
	                }
	                component = target;
	            }
	            else if (isDirectiveInstance(target)) {
	                nodeIndex = findViaDirective(lView, target);
	                if (nodeIndex == -1) {
	                    throw new Error('The provided directive was not found in the application');
	                }
	                directives = getDirectivesAtNodeIndex(nodeIndex, lView, false);
	            }
	            else {
	                nodeIndex = findViaNativeElement(lView, target);
	                if (nodeIndex == -1) {
	                    return null;
	                }
	            }
	            // the goal is not to fill the entire context full of data because the lookups
	            // are expensive. Instead, only the target data (the element, component, container, ICU
	            // expression or directive details) are filled into the context. If called multiple times
	            // with different target values then the missing target data will be filled in.
	            var native = unwrapRNode(lView[nodeIndex]);
	            var existingCtx = readPatchedData(native);
	            var context = (existingCtx && !Array.isArray(existingCtx)) ?
	                existingCtx :
	                createLContext(lView, nodeIndex, native);
	            // only when the component has been discovered then update the monkey-patch
	            if (component && context.component === undefined) {
	                context.component = component;
	                attachPatchData(context.component, context);
	            }
	            // only when the directives have been discovered then update the monkey-patch
	            if (directives && context.directives === undefined) {
	                context.directives = directives;
	                for (var i = 0; i < directives.length; i++) {
	                    attachPatchData(directives[i], context);
	                }
	            }
	            attachPatchData(context.native, context);
	            mpValue = context;
	        }
	    }
	    else {
	        var rElement = target;
	        ngDevMode && assertDomNode(rElement);
	        // if the context is not found then we need to traverse upwards up the DOM
	        // to find the nearest element that has already been monkey patched with data
	        var parent_1 = rElement;
	        while (parent_1 = parent_1.parentNode) {
	            var parentContext = readPatchedData(parent_1);
	            if (parentContext) {
	                var lView = void 0;
	                if (Array.isArray(parentContext)) {
	                    lView = parentContext;
	                }
	                else {
	                    lView = parentContext.lView;
	                }
	                // the edge of the app was also reached here through another means
	                // (maybe because the DOM was changed manually).
	                if (!lView) {
	                    return null;
	                }
	                var index = findViaNativeElement(lView, rElement);
	                if (index >= 0) {
	                    var native = unwrapRNode(lView[index]);
	                    var context = createLContext(lView, index, native);
	                    attachPatchData(native, context);
	                    mpValue = context;
	                    break;
	                }
	            }
	        }
	    }
	    return mpValue || null;
	}
	/**
	 * Creates an empty instance of a `LContext` context
	 */
	function createLContext(lView, nodeIndex, native) {
	    return {
	        lView: lView,
	        nodeIndex: nodeIndex,
	        native: native,
	        component: undefined,
	        directives: undefined,
	        localRefs: undefined,
	    };
	}
	/**
	 * Assigns the given data to the given target (which could be a component,
	 * directive or DOM node instance) using monkey-patching.
	 */
	function attachPatchData(target, data) {
	    target[MONKEY_PATCH_KEY_NAME] = data;
	}
	function isComponentInstance(instance) {
	    return instance && instance.constructor && instance.constructor.Éµcmp;
	}
	function isDirectiveInstance(instance) {
	    return instance && instance.constructor && instance.constructor.Éµdir;
	}
	/**
	 * Locates the element within the given LView and returns the matching index
	 */
	function findViaNativeElement(lView, target) {
	    var tNode = lView[TVIEW].firstChild;
	    while (tNode) {
	        var native = getNativeByTNodeOrNull(tNode, lView);
	        if (native === target) {
	            return tNode.index;
	        }
	        tNode = traverseNextElement(tNode);
	    }
	    return -1;
	}
	/**
	 * Locates the next tNode (child, sibling or parent).
	 */
	function traverseNextElement(tNode) {
	    if (tNode.child) {
	        return tNode.child;
	    }
	    else if (tNode.next) {
	        return tNode.next;
	    }
	    else {
	        // Let's take the following template: <div><span>text</span></div><component/>
	        // After checking the text node, we need to find the next parent that has a "next" TNode,
	        // in this case the parent `div`, so that we can find the component.
	        while (tNode.parent && !tNode.parent.next) {
	            tNode = tNode.parent;
	        }
	        return tNode.parent && tNode.parent.next;
	    }
	}
	/**
	 * Locates the component within the given LView and returns the matching index
	 */
	function findViaComponent(lView, componentInstance) {
	    var componentIndices = lView[TVIEW].components;
	    if (componentIndices) {
	        for (var i = 0; i < componentIndices.length; i++) {
	            var elementComponentIndex = componentIndices[i];
	            var componentView = getComponentLViewByIndex(elementComponentIndex, lView);
	            if (componentView[CONTEXT] === componentInstance) {
	                return elementComponentIndex;
	            }
	        }
	    }
	    else {
	        var rootComponentView = getComponentLViewByIndex(HEADER_OFFSET, lView);
	        var rootComponent = rootComponentView[CONTEXT];
	        if (rootComponent === componentInstance) {
	            // we are dealing with the root element here therefore we know that the
	            // element is the very first element after the HEADER data in the lView
	            return HEADER_OFFSET;
	        }
	    }
	    return -1;
	}
	/**
	 * Locates the directive within the given LView and returns the matching index
	 */
	function findViaDirective(lView, directiveInstance) {
	    // if a directive is monkey patched then it will (by default)
	    // have a reference to the LView of the current view. The
	    // element bound to the directive being search lives somewhere
	    // in the view data. We loop through the nodes and check their
	    // list of directives for the instance.
	    var tNode = lView[TVIEW].firstChild;
	    while (tNode) {
	        var directiveIndexStart = tNode.directiveStart;
	        var directiveIndexEnd = tNode.directiveEnd;
	        for (var i = directiveIndexStart; i < directiveIndexEnd; i++) {
	            if (lView[i] === directiveInstance) {
	                return tNode.index;
	            }
	        }
	        tNode = traverseNextElement(tNode);
	    }
	    return -1;
	}
	/**
	 * Returns a list of directives extracted from the given view based on the
	 * provided list of directive index values.
	 *
	 * @param nodeIndex The node index
	 * @param lView The target view data
	 * @param includeComponents Whether or not to include components in returned directives
	 */
	function getDirectivesAtNodeIndex(nodeIndex, lView, includeComponents) {
	    var tNode = lView[TVIEW].data[nodeIndex];
	    var directiveStartIndex = tNode.directiveStart;
	    if (directiveStartIndex == 0)
	        return EMPTY_ARRAY;
	    var directiveEndIndex = tNode.directiveEnd;
	    if (!includeComponents && tNode.flags & 2 /* isComponentHost */)
	        directiveStartIndex++;
	    return lView.slice(directiveStartIndex, directiveEndIndex);
	}
	function getComponentAtNodeIndex(nodeIndex, lView) {
	    var tNode = lView[TVIEW].data[nodeIndex];
	    var directiveStartIndex = tNode.directiveStart;
	    return tNode.flags & 2 /* isComponentHost */ ? lView[directiveStartIndex] : null;
	}
	/**
	 * Returns a map of local references (local reference name => element or directive instance) that
	 * exist on a given element.
	 */
	function discoverLocalRefs(lView, nodeIndex) {
	    var tNode = lView[TVIEW].data[nodeIndex];
	    if (tNode && tNode.localNames) {
	        var result = {};
	        var localIndex = tNode.index + 1;
	        for (var i = 0; i < tNode.localNames.length; i += 2) {
	            result[tNode.localNames[i]] = lView[localIndex];
	            localIndex++;
	        }
	        return result;
	    }
	    return null;
	}

	/** Called when directives inject each other (creating a circular dependency) */
	function throwCyclicDependencyError(token) {
	    throw new Error("Cannot instantiate cyclic dependency! " + token);
	}
	function throwMixedMultiProviderError() {
	    throw new Error("Cannot mix multi providers and regular providers");
	}
	function throwInvalidProviderError(ngModuleType, providers, provider) {
	    var ngModuleDetail = '';
	    if (ngModuleType && providers) {
	        var providerDetail = providers.map(function (v) { return v == provider ? '?' + provider + '?' : '...'; });
	        ngModuleDetail =
	            " - only instances of Provider and Type are allowed, got: [" + providerDetail.join(', ') + "]";
	    }
	    throw new Error("Invalid provider for the NgModule '" + stringify$1(ngModuleType) + "'" + ngModuleDetail);
	}
	function isPositive(mode) {
	    return (mode & 1 /* NOT */) === 0;
	}
	function maybeWrapInNotSelector(isNegativeMode, chunk) {
	    return isNegativeMode ? ':not(' + chunk.trim() + ')' : chunk;
	}
	function stringifyCSSSelector(selector) {
	    var result = selector[0];
	    var i = 1;
	    var mode = 2 /* ATTRIBUTE */;
	    var currentChunk = '';
	    var isNegativeMode = false;
	    while (i < selector.length) {
	        var valueOrMarker = selector[i];
	        if (typeof valueOrMarker === 'string') {
	            if (mode & 2 /* ATTRIBUTE */) {
	                var attrValue = selector[++i];
	                currentChunk +=
	                    '[' + valueOrMarker + (attrValue.length > 0 ? '="' + attrValue + '"' : '') + ']';
	            }
	            else if (mode & 8 /* CLASS */) {
	                currentChunk += '.' + valueOrMarker;
	            }
	            else if (mode & 4 /* ELEMENT */) {
	                currentChunk += ' ' + valueOrMarker;
	            }
	        }
	        else {
	            //
	            // Append current chunk to the final result in case we come across SelectorFlag, which
	            // indicates that the previous section of a selector is over. We need to accumulate content
	            // between flags to make sure we wrap the chunk later in :not() selector if needed, e.g.
	            // ```
	            //  ['', Flags.CLASS, '.classA', Flags.CLASS | Flags.NOT, '.classB', '.classC']
	            // ```
	            // should be transformed to `.classA :not(.classB .classC)`.
	            //
	            // Note: for negative selector part, we accumulate content between flags until we find the
	            // next negative flag. This is needed to support a case where `:not()` rule contains more than
	            // one chunk, e.g. the following selector:
	            // ```
	            //  ['', Flags.ELEMENT | Flags.NOT, 'p', Flags.CLASS, 'foo', Flags.CLASS | Flags.NOT, 'bar']
	            // ```
	            // should be stringified to `:not(p.foo) :not(.bar)`
	            //
	            if (currentChunk !== '' && !isPositive(valueOrMarker)) {
	                result += maybeWrapInNotSelector(isNegativeMode, currentChunk);
	                currentChunk = '';
	            }
	            mode = valueOrMarker;
	            // According to CssSelector spec, once we come across `SelectorFlags.NOT` flag, the negative
	            // mode is maintained for remaining chunks of a selector.
	            isNegativeMode = isNegativeMode || !isPositive(mode);
	        }
	        i++;
	    }
	    if (currentChunk !== '') {
	        result += maybeWrapInNotSelector(isNegativeMode, currentChunk);
	    }
	    return result;
	}
	/**
	 * Generates string representation of CSS selector in parsed form.
	 *
	 * ComponentDef and DirectiveDef are generated with the selector in parsed form to avoid doing
	 * additional parsing at runtime (for example, for directive matching). However in some cases (for
	 * example, while bootstrapping a component), a string version of the selector is required to query
	 * for the host element on the page. This function takes the parsed form of a selector and returns
	 * its string representation.
	 *
	 * @param selectorList selector in parsed form
	 * @returns string representation of a given selector
	 */
	function stringifyCSSSelectorList(selectorList) {
	    return selectorList.map(stringifyCSSSelector).join(',');
	}
	/**
	 * Extracts attributes and classes information from a given CSS selector.
	 *
	 * This function is used while creating a component dynamically. In this case, the host element
	 * (that is created dynamically) should contain attributes and classes specified in component's CSS
	 * selector.
	 *
	 * @param selector CSS selector in parsed form (in a form of array)
	 * @returns object with `attrs` and `classes` fields that contain extracted information
	 */
	function extractAttrsAndClassesFromSelector(selector) {
	    var attrs = [];
	    var classes = [];
	    var i = 1;
	    var mode = 2 /* ATTRIBUTE */;
	    while (i < selector.length) {
	        var valueOrMarker = selector[i];
	        if (typeof valueOrMarker === 'string') {
	            if (mode === 2 /* ATTRIBUTE */) {
	                if (valueOrMarker !== '') {
	                    attrs.push(valueOrMarker, selector[++i]);
	                }
	            }
	            else if (mode === 8 /* CLASS */) {
	                classes.push(valueOrMarker);
	            }
	        }
	        else {
	            // According to CssSelector spec, once we come across `SelectorFlags.NOT` flag, the negative
	            // mode is maintained for remaining chunks of a selector. Since attributes and classes are
	            // extracted only for "positive" part of the selector, we can stop here.
	            if (!isPositive(mode))
	                break;
	            mode = valueOrMarker;
	        }
	        i++;
	    }
	    return { attrs: attrs, classes: classes };
	}

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/** A special value which designates that a value has not changed. */
	var NO_CHANGE = (typeof ngDevMode === 'undefined' || ngDevMode) ? { __brand__: 'NO_CHANGE' } : {};

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * Gets the parent LView of the passed LView, if the PARENT is an LContainer, will get the parent of
	 * that LContainer, which is an LView
	 * @param lView the lView whose parent to get
	 */
	function getLViewParent(lView) {
	    ngDevMode && assertLView(lView);
	    var parent = lView[PARENT];
	    return isLContainer(parent) ? parent[PARENT] : parent;
	}
	function selectIndexInternal(tView, lView, index, checkNoChangesMode) {
	    ngDevMode && assertGreaterThan(index, -1, 'Invalid index');
	    ngDevMode && assertDataInRange(lView, index + HEADER_OFFSET);
	    // Flush the initial hooks for elements in the view that have been added up to this point.
	    // PERF WARNING: do NOT extract this to a separate function without running benchmarks
	    if (!checkNoChangesMode) {
	        var hooksInitPhaseCompleted = (lView[FLAGS] & 3 /* InitPhaseStateMask */) === 3 /* InitPhaseCompleted */;
	        if (hooksInitPhaseCompleted) {
	            var preOrderCheckHooks = tView.preOrderCheckHooks;
	            if (preOrderCheckHooks !== null) {
	                executeCheckHooks(lView, preOrderCheckHooks, index);
	            }
	        }
	        else {
	            var preOrderHooks = tView.preOrderHooks;
	            if (preOrderHooks !== null) {
	                executeInitAndCheckHooks(lView, preOrderHooks, 0 /* OnInitHooksToBeRun */, index);
	            }
	        }
	    }
	    // We must set the selected index *after* running the hooks, because hooks may have side-effects
	    // that cause other template functions to run, thus updating the selected index, which is global
	    // state. If we run `setSelectedIndex` *before* we run the hooks, in some cases the selected index
	    // will be altered by the time we leave the `ÉµÉµadvance` instruction.
	    setSelectedIndex(index);
	}

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * Marks that the next string is for element.
	 *
	 * See `I18nMutateOpCodes` documentation.
	 */
	var ELEMENT_MARKER = {
	    marker: 'element'
	};
	/**
	 * Marks that the next string is for comment.
	 *
	 * See `I18nMutateOpCodes` documentation.
	 */
	var COMMENT_MARKER = {
	    marker: 'comment'
	};
	function getTStylingRangePrev(tStylingRange) {
	    ngDevMode && assertNumber(tStylingRange, 'expected number');
	    return (tStylingRange >> 17 /* PREV_SHIFT */) & 32767 /* UNSIGNED_MASK */;
	}
	function getTStylingRangePrevDuplicate(tStylingRange) {
	    ngDevMode && assertNumber(tStylingRange, 'expected number');
	    return (tStylingRange & 2 /* PREV_DUPLICATE */) ==
	        2 /* PREV_DUPLICATE */;
	}
	function getTStylingRangeNext(tStylingRange) {
	    ngDevMode && assertNumber(tStylingRange, 'expected number');
	    return (tStylingRange & 131068 /* NEXT_MASK */) >> 2 /* NEXT_SHIFT */;
	}
	function getTStylingRangeNextDuplicate(tStylingRange) {
	    ngDevMode && assertNumber(tStylingRange, 'expected number');
	    return (tStylingRange & 1 /* NEXT_DUPLICATE */) ===
	        1 /* NEXT_DUPLICATE */;
	}

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	function attachDebugObject(obj, debug) {
	    Object.defineProperty(obj, 'debug', { value: debug, enumerable: false });
	}

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	var NG_DEV_MODE = ((typeof ngDevMode === 'undefined' || !!ngDevMode) && initNgDevMode());
	/*
	 * This file contains conditionally attached classes which provide human readable (debug) level
	 * information for `LView`, `LContainer` and other internal data structures. These data structures
	 * are stored internally as array which makes it very difficult during debugging to reason about the
	 * current state of the system.
	 *
	 * Patching the array with extra property does change the array's hidden class' but it does not
	 * change the cost of access, therefore this patching should not have significant if any impact in
	 * `ngDevMode` mode. (see: https://jsperf.com/array-vs-monkey-patch-array)
	 *
	 * So instead of seeing:
	 * ```
	 * Array(30) [Object, 659, null, â¦]
	 * ```
	 *
	 * You get to see:
	 * ```
	 * LViewDebug {
	 *   views: [...],
	 *   flags: {attached: true, ...}
	 *   nodes: [
	 *     {html: '<div id="123">', ..., nodes: [
	 *       {html: '<span>', ..., nodes: null}
	 *     ]}
	 *   ]
	 * }
	 * ```
	 */
	var LVIEW_COMPONENT_CACHE;
	var LVIEW_EMBEDDED_CACHE;
	var LVIEW_ROOT;
	/**
	 * This function clones a blueprint and creates LView.
	 *
	 * Simple slice will keep the same type, and we need it to be LView
	 */
	function cloneToLViewFromTViewBlueprint(tView) {
	    var debugTView = tView;
	    var lView = getLViewToClone(debugTView.type, tView.template && tView.template.name);
	    return lView.concat(tView.blueprint);
	}
	function getLViewToClone(type, name) {
	    switch (type) {
	        case 0 /* Root */:
	            if (LVIEW_ROOT === undefined)
	                LVIEW_ROOT = new (createNamedArrayType('LRootView'))();
	            return LVIEW_ROOT;
	        case 1 /* Component */:
	            if (LVIEW_COMPONENT_CACHE === undefined)
	                LVIEW_COMPONENT_CACHE = new Map();
	            var componentArray = LVIEW_COMPONENT_CACHE.get(name);
	            if (componentArray === undefined) {
	                componentArray = new (createNamedArrayType('LComponentView' + nameSuffix(name)))();
	                LVIEW_COMPONENT_CACHE.set(name, componentArray);
	            }
	            return componentArray;
	        case 2 /* Embedded */:
	            if (LVIEW_EMBEDDED_CACHE === undefined)
	                LVIEW_EMBEDDED_CACHE = new Map();
	            var embeddedArray = LVIEW_EMBEDDED_CACHE.get(name);
	            if (embeddedArray === undefined) {
	                embeddedArray = new (createNamedArrayType('LEmbeddedView' + nameSuffix(name)))();
	                LVIEW_EMBEDDED_CACHE.set(name, embeddedArray);
	            }
	            return embeddedArray;
	    }
	    throw new Error('unreachable code');
	}
	function nameSuffix(text) {
	    if (text == null)
	        return '';
	    var index = text.lastIndexOf('_Template');
	    return '_' + (index === -1 ? text : text.substr(0, index));
	}
	/**
	 * This class is a debug version of Object literal so that we can have constructor name show up
	 * in
	 * debug tools in ngDevMode.
	 */
	var TViewConstructor = /** @class */ (function () {
	    function TView(type, //
	    id, //
	    blueprint, //
	    template, //
	    queries, //
	    viewQuery, //
	    node, //
	    data, //
	    bindingStartIndex, //
	    expandoStartIndex, //
	    expandoInstructions, //
	    firstCreatePass, //
	    firstUpdatePass, //
	    staticViewQueries, //
	    staticContentQueries, //
	    preOrderHooks, //
	    preOrderCheckHooks, //
	    contentHooks, //
	    contentCheckHooks, //
	    viewHooks, //
	    viewCheckHooks, //
	    destroyHooks, //
	    cleanup, //
	    contentQueries, //
	    components, //
	    directiveRegistry, //
	    pipeRegistry, //
	    firstChild, //
	    schemas, //
	    consts, //
	    incompleteFirstPass //
	    ) {
	        this.type = type;
	        this.id = id;
	        this.blueprint = blueprint;
	        this.template = template;
	        this.queries = queries;
	        this.viewQuery = viewQuery;
	        this.node = node;
	        this.data = data;
	        this.bindingStartIndex = bindingStartIndex;
	        this.expandoStartIndex = expandoStartIndex;
	        this.expandoInstructions = expandoInstructions;
	        this.firstCreatePass = firstCreatePass;
	        this.firstUpdatePass = firstUpdatePass;
	        this.staticViewQueries = staticViewQueries;
	        this.staticContentQueries = staticContentQueries;
	        this.preOrderHooks = preOrderHooks;
	        this.preOrderCheckHooks = preOrderCheckHooks;
	        this.contentHooks = contentHooks;
	        this.contentCheckHooks = contentCheckHooks;
	        this.viewHooks = viewHooks;
	        this.viewCheckHooks = viewCheckHooks;
	        this.destroyHooks = destroyHooks;
	        this.cleanup = cleanup;
	        this.contentQueries = contentQueries;
	        this.components = components;
	        this.directiveRegistry = directiveRegistry;
	        this.pipeRegistry = pipeRegistry;
	        this.firstChild = firstChild;
	        this.schemas = schemas;
	        this.consts = consts;
	        this.incompleteFirstPass = incompleteFirstPass;
	    }
	    Object.defineProperty(TView.prototype, "template_", {
	        get: function () {
	            var buf = [];
	            processTNodeChildren(this.firstChild, buf);
	            return buf.join('');
	        },
	        enumerable: true,
	        configurable: true
	    });
	    return TView;
	}());
	var TNode = /** @class */ (function () {
	    function TNode(tView_, //
	    type, //
	    index, //
	    injectorIndex, //
	    directiveStart, //
	    directiveEnd, //
	    directiveStylingLast, //
	    propertyBindings, //
	    flags, //
	    providerIndexes, //
	    tagName, //
	    attrs, //
	    mergedAttrs, //
	    localNames, //
	    initialInputs, //
	    inputs, //
	    outputs, //
	    tViews, //
	    next, //
	    projectionNext, //
	    child, //
	    parent, //
	    projection, //
	    styles, //
	    residualStyles, //
	    classes, //
	    residualClasses, //
	    classBindings, //
	    styleBindings) {
	        this.tView_ = tView_;
	        this.type = type;
	        this.index = index;
	        this.injectorIndex = injectorIndex;
	        this.directiveStart = directiveStart;
	        this.directiveEnd = directiveEnd;
	        this.directiveStylingLast = directiveStylingLast;
	        this.propertyBindings = propertyBindings;
	        this.flags = flags;
	        this.providerIndexes = providerIndexes;
	        this.tagName = tagName;
	        this.attrs = attrs;
	        this.mergedAttrs = mergedAttrs;
	        this.localNames = localNames;
	        this.initialInputs = initialInputs;
	        this.inputs = inputs;
	        this.outputs = outputs;
	        this.tViews = tViews;
	        this.next = next;
	        this.projectionNext = projectionNext;
	        this.child = child;
	        this.parent = parent;
	        this.projection = projection;
	        this.styles = styles;
	        this.residualStyles = residualStyles;
	        this.classes = classes;
	        this.residualClasses = residualClasses;
	        this.classBindings = classBindings;
	        this.styleBindings = styleBindings;
	    }
	    Object.defineProperty(TNode.prototype, "type_", {
	        get: function () {
	            switch (this.type) {
	                case 0 /* Container */:
	                    return 'TNodeType.Container';
	                case 3 /* Element */:
	                    return 'TNodeType.Element';
	                case 4 /* ElementContainer */:
	                    return 'TNodeType.ElementContainer';
	                case 5 /* IcuContainer */:
	                    return 'TNodeType.IcuContainer';
	                case 1 /* Projection */:
	                    return 'TNodeType.Projection';
	                case 2 /* View */:
	                    return 'TNodeType.View';
	                default:
	                    return 'TNodeType.???';
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(TNode.prototype, "flags_", {
	        get: function () {
	            var flags = [];
	            if (this.flags & 16 /* hasClassInput */)
	                flags.push('TNodeFlags.hasClassInput');
	            if (this.flags & 8 /* hasContentQuery */)
	                flags.push('TNodeFlags.hasContentQuery');
	            if (this.flags & 32 /* hasStyleInput */)
	                flags.push('TNodeFlags.hasStyleInput');
	            if (this.flags & 128 /* hasHostBindings */)
	                flags.push('TNodeFlags.hasHostBindings');
	            if (this.flags & 2 /* isComponentHost */)
	                flags.push('TNodeFlags.isComponentHost');
	            if (this.flags & 1 /* isDirectiveHost */)
	                flags.push('TNodeFlags.isDirectiveHost');
	            if (this.flags & 64 /* isDetached */)
	                flags.push('TNodeFlags.isDetached');
	            if (this.flags & 4 /* isProjected */)
	                flags.push('TNodeFlags.isProjected');
	            return flags.join('|');
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(TNode.prototype, "template_", {
	        get: function () {
	            var buf = [];
	            buf.push('<', this.tagName || this.type_);
	            if (this.attrs) {
	                for (var i = 0; i < this.attrs.length;) {
	                    var attrName = this.attrs[i++];
	                    if (typeof attrName == 'number') {
	                        break;
	                    }
	                    var attrValue = this.attrs[i++];
	                    buf.push(' ', attrName, '="', attrValue, '"');
	                }
	            }
	            buf.push('>');
	            processTNodeChildren(this.child, buf);
	            buf.push('</', this.tagName || this.type_, '>');
	            return buf.join('');
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(TNode.prototype, "styleBindings_", {
	        get: function () {
	            return toDebugStyleBinding(this, false);
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(TNode.prototype, "classBindings_", {
	        get: function () {
	            return toDebugStyleBinding(this, true);
	        },
	        enumerable: true,
	        configurable: true
	    });
	    return TNode;
	}());
	var TNodeDebug = TNode;
	function toDebugStyleBinding(tNode, isClassBased) {
	    var tData = tNode.tView_.data;
	    var bindings = [];
	    var range = isClassBased ? tNode.classBindings : tNode.styleBindings;
	    var prev = getTStylingRangePrev(range);
	    var next = getTStylingRangeNext(range);
	    var isTemplate = next !== 0;
	    var cursor = isTemplate ? next : prev;
	    while (cursor !== 0) {
	        var itemKey = tData[cursor];
	        var itemRange = tData[cursor + 1];
	        bindings.unshift({
	            key: itemKey,
	            index: cursor,
	            isTemplate: isTemplate,
	            prevDuplicate: getTStylingRangePrevDuplicate(itemRange),
	            nextDuplicate: getTStylingRangeNextDuplicate(itemRange),
	            nextIndex: getTStylingRangeNext(itemRange),
	            prevIndex: getTStylingRangePrev(itemRange),
	        });
	        if (cursor === prev)
	            isTemplate = false;
	        cursor = getTStylingRangePrev(itemRange);
	    }
	    bindings.push((isClassBased ? tNode.residualClasses : tNode.residualStyles) || null);
	    return bindings;
	}
	function processTNodeChildren(tNode, buf) {
	    while (tNode) {
	        buf.push(tNode.template_);
	        tNode = tNode.next;
	    }
	}
	var TViewData = NG_DEV_MODE && createNamedArrayType('TViewData') || null;
	var TVIEWDATA_EMPTY; // can't initialize here or it will not be tree shaken, because
	// `LView` constructor could have side-effects.
	/**
	 * This function clones a blueprint and creates TData.
	 *
	 * Simple slice will keep the same type, and we need it to be TData
	 */
	function cloneToTViewData(list) {
	    if (TVIEWDATA_EMPTY === undefined)
	        TVIEWDATA_EMPTY = new TViewData();
	    return TVIEWDATA_EMPTY.concat(list);
	}
	var LViewBlueprint = NG_DEV_MODE && createNamedArrayType('LViewBlueprint') || null;
	var MatchesArray = NG_DEV_MODE && createNamedArrayType('MatchesArray') || null;
	var TViewComponents = NG_DEV_MODE && createNamedArrayType('TViewComponents') || null;
	var TNodeLocalNames = NG_DEV_MODE && createNamedArrayType('TNodeLocalNames') || null;
	var TNodeInitialInputs = NG_DEV_MODE && createNamedArrayType('TNodeInitialInputs') || null;
	var TNodeInitialData = NG_DEV_MODE && createNamedArrayType('TNodeInitialData') || null;
	var LCleanup = NG_DEV_MODE && createNamedArrayType('LCleanup') || null;
	var TCleanup = NG_DEV_MODE && createNamedArrayType('TCleanup') || null;
	function attachLViewDebug(lView) {
	    attachDebugObject(lView, new LViewDebug(lView));
	}
	function toDebug(obj) {
	    if (obj) {
	        var debug = obj.debug;
	        assertDefined(debug, 'Object does not have a debug representation.');
	        return debug;
	    }
	    else {
	        return obj;
	    }
	}
	/**
	 * Use this method to unwrap a native element in `LView` and convert it into HTML for easier
	 * reading.
	 *
	 * @param value possibly wrapped native DOM node.
	 * @param includeChildren If `true` then the serialized HTML form will include child elements
	 * (same
	 * as `outerHTML`). If `false` then the serialized HTML form will only contain the element
	 * itself
	 * (will not serialize child elements).
	 */
	function toHtml(value, includeChildren) {
	    if (includeChildren === void 0) { includeChildren = false; }
	    var node = unwrapRNode(value);
	    if (node) {
	        var isTextNode = node.nodeType === Node.TEXT_NODE;
	        var outerHTML = (isTextNode ? node.textContent : node.outerHTML) || '';
	        if (includeChildren || isTextNode) {
	            return outerHTML;
	        }
	        else {
	            var innerHTML = '>' + node.innerHTML + '<';
	            return (outerHTML.split(innerHTML)[0]) + '>';
	        }
	    }
	    else {
	        return null;
	    }
	}
	var LViewDebug = /** @class */ (function () {
	    function LViewDebug(_raw_lView) {
	        this._raw_lView = _raw_lView;
	    }
	    Object.defineProperty(LViewDebug.prototype, "flags", {
	        /**
	         * Flags associated with the `LView` unpacked into a more readable state.
	         */
	        get: function () {
	            var flags = this._raw_lView[FLAGS];
	            return {
	                __raw__flags__: flags,
	                initPhaseState: flags & 3 /* InitPhaseStateMask */,
	                creationMode: !!(flags & 4 /* CreationMode */),
	                firstViewPass: !!(flags & 8 /* FirstLViewPass */),
	                checkAlways: !!(flags & 16 /* CheckAlways */),
	                dirty: !!(flags & 64 /* Dirty */),
	                attached: !!(flags & 128 /* Attached */),
	                destroyed: !!(flags & 256 /* Destroyed */),
	                isRoot: !!(flags & 512 /* IsRoot */),
	                indexWithinInitPhase: flags >> 11 /* IndexWithinInitPhaseShift */,
	            };
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(LViewDebug.prototype, "parent", {
	        get: function () {
	            return toDebug(this._raw_lView[PARENT]);
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(LViewDebug.prototype, "host", {
	        get: function () {
	            return toHtml(this._raw_lView[HOST], true);
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(LViewDebug.prototype, "html", {
	        get: function () {
	            return (this.nodes || []).map(function (node) { return toHtml(node.native, true); }).join('');
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(LViewDebug.prototype, "context", {
	        get: function () {
	            return this._raw_lView[CONTEXT];
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(LViewDebug.prototype, "nodes", {
	        /**
	         * The tree of nodes associated with the current `LView`. The nodes have been normalized into
	         * a
	         * tree structure with relevant details pulled out for readability.
	         */
	        get: function () {
	            var lView = this._raw_lView;
	            var tNode = lView[TVIEW].firstChild;
	            return toDebugNodes(tNode, lView);
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(LViewDebug.prototype, "tView", {
	        get: function () {
	            return this._raw_lView[TVIEW];
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(LViewDebug.prototype, "cleanup", {
	        get: function () {
	            return this._raw_lView[CLEANUP];
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(LViewDebug.prototype, "injector", {
	        get: function () {
	            return this._raw_lView[INJECTOR$1];
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(LViewDebug.prototype, "rendererFactory", {
	        get: function () {
	            return this._raw_lView[RENDERER_FACTORY];
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(LViewDebug.prototype, "renderer", {
	        get: function () {
	            return this._raw_lView[RENDERER];
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(LViewDebug.prototype, "sanitizer", {
	        get: function () {
	            return this._raw_lView[SANITIZER];
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(LViewDebug.prototype, "childHead", {
	        get: function () {
	            return toDebug(this._raw_lView[CHILD_HEAD]);
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(LViewDebug.prototype, "next", {
	        get: function () {
	            return toDebug(this._raw_lView[NEXT]);
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(LViewDebug.prototype, "childTail", {
	        get: function () {
	            return toDebug(this._raw_lView[CHILD_TAIL]);
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(LViewDebug.prototype, "declarationView", {
	        get: function () {
	            return toDebug(this._raw_lView[DECLARATION_VIEW]);
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(LViewDebug.prototype, "queries", {
	        get: function () {
	            return this._raw_lView[QUERIES];
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(LViewDebug.prototype, "tHost", {
	        get: function () {
	            return this._raw_lView[T_HOST];
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(LViewDebug.prototype, "childViews", {
	        /**
	         * Normalized view of child views (and containers) attached at this location.
	         */
	        get: function () {
	            var childViews = [];
	            var child = this.childHead;
	            while (child) {
	                childViews.push(child);
	                child = child.next;
	            }
	            return childViews;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    return LViewDebug;
	}());
	/**
	 * Turns a flat list of nodes into a tree by walking the associated `TNode` tree.
	 *
	 * @param tNode
	 * @param lView
	 */
	function toDebugNodes(tNode, lView) {
	    if (tNode) {
	        var debugNodes = [];
	        var tNodeCursor = tNode;
	        while (tNodeCursor) {
	            debugNodes.push(buildDebugNode(tNodeCursor, lView, tNodeCursor.index));
	            tNodeCursor = tNodeCursor.next;
	        }
	        return debugNodes;
	    }
	    else {
	        return null;
	    }
	}
	function buildDebugNode(tNode, lView, nodeIndex) {
	    var rawValue = lView[nodeIndex];
	    var native = unwrapRNode(rawValue);
	    var componentLViewDebug = toDebug(readLViewValue(rawValue));
	    return {
	        html: toHtml(native),
	        native: native,
	        nodes: toDebugNodes(tNode.child, lView),
	        component: componentLViewDebug,
	    };
	}
	var LContainerDebug = /** @class */ (function () {
	    function LContainerDebug(_raw_lContainer) {
	        this._raw_lContainer = _raw_lContainer;
	    }
	    Object.defineProperty(LContainerDebug.prototype, "activeIndex", {
	        get: function () {
	            return getLContainerActiveIndex(this._raw_lContainer);
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(LContainerDebug.prototype, "hasTransplantedViews", {
	        get: function () {
	            return (this._raw_lContainer[ACTIVE_INDEX] & 1 /* HAS_TRANSPLANTED_VIEWS */) ===
	                1 /* HAS_TRANSPLANTED_VIEWS */;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(LContainerDebug.prototype, "views", {
	        get: function () {
	            return this._raw_lContainer.slice(CONTAINER_HEADER_OFFSET)
	                .map(toDebug);
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(LContainerDebug.prototype, "parent", {
	        get: function () {
	            return toDebug(this._raw_lContainer[PARENT]);
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(LContainerDebug.prototype, "movedViews", {
	        get: function () {
	            return this._raw_lContainer[MOVED_VIEWS];
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(LContainerDebug.prototype, "host", {
	        get: function () {
	            return this._raw_lContainer[HOST];
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(LContainerDebug.prototype, "native", {
	        get: function () {
	            return this._raw_lContainer[NATIVE$1];
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(LContainerDebug.prototype, "next", {
	        get: function () {
	            return toDebug(this._raw_lContainer[NEXT]);
	        },
	        enumerable: true,
	        configurable: true
	    });
	    return LContainerDebug;
	}());
	/**
	 * Return an `LView` value if found.
	 *
	 * @param value `LView` if any
	 */
	function readLViewValue(value) {
	    while (Array.isArray(value)) {
	        // This check is not quite right, as it does not take into account `StylingContext`
	        // This is why it is in debug, not in util.ts
	        if (value.length >= HEADER_OFFSET - 1)
	            return value;
	        value = value[HOST];
	    }
	    return null;
	}
	var I18NDebugItem = /** @class */ (function () {
	    function I18NDebugItem(__raw_opCode, _lView, nodeIndex, type) {
	        this.__raw_opCode = __raw_opCode;
	        this._lView = _lView;
	        this.nodeIndex = nodeIndex;
	        this.type = type;
	    }
	    Object.defineProperty(I18NDebugItem.prototype, "tNode", {
	        get: function () {
	            return getTNode(this._lView[TVIEW], this.nodeIndex);
	        },
	        enumerable: true,
	        configurable: true
	    });
	    return I18NDebugItem;
	}());
	var I18nMutateOpCodesDebug = /** @class */ (function () {
	    function I18nMutateOpCodesDebug(__raw_opCodes, __lView) {
	        this.__raw_opCodes = __raw_opCodes;
	        this.__lView = __lView;
	    }
	    Object.defineProperty(I18nMutateOpCodesDebug.prototype, "operations", {
	        /**
	         * A list of operation information about how the OpCodes will act on the view.
	         */
	        get: function () {
	            var _a = this, __lView = _a.__lView, __raw_opCodes = _a.__raw_opCodes;
	            var results = [];
	            for (var i = 0; i < __raw_opCodes.length; i++) {
	                var opCode = __raw_opCodes[i];
	                var result = void 0;
	                if (typeof opCode === 'string') {
	                    result = {
	                        __raw_opCode: opCode,
	                        type: 'Create Text Node',
	                        nodeIndex: __raw_opCodes[++i],
	                        text: opCode,
	                    };
	                }
	                if (typeof opCode === 'number') {
	                    switch (opCode & 7 /* MASK_OPCODE */) {
	                        case 1 /* AppendChild */:
	                            var destinationNodeIndex = opCode >>> 17 /* SHIFT_PARENT */;
	                            result = new I18NDebugItem(opCode, __lView, destinationNodeIndex, 'AppendChild');
	                            break;
	                        case 0 /* Select */:
	                            var nodeIndex = opCode >>> 3 /* SHIFT_REF */;
	                            result = new I18NDebugItem(opCode, __lView, nodeIndex, 'Select');
	                            break;
	                        case 5 /* ElementEnd */:
	                            var elementIndex = opCode >>> 3 /* SHIFT_REF */;
	                            result = new I18NDebugItem(opCode, __lView, elementIndex, 'ElementEnd');
	                            break;
	                        case 4 /* Attr */:
	                            elementIndex = opCode >>> 3 /* SHIFT_REF */;
	                            result = new I18NDebugItem(opCode, __lView, elementIndex, 'Attr');
	                            result['attrName'] = __raw_opCodes[++i];
	                            result['attrValue'] = __raw_opCodes[++i];
	                            break;
	                    }
	                }
	                if (!result) {
	                    switch (opCode) {
	                        case COMMENT_MARKER:
	                            result = {
	                                __raw_opCode: opCode,
	                                type: 'COMMENT_MARKER',
	                                commentValue: __raw_opCodes[++i],
	                                nodeIndex: __raw_opCodes[++i],
	                            };
	                            break;
	                        case ELEMENT_MARKER:
	                            result = {
	                                __raw_opCode: opCode,
	                                type: 'ELEMENT_MARKER',
	                            };
	                            break;
	                    }
	                }
	                if (!result) {
	                    result = {
	                        __raw_opCode: opCode,
	                        type: 'Unknown Op Code',
	                        code: opCode,
	                    };
	                }
	                results.push(result);
	            }
	            return results;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    return I18nMutateOpCodesDebug;
	}());
	var I18nUpdateOpCodesDebug = /** @class */ (function () {
	    function I18nUpdateOpCodesDebug(__raw_opCodes, icus, __lView) {
	        this.__raw_opCodes = __raw_opCodes;
	        this.icus = icus;
	        this.__lView = __lView;
	    }
	    Object.defineProperty(I18nUpdateOpCodesDebug.prototype, "operations", {
	        /**
	         * A list of operation information about how the OpCodes will act on the view.
	         */
	        get: function () {
	            var _a = this, __lView = _a.__lView, __raw_opCodes = _a.__raw_opCodes, icus = _a.icus;
	            var results = [];
	            for (var i = 0; i < __raw_opCodes.length; i++) {
	                // bit code to check if we should apply the next update
	                var checkBit = __raw_opCodes[i];
	                // Number of opCodes to skip until next set of update codes
	                var skipCodes = __raw_opCodes[++i];
	                var value = '';
	                for (var j = i + 1; j <= (i + skipCodes); j++) {
	                    var opCode = __raw_opCodes[j];
	                    if (typeof opCode === 'string') {
	                        value += opCode;
	                    }
	                    else if (typeof opCode == 'number') {
	                        if (opCode < 0) {
	                            // It's a binding index whose value is negative
	                            // We cannot know the value of the binding so we only show the index
	                            value += "\uFFFD" + (-opCode - 1) + "\uFFFD";
	                        }
	                        else {
	                            var nodeIndex = opCode >>> 2 /* SHIFT_REF */;
	                            var tIcuIndex = void 0;
	                            var tIcu = void 0;
	                            switch (opCode & 3 /* MASK_OPCODE */) {
	                                case 1 /* Attr */:
	                                    var attrName = __raw_opCodes[++j];
	                                    var sanitizeFn = __raw_opCodes[++j];
	                                    results.push({
	                                        __raw_opCode: opCode,
	                                        checkBit: checkBit,
	                                        type: 'Attr',
	                                        attrValue: value,
	                                        attrName: attrName,
	                                        sanitizeFn: sanitizeFn,
	                                    });
	                                    break;
	                                case 0 /* Text */:
	                                    results.push({
	                                        __raw_opCode: opCode,
	                                        checkBit: checkBit,
	                                        type: 'Text',
	                                        nodeIndex: nodeIndex,
	                                        text: value,
	                                    });
	                                    break;
	                                case 2 /* IcuSwitch */:
	                                    tIcuIndex = __raw_opCodes[++j];
	                                    tIcu = icus[tIcuIndex];
	                                    var result = new I18NDebugItem(opCode, __lView, nodeIndex, 'IcuSwitch');
	                                    result['tIcuIndex'] = tIcuIndex;
	                                    result['checkBit'] = checkBit;
	                                    result['mainBinding'] = value;
	                                    result['tIcu'] = tIcu;
	                                    results.push(result);
	                                    break;
	                                case 3 /* IcuUpdate */:
	                                    tIcuIndex = __raw_opCodes[++j];
	                                    tIcu = icus[tIcuIndex];
	                                    result = new I18NDebugItem(opCode, __lView, nodeIndex, 'IcuUpdate');
	                                    result['tIcuIndex'] = tIcuIndex;
	                                    result['checkBit'] = checkBit;
	                                    result['tIcu'] = tIcu;
	                                    results.push(result);
	                                    break;
	                            }
	                        }
	                    }
	                }
	                i += skipCodes;
	            }
	            return results;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    return I18nUpdateOpCodesDebug;
	}());

	var Éµ0$4 = function () { return Promise.resolve(null); };
	/**
	 * A permanent marker promise which signifies that the current CD tree is
	 * clean.
	 */
	var _CLEAN_PROMISE = (Éµ0$4)();
	/**
	 * Process the `TView.expandoInstructions`. (Execute the `hostBindings`.)
	 *
	 * @param tView `TView` containing the `expandoInstructions`
	 * @param lView `LView` associated with the `TView`
	 */
	function setHostBindingsByExecutingExpandoInstructions(tView, lView) {
	    ngDevMode && assertSame(tView, lView[TVIEW], '`LView` is not associated with the `TView`!');
	    try {
	        var expandoInstructions = tView.expandoInstructions;
	        if (expandoInstructions !== null) {
	            var bindingRootIndex = tView.expandoStartIndex;
	            var currentDirectiveIndex = -1;
	            var currentElementIndex = -1;
	            // TODO(misko): PERF It is possible to get here with `TView.expandoInstructions` containing no
	            // functions to execute. This is wasteful as there is no work to be done, but we still need
	            // to iterate over the instructions.
	            // In example of this is in this test: `host_binding_spec.ts`
	            // `fit('should not cause problems if detectChanges is called when a property updates', ...`
	            // In the above test we get here with expando [0, 0, 1] which requires a lot of processing but
	            // there is no function to execute.
	            for (var i = 0; i < expandoInstructions.length; i++) {
	                var instruction = expandoInstructions[i];
	                if (typeof instruction === 'number') {
	                    if (instruction <= 0) {
	                        // Negative numbers mean that we are starting new EXPANDO block and need to update
	                        // the current element and directive index.
	                        // Important: In JS `-x` and `0-x` is not the same! If `x===0` then `-x` will produce
	                        // `-0` which requires non standard math arithmetic and it can prevent VM optimizations.
	                        // `0-0` will always produce `0` and will not cause a potential deoptimization in VM.
	                        // TODO(misko): PERF This should be refactored to use `~instruction` as that does not
	                        // suffer from `-0` and it is faster/more compact.
	                        currentElementIndex = 0 - instruction;
	                        setSelectedIndex(currentElementIndex);
	                        // Injector block and providers are taken into account.
	                        var providerCount = expandoInstructions[++i];
	                        bindingRootIndex += INJECTOR_BLOOM_PARENT_SIZE + providerCount;
	                        currentDirectiveIndex = bindingRootIndex;
	                    }
	                    else {
	                        // This is either the injector size (so the binding root can skip over directives
	                        // and get to the first set of host bindings on this node) or the host var count
	                        // (to get to the next set of host bindings on this node).
	                        bindingRootIndex += instruction;
	                    }
	                }
	                else {
	                    // If it's not a number, it's a host binding function that needs to be executed.
	                    if (instruction !== null) {
	                        setBindingRootForHostBindings(bindingRootIndex, currentDirectiveIndex);
	                        var hostCtx = lView[currentDirectiveIndex];
	                        instruction(2 /* Update */, hostCtx);
	                    }
	                    // TODO(misko): PERF Relying on incrementing the `currentDirectiveIndex` here is
	                    // sub-optimal. The implications are that if we have a lot of directives but none of them
	                    // have host bindings we nevertheless need to iterate over the expando instructions to
	                    // update the counter. It would be much better if we could encode the
	                    // `currentDirectiveIndex` into the `expandoInstruction` array so that we only need to
	                    // iterate over those directives which actually have `hostBindings`.
	                    currentDirectiveIndex++;
	                }
	            }
	        }
	    }
	    finally {
	        setSelectedIndex(-1);
	    }
	}
	/** Refreshes all content queries declared by directives in a given view */
	function refreshContentQueries(tView, lView) {
	    var contentQueries = tView.contentQueries;
	    if (contentQueries !== null) {
	        for (var i = 0; i < contentQueries.length; i += 2) {
	            var queryStartIdx = contentQueries[i];
	            var directiveDefIdx = contentQueries[i + 1];
	            if (directiveDefIdx !== -1) {
	                var directiveDef = tView.data[directiveDefIdx];
	                ngDevMode &&
	                    assertDefined(directiveDef.contentQueries, 'contentQueries function should be defined');
	                setCurrentQueryIndex(queryStartIdx);
	                directiveDef.contentQueries(2 /* Update */, lView[directiveDefIdx], directiveDefIdx);
	            }
	        }
	    }
	}
	/** Refreshes child components in the current view (update mode). */
	function refreshChildComponents(hostLView, components) {
	    for (var i = 0; i < components.length; i++) {
	        refreshComponent(hostLView, components[i]);
	    }
	}
	/** Renders child components in the current view (creation mode). */
	function renderChildComponents(hostLView, components) {
	    for (var i = 0; i < components.length; i++) {
	        renderComponent(hostLView, components[i]);
	    }
	}
	/**
	 * Creates a native element from a tag name, using a renderer.
	 * @param name the tag name
	 * @param renderer A renderer to use
	 * @returns the element created
	 */
	function elementCreate(name, renderer, namespace) {
	    if (isProceduralRenderer(renderer)) {
	        return renderer.createElement(name, namespace);
	    }
	    else {
	        return namespace === null ? renderer.createElement(name) :
	            renderer.createElementNS(namespace, name);
	    }
	}
	function createLView(parentLView, tView, context, flags, host, tHostNode, rendererFactory, renderer, sanitizer, injector) {
	    var lView = ngDevMode ? cloneToLViewFromTViewBlueprint(tView) : tView.blueprint.slice();
	    lView[HOST] = host;
	    lView[FLAGS] = flags | 4 /* CreationMode */ | 128 /* Attached */ | 8 /* FirstLViewPass */;
	    resetPreOrderHookFlags(lView);
	    lView[PARENT] = lView[DECLARATION_VIEW] = parentLView;
	    lView[CONTEXT] = context;
	    lView[RENDERER_FACTORY] = (rendererFactory || parentLView && parentLView[RENDERER_FACTORY]);
	    ngDevMode && assertDefined(lView[RENDERER_FACTORY], 'RendererFactory is required');
	    lView[RENDERER] = (renderer || parentLView && parentLView[RENDERER]);
	    ngDevMode && assertDefined(lView[RENDERER], 'Renderer is required');
	    lView[SANITIZER] = sanitizer || parentLView && parentLView[SANITIZER] || null;
	    lView[INJECTOR$1] = injector || parentLView && parentLView[INJECTOR$1] || null;
	    lView[T_HOST] = tHostNode;
	    ngDevMode &&
	        assertEqual(tView.type == 2 /* Embedded */ ? parentLView !== null : true, true, 'Embedded views must have parentLView');
	    lView[DECLARATION_COMPONENT_VIEW] =
	        tView.type == 2 /* Embedded */ ? parentLView[DECLARATION_COMPONENT_VIEW] : lView;
	    ngDevMode && attachLViewDebug(lView);
	    return lView;
	}
	function getOrCreateTNode(tView, tHostNode, index, type, name, attrs) {
	    // Keep this function short, so that the VM will inline it.
	    var adjustedIndex = index + HEADER_OFFSET;
	    var tNode = tView.data[adjustedIndex] ||
	        createTNodeAtIndex(tView, tHostNode, adjustedIndex, type, name, attrs);
	    setPreviousOrParentTNode(tNode, true);
	    return tNode;
	}
	function createTNodeAtIndex(tView, tHostNode, adjustedIndex, type, name, attrs) {
	    var previousOrParentTNode = getPreviousOrParentTNode();
	    var isParent = getIsParent();
	    var parent = isParent ? previousOrParentTNode : previousOrParentTNode && previousOrParentTNode.parent;
	    // Parents cannot cross component boundaries because components will be used in multiple places,
	    // so it's only set if the view is the same.
	    var parentInSameView = parent && parent !== tHostNode;
	    var tParentNode = parentInSameView ? parent : null;
	    var tNode = tView.data[adjustedIndex] =
	        createTNode(tView, tParentNode, type, adjustedIndex, name, attrs);
	    // Assign a pointer to the first child node of a given view. The first node is not always the one
	    // at index 0, in case of i18n, index 0 can be the instruction `i18nStart` and the first node has
	    // the index 1 or more, so we can't just check node index.
	    if (tView.firstChild === null) {
	        tView.firstChild = tNode;
	    }
	    if (previousOrParentTNode) {
	        if (isParent && previousOrParentTNode.child == null &&
	            (tNode.parent !== null || previousOrParentTNode.type === 2 /* View */)) {
	            // We are in the same view, which means we are adding content node to the parent view.
	            previousOrParentTNode.child = tNode;
	        }
	        else if (!isParent) {
	            previousOrParentTNode.next = tNode;
	        }
	    }
	    return tNode;
	}
	function assignTViewNodeToLView(tView, tParentNode, index, lView) {
	    // View nodes are not stored in data because they can be added / removed at runtime (which
	    // would cause indices to change). Their TNodes are instead stored in tView.node.
	    var tNode = tView.node;
	    if (tNode == null) {
	        ngDevMode && tParentNode &&
	            assertNodeOfPossibleTypes(tParentNode, 3 /* Element */, 0 /* Container */);
	        tView.node = tNode = createTNode(tView, tParentNode, //
	        2 /* View */, index, null, null);
	    }
	    return lView[T_HOST] = tNode;
	}
	//////////////////////////
	//// Render
	//////////////////////////
	/**
	 * Processes a view in the creation mode. This includes a number of steps in a specific order:
	 * - creating view query functions (if any);
	 * - executing a template function in the creation mode;
	 * - updating static queries (if any);
	 * - creating child components defined in a given view.
	 */
	function renderView(tView, lView, context) {
	    ngDevMode && assertEqual(isCreationMode(lView), true, 'Should be run in creation mode');
	    enterView(lView, lView[T_HOST]);
	    try {
	        var viewQuery = tView.viewQuery;
	        if (viewQuery !== null) {
	            executeViewQueryFn(1 /* Create */, viewQuery, context);
	        }
	        // Execute a template associated with this view, if it exists. A template function might not be
	        // defined for the root component views.
	        var templateFn = tView.template;
	        if (templateFn !== null) {
	            executeTemplate(tView, lView, templateFn, 1 /* Create */, context);
	        }
	        // This needs to be set before children are processed to support recursive components.
	        // This must be set to false immediately after the first creation run because in an
	        // ngFor loop, all the views will be created together before update mode runs and turns
	        // off firstCreatePass. If we don't set it here, instances will perform directive
	        // matching, etc again and again.
	        if (tView.firstCreatePass) {
	            tView.firstCreatePass = false;
	        }
	        // We resolve content queries specifically marked as `static` in creation mode. Dynamic
	        // content queries are resolved during change detection (i.e. update mode), after embedded
	        // views are refreshed (see block above).
	        if (tView.staticContentQueries) {
	            refreshContentQueries(tView, lView);
	        }
	        // We must materialize query results before child components are processed
	        // in case a child component has projected a container. The LContainer needs
	        // to exist so the embedded views are properly attached by the container.
	        if (tView.staticViewQueries) {
	            executeViewQueryFn(2 /* Update */, tView.viewQuery, context);
	        }
	        // Render child component views.
	        var components = tView.components;
	        if (components !== null) {
	            renderChildComponents(lView, components);
	        }
	    }
	    catch (error) {
	        // If we didn't manage to get past the first template pass due to
	        // an error, mark the view as corrupted so we can try to recover.
	        if (tView.firstCreatePass) {
	            tView.incompleteFirstPass = true;
	        }
	        throw error;
	    }
	    finally {
	        lView[FLAGS] &= ~4 /* CreationMode */;
	        leaveView();
	    }
	}
	/**
	 * Processes a view in update mode. This includes a number of steps in a specific order:
	 * - executing a template function in update mode;
	 * - executing hooks;
	 * - refreshing queries;
	 * - setting host bindings;
	 * - refreshing child (embedded and component) views.
	 */
	function refreshView(tView, lView, templateFn, context) {
	    ngDevMode && assertEqual(isCreationMode(lView), false, 'Should be run in update mode');
	    var flags = lView[FLAGS];
	    if ((flags & 256 /* Destroyed */) === 256 /* Destroyed */)
	        return;
	    enterView(lView, lView[T_HOST]);
	    var checkNoChangesMode = getCheckNoChangesMode();
	    try {
	        resetPreOrderHookFlags(lView);
	        setBindingIndex(tView.bindingStartIndex);
	        if (templateFn !== null) {
	            executeTemplate(tView, lView, templateFn, 2 /* Update */, context);
	        }
	        var hooksInitPhaseCompleted = (flags & 3 /* InitPhaseStateMask */) === 3 /* InitPhaseCompleted */;
	        // execute pre-order hooks (OnInit, OnChanges, DoCheck)
	        // PERF WARNING: do NOT extract this to a separate function without running benchmarks
	        if (!checkNoChangesMode) {
	            if (hooksInitPhaseCompleted) {
	                var preOrderCheckHooks = tView.preOrderCheckHooks;
	                if (preOrderCheckHooks !== null) {
	                    executeCheckHooks(lView, preOrderCheckHooks, null);
	                }
	            }
	            else {
	                var preOrderHooks = tView.preOrderHooks;
	                if (preOrderHooks !== null) {
	                    executeInitAndCheckHooks(lView, preOrderHooks, 0 /* OnInitHooksToBeRun */, null);
	                }
	                incrementInitPhaseFlags(lView, 0 /* OnInitHooksToBeRun */);
	            }
	        }
	        // First mark transplanted views that are declared in this lView as needing a refresh at their
	        // insertion points. This is needed to avoid the situation where the template is defined in this
	        // `LView` but its declaration appears after the insertion component.
	        markTransplantedViewsForRefresh(lView);
	        refreshDynamicEmbeddedViews(lView);
	        // Content query results must be refreshed before content hooks are called.
	        if (tView.contentQueries !== null) {
	            refreshContentQueries(tView, lView);
	        }
	        // execute content hooks (AfterContentInit, AfterContentChecked)
	        // PERF WARNING: do NOT extract this to a separate function without running benchmarks
	        if (!checkNoChangesMode) {
	            if (hooksInitPhaseCompleted) {
	                var contentCheckHooks = tView.contentCheckHooks;
	                if (contentCheckHooks !== null) {
	                    executeCheckHooks(lView, contentCheckHooks);
	                }
	            }
	            else {
	                var contentHooks = tView.contentHooks;
	                if (contentHooks !== null) {
	                    executeInitAndCheckHooks(lView, contentHooks, 1 /* AfterContentInitHooksToBeRun */);
	                }
	                incrementInitPhaseFlags(lView, 1 /* AfterContentInitHooksToBeRun */);
	            }
	        }
	        setHostBindingsByExecutingExpandoInstructions(tView, lView);
	        // Refresh child component views.
	        var components = tView.components;
	        if (components !== null) {
	            refreshChildComponents(lView, components);
	        }
	        // View queries must execute after refreshing child components because a template in this view
	        // could be inserted in a child component. If the view query executes before child component
	        // refresh, the template might not yet be inserted.
	        var viewQuery = tView.viewQuery;
	        if (viewQuery !== null) {
	            executeViewQueryFn(2 /* Update */, viewQuery, context);
	        }
	        // execute view hooks (AfterViewInit, AfterViewChecked)
	        // PERF WARNING: do NOT extract this to a separate function without running benchmarks
	        if (!checkNoChangesMode) {
	            if (hooksInitPhaseCompleted) {
	                var viewCheckHooks = tView.viewCheckHooks;
	                if (viewCheckHooks !== null) {
	                    executeCheckHooks(lView, viewCheckHooks);
	                }
	            }
	            else {
	                var viewHooks = tView.viewHooks;
	                if (viewHooks !== null) {
	                    executeInitAndCheckHooks(lView, viewHooks, 2 /* AfterViewInitHooksToBeRun */);
	                }
	                incrementInitPhaseFlags(lView, 2 /* AfterViewInitHooksToBeRun */);
	            }
	        }
	        if (tView.firstUpdatePass === true) {
	            // We need to make sure that we only flip the flag on successful `refreshView` only
	            // Don't do this in `finally` block.
	            // If we did this in `finally` block then an exception could block the execution of styling
	            // instructions which in turn would be unable to insert themselves into the styling linked
	            // list. The result of this would be that if the exception would not be throw on subsequent CD
	            // the styling would be unable to process it data and reflect to the DOM.
	            tView.firstUpdatePass = false;
	        }
	        // Do not reset the dirty state when running in check no changes mode. We don't want components
	        // to behave differently depending on whether check no changes is enabled or not. For example:
	        // Marking an OnPush component as dirty from within the `ngAfterViewInit` hook in order to
	        // refresh a `NgClass` binding should work. If we would reset the dirty state in the check
	        // no changes cycle, the component would be not be dirty for the next update pass. This would
	        // be different in production mode where the component dirty state is not reset.
	        if (!checkNoChangesMode) {
	            lView[FLAGS] &= ~(64 /* Dirty */ | 8 /* FirstLViewPass */);
	        }
	        if (lView[FLAGS] & 1024 /* RefreshTransplantedView */) {
	            lView[FLAGS] &= ~1024 /* RefreshTransplantedView */;
	            updateTransplantedViewCount(lView[PARENT], -1);
	        }
	    }
	    finally {
	        leaveView();
	    }
	}
	function renderComponentOrTemplate(tView, lView, templateFn, context) {
	    var rendererFactory = lView[RENDERER_FACTORY];
	    var normalExecutionPath = !getCheckNoChangesMode();
	    var creationModeIsActive = isCreationMode(lView);
	    try {
	        if (normalExecutionPath && !creationModeIsActive && rendererFactory.begin) {
	            rendererFactory.begin();
	        }
	        if (creationModeIsActive) {
	            renderView(tView, lView, context);
	        }
	        refreshView(tView, lView, templateFn, context);
	    }
	    finally {
	        if (normalExecutionPath && !creationModeIsActive && rendererFactory.end) {
	            rendererFactory.end();
	        }
	    }
	}
	function executeTemplate(tView, lView, templateFn, rf, context) {
	    var prevSelectedIndex = getSelectedIndex();
	    try {
	        setSelectedIndex(-1);
	        if (rf & 2 /* Update */ && lView.length > HEADER_OFFSET) {
	            // When we're updating, inherently select 0 so we don't
	            // have to generate that instruction for most update blocks.
	            selectIndexInternal(tView, lView, 0, getCheckNoChangesMode());
	        }
	        templateFn(rf, context);
	    }
	    finally {
	        setSelectedIndex(prevSelectedIndex);
	    }
	}
	/**
	 * Gets TView from a template function or creates a new TView
	 * if it doesn't already exist.
	 *
	 * @param def ComponentDef
	 * @returns TView
	 */
	function getOrCreateTComponentView(def) {
	    var tView = def.tView;
	    // Create a TView if there isn't one, or recreate it if the first create pass didn't
	    // complete successfuly since we can't know for sure whether it's in a usable shape.
	    if (tView === null || tView.incompleteFirstPass) {
	        return def.tView = createTView(1 /* Component */, -1, def.template, def.decls, def.vars, def.directiveDefs, def.pipeDefs, def.viewQuery, def.schemas, def.consts);
	    }
	    return tView;
	}
	/**
	 * Creates a TView instance
	 *
	 * @param viewIndex The viewBlockId for inline views, or -1 if it's a component/dynamic
	 * @param templateFn Template function
	 * @param decls The number of nodes, local refs, and pipes in this template
	 * @param directives Registry of directives for this view
	 * @param pipes Registry of pipes for this view
	 * @param viewQuery View queries for this view
	 * @param schemas Schemas for this view
	 * @param consts Constants for this view
	 */
	function createTView(type, viewIndex, templateFn, decls, vars, directives, pipes, viewQuery, schemas, consts) {
	    ngDevMode && ngDevMode.tView++;
	    var bindingStartIndex = HEADER_OFFSET + decls;
	    // This length does not yet contain host bindings from child directives because at this point,
	    // we don't know which directives are active on this template. As soon as a directive is matched
	    // that has a host binding, we will update the blueprint with that def's hostVars count.
	    var initialViewLength = bindingStartIndex + vars;
	    var blueprint = createViewBlueprint(bindingStartIndex, initialViewLength);
	    return blueprint[TVIEW] = ngDevMode ?
	        new TViewConstructor(type, viewIndex, // id: number,
	        blueprint, // blueprint: LView,
	        templateFn, // template: ComponentTemplate<{}>|null,
	        null, // queries: TQueries|null
	        viewQuery, // viewQuery: ViewQueriesFunction<{}>|null,
	        null, // node: TViewNode|TElementNode|null,
	        cloneToTViewData(blueprint).fill(null, bindingStartIndex), // data: TData,
	        bindingStartIndex, // bindingStartIndex: number,
	        initialViewLength, // expandoStartIndex: number,
	        null, // expandoInstructions: ExpandoInstructions|null,
	        true, // firstCreatePass: boolean,
	        true, // firstUpdatePass: boolean,
	        false, // staticViewQueries: boolean,
	        false, // staticContentQueries: boolean,
	        null, // preOrderHooks: HookData|null,
	        null, // preOrderCheckHooks: HookData|null,
	        null, // contentHooks: HookData|null,
	        null, // contentCheckHooks: HookData|null,
	        null, // viewHooks: HookData|null,
	        null, // viewCheckHooks: HookData|null,
	        null, // destroyHooks: DestroyHookData|null,
	        null, // cleanup: any[]|null,
	        null, // contentQueries: number[]|null,
	        null, // components: number[]|null,
	        typeof directives === 'function' ?
	            directives() :
	            directives, // directiveRegistry: DirectiveDefList|null,
	        typeof pipes === 'function' ? pipes() : pipes, // pipeRegistry: PipeDefList|null,
	        null, // firstChild: TNode|null,
	        schemas, // schemas: SchemaMetadata[]|null,
	        consts, // consts: TConstants|null
	        false // incompleteFirstPass: boolean
	        ) :
	        {
	            type: type,
	            id: viewIndex,
	            blueprint: blueprint,
	            template: templateFn,
	            queries: null,
	            viewQuery: viewQuery,
	            node: null,
	            data: blueprint.slice().fill(null, bindingStartIndex),
	            bindingStartIndex: bindingStartIndex,
	            expandoStartIndex: initialViewLength,
	            expandoInstructions: null,
	            firstCreatePass: true,
	            firstUpdatePass: true,
	            staticViewQueries: false,
	            staticContentQueries: false,
	            preOrderHooks: null,
	            preOrderCheckHooks: null,
	            contentHooks: null,
	            contentCheckHooks: null,
	            viewHooks: null,
	            viewCheckHooks: null,
	            destroyHooks: null,
	            cleanup: null,
	            contentQueries: null,
	            components: null,
	            directiveRegistry: typeof directives === 'function' ? directives() : directives,
	            pipeRegistry: typeof pipes === 'function' ? pipes() : pipes,
	            firstChild: null,
	            schemas: schemas,
	            consts: consts,
	            incompleteFirstPass: false
	        };
	}
	function createViewBlueprint(bindingStartIndex, initialViewLength) {
	    var blueprint = ngDevMode ? new LViewBlueprint() : [];
	    for (var i = 0; i < initialViewLength; i++) {
	        blueprint.push(i < bindingStartIndex ? null : NO_CHANGE);
	    }
	    return blueprint;
	}
	function createError(text, token) {
	    return new Error("Renderer: " + text + " [" + stringifyForError(token) + "]");
	}
	function assertHostNodeExists(rElement, elementOrSelector) {
	    if (!rElement) {
	        if (typeof elementOrSelector === 'string') {
	            throw createError('Host node with selector not found:', elementOrSelector);
	        }
	        else {
	            throw createError('Host node is required:', elementOrSelector);
	        }
	    }
	}
	/**
	 * Locates the host native element, used for bootstrapping existing nodes into rendering pipeline.
	 *
	 * @param rendererFactory Factory function to create renderer instance.
	 * @param elementOrSelector Render element or CSS selector to locate the element.
	 * @param encapsulation View Encapsulation defined for component that requests host element.
	 */
	function locateHostElement(renderer, elementOrSelector, encapsulation) {
	    if (isProceduralRenderer(renderer)) {
	        // When using native Shadow DOM, do not clear host element to allow native slot projection
	        var preserveContent = encapsulation === ViewEncapsulation$1$1.ShadowDom;
	        return renderer.selectRootElement(elementOrSelector, preserveContent);
	    }
	    var rElement = typeof elementOrSelector === 'string' ?
	        renderer.querySelector(elementOrSelector) :
	        elementOrSelector;
	    ngDevMode && assertHostNodeExists(rElement, elementOrSelector);
	    // Always clear host element's content when Renderer3 is in use. For procedural renderer case we
	    // make it depend on whether ShadowDom encapsulation is used (in which case the content should be
	    // preserved to allow native slot projection). ShadowDom encapsulation requires procedural
	    // renderer, and procedural renderer case is handled above.
	    rElement.textContent = '';
	    return rElement;
	}
	/**
	 * Saves the cleanup function itself in LView.cleanupInstances.
	 *
	 * This is necessary for functions that are wrapped with their contexts, like in renderer2
	 * listeners.
	 *
	 * On the first template pass, the index of the cleanup function is saved in TView.
	 */
	function storeCleanupFn(tView, lView, cleanupFn) {
	    getLCleanup(lView).push(cleanupFn);
	    if (tView.firstCreatePass) {
	        getTViewCleanup(tView).push(lView[CLEANUP].length - 1, null);
	    }
	}
	/**
	 * Constructs a TNode object from the arguments.
	 *
	 * @param tView `TView` to which this `TNode` belongs (used only in `ngDevMode`)
	 * @param type The type of the node
	 * @param adjustedIndex The index of the TNode in TView.data, adjusted for HEADER_OFFSET
	 * @param tagName The tag name of the node
	 * @param attrs The attributes defined on this node
	 * @param tViews Any TViews attached to this node
	 * @returns the TNode object
	 */
	function createTNode(tView, tParent, type, adjustedIndex, tagName, attrs) {
	    ngDevMode && ngDevMode.tNode++;
	    var injectorIndex = tParent ? tParent.injectorIndex : -1;
	    return ngDevMode ? new TNodeDebug(tView, // tView_: TView
	    type, // type: TNodeType
	    adjustedIndex, // index: number
	    injectorIndex, // injectorIndex: number
	    -1, // directiveStart: number
	    -1, // directiveEnd: number
	    -1, // directiveStylingLast: number
	    null, // propertyBindings: number[]|null
	    0, // flags: TNodeFlags
	    0, // providerIndexes: TNodeProviderIndexes
	    tagName, // tagName: string|null
	    attrs, // attrs: (string|AttributeMarker|(string|SelectorFlags)[])[]|null
	    null, // mergedAttrs
	    null, // localNames: (string|number)[]|null
	    undefined, // initialInputs: (string[]|null)[]|null|undefined
	    null, // inputs: PropertyAliases|null
	    null, // outputs: PropertyAliases|null
	    null, // tViews: ITView|ITView[]|null
	    null, // next: ITNode|null
	    null, // projectionNext: ITNode|null
	    null, // child: ITNode|null
	    tParent, // parent: TElementNode|TContainerNode|null
	    null, // projection: number|(ITNode|RNode[])[]|null
	    null, // styles: string|null
	    undefined, // residualStyles: string|null
	    null, // classes: string|null
	    undefined, // residualClasses: string|null
	    0, // classBindings: TStylingRange;
	    0) :
	        {
	            type: type,
	            index: adjustedIndex,
	            injectorIndex: injectorIndex,
	            directiveStart: -1,
	            directiveEnd: -1,
	            directiveStylingLast: -1,
	            propertyBindings: null,
	            flags: 0,
	            providerIndexes: 0,
	            tagName: tagName,
	            attrs: attrs,
	            mergedAttrs: null,
	            localNames: null,
	            initialInputs: undefined,
	            inputs: null,
	            outputs: null,
	            tViews: null,
	            next: null,
	            projectionNext: null,
	            child: null,
	            parent: tParent,
	            projection: null,
	            styles: null,
	            residualStyles: undefined,
	            classes: null,
	            residualClasses: undefined,
	            classBindings: 0,
	            styleBindings: 0,
	        };
	}
	/**
	 * Instantiate a root component.
	 */
	function instantiateRootComponent(tView, lView, def) {
	    var rootTNode = getPreviousOrParentTNode();
	    if (tView.firstCreatePass) {
	        if (def.providersResolver)
	            def.providersResolver(def);
	        generateExpandoInstructionBlock(tView, rootTNode, 1);
	        baseResolveDirective(tView, lView, def);
	    }
	    var directive = getNodeInjectable(lView, tView, lView.length - 1, rootTNode);
	    attachPatchData(directive, lView);
	    var native = getNativeByTNode(rootTNode, lView);
	    if (native) {
	        attachPatchData(native, lView);
	    }
	    return directive;
	}
	/**
	 * Add `hostBindings` to the `TView.expandoInstructions`.
	 *
	 * @param tView `TView` to which the `hostBindings` should be added.
	 * @param def `ComponentDef`/`DirectiveDef`, which contains the `hostVars`/`hostBindings` to add.
	 */
	function addHostBindingsToExpandoInstructions(tView, def) {
	    ngDevMode && assertFirstCreatePass(tView);
	    var expando = tView.expandoInstructions;
	    // TODO(misko): PERF we are adding `hostBindings` even if there is nothing to add! This is
	    // suboptimal for performance. `def.hostBindings` may be null,
	    // but we still need to push null to the array as a placeholder
	    // to ensure the directive counter is incremented (so host
	    // binding functions always line up with the corrective directive).
	    // This is suboptimal for performance. See `currentDirectiveIndex`
	    //  comment in `setHostBindingsByExecutingExpandoInstructions` for more
	    // details.  expando.push(def.hostBindings);
	    expando.push(def.hostBindings);
	    var hostVars = def.hostVars;
	    if (hostVars !== 0) {
	        expando.push(def.hostVars);
	    }
	}
	/**
	 * Grow the `LView`, blueprint and `TView.data` to accommodate the `hostBindings`.
	 *
	 * To support locality we don't know ahead of time how many `hostVars` of the containing directives
	 * we need to allocate. For this reason we allow growing these data structures as we discover more
	 * directives to accommodate them.
	 *
	 * @param tView `TView` which needs to be grown.
	 * @param lView `LView` which needs to be grown.
	 * @param count Size by which we need to grow the data structures.
	 */
	function growHostVarsSpace(tView, lView, count) {
	    ngDevMode && assertFirstCreatePass(tView);
	    ngDevMode && assertSame(tView, lView[TVIEW], '`LView` must be associated with `TView`!');
	    for (var i = 0; i < count; i++) {
	        lView.push(NO_CHANGE);
	        tView.blueprint.push(NO_CHANGE);
	        tView.data.push(null);
	    }
	}
	/**
	 * Invoke the host bindings in creation mode.
	 *
	 * @param def `DirectiveDef` which may contain the `hostBindings` function.
	 * @param directive Instance of directive.
	 */
	function invokeHostBindingsInCreationMode(def, directive) {
	    if (def.hostBindings !== null) {
	        def.hostBindings(1 /* Create */, directive);
	    }
	}
	/**
	 * Generates a new block in TView.expandoInstructions for this node.
	 *
	 * Each expando block starts with the element index (turned negative so we can distinguish
	 * it from the hostVar count) and the directive count. See more in VIEW_DATA.md.
	 */
	function generateExpandoInstructionBlock(tView, tNode, directiveCount) {
	    ngDevMode &&
	        assertEqual(tView.firstCreatePass, true, 'Expando block should only be generated on first create pass.');
	    // Important: In JS `-x` and `0-x` is not the same! If `x===0` then `-x` will produce `-0` which
	    // requires non standard math arithmetic and it can prevent VM optimizations.
	    // `0-0` will always produce `0` and will not cause a potential deoptimization in VM.
	    var elementIndex = HEADER_OFFSET - tNode.index;
	    var providerStartIndex = tNode.providerIndexes & 65535 /* ProvidersStartIndexMask */;
	    var providerCount = tView.data.length - providerStartIndex;
	    (tView.expandoInstructions || (tView.expandoInstructions = []))
	        .push(elementIndex, providerCount, directiveCount);
	}
	/**
	 * Marks a given TNode as a component's host. This consists of:
	 * - setting appropriate TNode flags;
	 * - storing index of component's host element so it will be queued for view refresh during CD.
	 */
	function markAsComponentHost(tView, hostTNode) {
	    ngDevMode && assertFirstCreatePass(tView);
	    hostTNode.flags |= 2 /* isComponentHost */;
	    (tView.components || (tView.components = ngDevMode ? new TViewComponents() : []))
	        .push(hostTNode.index);
	}
	/**
	 * Initializes the flags on the current node, setting all indices to the initial index,
	 * the directive count to 0, and adding the isComponent flag.
	 * @param index the initial index
	 */
	function initTNodeFlags(tNode, index, numberOfDirectives) {
	    ngDevMode &&
	        assertNotEqual(numberOfDirectives, tNode.directiveEnd - tNode.directiveStart, 'Reached the max number of directives');
	    tNode.flags |= 1 /* isDirectiveHost */;
	    // When the first directive is created on a node, save the index
	    tNode.directiveStart = index;
	    tNode.directiveEnd = index + numberOfDirectives;
	    tNode.providerIndexes = index;
	}
	function baseResolveDirective(tView, viewData, def) {
	    tView.data.push(def);
	    var directiveFactory = def.factory || (def.factory = getFactoryDef(def.type, true));
	    var nodeInjectorFactory = new NodeInjectorFactory(directiveFactory, isComponentDef(def), null);
	    tView.blueprint.push(nodeInjectorFactory);
	    viewData.push(nodeInjectorFactory);
	}
	//////////////////////////
	//// ViewContainer & View
	//////////////////////////
	// Not sure why I need to do `any` here but TS complains later.
	var LContainerArray = ((typeof ngDevMode === 'undefined' || ngDevMode) && initNgDevMode()) &&
	    createNamedArrayType('LContainer');
	/**
	 * Goes over dynamic embedded views (ones created through ViewContainerRef APIs) and refreshes
	 * them by executing an associated template function.
	 */
	function refreshDynamicEmbeddedViews(lView) {
	    for (var lContainer = getFirstLContainer(lView); lContainer !== null; lContainer = getNextLContainer(lContainer)) {
	        for (var i = CONTAINER_HEADER_OFFSET; i < lContainer.length; i++) {
	            var embeddedLView = lContainer[i];
	            var embeddedTView = embeddedLView[TVIEW];
	            ngDevMode && assertDefined(embeddedTView, 'TView must be allocated');
	            if (viewAttachedToChangeDetector(embeddedLView)) {
	                refreshView(embeddedTView, embeddedLView, embeddedTView.template, embeddedLView[CONTEXT]);
	            }
	        }
	    }
	}
	/**
	 * Gets the first `LContainer` in the LView or `null` if none exists.
	 */
	function getFirstLContainer(lView) {
	    var viewOrContainer = lView[CHILD_HEAD];
	    while (viewOrContainer !== null &&
	        !(isLContainer(viewOrContainer) &&
	            viewOrContainer[ACTIVE_INDEX] >> 1 /* SHIFT */ ===
	                -1 /* DYNAMIC_EMBEDDED_VIEWS_ONLY */)) {
	        viewOrContainer = viewOrContainer[NEXT];
	    }
	    return viewOrContainer;
	}
	/**
	 * Gets the next `LContainer` that is a sibling of the given container.
	 */
	function getNextLContainer(container) {
	    var viewOrContainer = container[NEXT];
	    while (viewOrContainer !== null &&
	        !(isLContainer(viewOrContainer) &&
	            viewOrContainer[ACTIVE_INDEX] >> 1 /* SHIFT */ ===
	                -1 /* DYNAMIC_EMBEDDED_VIEWS_ONLY */)) {
	        viewOrContainer = viewOrContainer[NEXT];
	    }
	    return viewOrContainer;
	}
	/**
	 * Mark transplanted views as needing to be refreshed at their insertion points.
	 *
	 * See: `ActiveIndexFlag.HAS_TRANSPLANTED_VIEWS` and `LView[DECLARATION_COMPONENT_VIEW]` for
	 * explanation of transplanted views.
	 *
	 * @param lView The `LView` that may have transplanted views.
	 */
	function markTransplantedViewsForRefresh(lView) {
	    for (var lContainer = getFirstLContainer(lView); lContainer !== null; lContainer = getNextLContainer(lContainer)) {
	        if ((lContainer[ACTIVE_INDEX] & 1 /* HAS_TRANSPLANTED_VIEWS */) !== 0) {
	            var movedViews = lContainer[MOVED_VIEWS];
	            ngDevMode && assertDefined(movedViews, 'Transplanted View flags set but missing MOVED_VIEWS');
	            for (var i = 0; i < movedViews.length; i++) {
	                var movedLView = movedViews[i];
	                var insertionLContainer = movedLView[PARENT];
	                ngDevMode && assertLContainer(insertionLContainer);
	                // We don't want to increment the counter if the moved LView was already marked for
	                // refresh.
	                if ((movedLView[FLAGS] & 1024 /* RefreshTransplantedView */) === 0) {
	                    updateTransplantedViewCount(insertionLContainer, 1);
	                }
	                // Note, it is possible that the `movedViews` is tracking views that are transplanted *and*
	                // those that aren't (declaration component === insertion component). In the latter case,
	                // it's fine to add the flag, as we will clear it immediately in
	                // `refreshDynamicEmbeddedViews` for the view currently being refreshed.
	                movedLView[FLAGS] |= 1024 /* RefreshTransplantedView */;
	            }
	        }
	    }
	}
	/////////////
	/**
	 * Refreshes components by entering the component view and processing its bindings, queries, etc.
	 *
	 * @param componentHostIdx  Element index in LView[] (adjusted for HEADER_OFFSET)
	 */
	function refreshComponent(hostLView, componentHostIdx) {
	    ngDevMode && assertEqual(isCreationMode(hostLView), false, 'Should be run in update mode');
	    var componentView = getComponentLViewByIndex(componentHostIdx, hostLView);
	    // Only attached components that are CheckAlways or OnPush and dirty should be refreshed
	    if (viewAttachedToChangeDetector(componentView)) {
	        var tView = componentView[TVIEW];
	        if (componentView[FLAGS] & (16 /* CheckAlways */ | 64 /* Dirty */)) {
	            refreshView(tView, componentView, tView.template, componentView[CONTEXT]);
	        }
	        else if (componentView[TRANSPLANTED_VIEWS_TO_REFRESH] > 0) {
	            // Only attached components that are CheckAlways or OnPush and dirty should be refreshed
	            refreshContainsDirtyView(componentView);
	        }
	    }
	}
	/**
	 * Refreshes all transplanted views marked with `LViewFlags.RefreshTransplantedView` that are
	 * children or descendants of the given lView.
	 *
	 * @param lView The lView which contains descendant transplanted views that need to be refreshed.
	 */
	function refreshContainsDirtyView(lView) {
	    for (var lContainer = getFirstLContainer(lView); lContainer !== null; lContainer = getNextLContainer(lContainer)) {
	        for (var i = CONTAINER_HEADER_OFFSET; i < lContainer.length; i++) {
	            var embeddedLView = lContainer[i];
	            if (embeddedLView[FLAGS] & 1024 /* RefreshTransplantedView */) {
	                var embeddedTView = embeddedLView[TVIEW];
	                ngDevMode && assertDefined(embeddedTView, 'TView must be allocated');
	                refreshView(embeddedTView, embeddedLView, embeddedTView.template, embeddedLView[CONTEXT]);
	            }
	            else if (embeddedLView[TRANSPLANTED_VIEWS_TO_REFRESH] > 0) {
	                refreshContainsDirtyView(embeddedLView);
	            }
	        }
	    }
	    var tView = lView[TVIEW];
	    // Refresh child component views.
	    var components = tView.components;
	    if (components !== null) {
	        for (var i = 0; i < components.length; i++) {
	            var componentView = getComponentLViewByIndex(components[i], lView);
	            // Only attached components that are CheckAlways or OnPush and dirty should be refreshed
	            if (viewAttachedToChangeDetector(componentView) &&
	                componentView[TRANSPLANTED_VIEWS_TO_REFRESH] > 0) {
	                refreshContainsDirtyView(componentView);
	            }
	        }
	    }
	}
	function renderComponent(hostLView, componentHostIdx) {
	    ngDevMode && assertEqual(isCreationMode(hostLView), true, 'Should be run in creation mode');
	    var componentView = getComponentLViewByIndex(componentHostIdx, hostLView);
	    var componentTView = componentView[TVIEW];
	    syncViewWithBlueprint(componentTView, componentView);
	    renderView(componentTView, componentView, componentView[CONTEXT]);
	}
	/**
	 * Syncs an LView instance with its blueprint if they have gotten out of sync.
	 *
	 * Typically, blueprints and their view instances should always be in sync, so the loop here
	 * will be skipped. However, consider this case of two components side-by-side:
	 *
	 * App template:
	 * ```
	 * <comp></comp>
	 * <comp></comp>
	 * ```
	 *
	 * The following will happen:
	 * 1. App template begins processing.
	 * 2. First <comp> is matched as a component and its LView is created.
	 * 3. Second <comp> is matched as a component and its LView is created.
	 * 4. App template completes processing, so it's time to check child templates.
	 * 5. First <comp> template is checked. It has a directive, so its def is pushed to blueprint.
	 * 6. Second <comp> template is checked. Its blueprint has been updated by the first
	 * <comp> template, but its LView was created before this update, so it is out of sync.
	 *
	 * Note that embedded views inside ngFor loops will never be out of sync because these views
	 * are processed as soon as they are created.
	 *
	 * @param tView The `TView` that contains the blueprint for syncing
	 * @param lView The view to sync
	 */
	function syncViewWithBlueprint(tView, lView) {
	    for (var i = lView.length; i < tView.blueprint.length; i++) {
	        lView.push(tView.blueprint[i]);
	    }
	}
	/**
	 * Adds LView or LContainer to the end of the current view tree.
	 *
	 * This structure will be used to traverse through nested views to remove listeners
	 * and call onDestroy callbacks.
	 *
	 * @param lView The view where LView or LContainer should be added
	 * @param adjustedHostIndex Index of the view's host node in LView[], adjusted for header
	 * @param lViewOrLContainer The LView or LContainer to add to the view tree
	 * @returns The state passed in
	 */
	function addToViewTree(lView, lViewOrLContainer) {
	    // TODO(benlesh/misko): This implementation is incorrect, because it always adds the LContainer
	    // to the end of the queue, which means if the developer retrieves the LContainers from RNodes out
	    // of order, the change detection will run out of order, as the act of retrieving the the
	    // LContainer from the RNode is what adds it to the queue.
	    if (lView[CHILD_HEAD]) {
	        lView[CHILD_TAIL][NEXT] = lViewOrLContainer;
	    }
	    else {
	        lView[CHILD_HEAD] = lViewOrLContainer;
	    }
	    lView[CHILD_TAIL] = lViewOrLContainer;
	    return lViewOrLContainer;
	}
	///////////////////////////////
	//// Change detection
	///////////////////////////////
	/**
	 * Marks current view and all ancestors dirty.
	 *
	 * Returns the root view because it is found as a byproduct of marking the view tree
	 * dirty, and can be used by methods that consume markViewDirty() to easily schedule
	 * change detection. Otherwise, such methods would need to traverse up the view tree
	 * an additional time to get the root view and schedule a tick on it.
	 *
	 * @param lView The starting LView to mark dirty
	 * @returns the root LView
	 */
	function markViewDirty(lView) {
	    while (lView) {
	        lView[FLAGS] |= 64 /* Dirty */;
	        var parent_1 = getLViewParent(lView);
	        // Stop traversing up as soon as you find a root view that wasn't attached to any container
	        if (isRootView(lView) && !parent_1) {
	            return lView;
	        }
	        // continue otherwise
	        lView = parent_1;
	    }
	    return null;
	}
	function tickRootContext(rootContext) {
	    for (var i = 0; i < rootContext.components.length; i++) {
	        var rootComponent = rootContext.components[i];
	        var lView = readPatchedLView(rootComponent);
	        var tView = lView[TVIEW];
	        renderComponentOrTemplate(tView, lView, tView.template, rootComponent);
	    }
	}
	function detectChangesInternal(tView, lView, context) {
	    var rendererFactory = lView[RENDERER_FACTORY];
	    if (rendererFactory.begin)
	        rendererFactory.begin();
	    try {
	        refreshView(tView, lView, tView.template, context);
	    }
	    catch (error) {
	        handleError(lView, error);
	        throw error;
	    }
	    finally {
	        if (rendererFactory.end)
	            rendererFactory.end();
	    }
	}
	/**
	 * Synchronously perform change detection on a root view and its components.
	 *
	 * @param lView The view which the change detection should be performed on.
	 */
	function detectChangesInRootView(lView) {
	    tickRootContext(lView[CONTEXT]);
	}
	function checkNoChangesInternal(tView, view, context) {
	    setCheckNoChangesMode(true);
	    try {
	        detectChangesInternal(tView, view, context);
	    }
	    finally {
	        setCheckNoChangesMode(false);
	    }
	}
	/**
	 * Checks the change detector on a root view and its components, and throws if any changes are
	 * detected.
	 *
	 * This is used in development mode to verify that running change detection doesn't
	 * introduce other changes.
	 *
	 * @param lView The view which the change detection should be checked on.
	 */
	function checkNoChangesInRootView(lView) {
	    setCheckNoChangesMode(true);
	    try {
	        detectChangesInRootView(lView);
	    }
	    finally {
	        setCheckNoChangesMode(false);
	    }
	}
	function executeViewQueryFn(flags, viewQueryFn, component) {
	    ngDevMode && assertDefined(viewQueryFn, 'View queries function to execute must be defined.');
	    setCurrentQueryIndex(0);
	    viewQueryFn(flags, component);
	}
	var CLEAN_PROMISE = _CLEAN_PROMISE;
	function getLCleanup(view) {
	    // top level variables should not be exported for performance reasons (PERF_NOTES.md)
	    return view[CLEANUP] || (view[CLEANUP] = ngDevMode ? new LCleanup() : []);
	}
	function getTViewCleanup(tView) {
	    return tView.cleanup || (tView.cleanup = ngDevMode ? new TCleanup() : []);
	}
	/** Handles an error thrown in an LView. */
	function handleError(lView, error) {
	    var injector = lView[INJECTOR$1];
	    var errorHandler = injector ? injector.get(ErrorHandler, null) : null;
	    errorHandler && errorHandler.handleError(error);
	}
	function getLContainer(tNode, embeddedView) {
	    ngDevMode && assertLView(embeddedView);
	    var container = embeddedView[PARENT];
	    if (tNode.index === -1) {
	        // This is a dynamically created view inside a dynamic container.
	        // The parent isn't an LContainer if the embedded view hasn't been attached yet.
	        return isLContainer(container) ? container : null;
	    }
	    else {
	        ngDevMode && assertLContainer(container);
	        // This is a inline view node (e.g. embeddedViewStart)
	        return container;
	    }
	}
	/**
	 * NOTE: for performance reasons, the possible actions are inlined within the function instead of
	 * being passed as an argument.
	 */
	function applyToElementOrContainer(action, renderer, parent, lNodeToHandle, beforeNode) {
	    // If this slot was allocated for a text node dynamically created by i18n, the text node itself
	    // won't be created until i18nApply() in the update block, so this node should be skipped.
	    // For more info, see "ICU expressions should work inside an ngTemplateOutlet inside an ngFor"
	    // in `i18n_spec.ts`.
	    if (lNodeToHandle != null) {
	        var lContainer = void 0;
	        var isComponent = false;
	        // We are expecting an RNode, but in the case of a component or LContainer the `RNode` is
	        // wrapped in an array which needs to be unwrapped. We need to know if it is a component and if
	        // it has LContainer so that we can process all of those cases appropriately.
	        if (isLContainer(lNodeToHandle)) {
	            lContainer = lNodeToHandle;
	        }
	        else if (isLView(lNodeToHandle)) {
	            isComponent = true;
	            ngDevMode && assertDefined(lNodeToHandle[HOST], 'HOST must be defined for a component LView');
	            lNodeToHandle = lNodeToHandle[HOST];
	        }
	        var rNode = unwrapRNode(lNodeToHandle);
	        ngDevMode && !isProceduralRenderer(renderer) && assertDomNode(rNode);
	        if (action === 0 /* Create */ && parent !== null) {
	            if (beforeNode == null) {
	                nativeAppendChild(renderer, parent, rNode);
	            }
	            else {
	                nativeInsertBefore(renderer, parent, rNode, beforeNode || null);
	            }
	        }
	        else if (action === 1 /* Insert */ && parent !== null) {
	            nativeInsertBefore(renderer, parent, rNode, beforeNode || null);
	        }
	        else if (action === 2 /* Detach */) {
	            nativeRemoveNode(renderer, rNode, isComponent);
	        }
	        else if (action === 3 /* Destroy */) {
	            ngDevMode && ngDevMode.rendererDestroyNode++;
	            renderer.destroyNode(rNode);
	        }
	        if (lContainer != null) {
	            applyContainer(renderer, action, lContainer, parent, beforeNode);
	        }
	    }
	}
	/**
	 * Detach a `LView` from the DOM by detaching its nodes.
	 *
	 * @param tView The `TView' of the `LView` to be detached
	 * @param lView the `LView` to be detached.
	 */
	function renderDetachView(tView, lView) {
	    applyView(tView, lView, lView[RENDERER], 2 /* Detach */, null, null);
	}
	/**
	 * Traverses down and up the tree of views and containers to remove listeners and
	 * call onDestroy callbacks.
	 *
	 * Notes:
	 *  - Because it's used for onDestroy calls, it needs to be bottom-up.
	 *  - Must process containers instead of their views to avoid splicing
	 *  when views are destroyed and re-added.
	 *  - Using a while loop because it's faster than recursion
	 *  - Destroy only called on movement to sibling or movement to parent (laterally or up)
	 *
	 *  @param rootView The view to destroy
	 */
	function destroyViewTree(rootView) {
	    // If the view has no children, we can clean it up and return early.
	    var lViewOrLContainer = rootView[CHILD_HEAD];
	    if (!lViewOrLContainer) {
	        return cleanUpView(rootView[TVIEW], rootView);
	    }
	    while (lViewOrLContainer) {
	        var next = null;
	        if (isLView(lViewOrLContainer)) {
	            // If LView, traverse down to child.
	            next = lViewOrLContainer[CHILD_HEAD];
	        }
	        else {
	            ngDevMode && assertLContainer(lViewOrLContainer);
	            // If container, traverse down to its first LView.
	            var firstView = lViewOrLContainer[CONTAINER_HEADER_OFFSET];
	            if (firstView)
	                next = firstView;
	        }
	        if (!next) {
	            // Only clean up view when moving to the side or up, as destroy hooks
	            // should be called in order from the bottom up.
	            while (lViewOrLContainer && !lViewOrLContainer[NEXT] && lViewOrLContainer !== rootView) {
	                isLView(lViewOrLContainer) && cleanUpView(lViewOrLContainer[TVIEW], lViewOrLContainer);
	                lViewOrLContainer = getParentState(lViewOrLContainer, rootView);
	            }
	            if (lViewOrLContainer === null)
	                lViewOrLContainer = rootView;
	            isLView(lViewOrLContainer) && cleanUpView(lViewOrLContainer[TVIEW], lViewOrLContainer);
	            next = lViewOrLContainer && lViewOrLContainer[NEXT];
	        }
	        lViewOrLContainer = next;
	    }
	}
	function detachMovedView(declarationContainer, lView) {
	    ngDevMode && assertLContainer(declarationContainer);
	    ngDevMode &&
	        assertDefined(declarationContainer[MOVED_VIEWS], 'A projected view should belong to a non-empty projected views collection');
	    var movedViews = declarationContainer[MOVED_VIEWS];
	    var declarationViewIndex = movedViews.indexOf(lView);
	    var insertionLContainer = lView[PARENT];
	    ngDevMode && assertLContainer(insertionLContainer);
	    // If the view was marked for refresh but then detached before it was checked (where the flag
	    // would be cleared and the counter decremented), we need to decrement the view counter here
	    // instead.
	    if (lView[FLAGS] & 1024 /* RefreshTransplantedView */) {
	        updateTransplantedViewCount(insertionLContainer, -1);
	    }
	    movedViews.splice(declarationViewIndex, 1);
	}
	/**
	 * A standalone function which destroys an LView,
	 * conducting clean up (e.g. removing listeners, calling onDestroys).
	 *
	 * @param tView The `TView' of the `LView` to be destroyed
	 * @param lView The view to be destroyed.
	 */
	function destroyLView(tView, lView) {
	    if (!(lView[FLAGS] & 256 /* Destroyed */)) {
	        var renderer = lView[RENDERER];
	        if (isProceduralRenderer(renderer) && renderer.destroyNode) {
	            applyView(tView, lView, renderer, 3 /* Destroy */, null, null);
	        }
	        destroyViewTree(lView);
	    }
	}
	/**
	 * Determines which LViewOrLContainer to jump to when traversing back up the
	 * tree in destroyViewTree.
	 *
	 * Normally, the view's parent LView should be checked, but in the case of
	 * embedded views, the container (which is the view node's parent, but not the
	 * LView's parent) needs to be checked for a possible next property.
	 *
	 * @param lViewOrLContainer The LViewOrLContainer for which we need a parent state
	 * @param rootView The rootView, so we don't propagate too far up the view tree
	 * @returns The correct parent LViewOrLContainer
	 */
	function getParentState(lViewOrLContainer, rootView) {
	    var tNode;
	    if (isLView(lViewOrLContainer) && (tNode = lViewOrLContainer[T_HOST]) &&
	        tNode.type === 2 /* View */) {
	        // if it's an embedded view, the state needs to go up to the container, in case the
	        // container has a next
	        return getLContainer(tNode, lViewOrLContainer);
	    }
	    else {
	        // otherwise, use parent view for containers or component views
	        return lViewOrLContainer[PARENT] === rootView ? null : lViewOrLContainer[PARENT];
	    }
	}
	/**
	 * Calls onDestroys hooks for all directives and pipes in a given view and then removes all
	 * listeners. Listeners are removed as the last step so events delivered in the onDestroys hooks
	 * can be propagated to @Output listeners.
	 *
	 * @param tView `TView` for the `LView` to clean up.
	 * @param lView The LView to clean up
	 */
	function cleanUpView(tView, lView) {
	    if (!(lView[FLAGS] & 256 /* Destroyed */)) {
	        // Usually the Attached flag is removed when the view is detached from its parent, however
	        // if it's a root view, the flag won't be unset hence why we're also removing on destroy.
	        lView[FLAGS] &= ~128 /* Attached */;
	        // Mark the LView as destroyed *before* executing the onDestroy hooks. An onDestroy hook
	        // runs arbitrary user code, which could include its own `viewRef.destroy()` (or similar). If
	        // We don't flag the view as destroyed before the hooks, this could lead to an infinite loop.
	        // This also aligns with the ViewEngine behavior. It also means that the onDestroy hook is
	        // really more of an "afterDestroy" hook if you think about it.
	        lView[FLAGS] |= 256 /* Destroyed */;
	        executeOnDestroys(tView, lView);
	        removeListeners(tView, lView);
	        var hostTNode = lView[T_HOST];
	        // For component views only, the local renderer is destroyed as clean up time.
	        if (hostTNode && hostTNode.type === 3 /* Element */ &&
	            isProceduralRenderer(lView[RENDERER])) {
	            ngDevMode && ngDevMode.rendererDestroy++;
	            lView[RENDERER].destroy();
	        }
	        var declarationContainer = lView[DECLARATION_LCONTAINER];
	        // we are dealing with an embedded view that is still inserted into a container
	        if (declarationContainer !== null && isLContainer(lView[PARENT])) {
	            // and this is a projected view
	            if (declarationContainer !== lView[PARENT]) {
	                detachMovedView(declarationContainer, lView);
	            }
	            // For embedded views still attached to a container: remove query result from this view.
	            var lQueries = lView[QUERIES];
	            if (lQueries !== null) {
	                lQueries.detachView(tView);
	            }
	        }
	    }
	}
	/** Removes listeners and unsubscribes from output subscriptions */
	function removeListeners(tView, lView) {
	    var tCleanup = tView.cleanup;
	    if (tCleanup !== null) {
	        var lCleanup = lView[CLEANUP];
	        for (var i = 0; i < tCleanup.length - 1; i += 2) {
	            if (typeof tCleanup[i] === 'string') {
	                // This is a native DOM listener
	                var idxOrTargetGetter = tCleanup[i + 1];
	                var target = typeof idxOrTargetGetter === 'function' ?
	                    idxOrTargetGetter(lView) :
	                    unwrapRNode(lView[idxOrTargetGetter]);
	                var listener = lCleanup[tCleanup[i + 2]];
	                var useCaptureOrSubIdx = tCleanup[i + 3];
	                if (typeof useCaptureOrSubIdx === 'boolean') {
	                    // native DOM listener registered with Renderer3
	                    target.removeEventListener(tCleanup[i], listener, useCaptureOrSubIdx);
	                }
	                else {
	                    if (useCaptureOrSubIdx >= 0) {
	                        // unregister
	                        lCleanup[useCaptureOrSubIdx]();
	                    }
	                    else {
	                        // Subscription
	                        lCleanup[-useCaptureOrSubIdx].unsubscribe();
	                    }
	                }
	                i += 2;
	            }
	            else {
	                // This is a cleanup function that is grouped with the index of its context
	                var context = lCleanup[tCleanup[i + 1]];
	                tCleanup[i].call(context);
	            }
	        }
	        lView[CLEANUP] = null;
	    }
	}
	/** Calls onDestroy hooks for this view */
	function executeOnDestroys(tView, lView) {
	    var destroyHooks;
	    if (tView != null && (destroyHooks = tView.destroyHooks) != null) {
	        for (var i = 0; i < destroyHooks.length; i += 2) {
	            var context = lView[destroyHooks[i]];
	            // Only call the destroy hook if the context has been requested.
	            if (!(context instanceof NodeInjectorFactory)) {
	                var toCall = destroyHooks[i + 1];
	                if (Array.isArray(toCall)) {
	                    for (var j = 0; j < toCall.length; j += 2) {
	                        toCall[j + 1].call(context[toCall[j]]);
	                    }
	                }
	                else {
	                    toCall.call(context);
	                }
	            }
	        }
	    }
	}
	/**
	 * Inserts a native node before another native node for a given parent using {@link Renderer3}.
	 * This is a utility function that can be used when native nodes were determined - it abstracts an
	 * actual renderer being used.
	 */
	function nativeInsertBefore(renderer, parent, child, beforeNode) {
	    ngDevMode && ngDevMode.rendererInsertBefore++;
	    if (isProceduralRenderer(renderer)) {
	        renderer.insertBefore(parent, child, beforeNode);
	    }
	    else {
	        parent.insertBefore(child, beforeNode, true);
	    }
	}
	function nativeAppendChild(renderer, parent, child) {
	    ngDevMode && ngDevMode.rendererAppendChild++;
	    ngDevMode && assertDefined(parent, 'parent node must be defined');
	    if (isProceduralRenderer(renderer)) {
	        renderer.appendChild(parent, child);
	    }
	    else {
	        parent.appendChild(child);
	    }
	}
	/** Removes a node from the DOM given its native parent. */
	function nativeRemoveChild(renderer, parent, child, isHostElement) {
	    if (isProceduralRenderer(renderer)) {
	        renderer.removeChild(parent, child, isHostElement);
	    }
	    else {
	        parent.removeChild(child);
	    }
	}
	/**
	 * Returns a native parent of a given native node.
	 */
	function nativeParentNode(renderer, node) {
	    return (isProceduralRenderer(renderer) ? renderer.parentNode(node) : node.parentNode);
	}
	/**
	 * Removes a native node itself using a given renderer. To remove the node we are looking up its
	 * parent from the native tree as not all platforms / browsers support the equivalent of
	 * node.remove().
	 *
	 * @param renderer A renderer to be used
	 * @param rNode The native node that should be removed
	 * @param isHostElement A flag indicating if a node to be removed is a host of a component.
	 */
	function nativeRemoveNode(renderer, rNode, isHostElement) {
	    var nativeParent = nativeParentNode(renderer, rNode);
	    if (nativeParent) {
	        nativeRemoveChild(renderer, nativeParent, rNode, isHostElement);
	    }
	}
	/**
	 * Performs the operation of `action` on the node. Typically this involves inserting or removing
	 * nodes on the LView or projection boundary.
	 */
	function applyNodes(renderer, action, tNode, lView, renderParent, beforeNode, isProjection) {
	    while (tNode != null) {
	        ngDevMode && assertTNodeForLView(tNode, lView);
	        ngDevMode &&
	            assertNodeOfPossibleTypes(tNode, 0 /* Container */, 3 /* Element */, 4 /* ElementContainer */, 1 /* Projection */, 1 /* Projection */, 5 /* IcuContainer */);
	        var rawSlotValue = lView[tNode.index];
	        var tNodeType = tNode.type;
	        if (isProjection) {
	            if (action === 0 /* Create */) {
	                rawSlotValue && attachPatchData(unwrapRNode(rawSlotValue), lView);
	                tNode.flags |= 4 /* isProjected */;
	            }
	        }
	        if ((tNode.flags & 64 /* isDetached */) !== 64 /* isDetached */) {
	            if (tNodeType === 4 /* ElementContainer */ || tNodeType === 5 /* IcuContainer */) {
	                applyNodes(renderer, action, tNode.child, lView, renderParent, beforeNode, false);
	                applyToElementOrContainer(action, renderer, renderParent, rawSlotValue, beforeNode);
	            }
	            else if (tNodeType === 1 /* Projection */) {
	                applyProjectionRecursive(renderer, action, lView, tNode, renderParent, beforeNode);
	            }
	            else {
	                ngDevMode && assertNodeOfPossibleTypes(tNode, 3 /* Element */, 0 /* Container */);
	                applyToElementOrContainer(action, renderer, renderParent, rawSlotValue, beforeNode);
	            }
	        }
	        tNode = isProjection ? tNode.projectionNext : tNode.next;
	    }
	}
	/**
	 * `applyView` performs operation on the view as specified in `action` (insert, detach, destroy)
	 *
	 * Inserting a view without projection or containers at top level is simple. Just iterate over the
	 * root nodes of the View, and for each node perform the `action`.
	 *
	 * Things get more complicated with containers and projections. That is because coming across:
	 * - Container: implies that we have to insert/remove/destroy the views of that container as well
	 *              which in turn can have their own Containers at the View roots.
	 * - Projection: implies that we have to insert/remove/destroy the nodes of the projection. The
	 *               complication is that the nodes we are projecting can themselves have Containers
	 *               or other Projections.
	 *
	 * As you can see this is a very recursive problem. Yes recursion is not most efficient but the
	 * code is complicated enough that trying to implemented with recursion becomes unmaintainable.
	 *
	 * @param tView The `TView' which needs to be inserted, detached, destroyed
	 * @param lView The LView which needs to be inserted, detached, destroyed.
	 * @param renderer Renderer to use
	 * @param action action to perform (insert, detach, destroy)
	 * @param renderParent parent DOM element for insertion/removal.
	 * @param beforeNode Before which node the insertions should happen.
	 */
	function applyView(tView, lView, renderer, action, renderParent, beforeNode) {
	    ngDevMode && assertNodeType(tView.node, 2 /* View */);
	    var viewRootTNode = tView.node.child;
	    applyNodes(renderer, action, viewRootTNode, lView, renderParent, beforeNode, false);
	}
	/**
	 * `applyProjectionRecursive` performs operation on the projection specified by `action` (insert,
	 * detach, destroy)
	 *
	 * Inserting a projection requires us to locate the projected nodes from the parent component. The
	 * complication is that those nodes themselves could be re-projected from their parent component.
	 *
	 * @param renderer Render to use
	 * @param action action to perform (insert, detach, destroy)
	 * @param lView The LView which needs to be inserted, detached, destroyed.
	 * @param tProjectionNode node to project
	 * @param renderParent parent DOM element for insertion/removal.
	 * @param beforeNode Before which node the insertions should happen.
	 */
	function applyProjectionRecursive(renderer, action, lView, tProjectionNode, renderParent, beforeNode) {
	    var componentLView = lView[DECLARATION_COMPONENT_VIEW];
	    var componentNode = componentLView[T_HOST];
	    ngDevMode &&
	        assertEqual(typeof tProjectionNode.projection, 'number', 'expecting projection index');
	    var nodeToProjectOrRNodes = componentNode.projection[tProjectionNode.projection];
	    if (Array.isArray(nodeToProjectOrRNodes)) {
	        // This should not exist, it is a bit of a hack. When we bootstrap a top level node and we
	        // need to support passing projectable nodes, so we cheat and put them in the TNode
	        // of the Host TView. (Yes we put instance info at the T Level). We can get away with it
	        // because we know that that TView is not shared and therefore it will not be a problem.
	        // This should be refactored and cleaned up.
	        for (var i = 0; i < nodeToProjectOrRNodes.length; i++) {
	            var rNode = nodeToProjectOrRNodes[i];
	            applyToElementOrContainer(action, renderer, renderParent, rNode, beforeNode);
	        }
	    }
	    else {
	        var nodeToProject = nodeToProjectOrRNodes;
	        var projectedComponentLView = componentLView[PARENT];
	        applyNodes(renderer, action, nodeToProject, projectedComponentLView, renderParent, beforeNode, true);
	    }
	}
	/**
	 * `applyContainer` performs an operation on the container and its views as specified by
	 * `action` (insert, detach, destroy)
	 *
	 * Inserting a Container is complicated by the fact that the container may have Views which
	 * themselves have containers or projections.
	 *
	 * @param renderer Renderer to use
	 * @param action action to perform (insert, detach, destroy)
	 * @param lContainer The LContainer which needs to be inserted, detached, destroyed.
	 * @param renderParent parent DOM element for insertion/removal.
	 * @param beforeNode Before which node the insertions should happen.
	 */
	function applyContainer(renderer, action, lContainer, renderParent, beforeNode) {
	    ngDevMode && assertLContainer(lContainer);
	    var anchor = lContainer[NATIVE$1]; // LContainer has its own before node.
	    var native = unwrapRNode(lContainer);
	    // An LContainer can be created dynamically on any node by injecting ViewContainerRef.
	    // Asking for a ViewContainerRef on an element will result in a creation of a separate anchor node
	    // (comment in the DOM) that will be different from the LContainer's host node. In this particular
	    // case we need to execute action on 2 nodes:
	    // - container's host node (this is done in the executeActionOnElementOrContainer)
	    // - container's host node (this is done here)
	    if (anchor !== native) {
	        // This is very strange to me (Misko). I would expect that the native is same as anchor. I don't
	        // see a reason why they should be different, but they are.
	        //
	        // If they are we need to process the second anchor as well.
	        applyToElementOrContainer(action, renderer, renderParent, anchor, beforeNode);
	    }
	    for (var i = CONTAINER_HEADER_OFFSET; i < lContainer.length; i++) {
	        var lView = lContainer[i];
	        applyView(lView[TVIEW], lView, renderer, action, renderParent, anchor);
	    }
	}
	/**
	 * Write `cssText` to `RElement`.
	 *
	 * This function does direct write without any reconciliation. Used for writing initial values, so
	 * that static styling values do not pull in the style parser.
	 *
	 * @param renderer Renderer to use
	 * @param element The element which needs to be updated.
	 * @param newValue The new class list to write.
	 */
	function writeDirectStyle(renderer, element, newValue) {
	    ngDevMode && assertString(newValue, '\'newValue\' should be a string');
	    if (isProceduralRenderer(renderer)) {
	        renderer.setAttribute(element, 'style', newValue);
	    }
	    else {
	        element.style.cssText = newValue;
	    }
	    ngDevMode && ngDevMode.rendererSetStyle++;
	}
	/**
	 * Write `className` to `RElement`.
	 *
	 * This function does direct write without any reconciliation. Used for writing initial values, so
	 * that static styling values do not pull in the style parser.
	 *
	 * @param renderer Renderer to use
	 * @param element The element which needs to be updated.
	 * @param newValue The new class list to write.
	 */
	function writeDirectClass(renderer, element, newValue) {
	    ngDevMode && assertString(newValue, '\'newValue\' should be a string');
	    if (isProceduralRenderer(renderer)) {
	        if (newValue === '') {
	            // There are tests in `google3` which expect `element.getAttribute('class')` to be `null`.
	            renderer.removeAttribute(element, 'class');
	        }
	        else {
	            renderer.setAttribute(element, 'class', newValue);
	        }
	    }
	    else {
	        element.className = newValue;
	    }
	    ngDevMode && ngDevMode.rendererSetClassName++;
	}

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	var ViewRef = /** @class */ (function () {
	    function ViewRef(
	    /**
	     * This represents `LView` associated with the component when ViewRef is a ChangeDetectorRef.
	     *
	     * When ViewRef is created for a dynamic component, this also represents the `LView` for the
	     * component.
	     *
	     * For a "regular" ViewRef created for an embedded view, this is the `LView` for the embedded
	     * view.
	     *
	     * @internal
	     */
	    _lView, 
	    /**
	     * This represents the `LView` associated with the point where `ChangeDetectorRef` was
	     * requested.
	     *
	     * This may be different from `_lView` if the `_cdRefInjectingView` is an embedded view.
	     */
	    _cdRefInjectingView) {
	        this._lView = _lView;
	        this._cdRefInjectingView = _cdRefInjectingView;
	        this._appRef = null;
	        this._viewContainerRef = null;
	        /**
	         * @internal
	         */
	        this._tViewNode = null;
	    }
	    Object.defineProperty(ViewRef.prototype, "rootNodes", {
	        get: function () {
	            var lView = this._lView;
	            if (lView[HOST] == null) {
	                var hostTView = lView[T_HOST];
	                return collectNativeNodes(lView[TVIEW], lView, hostTView.child, []);
	            }
	            return [];
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(ViewRef.prototype, "context", {
	        get: function () {
	            return this._lView[CONTEXT];
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(ViewRef.prototype, "destroyed", {
	        get: function () {
	            return (this._lView[FLAGS] & 256 /* Destroyed */) === 256 /* Destroyed */;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    ViewRef.prototype.destroy = function () {
	        if (this._appRef) {
	            this._appRef.detachView(this);
	        }
	        else if (this._viewContainerRef) {
	            var index = this._viewContainerRef.indexOf(this);
	            if (index > -1) {
	                this._viewContainerRef.detach(index);
	            }
	            this._viewContainerRef = null;
	        }
	        destroyLView(this._lView[TVIEW], this._lView);
	    };
	    ViewRef.prototype.onDestroy = function (callback) {
	        storeCleanupFn(this._lView[TVIEW], this._lView, callback);
	    };
	    /**
	     * Marks a view and all of its ancestors dirty.
	     *
	     * It also triggers change detection by calling `scheduleTick` internally, which coalesces
	     * multiple `markForCheck` calls to into one change detection run.
	     *
	     * This can be used to ensure an {@link ChangeDetectionStrategy#OnPush OnPush} component is
	     * checked when it needs to be re-rendered but the two normal triggers haven't marked it
	     * dirty (i.e. inputs haven't changed and events haven't fired in the view).
	     *
	     * <!-- TODO: Add a link to a chapter on OnPush components -->
	     *
	     * @usageNotes
	     * ### Example
	     *
	     * ```typescript
	     * @Component({
	     *   selector: 'my-app',
	     *   template: `Number of ticks: {{numberOfTicks}}`
	     *   changeDetection: ChangeDetectionStrategy.OnPush,
	     * })
	     * class AppComponent {
	     *   numberOfTicks = 0;
	     *
	     *   constructor(private ref: ChangeDetectorRef) {
	     *     setInterval(() => {
	     *       this.numberOfTicks++;
	     *       // the following is required, otherwise the view will not be updated
	     *       this.ref.markForCheck();
	     *     }, 1000);
	     *   }
	     * }
	     * ```
	     */
	    ViewRef.prototype.markForCheck = function () {
	        markViewDirty(this._cdRefInjectingView || this._lView);
	    };
	    /**
	     * Detaches the view from the change detection tree.
	     *
	     * Detached views will not be checked during change detection runs until they are
	     * re-attached, even if they are dirty. `detach` can be used in combination with
	     * {@link ChangeDetectorRef#detectChanges detectChanges} to implement local change
	     * detection checks.
	     *
	     * <!-- TODO: Add a link to a chapter on detach/reattach/local digest -->
	     * <!-- TODO: Add a live demo once ref.detectChanges is merged into master -->
	     *
	     * @usageNotes
	     * ### Example
	     *
	     * The following example defines a component with a large list of readonly data.
	     * Imagine the data changes constantly, many times per second. For performance reasons,
	     * we want to check and update the list every five seconds. We can do that by detaching
	     * the component's change detector and doing a local check every five seconds.
	     *
	     * ```typescript
	     * class DataProvider {
	     *   // in a real application the returned data will be different every time
	     *   get data() {
	     *     return [1,2,3,4,5];
	     *   }
	     * }
	     *
	     * @Component({
	     *   selector: 'giant-list',
	     *   template: `
	     *     <li *ngFor="let d of dataProvider.data">Data {{d}}</li>
	     *   `,
	     * })
	     * class GiantList {
	     *   constructor(private ref: ChangeDetectorRef, private dataProvider: DataProvider) {
	     *     ref.detach();
	     *     setInterval(() => {
	     *       this.ref.detectChanges();
	     *     }, 5000);
	     *   }
	     * }
	     *
	     * @Component({
	     *   selector: 'app',
	     *   providers: [DataProvider],
	     *   template: `
	     *     <giant-list><giant-list>
	     *   `,
	     * })
	     * class App {
	     * }
	     * ```
	     */
	    ViewRef.prototype.detach = function () {
	        this._lView[FLAGS] &= ~128 /* Attached */;
	    };
	    /**
	     * Re-attaches a view to the change detection tree.
	     *
	     * This can be used to re-attach views that were previously detached from the tree
	     * using {@link ChangeDetectorRef#detach detach}. Views are attached to the tree by default.
	     *
	     * <!-- TODO: Add a link to a chapter on detach/reattach/local digest -->
	     *
	     * @usageNotes
	     * ### Example
	     *
	     * The following example creates a component displaying `live` data. The component will detach
	     * its change detector from the main change detector tree when the component's live property
	     * is set to false.
	     *
	     * ```typescript
	     * class DataProvider {
	     *   data = 1;
	     *
	     *   constructor() {
	     *     setInterval(() => {
	     *       this.data = this.data * 2;
	     *     }, 500);
	     *   }
	     * }
	     *
	     * @Component({
	     *   selector: 'live-data',
	     *   inputs: ['live'],
	     *   template: 'Data: {{dataProvider.data}}'
	     * })
	     * class LiveData {
	     *   constructor(private ref: ChangeDetectorRef, private dataProvider: DataProvider) {}
	     *
	     *   set live(value) {
	     *     if (value) {
	     *       this.ref.reattach();
	     *     } else {
	     *       this.ref.detach();
	     *     }
	     *   }
	     * }
	     *
	     * @Component({
	     *   selector: 'my-app',
	     *   providers: [DataProvider],
	     *   template: `
	     *     Live Update: <input type="checkbox" [(ngModel)]="live">
	     *     <live-data [live]="live"><live-data>
	     *   `,
	     * })
	     * class AppComponent {
	     *   live = true;
	     * }
	     * ```
	     */
	    ViewRef.prototype.reattach = function () {
	        this._lView[FLAGS] |= 128 /* Attached */;
	    };
	    /**
	     * Checks the view and its children.
	     *
	     * This can also be used in combination with {@link ChangeDetectorRef#detach detach} to implement
	     * local change detection checks.
	     *
	     * <!-- TODO: Add a link to a chapter on detach/reattach/local digest -->
	     * <!-- TODO: Add a live demo once ref.detectChanges is merged into master -->
	     *
	     * @usageNotes
	     * ### Example
	     *
	     * The following example defines a component with a large list of readonly data.
	     * Imagine, the data changes constantly, many times per second. For performance reasons,
	     * we want to check and update the list every five seconds.
	     *
	     * We can do that by detaching the component's change detector and doing a local change detection
	     * check every five seconds.
	     *
	     * See {@link ChangeDetectorRef#detach detach} for more information.
	     */
	    ViewRef.prototype.detectChanges = function () {
	        detectChangesInternal(this._lView[TVIEW], this._lView, this.context);
	    };
	    /**
	     * Checks the change detector and its children, and throws if any changes are detected.
	     *
	     * This is used in development mode to verify that running change detection doesn't
	     * introduce other changes.
	     */
	    ViewRef.prototype.checkNoChanges = function () {
	        checkNoChangesInternal(this._lView[TVIEW], this._lView, this.context);
	    };
	    ViewRef.prototype.attachToViewContainerRef = function (vcRef) {
	        if (this._appRef) {
	            throw new Error('This view is already attached directly to the ApplicationRef!');
	        }
	        this._viewContainerRef = vcRef;
	    };
	    ViewRef.prototype.detachFromAppRef = function () {
	        this._appRef = null;
	        renderDetachView(this._lView[TVIEW], this._lView);
	    };
	    ViewRef.prototype.attachToAppRef = function (appRef) {
	        if (this._viewContainerRef) {
	            throw new Error('This view is already attached to a ViewContainer!');
	        }
	        this._appRef = appRef;
	    };
	    return ViewRef;
	}());
	/** @internal */
	var RootViewRef = /** @class */ (function (_super) {
	    __extends(RootViewRef, _super);
	    function RootViewRef(_view) {
	        var _this = _super.call(this, _view) || this;
	        _this._view = _view;
	        return _this;
	    }
	    RootViewRef.prototype.detectChanges = function () {
	        detectChangesInRootView(this._view);
	    };
	    RootViewRef.prototype.checkNoChanges = function () {
	        checkNoChangesInRootView(this._view);
	    };
	    Object.defineProperty(RootViewRef.prototype, "context", {
	        get: function () {
	            return null;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    return RootViewRef;
	}(ViewRef));
	function collectNativeNodes(tView, lView, tNode, result, isProjection) {
	    if (isProjection === void 0) { isProjection = false; }
	    while (tNode !== null) {
	        ngDevMode &&
	            assertNodeOfPossibleTypes(tNode, 3 /* Element */, 0 /* Container */, 1 /* Projection */, 4 /* ElementContainer */, 5 /* IcuContainer */);
	        var lNode = lView[tNode.index];
	        if (lNode !== null) {
	            result.push(unwrapRNode(lNode));
	        }
	        // A given lNode can represent either a native node or a LContainer (when it is a host of a
	        // ViewContainerRef). When we find a LContainer we need to descend into it to collect root nodes
	        // from the views in this container.
	        if (isLContainer(lNode)) {
	            for (var i = CONTAINER_HEADER_OFFSET; i < lNode.length; i++) {
	                var lViewInAContainer = lNode[i];
	                var lViewFirstChildTNode = lViewInAContainer[TVIEW].firstChild;
	                if (lViewFirstChildTNode !== null) {
	                    collectNativeNodes(lViewInAContainer[TVIEW], lViewInAContainer, lViewFirstChildTNode, result);
	                }
	            }
	        }
	        var tNodeType = tNode.type;
	        if (tNodeType === 4 /* ElementContainer */ || tNodeType === 5 /* IcuContainer */) {
	            collectNativeNodes(tView, lView, tNode.child, result);
	        }
	        else if (tNodeType === 1 /* Projection */) {
	            var componentView = lView[DECLARATION_COMPONENT_VIEW];
	            var componentHost = componentView[T_HOST];
	            var slotIdx = tNode.projection;
	            ngDevMode &&
	                assertDefined(componentHost.projection, 'Components with projection nodes (<ng-content>) must have projection slots defined.');
	            var nodesInSlot = componentHost.projection[slotIdx];
	            if (Array.isArray(nodesInSlot)) {
	                result.push.apply(result, __spread(nodesInSlot));
	            }
	            else {
	                var parentView = getLViewParent(componentView);
	                ngDevMode &&
	                    assertDefined(parentView, 'Component views should always have a parent view (component\'s host view)');
	                collectNativeNodes(parentView[TVIEW], parentView, nodesInSlot, result, true);
	            }
	        }
	        tNode = isProjection ? tNode.projectionNext : tNode.next;
	    }
	    return result;
	}
	var R3ElementRef;
	/**
	 * Creates an ElementRef given a node.
	 *
	 * @param ElementRefToken The ElementRef type
	 * @param tNode The node for which you'd like an ElementRef
	 * @param view The view to which the node belongs
	 * @returns The ElementRef instance to use
	 */
	function createElementRef(ElementRefToken, tNode, view) {
	    if (!R3ElementRef) {
	        R3ElementRef = /** @class */ (function (_super) {
	            __extends(ElementRef, _super);
	            function ElementRef() {
	                return _super !== null && _super.apply(this, arguments) || this;
	            }
	            return ElementRef;
	        }(ElementRefToken));
	    }
	    return new R3ElementRef(getNativeByTNode(tNode, view));
	}

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * Base class for Angular Views, provides change detection functionality.
	 * A change-detection tree collects all views that are to be checked for changes.
	 * Use the methods to add and remove views from the tree, initiate change-detection,
	 * and explicitly mark views as _dirty_, meaning that they have changed and need to be rerendered.
	 *
	 * @usageNotes
	 *
	 * The following examples demonstrate how to modify default change-detection behavior
	 * to perform explicit detection when needed.
	 *
	 * ### Use `markForCheck()` with `CheckOnce` strategy
	 *
	 * The following example sets the `OnPush` change-detection strategy for a component
	 * (`CheckOnce`, rather than the default `CheckAlways`), then forces a second check
	 * after an interval. See [live demo](http://plnkr.co/edit/GC512b?p=preview).
	 *
	 * <code-example path="core/ts/change_detect/change-detection.ts"
	 * region="mark-for-check"></code-example>
	 *
	 * ### Detach change detector to limit how often check occurs
	 *
	 * The following example defines a component with a large list of read-only data
	 * that is expected to change constantly, many times per second.
	 * To improve performance, we want to check and update the list
	 * less often than the changes actually occur. To do that, we detach
	 * the component's change detector and perform an explicit local check every five seconds.
	 *
	 * <code-example path="core/ts/change_detect/change-detection.ts" region="detach"></code-example>
	 *
	 *
	 * ### Reattaching a detached component
	 *
	 * The following example creates a component displaying live data.
	 * The component detaches its change detector from the main change detector tree
	 * when the `live` property is set to false, and reattaches it when the property
	 * becomes true.
	 *
	 * <code-example path="core/ts/change_detect/change-detection.ts" region="reattach"></code-example>
	 *
	 * @publicApi
	 */
	var ChangeDetectorRef = /** @class */ (function () {
	    function ChangeDetectorRef() {
	    }
	    /**
	     * @internal
	     * @nocollapse
	     */
	    ChangeDetectorRef.__NG_ELEMENT_ID__ = function () { return SWITCH_CHANGE_DETECTOR_REF_FACTORY(); };
	    return ChangeDetectorRef;
	}());
	var SWITCH_CHANGE_DETECTOR_REF_FACTORY__PRE_R3__ = function () {
	    var args = [];
	    for (var _i = 0; _i < arguments.length; _i++) {
	        args[_i] = arguments[_i];
	    }
	};
	var SWITCH_CHANGE_DETECTOR_REF_FACTORY = SWITCH_CHANGE_DETECTOR_REF_FACTORY__PRE_R3__;

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * @description
	 *
	 * Represents a type that a Component or other object is instances of.
	 *
	 * An example of a `Type` is `MyCustomComponent` class, which in JavaScript is be represented by
	 * the `MyCustomComponent` constructor function.
	 *
	 * @publicApi
	 */
	var Type$2 = Function;
	function isType(v) {
	    return typeof v === 'function';
	}

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * Attention: These regex has to hold even if the code is minified!
	 */
	var DELEGATE_CTOR = /^function\s+\S+\(\)\s*{[\s\S]+\.apply\(this,\s*arguments\)/;
	var INHERITED_CLASS = /^class\s+[A-Za-z\d$_]*\s*extends\s+[^{]+{/;
	var INHERITED_CLASS_WITH_CTOR = /^class\s+[A-Za-z\d$_]*\s*extends\s+[^{]+{[\s\S]*constructor\s*\(/;
	var INHERITED_CLASS_WITH_DELEGATE_CTOR = /^class\s+[A-Za-z\d$_]*\s*extends\s+[^{]+{[\s\S]*constructor\s*\(\)\s*{\s+super\(\.\.\.arguments\)/;
	/**
	 * Determine whether a stringified type is a class which delegates its constructor
	 * to its parent.
	 *
	 * This is not trivial since compiled code can actually contain a constructor function
	 * even if the original source code did not. For instance, when the child class contains
	 * an initialized instance property.
	 */
	function isDelegateCtor(typeStr) {
	    return DELEGATE_CTOR.test(typeStr) || INHERITED_CLASS_WITH_DELEGATE_CTOR.test(typeStr) ||
	        (INHERITED_CLASS.test(typeStr) && !INHERITED_CLASS_WITH_CTOR.test(typeStr));
	}
	var ReflectionCapabilities = /** @class */ (function () {
	    function ReflectionCapabilities(reflect) {
	        this._reflect = reflect || _global$1['Reflect'];
	    }
	    ReflectionCapabilities.prototype.isReflectionEnabled = function () {
	        return true;
	    };
	    ReflectionCapabilities.prototype.factory = function (t) {
	        return function () {
	            var args = [];
	            for (var _i = 0; _i < arguments.length; _i++) {
	                args[_i] = arguments[_i];
	            }
	            return new (t.bind.apply(t, __spread([void 0], args)))();
	        };
	    };
	    /** @internal */
	    ReflectionCapabilities.prototype._zipTypesAndAnnotations = function (paramTypes, paramAnnotations) {
	        var result;
	        if (typeof paramTypes === 'undefined') {
	            result = newArray$1(paramAnnotations.length);
	        }
	        else {
	            result = newArray$1(paramTypes.length);
	        }
	        for (var i = 0; i < result.length; i++) {
	            // TS outputs Object for parameters without types, while Traceur omits
	            // the annotations. For now we preserve the Traceur behavior to aid
	            // migration, but this can be revisited.
	            if (typeof paramTypes === 'undefined') {
	                result[i] = [];
	            }
	            else if (paramTypes[i] && paramTypes[i] != Object) {
	                result[i] = [paramTypes[i]];
	            }
	            else {
	                result[i] = [];
	            }
	            if (paramAnnotations && paramAnnotations[i] != null) {
	                result[i] = result[i].concat(paramAnnotations[i]);
	            }
	        }
	        return result;
	    };
	    ReflectionCapabilities.prototype._ownParameters = function (type, parentCtor) {
	        var typeStr = type.toString();
	        // If we have no decorators, we only have function.length as metadata.
	        // In that case, to detect whether a child class declared an own constructor or not,
	        // we need to look inside of that constructor to check whether it is
	        // just calling the parent.
	        // This also helps to work around for https://github.com/Microsoft/TypeScript/issues/12439
	        // that sets 'design:paramtypes' to []
	        // if a class inherits from another class but has no ctor declared itself.
	        if (isDelegateCtor(typeStr)) {
	            return null;
	        }
	        // Prefer the direct API.
	        if (type.parameters && type.parameters !== parentCtor.parameters) {
	            return type.parameters;
	        }
	        // API of tsickle for lowering decorators to properties on the class.
	        var tsickleCtorParams = type.ctorParameters;
	        if (tsickleCtorParams && tsickleCtorParams !== parentCtor.ctorParameters) {
	            // Newer tsickle uses a function closure
	            // Retain the non-function case for compatibility with older tsickle
	            var ctorParameters = typeof tsickleCtorParams === 'function' ? tsickleCtorParams() : tsickleCtorParams;
	            var paramTypes_1 = ctorParameters.map(function (ctorParam) { return ctorParam && ctorParam.type; });
	            var paramAnnotations_1 = ctorParameters.map(function (ctorParam) {
	                return ctorParam && convertTsickleDecoratorIntoMetadata(ctorParam.decorators);
	            });
	            return this._zipTypesAndAnnotations(paramTypes_1, paramAnnotations_1);
	        }
	        // API for metadata created by invoking the decorators.
	        var paramAnnotations = type.hasOwnProperty(PARAMETERS) && type[PARAMETERS];
	        var paramTypes = this._reflect && this._reflect.getOwnMetadata &&
	            this._reflect.getOwnMetadata('design:paramtypes', type);
	        if (paramTypes || paramAnnotations) {
	            return this._zipTypesAndAnnotations(paramTypes, paramAnnotations);
	        }
	        // If a class has no decorators, at least create metadata
	        // based on function.length.
	        // Note: We know that this is a real constructor as we checked
	        // the content of the constructor above.
	        return newArray$1(type.length);
	    };
	    ReflectionCapabilities.prototype.parameters = function (type) {
	        // Note: only report metadata if we have at least one class decorator
	        // to stay in sync with the static reflector.
	        if (!isType(type)) {
	            return [];
	        }
	        var parentCtor = getParentCtor(type);
	        var parameters = this._ownParameters(type, parentCtor);
	        if (!parameters && parentCtor !== Object) {
	            parameters = this.parameters(parentCtor);
	        }
	        return parameters || [];
	    };
	    ReflectionCapabilities.prototype._ownAnnotations = function (typeOrFunc, parentCtor) {
	        // Prefer the direct API.
	        if (typeOrFunc.annotations && typeOrFunc.annotations !== parentCtor.annotations) {
	            var annotations = typeOrFunc.annotations;
	            if (typeof annotations === 'function' && annotations.annotations) {
	                annotations = annotations.annotations;
	            }
	            return annotations;
	        }
	        // API of tsickle for lowering decorators to properties on the class.
	        if (typeOrFunc.decorators && typeOrFunc.decorators !== parentCtor.decorators) {
	            return convertTsickleDecoratorIntoMetadata(typeOrFunc.decorators);
	        }
	        // API for metadata created by invoking the decorators.
	        if (typeOrFunc.hasOwnProperty(ANNOTATIONS)) {
	            return typeOrFunc[ANNOTATIONS];
	        }
	        return null;
	    };
	    ReflectionCapabilities.prototype.annotations = function (typeOrFunc) {
	        if (!isType(typeOrFunc)) {
	            return [];
	        }
	        var parentCtor = getParentCtor(typeOrFunc);
	        var ownAnnotations = this._ownAnnotations(typeOrFunc, parentCtor) || [];
	        var parentAnnotations = parentCtor !== Object ? this.annotations(parentCtor) : [];
	        return parentAnnotations.concat(ownAnnotations);
	    };
	    ReflectionCapabilities.prototype._ownPropMetadata = function (typeOrFunc, parentCtor) {
	        // Prefer the direct API.
	        if (typeOrFunc.propMetadata &&
	            typeOrFunc.propMetadata !== parentCtor.propMetadata) {
	            var propMetadata = typeOrFunc.propMetadata;
	            if (typeof propMetadata === 'function' && propMetadata.propMetadata) {
	                propMetadata = propMetadata.propMetadata;
	            }
	            return propMetadata;
	        }
	        // API of tsickle for lowering decorators to properties on the class.
	        if (typeOrFunc.propDecorators &&
	            typeOrFunc.propDecorators !== parentCtor.propDecorators) {
	            var propDecorators_1 = typeOrFunc.propDecorators;
	            var propMetadata_1 = {};
	            Object.keys(propDecorators_1).forEach(function (prop) {
	                propMetadata_1[prop] = convertTsickleDecoratorIntoMetadata(propDecorators_1[prop]);
	            });
	            return propMetadata_1;
	        }
	        // API for metadata created by invoking the decorators.
	        if (typeOrFunc.hasOwnProperty(PROP_METADATA)) {
	            return typeOrFunc[PROP_METADATA];
	        }
	        return null;
	    };
	    ReflectionCapabilities.prototype.propMetadata = function (typeOrFunc) {
	        if (!isType(typeOrFunc)) {
	            return {};
	        }
	        var parentCtor = getParentCtor(typeOrFunc);
	        var propMetadata = {};
	        if (parentCtor !== Object) {
	            var parentPropMetadata_1 = this.propMetadata(parentCtor);
	            Object.keys(parentPropMetadata_1).forEach(function (propName) {
	                propMetadata[propName] = parentPropMetadata_1[propName];
	            });
	        }
	        var ownPropMetadata = this._ownPropMetadata(typeOrFunc, parentCtor);
	        if (ownPropMetadata) {
	            Object.keys(ownPropMetadata).forEach(function (propName) {
	                var decorators = [];
	                if (propMetadata.hasOwnProperty(propName)) {
	                    decorators.push.apply(decorators, __spread(propMetadata[propName]));
	                }
	                decorators.push.apply(decorators, __spread(ownPropMetadata[propName]));
	                propMetadata[propName] = decorators;
	            });
	        }
	        return propMetadata;
	    };
	    ReflectionCapabilities.prototype.ownPropMetadata = function (typeOrFunc) {
	        if (!isType(typeOrFunc)) {
	            return {};
	        }
	        return this._ownPropMetadata(typeOrFunc, getParentCtor(typeOrFunc)) || {};
	    };
	    ReflectionCapabilities.prototype.hasLifecycleHook = function (type, lcProperty) {
	        return type instanceof Type$2 && lcProperty in type.prototype;
	    };
	    ReflectionCapabilities.prototype.guards = function (type) {
	        return {};
	    };
	    ReflectionCapabilities.prototype.getter = function (name) {
	        return new Function('o', 'return o.' + name + ';');
	    };
	    ReflectionCapabilities.prototype.setter = function (name) {
	        return new Function('o', 'v', 'return o.' + name + ' = v;');
	    };
	    ReflectionCapabilities.prototype.method = function (name) {
	        var functionBody = "if (!o." + name + ") throw new Error('\"" + name + "\" is undefined');\n        return o." + name + ".apply(o, args);";
	        return new Function('o', 'args', functionBody);
	    };
	    // There is not a concept of import uri in Js, but this is useful in developing Dart applications.
	    ReflectionCapabilities.prototype.importUri = function (type) {
	        // StaticSymbol
	        if (typeof type === 'object' && type['filePath']) {
	            return type['filePath'];
	        }
	        // Runtime type
	        return "./" + stringify$1(type);
	    };
	    ReflectionCapabilities.prototype.resourceUri = function (type) {
	        return "./" + stringify$1(type);
	    };
	    ReflectionCapabilities.prototype.resolveIdentifier = function (name, moduleUrl, members, runtime) {
	        return runtime;
	    };
	    ReflectionCapabilities.prototype.resolveEnum = function (enumIdentifier, name) {
	        return enumIdentifier[name];
	    };
	    return ReflectionCapabilities;
	}());
	function convertTsickleDecoratorIntoMetadata(decoratorInvocations) {
	    if (!decoratorInvocations) {
	        return [];
	    }
	    return decoratorInvocations.map(function (decoratorInvocation) {
	        var decoratorType = decoratorInvocation.type;
	        var annotationCls = decoratorType.annotationCls;
	        var annotationArgs = decoratorInvocation.args ? decoratorInvocation.args : [];
	        return new (annotationCls.bind.apply(annotationCls, __spread([void 0], annotationArgs)))();
	    });
	}
	function getParentCtor(ctor) {
	    var parentProto = ctor.prototype ? Object.getPrototypeOf(ctor.prototype) : null;
	    var parentCtor = parentProto ? parentProto.constructor : null;
	    // Note: We always use `Object` as the null value
	    // to simplify checking later on.
	    return parentCtor || Object;
	}
	var Éµ0$6 = getClosureSafeProperty;
	var USE_VALUE$1$1 = getClosureSafeProperty({ provide: String, useValue: Éµ0$6 });

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	var Éµ0$7 = getClosureSafeProperty;
	var USE_VALUE$2 = getClosureSafeProperty({ provide: String, useValue: Éµ0$7 });
	var EMPTY_ARRAY$1 = [];
	function convertInjectableProviderToFactory(type, provider) {
	    if (!provider) {
	        var reflectionCapabilities = new ReflectionCapabilities();
	        var deps_1 = reflectionCapabilities.parameters(type);
	        // TODO - convert to flags.
	        return function () { return new (type.bind.apply(type, __spread([void 0], injectArgs(deps_1))))(); };
	    }
	    if (USE_VALUE$2 in provider) {
	        var valueProvider_1 = provider;
	        return function () { return valueProvider_1.useValue; };
	    }
	    else if (provider.useExisting) {
	        var existingProvider_1 = provider;
	        return function () { return ÉµÉµinject(resolveForwardRef$1(existingProvider_1.useExisting)); };
	    }
	    else if (provider.useFactory) {
	        var factoryProvider_1 = provider;
	        return function () { return factoryProvider_1.useFactory.apply(factoryProvider_1, __spread(injectArgs(factoryProvider_1.deps || EMPTY_ARRAY$1))); };
	    }
	    else if (provider.useClass) {
	        var classProvider_1 = provider;
	        var deps_2 = provider.deps;
	        if (!deps_2) {
	            var reflectionCapabilities = new ReflectionCapabilities();
	            deps_2 = reflectionCapabilities.parameters(type);
	        }
	        return function () {
	            var _a;
	            return new ((_a = (resolveForwardRef$1(classProvider_1.useClass))).bind.apply(_a, __spread([void 0], injectArgs(deps_2))))();
	        };
	    }
	    else {
	        var deps_3 = provider.deps;
	        if (!deps_3) {
	            var reflectionCapabilities = new ReflectionCapabilities();
	            deps_3 = reflectionCapabilities.parameters(type);
	        }
	        return function () { return new (type.bind.apply(type, __spread([void 0], injectArgs(deps_3))))(); };
	    }
	}

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	var Éµ0$8 = function (type, meta) { return SWITCH_COMPILE_INJECTABLE(type, meta); };
	/**
	 * Injectable decorator and metadata.
	 *
	 * @Annotation
	 * @publicApi
	 */
	var Injectable = makeDecorator('Injectable', undefined, undefined, undefined, Éµ0$8);
	/**
	 * Supports @Injectable() in JIT mode for Render2.
	 */
	function render2CompileInjectable(injectableType, options) {
	    if (options && options.providedIn !== undefined && !getInjectableDef(injectableType)) {
	        injectableType.Éµprov = ÉµÉµdefineInjectable({
	            token: injectableType,
	            providedIn: options.providedIn,
	            factory: convertInjectableProviderToFactory(injectableType, options),
	        });
	    }
	}
	var SWITCH_COMPILE_INJECTABLE__PRE_R3__ = render2CompileInjectable;
	var SWITCH_COMPILE_INJECTABLE = SWITCH_COMPILE_INJECTABLE__PRE_R3__;

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * An internal token whose presence in an injector indicates that the injector should treat itself
	 * as a root scoped injector when processing requests for unknown tokens which may indicate
	 * they are provided in the root scope.
	 */
	var INJECTOR_SCOPE = new InjectionToken('Set Injector scope.');

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * Marker which indicates that a value has not yet been created from the factory function.
	 */
	var NOT_YET = {};
	/**
	 * Marker which indicates that the factory function for a token is in the process of being called.
	 *
	 * If the injector is asked to inject a token with its value set to CIRCULAR, that indicates
	 * injection of a dependency has recursively attempted to inject the original token, and there is
	 * a circular dependency among the providers.
	 */
	var CIRCULAR = {};
	var EMPTY_ARRAY$2 = [];
	/**
	 * A lazily initialized NullInjector.
	 */
	var NULL_INJECTOR = undefined;
	function getNullInjector() {
	    if (NULL_INJECTOR === undefined) {
	        NULL_INJECTOR = new NullInjector();
	    }
	    return NULL_INJECTOR;
	}
	/**
	 * Creates a new injector without eagerly resolving its injector types. Can be used in places
	 * where resolving the injector types immediately can lead to an infinite loop. The injector types
	 * should be resolved at a later point by calling `_resolveInjectorDefTypes`.
	 */
	function createInjectorWithoutInjectorInstances(defType, parent, additionalProviders, name) {
	    if (parent === void 0) { parent = null; }
	    if (additionalProviders === void 0) { additionalProviders = null; }
	    return new R3Injector(defType, additionalProviders, parent || getNullInjector(), name);
	}
	var R3Injector = /** @class */ (function () {
	    function R3Injector(def, additionalProviders, parent, source) {
	        var _this = this;
	        if (source === void 0) { source = null; }
	        this.parent = parent;
	        /**
	         * Map of tokens to records which contain the instances of those tokens.
	         * - `null` value implies that we don't have the record. Used by tree-shakable injectors
	         * to prevent further searches.
	         */
	        this.records = new Map();
	        /**
	         * The transitive set of `InjectorType`s which define this injector.
	         */
	        this.injectorDefTypes = new Set();
	        /**
	         * Set of values instantiated by this injector which contain `ngOnDestroy` lifecycle hooks.
	         */
	        this.onDestroy = new Set();
	        this._destroyed = false;
	        var dedupStack = [];
	        // Start off by creating Records for every provider declared in every InjectorType
	        // included transitively in additional providers then do the same for `def`. This order is
	        // important because `def` may include providers that override ones in additionalProviders.
	        additionalProviders &&
	            deepForEach(additionalProviders, function (provider) { return _this.processProvider(provider, def, additionalProviders); });
	        deepForEach([def], function (injectorDef) { return _this.processInjectorType(injectorDef, [], dedupStack); });
	        // Make sure the INJECTOR token provides this injector.
	        this.records.set(INJECTOR, makeRecord(undefined, this));
	        // Detect whether this injector has the APP_ROOT_SCOPE token and thus should provide
	        // any injectable scoped to APP_ROOT_SCOPE.
	        var record = this.records.get(INJECTOR_SCOPE);
	        this.scope = record != null ? record.value : null;
	        // Source name, used for debugging
	        this.source = source || (typeof def === 'object' ? null : stringify$1(def));
	    }
	    Object.defineProperty(R3Injector.prototype, "destroyed", {
	        /**
	         * Flag indicating that this injector was previously destroyed.
	         */
	        get: function () {
	            return this._destroyed;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    /**
	     * Destroy the injector and release references to every instance or provider associated with it.
	     *
	     * Also calls the `OnDestroy` lifecycle hooks of every instance that was created for which a
	     * hook was found.
	     */
	    R3Injector.prototype.destroy = function () {
	        this.assertNotDestroyed();
	        // Set destroyed = true first, in case lifecycle hooks re-enter destroy().
	        this._destroyed = true;
	        try {
	            // Call all the lifecycle hooks.
	            this.onDestroy.forEach(function (service) { return service.ngOnDestroy(); });
	        }
	        finally {
	            // Release all references.
	            this.records.clear();
	            this.onDestroy.clear();
	            this.injectorDefTypes.clear();
	        }
	    };
	    R3Injector.prototype.get = function (token, notFoundValue, flags) {
	        if (notFoundValue === void 0) { notFoundValue = THROW_IF_NOT_FOUND; }
	        if (flags === void 0) { flags = InjectFlags.Default; }
	        this.assertNotDestroyed();
	        // Set the injection context.
	        var previousInjector = setCurrentInjector(this);
	        try {
	            // Check for the SkipSelf flag.
	            if (!(flags & InjectFlags.SkipSelf)) {
	                // SkipSelf isn't set, check if the record belongs to this injector.
	                var record = this.records.get(token);
	                if (record === undefined) {
	                    // No record, but maybe the token is scoped to this injector. Look for an injectable
	                    // def with a scope matching this injector.
	                    var def = couldBeInjectableType(token) && getInjectableDef(token);
	                    if (def && this.injectableDefInScope(def)) {
	                        // Found an injectable def and it's scoped to this injector. Pretend as if it was here
	                        // all along.
	                        record = makeRecord(injectableDefOrInjectorDefFactory(token), NOT_YET);
	                    }
	                    else {
	                        record = null;
	                    }
	                    this.records.set(token, record);
	                }
	                // If a record was found, get the instance for it and return it.
	                if (record != null /* NOT null || undefined */) {
	                    return this.hydrate(token, record);
	                }
	            }
	            // Select the next injector based on the Self flag - if self is set, the next injector is
	            // the NullInjector, otherwise it's the parent.
	            var nextInjector = !(flags & InjectFlags.Self) ? this.parent : getNullInjector();
	            // Set the notFoundValue based on the Optional flag - if optional is set and notFoundValue
	            // is undefined, the value is null, otherwise it's the notFoundValue.
	            notFoundValue = (flags & InjectFlags.Optional) && notFoundValue === THROW_IF_NOT_FOUND ?
	                null :
	                notFoundValue;
	            return nextInjector.get(token, notFoundValue);
	        }
	        catch (e) {
	            if (e.name === 'NullInjectorError') {
	                var path = e[NG_TEMP_TOKEN_PATH] = e[NG_TEMP_TOKEN_PATH] || [];
	                path.unshift(stringify$1(token));
	                if (previousInjector) {
	                    // We still have a parent injector, keep throwing
	                    throw e;
	                }
	                else {
	                    // Format & throw the final error message when we don't have any previous injector
	                    return catchInjectorError(e, token, 'R3InjectorError', this.source);
	                }
	            }
	            else {
	                throw e;
	            }
	        }
	        finally {
	            // Lastly, clean up the state by restoring the previous injector.
	            setCurrentInjector(previousInjector);
	        }
	    };
	    /** @internal */
	    R3Injector.prototype._resolveInjectorDefTypes = function () {
	        var _this = this;
	        this.injectorDefTypes.forEach(function (defType) { return _this.get(defType); });
	    };
	    R3Injector.prototype.toString = function () {
	        var tokens = [], records = this.records;
	        records.forEach(function (v, token) { return tokens.push(stringify$1(token)); });
	        return "R3Injector[" + tokens.join(', ') + "]";
	    };
	    R3Injector.prototype.assertNotDestroyed = function () {
	        if (this._destroyed) {
	            throw new Error('Injector has already been destroyed.');
	        }
	    };
	    /**
	     * Add an `InjectorType` or `InjectorTypeWithProviders` and all of its transitive providers
	     * to this injector.
	     *
	     * If an `InjectorTypeWithProviders` that declares providers besides the type is specified,
	     * the function will return "true" to indicate that the providers of the type definition need
	     * to be processed. This allows us to process providers of injector types after all imports of
	     * an injector definition are processed. (following View Engine semantics: see FW-1349)
	     */
	    R3Injector.prototype.processInjectorType = function (defOrWrappedDef, parents, dedupStack) {
	        var _this = this;
	        defOrWrappedDef = resolveForwardRef$1(defOrWrappedDef);
	        if (!defOrWrappedDef)
	            return false;
	        // Either the defOrWrappedDef is an InjectorType (with injector def) or an
	        // InjectorDefTypeWithProviders (aka ModuleWithProviders). Detecting either is a megamorphic
	        // read, so care is taken to only do the read once.
	        // First attempt to read the injector def (`Éµinj`).
	        var def = getInjectorDef(defOrWrappedDef);
	        // If that's not present, then attempt to read ngModule from the InjectorDefTypeWithProviders.
	        var ngModule = (def == null) && defOrWrappedDef.ngModule || undefined;
	        // Determine the InjectorType. In the case where `defOrWrappedDef` is an `InjectorType`,
	        // then this is easy. In the case of an InjectorDefTypeWithProviders, then the definition type
	        // is the `ngModule`.
	        var defType = (ngModule === undefined) ? defOrWrappedDef : ngModule;
	        // Check for circular dependencies.
	        if (ngDevMode && parents.indexOf(defType) !== -1) {
	            var defName = stringify$1(defType);
	            throw new Error("Circular dependency in DI detected for type " + defName + ". Dependency path: " + parents.map(function (defType) { return stringify$1(defType); }).join(' > ') + " > " + defName + ".");
	        }
	        // Check for multiple imports of the same module
	        var isDuplicate = dedupStack.indexOf(defType) !== -1;
	        // Finally, if defOrWrappedType was an `InjectorDefTypeWithProviders`, then the actual
	        // `InjectorDef` is on its `ngModule`.
	        if (ngModule !== undefined) {
	            def = getInjectorDef(ngModule);
	        }
	        // If no definition was found, it might be from exports. Remove it.
	        if (def == null) {
	            return false;
	        }
	        // Add providers in the same way that @NgModule resolution did:
	        // First, include providers from any imports.
	        if (def.imports != null && !isDuplicate) {
	            // Before processing defType's imports, add it to the set of parents. This way, if it ends
	            // up deeply importing itself, this can be detected.
	            ngDevMode && parents.push(defType);
	            // Add it to the set of dedups. This way we can detect multiple imports of the same module
	            dedupStack.push(defType);
	            var importTypesWithProviders_1;
	            try {
	                deepForEach(def.imports, function (imported) {
	                    if (_this.processInjectorType(imported, parents, dedupStack)) {
	                        if (importTypesWithProviders_1 === undefined)
	                            importTypesWithProviders_1 = [];
	                        // If the processed import is an injector type with providers, we store it in the
	                        // list of import types with providers, so that we can process those afterwards.
	                        importTypesWithProviders_1.push(imported);
	                    }
	                });
	            }
	            finally {
	                // Remove it from the parents set when finished.
	                ngDevMode && parents.pop();
	            }
	            // Imports which are declared with providers (TypeWithProviders) need to be processed
	            // after all imported modules are processed. This is similar to how View Engine
	            // processes/merges module imports in the metadata resolver. See: FW-1349.
	            if (importTypesWithProviders_1 !== undefined) {
	                var _loop_1 = function (i) {
	                    var _a = importTypesWithProviders_1[i], ngModule_1 = _a.ngModule, providers = _a.providers;
	                    deepForEach(providers, function (provider) { return _this.processProvider(provider, ngModule_1, providers || EMPTY_ARRAY$2); });
	                };
	                for (var i = 0; i < importTypesWithProviders_1.length; i++) {
	                    _loop_1(i);
	                }
	            }
	        }
	        // Track the InjectorType and add a provider for it. It's important that this is done after the
	        // def's imports.
	        this.injectorDefTypes.add(defType);
	        this.records.set(defType, makeRecord(def.factory, NOT_YET));
	        // Next, include providers listed on the definition itself.
	        var defProviders = def.providers;
	        if (defProviders != null && !isDuplicate) {
	            var injectorType_1 = defOrWrappedDef;
	            deepForEach(defProviders, function (provider) { return _this.processProvider(provider, injectorType_1, defProviders); });
	        }
	        return (ngModule !== undefined &&
	            defOrWrappedDef.providers !== undefined);
	    };
	    /**
	     * Process a `SingleProvider` and add it.
	     */
	    R3Injector.prototype.processProvider = function (provider, ngModuleType, providers) {
	        // Determine the token from the provider. Either it's its own token, or has a {provide: ...}
	        // property.
	        provider = resolveForwardRef$1(provider);
	        var token = isTypeProvider(provider) ? provider : resolveForwardRef$1(provider && provider.provide);
	        // Construct a `Record` for the provider.
	        var record = providerToRecord(provider, ngModuleType, providers);
	        if (!isTypeProvider(provider) && provider.multi === true) {
	            // If the provider indicates that it's a multi-provider, process it specially.
	            // First check whether it's been defined already.
	            var multiRecord_1 = this.records.get(token);
	            if (multiRecord_1) {
	                // It has. Throw a nice error if
	                if (multiRecord_1.multi === undefined) {
	                    throwMixedMultiProviderError();
	                }
	            }
	            else {
	                multiRecord_1 = makeRecord(undefined, NOT_YET, true);
	                multiRecord_1.factory = function () { return injectArgs(multiRecord_1.multi); };
	                this.records.set(token, multiRecord_1);
	            }
	            token = provider;
	            multiRecord_1.multi.push(provider);
	        }
	        else {
	            var existing = this.records.get(token);
	            if (existing && existing.multi !== undefined) {
	                throwMixedMultiProviderError();
	            }
	        }
	        this.records.set(token, record);
	    };
	    R3Injector.prototype.hydrate = function (token, record) {
	        if (record.value === CIRCULAR) {
	            throwCyclicDependencyError(stringify$1(token));
	        }
	        else if (record.value === NOT_YET) {
	            record.value = CIRCULAR;
	            record.value = record.factory();
	        }
	        if (typeof record.value === 'object' && record.value && hasOnDestroy(record.value)) {
	            this.onDestroy.add(record.value);
	        }
	        return record.value;
	    };
	    R3Injector.prototype.injectableDefInScope = function (def) {
	        if (!def.providedIn) {
	            return false;
	        }
	        else if (typeof def.providedIn === 'string') {
	            return def.providedIn === 'any' || (def.providedIn === this.scope);
	        }
	        else {
	            return this.injectorDefTypes.has(def.providedIn);
	        }
	    };
	    return R3Injector;
	}());
	function injectableDefOrInjectorDefFactory(token) {
	    // Most tokens will have an injectable def directly on them, which specifies a factory directly.
	    var injectableDef = getInjectableDef(token);
	    var factory = injectableDef !== null ? injectableDef.factory : getFactoryDef(token);
	    if (factory !== null) {
	        return factory;
	    }
	    // If the token is an NgModule, it's also injectable but the factory is on its injector def
	    // (`Éµinj`)
	    var injectorDef = getInjectorDef(token);
	    if (injectorDef !== null) {
	        return injectorDef.factory;
	    }
	    // InjectionTokens should have an injectable def (Éµprov) and thus should be handled above.
	    // If it's missing that, it's an error.
	    if (token instanceof InjectionToken) {
	        throw new Error("Token " + stringify$1(token) + " is missing a \u0275prov definition.");
	    }
	    // Undecorated types can sometimes be created if they have no constructor arguments.
	    if (token instanceof Function) {
	        return getUndecoratedInjectableFactory(token);
	    }
	    // There was no way to resolve a factory for this token.
	    throw new Error('unreachable');
	}
	function getUndecoratedInjectableFactory(token) {
	    // If the token has parameters then it has dependencies that we cannot resolve implicitly.
	    var paramLength = token.length;
	    if (paramLength > 0) {
	        var args = newArray$1(paramLength, '?');
	        throw new Error("Can't resolve all parameters for " + stringify$1(token) + ": (" + args.join(', ') + ").");
	    }
	    // The constructor function appears to have no parameters.
	    // This might be because it inherits from a super-class. In which case, use an injectable
	    // def from an ancestor if there is one.
	    // Otherwise this really is a simple class with no dependencies, so return a factory that
	    // just instantiates the zero-arg constructor.
	    var inheritedInjectableDef = getInheritedInjectableDef(token);
	    if (inheritedInjectableDef !== null) {
	        return function () { return inheritedInjectableDef.factory(token); };
	    }
	    else {
	        return function () { return new token(); };
	    }
	}
	function providerToRecord(provider, ngModuleType, providers) {
	    if (isValueProvider(provider)) {
	        return makeRecord(undefined, provider.useValue);
	    }
	    else {
	        var factory = providerToFactory(provider, ngModuleType, providers);
	        return makeRecord(factory, NOT_YET);
	    }
	}
	/**
	 * Converts a `SingleProvider` into a factory function.
	 *
	 * @param provider provider to convert to factory
	 */
	function providerToFactory(provider, ngModuleType, providers) {
	    var factory = undefined;
	    if (isTypeProvider(provider)) {
	        var unwrappedProvider = resolveForwardRef$1(provider);
	        return getFactoryDef(unwrappedProvider) || injectableDefOrInjectorDefFactory(unwrappedProvider);
	    }
	    else {
	        if (isValueProvider(provider)) {
	            factory = function () { return resolveForwardRef$1(provider.useValue); };
	        }
	        else if (isFactoryProvider(provider)) {
	            factory = function () { return provider.useFactory.apply(provider, __spread(injectArgs(provider.deps || []))); };
	        }
	        else if (isExistingProvider(provider)) {
	            factory = function () { return ÉµÉµinject(resolveForwardRef$1(provider.useExisting)); };
	        }
	        else {
	            var classRef_1 = resolveForwardRef$1(provider &&
	                (provider.useClass || provider.provide));
	            if (!classRef_1) {
	                throwInvalidProviderError(ngModuleType, providers, provider);
	            }
	            if (hasDeps(provider)) {
	                factory = function () { return new ((classRef_1).bind.apply((classRef_1), __spread([void 0], injectArgs(provider.deps))))(); };
	            }
	            else {
	                return getFactoryDef(classRef_1) || injectableDefOrInjectorDefFactory(classRef_1);
	            }
	        }
	    }
	    return factory;
	}
	function makeRecord(factory, value, multi) {
	    if (multi === void 0) { multi = false; }
	    return {
	        factory: factory,
	        value: value,
	        multi: multi ? [] : undefined,
	    };
	}
	function isValueProvider(value) {
	    return value !== null && typeof value == 'object' && USE_VALUE$1 in value;
	}
	function isExistingProvider(value) {
	    return !!(value && value.useExisting);
	}
	function isFactoryProvider(value) {
	    return !!(value && value.useFactory);
	}
	function isTypeProvider(value) {
	    return typeof value === 'function';
	}
	function hasDeps(value) {
	    return !!value.deps;
	}
	function hasOnDestroy(value) {
	    return value !== null && typeof value === 'object' &&
	        typeof value.ngOnDestroy === 'function';
	}
	function couldBeInjectableType(value) {
	    return (typeof value === 'function') ||
	        (typeof value === 'object' && value instanceof InjectionToken);
	}

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	function INJECTOR_IMPL__PRE_R3__(providers, parent, name) {
	    return new StaticInjector(providers, parent, name);
	}
	var INJECTOR_IMPL = INJECTOR_IMPL__PRE_R3__;
	/**
	 * Concrete injectors implement this interface. Injectors are configured
	 * with [providers](guide/glossary#provider) that associate
	 * dependencies of various types with [injection tokens](guide/glossary#di-token).
	 *
	 * @see ["DI Providers"](guide/dependency-injection-providers).
	 * @see `StaticProvider`
	 *
	 * @usageNotes
	 *
	 *  The following example creates a service injector instance.
	 *
	 * {@example core/di/ts/provider_spec.ts region='ConstructorProvider'}
	 *
	 * ### Usage example
	 *
	 * {@example core/di/ts/injector_spec.ts region='Injector'}
	 *
	 * `Injector` returns itself when given `Injector` as a token:
	 *
	 * {@example core/di/ts/injector_spec.ts region='injectInjector'}
	 *
	 * @publicApi
	 */
	var Injector = /** @class */ (function () {
	    function Injector() {
	    }
	    Injector.create = function (options, parent) {
	        if (Array.isArray(options)) {
	            return INJECTOR_IMPL(options, parent, '');
	        }
	        else {
	            return INJECTOR_IMPL(options.providers, options.parent, options.name || '');
	        }
	    };
	    Injector.THROW_IF_NOT_FOUND = THROW_IF_NOT_FOUND;
	    Injector.NULL = new NullInjector();
	    /** @nocollapse */
	    Injector.Éµprov = ÉµÉµdefineInjectable({
	        token: Injector,
	        providedIn: 'any',
	        factory: function () { return ÉµÉµinject(INJECTOR); },
	    });
	    /**
	     * @internal
	     * @nocollapse
	     */
	    Injector.__NG_ELEMENT_ID__ = -1;
	    return Injector;
	}());
	var IDENT = function (value) {
	    return value;
	};
	var EMPTY$1 = [];
	var CIRCULAR$1 = IDENT;
	var MULTI_PROVIDER_FN = function () {
	    return Array.prototype.slice.call(arguments);
	};
	var NO_NEW_LINE$1 = 'Éµ';
	var StaticInjector = /** @class */ (function () {
	    function StaticInjector(providers, parent, source) {
	        if (parent === void 0) { parent = Injector.NULL; }
	        if (source === void 0) { source = null; }
	        this.parent = parent;
	        this.source = source;
	        var records = this._records = new Map();
	        records.set(Injector, { token: Injector, fn: IDENT, deps: EMPTY$1, value: this, useNew: false });
	        records.set(INJECTOR, { token: INJECTOR, fn: IDENT, deps: EMPTY$1, value: this, useNew: false });
	        this.scope = recursivelyProcessProviders(records, providers);
	    }
	    StaticInjector.prototype.get = function (token, notFoundValue, flags) {
	        if (flags === void 0) { flags = InjectFlags.Default; }
	        var records = this._records;
	        var record = records.get(token);
	        if (record === undefined) {
	            // This means we have never seen this record, see if it is tree shakable provider.
	            var injectableDef = getInjectableDef(token);
	            if (injectableDef) {
	                var providedIn = injectableDef && injectableDef.providedIn;
	                if (providedIn === 'any' || providedIn != null && providedIn === this.scope) {
	                    records.set(token, record = resolveProvider({ provide: token, useFactory: injectableDef.factory, deps: EMPTY$1 }));
	                }
	            }
	            if (record === undefined) {
	                // Set record to null to make sure that we don't go through expensive lookup above again.
	                records.set(token, null);
	            }
	        }
	        var lastInjector = setCurrentInjector(this);
	        try {
	            return tryResolveToken(token, record, records, this.parent, notFoundValue, flags);
	        }
	        catch (e) {
	            return catchInjectorError(e, token, 'StaticInjectorError', this.source);
	        }
	        finally {
	            setCurrentInjector(lastInjector);
	        }
	    };
	    StaticInjector.prototype.toString = function () {
	        var tokens = [], records = this._records;
	        records.forEach(function (v, token) { return tokens.push(stringify$1(token)); });
	        return "StaticInjector[" + tokens.join(', ') + "]";
	    };
	    return StaticInjector;
	}());
	function resolveProvider(provider) {
	    var deps = computeDeps(provider);
	    var fn = IDENT;
	    var value = EMPTY$1;
	    var useNew = false;
	    var provide = resolveForwardRef$1(provider.provide);
	    if (USE_VALUE$1 in provider) {
	        // We need to use USE_VALUE in provider since provider.useValue could be defined as undefined.
	        value = provider.useValue;
	    }
	    else if (provider.useFactory) {
	        fn = provider.useFactory;
	    }
	    else if (provider.useExisting) ;
	    else if (provider.useClass) {
	        useNew = true;
	        fn = resolveForwardRef$1(provider.useClass);
	    }
	    else if (typeof provide == 'function') {
	        useNew = true;
	        fn = provide;
	    }
	    else {
	        throw staticError('StaticProvider does not have [useValue|useFactory|useExisting|useClass] or [provide] is not newable', provider);
	    }
	    return { deps: deps, fn: fn, useNew: useNew, value: value };
	}
	function multiProviderMixError(token) {
	    return staticError('Cannot mix multi providers and regular providers', token);
	}
	function recursivelyProcessProviders(records, provider) {
	    var scope = null;
	    if (provider) {
	        provider = resolveForwardRef$1(provider);
	        if (Array.isArray(provider)) {
	            // if we have an array recurse into the array
	            for (var i = 0; i < provider.length; i++) {
	                scope = recursivelyProcessProviders(records, provider[i]) || scope;
	            }
	        }
	        else if (typeof provider === 'function') {
	            // Functions were supported in ReflectiveInjector, but are not here. For safety give useful
	            // error messages
	            throw staticError('Function/Class not supported', provider);
	        }
	        else if (provider && typeof provider === 'object' && provider.provide) {
	            // At this point we have what looks like a provider: {provide: ?, ....}
	            var token = resolveForwardRef$1(provider.provide);
	            var resolvedProvider = resolveProvider(provider);
	            if (provider.multi === true) {
	                // This is a multi provider.
	                var multiProvider = records.get(token);
	                if (multiProvider) {
	                    if (multiProvider.fn !== MULTI_PROVIDER_FN) {
	                        throw multiProviderMixError(token);
	                    }
	                }
	                else {
	                    // Create a placeholder factory which will look up the constituents of the multi provider.
	                    records.set(token, multiProvider = {
	                        token: provider.provide,
	                        deps: [],
	                        useNew: false,
	                        fn: MULTI_PROVIDER_FN,
	                        value: EMPTY$1
	                    });
	                }
	                // Treat the provider as the token.
	                token = provider;
	                multiProvider.deps.push({ token: token, options: 6 /* Default */ });
	            }
	            var record = records.get(token);
	            if (record && record.fn == MULTI_PROVIDER_FN) {
	                throw multiProviderMixError(token);
	            }
	            if (token === INJECTOR_SCOPE) {
	                scope = resolvedProvider.value;
	            }
	            records.set(token, resolvedProvider);
	        }
	        else {
	            throw staticError('Unexpected provider', provider);
	        }
	    }
	    return scope;
	}
	function tryResolveToken(token, record, records, parent, notFoundValue, flags) {
	    try {
	        return resolveToken(token, record, records, parent, notFoundValue, flags);
	    }
	    catch (e) {
	        // ensure that 'e' is of type Error.
	        if (!(e instanceof Error)) {
	            e = new Error(e);
	        }
	        var path = e[NG_TEMP_TOKEN_PATH] = e[NG_TEMP_TOKEN_PATH] || [];
	        path.unshift(token);
	        if (record && record.value == CIRCULAR$1) {
	            // Reset the Circular flag.
	            record.value = EMPTY$1;
	        }
	        throw e;
	    }
	}
	function resolveToken(token, record, records, parent, notFoundValue, flags) {
	    var _a;
	    var value;
	    if (record && !(flags & InjectFlags.SkipSelf)) {
	        // If we don't have a record, this implies that we don't own the provider hence don't know how
	        // to resolve it.
	        value = record.value;
	        if (value == CIRCULAR$1) {
	            throw Error(NO_NEW_LINE$1 + 'Circular dependency');
	        }
	        else if (value === EMPTY$1) {
	            record.value = CIRCULAR$1;
	            var obj = undefined;
	            var useNew = record.useNew;
	            var fn = record.fn;
	            var depRecords = record.deps;
	            var deps = EMPTY$1;
	            if (depRecords.length) {
	                deps = [];
	                for (var i = 0; i < depRecords.length; i++) {
	                    var depRecord = depRecords[i];
	                    var options = depRecord.options;
	                    var childRecord = options & 2 /* CheckSelf */ ? records.get(depRecord.token) : undefined;
	                    deps.push(tryResolveToken(
	                    // Current Token to resolve
	                    depRecord.token, 
	                    // A record which describes how to resolve the token.
	                    // If undefined, this means we don't have such a record
	                    childRecord, 
	                    // Other records we know about.
	                    records, 
	                    // If we don't know how to resolve dependency and we should not check parent for it,
	                    // than pass in Null injector.
	                    !childRecord && !(options & 4 /* CheckParent */) ? Injector.NULL : parent, options & 1 /* Optional */ ? null : Injector.THROW_IF_NOT_FOUND, InjectFlags.Default));
	                }
	            }
	            record.value = value = useNew ? new ((_a = fn).bind.apply(_a, __spread([void 0], deps)))() : fn.apply(obj, deps);
	        }
	    }
	    else if (!(flags & InjectFlags.Self)) {
	        value = parent.get(token, notFoundValue, InjectFlags.Default);
	    }
	    else if (!(flags & InjectFlags.Optional)) {
	        value = Injector.NULL.get(token, notFoundValue);
	    }
	    else {
	        value = Injector.NULL.get(token, typeof notFoundValue !== 'undefined' ? notFoundValue : null);
	    }
	    return value;
	}
	function computeDeps(provider) {
	    var deps = EMPTY$1;
	    var providerDeps = provider.deps;
	    if (providerDeps && providerDeps.length) {
	        deps = [];
	        for (var i = 0; i < providerDeps.length; i++) {
	            var options = 6 /* Default */;
	            var token = resolveForwardRef$1(providerDeps[i]);
	            if (Array.isArray(token)) {
	                for (var j = 0, annotations = token; j < annotations.length; j++) {
	                    var annotation = annotations[j];
	                    if (annotation instanceof Optional || annotation == Optional) {
	                        options = options | 1 /* Optional */;
	                    }
	                    else if (annotation instanceof SkipSelf || annotation == SkipSelf) {
	                        options = options & ~2 /* CheckSelf */;
	                    }
	                    else if (annotation instanceof Self || annotation == Self) {
	                        options = options & ~4 /* CheckParent */;
	                    }
	                    else if (annotation instanceof Inject) {
	                        token = annotation.token;
	                    }
	                    else {
	                        token = resolveForwardRef$1(annotation);
	                    }
	                }
	            }
	            deps.push({ token: token, options: options });
	        }
	    }
	    else if (provider.useExisting) {
	        var token = resolveForwardRef$1(provider.useExisting);
	        deps = [{ token: token, options: 6 /* Default */ }];
	    }
	    else if (!providerDeps && !(USE_VALUE$1 in provider)) {
	        // useValue & useExisting are the only ones which are exempt from deps all others need it.
	        throw staticError('\'deps\' required', provider);
	    }
	    return deps;
	}
	function staticError(text, obj) {
	    return new Error(formatError(text, obj, 'StaticInjectorError'));
	}

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	function findFirstClosedCycle(keys) {
	    var res = [];
	    for (var i = 0; i < keys.length; ++i) {
	        if (res.indexOf(keys[i]) > -1) {
	            res.push(keys[i]);
	            return res;
	        }
	        res.push(keys[i]);
	    }
	    return res;
	}
	function constructResolvingPath(keys) {
	    if (keys.length > 1) {
	        var reversed = findFirstClosedCycle(keys.slice().reverse());
	        var tokenStrs = reversed.map(function (k) { return stringify$1(k.token); });
	        return ' (' + tokenStrs.join(' -> ') + ')';
	    }
	    return '';
	}
	function injectionError(injector, key, constructResolvingMessage, originalError) {
	    var keys = [key];
	    var errMsg = constructResolvingMessage(keys);
	    var error = (originalError ? wrappedError(errMsg, originalError) : Error(errMsg));
	    error.addKey = addKey;
	    error.keys = keys;
	    error.injectors = [injector];
	    error.constructResolvingMessage = constructResolvingMessage;
	    error[ERROR_ORIGINAL_ERROR] = originalError;
	    return error;
	}
	function addKey(injector, key) {
	    this.injectors.push(injector);
	    this.keys.push(key);
	    // Note: This updated message won't be reflected in the `.stack` property
	    this.message = this.constructResolvingMessage(this.keys);
	}
	/**
	 * Thrown when trying to retrieve a dependency by key from {@link Injector}, but the
	 * {@link Injector} does not have a {@link Provider} for the given key.
	 *
	 * @usageNotes
	 * ### Example
	 *
	 * ```typescript
	 * class A {
	 *   constructor(b:B) {}
	 * }
	 *
	 * expect(() => Injector.resolveAndCreate([A])).toThrowError();
	 * ```
	 */
	function noProviderError(injector, key) {
	    return injectionError(injector, key, function (keys) {
	        var first = stringify$1(keys[0].token);
	        return "No provider for " + first + "!" + constructResolvingPath(keys);
	    });
	}
	/**
	 * Thrown when dependencies form a cycle.
	 *
	 * @usageNotes
	 * ### Example
	 *
	 * ```typescript
	 * var injector = Injector.resolveAndCreate([
	 *   {provide: "one", useFactory: (two) => "two", deps: [[new Inject("two")]]},
	 *   {provide: "two", useFactory: (one) => "one", deps: [[new Inject("one")]]}
	 * ]);
	 *
	 * expect(() => injector.get("one")).toThrowError();
	 * ```
	 *
	 * Retrieving `A` or `B` throws a `CyclicDependencyError` as the graph above cannot be constructed.
	 */
	function cyclicDependencyError(injector, key) {
	    return injectionError(injector, key, function (keys) {
	        return "Cannot instantiate cyclic dependency!" + constructResolvingPath(keys);
	    });
	}
	/**
	 * Thrown when a constructing type returns with an Error.
	 *
	 * The `InstantiationError` class contains the original error plus the dependency graph which caused
	 * this object to be instantiated.
	 *
	 * @usageNotes
	 * ### Example
	 *
	 * ```typescript
	 * class A {
	 *   constructor() {
	 *     throw new Error('message');
	 *   }
	 * }
	 *
	 * var injector = Injector.resolveAndCreate([A]);

	 * try {
	 *   injector.get(A);
	 * } catch (e) {
	 *   expect(e instanceof InstantiationError).toBe(true);
	 *   expect(e.originalException.message).toEqual("message");
	 *   expect(e.originalStack).toBeDefined();
	 * }
	 * ```
	 */
	function instantiationError(injector, originalException, originalStack, key) {
	    return injectionError(injector, key, function (keys) {
	        var first = stringify$1(keys[0].token);
	        return originalException.message + ": Error during instantiation of " + first + "!" + constructResolvingPath(keys) + ".";
	    }, originalException);
	}
	/**
	 * Thrown when an object other then {@link Provider} (or `Type`) is passed to {@link Injector}
	 * creation.
	 *
	 * @usageNotes
	 * ### Example
	 *
	 * ```typescript
	 * expect(() => Injector.resolveAndCreate(["not a type"])).toThrowError();
	 * ```
	 */
	function invalidProviderError(provider) {
	    return Error("Invalid provider - only instances of Provider and Type are allowed, got: " + provider);
	}
	/**
	 * Thrown when the class has no annotation information.
	 *
	 * Lack of annotation information prevents the {@link Injector} from determining which dependencies
	 * need to be injected into the constructor.
	 *
	 * @usageNotes
	 * ### Example
	 *
	 * ```typescript
	 * class A {
	 *   constructor(b) {}
	 * }
	 *
	 * expect(() => Injector.resolveAndCreate([A])).toThrowError();
	 * ```
	 *
	 * This error is also thrown when the class not marked with {@link Injectable} has parameter types.
	 *
	 * ```typescript
	 * class B {}
	 *
	 * class A {
	 *   constructor(b:B) {} // no information about the parameter types of A is available at runtime.
	 * }
	 *
	 * expect(() => Injector.resolveAndCreate([A,B])).toThrowError();
	 * ```
	 *
	 */
	function noAnnotationError(typeOrFunc, params) {
	    var signature = [];
	    for (var i = 0, ii = params.length; i < ii; i++) {
	        var parameter = params[i];
	        if (!parameter || parameter.length == 0) {
	            signature.push('?');
	        }
	        else {
	            signature.push(parameter.map(stringify$1).join(' '));
	        }
	    }
	    return Error('Cannot resolve all parameters for \'' + stringify$1(typeOrFunc) + '\'(' +
	        signature.join(', ') + '). ' +
	        'Make sure that all the parameters are decorated with Inject or have valid type annotations and that \'' +
	        stringify$1(typeOrFunc) + '\' is decorated with Injectable.');
	}
	/**
	 * Thrown when getting an object by index.
	 *
	 * @usageNotes
	 * ### Example
	 *
	 * ```typescript
	 * class A {}
	 *
	 * var injector = Injector.resolveAndCreate([A]);
	 *
	 * expect(() => injector.getAt(100)).toThrowError();
	 * ```
	 *
	 */
	function outOfBoundsError(index) {
	    return Error("Index " + index + " is out-of-bounds.");
	}
	// TODO: add a working example after alpha38 is released
	/**
	 * Thrown when a multi provider and a regular provider are bound to the same token.
	 *
	 * @usageNotes
	 * ### Example
	 *
	 * ```typescript
	 * expect(() => Injector.resolveAndCreate([
	 *   { provide: "Strings", useValue: "string1", multi: true},
	 *   { provide: "Strings", useValue: "string2", multi: false}
	 * ])).toThrowError();
	 * ```
	 */
	function mixingMultiProvidersWithRegularProvidersError(provider1, provider2) {
	    return Error("Cannot mix multi providers and regular providers, got: " + provider1 + " " + provider2);
	}

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * A unique object used for retrieving items from the {@link ReflectiveInjector}.
	 *
	 * Keys have:
	 * - a system-wide unique `id`.
	 * - a `token`.
	 *
	 * `Key` is used internally by {@link ReflectiveInjector} because its system-wide unique `id` allows
	 * the
	 * injector to store created objects in a more efficient way.
	 *
	 * `Key` should not be created directly. {@link ReflectiveInjector} creates keys automatically when
	 * resolving
	 * providers.
	 *
	 * @deprecated No replacement
	 * @publicApi
	 */
	var ReflectiveKey = /** @class */ (function () {
	    /**
	     * Private
	     */
	    function ReflectiveKey(token, id) {
	        this.token = token;
	        this.id = id;
	        if (!token) {
	            throw new Error('Token must be defined!');
	        }
	        this.displayName = stringify$1(this.token);
	    }
	    /**
	     * Retrieves a `Key` for a token.
	     */
	    ReflectiveKey.get = function (token) {
	        return _globalKeyRegistry.get(resolveForwardRef$1(token));
	    };
	    Object.defineProperty(ReflectiveKey, "numberOfKeys", {
	        /**
	         * @returns the number of keys registered in the system.
	         */
	        get: function () {
	            return _globalKeyRegistry.numberOfKeys;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    return ReflectiveKey;
	}());
	var KeyRegistry = /** @class */ (function () {
	    function KeyRegistry() {
	        this._allKeys = new Map();
	    }
	    KeyRegistry.prototype.get = function (token) {
	        if (token instanceof ReflectiveKey)
	            return token;
	        if (this._allKeys.has(token)) {
	            return this._allKeys.get(token);
	        }
	        var newKey = new ReflectiveKey(token, ReflectiveKey.numberOfKeys);
	        this._allKeys.set(token, newKey);
	        return newKey;
	    };
	    Object.defineProperty(KeyRegistry.prototype, "numberOfKeys", {
	        get: function () {
	            return this._allKeys.size;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    return KeyRegistry;
	}());
	var _globalKeyRegistry = new KeyRegistry();

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * Provides access to reflection data about symbols. Used internally by Angular
	 * to power dependency injection and compilation.
	 */
	var Reflector = /** @class */ (function () {
	    function Reflector(reflectionCapabilities) {
	        this.reflectionCapabilities = reflectionCapabilities;
	    }
	    Reflector.prototype.updateCapabilities = function (caps) {
	        this.reflectionCapabilities = caps;
	    };
	    Reflector.prototype.factory = function (type) {
	        return this.reflectionCapabilities.factory(type);
	    };
	    Reflector.prototype.parameters = function (typeOrFunc) {
	        return this.reflectionCapabilities.parameters(typeOrFunc);
	    };
	    Reflector.prototype.annotations = function (typeOrFunc) {
	        return this.reflectionCapabilities.annotations(typeOrFunc);
	    };
	    Reflector.prototype.propMetadata = function (typeOrFunc) {
	        return this.reflectionCapabilities.propMetadata(typeOrFunc);
	    };
	    Reflector.prototype.hasLifecycleHook = function (type, lcProperty) {
	        return this.reflectionCapabilities.hasLifecycleHook(type, lcProperty);
	    };
	    Reflector.prototype.getter = function (name) {
	        return this.reflectionCapabilities.getter(name);
	    };
	    Reflector.prototype.setter = function (name) {
	        return this.reflectionCapabilities.setter(name);
	    };
	    Reflector.prototype.method = function (name) {
	        return this.reflectionCapabilities.method(name);
	    };
	    Reflector.prototype.importUri = function (type) {
	        return this.reflectionCapabilities.importUri(type);
	    };
	    Reflector.prototype.resourceUri = function (type) {
	        return this.reflectionCapabilities.resourceUri(type);
	    };
	    Reflector.prototype.resolveIdentifier = function (name, moduleUrl, members, runtime) {
	        return this.reflectionCapabilities.resolveIdentifier(name, moduleUrl, members, runtime);
	    };
	    Reflector.prototype.resolveEnum = function (identifier, name) {
	        return this.reflectionCapabilities.resolveEnum(identifier, name);
	    };
	    return Reflector;
	}());

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * The {@link Reflector} used internally in Angular to access metadata
	 * about symbols.
	 */
	var reflector = new Reflector(new ReflectionCapabilities());

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * `Dependency` is used by the framework to extend DI.
	 * This is internal to Angular and should not be used directly.
	 */
	var ReflectiveDependency = /** @class */ (function () {
	    function ReflectiveDependency(key, optional, visibility) {
	        this.key = key;
	        this.optional = optional;
	        this.visibility = visibility;
	    }
	    ReflectiveDependency.fromKey = function (key) {
	        return new ReflectiveDependency(key, false, null);
	    };
	    return ReflectiveDependency;
	}());
	var _EMPTY_LIST = [];
	var ResolvedReflectiveProvider_ = /** @class */ (function () {
	    function ResolvedReflectiveProvider_(key, resolvedFactories, multiProvider) {
	        this.key = key;
	        this.resolvedFactories = resolvedFactories;
	        this.multiProvider = multiProvider;
	        this.resolvedFactory = this.resolvedFactories[0];
	    }
	    return ResolvedReflectiveProvider_;
	}());
	/**
	 * An internal resolved representation of a factory function created by resolving `Provider`.
	 * @publicApi
	 */
	var ResolvedReflectiveFactory = /** @class */ (function () {
	    function ResolvedReflectiveFactory(
	    /**
	     * Factory function which can return an instance of an object represented by a key.
	     */
	    factory, 
	    /**
	     * Arguments (dependencies) to the `factory` function.
	     */
	    dependencies) {
	        this.factory = factory;
	        this.dependencies = dependencies;
	    }
	    return ResolvedReflectiveFactory;
	}());
	/**
	 * Resolve a single provider.
	 */
	function resolveReflectiveFactory(provider) {
	    var factoryFn;
	    var resolvedDeps;
	    if (provider.useClass) {
	        var useClass = resolveForwardRef$1(provider.useClass);
	        factoryFn = reflector.factory(useClass);
	        resolvedDeps = _dependenciesFor(useClass);
	    }
	    else if (provider.useExisting) {
	        factoryFn = function (aliasInstance) { return aliasInstance; };
	        resolvedDeps = [ReflectiveDependency.fromKey(ReflectiveKey.get(provider.useExisting))];
	    }
	    else if (provider.useFactory) {
	        factoryFn = provider.useFactory;
	        resolvedDeps = constructDependencies(provider.useFactory, provider.deps);
	    }
	    else {
	        factoryFn = function () { return provider.useValue; };
	        resolvedDeps = _EMPTY_LIST;
	    }
	    return new ResolvedReflectiveFactory(factoryFn, resolvedDeps);
	}
	/**
	 * Converts the `Provider` into `ResolvedProvider`.
	 *
	 * `Injector` internally only uses `ResolvedProvider`, `Provider` contains convenience provider
	 * syntax.
	 */
	function resolveReflectiveProvider(provider) {
	    return new ResolvedReflectiveProvider_(ReflectiveKey.get(provider.provide), [resolveReflectiveFactory(provider)], provider.multi || false);
	}
	/**
	 * Resolve a list of Providers.
	 */
	function resolveReflectiveProviders(providers) {
	    var normalized = _normalizeProviders(providers, []);
	    var resolved = normalized.map(resolveReflectiveProvider);
	    var resolvedProviderMap = mergeResolvedReflectiveProviders(resolved, new Map());
	    return Array.from(resolvedProviderMap.values());
	}
	/**
	 * Merges a list of ResolvedProviders into a list where each key is contained exactly once and
	 * multi providers have been merged.
	 */
	function mergeResolvedReflectiveProviders(providers, normalizedProvidersMap) {
	    for (var i = 0; i < providers.length; i++) {
	        var provider = providers[i];
	        var existing = normalizedProvidersMap.get(provider.key.id);
	        if (existing) {
	            if (provider.multiProvider !== existing.multiProvider) {
	                throw mixingMultiProvidersWithRegularProvidersError(existing, provider);
	            }
	            if (provider.multiProvider) {
	                for (var j = 0; j < provider.resolvedFactories.length; j++) {
	                    existing.resolvedFactories.push(provider.resolvedFactories[j]);
	                }
	            }
	            else {
	                normalizedProvidersMap.set(provider.key.id, provider);
	            }
	        }
	        else {
	            var resolvedProvider = void 0;
	            if (provider.multiProvider) {
	                resolvedProvider = new ResolvedReflectiveProvider_(provider.key, provider.resolvedFactories.slice(), provider.multiProvider);
	            }
	            else {
	                resolvedProvider = provider;
	            }
	            normalizedProvidersMap.set(provider.key.id, resolvedProvider);
	        }
	    }
	    return normalizedProvidersMap;
	}
	function _normalizeProviders(providers, res) {
	    providers.forEach(function (b) {
	        if (b instanceof Type$2) {
	            res.push({ provide: b, useClass: b });
	        }
	        else if (b && typeof b == 'object' && b.provide !== undefined) {
	            res.push(b);
	        }
	        else if (Array.isArray(b)) {
	            _normalizeProviders(b, res);
	        }
	        else {
	            throw invalidProviderError(b);
	        }
	    });
	    return res;
	}
	function constructDependencies(typeOrFunc, dependencies) {
	    if (!dependencies) {
	        return _dependenciesFor(typeOrFunc);
	    }
	    else {
	        var params_1 = dependencies.map(function (t) { return [t]; });
	        return dependencies.map(function (t) { return _extractToken(typeOrFunc, t, params_1); });
	    }
	}
	function _dependenciesFor(typeOrFunc) {
	    var params = reflector.parameters(typeOrFunc);
	    if (!params)
	        return [];
	    if (params.some(function (p) { return p == null; })) {
	        throw noAnnotationError(typeOrFunc, params);
	    }
	    return params.map(function (p) { return _extractToken(typeOrFunc, p, params); });
	}
	function _extractToken(typeOrFunc, metadata, params) {
	    var token = null;
	    var optional = false;
	    if (!Array.isArray(metadata)) {
	        if (metadata instanceof Inject) {
	            return _createDependency(metadata.token, optional, null);
	        }
	        else {
	            return _createDependency(metadata, optional, null);
	        }
	    }
	    var visibility = null;
	    for (var i = 0; i < metadata.length; ++i) {
	        var paramMetadata = metadata[i];
	        if (paramMetadata instanceof Type$2) {
	            token = paramMetadata;
	        }
	        else if (paramMetadata instanceof Inject) {
	            token = paramMetadata.token;
	        }
	        else if (paramMetadata instanceof Optional) {
	            optional = true;
	        }
	        else if (paramMetadata instanceof Self || paramMetadata instanceof SkipSelf) {
	            visibility = paramMetadata;
	        }
	        else if (paramMetadata instanceof InjectionToken) {
	            token = paramMetadata;
	        }
	    }
	    token = resolveForwardRef$1(token);
	    if (token != null) {
	        return _createDependency(token, optional, visibility);
	    }
	    else {
	        throw noAnnotationError(typeOrFunc, params);
	    }
	}
	function _createDependency(token, optional, visibility) {
	    return new ReflectiveDependency(ReflectiveKey.get(token), optional, visibility);
	}

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	// Threshold for the dynamic version
	var UNDEFINED = {};
	/**
	 * A ReflectiveDependency injection container used for instantiating objects and resolving
	 * dependencies.
	 *
	 * An `Injector` is a replacement for a `new` operator, which can automatically resolve the
	 * constructor dependencies.
	 *
	 * In typical use, application code asks for the dependencies in the constructor and they are
	 * resolved by the `Injector`.
	 *
	 * @usageNotes
	 * ### Example
	 *
	 * The following example creates an `Injector` configured to create `Engine` and `Car`.
	 *
	 * ```typescript
	 * @Injectable()
	 * class Engine {
	 * }
	 *
	 * @Injectable()
	 * class Car {
	 *   constructor(public engine:Engine) {}
	 * }
	 *
	 * var injector = ReflectiveInjector.resolveAndCreate([Car, Engine]);
	 * var car = injector.get(Car);
	 * expect(car instanceof Car).toBe(true);
	 * expect(car.engine instanceof Engine).toBe(true);
	 * ```
	 *
	 * Notice, we don't use the `new` operator because we explicitly want to have the `Injector`
	 * resolve all of the object's dependencies automatically.
	 *
	 * @deprecated from v5 - slow and brings in a lot of code, Use `Injector.create` instead.
	 * @publicApi
	 */
	var ReflectiveInjector = /** @class */ (function () {
	    function ReflectiveInjector() {
	    }
	    /**
	     * Turns an array of provider definitions into an array of resolved providers.
	     *
	     * A resolution is a process of flattening multiple nested arrays and converting individual
	     * providers into an array of `ResolvedReflectiveProvider`s.
	     *
	     * @usageNotes
	     * ### Example
	     *
	     * ```typescript
	     * @Injectable()
	     * class Engine {
	     * }
	     *
	     * @Injectable()
	     * class Car {
	     *   constructor(public engine:Engine) {}
	     * }
	     *
	     * var providers = ReflectiveInjector.resolve([Car, [[Engine]]]);
	     *
	     * expect(providers.length).toEqual(2);
	     *
	     * expect(providers[0] instanceof ResolvedReflectiveProvider).toBe(true);
	     * expect(providers[0].key.displayName).toBe("Car");
	     * expect(providers[0].dependencies.length).toEqual(1);
	     * expect(providers[0].factory).toBeDefined();
	     *
	     * expect(providers[1].key.displayName).toBe("Engine");
	     * });
	     * ```
	     *
	     */
	    ReflectiveInjector.resolve = function (providers) {
	        return resolveReflectiveProviders(providers);
	    };
	    /**
	     * Resolves an array of providers and creates an injector from those providers.
	     *
	     * The passed-in providers can be an array of `Type`, `Provider`,
	     * or a recursive array of more providers.
	     *
	     * @usageNotes
	     * ### Example
	     *
	     * ```typescript
	     * @Injectable()
	     * class Engine {
	     * }
	     *
	     * @Injectable()
	     * class Car {
	     *   constructor(public engine:Engine) {}
	     * }
	     *
	     * var injector = ReflectiveInjector.resolveAndCreate([Car, Engine]);
	     * expect(injector.get(Car) instanceof Car).toBe(true);
	     * ```
	     */
	    ReflectiveInjector.resolveAndCreate = function (providers, parent) {
	        var ResolvedReflectiveProviders = ReflectiveInjector.resolve(providers);
	        return ReflectiveInjector.fromResolvedProviders(ResolvedReflectiveProviders, parent);
	    };
	    /**
	     * Creates an injector from previously resolved providers.
	     *
	     * This API is the recommended way to construct injectors in performance-sensitive parts.
	     *
	     * @usageNotes
	     * ### Example
	     *
	     * ```typescript
	     * @Injectable()
	     * class Engine {
	     * }
	     *
	     * @Injectable()
	     * class Car {
	     *   constructor(public engine:Engine) {}
	     * }
	     *
	     * var providers = ReflectiveInjector.resolve([Car, Engine]);
	     * var injector = ReflectiveInjector.fromResolvedProviders(providers);
	     * expect(injector.get(Car) instanceof Car).toBe(true);
	     * ```
	     */
	    ReflectiveInjector.fromResolvedProviders = function (providers, parent) {
	        return new ReflectiveInjector_(providers, parent);
	    };
	    return ReflectiveInjector;
	}());
	var ReflectiveInjector_ = /** @class */ (function () {
	    /**
	     * Private
	     */
	    function ReflectiveInjector_(_providers, _parent) {
	        /** @internal */
	        this._constructionCounter = 0;
	        this._providers = _providers;
	        this.parent = _parent || null;
	        var len = _providers.length;
	        this.keyIds = [];
	        this.objs = [];
	        for (var i = 0; i < len; i++) {
	            this.keyIds[i] = _providers[i].key.id;
	            this.objs[i] = UNDEFINED;
	        }
	    }
	    ReflectiveInjector_.prototype.get = function (token, notFoundValue) {
	        if (notFoundValue === void 0) { notFoundValue = THROW_IF_NOT_FOUND; }
	        return this._getByKey(ReflectiveKey.get(token), null, notFoundValue);
	    };
	    ReflectiveInjector_.prototype.resolveAndCreateChild = function (providers) {
	        var ResolvedReflectiveProviders = ReflectiveInjector.resolve(providers);
	        return this.createChildFromResolved(ResolvedReflectiveProviders);
	    };
	    ReflectiveInjector_.prototype.createChildFromResolved = function (providers) {
	        var inj = new ReflectiveInjector_(providers);
	        inj.parent = this;
	        return inj;
	    };
	    ReflectiveInjector_.prototype.resolveAndInstantiate = function (provider) {
	        return this.instantiateResolved(ReflectiveInjector.resolve([provider])[0]);
	    };
	    ReflectiveInjector_.prototype.instantiateResolved = function (provider) {
	        return this._instantiateProvider(provider);
	    };
	    ReflectiveInjector_.prototype.getProviderAtIndex = function (index) {
	        if (index < 0 || index >= this._providers.length) {
	            throw outOfBoundsError(index);
	        }
	        return this._providers[index];
	    };
	    /** @internal */
	    ReflectiveInjector_.prototype._new = function (provider) {
	        if (this._constructionCounter++ > this._getMaxNumberOfObjects()) {
	            throw cyclicDependencyError(this, provider.key);
	        }
	        return this._instantiateProvider(provider);
	    };
	    ReflectiveInjector_.prototype._getMaxNumberOfObjects = function () {
	        return this.objs.length;
	    };
	    ReflectiveInjector_.prototype._instantiateProvider = function (provider) {
	        if (provider.multiProvider) {
	            var res = [];
	            for (var i = 0; i < provider.resolvedFactories.length; ++i) {
	                res[i] = this._instantiate(provider, provider.resolvedFactories[i]);
	            }
	            return res;
	        }
	        else {
	            return this._instantiate(provider, provider.resolvedFactories[0]);
	        }
	    };
	    ReflectiveInjector_.prototype._instantiate = function (provider, ResolvedReflectiveFactory) {
	        var _this = this;
	        var factory = ResolvedReflectiveFactory.factory;
	        var deps;
	        try {
	            deps =
	                ResolvedReflectiveFactory.dependencies.map(function (dep) { return _this._getByReflectiveDependency(dep); });
	        }
	        catch (e) {
	            if (e.addKey) {
	                e.addKey(this, provider.key);
	            }
	            throw e;
	        }
	        var obj;
	        try {
	            obj = factory.apply(void 0, __spread(deps));
	        }
	        catch (e) {
	            throw instantiationError(this, e, e.stack, provider.key);
	        }
	        return obj;
	    };
	    ReflectiveInjector_.prototype._getByReflectiveDependency = function (dep) {
	        return this._getByKey(dep.key, dep.visibility, dep.optional ? null : THROW_IF_NOT_FOUND);
	    };
	    ReflectiveInjector_.prototype._getByKey = function (key, visibility, notFoundValue) {
	        if (key === ReflectiveInjector_.INJECTOR_KEY) {
	            return this;
	        }
	        if (visibility instanceof Self) {
	            return this._getByKeySelf(key, notFoundValue);
	        }
	        else {
	            return this._getByKeyDefault(key, notFoundValue, visibility);
	        }
	    };
	    ReflectiveInjector_.prototype._getObjByKeyId = function (keyId) {
	        for (var i = 0; i < this.keyIds.length; i++) {
	            if (this.keyIds[i] === keyId) {
	                if (this.objs[i] === UNDEFINED) {
	                    this.objs[i] = this._new(this._providers[i]);
	                }
	                return this.objs[i];
	            }
	        }
	        return UNDEFINED;
	    };
	    /** @internal */
	    ReflectiveInjector_.prototype._throwOrNull = function (key, notFoundValue) {
	        if (notFoundValue !== THROW_IF_NOT_FOUND) {
	            return notFoundValue;
	        }
	        else {
	            throw noProviderError(this, key);
	        }
	    };
	    /** @internal */
	    ReflectiveInjector_.prototype._getByKeySelf = function (key, notFoundValue) {
	        var obj = this._getObjByKeyId(key.id);
	        return (obj !== UNDEFINED) ? obj : this._throwOrNull(key, notFoundValue);
	    };
	    /** @internal */
	    ReflectiveInjector_.prototype._getByKeyDefault = function (key, notFoundValue, visibility) {
	        var inj;
	        if (visibility instanceof SkipSelf) {
	            inj = this.parent;
	        }
	        else {
	            inj = this;
	        }
	        while (inj instanceof ReflectiveInjector_) {
	            var inj_ = inj;
	            var obj = inj_._getObjByKeyId(key.id);
	            if (obj !== UNDEFINED)
	                return obj;
	            inj = inj_.parent;
	        }
	        if (inj !== null) {
	            return inj.get(key.token, notFoundValue);
	        }
	        else {
	            return this._throwOrNull(key, notFoundValue);
	        }
	    };
	    Object.defineProperty(ReflectiveInjector_.prototype, "displayName", {
	        get: function () {
	            var providers = _mapProviders(this, function (b) { return ' "' + b.key.displayName + '" '; })
	                .join(', ');
	            return "ReflectiveInjector(providers: [" + providers + "])";
	        },
	        enumerable: true,
	        configurable: true
	    });
	    ReflectiveInjector_.prototype.toString = function () {
	        return this.displayName;
	    };
	    ReflectiveInjector_.INJECTOR_KEY = ReflectiveKey.get(Injector);
	    return ReflectiveInjector_;
	}());
	function _mapProviders(injector, fn) {
	    var res = [];
	    for (var i = 0; i < injector._providers.length; ++i) {
	        res[i] = fn(injector.getProviderAtIndex(i));
	    }
	    return res;
	}

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * A DI token that you can use to create a virtual [provider](guide/glossary#provider)
	 * that will populate the `entryComponents` field of components and NgModules
	 * based on its `useValue` property value.
	 * All components that are referenced in the `useValue` value (either directly
	 * or in a nested array or map) are added to the `entryComponents` property.
	 *
	 * @usageNotes
	 *
	 * The following example shows how the router can populate the `entryComponents`
	 * field of an NgModule based on a router configuration that refers
	 * to components.
	 *
	 * ```typescript
	 * // helper function inside the router
	 * function provideRoutes(routes) {
	 *   return [
	 *     {provide: ROUTES, useValue: routes},
	 *     {provide: ANALYZE_FOR_ENTRY_COMPONENTS, useValue: routes, multi: true}
	 *   ];
	 * }
	 *
	 * // user code
	 * let routes = [
	 *   {path: '/root', component: RootComp},
	 *   {path: '/teams', component: TeamsComp}
	 * ];
	 *
	 * @NgModule({
	 *   providers: [provideRoutes(routes)]
	 * })
	 * class ModuleWithRoutes {}
	 * ```
	 *
	 * @publicApi
	 * @deprecated Since 9.0.0. With Ivy, this property is no longer necessary.
	 */
	var ANALYZE_FOR_ENTRY_COMPONENTS = new InjectionToken('AnalyzeForEntryComponents');
	/**
	 * Base class for query metadata.
	 *
	 * @see `ContentChildren`.
	 * @see `ContentChild`.
	 * @see `ViewChildren`.
	 * @see `ViewChild`.
	 *
	 * @publicApi
	 */
	var Query = /** @class */ (function () {
	    function Query() {
	    }
	    return Query;
	}());
	var Éµ0$a = function (selector, data) {
	    if (data === void 0) { data = {}; }
	    return (__assign({ selector: selector, first: false, isViewQuery: false, descendants: false }, data));
	};
	/**
	 * ContentChildren decorator and metadata.
	 *
	 *
	 * @Annotation
	 * @publicApi
	 */
	var ContentChildren = makePropDecorator('ContentChildren', Éµ0$a, Query);
	var Éµ1$2 = function (selector, data) {
	    if (data === void 0) { data = {}; }
	    return (__assign({ selector: selector, first: true, isViewQuery: false, descendants: true }, data));
	};
	/**
	 * ContentChild decorator and metadata.
	 *
	 *
	 * @Annotation
	 *
	 * @publicApi
	 */
	var ContentChild = makePropDecorator('ContentChild', Éµ1$2, Query);
	var Éµ2 = function (selector, data) {
	    if (data === void 0) { data = {}; }
	    return (__assign({ selector: selector, first: false, isViewQuery: true, descendants: true }, data));
	};
	/**
	 * ViewChildren decorator and metadata.
	 *
	 * @Annotation
	 * @publicApi
	 */
	var ViewChildren = makePropDecorator('ViewChildren', Éµ2, Query);
	var Éµ3 = function (selector, data) {
	    return (__assign({ selector: selector, first: true, isViewQuery: true, descendants: true }, data));
	};
	/**
	 * ViewChild decorator and metadata.
	 *
	 * @Annotation
	 * @publicApi
	 */
	var ViewChild = makePropDecorator('ViewChild', Éµ3, Query);

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * Compute the static styling (class/style) from `TAttributes`.
	 *
	 * This function should be called during `firstCreatePass` only.
	 *
	 * @param tNode The `TNode` into which the styling information should be loaded.
	 * @param attrs `TAttributes` containing the styling information.
	 */
	function computeStaticStyling(tNode, attrs) {
	    ngDevMode &&
	        assertFirstCreatePass(getTView(), 'Expecting to be called in first template pass only');
	    var styles = tNode.styles;
	    var classes = tNode.classes;
	    var mode = 0;
	    for (var i = 0; i < attrs.length; i++) {
	        var value = attrs[i];
	        if (typeof value === 'number') {
	            mode = value;
	        }
	        else if (mode == 1 /* Classes */) {
	            classes = concatStringsWithSpace(classes, value);
	        }
	        else if (mode == 2 /* Styles */) {
	            var style = value;
	            var styleValue = attrs[++i];
	            styles = concatStringsWithSpace(styles, style + ': ' + styleValue + ';');
	        }
	    }
	    styles !== null && (tNode.styles = styles);
	    classes !== null && (tNode.classes = classes);
	}

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	var _symbolIterator = null;
	function getSymbolIterator$1() {
	    if (!_symbolIterator) {
	        var Symbol_1 = _global$1['Symbol'];
	        if (Symbol_1 && Symbol_1.iterator) {
	            _symbolIterator = Symbol_1.iterator;
	        }
	        else {
	            // es6-shim specific logic
	            var keys = Object.getOwnPropertyNames(Map.prototype);
	            for (var i = 0; i < keys.length; ++i) {
	                var key = keys[i];
	                if (key !== 'entries' && key !== 'size' &&
	                    Map.prototype[key] === Map.prototype['entries']) {
	                    _symbolIterator = key;
	                }
	            }
	        }
	    }
	    return _symbolIterator;
	}

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	// JS has NaN !== NaN
	function looseIdentical(a, b) {
	    return a === b || typeof a === 'number' && typeof b === 'number' && isNaN(a) && isNaN(b);
	}

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	function devModeEqual$1(a, b) {
	    var isListLikeIterableA = isListLikeIterable$1(a);
	    var isListLikeIterableB = isListLikeIterable$1(b);
	    if (isListLikeIterableA && isListLikeIterableB) {
	        return areIterablesEqual$1(a, b, devModeEqual$1);
	    }
	    else {
	        var isAObject = a && (typeof a === 'object' || typeof a === 'function');
	        var isBObject = b && (typeof b === 'object' || typeof b === 'function');
	        if (!isListLikeIterableA && isAObject && !isListLikeIterableB && isBObject) {
	            return true;
	        }
	        else {
	            return looseIdentical(a, b);
	        }
	    }
	}
	/**
	 * Indicates that the result of a {@link Pipe} transformation has changed even though the
	 * reference has not changed.
	 *
	 * Wrapped values are unwrapped automatically during the change detection, and the unwrapped value
	 * is stored.
	 *
	 * Example:
	 *
	 * ```
	 * if (this._latestValue === this._latestReturnedValue) {
	 *    return this._latestReturnedValue;
	 *  } else {
	 *    this._latestReturnedValue = this._latestValue;
	 *    return WrappedValue.wrap(this._latestValue); // this will force update
	 *  }
	 * ```
	 *
	 * @publicApi
	 */
	var WrappedValue = /** @class */ (function () {
	    function WrappedValue(value) {
	        this.wrapped = value;
	    }
	    /** Creates a wrapped value. */
	    WrappedValue.wrap = function (value) {
	        return new WrappedValue(value);
	    };
	    /**
	     * Returns the underlying value of a wrapped value.
	     * Returns the given `value` when it is not wrapped.
	     **/
	    WrappedValue.unwrap = function (value) {
	        return WrappedValue.isWrapped(value) ? value.wrapped : value;
	    };
	    /** Returns true if `value` is a wrapped value. */
	    WrappedValue.isWrapped = function (value) {
	        return value instanceof WrappedValue;
	    };
	    return WrappedValue;
	}());
	function isListLikeIterable$1(obj) {
	    if (!isJsObject$1(obj))
	        return false;
	    return Array.isArray(obj) ||
	        (!(obj instanceof Map) && // JS Map are iterables but return entries as [k, v]
	            getSymbolIterator$1() in obj); // JS Iterable have a Symbol.iterator prop
	}
	function areIterablesEqual$1(a, b, comparator) {
	    var iterator1 = a[getSymbolIterator$1()]();
	    var iterator2 = b[getSymbolIterator$1()]();
	    while (true) {
	        var item1 = iterator1.next();
	        var item2 = iterator2.next();
	        if (item1.done && item2.done)
	            return true;
	        if (item1.done || item2.done)
	            return false;
	        if (!comparator(item1.value, item2.value))
	            return false;
	    }
	}
	function iterateListLike$1(obj, fn) {
	    if (Array.isArray(obj)) {
	        for (var i = 0; i < obj.length; i++) {
	            fn(obj[i]);
	        }
	    }
	    else {
	        var iterator = obj[getSymbolIterator$1()]();
	        var item = void 0;
	        while (!((item = iterator.next()).done)) {
	            fn(item.value);
	        }
	    }
	}
	function isJsObject$1(o) {
	    return o !== null && (typeof o === 'function' || typeof o === 'object');
	}

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * Determine if the argument is shaped like a Promise
	 */
	function isPromise$2(obj) {
	    // allow any Promise/A+ compliant thenable.
	    // It's up to the caller to ensure that obj.then conforms to the spec
	    return !!obj && typeof obj.then === 'function';
	}
	/**
	 * Determine if the argument is an Observable
	 */
	function isObservable$1(obj) {
	    // TODO: use isObservable once we update pass rxjs 6.1
	    // https://github.com/ReactiveX/rxjs/blob/master/CHANGELOG.md#610-2018-05-03
	    return !!obj && typeof obj.subscribe === 'function';
	}

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * This file contains reuseable "empty" symbols that can be used as default return values
	 * in different parts of the rendering code. Because the same symbols are returned, this
	 * allows for identity checks against these values to be consistently used by the framework
	 * code.
	 */
	var EMPTY_OBJ$1 = {};
	var EMPTY_ARRAY$3 = [];
	// freezing the values prevents any code from accidentally inserting new values in
	if ((typeof ngDevMode === 'undefined' || ngDevMode) && initNgDevMode()) {
	    // These property accesses can be ignored because ngDevMode will be set to false
	    // when optimizing code and the whole if statement will be dropped.
	    // tslint:disable-next-line:no-toplevel-property-access
	    Object.freeze(EMPTY_OBJ$1);
	    // tslint:disable-next-line:no-toplevel-property-access
	    Object.freeze(EMPTY_ARRAY$3);
	}

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * Retrieves the component instance associated with a given DOM element.
	 *
	 * @usageNotes
	 * Given the following DOM structure:
	 * ```html
	 * <my-app>
	 *   <div>
	 *     <child-comp></child-comp>
	 *   </div>
	 * </my-app>
	 * ```
	 * Calling `getComponent` on `<child-comp>` will return the instance of `ChildComponent`
	 * associated with this DOM element.
	 *
	 * Calling the function on `<my-app>` will return the `MyApp` instance.
	 *
	 *
	 * @param element DOM element from which the component should be retrieved.
	 * @returns Component instance associated with the element or `null` if there
	 *    is no component associated with it.
	 *
	 * @publicApi
	 * @globalApi ng
	 */
	function getComponent(element) {
	    assertDomElement(element);
	    var context = loadLContext(element, false);
	    if (context === null)
	        return null;
	    if (context.component === undefined) {
	        context.component = getComponentAtNodeIndex(context.nodeIndex, context.lView);
	    }
	    return context.component;
	}
	/**
	 * If inside an embedded view (e.g. `*ngIf` or `*ngFor`), retrieves the context of the embedded
	 * view that the element is part of. Otherwise retrieves the instance of the component whose view
	 * owns the element (in this case, the result is the same as calling `getOwningComponent`).
	 *
	 * @param element Element for which to get the surrounding component instance.
	 * @returns Instance of the component that is around the element or null if the element isn't
	 *    inside any component.
	 *
	 * @publicApi
	 * @globalApi ng
	 */
	function getContext(element) {
	    assertDomElement(element);
	    var context = loadLContext(element, false);
	    return context === null ? null : context.lView[CONTEXT];
	}
	/**
	 * Retrieves the component instance whose view contains the DOM element.
	 *
	 * For example, if `<child-comp>` is used in the template of `<app-comp>`
	 * (i.e. a `ViewChild` of `<app-comp>`), calling `getOwningComponent` on `<child-comp>`
	 * would return `<app-comp>`.
	 *
	 * @param elementOrDir DOM element, component or directive instance
	 *    for which to retrieve the root components.
	 * @returns Component instance whose view owns the DOM element or null if the element is not
	 *    part of a component view.
	 *
	 * @publicApi
	 * @globalApi ng
	 */
	function getOwningComponent(elementOrDir) {
	    var context = loadLContext(elementOrDir, false);
	    if (context === null)
	        return null;
	    var lView = context.lView;
	    var parent;
	    ngDevMode && assertLView(lView);
	    while (lView[HOST] === null && (parent = getLViewParent(lView))) {
	        // As long as lView[HOST] is null we know we are part of sub-template such as `*ngIf`
	        lView = parent;
	    }
	    return lView[FLAGS] & 512 /* IsRoot */ ? null : lView[CONTEXT];
	}
	/**
	 * Retrieves an `Injector` associated with an element, component or directive instance.
	 *
	 * @param elementOrDir DOM element, component or directive instance for which to
	 *    retrieve the injector.
	 * @returns Injector associated with the element, component or directive instance.
	 *
	 * @publicApi
	 * @globalApi ng
	 */
	function getInjector(elementOrDir) {
	    var context = loadLContext(elementOrDir, false);
	    if (context === null)
	        return Injector.NULL;
	    var tNode = context.lView[TVIEW].data[context.nodeIndex];
	    return new NodeInjector(tNode, context.lView);
	}
	/**
	 * Retrieve a set of injection tokens at a given DOM node.
	 *
	 * @param element Element for which the injection tokens should be retrieved.
	 */
	function getInjectionTokens(element) {
	    var context = loadLContext(element, false);
	    if (context === null)
	        return [];
	    var lView = context.lView;
	    var tView = lView[TVIEW];
	    var tNode = tView.data[context.nodeIndex];
	    var providerTokens = [];
	    var startIndex = tNode.providerIndexes & 65535 /* ProvidersStartIndexMask */;
	    var endIndex = tNode.directiveEnd;
	    for (var i = startIndex; i < endIndex; i++) {
	        var value = tView.data[i];
	        if (isDirectiveDefHack(value)) {
	            // The fact that we sometimes store Type and sometimes DirectiveDef in this location is a
	            // design flaw.  We should always store same type so that we can be monomorphic. The issue
	            // is that for Components/Directives we store the def instead the type. The correct behavior
	            // is that we should always be storing injectable type in this location.
	            value = value.type;
	        }
	        providerTokens.push(value);
	    }
	    return providerTokens;
	}
	function loadLContext(target, throwOnNotFound) {
	    if (throwOnNotFound === void 0) { throwOnNotFound = true; }
	    var context = getLContext(target);
	    if (!context && throwOnNotFound) {
	        throw new Error(ngDevMode ? "Unable to find context associated with " + stringifyForError(target) :
	            'Invalid ng target');
	    }
	    return context;
	}
	/**
	 * Retrieve map of local references.
	 *
	 * The references are retrieved as a map of local reference name to element or directive instance.
	 *
	 * @param target DOM element, component or directive instance for which to retrieve
	 *    the local references.
	 */
	function getLocalRefs(target) {
	    var context = loadLContext(target, false);
	    if (context === null)
	        return {};
	    if (context.localRefs === undefined) {
	        context.localRefs = discoverLocalRefs(context.lView, context.nodeIndex);
	    }
	    return context.localRefs || {};
	}
	/**
	 * Retrieves a list of event listeners associated with a DOM element. The list does include host
	 * listeners, but it does not include event listeners defined outside of the Angular context
	 * (e.g. through `addEventListener`).
	 *
	 * @usageNotes
	 * Given the following DOM structure:
	 * ```
	 * <my-app>
	 *   <div (click)="doSomething()"></div>
	 * </my-app>
	 *
	 * ```
	 * Calling `getListeners` on `<div>` will return an object that looks as follows:
	 * ```
	 * {
	 *   name: 'click',
	 *   element: <div>,
	 *   callback: () => doSomething(),
	 *   useCapture: false
	 * }
	 * ```
	 *
	 * @param element Element for which the DOM listeners should be retrieved.
	 * @returns Array of event listeners on the DOM element.
	 *
	 * @publicApi
	 * @globalApi ng
	 */
	function getListeners(element) {
	    assertDomElement(element);
	    var lContext = loadLContext(element, false);
	    if (lContext === null)
	        return [];
	    var lView = lContext.lView;
	    var tView = lView[TVIEW];
	    var lCleanup = lView[CLEANUP];
	    var tCleanup = tView.cleanup;
	    var listeners = [];
	    if (tCleanup && lCleanup) {
	        for (var i = 0; i < tCleanup.length;) {
	            var firstParam = tCleanup[i++];
	            var secondParam = tCleanup[i++];
	            if (typeof firstParam === 'string') {
	                var name_1 = firstParam;
	                var listenerElement = unwrapRNode(lView[secondParam]);
	                var callback = lCleanup[tCleanup[i++]];
	                var useCaptureOrIndx = tCleanup[i++];
	                // if useCaptureOrIndx is boolean then report it as is.
	                // if useCaptureOrIndx is positive number then it in unsubscribe method
	                // if useCaptureOrIndx is negative number then it is a Subscription
	                var type = (typeof useCaptureOrIndx === 'boolean' || useCaptureOrIndx >= 0) ? 'dom' : 'output';
	                var useCapture = typeof useCaptureOrIndx === 'boolean' ? useCaptureOrIndx : false;
	                if (element == listenerElement) {
	                    listeners.push({ element: element, name: name_1, callback: callback, useCapture: useCapture, type: type });
	                }
	            }
	        }
	    }
	    listeners.sort(sortListeners);
	    return listeners;
	}
	function sortListeners(a, b) {
	    if (a.name == b.name)
	        return 0;
	    return a.name < b.name ? -1 : 1;
	}
	/**
	 * This function should not exist because it is megamorphic and only mostly correct.
	 *
	 * See call site for more info.
	 */
	function isDirectiveDefHack(obj) {
	    return obj.type !== undefined && obj.template !== undefined && obj.declaredInputs !== undefined;
	}
	/** Asserts that a value is a DOM Element. */
	function assertDomElement(value) {
	    if (typeof Element !== 'undefined' && !(value instanceof Element)) {
	        throw new Error('Expecting instance of DOM Element');
	    }
	}
	/**
	 * Creates the root component view and the root component node.
	 *
	 * @param rNode Render host element.
	 * @param def ComponentDef
	 * @param rootView The parent view where the host node is stored
	 * @param hostRenderer The current renderer
	 * @param sanitizer The sanitizer, if provided
	 *
	 * @returns Component view created
	 */
	function createRootComponentView(rNode, def, rootView, rendererFactory, hostRenderer, sanitizer) {
	    var tView = rootView[TVIEW];
	    ngDevMode && assertDataInRange(rootView, 0 + HEADER_OFFSET);
	    rootView[0 + HEADER_OFFSET] = rNode;
	    var tNode = getOrCreateTNode(tView, null, 0, 3 /* Element */, null, null);
	    var mergedAttrs = tNode.mergedAttrs = def.hostAttrs;
	    if (mergedAttrs !== null) {
	        computeStaticStyling(tNode, mergedAttrs);
	        if (rNode !== null) {
	            setUpAttributes(hostRenderer, rNode, mergedAttrs);
	            if (tNode.classes !== null) {
	                writeDirectClass(hostRenderer, rNode, tNode.classes);
	            }
	            if (tNode.styles !== null) {
	                writeDirectStyle(hostRenderer, rNode, tNode.styles);
	            }
	        }
	    }
	    var viewRenderer = rendererFactory.createRenderer(rNode, def);
	    var componentView = createLView(rootView, getOrCreateTComponentView(def), null, def.onPush ? 64 /* Dirty */ : 16 /* CheckAlways */, rootView[HEADER_OFFSET], tNode, rendererFactory, viewRenderer, sanitizer);
	    if (tView.firstCreatePass) {
	        diPublicInInjector(getOrCreateNodeInjectorForNode(tNode, rootView), tView, def.type);
	        markAsComponentHost(tView, tNode);
	        initTNodeFlags(tNode, rootView.length, 1);
	    }
	    addToViewTree(rootView, componentView);
	    // Store component view at node index, with node as the HOST
	    return rootView[HEADER_OFFSET] = componentView;
	}
	/**
	 * Creates a root component and sets it up with features and host bindings. Shared by
	 * renderComponent() and ViewContainerRef.createComponent().
	 */
	function createRootComponent(componentView, componentDef, rootLView, rootContext, hostFeatures) {
	    var tView = rootLView[TVIEW];
	    // Create directive instance with factory() and store at next index in viewData
	    var component = instantiateRootComponent(tView, rootLView, componentDef);
	    rootContext.components.push(component);
	    componentView[CONTEXT] = component;
	    hostFeatures && hostFeatures.forEach(function (feature) { return feature(component, componentDef); });
	    // We want to generate an empty QueryList for root content queries for backwards
	    // compatibility with ViewEngine.
	    if (componentDef.contentQueries) {
	        componentDef.contentQueries(1 /* Create */, component, rootLView.length - 1);
	    }
	    var rootTNode = getPreviousOrParentTNode();
	    if (tView.firstCreatePass &&
	        (componentDef.hostBindings !== null || componentDef.hostAttrs !== null)) {
	        var elementIndex = rootTNode.index - HEADER_OFFSET;
	        setSelectedIndex(elementIndex);
	        var rootTView = rootLView[TVIEW];
	        addHostBindingsToExpandoInstructions(rootTView, componentDef);
	        growHostVarsSpace(rootTView, rootLView, componentDef.hostVars);
	        invokeHostBindingsInCreationMode(componentDef, component);
	    }
	    return component;
	}
	function createRootContext(scheduler, playerHandler) {
	    return {
	        components: [],
	        scheduler: scheduler || defaultScheduler,
	        clean: CLEAN_PROMISE,
	        playerHandler: playerHandler || null,
	        flags: 0 /* Empty */
	    };
	}
	/**
	 * Used to enable lifecycle hooks on the root component.
	 *
	 * Include this feature when calling `renderComponent` if the root component
	 * you are rendering has lifecycle hooks defined. Otherwise, the hooks won't
	 * be called properly.
	 *
	 * Example:
	 *
	 * ```
	 * renderComponent(AppComponent, {hostFeatures: [LifecycleHooksFeature]});
	 * ```
	 */
	function LifecycleHooksFeature(component, def) {
	    var rootTView = readPatchedLView(component)[TVIEW];
	    var dirIndex = rootTView.data.length - 1;
	    // TODO(misko): replace `as TNode` with createTNode call. (needs refactoring to lose dep on
	    // LNode).
	    registerPostOrderHooks(rootTView, { directiveStart: dirIndex, directiveEnd: dirIndex + 1 });
	}

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * Represents a basic change from a previous to a new value for a single
	 * property on a directive instance. Passed as a value in a
	 * {@link SimpleChanges} object to the `ngOnChanges` hook.
	 *
	 * @see `OnChanges`
	 *
	 * @publicApi
	 */
	var SimpleChange = /** @class */ (function () {
	    function SimpleChange(previousValue, currentValue, firstChange) {
	        this.previousValue = previousValue;
	        this.currentValue = currentValue;
	        this.firstChange = firstChange;
	    }
	    /**
	     * Check whether the new value is the first value assigned.
	     */
	    SimpleChange.prototype.isFirstChange = function () {
	        return this.firstChange;
	    };
	    return SimpleChange;
	}());

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * Represents a component created by a `ComponentFactory`.
	 * Provides access to the component instance and related objects,
	 * and provides the means of destroying the instance.
	 *
	 * @publicApi
	 */
	var ComponentRef = /** @class */ (function () {
	    function ComponentRef() {
	    }
	    return ComponentRef;
	}());
	/**
	 * Base class for a factory that can create a component dynamically.
	 * Instantiate a factory for a given type of component with `resolveComponentFactory()`.
	 * Use the resulting `ComponentFactory.create()` method to create a component of that type.
	 *
	 * @see [Dynamic Components](guide/dynamic-component-loader)
	 *
	 * @publicApi
	 */
	var ComponentFactory = /** @class */ (function () {
	    function ComponentFactory() {
	    }
	    return ComponentFactory;
	}());

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	function noComponentFactoryError(component) {
	    var error = Error("No component factory found for " + stringify$1(component) + ". Did you add it to @NgModule.entryComponents?");
	    error[ERROR_COMPONENT] = component;
	    return error;
	}
	var ERROR_COMPONENT = 'ngComponent';
	var _NullComponentFactoryResolver = /** @class */ (function () {
	    function _NullComponentFactoryResolver() {
	    }
	    _NullComponentFactoryResolver.prototype.resolveComponentFactory = function (component) {
	        throw noComponentFactoryError(component);
	    };
	    return _NullComponentFactoryResolver;
	}());
	/**
	 * A simple registry that maps `Components` to generated `ComponentFactory` classes
	 * that can be used to create instances of components.
	 * Use to obtain the factory for a given component type,
	 * then use the factory's `create()` method to create a component of that type.
	 *
	 * @see [Dynamic Components](guide/dynamic-component-loader)
	 * @publicApi
	 */
	var ComponentFactoryResolver = /** @class */ (function () {
	    function ComponentFactoryResolver() {
	    }
	    ComponentFactoryResolver.NULL = new _NullComponentFactoryResolver();
	    return ComponentFactoryResolver;
	}());
	var CodegenComponentFactoryResolver = /** @class */ (function () {
	    function CodegenComponentFactoryResolver(factories, _parent, _ngModule) {
	        this._parent = _parent;
	        this._ngModule = _ngModule;
	        this._factories = new Map();
	        for (var i = 0; i < factories.length; i++) {
	            var factory = factories[i];
	            this._factories.set(factory.componentType, factory);
	        }
	    }
	    CodegenComponentFactoryResolver.prototype.resolveComponentFactory = function (component) {
	        var factory = this._factories.get(component);
	        if (!factory && this._parent) {
	            factory = this._parent.resolveComponentFactory(component);
	        }
	        if (!factory) {
	            throw noComponentFactoryError(component);
	        }
	        return new ComponentFactoryBoundToModule(factory, this._ngModule);
	    };
	    return CodegenComponentFactoryResolver;
	}());
	var ComponentFactoryBoundToModule = /** @class */ (function (_super) {
	    __extends(ComponentFactoryBoundToModule, _super);
	    function ComponentFactoryBoundToModule(factory, ngModule) {
	        var _this = _super.call(this) || this;
	        _this.factory = factory;
	        _this.ngModule = ngModule;
	        _this.selector = factory.selector;
	        _this.componentType = factory.componentType;
	        _this.ngContentSelectors = factory.ngContentSelectors;
	        _this.inputs = factory.inputs;
	        _this.outputs = factory.outputs;
	        return _this;
	    }
	    ComponentFactoryBoundToModule.prototype.create = function (injector, projectableNodes, rootSelectorOrNode, ngModule) {
	        return this.factory.create(injector, projectableNodes, rootSelectorOrNode, ngModule || this.ngModule);
	    };
	    return ComponentFactoryBoundToModule;
	}(ComponentFactory));

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	function noop$1() {
	    var args = [];
	    for (var _i = 0; _i < arguments.length; _i++) {
	        args[_i] = arguments[_i];
	    }
	    // Do nothing.
	}

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * A wrapper around a native element inside of a View.
	 *
	 * An `ElementRef` is backed by a render-specific element. In the browser, this is usually a DOM
	 * element.
	 *
	 * @security Permitting direct access to the DOM can make your application more vulnerable to
	 * XSS attacks. Carefully review any use of `ElementRef` in your code. For more detail, see the
	 * [Security Guide](http://g.co/ng/security).
	 *
	 * @publicApi
	 */
	// Note: We don't expose things like `Injector`, `ViewContainer`, ... here,
	// i.e. users have to ask for what they need. With that, we can build better analysis tools
	// and could do better codegen in the future.
	var ElementRef = /** @class */ (function () {
	    function ElementRef(nativeElement) {
	        this.nativeElement = nativeElement;
	    }
	    /**
	     * @internal
	     * @nocollapse
	     */
	    ElementRef.__NG_ELEMENT_ID__ = function () { return SWITCH_ELEMENT_REF_FACTORY(ElementRef); };
	    return ElementRef;
	}());
	var SWITCH_ELEMENT_REF_FACTORY__PRE_R3__ = noop$1;
	var SWITCH_ELEMENT_REF_FACTORY = SWITCH_ELEMENT_REF_FACTORY__PRE_R3__;

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	var Renderer2Interceptor = new InjectionToken('Renderer2Interceptor');
	/**
	 * Creates and initializes a custom renderer that implements the `Renderer2` base class.
	 *
	 * @publicApi
	 */
	var RendererFactory2 = /** @class */ (function () {
	    function RendererFactory2() {
	    }
	    return RendererFactory2;
	}());
	/**
	 * Flags for renderer-specific style modifiers.
	 * @publicApi
	 */
	var RendererStyleFlags2;
	(function (RendererStyleFlags2) {
	    // TODO(misko): This needs to be refactored into a separate file so that it can be imported from
	    // `node_manipulation.ts` Currently doing the import cause resolution order to change and fails
	    // the tests. The work around is to have hard coded value in `node_manipulation.ts` for now.
	    /**
	     * Marks a style as important.
	     */
	    RendererStyleFlags2[RendererStyleFlags2["Important"] = 1] = "Important";
	    /**
	     * Marks a style as using dash case naming (this-is-dash-case).
	     */
	    RendererStyleFlags2[RendererStyleFlags2["DashCase"] = 2] = "DashCase";
	})(RendererStyleFlags2 || (RendererStyleFlags2 = {}));
	/**
	 * Extend this base class to implement custom rendering. By default, Angular
	 * renders a template into DOM. You can use custom rendering to intercept
	 * rendering calls, or to render to something other than DOM.
	 *
	 * Create your custom renderer using `RendererFactory2`.
	 *
	 * Use a custom renderer to bypass Angular's templating and
	 * make custom UI changes that can't be expressed declaratively.
	 * For example if you need to set a property or an attribute whose name is
	 * not statically known, use the `setProperty()` or
	 * `setAttribute()` method.
	 *
	 * @publicApi
	 */
	var Renderer2 = /** @class */ (function () {
	    function Renderer2() {
	    }
	    /**
	     * @internal
	     * @nocollapse
	     */
	    Renderer2.__NG_ELEMENT_ID__ = function () { return SWITCH_RENDERER2_FACTORY(); };
	    return Renderer2;
	}());
	var SWITCH_RENDERER2_FACTORY__PRE_R3__ = noop$1;
	var SWITCH_RENDERER2_FACTORY = SWITCH_RENDERER2_FACTORY__PRE_R3__;

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * Sanitizer is used by the views to sanitize potentially dangerous values.
	 *
	 * @publicApi
	 */
	var Sanitizer = /** @class */ (function () {
	    function Sanitizer() {
	    }
	    /** @nocollapse */
	    Sanitizer.Éµprov = ÉµÉµdefineInjectable({
	        token: Sanitizer,
	        providedIn: 'root',
	        factory: function () { return null; },
	    });
	    return Sanitizer;
	}());

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * @description Represents the version of Angular
	 *
	 * @publicApi
	 */
	var Version$1 = /** @class */ (function () {
	    function Version(full) {
	        this.full = full;
	        this.major = full.split('.')[0];
	        this.minor = full.split('.')[1];
	        this.patch = full.split('.').slice(2).join('.');
	    }
	    return Version;
	}());
	/**
	 * @publicApi
	 */
	var VERSION$2 = new Version$1('9.1.6');

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	var DefaultIterableDifferFactory = /** @class */ (function () {
	    function DefaultIterableDifferFactory() {
	    }
	    DefaultIterableDifferFactory.prototype.supports = function (obj) {
	        return isListLikeIterable$1(obj);
	    };
	    DefaultIterableDifferFactory.prototype.create = function (trackByFn) {
	        return new DefaultIterableDiffer(trackByFn);
	    };
	    return DefaultIterableDifferFactory;
	}());
	var trackByIdentity = function (index, item) { return item; };
	/**
	 * @deprecated v4.0.0 - Should not be part of public API.
	 * @publicApi
	 */
	var DefaultIterableDiffer = /** @class */ (function () {
	    function DefaultIterableDiffer(trackByFn) {
	        this.length = 0;
	        // Keeps track of the used records at any point in time (during & across `_check()` calls)
	        this._linkedRecords = null;
	        // Keeps track of the removed records at any point in time during `_check()` calls.
	        this._unlinkedRecords = null;
	        this._previousItHead = null;
	        this._itHead = null;
	        this._itTail = null;
	        this._additionsHead = null;
	        this._additionsTail = null;
	        this._movesHead = null;
	        this._movesTail = null;
	        this._removalsHead = null;
	        this._removalsTail = null;
	        // Keeps track of records where custom track by is the same, but item identity has changed
	        this._identityChangesHead = null;
	        this._identityChangesTail = null;
	        this._trackByFn = trackByFn || trackByIdentity;
	    }
	    DefaultIterableDiffer.prototype.forEachItem = function (fn) {
	        var record;
	        for (record = this._itHead; record !== null; record = record._next) {
	            fn(record);
	        }
	    };
	    DefaultIterableDiffer.prototype.forEachOperation = function (fn) {
	        var nextIt = this._itHead;
	        var nextRemove = this._removalsHead;
	        var addRemoveOffset = 0;
	        var moveOffsets = null;
	        while (nextIt || nextRemove) {
	            // Figure out which is the next record to process
	            // Order: remove, add, move
	            var record = !nextRemove ||
	                nextIt &&
	                    nextIt.currentIndex <
	                        getPreviousIndex(nextRemove, addRemoveOffset, moveOffsets) ?
	                nextIt :
	                nextRemove;
	            var adjPreviousIndex = getPreviousIndex(record, addRemoveOffset, moveOffsets);
	            var currentIndex = record.currentIndex;
	            // consume the item, and adjust the addRemoveOffset and update moveDistance if necessary
	            if (record === nextRemove) {
	                addRemoveOffset--;
	                nextRemove = nextRemove._nextRemoved;
	            }
	            else {
	                nextIt = nextIt._next;
	                if (record.previousIndex == null) {
	                    addRemoveOffset++;
	                }
	                else {
	                    // INVARIANT:  currentIndex < previousIndex
	                    if (!moveOffsets)
	                        moveOffsets = [];
	                    var localMovePreviousIndex = adjPreviousIndex - addRemoveOffset;
	                    var localCurrentIndex = currentIndex - addRemoveOffset;
	                    if (localMovePreviousIndex != localCurrentIndex) {
	                        for (var i = 0; i < localMovePreviousIndex; i++) {
	                            var offset = i < moveOffsets.length ? moveOffsets[i] : (moveOffsets[i] = 0);
	                            var index = offset + i;
	                            if (localCurrentIndex <= index && index < localMovePreviousIndex) {
	                                moveOffsets[i] = offset + 1;
	                            }
	                        }
	                        var previousIndex = record.previousIndex;
	                        moveOffsets[previousIndex] = localCurrentIndex - localMovePreviousIndex;
	                    }
	                }
	            }
	            if (adjPreviousIndex !== currentIndex) {
	                fn(record, adjPreviousIndex, currentIndex);
	            }
	        }
	    };
	    DefaultIterableDiffer.prototype.forEachPreviousItem = function (fn) {
	        var record;
	        for (record = this._previousItHead; record !== null; record = record._nextPrevious) {
	            fn(record);
	        }
	    };
	    DefaultIterableDiffer.prototype.forEachAddedItem = function (fn) {
	        var record;
	        for (record = this._additionsHead; record !== null; record = record._nextAdded) {
	            fn(record);
	        }
	    };
	    DefaultIterableDiffer.prototype.forEachMovedItem = function (fn) {
	        var record;
	        for (record = this._movesHead; record !== null; record = record._nextMoved) {
	            fn(record);
	        }
	    };
	    DefaultIterableDiffer.prototype.forEachRemovedItem = function (fn) {
	        var record;
	        for (record = this._removalsHead; record !== null; record = record._nextRemoved) {
	            fn(record);
	        }
	    };
	    DefaultIterableDiffer.prototype.forEachIdentityChange = function (fn) {
	        var record;
	        for (record = this._identityChangesHead; record !== null; record = record._nextIdentityChange) {
	            fn(record);
	        }
	    };
	    DefaultIterableDiffer.prototype.diff = function (collection) {
	        if (collection == null)
	            collection = [];
	        if (!isListLikeIterable$1(collection)) {
	            throw new Error("Error trying to diff '" + stringify$1(collection) + "'. Only arrays and iterables are allowed");
	        }
	        if (this.check(collection)) {
	            return this;
	        }
	        else {
	            return null;
	        }
	    };
	    DefaultIterableDiffer.prototype.onDestroy = function () { };
	    DefaultIterableDiffer.prototype.check = function (collection) {
	        var _this = this;
	        this._reset();
	        var record = this._itHead;
	        var mayBeDirty = false;
	        var index;
	        var item;
	        var itemTrackBy;
	        if (Array.isArray(collection)) {
	            this.length = collection.length;
	            for (var index_1 = 0; index_1 < this.length; index_1++) {
	                item = collection[index_1];
	                itemTrackBy = this._trackByFn(index_1, item);
	                if (record === null || !looseIdentical(record.trackById, itemTrackBy)) {
	                    record = this._mismatch(record, item, itemTrackBy, index_1);
	                    mayBeDirty = true;
	                }
	                else {
	                    if (mayBeDirty) {
	                        // TODO(misko): can we limit this to duplicates only?
	                        record = this._verifyReinsertion(record, item, itemTrackBy, index_1);
	                    }
	                    if (!looseIdentical(record.item, item))
	                        this._addIdentityChange(record, item);
	                }
	                record = record._next;
	            }
	        }
	        else {
	            index = 0;
	            iterateListLike$1(collection, function (item) {
	                itemTrackBy = _this._trackByFn(index, item);
	                if (record === null || !looseIdentical(record.trackById, itemTrackBy)) {
	                    record = _this._mismatch(record, item, itemTrackBy, index);
	                    mayBeDirty = true;
	                }
	                else {
	                    if (mayBeDirty) {
	                        // TODO(misko): can we limit this to duplicates only?
	                        record = _this._verifyReinsertion(record, item, itemTrackBy, index);
	                    }
	                    if (!looseIdentical(record.item, item))
	                        _this._addIdentityChange(record, item);
	                }
	                record = record._next;
	                index++;
	            });
	            this.length = index;
	        }
	        this._truncate(record);
	        this.collection = collection;
	        return this.isDirty;
	    };
	    Object.defineProperty(DefaultIterableDiffer.prototype, "isDirty", {
	        /* CollectionChanges is considered dirty if it has any additions, moves, removals, or identity
	         * changes.
	         */
	        get: function () {
	            return this._additionsHead !== null || this._movesHead !== null ||
	                this._removalsHead !== null || this._identityChangesHead !== null;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    /**
	     * Reset the state of the change objects to show no changes. This means set previousKey to
	     * currentKey, and clear all of the queues (additions, moves, removals).
	     * Set the previousIndexes of moved and added items to their currentIndexes
	     * Reset the list of additions, moves and removals
	     *
	     * @internal
	     */
	    DefaultIterableDiffer.prototype._reset = function () {
	        if (this.isDirty) {
	            var record = void 0;
	            var nextRecord = void 0;
	            for (record = this._previousItHead = this._itHead; record !== null; record = record._next) {
	                record._nextPrevious = record._next;
	            }
	            for (record = this._additionsHead; record !== null; record = record._nextAdded) {
	                record.previousIndex = record.currentIndex;
	            }
	            this._additionsHead = this._additionsTail = null;
	            for (record = this._movesHead; record !== null; record = nextRecord) {
	                record.previousIndex = record.currentIndex;
	                nextRecord = record._nextMoved;
	            }
	            this._movesHead = this._movesTail = null;
	            this._removalsHead = this._removalsTail = null;
	            this._identityChangesHead = this._identityChangesTail = null;
	            // TODO(vicb): when assert gets supported
	            // assert(!this.isDirty);
	        }
	    };
	    /**
	     * This is the core function which handles differences between collections.
	     *
	     * - `record` is the record which we saw at this position last time. If null then it is a new
	     *   item.
	     * - `item` is the current item in the collection
	     * - `index` is the position of the item in the collection
	     *
	     * @internal
	     */
	    DefaultIterableDiffer.prototype._mismatch = function (record, item, itemTrackBy, index) {
	        // The previous record after which we will append the current one.
	        var previousRecord;
	        if (record === null) {
	            previousRecord = this._itTail;
	        }
	        else {
	            previousRecord = record._prev;
	            // Remove the record from the collection since we know it does not match the item.
	            this._remove(record);
	        }
	        // Attempt to see if we have seen the item before.
	        record = this._linkedRecords === null ? null : this._linkedRecords.get(itemTrackBy, index);
	        if (record !== null) {
	            // We have seen this before, we need to move it forward in the collection.
	            // But first we need to check if identity changed, so we can update in view if necessary
	            if (!looseIdentical(record.item, item))
	                this._addIdentityChange(record, item);
	            this._moveAfter(record, previousRecord, index);
	        }
	        else {
	            // Never seen it, check evicted list.
	            record = this._unlinkedRecords === null ? null : this._unlinkedRecords.get(itemTrackBy, null);
	            if (record !== null) {
	                // It is an item which we have evicted earlier: reinsert it back into the list.
	                // But first we need to check if identity changed, so we can update in view if necessary
	                if (!looseIdentical(record.item, item))
	                    this._addIdentityChange(record, item);
	                this._reinsertAfter(record, previousRecord, index);
	            }
	            else {
	                // It is a new item: add it.
	                record =
	                    this._addAfter(new IterableChangeRecord_(item, itemTrackBy), previousRecord, index);
	            }
	        }
	        return record;
	    };
	    /**
	     * This check is only needed if an array contains duplicates. (Short circuit of nothing dirty)
	     *
	     * Use case: `[a, a]` => `[b, a, a]`
	     *
	     * If we did not have this check then the insertion of `b` would:
	     *   1) evict first `a`
	     *   2) insert `b` at `0` index.
	     *   3) leave `a` at index `1` as is. <-- this is wrong!
	     *   3) reinsert `a` at index 2. <-- this is wrong!
	     *
	     * The correct behavior is:
	     *   1) evict first `a`
	     *   2) insert `b` at `0` index.
	     *   3) reinsert `a` at index 1.
	     *   3) move `a` at from `1` to `2`.
	     *
	     *
	     * Double check that we have not evicted a duplicate item. We need to check if the item type may
	     * have already been removed:
	     * The insertion of b will evict the first 'a'. If we don't reinsert it now it will be reinserted
	     * at the end. Which will show up as the two 'a's switching position. This is incorrect, since a
	     * better way to think of it is as insert of 'b' rather then switch 'a' with 'b' and then add 'a'
	     * at the end.
	     *
	     * @internal
	     */
	    DefaultIterableDiffer.prototype._verifyReinsertion = function (record, item, itemTrackBy, index) {
	        var reinsertRecord = this._unlinkedRecords === null ? null : this._unlinkedRecords.get(itemTrackBy, null);
	        if (reinsertRecord !== null) {
	            record = this._reinsertAfter(reinsertRecord, record._prev, index);
	        }
	        else if (record.currentIndex != index) {
	            record.currentIndex = index;
	            this._addToMoves(record, index);
	        }
	        return record;
	    };
	    /**
	     * Get rid of any excess {@link IterableChangeRecord_}s from the previous collection
	     *
	     * - `record` The first excess {@link IterableChangeRecord_}.
	     *
	     * @internal
	     */
	    DefaultIterableDiffer.prototype._truncate = function (record) {
	        // Anything after that needs to be removed;
	        while (record !== null) {
	            var nextRecord = record._next;
	            this._addToRemovals(this._unlink(record));
	            record = nextRecord;
	        }
	        if (this._unlinkedRecords !== null) {
	            this._unlinkedRecords.clear();
	        }
	        if (this._additionsTail !== null) {
	            this._additionsTail._nextAdded = null;
	        }
	        if (this._movesTail !== null) {
	            this._movesTail._nextMoved = null;
	        }
	        if (this._itTail !== null) {
	            this._itTail._next = null;
	        }
	        if (this._removalsTail !== null) {
	            this._removalsTail._nextRemoved = null;
	        }
	        if (this._identityChangesTail !== null) {
	            this._identityChangesTail._nextIdentityChange = null;
	        }
	    };
	    /** @internal */
	    DefaultIterableDiffer.prototype._reinsertAfter = function (record, prevRecord, index) {
	        if (this._unlinkedRecords !== null) {
	            this._unlinkedRecords.remove(record);
	        }
	        var prev = record._prevRemoved;
	        var next = record._nextRemoved;
	        if (prev === null) {
	            this._removalsHead = next;
	        }
	        else {
	            prev._nextRemoved = next;
	        }
	        if (next === null) {
	            this._removalsTail = prev;
	        }
	        else {
	            next._prevRemoved = prev;
	        }
	        this._insertAfter(record, prevRecord, index);
	        this._addToMoves(record, index);
	        return record;
	    };
	    /** @internal */
	    DefaultIterableDiffer.prototype._moveAfter = function (record, prevRecord, index) {
	        this._unlink(record);
	        this._insertAfter(record, prevRecord, index);
	        this._addToMoves(record, index);
	        return record;
	    };
	    /** @internal */
	    DefaultIterableDiffer.prototype._addAfter = function (record, prevRecord, index) {
	        this._insertAfter(record, prevRecord, index);
	        if (this._additionsTail === null) {
	            // TODO(vicb):
	            // assert(this._additionsHead === null);
	            this._additionsTail = this._additionsHead = record;
	        }
	        else {
	            // TODO(vicb):
	            // assert(_additionsTail._nextAdded === null);
	            // assert(record._nextAdded === null);
	            this._additionsTail = this._additionsTail._nextAdded = record;
	        }
	        return record;
	    };
	    /** @internal */
	    DefaultIterableDiffer.prototype._insertAfter = function (record, prevRecord, index) {
	        // TODO(vicb):
	        // assert(record != prevRecord);
	        // assert(record._next === null);
	        // assert(record._prev === null);
	        var next = prevRecord === null ? this._itHead : prevRecord._next;
	        // TODO(vicb):
	        // assert(next != record);
	        // assert(prevRecord != record);
	        record._next = next;
	        record._prev = prevRecord;
	        if (next === null) {
	            this._itTail = record;
	        }
	        else {
	            next._prev = record;
	        }
	        if (prevRecord === null) {
	            this._itHead = record;
	        }
	        else {
	            prevRecord._next = record;
	        }
	        if (this._linkedRecords === null) {
	            this._linkedRecords = new _DuplicateMap();
	        }
	        this._linkedRecords.put(record);
	        record.currentIndex = index;
	        return record;
	    };
	    /** @internal */
	    DefaultIterableDiffer.prototype._remove = function (record) {
	        return this._addToRemovals(this._unlink(record));
	    };
	    /** @internal */
	    DefaultIterableDiffer.prototype._unlink = function (record) {
	        if (this._linkedRecords !== null) {
	            this._linkedRecords.remove(record);
	        }
	        var prev = record._prev;
	        var next = record._next;
	        // TODO(vicb):
	        // assert((record._prev = null) === null);
	        // assert((record._next = null) === null);
	        if (prev === null) {
	            this._itHead = next;
	        }
	        else {
	            prev._next = next;
	        }
	        if (next === null) {
	            this._itTail = prev;
	        }
	        else {
	            next._prev = prev;
	        }
	        return record;
	    };
	    /** @internal */
	    DefaultIterableDiffer.prototype._addToMoves = function (record, toIndex) {
	        // TODO(vicb):
	        // assert(record._nextMoved === null);
	        if (record.previousIndex === toIndex) {
	            return record;
	        }
	        if (this._movesTail === null) {
	            // TODO(vicb):
	            // assert(_movesHead === null);
	            this._movesTail = this._movesHead = record;
	        }
	        else {
	            // TODO(vicb):
	            // assert(_movesTail._nextMoved === null);
	            this._movesTail = this._movesTail._nextMoved = record;
	        }
	        return record;
	    };
	    DefaultIterableDiffer.prototype._addToRemovals = function (record) {
	        if (this._unlinkedRecords === null) {
	            this._unlinkedRecords = new _DuplicateMap();
	        }
	        this._unlinkedRecords.put(record);
	        record.currentIndex = null;
	        record._nextRemoved = null;
	        if (this._removalsTail === null) {
	            // TODO(vicb):
	            // assert(_removalsHead === null);
	            this._removalsTail = this._removalsHead = record;
	            record._prevRemoved = null;
	        }
	        else {
	            // TODO(vicb):
	            // assert(_removalsTail._nextRemoved === null);
	            // assert(record._nextRemoved === null);
	            record._prevRemoved = this._removalsTail;
	            this._removalsTail = this._removalsTail._nextRemoved = record;
	        }
	        return record;
	    };
	    /** @internal */
	    DefaultIterableDiffer.prototype._addIdentityChange = function (record, item) {
	        record.item = item;
	        if (this._identityChangesTail === null) {
	            this._identityChangesTail = this._identityChangesHead = record;
	        }
	        else {
	            this._identityChangesTail = this._identityChangesTail._nextIdentityChange = record;
	        }
	        return record;
	    };
	    return DefaultIterableDiffer;
	}());
	var IterableChangeRecord_ = /** @class */ (function () {
	    function IterableChangeRecord_(item, trackById) {
	        this.item = item;
	        this.trackById = trackById;
	        this.currentIndex = null;
	        this.previousIndex = null;
	        /** @internal */
	        this._nextPrevious = null;
	        /** @internal */
	        this._prev = null;
	        /** @internal */
	        this._next = null;
	        /** @internal */
	        this._prevDup = null;
	        /** @internal */
	        this._nextDup = null;
	        /** @internal */
	        this._prevRemoved = null;
	        /** @internal */
	        this._nextRemoved = null;
	        /** @internal */
	        this._nextAdded = null;
	        /** @internal */
	        this._nextMoved = null;
	        /** @internal */
	        this._nextIdentityChange = null;
	    }
	    return IterableChangeRecord_;
	}());
	// A linked list of CollectionChangeRecords with the same IterableChangeRecord_.item
	var _DuplicateItemRecordList = /** @class */ (function () {
	    function _DuplicateItemRecordList() {
	        /** @internal */
	        this._head = null;
	        /** @internal */
	        this._tail = null;
	    }
	    /**
	     * Append the record to the list of duplicates.
	     *
	     * Note: by design all records in the list of duplicates hold the same value in record.item.
	     */
	    _DuplicateItemRecordList.prototype.add = function (record) {
	        if (this._head === null) {
	            this._head = this._tail = record;
	            record._nextDup = null;
	            record._prevDup = null;
	        }
	        else {
	            // TODO(vicb):
	            // assert(record.item ==  _head.item ||
	            //       record.item is num && record.item.isNaN && _head.item is num && _head.item.isNaN);
	            this._tail._nextDup = record;
	            record._prevDup = this._tail;
	            record._nextDup = null;
	            this._tail = record;
	        }
	    };
	    // Returns a IterableChangeRecord_ having IterableChangeRecord_.trackById == trackById and
	    // IterableChangeRecord_.currentIndex >= atOrAfterIndex
	    _DuplicateItemRecordList.prototype.get = function (trackById, atOrAfterIndex) {
	        var record;
	        for (record = this._head; record !== null; record = record._nextDup) {
	            if ((atOrAfterIndex === null || atOrAfterIndex <= record.currentIndex) &&
	                looseIdentical(record.trackById, trackById)) {
	                return record;
	            }
	        }
	        return null;
	    };
	    /**
	     * Remove one {@link IterableChangeRecord_} from the list of duplicates.
	     *
	     * Returns whether the list of duplicates is empty.
	     */
	    _DuplicateItemRecordList.prototype.remove = function (record) {
	        // TODO(vicb):
	        // assert(() {
	        //  // verify that the record being removed is in the list.
	        //  for (IterableChangeRecord_ cursor = _head; cursor != null; cursor = cursor._nextDup) {
	        //    if (identical(cursor, record)) return true;
	        //  }
	        //  return false;
	        //});
	        var prev = record._prevDup;
	        var next = record._nextDup;
	        if (prev === null) {
	            this._head = next;
	        }
	        else {
	            prev._nextDup = next;
	        }
	        if (next === null) {
	            this._tail = prev;
	        }
	        else {
	            next._prevDup = prev;
	        }
	        return this._head === null;
	    };
	    return _DuplicateItemRecordList;
	}());
	var _DuplicateMap = /** @class */ (function () {
	    function _DuplicateMap() {
	        this.map = new Map();
	    }
	    _DuplicateMap.prototype.put = function (record) {
	        var key = record.trackById;
	        var duplicates = this.map.get(key);
	        if (!duplicates) {
	            duplicates = new _DuplicateItemRecordList();
	            this.map.set(key, duplicates);
	        }
	        duplicates.add(record);
	    };
	    /**
	     * Retrieve the `value` using key. Because the IterableChangeRecord_ value may be one which we
	     * have already iterated over, we use the `atOrAfterIndex` to pretend it is not there.
	     *
	     * Use case: `[a, b, c, a, a]` if we are at index `3` which is the second `a` then asking if we
	     * have any more `a`s needs to return the second `a`.
	     */
	    _DuplicateMap.prototype.get = function (trackById, atOrAfterIndex) {
	        var key = trackById;
	        var recordList = this.map.get(key);
	        return recordList ? recordList.get(trackById, atOrAfterIndex) : null;
	    };
	    /**
	     * Removes a {@link IterableChangeRecord_} from the list of duplicates.
	     *
	     * The list of duplicates also is removed from the map if it gets empty.
	     */
	    _DuplicateMap.prototype.remove = function (record) {
	        var key = record.trackById;
	        var recordList = this.map.get(key);
	        // Remove the list of duplicates when it gets empty
	        if (recordList.remove(record)) {
	            this.map.delete(key);
	        }
	        return record;
	    };
	    Object.defineProperty(_DuplicateMap.prototype, "isEmpty", {
	        get: function () {
	            return this.map.size === 0;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    _DuplicateMap.prototype.clear = function () {
	        this.map.clear();
	    };
	    return _DuplicateMap;
	}());
	function getPreviousIndex(item, addRemoveOffset, moveOffsets) {
	    var previousIndex = item.previousIndex;
	    if (previousIndex === null)
	        return previousIndex;
	    var moveOffset = 0;
	    if (moveOffsets && previousIndex < moveOffsets.length) {
	        moveOffset = moveOffsets[previousIndex];
	    }
	    return previousIndex + addRemoveOffset + moveOffset;
	}

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	var DefaultKeyValueDifferFactory = /** @class */ (function () {
	    function DefaultKeyValueDifferFactory() {
	    }
	    DefaultKeyValueDifferFactory.prototype.supports = function (obj) {
	        return obj instanceof Map || isJsObject$1(obj);
	    };
	    DefaultKeyValueDifferFactory.prototype.create = function () {
	        return new DefaultKeyValueDiffer();
	    };
	    return DefaultKeyValueDifferFactory;
	}());
	var DefaultKeyValueDiffer = /** @class */ (function () {
	    function DefaultKeyValueDiffer() {
	        this._records = new Map();
	        this._mapHead = null;
	        // _appendAfter is used in the check loop
	        this._appendAfter = null;
	        this._previousMapHead = null;
	        this._changesHead = null;
	        this._changesTail = null;
	        this._additionsHead = null;
	        this._additionsTail = null;
	        this._removalsHead = null;
	        this._removalsTail = null;
	    }
	    Object.defineProperty(DefaultKeyValueDiffer.prototype, "isDirty", {
	        get: function () {
	            return this._additionsHead !== null || this._changesHead !== null ||
	                this._removalsHead !== null;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    DefaultKeyValueDiffer.prototype.forEachItem = function (fn) {
	        var record;
	        for (record = this._mapHead; record !== null; record = record._next) {
	            fn(record);
	        }
	    };
	    DefaultKeyValueDiffer.prototype.forEachPreviousItem = function (fn) {
	        var record;
	        for (record = this._previousMapHead; record !== null; record = record._nextPrevious) {
	            fn(record);
	        }
	    };
	    DefaultKeyValueDiffer.prototype.forEachChangedItem = function (fn) {
	        var record;
	        for (record = this._changesHead; record !== null; record = record._nextChanged) {
	            fn(record);
	        }
	    };
	    DefaultKeyValueDiffer.prototype.forEachAddedItem = function (fn) {
	        var record;
	        for (record = this._additionsHead; record !== null; record = record._nextAdded) {
	            fn(record);
	        }
	    };
	    DefaultKeyValueDiffer.prototype.forEachRemovedItem = function (fn) {
	        var record;
	        for (record = this._removalsHead; record !== null; record = record._nextRemoved) {
	            fn(record);
	        }
	    };
	    DefaultKeyValueDiffer.prototype.diff = function (map) {
	        if (!map) {
	            map = new Map();
	        }
	        else if (!(map instanceof Map || isJsObject$1(map))) {
	            throw new Error("Error trying to diff '" + stringify$1(map) + "'. Only maps and objects are allowed");
	        }
	        return this.check(map) ? this : null;
	    };
	    DefaultKeyValueDiffer.prototype.onDestroy = function () { };
	    /**
	     * Check the current state of the map vs the previous.
	     * The algorithm is optimised for when the keys do no change.
	     */
	    DefaultKeyValueDiffer.prototype.check = function (map) {
	        var _this = this;
	        this._reset();
	        var insertBefore = this._mapHead;
	        this._appendAfter = null;
	        this._forEach(map, function (value, key) {
	            if (insertBefore && insertBefore.key === key) {
	                _this._maybeAddToChanges(insertBefore, value);
	                _this._appendAfter = insertBefore;
	                insertBefore = insertBefore._next;
	            }
	            else {
	                var record = _this._getOrCreateRecordForKey(key, value);
	                insertBefore = _this._insertBeforeOrAppend(insertBefore, record);
	            }
	        });
	        // Items remaining at the end of the list have been deleted
	        if (insertBefore) {
	            if (insertBefore._prev) {
	                insertBefore._prev._next = null;
	            }
	            this._removalsHead = insertBefore;
	            for (var record = insertBefore; record !== null; record = record._nextRemoved) {
	                if (record === this._mapHead) {
	                    this._mapHead = null;
	                }
	                this._records.delete(record.key);
	                record._nextRemoved = record._next;
	                record.previousValue = record.currentValue;
	                record.currentValue = null;
	                record._prev = null;
	                record._next = null;
	            }
	        }
	        // Make sure tails have no next records from previous runs
	        if (this._changesTail)
	            this._changesTail._nextChanged = null;
	        if (this._additionsTail)
	            this._additionsTail._nextAdded = null;
	        return this.isDirty;
	    };
	    /**
	     * Inserts a record before `before` or append at the end of the list when `before` is null.
	     *
	     * Notes:
	     * - This method appends at `this._appendAfter`,
	     * - This method updates `this._appendAfter`,
	     * - The return value is the new value for the insertion pointer.
	     */
	    DefaultKeyValueDiffer.prototype._insertBeforeOrAppend = function (before, record) {
	        if (before) {
	            var prev = before._prev;
	            record._next = before;
	            record._prev = prev;
	            before._prev = record;
	            if (prev) {
	                prev._next = record;
	            }
	            if (before === this._mapHead) {
	                this._mapHead = record;
	            }
	            this._appendAfter = before;
	            return before;
	        }
	        if (this._appendAfter) {
	            this._appendAfter._next = record;
	            record._prev = this._appendAfter;
	        }
	        else {
	            this._mapHead = record;
	        }
	        this._appendAfter = record;
	        return null;
	    };
	    DefaultKeyValueDiffer.prototype._getOrCreateRecordForKey = function (key, value) {
	        if (this._records.has(key)) {
	            var record_1 = this._records.get(key);
	            this._maybeAddToChanges(record_1, value);
	            var prev = record_1._prev;
	            var next = record_1._next;
	            if (prev) {
	                prev._next = next;
	            }
	            if (next) {
	                next._prev = prev;
	            }
	            record_1._next = null;
	            record_1._prev = null;
	            return record_1;
	        }
	        var record = new KeyValueChangeRecord_(key);
	        this._records.set(key, record);
	        record.currentValue = value;
	        this._addToAdditions(record);
	        return record;
	    };
	    /** @internal */
	    DefaultKeyValueDiffer.prototype._reset = function () {
	        if (this.isDirty) {
	            var record = void 0;
	            // let `_previousMapHead` contain the state of the map before the changes
	            this._previousMapHead = this._mapHead;
	            for (record = this._previousMapHead; record !== null; record = record._next) {
	                record._nextPrevious = record._next;
	            }
	            // Update `record.previousValue` with the value of the item before the changes
	            // We need to update all changed items (that's those which have been added and changed)
	            for (record = this._changesHead; record !== null; record = record._nextChanged) {
	                record.previousValue = record.currentValue;
	            }
	            for (record = this._additionsHead; record != null; record = record._nextAdded) {
	                record.previousValue = record.currentValue;
	            }
	            this._changesHead = this._changesTail = null;
	            this._additionsHead = this._additionsTail = null;
	            this._removalsHead = null;
	        }
	    };
	    // Add the record or a given key to the list of changes only when the value has actually changed
	    DefaultKeyValueDiffer.prototype._maybeAddToChanges = function (record, newValue) {
	        if (!looseIdentical(newValue, record.currentValue)) {
	            record.previousValue = record.currentValue;
	            record.currentValue = newValue;
	            this._addToChanges(record);
	        }
	    };
	    DefaultKeyValueDiffer.prototype._addToAdditions = function (record) {
	        if (this._additionsHead === null) {
	            this._additionsHead = this._additionsTail = record;
	        }
	        else {
	            this._additionsTail._nextAdded = record;
	            this._additionsTail = record;
	        }
	    };
	    DefaultKeyValueDiffer.prototype._addToChanges = function (record) {
	        if (this._changesHead === null) {
	            this._changesHead = this._changesTail = record;
	        }
	        else {
	            this._changesTail._nextChanged = record;
	            this._changesTail = record;
	        }
	    };
	    /** @internal */
	    DefaultKeyValueDiffer.prototype._forEach = function (obj, fn) {
	        if (obj instanceof Map) {
	            obj.forEach(fn);
	        }
	        else {
	            Object.keys(obj).forEach(function (k) { return fn(obj[k], k); });
	        }
	    };
	    return DefaultKeyValueDiffer;
	}());
	var KeyValueChangeRecord_ = /** @class */ (function () {
	    function KeyValueChangeRecord_(key) {
	        this.key = key;
	        this.previousValue = null;
	        this.currentValue = null;
	        /** @internal */
	        this._nextPrevious = null;
	        /** @internal */
	        this._next = null;
	        /** @internal */
	        this._prev = null;
	        /** @internal */
	        this._nextAdded = null;
	        /** @internal */
	        this._nextRemoved = null;
	        /** @internal */
	        this._nextChanged = null;
	    }
	    return KeyValueChangeRecord_;
	}());

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * A repository of different iterable diffing strategies used by NgFor, NgClass, and others.
	 *
	 * @publicApi
	 */
	var IterableDiffers = /** @class */ (function () {
	    function IterableDiffers(factories) {
	        this.factories = factories;
	    }
	    IterableDiffers.create = function (factories, parent) {
	        if (parent != null) {
	            var copied = parent.factories.slice();
	            factories = factories.concat(copied);
	        }
	        return new IterableDiffers(factories);
	    };
	    /**
	     * Takes an array of {@link IterableDifferFactory} and returns a provider used to extend the
	     * inherited {@link IterableDiffers} instance with the provided factories and return a new
	     * {@link IterableDiffers} instance.
	     *
	     * @usageNotes
	     * ### Example
	     *
	     * The following example shows how to extend an existing list of factories,
	     * which will only be applied to the injector for this component and its children.
	     * This step is all that's required to make a new {@link IterableDiffer} available.
	     *
	     * ```
	     * @Component({
	     *   viewProviders: [
	     *     IterableDiffers.extend([new ImmutableListDiffer()])
	     *   ]
	     * })
	     * ```
	     */
	    IterableDiffers.extend = function (factories) {
	        return {
	            provide: IterableDiffers,
	            useFactory: function (parent) {
	                if (!parent) {
	                    // Typically would occur when calling IterableDiffers.extend inside of dependencies passed
	                    // to
	                    // bootstrap(), which would override default pipes instead of extending them.
	                    throw new Error('Cannot extend IterableDiffers without a parent injector');
	                }
	                return IterableDiffers.create(factories, parent);
	            },
	            // Dependency technically isn't optional, but we can provide a better error message this way.
	            deps: [[IterableDiffers, new SkipSelf(), new Optional()]]
	        };
	    };
	    IterableDiffers.prototype.find = function (iterable) {
	        var factory = this.factories.find(function (f) { return f.supports(iterable); });
	        if (factory != null) {
	            return factory;
	        }
	        else {
	            throw new Error("Cannot find a differ supporting object '" + iterable + "' of type '" + getTypeNameForDebugging(iterable) + "'");
	        }
	    };
	    /** @nocollapse */
	    IterableDiffers.Éµprov = ÉµÉµdefineInjectable({
	        token: IterableDiffers,
	        providedIn: 'root',
	        factory: function () { return new IterableDiffers([new DefaultIterableDifferFactory()]); }
	    });
	    return IterableDiffers;
	}());
	function getTypeNameForDebugging(type) {
	    return type['name'] || typeof type;
	}

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * A repository of different Map diffing strategies used by NgClass, NgStyle, and others.
	 *
	 * @publicApi
	 */
	var KeyValueDiffers = /** @class */ (function () {
	    function KeyValueDiffers(factories) {
	        this.factories = factories;
	    }
	    KeyValueDiffers.create = function (factories, parent) {
	        if (parent) {
	            var copied = parent.factories.slice();
	            factories = factories.concat(copied);
	        }
	        return new KeyValueDiffers(factories);
	    };
	    /**
	     * Takes an array of {@link KeyValueDifferFactory} and returns a provider used to extend the
	     * inherited {@link KeyValueDiffers} instance with the provided factories and return a new
	     * {@link KeyValueDiffers} instance.
	     *
	     * @usageNotes
	     * ### Example
	     *
	     * The following example shows how to extend an existing list of factories,
	     * which will only be applied to the injector for this component and its children.
	     * This step is all that's required to make a new {@link KeyValueDiffer} available.
	     *
	     * ```
	     * @Component({
	     *   viewProviders: [
	     *     KeyValueDiffers.extend([new ImmutableMapDiffer()])
	     *   ]
	     * })
	     * ```
	     */
	    KeyValueDiffers.extend = function (factories) {
	        return {
	            provide: KeyValueDiffers,
	            useFactory: function (parent) {
	                if (!parent) {
	                    // Typically would occur when calling KeyValueDiffers.extend inside of dependencies passed
	                    // to bootstrap(), which would override default pipes instead of extending them.
	                    throw new Error('Cannot extend KeyValueDiffers without a parent injector');
	                }
	                return KeyValueDiffers.create(factories, parent);
	            },
	            // Dependency technically isn't optional, but we can provide a better error message this way.
	            deps: [[KeyValueDiffers, new SkipSelf(), new Optional()]]
	        };
	    };
	    KeyValueDiffers.prototype.find = function (kv) {
	        var factory = this.factories.find(function (f) { return f.supports(kv); });
	        if (factory) {
	            return factory;
	        }
	        throw new Error("Cannot find a differ supporting object '" + kv + "'");
	    };
	    /** @nocollapse */
	    KeyValueDiffers.Éµprov = ÉµÉµdefineInjectable({
	        token: KeyValueDiffers,
	        providedIn: 'root',
	        factory: function () { return new KeyValueDiffers([new DefaultKeyValueDifferFactory()]); }
	    });
	    return KeyValueDiffers;
	}());

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * Structural diffing for `Object`s and `Map`s.
	 */
	var keyValDiff = [new DefaultKeyValueDifferFactory()];
	/**
	 * Structural diffing for `Iterable` types such as `Array`s.
	 */
	var iterableDiff = [new DefaultIterableDifferFactory()];
	var defaultIterableDiffers = new IterableDiffers(iterableDiff);
	var defaultKeyValueDiffers = new KeyValueDiffers(keyValDiff);

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * Represents an embedded template that can be used to instantiate embedded views.
	 * To instantiate embedded views based on a template, use the `ViewContainerRef`
	 * method `createEmbeddedView()`.
	 *
	 * Access a `TemplateRef` instance by placing a directive on an `<ng-template>`
	 * element (or directive prefixed with `*`). The `TemplateRef` for the embedded view
	 * is injected into the constructor of the directive,
	 * using the `TemplateRef` token.
	 *
	 * You can also use a `Query` to find a `TemplateRef` associated with
	 * a component or a directive.
	 *
	 * @see `ViewContainerRef`
	 * @see [Navigate the Component Tree with DI](guide/dependency-injection-navtree)
	 *
	 * @publicApi
	 */
	var TemplateRef = /** @class */ (function () {
	    function TemplateRef() {
	    }
	    /**
	     * @internal
	     * @nocollapse
	     */
	    TemplateRef.__NG_ELEMENT_ID__ = function () { return SWITCH_TEMPLATE_REF_FACTORY(TemplateRef, ElementRef); };
	    return TemplateRef;
	}());
	var SWITCH_TEMPLATE_REF_FACTORY__PRE_R3__ = noop$1;
	var SWITCH_TEMPLATE_REF_FACTORY = SWITCH_TEMPLATE_REF_FACTORY__PRE_R3__;

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * Represents a container where one or more views can be attached to a component.
	 *
	 * Can contain *host views* (created by instantiating a
	 * component with the `createComponent()` method), and *embedded views*
	 * (created by instantiating a `TemplateRef` with the `createEmbeddedView()` method).
	 *
	 * A view container instance can contain other view containers,
	 * creating a [view hierarchy](guide/glossary#view-tree).
	 *
	 * @see `ComponentRef`
	 * @see `EmbeddedViewRef`
	 *
	 * @publicApi
	 */
	var ViewContainerRef = /** @class */ (function () {
	    function ViewContainerRef() {
	    }
	    /**
	     * @internal
	     * @nocollapse
	     */
	    ViewContainerRef.__NG_ELEMENT_ID__ = function () { return SWITCH_VIEW_CONTAINER_REF_FACTORY(ViewContainerRef, ElementRef); };
	    return ViewContainerRef;
	}());
	var SWITCH_VIEW_CONTAINER_REF_FACTORY__PRE_R3__ = noop$1;
	var SWITCH_VIEW_CONTAINER_REF_FACTORY = SWITCH_VIEW_CONTAINER_REF_FACTORY__PRE_R3__;

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	function expressionChangedAfterItHasBeenCheckedError(context, oldValue, currValue, isFirstCheck) {
	    var msg = "ExpressionChangedAfterItHasBeenCheckedError: Expression has changed after it was checked. Previous value: '" + oldValue + "'. Current value: '" + currValue + "'.";
	    if (isFirstCheck) {
	        msg +=
	            " It seems like the view has been created after its parent and its children have been dirty checked." +
	                " Has it been created in a change detection hook ?";
	    }
	    return viewDebugError(msg, context);
	}
	function viewWrappedDebugError(err, context) {
	    if (!(err instanceof Error)) {
	        // errors that are not Error instances don't have a stack,
	        // so it is ok to wrap them into a new Error object...
	        err = new Error(err.toString());
	    }
	    _addDebugContext(err, context);
	    return err;
	}
	function viewDebugError(msg, context) {
	    var err = new Error(msg);
	    _addDebugContext(err, context);
	    return err;
	}
	function _addDebugContext(err, context) {
	    err[ERROR_DEBUG_CONTEXT] = context;
	    err[ERROR_LOGGER] = context.logError.bind(context);
	}
	function isViewDebugError(err) {
	    return !!getDebugContext(err);
	}
	function viewDestroyedError(action) {
	    return new Error("ViewDestroyedError: Attempt to use a destroyed view: " + action);
	}

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	// Called before each cycle of a view's check to detect whether this is in the
	// initState for which we need to call ngOnInit, ngAfterContentInit or ngAfterViewInit
	// lifecycle methods. Returns true if this check cycle should call lifecycle
	// methods.
	function shiftInitState(view, priorInitState, newInitState) {
	    // Only update the InitState if we are currently in the prior state.
	    // For example, only move into CallingInit if we are in BeforeInit. Only
	    // move into CallingContentInit if we are in CallingInit. Normally this will
	    // always be true because of how checkCycle is called in checkAndUpdateView.
	    // However, if checkAndUpdateView is called recursively or if an exception is
	    // thrown while checkAndUpdateView is running, checkAndUpdateView starts over
	    // from the beginning. This ensures the state is monotonically increasing,
	    // terminating in the AfterInit state, which ensures the Init methods are called
	    // at least once and only once.
	    var state = view.state;
	    var initState = state & 1792 /* InitState_Mask */;
	    if (initState === priorInitState) {
	        view.state = (state & ~1792 /* InitState_Mask */) | newInitState;
	        view.initIndex = -1;
	        return true;
	    }
	    return initState === newInitState;
	}
	// Returns true if the lifecycle init method should be called for the node with
	// the given init index.
	function shouldCallLifecycleInitHook(view, initState, index) {
	    if ((view.state & 1792 /* InitState_Mask */) === initState && view.initIndex <= index) {
	        view.initIndex = index + 1;
	        return true;
	    }
	    return false;
	}
	/**
	 * Accessor for view.nodes, enforcing that every usage site stays monomorphic.
	 */
	function asTextData(view, index) {
	    return view.nodes[index];
	}
	/**
	 * Accessor for view.nodes, enforcing that every usage site stays monomorphic.
	 */
	function asElementData(view, index) {
	    return view.nodes[index];
	}
	/**
	 * Accessor for view.nodes, enforcing that every usage site stays monomorphic.
	 */
	function asProviderData(view, index) {
	    return view.nodes[index];
	}
	/**
	 * Accessor for view.nodes, enforcing that every usage site stays monomorphic.
	 */
	function asPureExpressionData(view, index) {
	    return view.nodes[index];
	}
	/**
	 * Accessor for view.nodes, enforcing that every usage site stays monomorphic.
	 */
	function asQueryList(view, index) {
	    return view.nodes[index];
	}
	/**
	 * This object is used to prevent cycles in the source files and to have a place where
	 * debug mode can hook it. It is lazily filled when `isDevMode` is known.
	 */
	var Services = {
	    setCurrentNode: undefined,
	    createRootView: undefined,
	    createEmbeddedView: undefined,
	    createComponentView: undefined,
	    createNgModuleRef: undefined,
	    overrideProvider: undefined,
	    overrideComponentView: undefined,
	    clearOverrides: undefined,
	    checkAndUpdateView: undefined,
	    checkNoChangesView: undefined,
	    destroyView: undefined,
	    resolveDep: undefined,
	    createDebugContext: undefined,
	    handleEvent: undefined,
	    updateDirectives: undefined,
	    updateRenderer: undefined,
	    dirtyParentQueries: undefined,
	};

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	var NOOP = function () { };
	var _tokenKeyCache = new Map();
	function tokenKey(token) {
	    var key = _tokenKeyCache.get(token);
	    if (!key) {
	        key = stringify$1(token) + '_' + _tokenKeyCache.size;
	        _tokenKeyCache.set(token, key);
	    }
	    return key;
	}
	function unwrapValue(view, nodeIdx, bindingIdx, value) {
	    if (WrappedValue.isWrapped(value)) {
	        value = WrappedValue.unwrap(value);
	        var globalBindingIdx = view.def.nodes[nodeIdx].bindingIndex + bindingIdx;
	        var oldValue = WrappedValue.unwrap(view.oldValues[globalBindingIdx]);
	        view.oldValues[globalBindingIdx] = new WrappedValue(oldValue);
	    }
	    return value;
	}
	var UNDEFINED_RENDERER_TYPE_ID = '$$undefined';
	var EMPTY_RENDERER_TYPE_ID = '$$empty';
	// Attention: this function is called as top level function.
	// Putting any logic in here will destroy closure tree shaking!
	function createRendererType2(values) {
	    return {
	        id: UNDEFINED_RENDERER_TYPE_ID,
	        styles: values.styles,
	        encapsulation: values.encapsulation,
	        data: values.data
	    };
	}
	var _renderCompCount$1 = 0;
	function resolveRendererType2(type) {
	    if (type && type.id === UNDEFINED_RENDERER_TYPE_ID) {
	        // first time we see this RendererType2. Initialize it...
	        var isFilled = ((type.encapsulation != null && type.encapsulation !== ViewEncapsulation$1$1.None) ||
	            type.styles.length || Object.keys(type.data).length);
	        if (isFilled) {
	            type.id = "c" + _renderCompCount$1++;
	        }
	        else {
	            type.id = EMPTY_RENDERER_TYPE_ID;
	        }
	    }
	    if (type && type.id === EMPTY_RENDERER_TYPE_ID) {
	        type = null;
	    }
	    return type || null;
	}
	function checkBinding(view, def, bindingIdx, value) {
	    var oldValues = view.oldValues;
	    if ((view.state & 2 /* FirstCheck */) ||
	        !looseIdentical(oldValues[def.bindingIndex + bindingIdx], value)) {
	        return true;
	    }
	    return false;
	}
	function checkAndUpdateBinding(view, def, bindingIdx, value) {
	    if (checkBinding(view, def, bindingIdx, value)) {
	        view.oldValues[def.bindingIndex + bindingIdx] = value;
	        return true;
	    }
	    return false;
	}
	function checkBindingNoChanges(view, def, bindingIdx, value) {
	    var oldValue = view.oldValues[def.bindingIndex + bindingIdx];
	    if ((view.state & 1 /* BeforeFirstCheck */) || !devModeEqual$1(oldValue, value)) {
	        var bindingName = def.bindings[bindingIdx].name;
	        throw expressionChangedAfterItHasBeenCheckedError(Services.createDebugContext(view, def.nodeIndex), bindingName + ": " + oldValue, bindingName + ": " + value, (view.state & 1 /* BeforeFirstCheck */) !== 0);
	    }
	}
	function markParentViewsForCheck(view) {
	    var currView = view;
	    while (currView) {
	        if (currView.def.flags & 2 /* OnPush */) {
	            currView.state |= 8 /* ChecksEnabled */;
	        }
	        currView = currView.viewContainerParent || currView.parent;
	    }
	}
	function markParentViewsForCheckProjectedViews(view, endView) {
	    var currView = view;
	    while (currView && currView !== endView) {
	        currView.state |= 64 /* CheckProjectedViews */;
	        currView = currView.viewContainerParent || currView.parent;
	    }
	}
	function dispatchEvent(view, nodeIndex, eventName, event) {
	    try {
	        var nodeDef = view.def.nodes[nodeIndex];
	        var startView = nodeDef.flags & 33554432 /* ComponentView */ ?
	            asElementData(view, nodeIndex).componentView :
	            view;
	        markParentViewsForCheck(startView);
	        return Services.handleEvent(view, nodeIndex, eventName, event);
	    }
	    catch (e) {
	        // Attention: Don't rethrow, as it would cancel Observable subscriptions!
	        view.root.errorHandler.handleError(e);
	    }
	}
	function declaredViewContainer(view) {
	    if (view.parent) {
	        var parentView = view.parent;
	        return asElementData(parentView, view.parentNodeDef.nodeIndex);
	    }
	    return null;
	}
	/**
	 * for component views, this is the host element.
	 * for embedded views, this is the index of the parent node
	 * that contains the view container.
	 */
	function viewParentEl(view) {
	    var parentView = view.parent;
	    if (parentView) {
	        return view.parentNodeDef.parent;
	    }
	    else {
	        return null;
	    }
	}
	function renderNode(view, def) {
	    switch (def.flags & 201347067 /* Types */) {
	        case 1 /* TypeElement */:
	            return asElementData(view, def.nodeIndex).renderElement;
	        case 2 /* TypeText */:
	            return asTextData(view, def.nodeIndex).renderText;
	    }
	}
	function elementEventFullName$1(target, name) {
	    return target ? target + ":" + name : name;
	}
	function isComponentView(view) {
	    return !!view.parent && !!(view.parentNodeDef.flags & 32768 /* Component */);
	}
	function isEmbeddedView(view) {
	    return !!view.parent && !(view.parentNodeDef.flags & 32768 /* Component */);
	}
	function filterQueryId(queryId) {
	    return 1 << (queryId % 32);
	}
	function splitMatchedQueriesDsl(matchedQueriesDsl) {
	    var matchedQueries = {};
	    var matchedQueryIds = 0;
	    var references = {};
	    if (matchedQueriesDsl) {
	        matchedQueriesDsl.forEach(function (_a) {
	            var _b = __read(_a, 2), queryId = _b[0], valueType = _b[1];
	            if (typeof queryId === 'number') {
	                matchedQueries[queryId] = valueType;
	                matchedQueryIds |= filterQueryId(queryId);
	            }
	            else {
	                references[queryId] = valueType;
	            }
	        });
	    }
	    return { matchedQueries: matchedQueries, references: references, matchedQueryIds: matchedQueryIds };
	}
	function splitDepsDsl(deps, sourceName) {
	    return deps.map(function (value) {
	        var _a;
	        var token;
	        var flags;
	        if (Array.isArray(value)) {
	            _a = __read(value, 2), flags = _a[0], token = _a[1];
	        }
	        else {
	            flags = 0 /* None */;
	            token = value;
	        }
	        if (token && (typeof token === 'function' || typeof token === 'object') && sourceName) {
	            Object.defineProperty(token, SOURCE, { value: sourceName, configurable: true });
	        }
	        return { flags: flags, token: token, tokenKey: tokenKey(token) };
	    });
	}
	function getParentRenderElement(view, renderHost, def) {
	    var renderParent = def.renderParent;
	    if (renderParent) {
	        if ((renderParent.flags & 1 /* TypeElement */) === 0 ||
	            (renderParent.flags & 33554432 /* ComponentView */) === 0 ||
	            (renderParent.element.componentRendererType &&
	                renderParent.element.componentRendererType.encapsulation === ViewEncapsulation$1$1.Native)) {
	            // only children of non components, or children of components with native encapsulation should
	            // be attached.
	            return asElementData(view, def.renderParent.nodeIndex).renderElement;
	        }
	    }
	    else {
	        return renderHost;
	    }
	}
	var DEFINITION_CACHE = new WeakMap();
	function resolveDefinition(factory) {
	    var value = DEFINITION_CACHE.get(factory);
	    if (!value) {
	        value = factory(function () { return NOOP; });
	        value.factory = factory;
	        DEFINITION_CACHE.set(factory, value);
	    }
	    return value;
	}
	function rootRenderNodes(view) {
	    var renderNodes = [];
	    visitRootRenderNodes(view, 0 /* Collect */, undefined, undefined, renderNodes);
	    return renderNodes;
	}
	function visitRootRenderNodes(view, action, parentNode, nextSibling, target) {
	    // We need to re-compute the parent node in case the nodes have been moved around manually
	    if (action === 3 /* RemoveChild */) {
	        parentNode = view.renderer.parentNode(renderNode(view, view.def.lastRenderRootNode));
	    }
	    visitSiblingRenderNodes(view, action, 0, view.def.nodes.length - 1, parentNode, nextSibling, target);
	}
	function visitSiblingRenderNodes(view, action, startIndex, endIndex, parentNode, nextSibling, target) {
	    for (var i = startIndex; i <= endIndex; i++) {
	        var nodeDef = view.def.nodes[i];
	        if (nodeDef.flags & (1 /* TypeElement */ | 2 /* TypeText */ | 8 /* TypeNgContent */)) {
	            visitRenderNode(view, nodeDef, action, parentNode, nextSibling, target);
	        }
	        // jump to next sibling
	        i += nodeDef.childCount;
	    }
	}
	function visitProjectedRenderNodes(view, ngContentIndex, action, parentNode, nextSibling, target) {
	    var compView = view;
	    while (compView && !isComponentView(compView)) {
	        compView = compView.parent;
	    }
	    var hostView = compView.parent;
	    var hostElDef = viewParentEl(compView);
	    var startIndex = hostElDef.nodeIndex + 1;
	    var endIndex = hostElDef.nodeIndex + hostElDef.childCount;
	    for (var i = startIndex; i <= endIndex; i++) {
	        var nodeDef = hostView.def.nodes[i];
	        if (nodeDef.ngContentIndex === ngContentIndex) {
	            visitRenderNode(hostView, nodeDef, action, parentNode, nextSibling, target);
	        }
	        // jump to next sibling
	        i += nodeDef.childCount;
	    }
	    if (!hostView.parent) {
	        // a root view
	        var projectedNodes = view.root.projectableNodes[ngContentIndex];
	        if (projectedNodes) {
	            for (var i = 0; i < projectedNodes.length; i++) {
	                execRenderNodeAction(view, projectedNodes[i], action, parentNode, nextSibling, target);
	            }
	        }
	    }
	}
	function visitRenderNode(view, nodeDef, action, parentNode, nextSibling, target) {
	    if (nodeDef.flags & 8 /* TypeNgContent */) {
	        visitProjectedRenderNodes(view, nodeDef.ngContent.index, action, parentNode, nextSibling, target);
	    }
	    else {
	        var rn = renderNode(view, nodeDef);
	        if (action === 3 /* RemoveChild */ && (nodeDef.flags & 33554432 /* ComponentView */) &&
	            (nodeDef.bindingFlags & 48 /* CatSyntheticProperty */)) {
	            // Note: we might need to do both actions.
	            if (nodeDef.bindingFlags & (16 /* SyntheticProperty */)) {
	                execRenderNodeAction(view, rn, action, parentNode, nextSibling, target);
	            }
	            if (nodeDef.bindingFlags & (32 /* SyntheticHostProperty */)) {
	                var compView = asElementData(view, nodeDef.nodeIndex).componentView;
	                execRenderNodeAction(compView, rn, action, parentNode, nextSibling, target);
	            }
	        }
	        else {
	            execRenderNodeAction(view, rn, action, parentNode, nextSibling, target);
	        }
	        if (nodeDef.flags & 16777216 /* EmbeddedViews */) {
	            var embeddedViews = asElementData(view, nodeDef.nodeIndex).viewContainer._embeddedViews;
	            for (var k = 0; k < embeddedViews.length; k++) {
	                visitRootRenderNodes(embeddedViews[k], action, parentNode, nextSibling, target);
	            }
	        }
	        if (nodeDef.flags & 1 /* TypeElement */ && !nodeDef.element.name) {
	            visitSiblingRenderNodes(view, action, nodeDef.nodeIndex + 1, nodeDef.nodeIndex + nodeDef.childCount, parentNode, nextSibling, target);
	        }
	    }
	}
	function execRenderNodeAction(view, renderNode, action, parentNode, nextSibling, target) {
	    var renderer = view.renderer;
	    switch (action) {
	        case 1 /* AppendChild */:
	            renderer.appendChild(parentNode, renderNode);
	            break;
	        case 2 /* InsertBefore */:
	            renderer.insertBefore(parentNode, renderNode, nextSibling);
	            break;
	        case 3 /* RemoveChild */:
	            renderer.removeChild(parentNode, renderNode);
	            break;
	        case 0 /* Collect */:
	            target.push(renderNode);
	            break;
	    }
	}
	var NS_PREFIX_RE = /^:([^:]+):(.+)$/;
	function splitNamespace(name) {
	    if (name[0] === ':') {
	        var match = name.match(NS_PREFIX_RE);
	        return [match[1], match[2]];
	    }
	    return ['', name];
	}
	function calcBindingFlags(bindings) {
	    var flags = 0;
	    for (var i = 0; i < bindings.length; i++) {
	        flags |= bindings[i].flags;
	    }
	    return flags;
	}
	function interpolate(valueCount, constAndInterp) {
	    var result = '';
	    for (var i = 0; i < valueCount * 2; i = i + 2) {
	        result = result + constAndInterp[i] + _toStringWithNull(constAndInterp[i + 1]);
	    }
	    return result + constAndInterp[valueCount * 2];
	}
	function inlineInterpolate(valueCount, c0, a1, c1, a2, c2, a3, c3, a4, c4, a5, c5, a6, c6, a7, c7, a8, c8, a9, c9) {
	    switch (valueCount) {
	        case 1:
	            return c0 + _toStringWithNull(a1) + c1;
	        case 2:
	            return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2;
	        case 3:
	            return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) +
	                c3;
	        case 4:
	            return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) +
	                c3 + _toStringWithNull(a4) + c4;
	        case 5:
	            return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) +
	                c3 + _toStringWithNull(a4) + c4 + _toStringWithNull(a5) + c5;
	        case 6:
	            return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) +
	                c3 + _toStringWithNull(a4) + c4 + _toStringWithNull(a5) + c5 + _toStringWithNull(a6) + c6;
	        case 7:
	            return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) +
	                c3 + _toStringWithNull(a4) + c4 + _toStringWithNull(a5) + c5 + _toStringWithNull(a6) +
	                c6 + _toStringWithNull(a7) + c7;
	        case 8:
	            return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) +
	                c3 + _toStringWithNull(a4) + c4 + _toStringWithNull(a5) + c5 + _toStringWithNull(a6) +
	                c6 + _toStringWithNull(a7) + c7 + _toStringWithNull(a8) + c8;
	        case 9:
	            return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) +
	                c3 + _toStringWithNull(a4) + c4 + _toStringWithNull(a5) + c5 + _toStringWithNull(a6) +
	                c6 + _toStringWithNull(a7) + c7 + _toStringWithNull(a8) + c8 + _toStringWithNull(a9) + c9;
	        default:
	            throw new Error("Does not support more than 9 expressions");
	    }
	}
	function _toStringWithNull(v) {
	    return v != null ? v.toString() : '';
	}
	var EMPTY_ARRAY$4 = [];
	var EMPTY_MAP = {};

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	var UNDEFINED_VALUE = {};
	var InjectorRefTokenKey = tokenKey(Injector);
	var INJECTORRefTokenKey = tokenKey(INJECTOR);
	var NgModuleRefTokenKey = tokenKey(NgModuleRef);
	function moduleProvideDef(flags, token, value, deps) {
	    // Need to resolve forwardRefs as e.g. for `useValue` we
	    // lowered the expression and then stopped evaluating it,
	    // i.e. also didn't unwrap it.
	    value = resolveForwardRef$1(value);
	    var depDefs = splitDepsDsl(deps, stringify$1(token));
	    return {
	        // will bet set by the module definition
	        index: -1,
	        deps: depDefs,
	        flags: flags,
	        token: token,
	        value: value
	    };
	}
	function moduleDef(providers) {
	    var providersByKey = {};
	    var modules = [];
	    var scope = null;
	    for (var i = 0; i < providers.length; i++) {
	        var provider = providers[i];
	        if (provider.token === INJECTOR_SCOPE) {
	            scope = provider.value;
	        }
	        if (provider.flags & 1073741824 /* TypeNgModule */) {
	            modules.push(provider.token);
	        }
	        provider.index = i;
	        providersByKey[tokenKey(provider.token)] = provider;
	    }
	    return {
	        // Will be filled later...
	        factory: null,
	        providersByKey: providersByKey,
	        providers: providers,
	        modules: modules,
	        scope: scope,
	    };
	}
	function initNgModule(data) {
	    var def = data._def;
	    var providers = data._providers = newArray$1(def.providers.length);
	    for (var i = 0; i < def.providers.length; i++) {
	        var provDef = def.providers[i];
	        if (!(provDef.flags & 4096 /* LazyProvider */)) {
	            // Make sure the provider has not been already initialized outside this loop.
	            if (providers[i] === undefined) {
	                providers[i] = _createProviderInstance(data, provDef);
	            }
	        }
	    }
	}
	function resolveNgModuleDep(data, depDef, notFoundValue) {
	    if (notFoundValue === void 0) { notFoundValue = Injector.THROW_IF_NOT_FOUND; }
	    var former = setCurrentInjector(data);
	    try {
	        if (depDef.flags & 8 /* Value */) {
	            return depDef.token;
	        }
	        if (depDef.flags & 2 /* Optional */) {
	            notFoundValue = null;
	        }
	        if (depDef.flags & 1 /* SkipSelf */) {
	            return data._parent.get(depDef.token, notFoundValue);
	        }
	        var tokenKey_1 = depDef.tokenKey;
	        switch (tokenKey_1) {
	            case InjectorRefTokenKey:
	            case INJECTORRefTokenKey:
	            case NgModuleRefTokenKey:
	                return data;
	        }
	        var providerDef = data._def.providersByKey[tokenKey_1];
	        var injectableDef = void 0;
	        if (providerDef) {
	            var providerInstance = data._providers[providerDef.index];
	            if (providerInstance === undefined) {
	                providerInstance = data._providers[providerDef.index] =
	                    _createProviderInstance(data, providerDef);
	            }
	            return providerInstance === UNDEFINED_VALUE ? undefined : providerInstance;
	        }
	        else if ((injectableDef = getInjectableDef(depDef.token)) && targetsModule(data, injectableDef)) {
	            var index = data._providers.length;
	            data._def.providers[index] = data._def.providersByKey[depDef.tokenKey] = {
	                flags: 1024 /* TypeFactoryProvider */ | 4096 /* LazyProvider */,
	                value: injectableDef.factory,
	                deps: [],
	                index: index,
	                token: depDef.token,
	            };
	            data._providers[index] = UNDEFINED_VALUE;
	            return (data._providers[index] =
	                _createProviderInstance(data, data._def.providersByKey[depDef.tokenKey]));
	        }
	        else if (depDef.flags & 4 /* Self */) {
	            return notFoundValue;
	        }
	        return data._parent.get(depDef.token, notFoundValue);
	    }
	    finally {
	        setCurrentInjector(former);
	    }
	}
	function moduleTransitivelyPresent(ngModule, scope) {
	    return ngModule._def.modules.indexOf(scope) > -1;
	}
	function targetsModule(ngModule, def) {
	    var providedIn = def.providedIn;
	    return providedIn != null &&
	        (providedIn === 'any' || providedIn === ngModule._def.scope ||
	            moduleTransitivelyPresent(ngModule, providedIn));
	}
	function _createProviderInstance(ngModule, providerDef) {
	    var injectable;
	    switch (providerDef.flags & 201347067 /* Types */) {
	        case 512 /* TypeClassProvider */:
	            injectable = _createClass(ngModule, providerDef.value, providerDef.deps);
	            break;
	        case 1024 /* TypeFactoryProvider */:
	            injectable = _callFactory(ngModule, providerDef.value, providerDef.deps);
	            break;
	        case 2048 /* TypeUseExistingProvider */:
	            injectable = resolveNgModuleDep(ngModule, providerDef.deps[0]);
	            break;
	        case 256 /* TypeValueProvider */:
	            injectable = providerDef.value;
	            break;
	    }
	    // The read of `ngOnDestroy` here is slightly expensive as it's megamorphic, so it should be
	    // avoided if possible. The sequence of checks here determines whether ngOnDestroy needs to be
	    // checked. It might not if the `injectable` isn't an object or if NodeFlags.OnDestroy is already
	    // set (ngOnDestroy was detected statically).
	    if (injectable !== UNDEFINED_VALUE && injectable !== null && typeof injectable === 'object' &&
	        !(providerDef.flags & 131072 /* OnDestroy */) && typeof injectable.ngOnDestroy === 'function') {
	        providerDef.flags |= 131072 /* OnDestroy */;
	    }
	    return injectable === undefined ? UNDEFINED_VALUE : injectable;
	}
	function _createClass(ngModule, ctor, deps) {
	    var len = deps.length;
	    switch (len) {
	        case 0:
	            return new ctor();
	        case 1:
	            return new ctor(resolveNgModuleDep(ngModule, deps[0]));
	        case 2:
	            return new ctor(resolveNgModuleDep(ngModule, deps[0]), resolveNgModuleDep(ngModule, deps[1]));
	        case 3:
	            return new ctor(resolveNgModuleDep(ngModule, deps[0]), resolveNgModuleDep(ngModule, deps[1]), resolveNgModuleDep(ngModule, deps[2]));
	        default:
	            var depValues = [];
	            for (var i = 0; i < len; i++) {
	                depValues[i] = resolveNgModuleDep(ngModule, deps[i]);
	            }
	            return new (ctor.bind.apply(ctor, __spread([void 0], depValues)))();
	    }
	}
	function _callFactory(ngModule, factory, deps) {
	    var len = deps.length;
	    switch (len) {
	        case 0:
	            return factory();
	        case 1:
	            return factory(resolveNgModuleDep(ngModule, deps[0]));
	        case 2:
	            return factory(resolveNgModuleDep(ngModule, deps[0]), resolveNgModuleDep(ngModule, deps[1]));
	        case 3:
	            return factory(resolveNgModuleDep(ngModule, deps[0]), resolveNgModuleDep(ngModule, deps[1]), resolveNgModuleDep(ngModule, deps[2]));
	        default:
	            var depValues = [];
	            for (var i = 0; i < len; i++) {
	                depValues[i] = resolveNgModuleDep(ngModule, deps[i]);
	            }
	            return factory.apply(void 0, __spread(depValues));
	    }
	}
	function callNgModuleLifecycle(ngModule, lifecycles) {
	    var def = ngModule._def;
	    var destroyed = new Set();
	    for (var i = 0; i < def.providers.length; i++) {
	        var provDef = def.providers[i];
	        if (provDef.flags & 131072 /* OnDestroy */) {
	            var instance = ngModule._providers[i];
	            if (instance && instance !== UNDEFINED_VALUE) {
	                var onDestroy = instance.ngOnDestroy;
	                if (typeof onDestroy === 'function' && !destroyed.has(instance)) {
	                    onDestroy.apply(instance);
	                    destroyed.add(instance);
	                }
	            }
	        }
	    }
	}

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	function attachEmbeddedView(parentView, elementData, viewIndex, view) {
	    var embeddedViews = elementData.viewContainer._embeddedViews;
	    if (viewIndex === null || viewIndex === undefined) {
	        viewIndex = embeddedViews.length;
	    }
	    view.viewContainerParent = parentView;
	    addToArray(embeddedViews, viewIndex, view);
	    attachProjectedView(elementData, view);
	    Services.dirtyParentQueries(view);
	    var prevView = viewIndex > 0 ? embeddedViews[viewIndex - 1] : null;
	    renderAttachEmbeddedView(elementData, prevView, view);
	}
	function attachProjectedView(vcElementData, view) {
	    var dvcElementData = declaredViewContainer(view);
	    if (!dvcElementData || dvcElementData === vcElementData ||
	        view.state & 16 /* IsProjectedView */) {
	        return;
	    }
	    // Note: For performance reasons, we
	    // - add a view to template._projectedViews only 1x throughout its lifetime,
	    //   and remove it not until the view is destroyed.
	    //   (hard, as when a parent view is attached/detached we would need to attach/detach all
	    //    nested projected views as well, even across component boundaries).
	    // - don't track the insertion order of views in the projected views array
	    //   (hard, as when the views of the same template are inserted different view containers)
	    view.state |= 16 /* IsProjectedView */;
	    var projectedViews = dvcElementData.template._projectedViews;
	    if (!projectedViews) {
	        projectedViews = dvcElementData.template._projectedViews = [];
	    }
	    projectedViews.push(view);
	    // Note: we are changing the NodeDef here as we cannot calculate
	    // the fact whether a template is used for projection during compilation.
	    markNodeAsProjectedTemplate(view.parent.def, view.parentNodeDef);
	}
	function markNodeAsProjectedTemplate(viewDef, nodeDef) {
	    if (nodeDef.flags & 4 /* ProjectedTemplate */) {
	        return;
	    }
	    viewDef.nodeFlags |= 4 /* ProjectedTemplate */;
	    nodeDef.flags |= 4 /* ProjectedTemplate */;
	    var parentNodeDef = nodeDef.parent;
	    while (parentNodeDef) {
	        parentNodeDef.childFlags |= 4 /* ProjectedTemplate */;
	        parentNodeDef = parentNodeDef.parent;
	    }
	}
	function detachEmbeddedView(elementData, viewIndex) {
	    var embeddedViews = elementData.viewContainer._embeddedViews;
	    if (viewIndex == null || viewIndex >= embeddedViews.length) {
	        viewIndex = embeddedViews.length - 1;
	    }
	    if (viewIndex < 0) {
	        return null;
	    }
	    var view = embeddedViews[viewIndex];
	    view.viewContainerParent = null;
	    removeFromArray(embeddedViews, viewIndex);
	    // See attachProjectedView for why we don't update projectedViews here.
	    Services.dirtyParentQueries(view);
	    renderDetachView$1(view);
	    return view;
	}
	function detachProjectedView(view) {
	    if (!(view.state & 16 /* IsProjectedView */)) {
	        return;
	    }
	    var dvcElementData = declaredViewContainer(view);
	    if (dvcElementData) {
	        var projectedViews = dvcElementData.template._projectedViews;
	        if (projectedViews) {
	            removeFromArray(projectedViews, projectedViews.indexOf(view));
	            Services.dirtyParentQueries(view);
	        }
	    }
	}
	function moveEmbeddedView(elementData, oldViewIndex, newViewIndex) {
	    var embeddedViews = elementData.viewContainer._embeddedViews;
	    var view = embeddedViews[oldViewIndex];
	    removeFromArray(embeddedViews, oldViewIndex);
	    if (newViewIndex == null) {
	        newViewIndex = embeddedViews.length;
	    }
	    addToArray(embeddedViews, newViewIndex, view);
	    // Note: Don't need to change projectedViews as the order in there
	    // as always invalid...
	    Services.dirtyParentQueries(view);
	    renderDetachView$1(view);
	    var prevView = newViewIndex > 0 ? embeddedViews[newViewIndex - 1] : null;
	    renderAttachEmbeddedView(elementData, prevView, view);
	    return view;
	}
	function renderAttachEmbeddedView(elementData, prevView, view) {
	    var prevRenderNode = prevView ? renderNode(prevView, prevView.def.lastRenderRootNode) : elementData.renderElement;
	    var parentNode = view.renderer.parentNode(prevRenderNode);
	    var nextSibling = view.renderer.nextSibling(prevRenderNode);
	    // Note: We can't check if `nextSibling` is present, as on WebWorkers it will always be!
	    // However, browsers automatically do `appendChild` when there is no `nextSibling`.
	    visitRootRenderNodes(view, 2 /* InsertBefore */, parentNode, nextSibling, undefined);
	}
	function renderDetachView$1(view) {
	    visitRootRenderNodes(view, 3 /* RemoveChild */, null, null, undefined);
	}

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	var EMPTY_CONTEXT = {};
	// Attention: this function is called as top level function.
	// Putting any logic in here will destroy closure tree shaking!
	function createComponentFactory(selector, componentType, viewDefFactory, inputs, outputs, ngContentSelectors) {
	    return new ComponentFactory_(selector, componentType, viewDefFactory, inputs, outputs, ngContentSelectors);
	}
	function getComponentViewDefinitionFactory(componentFactory) {
	    return componentFactory.viewDefFactory;
	}
	var ComponentFactory_ = /** @class */ (function (_super) {
	    __extends(ComponentFactory_, _super);
	    function ComponentFactory_(selector, componentType, viewDefFactory, _inputs, _outputs, ngContentSelectors) {
	        var _this = 
	        // Attention: this ctor is called as top level function.
	        // Putting any logic in here will destroy closure tree shaking!
	        _super.call(this) || this;
	        _this.selector = selector;
	        _this.componentType = componentType;
	        _this._inputs = _inputs;
	        _this._outputs = _outputs;
	        _this.ngContentSelectors = ngContentSelectors;
	        _this.viewDefFactory = viewDefFactory;
	        return _this;
	    }
	    Object.defineProperty(ComponentFactory_.prototype, "inputs", {
	        get: function () {
	            var inputsArr = [];
	            var inputs = this._inputs;
	            for (var propName in inputs) {
	                var templateName = inputs[propName];
	                inputsArr.push({ propName: propName, templateName: templateName });
	            }
	            return inputsArr;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(ComponentFactory_.prototype, "outputs", {
	        get: function () {
	            var outputsArr = [];
	            for (var propName in this._outputs) {
	                var templateName = this._outputs[propName];
	                outputsArr.push({ propName: propName, templateName: templateName });
	            }
	            return outputsArr;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    /**
	     * Creates a new component.
	     */
	    ComponentFactory_.prototype.create = function (injector, projectableNodes, rootSelectorOrNode, ngModule) {
	        if (!ngModule) {
	            throw new Error('ngModule should be provided');
	        }
	        var viewDef = resolveDefinition(this.viewDefFactory);
	        var componentNodeIndex = viewDef.nodes[0].element.componentProvider.nodeIndex;
	        var view = Services.createRootView(injector, projectableNodes || [], rootSelectorOrNode, viewDef, ngModule, EMPTY_CONTEXT);
	        var component = asProviderData(view, componentNodeIndex).instance;
	        if (rootSelectorOrNode) {
	            view.renderer.setAttribute(asElementData(view, 0).renderElement, 'ng-version', VERSION$2.full);
	        }
	        return new ComponentRef_(view, new ViewRef_(view), component);
	    };
	    return ComponentFactory_;
	}(ComponentFactory));
	var ComponentRef_ = /** @class */ (function (_super) {
	    __extends(ComponentRef_, _super);
	    function ComponentRef_(_view, _viewRef, _component) {
	        var _this = _super.call(this) || this;
	        _this._view = _view;
	        _this._viewRef = _viewRef;
	        _this._component = _component;
	        _this._elDef = _this._view.def.nodes[0];
	        _this.hostView = _viewRef;
	        _this.changeDetectorRef = _viewRef;
	        _this.instance = _component;
	        return _this;
	    }
	    Object.defineProperty(ComponentRef_.prototype, "location", {
	        get: function () {
	            return new ElementRef(asElementData(this._view, this._elDef.nodeIndex).renderElement);
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(ComponentRef_.prototype, "injector", {
	        get: function () {
	            return new Injector_(this._view, this._elDef);
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(ComponentRef_.prototype, "componentType", {
	        get: function () {
	            return this._component.constructor;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    ComponentRef_.prototype.destroy = function () {
	        this._viewRef.destroy();
	    };
	    ComponentRef_.prototype.onDestroy = function (callback) {
	        this._viewRef.onDestroy(callback);
	    };
	    return ComponentRef_;
	}(ComponentRef));
	function createViewContainerData(view, elDef, elData) {
	    return new ViewContainerRef_(view, elDef, elData);
	}
	var ViewContainerRef_ = /** @class */ (function () {
	    function ViewContainerRef_(_view, _elDef, _data) {
	        this._view = _view;
	        this._elDef = _elDef;
	        this._data = _data;
	        /**
	         * @internal
	         */
	        this._embeddedViews = [];
	    }
	    Object.defineProperty(ViewContainerRef_.prototype, "element", {
	        get: function () {
	            return new ElementRef(this._data.renderElement);
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(ViewContainerRef_.prototype, "injector", {
	        get: function () {
	            return new Injector_(this._view, this._elDef);
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(ViewContainerRef_.prototype, "parentInjector", {
	        /** @deprecated No replacement */
	        get: function () {
	            var view = this._view;
	            var elDef = this._elDef.parent;
	            while (!elDef && view) {
	                elDef = viewParentEl(view);
	                view = view.parent;
	            }
	            return view ? new Injector_(view, elDef) : new Injector_(this._view, null);
	        },
	        enumerable: true,
	        configurable: true
	    });
	    ViewContainerRef_.prototype.clear = function () {
	        var len = this._embeddedViews.length;
	        for (var i = len - 1; i >= 0; i--) {
	            var view = detachEmbeddedView(this._data, i);
	            Services.destroyView(view);
	        }
	    };
	    ViewContainerRef_.prototype.get = function (index) {
	        var view = this._embeddedViews[index];
	        if (view) {
	            var ref = new ViewRef_(view);
	            ref.attachToViewContainerRef(this);
	            return ref;
	        }
	        return null;
	    };
	    Object.defineProperty(ViewContainerRef_.prototype, "length", {
	        get: function () {
	            return this._embeddedViews.length;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    ViewContainerRef_.prototype.createEmbeddedView = function (templateRef, context, index) {
	        var viewRef = templateRef.createEmbeddedView(context || {});
	        this.insert(viewRef, index);
	        return viewRef;
	    };
	    ViewContainerRef_.prototype.createComponent = function (componentFactory, index, injector, projectableNodes, ngModuleRef) {
	        var contextInjector = injector || this.parentInjector;
	        if (!ngModuleRef && !(componentFactory instanceof ComponentFactoryBoundToModule)) {
	            ngModuleRef = contextInjector.get(NgModuleRef);
	        }
	        var componentRef = componentFactory.create(contextInjector, projectableNodes, undefined, ngModuleRef);
	        this.insert(componentRef.hostView, index);
	        return componentRef;
	    };
	    ViewContainerRef_.prototype.insert = function (viewRef, index) {
	        if (viewRef.destroyed) {
	            throw new Error('Cannot insert a destroyed View in a ViewContainer!');
	        }
	        var viewRef_ = viewRef;
	        var viewData = viewRef_._view;
	        attachEmbeddedView(this._view, this._data, index, viewData);
	        viewRef_.attachToViewContainerRef(this);
	        return viewRef;
	    };
	    ViewContainerRef_.prototype.move = function (viewRef, currentIndex) {
	        if (viewRef.destroyed) {
	            throw new Error('Cannot move a destroyed View in a ViewContainer!');
	        }
	        var previousIndex = this._embeddedViews.indexOf(viewRef._view);
	        moveEmbeddedView(this._data, previousIndex, currentIndex);
	        return viewRef;
	    };
	    ViewContainerRef_.prototype.indexOf = function (viewRef) {
	        return this._embeddedViews.indexOf(viewRef._view);
	    };
	    ViewContainerRef_.prototype.remove = function (index) {
	        var viewData = detachEmbeddedView(this._data, index);
	        if (viewData) {
	            Services.destroyView(viewData);
	        }
	    };
	    ViewContainerRef_.prototype.detach = function (index) {
	        var view = detachEmbeddedView(this._data, index);
	        return view ? new ViewRef_(view) : null;
	    };
	    return ViewContainerRef_;
	}());
	function createChangeDetectorRef(view) {
	    return new ViewRef_(view);
	}
	var ViewRef_ = /** @class */ (function () {
	    function ViewRef_(_view) {
	        this._view = _view;
	        this._viewContainerRef = null;
	        this._appRef = null;
	    }
	    Object.defineProperty(ViewRef_.prototype, "rootNodes", {
	        get: function () {
	            return rootRenderNodes(this._view);
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(ViewRef_.prototype, "context", {
	        get: function () {
	            return this._view.context;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(ViewRef_.prototype, "destroyed", {
	        get: function () {
	            return (this._view.state & 128 /* Destroyed */) !== 0;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    ViewRef_.prototype.markForCheck = function () {
	        markParentViewsForCheck(this._view);
	    };
	    ViewRef_.prototype.detach = function () {
	        this._view.state &= ~4 /* Attached */;
	    };
	    ViewRef_.prototype.detectChanges = function () {
	        var fs = this._view.root.rendererFactory;
	        if (fs.begin) {
	            fs.begin();
	        }
	        try {
	            Services.checkAndUpdateView(this._view);
	        }
	        finally {
	            if (fs.end) {
	                fs.end();
	            }
	        }
	    };
	    ViewRef_.prototype.checkNoChanges = function () {
	        Services.checkNoChangesView(this._view);
	    };
	    ViewRef_.prototype.reattach = function () {
	        this._view.state |= 4 /* Attached */;
	    };
	    ViewRef_.prototype.onDestroy = function (callback) {
	        if (!this._view.disposables) {
	            this._view.disposables = [];
	        }
	        this._view.disposables.push(callback);
	    };
	    ViewRef_.prototype.destroy = function () {
	        if (this._appRef) {
	            this._appRef.detachView(this);
	        }
	        else if (this._viewContainerRef) {
	            this._viewContainerRef.detach(this._viewContainerRef.indexOf(this));
	        }
	        Services.destroyView(this._view);
	    };
	    ViewRef_.prototype.detachFromAppRef = function () {
	        this._appRef = null;
	        renderDetachView$1(this._view);
	        Services.dirtyParentQueries(this._view);
	    };
	    ViewRef_.prototype.attachToAppRef = function (appRef) {
	        if (this._viewContainerRef) {
	            throw new Error('This view is already attached to a ViewContainer!');
	        }
	        this._appRef = appRef;
	    };
	    ViewRef_.prototype.attachToViewContainerRef = function (vcRef) {
	        if (this._appRef) {
	            throw new Error('This view is already attached directly to the ApplicationRef!');
	        }
	        this._viewContainerRef = vcRef;
	    };
	    return ViewRef_;
	}());
	function createTemplateData(view, def) {
	    return new TemplateRef_(view, def);
	}
	var TemplateRef_ = /** @class */ (function (_super) {
	    __extends(TemplateRef_, _super);
	    function TemplateRef_(_parentView, _def) {
	        var _this = _super.call(this) || this;
	        _this._parentView = _parentView;
	        _this._def = _def;
	        return _this;
	    }
	    TemplateRef_.prototype.createEmbeddedView = function (context) {
	        return new ViewRef_(Services.createEmbeddedView(this._parentView, this._def, this._def.element.template, context));
	    };
	    Object.defineProperty(TemplateRef_.prototype, "elementRef", {
	        get: function () {
	            return new ElementRef(asElementData(this._parentView, this._def.nodeIndex).renderElement);
	        },
	        enumerable: true,
	        configurable: true
	    });
	    return TemplateRef_;
	}(TemplateRef));
	function createInjector$1(view, elDef) {
	    return new Injector_(view, elDef);
	}
	var Injector_ = /** @class */ (function () {
	    function Injector_(view, elDef) {
	        this.view = view;
	        this.elDef = elDef;
	    }
	    Injector_.prototype.get = function (token, notFoundValue) {
	        if (notFoundValue === void 0) { notFoundValue = Injector.THROW_IF_NOT_FOUND; }
	        var allowPrivateServices = this.elDef ? (this.elDef.flags & 33554432 /* ComponentView */) !== 0 : false;
	        return Services.resolveDep(this.view, this.elDef, allowPrivateServices, { flags: 0 /* None */, token: token, tokenKey: tokenKey(token) }, notFoundValue);
	    };
	    return Injector_;
	}());
	function nodeValue(view, index) {
	    var def = view.def.nodes[index];
	    if (def.flags & 1 /* TypeElement */) {
	        var elData = asElementData(view, def.nodeIndex);
	        return def.element.template ? elData.template : elData.renderElement;
	    }
	    else if (def.flags & 2 /* TypeText */) {
	        return asTextData(view, def.nodeIndex).renderText;
	    }
	    else if (def.flags & (20224 /* CatProvider */ | 16 /* TypePipe */)) {
	        return asProviderData(view, def.nodeIndex).instance;
	    }
	    throw new Error("Illegal state: read nodeValue for node index " + index);
	}
	function createNgModuleRef(moduleType, parent, bootstrapComponents, def) {
	    return new NgModuleRef_(moduleType, parent, bootstrapComponents, def);
	}
	var NgModuleRef_ = /** @class */ (function () {
	    function NgModuleRef_(_moduleType, _parent, _bootstrapComponents, _def) {
	        this._moduleType = _moduleType;
	        this._parent = _parent;
	        this._bootstrapComponents = _bootstrapComponents;
	        this._def = _def;
	        this._destroyListeners = [];
	        this._destroyed = false;
	        this.injector = this;
	        initNgModule(this);
	    }
	    NgModuleRef_.prototype.get = function (token, notFoundValue, injectFlags) {
	        if (notFoundValue === void 0) { notFoundValue = Injector.THROW_IF_NOT_FOUND; }
	        if (injectFlags === void 0) { injectFlags = InjectFlags.Default; }
	        var flags = 0 /* None */;
	        if (injectFlags & InjectFlags.SkipSelf) {
	            flags |= 1 /* SkipSelf */;
	        }
	        else if (injectFlags & InjectFlags.Self) {
	            flags |= 4 /* Self */;
	        }
	        return resolveNgModuleDep(this, { token: token, tokenKey: tokenKey(token), flags: flags }, notFoundValue);
	    };
	    Object.defineProperty(NgModuleRef_.prototype, "instance", {
	        get: function () {
	            return this.get(this._moduleType);
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(NgModuleRef_.prototype, "componentFactoryResolver", {
	        get: function () {
	            return this.get(ComponentFactoryResolver);
	        },
	        enumerable: true,
	        configurable: true
	    });
	    NgModuleRef_.prototype.destroy = function () {
	        if (this._destroyed) {
	            throw new Error("The ng module " + stringify$1(this.instance.constructor) + " has already been destroyed.");
	        }
	        this._destroyed = true;
	        callNgModuleLifecycle(this);
	        this._destroyListeners.forEach(function (listener) { return listener(); });
	    };
	    NgModuleRef_.prototype.onDestroy = function (callback) {
	        this._destroyListeners.push(callback);
	    };
	    return NgModuleRef_;
	}());

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	var Renderer2TokenKey = tokenKey(Renderer2);
	var ElementRefTokenKey = tokenKey(ElementRef);
	var ViewContainerRefTokenKey = tokenKey(ViewContainerRef);
	var TemplateRefTokenKey = tokenKey(TemplateRef);
	var ChangeDetectorRefTokenKey = tokenKey(ChangeDetectorRef);
	var InjectorRefTokenKey$1 = tokenKey(Injector);
	var INJECTORRefTokenKey$1 = tokenKey(INJECTOR);
	function directiveDef(checkIndex, flags, matchedQueries, childCount, ctor, deps, props, outputs) {
	    var bindings = [];
	    if (props) {
	        for (var prop in props) {
	            var _a = __read(props[prop], 2), bindingIndex = _a[0], nonMinifiedName = _a[1];
	            bindings[bindingIndex] = {
	                flags: 8 /* TypeProperty */,
	                name: prop,
	                nonMinifiedName: nonMinifiedName,
	                ns: null,
	                securityContext: null,
	                suffix: null
	            };
	        }
	    }
	    var outputDefs = [];
	    if (outputs) {
	        for (var propName in outputs) {
	            outputDefs.push({ type: 1 /* DirectiveOutput */, propName: propName, target: null, eventName: outputs[propName] });
	        }
	    }
	    flags |= 16384 /* TypeDirective */;
	    return _def(checkIndex, flags, matchedQueries, childCount, ctor, ctor, deps, bindings, outputDefs);
	}
	function pipeDef(flags, ctor, deps) {
	    flags |= 16 /* TypePipe */;
	    return _def(-1, flags, null, 0, ctor, ctor, deps);
	}
	function providerDef$1(flags, matchedQueries, token, value, deps) {
	    return _def(-1, flags, matchedQueries, 0, token, value, deps);
	}
	function _def(checkIndex, flags, matchedQueriesDsl, childCount, token, value, deps, bindings, outputs) {
	    var _a = splitMatchedQueriesDsl(matchedQueriesDsl), matchedQueries = _a.matchedQueries, references = _a.references, matchedQueryIds = _a.matchedQueryIds;
	    if (!outputs) {
	        outputs = [];
	    }
	    if (!bindings) {
	        bindings = [];
	    }
	    // Need to resolve forwardRefs as e.g. for `useValue` we
	    // lowered the expression and then stopped evaluating it,
	    // i.e. also didn't unwrap it.
	    value = resolveForwardRef$1(value);
	    var depDefs = splitDepsDsl(deps, stringify$1(token));
	    return {
	        // will bet set by the view definition
	        nodeIndex: -1,
	        parent: null,
	        renderParent: null,
	        bindingIndex: -1,
	        outputIndex: -1,
	        // regular values
	        checkIndex: checkIndex,
	        flags: flags,
	        childFlags: 0,
	        directChildFlags: 0,
	        childMatchedQueries: 0,
	        matchedQueries: matchedQueries,
	        matchedQueryIds: matchedQueryIds,
	        references: references,
	        ngContentIndex: -1,
	        childCount: childCount,
	        bindings: bindings,
	        bindingFlags: calcBindingFlags(bindings),
	        outputs: outputs,
	        element: null,
	        provider: { token: token, value: value, deps: depDefs },
	        text: null,
	        query: null,
	        ngContent: null
	    };
	}
	function createProviderInstance(view, def) {
	    return _createProviderInstance$1(view, def);
	}
	function createPipeInstance(view, def) {
	    // deps are looked up from component.
	    var compView = view;
	    while (compView.parent && !isComponentView(compView)) {
	        compView = compView.parent;
	    }
	    // pipes can see the private services of the component
	    var allowPrivateServices = true;
	    // pipes are always eager and classes!
	    return createClass(compView.parent, viewParentEl(compView), allowPrivateServices, def.provider.value, def.provider.deps);
	}
	function createDirectiveInstance(view, def) {
	    // components can see other private services, other directives can't.
	    var allowPrivateServices = (def.flags & 32768 /* Component */) > 0;
	    // directives are always eager and classes!
	    var instance = createClass(view, def.parent, allowPrivateServices, def.provider.value, def.provider.deps);
	    if (def.outputs.length) {
	        for (var i = 0; i < def.outputs.length; i++) {
	            var output = def.outputs[i];
	            var outputObservable = instance[output.propName];
	            if (isObservable$1(outputObservable)) {
	                var subscription = outputObservable.subscribe(eventHandlerClosure(view, def.parent.nodeIndex, output.eventName));
	                view.disposables[def.outputIndex + i] = subscription.unsubscribe.bind(subscription);
	            }
	            else {
	                throw new Error("@Output " + output.propName + " not initialized in '" + instance.constructor.name + "'.");
	            }
	        }
	    }
	    return instance;
	}
	function eventHandlerClosure(view, index, eventName) {
	    return function (event) { return dispatchEvent(view, index, eventName, event); };
	}
	function checkAndUpdateDirectiveInline(view, def, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9) {
	    var providerData = asProviderData(view, def.nodeIndex);
	    var directive = providerData.instance;
	    var changed = false;
	    var changes = undefined;
	    var bindLen = def.bindings.length;
	    if (bindLen > 0 && checkBinding(view, def, 0, v0)) {
	        changed = true;
	        changes = updateProp(view, providerData, def, 0, v0, changes);
	    }
	    if (bindLen > 1 && checkBinding(view, def, 1, v1)) {
	        changed = true;
	        changes = updateProp(view, providerData, def, 1, v1, changes);
	    }
	    if (bindLen > 2 && checkBinding(view, def, 2, v2)) {
	        changed = true;
	        changes = updateProp(view, providerData, def, 2, v2, changes);
	    }
	    if (bindLen > 3 && checkBinding(view, def, 3, v3)) {
	        changed = true;
	        changes = updateProp(view, providerData, def, 3, v3, changes);
	    }
	    if (bindLen > 4 && checkBinding(view, def, 4, v4)) {
	        changed = true;
	        changes = updateProp(view, providerData, def, 4, v4, changes);
	    }
	    if (bindLen > 5 && checkBinding(view, def, 5, v5)) {
	        changed = true;
	        changes = updateProp(view, providerData, def, 5, v5, changes);
	    }
	    if (bindLen > 6 && checkBinding(view, def, 6, v6)) {
	        changed = true;
	        changes = updateProp(view, providerData, def, 6, v6, changes);
	    }
	    if (bindLen > 7 && checkBinding(view, def, 7, v7)) {
	        changed = true;
	        changes = updateProp(view, providerData, def, 7, v7, changes);
	    }
	    if (bindLen > 8 && checkBinding(view, def, 8, v8)) {
	        changed = true;
	        changes = updateProp(view, providerData, def, 8, v8, changes);
	    }
	    if (bindLen > 9 && checkBinding(view, def, 9, v9)) {
	        changed = true;
	        changes = updateProp(view, providerData, def, 9, v9, changes);
	    }
	    if (changes) {
	        directive.ngOnChanges(changes);
	    }
	    if ((def.flags & 65536 /* OnInit */) &&
	        shouldCallLifecycleInitHook(view, 256 /* InitState_CallingOnInit */, def.nodeIndex)) {
	        directive.ngOnInit();
	    }
	    if (def.flags & 262144 /* DoCheck */) {
	        directive.ngDoCheck();
	    }
	    return changed;
	}
	function checkAndUpdateDirectiveDynamic(view, def, values) {
	    var providerData = asProviderData(view, def.nodeIndex);
	    var directive = providerData.instance;
	    var changed = false;
	    var changes = undefined;
	    for (var i = 0; i < values.length; i++) {
	        if (checkBinding(view, def, i, values[i])) {
	            changed = true;
	            changes = updateProp(view, providerData, def, i, values[i], changes);
	        }
	    }
	    if (changes) {
	        directive.ngOnChanges(changes);
	    }
	    if ((def.flags & 65536 /* OnInit */) &&
	        shouldCallLifecycleInitHook(view, 256 /* InitState_CallingOnInit */, def.nodeIndex)) {
	        directive.ngOnInit();
	    }
	    if (def.flags & 262144 /* DoCheck */) {
	        directive.ngDoCheck();
	    }
	    return changed;
	}
	function _createProviderInstance$1(view, def) {
	    // private services can see other private services
	    var allowPrivateServices = (def.flags & 8192 /* PrivateProvider */) > 0;
	    var providerDef = def.provider;
	    switch (def.flags & 201347067 /* Types */) {
	        case 512 /* TypeClassProvider */:
	            return createClass(view, def.parent, allowPrivateServices, providerDef.value, providerDef.deps);
	        case 1024 /* TypeFactoryProvider */:
	            return callFactory(view, def.parent, allowPrivateServices, providerDef.value, providerDef.deps);
	        case 2048 /* TypeUseExistingProvider */:
	            return resolveDep(view, def.parent, allowPrivateServices, providerDef.deps[0]);
	        case 256 /* TypeValueProvider */:
	            return providerDef.value;
	    }
	}
	function createClass(view, elDef, allowPrivateServices, ctor, deps) {
	    var len = deps.length;
	    switch (len) {
	        case 0:
	            return new ctor();
	        case 1:
	            return new ctor(resolveDep(view, elDef, allowPrivateServices, deps[0]));
	        case 2:
	            return new ctor(resolveDep(view, elDef, allowPrivateServices, deps[0]), resolveDep(view, elDef, allowPrivateServices, deps[1]));
	        case 3:
	            return new ctor(resolveDep(view, elDef, allowPrivateServices, deps[0]), resolveDep(view, elDef, allowPrivateServices, deps[1]), resolveDep(view, elDef, allowPrivateServices, deps[2]));
	        default:
	            var depValues = [];
	            for (var i = 0; i < len; i++) {
	                depValues.push(resolveDep(view, elDef, allowPrivateServices, deps[i]));
	            }
	            return new (ctor.bind.apply(ctor, __spread([void 0], depValues)))();
	    }
	}
	function callFactory(view, elDef, allowPrivateServices, factory, deps) {
	    var len = deps.length;
	    switch (len) {
	        case 0:
	            return factory();
	        case 1:
	            return factory(resolveDep(view, elDef, allowPrivateServices, deps[0]));
	        case 2:
	            return factory(resolveDep(view, elDef, allowPrivateServices, deps[0]), resolveDep(view, elDef, allowPrivateServices, deps[1]));
	        case 3:
	            return factory(resolveDep(view, elDef, allowPrivateServices, deps[0]), resolveDep(view, elDef, allowPrivateServices, deps[1]), resolveDep(view, elDef, allowPrivateServices, deps[2]));
	        default:
	            var depValues = [];
	            for (var i = 0; i < len; i++) {
	                depValues.push(resolveDep(view, elDef, allowPrivateServices, deps[i]));
	            }
	            return factory.apply(void 0, __spread(depValues));
	    }
	}
	// This default value is when checking the hierarchy for a token.
	//
	// It means both:
	// - the token is not provided by the current injector,
	// - only the element injectors should be checked (ie do not check module injectors
	//
	//          mod1
	//         /
	//       el1   mod2
	//         \  /
	//         el2
	//
	// When requesting el2.injector.get(token), we should check in the following order and return the
	// first found value:
	// - el2.injector.get(token, default)
	// - el1.injector.get(token, NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR) -> do not check the module
	// - mod2.injector.get(token, default)
	var NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR = {};
	function resolveDep(view, elDef, allowPrivateServices, depDef, notFoundValue) {
	    if (notFoundValue === void 0) { notFoundValue = Injector.THROW_IF_NOT_FOUND; }
	    if (depDef.flags & 8 /* Value */) {
	        return depDef.token;
	    }
	    var startView = view;
	    if (depDef.flags & 2 /* Optional */) {
	        notFoundValue = null;
	    }
	    var tokenKey = depDef.tokenKey;
	    if (tokenKey === ChangeDetectorRefTokenKey) {
	        // directives on the same element as a component should be able to control the change detector
	        // of that component as well.
	        allowPrivateServices = !!(elDef && elDef.element.componentView);
	    }
	    if (elDef && (depDef.flags & 1 /* SkipSelf */)) {
	        allowPrivateServices = false;
	        elDef = elDef.parent;
	    }
	    var searchView = view;
	    while (searchView) {
	        if (elDef) {
	            switch (tokenKey) {
	                case Renderer2TokenKey: {
	                    var compView = findCompView(searchView, elDef, allowPrivateServices);
	                    return compView.renderer;
	                }
	                case ElementRefTokenKey:
	                    return new ElementRef(asElementData(searchView, elDef.nodeIndex).renderElement);
	                case ViewContainerRefTokenKey:
	                    return asElementData(searchView, elDef.nodeIndex).viewContainer;
	                case TemplateRefTokenKey: {
	                    if (elDef.element.template) {
	                        return asElementData(searchView, elDef.nodeIndex).template;
	                    }
	                    break;
	                }
	                case ChangeDetectorRefTokenKey: {
	                    var cdView = findCompView(searchView, elDef, allowPrivateServices);
	                    return createChangeDetectorRef(cdView);
	                }
	                case InjectorRefTokenKey$1:
	                case INJECTORRefTokenKey$1:
	                    return createInjector$1(searchView, elDef);
	                default:
	                    var providerDef_1 = (allowPrivateServices ? elDef.element.allProviders :
	                        elDef.element.publicProviders)[tokenKey];
	                    if (providerDef_1) {
	                        var providerData = asProviderData(searchView, providerDef_1.nodeIndex);
	                        if (!providerData) {
	                            providerData = { instance: _createProviderInstance$1(searchView, providerDef_1) };
	                            searchView.nodes[providerDef_1.nodeIndex] = providerData;
	                        }
	                        return providerData.instance;
	                    }
	            }
	        }
	        allowPrivateServices = isComponentView(searchView);
	        elDef = viewParentEl(searchView);
	        searchView = searchView.parent;
	        if (depDef.flags & 4 /* Self */) {
	            searchView = null;
	        }
	    }
	    var value = startView.root.injector.get(depDef.token, NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR);
	    if (value !== NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR ||
	        notFoundValue === NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR) {
	        // Return the value from the root element injector when
	        // - it provides it
	        //   (value !== NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR)
	        // - the module injector should not be checked
	        //   (notFoundValue === NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR)
	        return value;
	    }
	    return startView.root.ngModule.injector.get(depDef.token, notFoundValue);
	}
	function findCompView(view, elDef, allowPrivateServices) {
	    var compView;
	    if (allowPrivateServices) {
	        compView = asElementData(view, elDef.nodeIndex).componentView;
	    }
	    else {
	        compView = view;
	        while (compView.parent && !isComponentView(compView)) {
	            compView = compView.parent;
	        }
	    }
	    return compView;
	}
	function updateProp(view, providerData, def, bindingIdx, value, changes) {
	    if (def.flags & 32768 /* Component */) {
	        var compView = asElementData(view, def.parent.nodeIndex).componentView;
	        if (compView.def.flags & 2 /* OnPush */) {
	            compView.state |= 8 /* ChecksEnabled */;
	        }
	    }
	    var binding = def.bindings[bindingIdx];
	    var propName = binding.name;
	    // Note: This is still safe with Closure Compiler as
	    // the user passed in the property name as an object has to `providerDef`,
	    // so Closure Compiler will have renamed the property correctly already.
	    providerData.instance[propName] = value;
	    if (def.flags & 524288 /* OnChanges */) {
	        changes = changes || {};
	        var oldValue = WrappedValue.unwrap(view.oldValues[def.bindingIndex + bindingIdx]);
	        var binding_1 = def.bindings[bindingIdx];
	        changes[binding_1.nonMinifiedName] =
	            new SimpleChange(oldValue, value, (view.state & 2 /* FirstCheck */) !== 0);
	    }
	    view.oldValues[def.bindingIndex + bindingIdx] = value;
	    return changes;
	}
	// This function calls the ngAfterContentCheck, ngAfterContentInit,
	// ngAfterViewCheck, and ngAfterViewInit lifecycle hooks (depending on the node
	// flags in lifecycle). Unlike ngDoCheck, ngOnChanges and ngOnInit, which are
	// called during a pre-order traversal of the view tree (that is calling the
	// parent hooks before the child hooks) these events are sent in using a
	// post-order traversal of the tree (children before parents). This changes the
	// meaning of initIndex in the view state. For ngOnInit, initIndex tracks the
	// expected nodeIndex which a ngOnInit should be called. When sending
	// ngAfterContentInit and ngAfterViewInit it is the expected count of
	// ngAfterContentInit or ngAfterViewInit methods that have been called. This
	// ensure that despite being called recursively or after picking up after an
	// exception, the ngAfterContentInit or ngAfterViewInit will be called on the
	// correct nodes. Consider for example, the following (where E is an element
	// and D is a directive)
	//  Tree:       pre-order index  post-order index
	//    E1        0                6
	//      E2      1                1
	//       D3     2                0
	//      E4      3                5
	//       E5     4                4
	//        E6    5                2
	//        E7    6                3
	// As can be seen, the post-order index has an unclear relationship to the
	// pre-order index (postOrderIndex === preOrderIndex - parentCount +
	// childCount). Since number of calls to ngAfterContentInit and ngAfterViewInit
	// are stable (will be the same for the same view regardless of exceptions or
	// recursion) we just need to count them which will roughly correspond to the
	// post-order index (it skips elements and directives that do not have
	// lifecycle hooks).
	//
	// For example, if an exception is raised in the E6.onAfterViewInit() the
	// initIndex is left at 3 (by shouldCallLifecycleInitHook() which set it to
	// initIndex + 1). When checkAndUpdateView() is called again D3, E2 and E6 will
	// not have their ngAfterViewInit() called but, starting with E7, the rest of
	// the view will begin getting ngAfterViewInit() called until a check and
	// pass is complete.
	//
	// This algorthim also handles recursion. Consider if E4's ngAfterViewInit()
	// indirectly calls E1's ChangeDetectorRef.detectChanges(). The expected
	// initIndex is set to 6, the recusive checkAndUpdateView() starts walk again.
	// D3, E2, E6, E7, E5 and E4 are skipped, ngAfterViewInit() is called on E1.
	// When the recursion returns the initIndex will be 7 so E1 is skipped as it
	// has already been called in the recursively called checkAnUpdateView().
	function callLifecycleHooksChildrenFirst(view, lifecycles) {
	    if (!(view.def.nodeFlags & lifecycles)) {
	        return;
	    }
	    var nodes = view.def.nodes;
	    var initIndex = 0;
	    for (var i = 0; i < nodes.length; i++) {
	        var nodeDef = nodes[i];
	        var parent_1 = nodeDef.parent;
	        if (!parent_1 && nodeDef.flags & lifecycles) {
	            // matching root node (e.g. a pipe)
	            callProviderLifecycles(view, i, nodeDef.flags & lifecycles, initIndex++);
	        }
	        if ((nodeDef.childFlags & lifecycles) === 0) {
	            // no child matches one of the lifecycles
	            i += nodeDef.childCount;
	        }
	        while (parent_1 && (parent_1.flags & 1 /* TypeElement */) &&
	            i === parent_1.nodeIndex + parent_1.childCount) {
	            // last child of an element
	            if (parent_1.directChildFlags & lifecycles) {
	                initIndex = callElementProvidersLifecycles(view, parent_1, lifecycles, initIndex);
	            }
	            parent_1 = parent_1.parent;
	        }
	    }
	}
	function callElementProvidersLifecycles(view, elDef, lifecycles, initIndex) {
	    for (var i = elDef.nodeIndex + 1; i <= elDef.nodeIndex + elDef.childCount; i++) {
	        var nodeDef = view.def.nodes[i];
	        if (nodeDef.flags & lifecycles) {
	            callProviderLifecycles(view, i, nodeDef.flags & lifecycles, initIndex++);
	        }
	        // only visit direct children
	        i += nodeDef.childCount;
	    }
	    return initIndex;
	}
	function callProviderLifecycles(view, index, lifecycles, initIndex) {
	    var providerData = asProviderData(view, index);
	    if (!providerData) {
	        return;
	    }
	    var provider = providerData.instance;
	    if (!provider) {
	        return;
	    }
	    Services.setCurrentNode(view, index);
	    if (lifecycles & 1048576 /* AfterContentInit */ &&
	        shouldCallLifecycleInitHook(view, 512 /* InitState_CallingAfterContentInit */, initIndex)) {
	        provider.ngAfterContentInit();
	    }
	    if (lifecycles & 2097152 /* AfterContentChecked */) {
	        provider.ngAfterContentChecked();
	    }
	    if (lifecycles & 4194304 /* AfterViewInit */ &&
	        shouldCallLifecycleInitHook(view, 768 /* InitState_CallingAfterViewInit */, initIndex)) {
	        provider.ngAfterViewInit();
	    }
	    if (lifecycles & 8388608 /* AfterViewChecked */) {
	        provider.ngAfterViewChecked();
	    }
	    if (lifecycles & 131072 /* OnDestroy */) {
	        provider.ngOnDestroy();
	    }
	}

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	var ComponentFactoryResolver$1 = /** @class */ (function (_super) {
	    __extends(ComponentFactoryResolver, _super);
	    /**
	     * @param ngModule The NgModuleRef to which all resolved factories are bound.
	     */
	    function ComponentFactoryResolver(ngModule) {
	        var _this = _super.call(this) || this;
	        _this.ngModule = ngModule;
	        return _this;
	    }
	    ComponentFactoryResolver.prototype.resolveComponentFactory = function (component) {
	        ngDevMode && assertComponentType(component);
	        var componentDef = getComponentDef(component);
	        return new ComponentFactory$1(componentDef, this.ngModule);
	    };
	    return ComponentFactoryResolver;
	}(ComponentFactoryResolver));
	function toRefArray(map) {
	    var array = [];
	    for (var nonMinified in map) {
	        if (map.hasOwnProperty(nonMinified)) {
	            var minified = map[nonMinified];
	            array.push({ propName: minified, templateName: nonMinified });
	        }
	    }
	    return array;
	}
	function getNamespace$1(elementName) {
	    var name = elementName.toLowerCase();
	    return name === 'svg' ? SVG_NAMESPACE : (name === 'math' ? MATH_ML_NAMESPACE : null);
	}
	/**
	 * A change detection scheduler token for {@link RootContext}. This token is the default value used
	 * for the default `RootContext` found in the {@link ROOT_CONTEXT} token.
	 */
	var SCHEDULER = new InjectionToken('SCHEDULER_TOKEN', {
	    providedIn: 'root',
	    factory: function () { return defaultScheduler; },
	});
	function createChainedInjector(rootViewInjector, moduleInjector) {
	    return {
	        get: function (token, notFoundValue, flags) {
	            var value = rootViewInjector.get(token, NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR, flags);
	            if (value !== NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR ||
	                notFoundValue === NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR) {
	                // Return the value from the root element injector when
	                // - it provides it
	                //   (value !== NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR)
	                // - the module injector should not be checked
	                //   (notFoundValue === NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR)
	                return value;
	            }
	            return moduleInjector.get(token, notFoundValue, flags);
	        }
	    };
	}
	/**
	 * Render3 implementation of {@link viewEngine_ComponentFactory}.
	 */
	var ComponentFactory$1 = /** @class */ (function (_super) {
	    __extends(ComponentFactory, _super);
	    /**
	     * @param componentDef The component definition.
	     * @param ngModule The NgModuleRef to which the factory is bound.
	     */
	    function ComponentFactory(componentDef, ngModule) {
	        var _this = _super.call(this) || this;
	        _this.componentDef = componentDef;
	        _this.ngModule = ngModule;
	        _this.componentType = componentDef.type;
	        _this.selector = stringifyCSSSelectorList(componentDef.selectors);
	        _this.ngContentSelectors =
	            componentDef.ngContentSelectors ? componentDef.ngContentSelectors : [];
	        _this.isBoundToModule = !!ngModule;
	        return _this;
	    }
	    Object.defineProperty(ComponentFactory.prototype, "inputs", {
	        get: function () {
	            return toRefArray(this.componentDef.inputs);
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(ComponentFactory.prototype, "outputs", {
	        get: function () {
	            return toRefArray(this.componentDef.outputs);
	        },
	        enumerable: true,
	        configurable: true
	    });
	    ComponentFactory.prototype.create = function (injector, projectableNodes, rootSelectorOrNode, ngModule) {
	        ngModule = ngModule || this.ngModule;
	        var rootViewInjector = ngModule ? createChainedInjector(injector, ngModule.injector) : injector;
	        var rendererFactory = rootViewInjector.get(RendererFactory2, domRendererFactory3);
	        var sanitizer = rootViewInjector.get(Sanitizer, null);
	        var hostRenderer = rendererFactory.createRenderer(null, this.componentDef);
	        // Determine a tag name used for creating host elements when this component is created
	        // dynamically. Default to 'div' if this component did not specify any tag name in its selector.
	        var elementName = this.componentDef.selectors[0][0] || 'div';
	        var hostRNode = rootSelectorOrNode ?
	            locateHostElement(hostRenderer, rootSelectorOrNode, this.componentDef.encapsulation) :
	            elementCreate(elementName, rendererFactory.createRenderer(null, this.componentDef), getNamespace$1(elementName));
	        var rootFlags = this.componentDef.onPush ? 64 /* Dirty */ | 512 /* IsRoot */ :
	            16 /* CheckAlways */ | 512 /* IsRoot */;
	        // Check whether this Component needs to be isolated from other components, i.e. whether it
	        // should be placed into its own (empty) root context or existing root context should be used.
	        // Note: this is internal-only convention and might change in the future, so it should not be
	        // relied upon externally.
	        var isIsolated = typeof rootSelectorOrNode === 'string' &&
	            /^#root-ng-internal-isolated-\d+/.test(rootSelectorOrNode);
	        var rootContext = createRootContext();
	        // Create the root view. Uses empty TView and ContentTemplate.
	        var rootTView = createTView(0 /* Root */, -1, null, 1, 0, null, null, null, null, null);
	        var rootLView = createLView(null, rootTView, rootContext, rootFlags, null, null, rendererFactory, hostRenderer, sanitizer, rootViewInjector);
	        // rootView is the parent when bootstrapping
	        // TODO(misko): it looks like we are entering view here but we don't really need to as
	        // `renderView` does that. However as the code is written it is needed because
	        // `createRootComponentView` and `createRootComponent` both read global state. Fixing those
	        // issues would allow us to drop this.
	        enterView(rootLView, null);
	        var component;
	        var tElementNode;
	        try {
	            var componentView = createRootComponentView(hostRNode, this.componentDef, rootLView, rendererFactory, hostRenderer);
	            if (hostRNode) {
	                if (rootSelectorOrNode) {
	                    setUpAttributes(hostRenderer, hostRNode, ['ng-version', VERSION$2.full]);
	                }
	                else {
	                    // If host element is created as a part of this function call (i.e. `rootSelectorOrNode`
	                    // is not defined), also apply attributes and classes extracted from component selector.
	                    // Extract attributes and classes from the first selector only to match VE behavior.
	                    var _a = extractAttrsAndClassesFromSelector(this.componentDef.selectors[0]), attrs = _a.attrs, classes = _a.classes;
	                    if (attrs) {
	                        setUpAttributes(hostRenderer, hostRNode, attrs);
	                    }
	                    if (classes && classes.length > 0) {
	                        writeDirectClass(hostRenderer, hostRNode, classes.join(' '));
	                    }
	                }
	            }
	            tElementNode = getTNode(rootTView, 0);
	            if (projectableNodes !== undefined) {
	                var projection = tElementNode.projection = [];
	                for (var i = 0; i < this.ngContentSelectors.length; i++) {
	                    var nodesforSlot = projectableNodes[i];
	                    // Projectable nodes can be passed as array of arrays or an array of iterables (ngUpgrade
	                    // case). Here we do normalize passed data structure to be an array of arrays to avoid
	                    // complex checks down the line.
	                    // We also normalize the length of the passed in projectable nodes (to match the number of
	                    // <ng-container> slots defined by a component).
	                    projection.push(nodesforSlot != null ? Array.from(nodesforSlot) : null);
	                }
	            }
	            // TODO: should LifecycleHooksFeature and other host features be generated by the compiler and
	            // executed here?
	            // Angular 5 reference: https://stackblitz.com/edit/lifecycle-hooks-vcref
	            component = createRootComponent(componentView, this.componentDef, rootLView, rootContext, [LifecycleHooksFeature]);
	            renderView(rootTView, rootLView, null);
	        }
	        finally {
	            leaveView();
	        }
	        var componentRef = new ComponentRef$1(this.componentType, component, createElementRef(ElementRef, tElementNode, rootLView), rootLView, tElementNode);
	        if (!rootSelectorOrNode || isIsolated) {
	            // The host element of the internal or isolated root view is attached to the component's host
	            // view node.
	            componentRef.hostView._tViewNode.child = tElementNode;
	        }
	        return componentRef;
	    };
	    return ComponentFactory;
	}(ComponentFactory));
	var componentFactoryResolver = new ComponentFactoryResolver$1();
	/**
	 * Represents an instance of a Component created via a {@link ComponentFactory}.
	 *
	 * `ComponentRef` provides access to the Component Instance as well other objects related to this
	 * Component Instance and allows you to destroy the Component Instance via the {@link #destroy}
	 * method.
	 *
	 */
	var ComponentRef$1 = /** @class */ (function (_super) {
	    __extends(ComponentRef, _super);
	    function ComponentRef(componentType, instance, location, _rootLView, _tNode) {
	        var _this = _super.call(this) || this;
	        _this.location = location;
	        _this._rootLView = _rootLView;
	        _this._tNode = _tNode;
	        _this.destroyCbs = [];
	        _this.instance = instance;
	        _this.hostView = _this.changeDetectorRef = new RootViewRef(_rootLView);
	        _this.hostView._tViewNode = assignTViewNodeToLView(_rootLView[TVIEW], null, -1, _rootLView);
	        _this.componentType = componentType;
	        return _this;
	    }
	    Object.defineProperty(ComponentRef.prototype, "injector", {
	        get: function () {
	            return new NodeInjector(this._tNode, this._rootLView);
	        },
	        enumerable: true,
	        configurable: true
	    });
	    ComponentRef.prototype.destroy = function () {
	        if (this.destroyCbs) {
	            this.destroyCbs.forEach(function (fn) { return fn(); });
	            this.destroyCbs = null;
	            !this.hostView.destroyed && this.hostView.destroy();
	        }
	    };
	    ComponentRef.prototype.onDestroy = function (callback) {
	        if (this.destroyCbs) {
	            this.destroyCbs.push(callback);
	        }
	    };
	    return ComponentRef;
	}(ComponentRef));

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * NOTE: changes to the `ngI18nClosureMode` name must be synced with `compiler-cli/src/tooling.ts`.
	 */
	if (typeof ngI18nClosureMode === 'undefined') {
	    // These property accesses can be ignored because ngI18nClosureMode will be set to false
	    // when optimizing code and the whole if statement will be dropped.
	    // Make sure to refer to ngI18nClosureMode as ['ngI18nClosureMode'] for closure.
	    // NOTE: we need to have it in IIFE so that the tree-shaker is happy.
	    (function () {
	        // tslint:disable-next-line:no-toplevel-property-access
	        _global$1['ngI18nClosureMode'] =
	            // TODO(FW-1250): validate that this actually, you know, works.
	            // tslint:disable-next-line:no-toplevel-property-access
	            typeof goog !== 'undefined' && typeof goog.getMsg === 'function';
	    })();
	}

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	// THIS CODE IS GENERATED - DO NOT MODIFY
	// See angular/tools/gulp-tasks/cldr/extract.js
	var u = undefined;
	function plural(n) {
	    var i = Math.floor(Math.abs(n)), v = n.toString().replace(/^[^.]*\.?/, '').length;
	    if (i === 1 && v === 0)
	        return 1;
	    return 5;
	}
	var localeEn = [
	    'en',
	    [['a', 'p'], ['AM', 'PM'], u],
	    [['AM', 'PM'], u, u],
	    [
	        ['S', 'M', 'T', 'W', 'T', 'F', 'S'], ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],
	        ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],
	        ['Su', 'Mo', 'Tu', 'We', 'Th', 'Fr', 'Sa']
	    ],
	    u,
	    [
	        ['J', 'F', 'M', 'A', 'M', 'J', 'J', 'A', 'S', 'O', 'N', 'D'],
	        ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],
	        [
	            'January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September',
	            'October', 'November', 'December'
	        ]
	    ],
	    u,
	    [['B', 'A'], ['BC', 'AD'], ['Before Christ', 'Anno Domini']],
	    0,
	    [6, 0],
	    ['M/d/yy', 'MMM d, y', 'MMMM d, y', 'EEEE, MMMM d, y'],
	    ['h:mm a', 'h:mm:ss a', 'h:mm:ss a z', 'h:mm:ss a zzzz'],
	    ['{1}, {0}', u, '{1} \'at\' {0}', u],
	    ['.', ',', ';', '%', '+', '-', 'E', 'Ã', 'â°', 'â', 'NaN', ':'],
	    ['#,##0.###', '#,##0%', 'Â¤#,##0.00', '#E0'],
	    'USD',
	    '$',
	    'US Dollar',
	    {},
	    'ltr',
	    plural
	];

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * This const is used to store the locale data registered with `registerLocaleData`
	 */
	var LOCALE_DATA = {};
	/**
	 * Finds the locale data for a given locale.
	 *
	 * @param locale The locale code.
	 * @returns The locale data.
	 * @see [Internationalization (i18n) Guide](https://angular.io/guide/i18n)
	 */
	function findLocaleData(locale) {
	    var normalizedLocale = normalizeLocale(locale);
	    var match = getLocaleData(normalizedLocale);
	    if (match) {
	        return match;
	    }
	    // let's try to find a parent locale
	    var parentLocale = normalizedLocale.split('-')[0];
	    match = getLocaleData(parentLocale);
	    if (match) {
	        return match;
	    }
	    if (parentLocale === 'en') {
	        return localeEn;
	    }
	    throw new Error("Missing locale data for the locale \"" + locale + "\".");
	}
	/**
	 * Retrieves the plural function used by ICU expressions to determine the plural case to use
	 * for a given locale.
	 * @param locale A locale code for the locale format rules to use.
	 * @returns The plural function for the locale.
	 * @see `NgPlural`
	 * @see [Internationalization (i18n) Guide](https://angular.io/guide/i18n)
	 */
	function getLocalePluralCase(locale) {
	    var data = findLocaleData(locale);
	    return data[LocaleDataIndex.PluralCase];
	}
	/**
	 * Helper function to get the given `normalizedLocale` from `LOCALE_DATA`
	 * or from the global `ng.common.locale`.
	 */
	function getLocaleData(normalizedLocale) {
	    if (!(normalizedLocale in LOCALE_DATA)) {
	        LOCALE_DATA[normalizedLocale] = _global$1.ng && _global$1.ng.common && _global$1.ng.common.locales &&
	            _global$1.ng.common.locales[normalizedLocale];
	    }
	    return LOCALE_DATA[normalizedLocale];
	}
	/**
	 * Index of each type of locale data from the locale data array
	 */
	var LocaleDataIndex;
	(function (LocaleDataIndex) {
	    LocaleDataIndex[LocaleDataIndex["LocaleId"] = 0] = "LocaleId";
	    LocaleDataIndex[LocaleDataIndex["DayPeriodsFormat"] = 1] = "DayPeriodsFormat";
	    LocaleDataIndex[LocaleDataIndex["DayPeriodsStandalone"] = 2] = "DayPeriodsStandalone";
	    LocaleDataIndex[LocaleDataIndex["DaysFormat"] = 3] = "DaysFormat";
	    LocaleDataIndex[LocaleDataIndex["DaysStandalone"] = 4] = "DaysStandalone";
	    LocaleDataIndex[LocaleDataIndex["MonthsFormat"] = 5] = "MonthsFormat";
	    LocaleDataIndex[LocaleDataIndex["MonthsStandalone"] = 6] = "MonthsStandalone";
	    LocaleDataIndex[LocaleDataIndex["Eras"] = 7] = "Eras";
	    LocaleDataIndex[LocaleDataIndex["FirstDayOfWeek"] = 8] = "FirstDayOfWeek";
	    LocaleDataIndex[LocaleDataIndex["WeekendRange"] = 9] = "WeekendRange";
	    LocaleDataIndex[LocaleDataIndex["DateFormat"] = 10] = "DateFormat";
	    LocaleDataIndex[LocaleDataIndex["TimeFormat"] = 11] = "TimeFormat";
	    LocaleDataIndex[LocaleDataIndex["DateTimeFormat"] = 12] = "DateTimeFormat";
	    LocaleDataIndex[LocaleDataIndex["NumberSymbols"] = 13] = "NumberSymbols";
	    LocaleDataIndex[LocaleDataIndex["NumberFormats"] = 14] = "NumberFormats";
	    LocaleDataIndex[LocaleDataIndex["CurrencyCode"] = 15] = "CurrencyCode";
	    LocaleDataIndex[LocaleDataIndex["CurrencySymbol"] = 16] = "CurrencySymbol";
	    LocaleDataIndex[LocaleDataIndex["CurrencyName"] = 17] = "CurrencyName";
	    LocaleDataIndex[LocaleDataIndex["Currencies"] = 18] = "Currencies";
	    LocaleDataIndex[LocaleDataIndex["Directionality"] = 19] = "Directionality";
	    LocaleDataIndex[LocaleDataIndex["PluralCase"] = 20] = "PluralCase";
	    LocaleDataIndex[LocaleDataIndex["ExtraData"] = 21] = "ExtraData";
	})(LocaleDataIndex || (LocaleDataIndex = {}));
	/**
	 * Returns the canonical form of a locale name - lowercase with `_` replaced with `-`.
	 */
	function normalizeLocale(locale) {
	    return locale.toLowerCase().replace(/_/g, '-');
	}
	/**
	 * The locale id that the application is using by default (for translations and ICU expressions).
	 */
	var DEFAULT_LOCALE_ID = 'en-US';
	/**
	 * USD currency code that the application uses by default for CurrencyPipe when no
	 * DEFAULT_CURRENCY_CODE is provided.
	 */
	var USD_CURRENCY_CODE = 'USD';
	/**
	 * The locale id that the application is currently using (for translations and ICU expressions).
	 * This is the ivy version of `LOCALE_ID` that was defined as an injection token for the view engine
	 * but is now defined as a global value.
	 */
	var LOCALE_ID = DEFAULT_LOCALE_ID;
	/**
	 * Sets the locale id that will be used for translations and ICU expressions.
	 * This is the ivy version of `LOCALE_ID` that was defined as an injection token for the view engine
	 * but is now defined as a global value.
	 *
	 * @param localeId
	 */
	function setLocaleId(localeId) {
	    assertDefined(localeId, "Expected localeId to be defined");
	    if (typeof localeId === 'string') {
	        LOCALE_ID = localeId.toLowerCase().replace(/_/g, '-');
	    }
	}

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * Map of module-id to the corresponding NgModule.
	 * - In pre Ivy we track NgModuleFactory,
	 * - In post Ivy we track the NgModuleType
	 */
	var modules = new Map();
	/**
	 * Registers a loaded module. Should only be called from generated NgModuleFactory code.
	 * @publicApi
	 */
	function registerModuleFactory(id, factory) {
	    var existing = modules.get(id);
	    assertSameOrNotExisting(id, existing && existing.moduleType, factory.moduleType);
	    modules.set(id, factory);
	}
	function assertSameOrNotExisting(id, type, incoming) {
	    if (type && type !== incoming) {
	        throw new Error("Duplicate module registered for " + id + " - " + stringify$1(type) + " vs " + stringify$1(type.name));
	    }
	}
	function registerNgModuleType(ngModuleType) {
	    if (ngModuleType.Éµmod.id !== null) {
	        var id = ngModuleType.Éµmod.id;
	        var existing = modules.get(id);
	        assertSameOrNotExisting(id, existing, ngModuleType);
	        modules.set(id, ngModuleType);
	    }
	    var imports = ngModuleType.Éµmod.imports;
	    if (imports instanceof Function) {
	        imports = imports();
	    }
	    if (imports) {
	        imports.forEach(function (i) { return registerNgModuleType(i); });
	    }
	}

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	var NgModuleRef$1 = /** @class */ (function (_super) {
	    __extends(NgModuleRef$1, _super);
	    function NgModuleRef$1(ngModuleType, _parent) {
	        var _this = _super.call(this) || this;
	        _this._parent = _parent;
	        // tslint:disable-next-line:require-internal-with-underscore
	        _this._bootstrapComponents = [];
	        _this.injector = _this;
	        _this.destroyCbs = [];
	        // When bootstrapping a module we have a dependency graph that looks like this:
	        // ApplicationRef -> ComponentFactoryResolver -> NgModuleRef. The problem is that if the
	        // module being resolved tries to inject the ComponentFactoryResolver, it'll create a
	        // circular dependency which will result in a runtime error, because the injector doesn't
	        // exist yet. We work around the issue by creating the ComponentFactoryResolver ourselves
	        // and providing it, rather than letting the injector resolve it.
	        _this.componentFactoryResolver = new ComponentFactoryResolver$1(_this);
	        var ngModuleDef = getNgModuleDef(ngModuleType);
	        ngDevMode &&
	            assertDefined(ngModuleDef, "NgModule '" + stringify$1(ngModuleType) + "' is not a subtype of 'NgModuleType'.");
	        var ngLocaleIdDef = getNgLocaleIdDef(ngModuleType);
	        ngLocaleIdDef && setLocaleId(ngLocaleIdDef);
	        _this._bootstrapComponents = maybeUnwrapFn(ngModuleDef.bootstrap);
	        _this._r3Injector = createInjectorWithoutInjectorInstances(ngModuleType, _parent, [
	            { provide: NgModuleRef, useValue: _this }, {
	                provide: ComponentFactoryResolver,
	                useValue: _this.componentFactoryResolver
	            }
	        ], stringify$1(ngModuleType));
	        // We need to resolve the injector types separately from the injector creation, because
	        // the module might be trying to use this ref in its contructor for DI which will cause a
	        // circular error that will eventually error out, because the injector isn't created yet.
	        _this._r3Injector._resolveInjectorDefTypes();
	        _this.instance = _this.get(ngModuleType);
	        return _this;
	    }
	    NgModuleRef$1.prototype.get = function (token, notFoundValue, injectFlags) {
	        if (notFoundValue === void 0) { notFoundValue = Injector.THROW_IF_NOT_FOUND; }
	        if (injectFlags === void 0) { injectFlags = InjectFlags.Default; }
	        if (token === Injector || token === NgModuleRef || token === INJECTOR) {
	            return this;
	        }
	        return this._r3Injector.get(token, notFoundValue, injectFlags);
	    };
	    NgModuleRef$1.prototype.destroy = function () {
	        ngDevMode && assertDefined(this.destroyCbs, 'NgModule already destroyed');
	        var injector = this._r3Injector;
	        !injector.destroyed && injector.destroy();
	        this.destroyCbs.forEach(function (fn) { return fn(); });
	        this.destroyCbs = null;
	    };
	    NgModuleRef$1.prototype.onDestroy = function (callback) {
	        ngDevMode && assertDefined(this.destroyCbs, 'NgModule already destroyed');
	        this.destroyCbs.push(callback);
	    };
	    return NgModuleRef$1;
	}(NgModuleRef));
	var NgModuleFactory$1 = /** @class */ (function (_super) {
	    __extends(NgModuleFactory, _super);
	    function NgModuleFactory(moduleType) {
	        var _this = _super.call(this) || this;
	        _this.moduleType = moduleType;
	        var ngModuleDef = getNgModuleDef(moduleType);
	        if (ngModuleDef !== null) {
	            // Register the NgModule with Angular's module registry. The location (and hence timing) of
	            // this call is critical to ensure this works correctly (modules get registered when expected)
	            // without bloating bundles (modules are registered when otherwise not referenced).
	            //
	            // In View Engine, registration occurs in the .ngfactory.js file as a side effect. This has
	            // several practical consequences:
	            //
	            // - If an .ngfactory file is not imported from, the module won't be registered (and can be
	            //   tree shaken).
	            // - If an .ngfactory file is imported from, the module will be registered even if an instance
	            //   is not actually created (via `create` below).
	            // - Since an .ngfactory file in View Engine references the .ngfactory files of the NgModule's
	            //   imports,
	            //
	            // In Ivy, things are a bit different. .ngfactory files still exist for compatibility, but are
	            // not a required API to use - there are other ways to obtain an NgModuleFactory for a given
	            // NgModule. Thus, relying on a side effect in the .ngfactory file is not sufficient. Instead,
	            // the side effect of registration is added here, in the constructor of NgModuleFactory,
	            // ensuring no matter how a factory is created, the module is registered correctly.
	            //
	            // An alternative would be to include the registration side effect inline following the actual
	            // NgModule definition. This also has the correct timing, but breaks tree-shaking - modules
	            // will be registered and retained even if they're otherwise never referenced.
	            registerNgModuleType(moduleType);
	        }
	        return _this;
	    }
	    NgModuleFactory.prototype.create = function (parentInjector) {
	        return new NgModuleRef$1(this.moduleType, parentInjector);
	    };
	    return NgModuleFactory;
	}(NgModuleFactory));

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * Use in components with the `@Output` directive to emit custom events
	 * synchronously or asynchronously, and register handlers for those events
	 * by subscribing to an instance.
	 *
	 * @usageNotes
	 *
	 * Extends
	 * [RxJS `Subject`](https://rxjs.dev/api/index/class/Subject)
	 * for Angular by adding the `emit()` method.
	 *
	 * In the following example, a component defines two output properties
	 * that create event emitters. When the title is clicked, the emitter
	 * emits an open or close event to toggle the current visibility state.
	 *
	 * ```html
	 * @Component({
	 *   selector: 'zippy',
	 *   template: `
	 *   <div class="zippy">
	 *     <div (click)="toggle()">Toggle</div>
	 *     <div [hidden]="!visible">
	 *       <ng-content></ng-content>
	 *     </div>
	 *  </div>`})
	 * export class Zippy {
	 *   visible: boolean = true;
	 *   @Output() open: EventEmitter<any> = new EventEmitter();
	 *   @Output() close: EventEmitter<any> = new EventEmitter();
	 *
	 *   toggle() {
	 *     this.visible = !this.visible;
	 *     if (this.visible) {
	 *       this.open.emit(null);
	 *     } else {
	 *       this.close.emit(null);
	 *     }
	 *   }
	 * }
	 * ```
	 *
	 * Access the event object with the `$event` argument passed to the output event
	 * handler:
	 *
	 * ```html
	 * <zippy (open)="onOpen($event)" (close)="onClose($event)"></zippy>
	 * ```
	 *
	 * @see [Observables in Angular](guide/observables-in-angular)
	 * @publicApi
	 */
	var EventEmitter = /** @class */ (function (_super) {
	    __extends(EventEmitter, _super);
	    /**
	     * Creates an instance of this class that can
	     * deliver events synchronously or asynchronously.
	     *
	     * @param isAsync When true, deliver events asynchronously.
	     *
	     */
	    function EventEmitter(isAsync) {
	        if (isAsync === void 0) { isAsync = false; }
	        var _this = _super.call(this) || this;
	        _this.__isAsync = isAsync;
	        return _this;
	    }
	    /**
	     * Emits an event containing a given value.
	     * @param value The value to emit.
	     */
	    EventEmitter.prototype.emit = function (value) {
	        _super.prototype.next.call(this, value);
	    };
	    /**
	     * Registers handlers for events emitted by this instance.
	     * @param generatorOrNext When supplied, a custom handler for emitted events.
	     * @param error When supplied, a custom handler for an error notification
	     * from this emitter.
	     * @param complete When supplied, a custom handler for a completion
	     * notification from this emitter.
	     */
	    EventEmitter.prototype.subscribe = function (generatorOrNext, error, complete) {
	        var schedulerFn;
	        var errorFn = function (err) { return null; };
	        var completeFn = function () { return null; };
	        if (generatorOrNext && typeof generatorOrNext === 'object') {
	            schedulerFn = this.__isAsync ? function (value) {
	                setTimeout(function () { return generatorOrNext.next(value); });
	            } : function (value) {
	                generatorOrNext.next(value);
	            };
	            if (generatorOrNext.error) {
	                errorFn = this.__isAsync ? function (err) {
	                    setTimeout(function () { return generatorOrNext.error(err); });
	                } : function (err) {
	                    generatorOrNext.error(err);
	                };
	            }
	            if (generatorOrNext.complete) {
	                completeFn = this.__isAsync ? function () {
	                    setTimeout(function () { return generatorOrNext.complete(); });
	                } : function () {
	                    generatorOrNext.complete();
	                };
	            }
	        }
	        else {
	            schedulerFn = this.__isAsync ? function (value) {
	                setTimeout(function () { return generatorOrNext(value); });
	            } : function (value) {
	                generatorOrNext(value);
	            };
	            if (error) {
	                errorFn = this.__isAsync ? function (err) {
	                    setTimeout(function () { return error(err); });
	                } : function (err) {
	                    error(err);
	                };
	            }
	            if (complete) {
	                completeFn = this.__isAsync ? function () {
	                    setTimeout(function () { return complete(); });
	                } : function () {
	                    complete();
	                };
	            }
	        }
	        var sink = _super.prototype.subscribe.call(this, schedulerFn, errorFn, completeFn);
	        if (generatorOrNext instanceof Subscription) {
	            generatorOrNext.add(sink);
	        }
	        return sink;
	    };
	    return EventEmitter;
	}(Subject));

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	function symbolIterator() {
	    return this._results[getSymbolIterator$1()]();
	}
	/**
	 * An unmodifiable list of items that Angular keeps up to date when the state
	 * of the application changes.
	 *
	 * The type of object that {@link ViewChildren}, {@link ContentChildren}, and {@link QueryList}
	 * provide.
	 *
	 * Implements an iterable interface, therefore it can be used in both ES6
	 * javascript `for (var i of items)` loops as well as in Angular templates with
	 * `*ngFor="let i of myList"`.
	 *
	 * Changes can be observed by subscribing to the changes `Observable`.
	 *
	 * NOTE: In the future this class will implement an `Observable` interface.
	 *
	 * @usageNotes
	 * ### Example
	 * ```typescript
	 * @Component({...})
	 * class Container {
	 *   @ViewChildren(Item) items:QueryList<Item>;
	 * }
	 * ```
	 *
	 * @publicApi
	 */
	var QueryList = /** @class */ (function () {
	    function QueryList() {
	        this.dirty = true;
	        this._results = [];
	        this.changes = new EventEmitter();
	        this.length = 0;
	        // This function should be declared on the prototype, but doing so there will cause the class
	        // declaration to have side-effects and become not tree-shakable. For this reason we do it in
	        // the constructor.
	        // [getSymbolIterator()](): Iterator<T> { ... }
	        var symbol = getSymbolIterator$1();
	        var proto = QueryList.prototype;
	        if (!proto[symbol])
	            proto[symbol] = symbolIterator;
	    }
	    /**
	     * See
	     * [Array.map](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map)
	     */
	    QueryList.prototype.map = function (fn) {
	        return this._results.map(fn);
	    };
	    /**
	     * See
	     * [Array.filter](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter)
	     */
	    QueryList.prototype.filter = function (fn) {
	        return this._results.filter(fn);
	    };
	    /**
	     * See
	     * [Array.find](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find)
	     */
	    QueryList.prototype.find = function (fn) {
	        return this._results.find(fn);
	    };
	    /**
	     * See
	     * [Array.reduce](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce)
	     */
	    QueryList.prototype.reduce = function (fn, init) {
	        return this._results.reduce(fn, init);
	    };
	    /**
	     * See
	     * [Array.forEach](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach)
	     */
	    QueryList.prototype.forEach = function (fn) {
	        this._results.forEach(fn);
	    };
	    /**
	     * See
	     * [Array.some](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some)
	     */
	    QueryList.prototype.some = function (fn) {
	        return this._results.some(fn);
	    };
	    /**
	     * Returns a copy of the internal results list as an Array.
	     */
	    QueryList.prototype.toArray = function () {
	        return this._results.slice();
	    };
	    QueryList.prototype.toString = function () {
	        return this._results.toString();
	    };
	    /**
	     * Updates the stored data of the query list, and resets the `dirty` flag to `false`, so that
	     * on change detection, it will not notify of changes to the queries, unless a new change
	     * occurs.
	     *
	     * @param resultsTree The query results to store
	     */
	    QueryList.prototype.reset = function (resultsTree) {
	        this._results = flatten$1(resultsTree);
	        this.dirty = false;
	        this.length = this._results.length;
	        this.last = this._results[this.length - 1];
	        this.first = this._results[0];
	    };
	    /**
	     * Triggers a change event by emitting on the `changes` {@link EventEmitter}.
	     */
	    QueryList.prototype.notifyOnChanges = function () {
	        this.changes.emit(this);
	    };
	    /** internal */
	    QueryList.prototype.setDirty = function () {
	        this.dirty = true;
	    };
	    /** internal */
	    QueryList.prototype.destroy = function () {
	        this.changes.complete();
	        this.changes.unsubscribe();
	    };
	    return QueryList;
	}());
	var TQueries_ = /** @class */ (function () {
	    function TQueries_(queries) {
	        if (queries === void 0) { queries = []; }
	        this.queries = queries;
	    }
	    TQueries_.prototype.elementStart = function (tView, tNode) {
	        ngDevMode &&
	            assertFirstCreatePass(tView, 'Queries should collect results on the first template pass only');
	        for (var i = 0; i < this.queries.length; i++) {
	            this.queries[i].elementStart(tView, tNode);
	        }
	    };
	    TQueries_.prototype.elementEnd = function (tNode) {
	        for (var i = 0; i < this.queries.length; i++) {
	            this.queries[i].elementEnd(tNode);
	        }
	    };
	    TQueries_.prototype.embeddedTView = function (tNode) {
	        var queriesForTemplateRef = null;
	        for (var i = 0; i < this.length; i++) {
	            var childQueryIndex = queriesForTemplateRef !== null ? queriesForTemplateRef.length : 0;
	            var tqueryClone = this.getByIndex(i).embeddedTView(tNode, childQueryIndex);
	            if (tqueryClone) {
	                tqueryClone.indexInDeclarationView = i;
	                if (queriesForTemplateRef !== null) {
	                    queriesForTemplateRef.push(tqueryClone);
	                }
	                else {
	                    queriesForTemplateRef = [tqueryClone];
	                }
	            }
	        }
	        return queriesForTemplateRef !== null ? new TQueries_(queriesForTemplateRef) : null;
	    };
	    TQueries_.prototype.template = function (tView, tNode) {
	        ngDevMode &&
	            assertFirstCreatePass(tView, 'Queries should collect results on the first template pass only');
	        for (var i = 0; i < this.queries.length; i++) {
	            this.queries[i].template(tView, tNode);
	        }
	    };
	    TQueries_.prototype.getByIndex = function (index) {
	        ngDevMode && assertDataInRange(this.queries, index);
	        return this.queries[index];
	    };
	    Object.defineProperty(TQueries_.prototype, "length", {
	        get: function () {
	            return this.queries.length;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    TQueries_.prototype.track = function (tquery) {
	        this.queries.push(tquery);
	    };
	    return TQueries_;
	}());

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	var Éµ0$e = function (dir) {
	    if (dir === void 0) { dir = {}; }
	    return dir;
	}, Éµ1$3 = function (type, meta) { return SWITCH_COMPILE_DIRECTIVE(type, meta); };
	/**
	 * Type of the Directive metadata.
	 *
	 * @publicApi
	 */
	var Directive = makeDecorator('Directive', Éµ0$e, undefined, undefined, Éµ1$3);
	var Éµ2$1 = function (c) {
	    if (c === void 0) { c = {}; }
	    return (__assign({ changeDetection: ChangeDetectionStrategy$1.Default }, c));
	}, Éµ3$1 = function (type, meta) { return SWITCH_COMPILE_COMPONENT(type, meta); };
	/**
	 * Component decorator and metadata.
	 *
	 * @Annotation
	 * @publicApi
	 */
	var Component = makeDecorator('Component', Éµ2$1, Directive, undefined, Éµ3$1);
	var Éµ4 = function (p) { return (__assign({ pure: true }, p)); }, Éµ5 = function (type, meta) { return SWITCH_COMPILE_PIPE(type, meta); };
	/**
	 * @Annotation
	 * @publicApi
	 */
	var Pipe = makeDecorator('Pipe', Éµ4, undefined, undefined, Éµ5);
	var Éµ6 = function (bindingPropertyName) { return ({ bindingPropertyName: bindingPropertyName }); };
	/**
	 * @Annotation
	 * @publicApi
	 */
	var Input = makePropDecorator('Input', Éµ6);
	var Éµ7 = function (bindingPropertyName) { return ({ bindingPropertyName: bindingPropertyName }); };
	/**
	 * @Annotation
	 * @publicApi
	 */
	var Output = makePropDecorator('Output', Éµ7);
	var Éµ8 = function (hostPropertyName) { return ({ hostPropertyName: hostPropertyName }); };
	/**
	 * @Annotation
	 * @publicApi
	 */
	var HostBinding = makePropDecorator('HostBinding', Éµ8);
	var Éµ9 = function (eventName, args) { return ({ eventName: eventName, args: args }); };
	/**
	 * Decorator that binds a DOM event to a host listener and supplies configuration metadata.
	 * Angular invokes the supplied handler method when the host element emits the specified event,
	 * and updates the bound element with the result.
	 *
	 * If the handler method returns false, applies `preventDefault` on the bound element.
	 *
	 * @usageNotes
	 *
	 * The following example declares a directive
	 * that attaches a click listener to a button and counts clicks.
	 *
	 * ```ts
	 * @Directive({selector: 'button[counting]'})
	 * class CountClicks {
	 *   numberOfClicks = 0;
	 *
	 *   @HostListener('click', ['$event.target'])
	 *   onClick(btn) {
	 *     console.log('button', btn, 'number of clicks:', this.numberOfClicks++);
	 *  }
	 * }
	 *
	 * @Component({
	 *   selector: 'app',
	 *   template: '<button counting>Increment</button>',
	 * })
	 * class App {}
	 *
	 * ```
	 *
	 * The following example registers another DOM event handler that listens for key-press events.
	 * ``` ts
	 * import { HostListener, Component } from "@angular/core";
	 *
	 * @Component({
	 *   selector: 'app',
	 *   template: `<h1>Hello, you have pressed keys {{counter}} number of times!</h1> Press any key to
	 * increment the counter.
	 *   <button (click)="resetCounter()">Reset Counter</button>`
	 * })
	 * class AppComponent {
	 *   counter = 0;
	 *   @HostListener('window:keydown', ['$event'])
	 *   handleKeyDown(event: KeyboardEvent) {
	 *     this.counter++;
	 *   }
	 *   resetCounter() {
	 *     this.counter = 0;
	 *   }
	 * }
	 * ```
	 *
	 * @Annotation
	 * @publicApi
	 */
	var HostListener = makePropDecorator('HostListener', Éµ9);
	var SWITCH_COMPILE_COMPONENT__PRE_R3__ = noop$1;
	var SWITCH_COMPILE_DIRECTIVE__PRE_R3__ = noop$1;
	var SWITCH_COMPILE_PIPE__PRE_R3__ = noop$1;
	var SWITCH_COMPILE_COMPONENT = SWITCH_COMPILE_COMPONENT__PRE_R3__;
	var SWITCH_COMPILE_DIRECTIVE = SWITCH_COMPILE_DIRECTIVE__PRE_R3__;
	var SWITCH_COMPILE_PIPE = SWITCH_COMPILE_PIPE__PRE_R3__;

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	var Éµ0$f = function (ngModule) { return ngModule; }, Éµ1$4 = 
	/**
	 * Decorator that marks the following class as an NgModule, and supplies
	 * configuration metadata for it.
	 *
	 * * The `declarations` and `entryComponents` options configure the compiler
	 * with information about what belongs to the NgModule.
	 * * The `providers` options configures the NgModule's injector to provide
	 * dependencies the NgModule members.
	 * * The `imports` and `exports` options bring in members from other modules, and make
	 * this module's members available to others.
	 */
	function (type, meta) { return SWITCH_COMPILE_NGMODULE(type, meta); };
	/**
	 * @Annotation
	 * @publicApi
	 */
	var NgModule = makeDecorator('NgModule', Éµ0$f, undefined, undefined, Éµ1$4);
	function preR3NgModuleCompile(moduleType, metadata) {
	    var imports = (metadata && metadata.imports) || [];
	    if (metadata && metadata.exports) {
	        imports = __spread(imports, [metadata.exports]);
	    }
	    moduleType.Éµinj = ÉµÉµdefineInjector({
	        factory: convertInjectableProviderToFactory(moduleType, { useClass: moduleType }),
	        providers: metadata && metadata.providers,
	        imports: imports,
	    });
	}
	var SWITCH_COMPILE_NGMODULE__PRE_R3__ = preR3NgModuleCompile;
	var SWITCH_COMPILE_NGMODULE = SWITCH_COMPILE_NGMODULE__PRE_R3__;

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * An injection token that allows you to provide one or more initialization functions.
	 * These function are injected at application startup and executed during
	 * app initialization. If any of these functions returns a Promise, initialization
	 * does not complete until the Promise is resolved.
	 *
	 * You can, for example, create a factory function that loads language data
	 * or an external configuration, and provide that function to the `APP_INITIALIZER` token.
	 * That way, the function is executed during the application bootstrap process,
	 * and the needed data is available on startup.
	 *
	 * @publicApi
	 */
	var APP_INITIALIZER = new InjectionToken('Application Initializer');
	/**
	 * A class that reflects the state of running {@link APP_INITIALIZER}s.
	 *
	 * @publicApi
	 */
	var ApplicationInitStatus = /** @class */ (function () {
	    function ApplicationInitStatus(appInits) {
	        var _this = this;
	        this.appInits = appInits;
	        this.initialized = false;
	        this.done = false;
	        this.donePromise = new Promise(function (res, rej) {
	            _this.resolve = res;
	            _this.reject = rej;
	        });
	    }
	    /** @internal */
	    ApplicationInitStatus.prototype.runInitializers = function () {
	        var _this = this;
	        if (this.initialized) {
	            return;
	        }
	        var asyncInitPromises = [];
	        var complete = function () {
	            _this.done = true;
	            _this.resolve();
	        };
	        if (this.appInits) {
	            for (var i = 0; i < this.appInits.length; i++) {
	                var initResult = this.appInits[i]();
	                if (isPromise$2(initResult)) {
	                    asyncInitPromises.push(initResult);
	                }
	            }
	        }
	        Promise.all(asyncInitPromises)
	            .then(function () {
	            complete();
	        })
	            .catch(function (e) {
	            _this.reject(e);
	        });
	        if (asyncInitPromises.length === 0) {
	            complete();
	        }
	        this.initialized = true;
	    };
	    ApplicationInitStatus = __decorate([
	        Injectable(),
	        __param(0, Inject(APP_INITIALIZER)), __param(0, Optional()),
	        __metadata("design:paramtypes", [Array])
	    ], ApplicationInitStatus);
	    return ApplicationInitStatus;
	}());

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * A DI Token representing a unique string id assigned to the application by Angular and used
	 * primarily for prefixing application attributes and CSS styles when
	 * {@link ViewEncapsulation#Emulated ViewEncapsulation.Emulated} is being used.
	 *
	 * If you need to avoid randomly generated value to be used as an application id, you can provide
	 * a custom value via a DI provider <!-- TODO: provider --> configuring the root {@link Injector}
	 * using this token.
	 * @publicApi
	 */
	var APP_ID = new InjectionToken('AppId');
	function _appIdRandomProviderFactory() {
	    return "" + _randomChar() + _randomChar() + _randomChar();
	}
	/**
	 * Providers that will generate a random APP_ID_TOKEN.
	 * @publicApi
	 */
	var APP_ID_RANDOM_PROVIDER = {
	    provide: APP_ID,
	    useFactory: _appIdRandomProviderFactory,
	    deps: [],
	};
	function _randomChar() {
	    return String.fromCharCode(97 + Math.floor(Math.random() * 25));
	}
	/**
	 * A function that will be executed when a platform is initialized.
	 * @publicApi
	 */
	var PLATFORM_INITIALIZER = new InjectionToken('Platform Initializer');
	/**
	 * A token that indicates an opaque platform id.
	 * @publicApi
	 */
	var PLATFORM_ID = new InjectionToken('Platform ID');
	/**
	 * All callbacks provided via this token will be called for every component that is bootstrapped.
	 * Signature of the callback:
	 *
	 * `(componentRef: ComponentRef) => void`.
	 *
	 * @publicApi
	 */
	var APP_BOOTSTRAP_LISTENER = new InjectionToken('appBootstrapListener');
	/**
	 * A token which indicates the root directory of the application
	 * @publicApi
	 */
	var PACKAGE_ROOT_URL = new InjectionToken('Application Packages Root URL');

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	var Console = /** @class */ (function () {
	    function Console() {
	    }
	    Console.prototype.log = function (message) {
	        // tslint:disable-next-line:no-console
	        console.log(message);
	    };
	    // Note: for reporting errors use `DOM.logError()` as it is platform specific
	    Console.prototype.warn = function (message) {
	        // tslint:disable-next-line:no-console
	        console.warn(message);
	    };
	    Console = __decorate([
	        Injectable()
	    ], Console);
	    return Console;
	}());

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * Provide this token to set the locale of your application.
	 * It is used for i18n extraction, by i18n pipes (DatePipe, I18nPluralPipe, CurrencyPipe,
	 * DecimalPipe and PercentPipe) and by ICU expressions.
	 *
	 * See the [i18n guide](guide/i18n#setting-up-locale) for more information.
	 *
	 * @usageNotes
	 * ### Example
	 *
	 * ```typescript
	 * import { LOCALE_ID } from '@angular/core';
	 * import { platformBrowserDynamic } from '@angular/platform-browser-dynamic';
	 * import { AppModule } from './app/app.module';
	 *
	 * platformBrowserDynamic().bootstrapModule(AppModule, {
	 *   providers: [{provide: LOCALE_ID, useValue: 'en-US' }]
	 * });
	 * ```
	 *
	 * @publicApi
	 */
	var LOCALE_ID$1 = new InjectionToken('LocaleId');
	/**
	 * Provide this token to set the default currency code your application uses for
	 * CurrencyPipe when there is no currency code passed into it. This is only used by
	 * CurrencyPipe and has no relation to locale currency. Defaults to USD if not configured.
	 *
	 * See the [i18n guide](guide/i18n#setting-up-locale) for more information.
	 *
	 * <div class="alert is-helpful">
	 *
	 * **Deprecation notice:**
	 *
	 * The default currency code is currently always `USD` but this is deprecated from v9.
	 *
	 * **In v10 the default currency code will be taken from the current locale.**
	 *
	 * If you need the previous behavior then set it by creating a `DEFAULT_CURRENCY_CODE` provider in
	 * your application `NgModule`:
	 *
	 * ```ts
	 * {provide: DEFAULT_CURRENCY_CODE, useValue: 'USD'}
	 * ```
	 *
	 * </div>
	 *
	 * @usageNotes
	 * ### Example
	 *
	 * ```typescript
	 * import { platformBrowserDynamic } from '@angular/platform-browser-dynamic';
	 * import { AppModule } from './app/app.module';
	 *
	 * platformBrowserDynamic().bootstrapModule(AppModule, {
	 *   providers: [{provide: DEFAULT_CURRENCY_CODE, useValue: 'EUR' }]
	 * });
	 * ```
	 *
	 * @publicApi
	 */
	var DEFAULT_CURRENCY_CODE = new InjectionToken('DefaultCurrencyCode');
	/**
	 * Use this token at bootstrap to provide the content of your translation file (`xtb`,
	 * `xlf` or `xlf2`) when you want to translate your application in another language.
	 *
	 * See the [i18n guide](guide/i18n#merge) for more information.
	 *
	 * @usageNotes
	 * ### Example
	 *
	 * ```typescript
	 * import { TRANSLATIONS } from '@angular/core';
	 * import { platformBrowserDynamic } from '@angular/platform-browser-dynamic';
	 * import { AppModule } from './app/app.module';
	 *
	 * // content of your translation file
	 * const translations = '....';
	 *
	 * platformBrowserDynamic().bootstrapModule(AppModule, {
	 *   providers: [{provide: TRANSLATIONS, useValue: translations }]
	 * });
	 * ```
	 *
	 * @publicApi
	 */
	var TRANSLATIONS = new InjectionToken('Translations');
	/**
	 * Provide this token at bootstrap to set the format of your {@link TRANSLATIONS}: `xtb`,
	 * `xlf` or `xlf2`.
	 *
	 * See the [i18n guide](guide/i18n#merge) for more information.
	 *
	 * @usageNotes
	 * ### Example
	 *
	 * ```typescript
	 * import { TRANSLATIONS_FORMAT } from '@angular/core';
	 * import { platformBrowserDynamic } from '@angular/platform-browser-dynamic';
	 * import { AppModule } from './app/app.module';
	 *
	 * platformBrowserDynamic().bootstrapModule(AppModule, {
	 *   providers: [{provide: TRANSLATIONS_FORMAT, useValue: 'xlf' }]
	 * });
	 * ```
	 *
	 * @publicApi
	 */
	var TRANSLATIONS_FORMAT = new InjectionToken('TranslationsFormat');
	/**
	 * Use this enum at bootstrap as an option of `bootstrapModule` to define the strategy
	 * that the compiler should use in case of missing translations:
	 * - Error: throw if you have missing translations.
	 * - Warning (default): show a warning in the console and/or shell.
	 * - Ignore: do nothing.
	 *
	 * See the [i18n guide](guide/i18n#missing-translation) for more information.
	 *
	 * @usageNotes
	 * ### Example
	 * ```typescript
	 * import { MissingTranslationStrategy } from '@angular/core';
	 * import { platformBrowserDynamic } from '@angular/platform-browser-dynamic';
	 * import { AppModule } from './app/app.module';
	 *
	 * platformBrowserDynamic().bootstrapModule(AppModule, {
	 *   missingTranslation: MissingTranslationStrategy.Error
	 * });
	 * ```
	 *
	 * @publicApi
	 */
	var MissingTranslationStrategy$1;
	(function (MissingTranslationStrategy) {
	    MissingTranslationStrategy[MissingTranslationStrategy["Error"] = 0] = "Error";
	    MissingTranslationStrategy[MissingTranslationStrategy["Warning"] = 1] = "Warning";
	    MissingTranslationStrategy[MissingTranslationStrategy["Ignore"] = 2] = "Ignore";
	})(MissingTranslationStrategy$1 || (MissingTranslationStrategy$1 = {}));
	var SWITCH_IVY_ENABLED__PRE_R3__ = false;
	var ivyEnabled = SWITCH_IVY_ENABLED__PRE_R3__;
	function _throwError() {
	    throw new Error("Runtime compiler is not loaded");
	}
	var Compiler_compileModuleSync__PRE_R3__ = _throwError;
	var Compiler_compileModuleSync = Compiler_compileModuleSync__PRE_R3__;
	var Compiler_compileModuleAsync__PRE_R3__ = _throwError;
	var Compiler_compileModuleAsync = Compiler_compileModuleAsync__PRE_R3__;
	var Compiler_compileModuleAndAllComponentsSync__PRE_R3__ = _throwError;
	var Compiler_compileModuleAndAllComponentsSync = Compiler_compileModuleAndAllComponentsSync__PRE_R3__;
	var Compiler_compileModuleAndAllComponentsAsync__PRE_R3__ = _throwError;
	var Compiler_compileModuleAndAllComponentsAsync = Compiler_compileModuleAndAllComponentsAsync__PRE_R3__;
	/**
	 * Low-level service for running the angular compiler during runtime
	 * to create {@link ComponentFactory}s, which
	 * can later be used to create and render a Component instance.
	 *
	 * Each `@NgModule` provides an own `Compiler` to its injector,
	 * that will use the directives/pipes of the ng module for compilation
	 * of components.
	 *
	 * @publicApi
	 */
	var Compiler = /** @class */ (function () {
	    function Compiler() {
	        /**
	         * Compiles the given NgModule and all of its components. All templates of the components listed
	         * in `entryComponents` have to be inlined.
	         */
	        this.compileModuleSync = Compiler_compileModuleSync;
	        /**
	         * Compiles the given NgModule and all of its components
	         */
	        this.compileModuleAsync = Compiler_compileModuleAsync;
	        /**
	         * Same as {@link #compileModuleSync} but also creates ComponentFactories for all components.
	         */
	        this.compileModuleAndAllComponentsSync = Compiler_compileModuleAndAllComponentsSync;
	        /**
	         * Same as {@link #compileModuleAsync} but also creates ComponentFactories for all components.
	         */
	        this.compileModuleAndAllComponentsAsync = Compiler_compileModuleAndAllComponentsAsync;
	    }
	    /**
	     * Clears all caches.
	     */
	    Compiler.prototype.clearCache = function () { };
	    /**
	     * Clears the cache for the given component/ngModule.
	     */
	    Compiler.prototype.clearCacheFor = function (type) { };
	    /**
	     * Returns the id for a given NgModule, if one is defined and known to the compiler.
	     */
	    Compiler.prototype.getModuleId = function (moduleType) {
	        return undefined;
	    };
	    Compiler = __decorate([
	        Injectable()
	    ], Compiler);
	    return Compiler;
	}());
	/**
	 * Token to provide CompilerOptions in the platform injector.
	 *
	 * @publicApi
	 */
	var COMPILER_OPTIONS = new InjectionToken('compilerOptions');
	/**
	 * A factory for creating a Compiler
	 *
	 * @publicApi
	 */
	var CompilerFactory = /** @class */ (function () {
	    function CompilerFactory() {
	    }
	    return CompilerFactory;
	}());

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	var promise = (function () { return Promise.resolve(0); })();
	function scheduleMicroTask(fn) {
	    if (typeof Zone === 'undefined') {
	        // use promise to schedule microTask instead of use Zone
	        promise.then(function () {
	            fn && fn.apply(null, null);
	        });
	    }
	    else {
	        Zone.current.scheduleMicroTask('scheduleMicrotask', fn);
	    }
	}

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	function getNativeRequestAnimationFrame() {
	    var nativeRequestAnimationFrame = _global$1['requestAnimationFrame'];
	    var nativeCancelAnimationFrame = _global$1['cancelAnimationFrame'];
	    if (typeof Zone !== 'undefined' && nativeRequestAnimationFrame && nativeCancelAnimationFrame) {
	        // use unpatched version of requestAnimationFrame(native delegate) if possible
	        // to avoid another Change detection
	        var unpatchedRequestAnimationFrame = nativeRequestAnimationFrame[Zone.__symbol__('OriginalDelegate')];
	        if (unpatchedRequestAnimationFrame) {
	            nativeRequestAnimationFrame = unpatchedRequestAnimationFrame;
	        }
	        var unpatchedCancelAnimationFrame = nativeCancelAnimationFrame[Zone.__symbol__('OriginalDelegate')];
	        if (unpatchedCancelAnimationFrame) {
	            nativeCancelAnimationFrame = unpatchedCancelAnimationFrame;
	        }
	    }
	    return { nativeRequestAnimationFrame: nativeRequestAnimationFrame, nativeCancelAnimationFrame: nativeCancelAnimationFrame };
	}

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * An injectable service for executing work inside or outside of the Angular zone.
	 *
	 * The most common use of this service is to optimize performance when starting a work consisting of
	 * one or more asynchronous tasks that don't require UI updates or error handling to be handled by
	 * Angular. Such tasks can be kicked off via {@link #runOutsideAngular} and if needed, these tasks
	 * can reenter the Angular zone via {@link #run}.
	 *
	 * <!-- TODO: add/fix links to:
	 *   - docs explaining zones and the use of zones in Angular and change-detection
	 *   - link to runOutsideAngular/run (throughout this file!)
	 *   -->
	 *
	 * @usageNotes
	 * ### Example
	 *
	 * ```
	 * import {Component, NgZone} from '@angular/core';
	 * import {NgIf} from '@angular/common';
	 *
	 * @Component({
	 *   selector: 'ng-zone-demo',
	 *   template: `
	 *     <h2>Demo: NgZone</h2>
	 *
	 *     <p>Progress: {{progress}}%</p>
	 *     <p *ngIf="progress >= 100">Done processing {{label}} of Angular zone!</p>
	 *
	 *     <button (click)="processWithinAngularZone()">Process within Angular zone</button>
	 *     <button (click)="processOutsideOfAngularZone()">Process outside of Angular zone</button>
	 *   `,
	 * })
	 * export class NgZoneDemo {
	 *   progress: number = 0;
	 *   label: string;
	 *
	 *   constructor(private _ngZone: NgZone) {}
	 *
	 *   // Loop inside the Angular zone
	 *   // so the UI DOES refresh after each setTimeout cycle
	 *   processWithinAngularZone() {
	 *     this.label = 'inside';
	 *     this.progress = 0;
	 *     this._increaseProgress(() => console.log('Inside Done!'));
	 *   }
	 *
	 *   // Loop outside of the Angular zone
	 *   // so the UI DOES NOT refresh after each setTimeout cycle
	 *   processOutsideOfAngularZone() {
	 *     this.label = 'outside';
	 *     this.progress = 0;
	 *     this._ngZone.runOutsideAngular(() => {
	 *       this._increaseProgress(() => {
	 *         // reenter the Angular zone and display done
	 *         this._ngZone.run(() => { console.log('Outside Done!'); });
	 *       });
	 *     });
	 *   }
	 *
	 *   _increaseProgress(doneCallback: () => void) {
	 *     this.progress += 1;
	 *     console.log(`Current progress: ${this.progress}%`);
	 *
	 *     if (this.progress < 100) {
	 *       window.setTimeout(() => this._increaseProgress(doneCallback), 10);
	 *     } else {
	 *       doneCallback();
	 *     }
	 *   }
	 * }
	 * ```
	 *
	 * @publicApi
	 */
	var NgZone = /** @class */ (function () {
	    function NgZone(_a) {
	        var _b = _a.enableLongStackTrace, enableLongStackTrace = _b === void 0 ? false : _b, _c = _a.shouldCoalesceEventChangeDetection, shouldCoalesceEventChangeDetection = _c === void 0 ? false : _c;
	        this.hasPendingMacrotasks = false;
	        this.hasPendingMicrotasks = false;
	        /**
	         * Whether there are no outstanding microtasks or macrotasks.
	         */
	        this.isStable = true;
	        /**
	         * Notifies when code enters Angular Zone. This gets fired first on VM Turn.
	         */
	        this.onUnstable = new EventEmitter(false);
	        /**
	         * Notifies when there is no more microtasks enqueued in the current VM Turn.
	         * This is a hint for Angular to do change detection, which may enqueue more microtasks.
	         * For this reason this event can fire multiple times per VM Turn.
	         */
	        this.onMicrotaskEmpty = new EventEmitter(false);
	        /**
	         * Notifies when the last `onMicrotaskEmpty` has run and there are no more microtasks, which
	         * implies we are about to relinquish VM turn.
	         * This event gets called just once.
	         */
	        this.onStable = new EventEmitter(false);
	        /**
	         * Notifies that an error has been delivered.
	         */
	        this.onError = new EventEmitter(false);
	        if (typeof Zone == 'undefined') {
	            throw new Error("In this configuration Angular requires Zone.js");
	        }
	        Zone.assertZonePatched();
	        var self = this;
	        self._nesting = 0;
	        self._outer = self._inner = Zone.current;
	        if (Zone['wtfZoneSpec']) {
	            self._inner = self._inner.fork(Zone['wtfZoneSpec']);
	        }
	        if (Zone['TaskTrackingZoneSpec']) {
	            self._inner = self._inner.fork(new Zone['TaskTrackingZoneSpec']);
	        }
	        if (enableLongStackTrace && Zone['longStackTraceZoneSpec']) {
	            self._inner = self._inner.fork(Zone['longStackTraceZoneSpec']);
	        }
	        self.shouldCoalesceEventChangeDetection = shouldCoalesceEventChangeDetection;
	        self.lastRequestAnimationFrameId = -1;
	        self.nativeRequestAnimationFrame = getNativeRequestAnimationFrame().nativeRequestAnimationFrame;
	        forkInnerZoneWithAngularBehavior(self);
	    }
	    NgZone.isInAngularZone = function () {
	        return Zone.current.get('isAngularZone') === true;
	    };
	    NgZone.assertInAngularZone = function () {
	        if (!NgZone.isInAngularZone()) {
	            throw new Error('Expected to be in Angular Zone, but it is not!');
	        }
	    };
	    NgZone.assertNotInAngularZone = function () {
	        if (NgZone.isInAngularZone()) {
	            throw new Error('Expected to not be in Angular Zone, but it is!');
	        }
	    };
	    /**
	     * Executes the `fn` function synchronously within the Angular zone and returns value returned by
	     * the function.
	     *
	     * Running functions via `run` allows you to reenter Angular zone from a task that was executed
	     * outside of the Angular zone (typically started via {@link #runOutsideAngular}).
	     *
	     * Any future tasks or microtasks scheduled from within this function will continue executing from
	     * within the Angular zone.
	     *
	     * If a synchronous error happens it will be rethrown and not reported via `onError`.
	     */
	    NgZone.prototype.run = function (fn, applyThis, applyArgs) {
	        return this._inner.run(fn, applyThis, applyArgs);
	    };
	    /**
	     * Executes the `fn` function synchronously within the Angular zone as a task and returns value
	     * returned by the function.
	     *
	     * Running functions via `run` allows you to reenter Angular zone from a task that was executed
	     * outside of the Angular zone (typically started via {@link #runOutsideAngular}).
	     *
	     * Any future tasks or microtasks scheduled from within this function will continue executing from
	     * within the Angular zone.
	     *
	     * If a synchronous error happens it will be rethrown and not reported via `onError`.
	     */
	    NgZone.prototype.runTask = function (fn, applyThis, applyArgs, name) {
	        var zone = this._inner;
	        var task = zone.scheduleEventTask('NgZoneEvent: ' + name, fn, EMPTY_PAYLOAD, noop$1$1, noop$1$1);
	        try {
	            return zone.runTask(task, applyThis, applyArgs);
	        }
	        finally {
	            zone.cancelTask(task);
	        }
	    };
	    /**
	     * Same as `run`, except that synchronous errors are caught and forwarded via `onError` and not
	     * rethrown.
	     */
	    NgZone.prototype.runGuarded = function (fn, applyThis, applyArgs) {
	        return this._inner.runGuarded(fn, applyThis, applyArgs);
	    };
	    /**
	     * Executes the `fn` function synchronously in Angular's parent zone and returns value returned by
	     * the function.
	     *
	     * Running functions via {@link #runOutsideAngular} allows you to escape Angular's zone and do
	     * work that
	     * doesn't trigger Angular change-detection or is subject to Angular's error handling.
	     *
	     * Any future tasks or microtasks scheduled from within this function will continue executing from
	     * outside of the Angular zone.
	     *
	     * Use {@link #run} to reenter the Angular zone and do work that updates the application model.
	     */
	    NgZone.prototype.runOutsideAngular = function (fn) {
	        return this._outer.run(fn);
	    };
	    return NgZone;
	}());
	function noop$1$1() { }
	var EMPTY_PAYLOAD = {};
	function checkStable(zone) {
	    if (zone._nesting == 0 && !zone.hasPendingMicrotasks && !zone.isStable) {
	        try {
	            zone._nesting++;
	            zone.onMicrotaskEmpty.emit(null);
	        }
	        finally {
	            zone._nesting--;
	            if (!zone.hasPendingMicrotasks) {
	                try {
	                    zone.runOutsideAngular(function () { return zone.onStable.emit(null); });
	                }
	                finally {
	                    zone.isStable = true;
	                }
	            }
	        }
	    }
	}
	function delayChangeDetectionForEvents(zone) {
	    if (zone.lastRequestAnimationFrameId !== -1) {
	        return;
	    }
	    zone.lastRequestAnimationFrameId = zone.nativeRequestAnimationFrame.call(_global$1, function () {
	        zone.lastRequestAnimationFrameId = -1;
	        updateMicroTaskStatus(zone);
	        checkStable(zone);
	    });
	    updateMicroTaskStatus(zone);
	}
	function forkInnerZoneWithAngularBehavior(zone) {
	    var delayChangeDetectionForEventsDelegate = function () {
	        delayChangeDetectionForEvents(zone);
	    };
	    var maybeDelayChangeDetection = !!zone.shouldCoalesceEventChangeDetection &&
	        zone.nativeRequestAnimationFrame && delayChangeDetectionForEventsDelegate;
	    zone._inner = zone._inner.fork({
	        name: 'angular',
	        properties: { 'isAngularZone': true, 'maybeDelayChangeDetection': maybeDelayChangeDetection },
	        onInvokeTask: function (delegate, current, target, task, applyThis, applyArgs) {
	            try {
	                onEnter(zone);
	                return delegate.invokeTask(target, task, applyThis, applyArgs);
	            }
	            finally {
	                if (maybeDelayChangeDetection && task.type === 'eventTask') {
	                    maybeDelayChangeDetection();
	                }
	                onLeave(zone);
	            }
	        },
	        onInvoke: function (delegate, current, target, callback, applyThis, applyArgs, source) {
	            try {
	                onEnter(zone);
	                return delegate.invoke(target, callback, applyThis, applyArgs, source);
	            }
	            finally {
	                onLeave(zone);
	            }
	        },
	        onHasTask: function (delegate, current, target, hasTaskState) {
	            delegate.hasTask(target, hasTaskState);
	            if (current === target) {
	                // We are only interested in hasTask events which originate from our zone
	                // (A child hasTask event is not interesting to us)
	                if (hasTaskState.change == 'microTask') {
	                    zone._hasPendingMicrotasks = hasTaskState.microTask;
	                    updateMicroTaskStatus(zone);
	                    checkStable(zone);
	                }
	                else if (hasTaskState.change == 'macroTask') {
	                    zone.hasPendingMacrotasks = hasTaskState.macroTask;
	                }
	            }
	        },
	        onHandleError: function (delegate, current, target, error) {
	            delegate.handleError(target, error);
	            zone.runOutsideAngular(function () { return zone.onError.emit(error); });
	            return false;
	        }
	    });
	}
	function updateMicroTaskStatus(zone) {
	    if (zone._hasPendingMicrotasks ||
	        (zone.shouldCoalesceEventChangeDetection && zone.lastRequestAnimationFrameId !== -1)) {
	        zone.hasPendingMicrotasks = true;
	    }
	    else {
	        zone.hasPendingMicrotasks = false;
	    }
	}
	function onEnter(zone) {
	    zone._nesting++;
	    if (zone.isStable) {
	        zone.isStable = false;
	        zone.onUnstable.emit(null);
	    }
	}
	function onLeave(zone) {
	    zone._nesting--;
	    checkStable(zone);
	}
	/**
	 * Provides a noop implementation of `NgZone` which does nothing. This zone requires explicit calls
	 * to framework to perform rendering.
	 */
	var NoopNgZone = /** @class */ (function () {
	    function NoopNgZone() {
	        this.hasPendingMicrotasks = false;
	        this.hasPendingMacrotasks = false;
	        this.isStable = true;
	        this.onUnstable = new EventEmitter();
	        this.onMicrotaskEmpty = new EventEmitter();
	        this.onStable = new EventEmitter();
	        this.onError = new EventEmitter();
	    }
	    NoopNgZone.prototype.run = function (fn, applyThis, applyArgs) {
	        return fn.apply(applyThis, applyArgs);
	    };
	    NoopNgZone.prototype.runGuarded = function (fn, applyThis, applyArgs) {
	        return fn.apply(applyThis, applyArgs);
	    };
	    NoopNgZone.prototype.runOutsideAngular = function (fn) {
	        return fn();
	    };
	    NoopNgZone.prototype.runTask = function (fn, applyThis, applyArgs, name) {
	        return fn.apply(applyThis, applyArgs);
	    };
	    return NoopNgZone;
	}());

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * The Testability service provides testing hooks that can be accessed from
	 * the browser and by services such as Protractor. Each bootstrapped Angular
	 * application on the page will have an instance of Testability.
	 * @publicApi
	 */
	var Testability = /** @class */ (function () {
	    function Testability(_ngZone) {
	        var _this = this;
	        this._ngZone = _ngZone;
	        this._pendingCount = 0;
	        this._isZoneStable = true;
	        /**
	         * Whether any work was done since the last 'whenStable' callback. This is
	         * useful to detect if this could have potentially destabilized another
	         * component while it is stabilizing.
	         * @internal
	         */
	        this._didWork = false;
	        this._callbacks = [];
	        this.taskTrackingZone = null;
	        this._watchAngularEvents();
	        _ngZone.run(function () {
	            _this.taskTrackingZone =
	                typeof Zone == 'undefined' ? null : Zone.current.get('TaskTrackingZone');
	        });
	    }
	    Testability.prototype._watchAngularEvents = function () {
	        var _this = this;
	        this._ngZone.onUnstable.subscribe({
	            next: function () {
	                _this._didWork = true;
	                _this._isZoneStable = false;
	            }
	        });
	        this._ngZone.runOutsideAngular(function () {
	            _this._ngZone.onStable.subscribe({
	                next: function () {
	                    NgZone.assertNotInAngularZone();
	                    scheduleMicroTask(function () {
	                        _this._isZoneStable = true;
	                        _this._runCallbacksIfReady();
	                    });
	                }
	            });
	        });
	    };
	    /**
	     * Increases the number of pending request
	     * @deprecated pending requests are now tracked with zones.
	     */
	    Testability.prototype.increasePendingRequestCount = function () {
	        this._pendingCount += 1;
	        this._didWork = true;
	        return this._pendingCount;
	    };
	    /**
	     * Decreases the number of pending request
	     * @deprecated pending requests are now tracked with zones
	     */
	    Testability.prototype.decreasePendingRequestCount = function () {
	        this._pendingCount -= 1;
	        if (this._pendingCount < 0) {
	            throw new Error('pending async requests below zero');
	        }
	        this._runCallbacksIfReady();
	        return this._pendingCount;
	    };
	    /**
	     * Whether an associated application is stable
	     */
	    Testability.prototype.isStable = function () {
	        return this._isZoneStable && this._pendingCount === 0 && !this._ngZone.hasPendingMacrotasks;
	    };
	    Testability.prototype._runCallbacksIfReady = function () {
	        var _this = this;
	        if (this.isStable()) {
	            // Schedules the call backs in a new frame so that it is always async.
	            scheduleMicroTask(function () {
	                while (_this._callbacks.length !== 0) {
	                    var cb = _this._callbacks.pop();
	                    clearTimeout(cb.timeoutId);
	                    cb.doneCb(_this._didWork);
	                }
	                _this._didWork = false;
	            });
	        }
	        else {
	            // Still not stable, send updates.
	            var pending_1 = this.getPendingTasks();
	            this._callbacks = this._callbacks.filter(function (cb) {
	                if (cb.updateCb && cb.updateCb(pending_1)) {
	                    clearTimeout(cb.timeoutId);
	                    return false;
	                }
	                return true;
	            });
	            this._didWork = true;
	        }
	    };
	    Testability.prototype.getPendingTasks = function () {
	        if (!this.taskTrackingZone) {
	            return [];
	        }
	        // Copy the tasks data so that we don't leak tasks.
	        return this.taskTrackingZone.macroTasks.map(function (t) {
	            return {
	                source: t.source,
	                // From TaskTrackingZone:
	                // https://github.com/angular/zone.js/blob/master/lib/zone-spec/task-tracking.ts#L40
	                creationLocation: t.creationLocation,
	                data: t.data
	            };
	        });
	    };
	    Testability.prototype.addCallback = function (cb, timeout, updateCb) {
	        var _this = this;
	        var timeoutId = -1;
	        if (timeout && timeout > 0) {
	            timeoutId = setTimeout(function () {
	                _this._callbacks = _this._callbacks.filter(function (cb) { return cb.timeoutId !== timeoutId; });
	                cb(_this._didWork, _this.getPendingTasks());
	            }, timeout);
	        }
	        this._callbacks.push({ doneCb: cb, timeoutId: timeoutId, updateCb: updateCb });
	    };
	    /**
	     * Wait for the application to be stable with a timeout. If the timeout is reached before that
	     * happens, the callback receives a list of the macro tasks that were pending, otherwise null.
	     *
	     * @param doneCb The callback to invoke when Angular is stable or the timeout expires
	     *    whichever comes first.
	     * @param timeout Optional. The maximum time to wait for Angular to become stable. If not
	     *    specified, whenStable() will wait forever.
	     * @param updateCb Optional. If specified, this callback will be invoked whenever the set of
	     *    pending macrotasks changes. If this callback returns true doneCb will not be invoked
	     *    and no further updates will be issued.
	     */
	    Testability.prototype.whenStable = function (doneCb, timeout, updateCb) {
	        if (updateCb && !this.taskTrackingZone) {
	            throw new Error('Task tracking zone is required when passing an update callback to ' +
	                'whenStable(). Is "zone.js/dist/task-tracking.js" loaded?');
	        }
	        // These arguments are 'Function' above to keep the public API simple.
	        this.addCallback(doneCb, timeout, updateCb);
	        this._runCallbacksIfReady();
	    };
	    /**
	     * Get the number of pending requests
	     * @deprecated pending requests are now tracked with zones
	     */
	    Testability.prototype.getPendingRequestCount = function () {
	        return this._pendingCount;
	    };
	    /**
	     * Find providers by name
	     * @param using The root element to search from
	     * @param provider The name of binding variable
	     * @param exactMatch Whether using exactMatch
	     */
	    Testability.prototype.findProviders = function (using, provider, exactMatch) {
	        // TODO(juliemr): implement.
	        return [];
	    };
	    Testability = __decorate([
	        Injectable(),
	        __metadata("design:paramtypes", [NgZone])
	    ], Testability);
	    return Testability;
	}());
	/**
	 * A global registry of {@link Testability} instances for specific elements.
	 * @publicApi
	 */
	var TestabilityRegistry = /** @class */ (function () {
	    function TestabilityRegistry() {
	        /** @internal */
	        this._applications = new Map();
	        _testabilityGetter.addToWindow(this);
	    }
	    /**
	     * Registers an application with a testability hook so that it can be tracked
	     * @param token token of application, root element
	     * @param testability Testability hook
	     */
	    TestabilityRegistry.prototype.registerApplication = function (token, testability) {
	        this._applications.set(token, testability);
	    };
	    /**
	     * Unregisters an application.
	     * @param token token of application, root element
	     */
	    TestabilityRegistry.prototype.unregisterApplication = function (token) {
	        this._applications.delete(token);
	    };
	    /**
	     * Unregisters all applications
	     */
	    TestabilityRegistry.prototype.unregisterAllApplications = function () {
	        this._applications.clear();
	    };
	    /**
	     * Get a testability hook associated with the application
	     * @param elem root element
	     */
	    TestabilityRegistry.prototype.getTestability = function (elem) {
	        return this._applications.get(elem) || null;
	    };
	    /**
	     * Get all registered testabilities
	     */
	    TestabilityRegistry.prototype.getAllTestabilities = function () {
	        return Array.from(this._applications.values());
	    };
	    /**
	     * Get all registered applications(root elements)
	     */
	    TestabilityRegistry.prototype.getAllRootElements = function () {
	        return Array.from(this._applications.keys());
	    };
	    /**
	     * Find testability of a node in the Tree
	     * @param elem node
	     * @param findInAncestors whether finding testability in ancestors if testability was not found in
	     * current node
	     */
	    TestabilityRegistry.prototype.findTestabilityInTree = function (elem, findInAncestors) {
	        if (findInAncestors === void 0) { findInAncestors = true; }
	        return _testabilityGetter.findTestabilityInTree(this, elem, findInAncestors);
	    };
	    TestabilityRegistry = __decorate([
	        Injectable(),
	        __metadata("design:paramtypes", [])
	    ], TestabilityRegistry);
	    return TestabilityRegistry;
	}());
	var _NoopGetTestability = /** @class */ (function () {
	    function _NoopGetTestability() {
	    }
	    _NoopGetTestability.prototype.addToWindow = function (registry) { };
	    _NoopGetTestability.prototype.findTestabilityInTree = function (registry, elem, findInAncestors) {
	        return null;
	    };
	    return _NoopGetTestability;
	}());
	/**
	 * Set the {@link GetTestability} implementation used by the Angular testing framework.
	 * @publicApi
	 */
	function setTestabilityGetter(getter) {
	    _testabilityGetter = getter;
	}
	var _testabilityGetter = new _NoopGetTestability();

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	var _platform;
	var compileNgModuleFactory = compileNgModuleFactory__PRE_R3__;
	function compileNgModuleFactory__PRE_R3__(injector, options, moduleType) {
	    var compilerFactory = injector.get(CompilerFactory);
	    var compiler = compilerFactory.createCompiler([options]);
	    return compiler.compileModuleAsync(moduleType);
	}
	var isBoundToModule = isBoundToModule__PRE_R3__;
	function isBoundToModule__PRE_R3__(cf) {
	    return cf instanceof ComponentFactoryBoundToModule;
	}
	var ALLOW_MULTIPLE_PLATFORMS = new InjectionToken('AllowMultipleToken');
	/**
	 * A token for third-party components that can register themselves with NgProbe.
	 *
	 * @publicApi
	 */
	var NgProbeToken = /** @class */ (function () {
	    function NgProbeToken(name, token) {
	        this.name = name;
	        this.token = token;
	    }
	    return NgProbeToken;
	}());
	/**
	 * Creates a platform.
	 * Platforms have to be eagerly created via this function.
	 *
	 * @publicApi
	 */
	function createPlatform(injector) {
	    if (_platform && !_platform.destroyed &&
	        !_platform.injector.get(ALLOW_MULTIPLE_PLATFORMS, false)) {
	        throw new Error('There can be only one platform. Destroy the previous one to create a new one.');
	    }
	    _platform = injector.get(PlatformRef);
	    var inits = injector.get(PLATFORM_INITIALIZER, null);
	    if (inits)
	        inits.forEach(function (init) { return init(); });
	    return _platform;
	}
	/**
	 * Creates a factory for a platform
	 *
	 * @publicApi
	 */
	function createPlatformFactory(parentPlatformFactory, name, providers) {
	    if (providers === void 0) { providers = []; }
	    var desc = "Platform: " + name;
	    var marker = new InjectionToken(desc);
	    return function (extraProviders) {
	        if (extraProviders === void 0) { extraProviders = []; }
	        var platform = getPlatform();
	        if (!platform || platform.injector.get(ALLOW_MULTIPLE_PLATFORMS, false)) {
	            if (parentPlatformFactory) {
	                parentPlatformFactory(providers.concat(extraProviders).concat({ provide: marker, useValue: true }));
	            }
	            else {
	                var injectedProviders = providers.concat(extraProviders).concat({ provide: marker, useValue: true }, {
	                    provide: INJECTOR_SCOPE,
	                    useValue: 'platform'
	                });
	                createPlatform(Injector.create({ providers: injectedProviders, name: desc }));
	            }
	        }
	        return assertPlatform(marker);
	    };
	}
	/**
	 * Checks that there currently is a platform which contains the given token as a provider.
	 *
	 * @publicApi
	 */
	function assertPlatform(requiredToken) {
	    var platform = getPlatform();
	    if (!platform) {
	        throw new Error('No platform exists!');
	    }
	    if (!platform.injector.get(requiredToken, null)) {
	        throw new Error('A platform with a different configuration has been created. Please destroy it first.');
	    }
	    return platform;
	}
	/**
	 * Returns the current platform.
	 *
	 * @publicApi
	 */
	function getPlatform() {
	    return _platform && !_platform.destroyed ? _platform : null;
	}
	/**
	 * The Angular platform is the entry point for Angular on a web page. Each page
	 * has exactly one platform, and services (such as reflection) which are common
	 * to every Angular application running on the page are bound in its scope.
	 *
	 * A page's platform is initialized implicitly when a platform is created via a platform factory
	 * (e.g. {@link platformBrowser}), or explicitly by calling the {@link createPlatform} function.
	 *
	 * @publicApi
	 */
	var PlatformRef = /** @class */ (function () {
	    /** @internal */
	    function PlatformRef(_injector) {
	        this._injector = _injector;
	        this._modules = [];
	        this._destroyListeners = [];
	        this._destroyed = false;
	    }
	    /**
	     * Creates an instance of an `@NgModule` for the given platform
	     * for offline compilation.
	     *
	     * @usageNotes
	     * ### Simple Example
	     *
	     * ```typescript
	     * my_module.ts:
	     *
	     * @NgModule({
	     *   imports: [BrowserModule]
	     * })
	     * class MyModule {}
	     *
	     * main.ts:
	     * import {MyModuleNgFactory} from './my_module.ngfactory';
	     * import {platformBrowser} from '@angular/platform-browser';
	     *
	     * let moduleRef = platformBrowser().bootstrapModuleFactory(MyModuleNgFactory);
	     * ```
	     */
	    PlatformRef.prototype.bootstrapModuleFactory = function (moduleFactory, options) {
	        var _this = this;
	        // Note: We need to create the NgZone _before_ we instantiate the module,
	        // as instantiating the module creates some providers eagerly.
	        // So we create a mini parent injector that just contains the new NgZone and
	        // pass that as parent to the NgModuleFactory.
	        var ngZoneOption = options ? options.ngZone : undefined;
	        var ngZoneEventCoalescing = (options && options.ngZoneEventCoalescing) || false;
	        var ngZone = getNgZone(ngZoneOption, ngZoneEventCoalescing);
	        var providers = [{ provide: NgZone, useValue: ngZone }];
	        // Attention: Don't use ApplicationRef.run here,
	        // as we want to be sure that all possible constructor calls are inside `ngZone.run`!
	        return ngZone.run(function () {
	            var ngZoneInjector = Injector.create({ providers: providers, parent: _this.injector, name: moduleFactory.moduleType.name });
	            var moduleRef = moduleFactory.create(ngZoneInjector);
	            var exceptionHandler = moduleRef.injector.get(ErrorHandler, null);
	            if (!exceptionHandler) {
	                throw new Error('No ErrorHandler. Is platform module (BrowserModule) included?');
	            }
	            moduleRef.onDestroy(function () { return remove(_this._modules, moduleRef); });
	            ngZone.runOutsideAngular(function () { return ngZone.onError.subscribe({
	                next: function (error) {
	                    exceptionHandler.handleError(error);
	                }
	            }); });
	            return _callAndReportToErrorHandler(exceptionHandler, ngZone, function () {
	                var initStatus = moduleRef.injector.get(ApplicationInitStatus);
	                initStatus.runInitializers();
	                return initStatus.donePromise.then(function () {
	                    if (ivyEnabled) {
	                        // If the `LOCALE_ID` provider is defined at bootstrap then we set the value for ivy
	                        var localeId = moduleRef.injector.get(LOCALE_ID$1, DEFAULT_LOCALE_ID);
	                        setLocaleId(localeId || DEFAULT_LOCALE_ID);
	                    }
	                    _this._moduleDoBootstrap(moduleRef);
	                    return moduleRef;
	                });
	            });
	        });
	    };
	    /**
	     * Creates an instance of an `@NgModule` for a given platform using the given runtime compiler.
	     *
	     * @usageNotes
	     * ### Simple Example
	     *
	     * ```typescript
	     * @NgModule({
	     *   imports: [BrowserModule]
	     * })
	     * class MyModule {}
	     *
	     * let moduleRef = platformBrowser().bootstrapModule(MyModule);
	     * ```
	     *
	     */
	    PlatformRef.prototype.bootstrapModule = function (moduleType, compilerOptions) {
	        var _this = this;
	        if (compilerOptions === void 0) { compilerOptions = []; }
	        var options = optionsReducer({}, compilerOptions);
	        return compileNgModuleFactory(this.injector, options, moduleType)
	            .then(function (moduleFactory) { return _this.bootstrapModuleFactory(moduleFactory, options); });
	    };
	    PlatformRef.prototype._moduleDoBootstrap = function (moduleRef) {
	        var appRef = moduleRef.injector.get(ApplicationRef);
	        if (moduleRef._bootstrapComponents.length > 0) {
	            moduleRef._bootstrapComponents.forEach(function (f) { return appRef.bootstrap(f); });
	        }
	        else if (moduleRef.instance.ngDoBootstrap) {
	            moduleRef.instance.ngDoBootstrap(appRef);
	        }
	        else {
	            throw new Error("The module " + stringify$1(moduleRef.instance
	                .constructor) + " was bootstrapped, but it does not declare \"@NgModule.bootstrap\" components nor a \"ngDoBootstrap\" method. " +
	                "Please define one of these.");
	        }
	        this._modules.push(moduleRef);
	    };
	    /**
	     * Register a listener to be called when the platform is disposed.
	     */
	    PlatformRef.prototype.onDestroy = function (callback) {
	        this._destroyListeners.push(callback);
	    };
	    Object.defineProperty(PlatformRef.prototype, "injector", {
	        /**
	         * Retrieve the platform {@link Injector}, which is the parent injector for
	         * every Angular application on the page and provides singleton providers.
	         */
	        get: function () {
	            return this._injector;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    /**
	     * Destroy the Angular platform and all Angular applications on the page.
	     */
	    PlatformRef.prototype.destroy = function () {
	        if (this._destroyed) {
	            throw new Error('The platform has already been destroyed!');
	        }
	        this._modules.slice().forEach(function (module) { return module.destroy(); });
	        this._destroyListeners.forEach(function (listener) { return listener(); });
	        this._destroyed = true;
	    };
	    Object.defineProperty(PlatformRef.prototype, "destroyed", {
	        get: function () {
	            return this._destroyed;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    PlatformRef = __decorate([
	        Injectable(),
	        __metadata("design:paramtypes", [Injector])
	    ], PlatformRef);
	    return PlatformRef;
	}());
	function getNgZone(ngZoneOption, ngZoneEventCoalescing) {
	    var ngZone;
	    if (ngZoneOption === 'noop') {
	        ngZone = new NoopNgZone();
	    }
	    else {
	        ngZone = (ngZoneOption === 'zone.js' ? undefined : ngZoneOption) || new NgZone({
	            enableLongStackTrace: isDevMode(),
	            shouldCoalesceEventChangeDetection: ngZoneEventCoalescing
	        });
	    }
	    return ngZone;
	}
	function _callAndReportToErrorHandler(errorHandler, ngZone, callback) {
	    try {
	        var result = callback();
	        if (isPromise$2(result)) {
	            return result.catch(function (e) {
	                ngZone.runOutsideAngular(function () { return errorHandler.handleError(e); });
	                // rethrow as the exception handler might not do it
	                throw e;
	            });
	        }
	        return result;
	    }
	    catch (e) {
	        ngZone.runOutsideAngular(function () { return errorHandler.handleError(e); });
	        // rethrow as the exception handler might not do it
	        throw e;
	    }
	}
	function optionsReducer(dst, objs) {
	    if (Array.isArray(objs)) {
	        dst = objs.reduce(optionsReducer, dst);
	    }
	    else {
	        dst = __assign(__assign({}, dst), objs);
	    }
	    return dst;
	}
	/**
	 * A reference to an Angular application running on a page.
	 *
	 * @usageNotes
	 *
	 * {@a is-stable-examples}
	 * ### isStable examples and caveats
	 *
	 * Note two important points about `isStable`, demonstrated in the examples below:
	 * - the application will never be stable if you start any kind
	 * of recurrent asynchronous task when the application starts
	 * (for example for a polling process, started with a `setInterval`, a `setTimeout`
	 * or using RxJS operators like `interval`);
	 * - the `isStable` Observable runs outside of the Angular zone.
	 *
	 * Let's imagine that you start a recurrent task
	 * (here incrementing a counter, using RxJS `interval`),
	 * and at the same time subscribe to `isStable`.
	 *
	 * ```
	 * constructor(appRef: ApplicationRef) {
	 *   appRef.isStable.pipe(
	 *      filter(stable => stable)
	 *   ).subscribe(() => console.log('App is stable now');
	 *   interval(1000).subscribe(counter => console.log(counter));
	 * }
	 * ```
	 * In this example, `isStable` will never emit `true`,
	 * and the trace "App is stable now" will never get logged.
	 *
	 * If you want to execute something when the app is stable,
	 * you have to wait for the application to be stable
	 * before starting your polling process.
	 *
	 * ```
	 * constructor(appRef: ApplicationRef) {
	 *   appRef.isStable.pipe(
	 *     first(stable => stable),
	 *     tap(stable => console.log('App is stable now')),
	 *     switchMap(() => interval(1000))
	 *   ).subscribe(counter => console.log(counter));
	 * }
	 * ```
	 * In this example, the trace "App is stable now" will be logged
	 * and then the counter starts incrementing every second.
	 *
	 * Note also that this Observable runs outside of the Angular zone,
	 * which means that the code in the subscription
	 * to this Observable will not trigger the change detection.
	 *
	 * Let's imagine that instead of logging the counter value,
	 * you update a field of your component
	 * and display it in its template.
	 *
	 * ```
	 * constructor(appRef: ApplicationRef) {
	 *   appRef.isStable.pipe(
	 *     first(stable => stable),
	 *     switchMap(() => interval(1000))
	 *   ).subscribe(counter => this.value = counter);
	 * }
	 * ```
	 * As the `isStable` Observable runs outside the zone,
	 * the `value` field will be updated properly,
	 * but the template will not be refreshed!
	 *
	 * You'll have to manually trigger the change detection to update the template.
	 *
	 * ```
	 * constructor(appRef: ApplicationRef, cd: ChangeDetectorRef) {
	 *   appRef.isStable.pipe(
	 *     first(stable => stable),
	 *     switchMap(() => interval(1000))
	 *   ).subscribe(counter => {
	 *     this.value = counter;
	 *     cd.detectChanges();
	 *   });
	 * }
	 * ```
	 *
	 * Or make the subscription callback run inside the zone.
	 *
	 * ```
	 * constructor(appRef: ApplicationRef, zone: NgZone) {
	 *   appRef.isStable.pipe(
	 *     first(stable => stable),
	 *     switchMap(() => interval(1000))
	 *   ).subscribe(counter => zone.run(() => this.value = counter));
	 * }
	 * ```
	 *
	 * @publicApi
	 */
	var ApplicationRef = /** @class */ (function () {
	    /** @internal */
	    function ApplicationRef(_zone, _console, _injector, _exceptionHandler, _componentFactoryResolver, _initStatus) {
	        var _this = this;
	        this._zone = _zone;
	        this._console = _console;
	        this._injector = _injector;
	        this._exceptionHandler = _exceptionHandler;
	        this._componentFactoryResolver = _componentFactoryResolver;
	        this._initStatus = _initStatus;
	        /** @internal */
	        this._bootstrapListeners = [];
	        this._views = [];
	        this._runningTick = false;
	        this._enforceNoNewChanges = false;
	        this._stable = true;
	        /**
	         * Get a list of component types registered to this application.
	         * This list is populated even before the component is created.
	         */
	        this.componentTypes = [];
	        /**
	         * Get a list of components registered to this application.
	         */
	        this.components = [];
	        this._enforceNoNewChanges = isDevMode();
	        this._zone.onMicrotaskEmpty.subscribe({
	            next: function () {
	                _this._zone.run(function () {
	                    _this.tick();
	                });
	            }
	        });
	        var isCurrentlyStable = new Observable(function (observer) {
	            _this._stable = _this._zone.isStable && !_this._zone.hasPendingMacrotasks &&
	                !_this._zone.hasPendingMicrotasks;
	            _this._zone.runOutsideAngular(function () {
	                observer.next(_this._stable);
	                observer.complete();
	            });
	        });
	        var isStable = new Observable(function (observer) {
	            // Create the subscription to onStable outside the Angular Zone so that
	            // the callback is run outside the Angular Zone.
	            var stableSub;
	            _this._zone.runOutsideAngular(function () {
	                stableSub = _this._zone.onStable.subscribe(function () {
	                    NgZone.assertNotInAngularZone();
	                    // Check whether there are no pending macro/micro tasks in the next tick
	                    // to allow for NgZone to update the state.
	                    scheduleMicroTask(function () {
	                        if (!_this._stable && !_this._zone.hasPendingMacrotasks &&
	                            !_this._zone.hasPendingMicrotasks) {
	                            _this._stable = true;
	                            observer.next(true);
	                        }
	                    });
	                });
	            });
	            var unstableSub = _this._zone.onUnstable.subscribe(function () {
	                NgZone.assertInAngularZone();
	                if (_this._stable) {
	                    _this._stable = false;
	                    _this._zone.runOutsideAngular(function () {
	                        observer.next(false);
	                    });
	                }
	            });
	            return function () {
	                stableSub.unsubscribe();
	                unstableSub.unsubscribe();
	            };
	        });
	        this.isStable =
	            merge(isCurrentlyStable, isStable.pipe(share()));
	    }
	    /**
	     * Bootstrap a new component at the root level of the application.
	     *
	     * @usageNotes
	     * ### Bootstrap process
	     *
	     * When bootstrapping a new root component into an application, Angular mounts the
	     * specified application component onto DOM elements identified by the componentType's
	     * selector and kicks off automatic change detection to finish initializing the component.
	     *
	     * Optionally, a component can be mounted onto a DOM element that does not match the
	     * componentType's selector.
	     *
	     * ### Example
	     * {@example core/ts/platform/platform.ts region='longform'}
	     */
	    ApplicationRef.prototype.bootstrap = function (componentOrFactory, rootSelectorOrNode) {
	        var _this = this;
	        if (!this._initStatus.done) {
	            throw new Error('Cannot bootstrap as there are still asynchronous initializers running. Bootstrap components in the `ngDoBootstrap` method of the root module.');
	        }
	        var componentFactory;
	        if (componentOrFactory instanceof ComponentFactory) {
	            componentFactory = componentOrFactory;
	        }
	        else {
	            componentFactory =
	                this._componentFactoryResolver.resolveComponentFactory(componentOrFactory);
	        }
	        this.componentTypes.push(componentFactory.componentType);
	        // Create a factory associated with the current module if it's not bound to some other
	        var ngModule = isBoundToModule(componentFactory) ? undefined : this._injector.get(NgModuleRef);
	        var selectorOrNode = rootSelectorOrNode || componentFactory.selector;
	        var compRef = componentFactory.create(Injector.NULL, [], selectorOrNode, ngModule);
	        compRef.onDestroy(function () {
	            _this._unloadComponent(compRef);
	        });
	        var testability = compRef.injector.get(Testability, null);
	        if (testability) {
	            compRef.injector.get(TestabilityRegistry)
	                .registerApplication(compRef.location.nativeElement, testability);
	        }
	        this._loadComponent(compRef);
	        {
	            this._console.log("Angular is running in the development mode. Call enableProdMode() to enable the production mode.");
	        }
	        return compRef;
	    };
	    /**
	     * Invoke this method to explicitly process change detection and its side-effects.
	     *
	     * In development mode, `tick()` also performs a second change detection cycle to ensure that no
	     * further changes are detected. If additional changes are picked up during this second cycle,
	     * bindings in the app have side-effects that cannot be resolved in a single change detection
	     * pass.
	     * In this case, Angular throws an error, since an Angular application can only have one change
	     * detection pass during which all change detection must complete.
	     */
	    ApplicationRef.prototype.tick = function () {
	        var e_1, _a, e_2, _b;
	        var _this = this;
	        if (this._runningTick) {
	            throw new Error('ApplicationRef.tick is called recursively');
	        }
	        try {
	            this._runningTick = true;
	            try {
	                for (var _c = __values(this._views), _d = _c.next(); !_d.done; _d = _c.next()) {
	                    var view = _d.value;
	                    view.detectChanges();
	                }
	            }
	            catch (e_1_1) { e_1 = { error: e_1_1 }; }
	            finally {
	                try {
	                    if (_d && !_d.done && (_a = _c.return)) _a.call(_c);
	                }
	                finally { if (e_1) throw e_1.error; }
	            }
	            if (this._enforceNoNewChanges) {
	                try {
	                    for (var _e = __values(this._views), _f = _e.next(); !_f.done; _f = _e.next()) {
	                        var view = _f.value;
	                        view.checkNoChanges();
	                    }
	                }
	                catch (e_2_1) { e_2 = { error: e_2_1 }; }
	                finally {
	                    try {
	                        if (_f && !_f.done && (_b = _e.return)) _b.call(_e);
	                    }
	                    finally { if (e_2) throw e_2.error; }
	                }
	            }
	        }
	        catch (e) {
	            // Attention: Don't rethrow as it could cancel subscriptions to Observables!
	            this._zone.runOutsideAngular(function () { return _this._exceptionHandler.handleError(e); });
	        }
	        finally {
	            this._runningTick = false;
	        }
	    };
	    /**
	     * Attaches a view so that it will be dirty checked.
	     * The view will be automatically detached when it is destroyed.
	     * This will throw if the view is already attached to a ViewContainer.
	     */
	    ApplicationRef.prototype.attachView = function (viewRef) {
	        var view = viewRef;
	        this._views.push(view);
	        view.attachToAppRef(this);
	    };
	    /**
	     * Detaches a view from dirty checking again.
	     */
	    ApplicationRef.prototype.detachView = function (viewRef) {
	        var view = viewRef;
	        remove(this._views, view);
	        view.detachFromAppRef();
	    };
	    ApplicationRef.prototype._loadComponent = function (componentRef) {
	        this.attachView(componentRef.hostView);
	        this.tick();
	        this.components.push(componentRef);
	        // Get the listeners lazily to prevent DI cycles.
	        var listeners = this._injector.get(APP_BOOTSTRAP_LISTENER, []).concat(this._bootstrapListeners);
	        listeners.forEach(function (listener) { return listener(componentRef); });
	    };
	    ApplicationRef.prototype._unloadComponent = function (componentRef) {
	        this.detachView(componentRef.hostView);
	        remove(this.components, componentRef);
	    };
	    /** @internal */
	    ApplicationRef.prototype.ngOnDestroy = function () {
	        // TODO(alxhub): Dispose of the NgZone.
	        this._views.slice().forEach(function (view) { return view.destroy(); });
	    };
	    Object.defineProperty(ApplicationRef.prototype, "viewCount", {
	        /**
	         * Returns the number of attached views.
	         */
	        get: function () {
	            return this._views.length;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    ApplicationRef = __decorate([
	        Injectable(),
	        __metadata("design:paramtypes", [NgZone, Console, Injector,
	            ErrorHandler,
	            ComponentFactoryResolver,
	            ApplicationInitStatus])
	    ], ApplicationRef);
	    return ApplicationRef;
	}());
	function remove(list, el) {
	    var index = list.indexOf(el);
	    if (index > -1) {
	        list.splice(index, 1);
	    }
	}

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	var _SEPARATOR = '#';
	var FACTORY_CLASS_SUFFIX = 'NgFactory';
	/**
	 * Configuration for SystemJsNgModuleLoader.
	 * token.
	 *
	 * @publicApi
	 * @deprecated the `string` form of `loadChildren` is deprecated, and `SystemJsNgModuleLoaderConfig`
	 * is part of its implementation. See `LoadChildren` for more details.
	 */
	var SystemJsNgModuleLoaderConfig = /** @class */ (function () {
	    function SystemJsNgModuleLoaderConfig() {
	    }
	    return SystemJsNgModuleLoaderConfig;
	}());
	var DEFAULT_CONFIG = {
	    factoryPathPrefix: '',
	    factoryPathSuffix: '.ngfactory',
	};
	/**
	 * NgModuleFactoryLoader that uses SystemJS to load NgModuleFactory
	 * @publicApi
	 * @deprecated the `string` form of `loadChildren` is deprecated, and `SystemJsNgModuleLoader` is
	 * part of its implementation. See `LoadChildren` for more details.
	 */
	var SystemJsNgModuleLoader = /** @class */ (function () {
	    function SystemJsNgModuleLoader(_compiler, config) {
	        this._compiler = _compiler;
	        this._config = config || DEFAULT_CONFIG;
	    }
	    SystemJsNgModuleLoader.prototype.load = function (path) {
	        var legacyOfflineMode =  this._compiler instanceof Compiler;
	        return legacyOfflineMode ? this.loadFactory(path) : this.loadAndCompile(path);
	    };
	    SystemJsNgModuleLoader.prototype.loadAndCompile = function (path) {
	        var _this = this;
	        var _a = __read(path.split(_SEPARATOR), 2), module = _a[0], exportName = _a[1];
	        if (exportName === undefined) {
	            exportName = 'default';
	        }
	        return System.import(module)
	            .then(function (module) { return module[exportName]; })
	            .then(function (type) { return checkNotEmpty(type, module, exportName); })
	            .then(function (type) { return _this._compiler.compileModuleAsync(type); });
	    };
	    SystemJsNgModuleLoader.prototype.loadFactory = function (path) {
	        var _a = __read(path.split(_SEPARATOR), 2), module = _a[0], exportName = _a[1];
	        var factoryClassSuffix = FACTORY_CLASS_SUFFIX;
	        if (exportName === undefined) {
	            exportName = 'default';
	            factoryClassSuffix = '';
	        }
	        return System.import(this._config.factoryPathPrefix + module + this._config.factoryPathSuffix)
	            .then(function (module) { return module[exportName + factoryClassSuffix]; })
	            .then(function (factory) { return checkNotEmpty(factory, module, exportName); });
	    };
	    SystemJsNgModuleLoader = __decorate([
	        Injectable(),
	        __param(1, Optional()),
	        __metadata("design:paramtypes", [Compiler, SystemJsNgModuleLoaderConfig])
	    ], SystemJsNgModuleLoader);
	    return SystemJsNgModuleLoader;
	}());
	function checkNotEmpty(value, modulePath, exportName) {
	    if (!value) {
	        throw new Error("Cannot find '" + exportName + "' in '" + modulePath + "'");
	    }
	    return value;
	}

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * Represents an Angular [view](guide/glossary#view),
	 * specifically the [host view](guide/glossary#view-tree) that is defined by a component.
	 * Also serves as the base class
	 * that adds destroy methods for [embedded views](guide/glossary#view-tree).
	 *
	 * @see `EmbeddedViewRef`
	 *
	 * @publicApi
	 */
	var ViewRef$1 = /** @class */ (function (_super) {
	    __extends(ViewRef, _super);
	    function ViewRef() {
	        return _super !== null && _super.apply(this, arguments) || this;
	    }
	    return ViewRef;
	}(ChangeDetectorRef));
	/**
	 * Represents an Angular [view](guide/glossary#view) in a view container.
	 * An [embedded view](guide/glossary#view-tree) can be referenced from a component
	 * other than the hosting component whose template defines it, or it can be defined
	 * independently by a `TemplateRef`.
	 *
	 * Properties of elements in a view can change, but the structure (number and order) of elements in
	 * a view cannot. Change the structure of elements by inserting, moving, or
	 * removing nested views in a view container.
	 *
	 * @see `ViewContainerRef`
	 *
	 * @usageNotes
	 *
	 * The following template breaks down into two separate `TemplateRef` instances,
	 * an outer one and an inner one.
	 *
	 * ```
	 * Count: {{items.length}}
	 * <ul>
	 *   <li *ngFor="let  item of items">{{item}}</li>
	 * </ul>
	 * ```
	 *
	 * This is the outer `TemplateRef`:
	 *
	 * ```
	 * Count: {{items.length}}
	 * <ul>
	 *   <ng-template ngFor let-item [ngForOf]="items"></ng-template>
	 * </ul>
	 * ```
	 *
	 * This is the inner `TemplateRef`:
	 *
	 * ```
	 *   <li>{{item}}</li>
	 * ```
	 *
	 * The outer and inner `TemplateRef` instances are assembled into views as follows:
	 *
	 * ```
	 * <!-- ViewRef: outer-0 -->
	 * Count: 2
	 * <ul>
	 *   <ng-template view-container-ref></ng-template>
	 *   <!-- ViewRef: inner-1 --><li>first</li><!-- /ViewRef: inner-1 -->
	 *   <!-- ViewRef: inner-2 --><li>second</li><!-- /ViewRef: inner-2 -->
	 * </ul>
	 * <!-- /ViewRef: outer-0 -->
	 * ```
	 * @publicApi
	 */
	var EmbeddedViewRef = /** @class */ (function (_super) {
	    __extends(EmbeddedViewRef, _super);
	    function EmbeddedViewRef() {
	        return _super !== null && _super.apply(this, arguments) || this;
	    }
	    return EmbeddedViewRef;
	}(ViewRef$1));

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * @publicApi
	 */
	var DebugEventListener = /** @class */ (function () {
	    function DebugEventListener(name, callback) {
	        this.name = name;
	        this.callback = callback;
	    }
	    return DebugEventListener;
	}());
	var DebugNode__PRE_R3__ = /** @class */ (function () {
	    function DebugNode__PRE_R3__(nativeNode, parent, _debugContext) {
	        this.listeners = [];
	        this.parent = null;
	        this._debugContext = _debugContext;
	        this.nativeNode = nativeNode;
	        if (parent && parent instanceof DebugElement__PRE_R3__) {
	            parent.addChild(this);
	        }
	    }
	    Object.defineProperty(DebugNode__PRE_R3__.prototype, "injector", {
	        get: function () {
	            return this._debugContext.injector;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DebugNode__PRE_R3__.prototype, "componentInstance", {
	        get: function () {
	            return this._debugContext.component;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DebugNode__PRE_R3__.prototype, "context", {
	        get: function () {
	            return this._debugContext.context;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DebugNode__PRE_R3__.prototype, "references", {
	        get: function () {
	            return this._debugContext.references;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DebugNode__PRE_R3__.prototype, "providerTokens", {
	        get: function () {
	            return this._debugContext.providerTokens;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    return DebugNode__PRE_R3__;
	}());
	var DebugElement__PRE_R3__ = /** @class */ (function (_super) {
	    __extends(DebugElement__PRE_R3__, _super);
	    function DebugElement__PRE_R3__(nativeNode, parent, _debugContext) {
	        var _this = _super.call(this, nativeNode, parent, _debugContext) || this;
	        _this.properties = {};
	        _this.attributes = {};
	        _this.classes = {};
	        _this.styles = {};
	        _this.childNodes = [];
	        _this.nativeElement = nativeNode;
	        return _this;
	    }
	    DebugElement__PRE_R3__.prototype.addChild = function (child) {
	        if (child) {
	            this.childNodes.push(child);
	            child.parent = this;
	        }
	    };
	    DebugElement__PRE_R3__.prototype.removeChild = function (child) {
	        var childIndex = this.childNodes.indexOf(child);
	        if (childIndex !== -1) {
	            child.parent = null;
	            this.childNodes.splice(childIndex, 1);
	        }
	    };
	    DebugElement__PRE_R3__.prototype.insertChildrenAfter = function (child, newChildren) {
	        var _a;
	        var _this = this;
	        var siblingIndex = this.childNodes.indexOf(child);
	        if (siblingIndex !== -1) {
	            (_a = this.childNodes).splice.apply(_a, __spread([siblingIndex + 1, 0], newChildren));
	            newChildren.forEach(function (c) {
	                if (c.parent) {
	                    c.parent.removeChild(c);
	                }
	                child.parent = _this;
	            });
	        }
	    };
	    DebugElement__PRE_R3__.prototype.insertBefore = function (refChild, newChild) {
	        var refIndex = this.childNodes.indexOf(refChild);
	        if (refIndex === -1) {
	            this.addChild(newChild);
	        }
	        else {
	            if (newChild.parent) {
	                newChild.parent.removeChild(newChild);
	            }
	            newChild.parent = this;
	            this.childNodes.splice(refIndex, 0, newChild);
	        }
	    };
	    DebugElement__PRE_R3__.prototype.query = function (predicate) {
	        var results = this.queryAll(predicate);
	        return results[0] || null;
	    };
	    DebugElement__PRE_R3__.prototype.queryAll = function (predicate) {
	        var matches = [];
	        _queryElementChildren(this, predicate, matches);
	        return matches;
	    };
	    DebugElement__PRE_R3__.prototype.queryAllNodes = function (predicate) {
	        var matches = [];
	        _queryNodeChildren(this, predicate, matches);
	        return matches;
	    };
	    Object.defineProperty(DebugElement__PRE_R3__.prototype, "children", {
	        get: function () {
	            return this.childNodes //
	                .filter(function (node) { return node instanceof DebugElement__PRE_R3__; });
	        },
	        enumerable: true,
	        configurable: true
	    });
	    DebugElement__PRE_R3__.prototype.triggerEventHandler = function (eventName, eventObj) {
	        this.listeners.forEach(function (listener) {
	            if (listener.name == eventName) {
	                listener.callback(eventObj);
	            }
	        });
	    };
	    return DebugElement__PRE_R3__;
	}(DebugNode__PRE_R3__));
	function _queryElementChildren(element, predicate, matches) {
	    element.childNodes.forEach(function (node) {
	        if (node instanceof DebugElement__PRE_R3__) {
	            if (predicate(node)) {
	                matches.push(node);
	            }
	            _queryElementChildren(node, predicate, matches);
	        }
	    });
	}
	function _queryNodeChildren(parentNode, predicate, matches) {
	    if (parentNode instanceof DebugElement__PRE_R3__) {
	        parentNode.childNodes.forEach(function (node) {
	            if (predicate(node)) {
	                matches.push(node);
	            }
	            if (node instanceof DebugElement__PRE_R3__) {
	                _queryNodeChildren(node, predicate, matches);
	            }
	        });
	    }
	}
	var DebugNode__POST_R3__ = /** @class */ (function () {
	    function DebugNode__POST_R3__(nativeNode) {
	        this.nativeNode = nativeNode;
	    }
	    Object.defineProperty(DebugNode__POST_R3__.prototype, "parent", {
	        get: function () {
	            var parent = this.nativeNode.parentNode;
	            return parent ? new DebugElement__POST_R3__(parent) : null;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DebugNode__POST_R3__.prototype, "injector", {
	        get: function () {
	            return getInjector(this.nativeNode);
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DebugNode__POST_R3__.prototype, "componentInstance", {
	        get: function () {
	            var nativeElement = this.nativeNode;
	            return nativeElement &&
	                (getComponent(nativeElement) || getOwningComponent(nativeElement));
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DebugNode__POST_R3__.prototype, "context", {
	        get: function () {
	            return getComponent(this.nativeNode) || getContext(this.nativeNode);
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DebugNode__POST_R3__.prototype, "listeners", {
	        get: function () {
	            return getListeners(this.nativeNode).filter(function (listener) { return listener.type === 'dom'; });
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DebugNode__POST_R3__.prototype, "references", {
	        get: function () {
	            return getLocalRefs(this.nativeNode);
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DebugNode__POST_R3__.prototype, "providerTokens", {
	        get: function () {
	            return getInjectionTokens(this.nativeNode);
	        },
	        enumerable: true,
	        configurable: true
	    });
	    return DebugNode__POST_R3__;
	}());
	var DebugElement__POST_R3__ = /** @class */ (function (_super) {
	    __extends(DebugElement__POST_R3__, _super);
	    function DebugElement__POST_R3__(nativeNode) {
	        var _this = this;
	        ngDevMode && assertDomNode(nativeNode);
	        _this = _super.call(this, nativeNode) || this;
	        return _this;
	    }
	    Object.defineProperty(DebugElement__POST_R3__.prototype, "nativeElement", {
	        get: function () {
	            return this.nativeNode.nodeType == Node.ELEMENT_NODE ? this.nativeNode : null;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DebugElement__POST_R3__.prototype, "name", {
	        get: function () {
	            try {
	                var context = loadLContext(this.nativeNode);
	                var lView = context.lView;
	                var tData = lView[TVIEW].data;
	                var tNode = tData[context.nodeIndex];
	                return tNode.tagName;
	            }
	            catch (e) {
	                return this.nativeNode.nodeName;
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DebugElement__POST_R3__.prototype, "properties", {
	        /**
	         *  Gets a map of property names to property values for an element.
	         *
	         *  This map includes:
	         *  - Regular property bindings (e.g. `[id]="id"`)
	         *  - Host property bindings (e.g. `host: { '[id]': "id" }`)
	         *  - Interpolated property bindings (e.g. `id="{{ value }}")
	         *
	         *  It does not include:
	         *  - input property bindings (e.g. `[myCustomInput]="value"`)
	         *  - attribute bindings (e.g. `[attr.role]="menu"`)
	         */
	        get: function () {
	            var context = loadLContext(this.nativeNode, false);
	            if (context == null) {
	                return {};
	            }
	            var lView = context.lView;
	            var tData = lView[TVIEW].data;
	            var tNode = tData[context.nodeIndex];
	            var properties = {};
	            // Collect properties from the DOM.
	            copyDomProperties(this.nativeElement, properties);
	            // Collect properties from the bindings. This is needed for animation renderer which has
	            // synthetic properties which don't get reflected into the DOM.
	            collectPropertyBindings(properties, tNode, lView, tData);
	            return properties;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DebugElement__POST_R3__.prototype, "attributes", {
	        get: function () {
	            var attributes = {};
	            var element = this.nativeElement;
	            if (!element) {
	                return attributes;
	            }
	            var context = loadLContext(element, false);
	            if (context == null) {
	                return {};
	            }
	            var lView = context.lView;
	            var tNodeAttrs = lView[TVIEW].data[context.nodeIndex].attrs;
	            var lowercaseTNodeAttrs = [];
	            // For debug nodes we take the element's attribute directly from the DOM since it allows us
	            // to account for ones that weren't set via bindings (e.g. ViewEngine keeps track of the ones
	            // that are set through `Renderer2`). The problem is that the browser will lowercase all names,
	            // however since we have the attributes already on the TNode, we can preserve the case by going
	            // through them once, adding them to the `attributes` map and putting their lower-cased name
	            // into an array. Afterwards when we're going through the native DOM attributes, we can check
	            // whether we haven't run into an attribute already through the TNode.
	            if (tNodeAttrs) {
	                var i = 0;
	                while (i < tNodeAttrs.length) {
	                    var attrName = tNodeAttrs[i];
	                    // Stop as soon as we hit a marker. We only care about the regular attributes. Everything
	                    // else will be handled below when we read the final attributes off the DOM.
	                    if (typeof attrName !== 'string')
	                        break;
	                    var attrValue = tNodeAttrs[i + 1];
	                    attributes[attrName] = attrValue;
	                    lowercaseTNodeAttrs.push(attrName.toLowerCase());
	                    i += 2;
	                }
	            }
	            var eAttrs = element.attributes;
	            for (var i = 0; i < eAttrs.length; i++) {
	                var attr = eAttrs[i];
	                var lowercaseName = attr.name.toLowerCase();
	                // Make sure that we don't assign the same attribute both in its
	                // case-sensitive form and the lower-cased one from the browser.
	                if (lowercaseTNodeAttrs.indexOf(lowercaseName) === -1) {
	                    // Save the lowercase name to align the behavior between browsers.
	                    // IE preserves the case, while all other browser convert it to lower case.
	                    attributes[lowercaseName] = attr.value;
	                }
	            }
	            return attributes;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DebugElement__POST_R3__.prototype, "styles", {
	        get: function () {
	            if (this.nativeElement && this.nativeElement.style) {
	                return this.nativeElement.style;
	            }
	            return {};
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DebugElement__POST_R3__.prototype, "classes", {
	        get: function () {
	            var result = {};
	            var element = this.nativeElement;
	            // SVG elements return an `SVGAnimatedString` instead of a plain string for the `className`.
	            var className = element.className;
	            var classes = className && typeof className !== 'string' ? className.baseVal.split(' ') :
	                className.split(' ');
	            classes.forEach(function (value) { return result[value] = true; });
	            return result;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DebugElement__POST_R3__.prototype, "childNodes", {
	        get: function () {
	            var childNodes = this.nativeNode.childNodes;
	            var children = [];
	            for (var i = 0; i < childNodes.length; i++) {
	                var element = childNodes[i];
	                children.push(getDebugNode__POST_R3__(element));
	            }
	            return children;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DebugElement__POST_R3__.prototype, "children", {
	        get: function () {
	            var nativeElement = this.nativeElement;
	            if (!nativeElement)
	                return [];
	            var childNodes = nativeElement.children;
	            var children = [];
	            for (var i = 0; i < childNodes.length; i++) {
	                var element = childNodes[i];
	                children.push(getDebugNode__POST_R3__(element));
	            }
	            return children;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    DebugElement__POST_R3__.prototype.query = function (predicate) {
	        var results = this.queryAll(predicate);
	        return results[0] || null;
	    };
	    DebugElement__POST_R3__.prototype.queryAll = function (predicate) {
	        var matches = [];
	        _queryAllR3(this, predicate, matches, true);
	        return matches;
	    };
	    DebugElement__POST_R3__.prototype.queryAllNodes = function (predicate) {
	        var matches = [];
	        _queryAllR3(this, predicate, matches, false);
	        return matches;
	    };
	    DebugElement__POST_R3__.prototype.triggerEventHandler = function (eventName, eventObj) {
	        var node = this.nativeNode;
	        var invokedListeners = [];
	        this.listeners.forEach(function (listener) {
	            if (listener.name === eventName) {
	                var callback = listener.callback;
	                callback.call(node, eventObj);
	                invokedListeners.push(callback);
	            }
	        });
	        // We need to check whether `eventListeners` exists, because it's something
	        // that Zone.js only adds to `EventTarget` in browser environments.
	        if (typeof node.eventListeners === 'function') {
	            // Note that in Ivy we wrap event listeners with a call to `event.preventDefault` in some
	            // cases. We use '__ngUnwrap__' as a special token that gives us access to the actual event
	            // listener.
	            node.eventListeners(eventName).forEach(function (listener) {
	                // In order to ensure that we can detect the special __ngUnwrap__ token described above, we
	                // use `toString` on the listener and see if it contains the token. We use this approach to
	                // ensure that it still worked with compiled code since it cannot remove or rename string
	                // literals. We also considered using a special function name (i.e. if(listener.name ===
	                // special)) but that was more cumbersome and we were also concerned the compiled code could
	                // strip the name, turning the condition in to ("" === "") and always returning true.
	                if (listener.toString().indexOf('__ngUnwrap__') !== -1) {
	                    var unwrappedListener = listener('__ngUnwrap__');
	                    return invokedListeners.indexOf(unwrappedListener) === -1 &&
	                        unwrappedListener.call(node, eventObj);
	                }
	            });
	        }
	    };
	    return DebugElement__POST_R3__;
	}(DebugNode__POST_R3__));
	function copyDomProperties(element, properties) {
	    if (element) {
	        // Skip own properties (as those are patched)
	        var obj = Object.getPrototypeOf(element);
	        var NodePrototype = Node.prototype;
	        while (obj !== null && obj !== NodePrototype) {
	            var descriptors = Object.getOwnPropertyDescriptors(obj);
	            for (var key in descriptors) {
	                if (!key.startsWith('__') && !key.startsWith('on')) {
	                    // don't include properties starting with `__` and `on`.
	                    // `__` are patched values which should not be included.
	                    // `on` are listeners which also should not be included.
	                    var value = element[key];
	                    if (isPrimitiveValue(value)) {
	                        properties[key] = value;
	                    }
	                }
	            }
	            obj = Object.getPrototypeOf(obj);
	        }
	    }
	}
	function isPrimitiveValue(value) {
	    return typeof value === 'string' || typeof value === 'boolean' || typeof value === 'number' ||
	        value === null;
	}
	function _queryAllR3(parentElement, predicate, matches, elementsOnly) {
	    var context = loadLContext(parentElement.nativeNode, false);
	    if (context !== null) {
	        var parentTNode = context.lView[TVIEW].data[context.nodeIndex];
	        _queryNodeChildrenR3(parentTNode, context.lView, predicate, matches, elementsOnly, parentElement.nativeNode);
	    }
	    else {
	        // If the context is null, then `parentElement` was either created with Renderer2 or native DOM
	        // APIs.
	        _queryNativeNodeDescendants(parentElement.nativeNode, predicate, matches, elementsOnly);
	    }
	}
	/**
	 * Recursively match the current TNode against the predicate, and goes on with the next ones.
	 *
	 * @param tNode the current TNode
	 * @param lView the LView of this TNode
	 * @param predicate the predicate to match
	 * @param matches the list of positive matches
	 * @param elementsOnly whether only elements should be searched
	 * @param rootNativeNode the root native node on which predicate should not be matched
	 */
	function _queryNodeChildrenR3(tNode, lView, predicate, matches, elementsOnly, rootNativeNode) {
	    var e_1, _a;
	    var nativeNode = getNativeByTNodeOrNull(tNode, lView);
	    // For each type of TNode, specific logic is executed.
	    if (tNode.type === 3 /* Element */ || tNode.type === 4 /* ElementContainer */) {
	        // Case 1: the TNode is an element
	        // The native node has to be checked.
	        _addQueryMatchR3(nativeNode, predicate, matches, elementsOnly, rootNativeNode);
	        if (isComponentHost(tNode)) {
	            // If the element is the host of a component, then all nodes in its view have to be processed.
	            // Note: the component's content (tNode.child) will be processed from the insertion points.
	            var componentView = getComponentLViewByIndex(tNode.index, lView);
	            if (componentView && componentView[TVIEW].firstChild) {
	                _queryNodeChildrenR3(componentView[TVIEW].firstChild, componentView, predicate, matches, elementsOnly, rootNativeNode);
	            }
	        }
	        else {
	            if (tNode.child) {
	                // Otherwise, its children have to be processed.
	                _queryNodeChildrenR3(tNode.child, lView, predicate, matches, elementsOnly, rootNativeNode);
	            }
	            // We also have to query the DOM directly in order to catch elements inserted through
	            // Renderer2. Note that this is __not__ optimal, because we're walking similar trees multiple
	            // times. ViewEngine could do it more efficiently, because all the insertions go through
	            // Renderer2, however that's not the case in Ivy. This approach is being used because:
	            // 1. Matching the ViewEngine behavior would mean potentially introducing a depedency
	            //    from `Renderer2` to Ivy which could bring Ivy code into ViewEngine.
	            // 2. We would have to make `Renderer3` "know" about debug nodes.
	            // 3. It allows us to capture nodes that were inserted directly via the DOM.
	            nativeNode && _queryNativeNodeDescendants(nativeNode, predicate, matches, elementsOnly);
	        }
	        // In all cases, if a dynamic container exists for this node, each view inside it has to be
	        // processed.
	        var nodeOrContainer = lView[tNode.index];
	        if (isLContainer(nodeOrContainer)) {
	            _queryNodeChildrenInContainerR3(nodeOrContainer, predicate, matches, elementsOnly, rootNativeNode);
	        }
	    }
	    else if (tNode.type === 0 /* Container */) {
	        // Case 2: the TNode is a container
	        // The native node has to be checked.
	        var lContainer = lView[tNode.index];
	        _addQueryMatchR3(lContainer[NATIVE$1], predicate, matches, elementsOnly, rootNativeNode);
	        // Each view inside the container has to be processed.
	        _queryNodeChildrenInContainerR3(lContainer, predicate, matches, elementsOnly, rootNativeNode);
	    }
	    else if (tNode.type === 1 /* Projection */) {
	        // Case 3: the TNode is a projection insertion point (i.e. a <ng-content>).
	        // The nodes projected at this location all need to be processed.
	        var componentView = lView[DECLARATION_COMPONENT_VIEW];
	        var componentHost = componentView[T_HOST];
	        var head = componentHost.projection[tNode.projection];
	        if (Array.isArray(head)) {
	            try {
	                for (var head_1 = __values(head), head_1_1 = head_1.next(); !head_1_1.done; head_1_1 = head_1.next()) {
	                    var nativeNode_1 = head_1_1.value;
	                    _addQueryMatchR3(nativeNode_1, predicate, matches, elementsOnly, rootNativeNode);
	                }
	            }
	            catch (e_1_1) { e_1 = { error: e_1_1 }; }
	            finally {
	                try {
	                    if (head_1_1 && !head_1_1.done && (_a = head_1.return)) _a.call(head_1);
	                }
	                finally { if (e_1) throw e_1.error; }
	            }
	        }
	        else if (head) {
	            var nextLView = componentView[PARENT];
	            var nextTNode = nextLView[TVIEW].data[head.index];
	            _queryNodeChildrenR3(nextTNode, nextLView, predicate, matches, elementsOnly, rootNativeNode);
	        }
	    }
	    else if (tNode.child) {
	        // Case 4: the TNode is a view.
	        _queryNodeChildrenR3(tNode.child, lView, predicate, matches, elementsOnly, rootNativeNode);
	    }
	    // We don't want to go to the next sibling of the root node.
	    if (rootNativeNode !== nativeNode) {
	        // To determine the next node to be processed, we need to use the next or the projectionNext
	        // link, depending on whether the current node has been projected.
	        var nextTNode = (tNode.flags & 4 /* isProjected */) ? tNode.projectionNext : tNode.next;
	        if (nextTNode) {
	            _queryNodeChildrenR3(nextTNode, lView, predicate, matches, elementsOnly, rootNativeNode);
	        }
	    }
	}
	/**
	 * Process all TNodes in a given container.
	 *
	 * @param lContainer the container to be processed
	 * @param predicate the predicate to match
	 * @param matches the list of positive matches
	 * @param elementsOnly whether only elements should be searched
	 * @param rootNativeNode the root native node on which predicate should not be matched
	 */
	function _queryNodeChildrenInContainerR3(lContainer, predicate, matches, elementsOnly, rootNativeNode) {
	    for (var i = CONTAINER_HEADER_OFFSET; i < lContainer.length; i++) {
	        var childView = lContainer[i];
	        _queryNodeChildrenR3(childView[TVIEW].node, childView, predicate, matches, elementsOnly, rootNativeNode);
	    }
	}
	/**
	 * Match the current native node against the predicate.
	 *
	 * @param nativeNode the current native node
	 * @param predicate the predicate to match
	 * @param matches the list of positive matches
	 * @param elementsOnly whether only elements should be searched
	 * @param rootNativeNode the root native node on which predicate should not be matched
	 */
	function _addQueryMatchR3(nativeNode, predicate, matches, elementsOnly, rootNativeNode) {
	    if (rootNativeNode !== nativeNode) {
	        var debugNode = getDebugNode$1(nativeNode);
	        if (!debugNode) {
	            return;
	        }
	        // Type of the "predicate and "matches" array are set based on the value of
	        // the "elementsOnly" parameter. TypeScript is not able to properly infer these
	        // types with generics, so we manually cast the parameters accordingly.
	        if (elementsOnly && debugNode instanceof DebugElement__POST_R3__ && predicate(debugNode) &&
	            matches.indexOf(debugNode) === -1) {
	            matches.push(debugNode);
	        }
	        else if (!elementsOnly && predicate(debugNode) &&
	            matches.indexOf(debugNode) === -1) {
	            matches.push(debugNode);
	        }
	    }
	}
	/**
	 * Match all the descendants of a DOM node against a predicate.
	 *
	 * @param nativeNode the current native node
	 * @param predicate the predicate to match
	 * @param matches the list of positive matches
	 * @param elementsOnly whether only elements should be searched
	 */
	function _queryNativeNodeDescendants(parentNode, predicate, matches, elementsOnly) {
	    var nodes = parentNode.childNodes;
	    var length = nodes.length;
	    for (var i = 0; i < length; i++) {
	        var node = nodes[i];
	        var debugNode = getDebugNode$1(node);
	        if (debugNode) {
	            if (elementsOnly && debugNode instanceof DebugElement__POST_R3__ && predicate(debugNode) &&
	                matches.indexOf(debugNode) === -1) {
	                matches.push(debugNode);
	            }
	            else if (!elementsOnly && predicate(debugNode) &&
	                matches.indexOf(debugNode) === -1) {
	                matches.push(debugNode);
	            }
	            _queryNativeNodeDescendants(node, predicate, matches, elementsOnly);
	        }
	    }
	}
	/**
	 * Iterates through the property bindings for a given node and generates
	 * a map of property names to values. This map only contains property bindings
	 * defined in templates, not in host bindings.
	 */
	function collectPropertyBindings(properties, tNode, lView, tData) {
	    var bindingIndexes = tNode.propertyBindings;
	    if (bindingIndexes !== null) {
	        for (var i = 0; i < bindingIndexes.length; i++) {
	            var bindingIndex = bindingIndexes[i];
	            var propMetadata = tData[bindingIndex];
	            var metadataParts = propMetadata.split(INTERPOLATION_DELIMITER);
	            var propertyName = metadataParts[0];
	            if (metadataParts.length > 1) {
	                var value = metadataParts[1];
	                for (var j = 1; j < metadataParts.length - 1; j++) {
	                    value += renderStringify(lView[bindingIndex + j - 1]) + metadataParts[j + 1];
	                }
	                properties[propertyName] = value;
	            }
	            else {
	                properties[propertyName] = lView[bindingIndex];
	            }
	        }
	    }
	}
	// Need to keep the nodes in a global Map so that multiple angular apps are supported.
	var _nativeNodeToDebugNode = new Map();
	function getDebugNode__PRE_R3__(nativeNode) {
	    return _nativeNodeToDebugNode.get(nativeNode) || null;
	}
	var NG_DEBUG_PROPERTY = '__ng_debug__';
	function getDebugNode__POST_R3__(nativeNode) {
	    if (nativeNode instanceof Node) {
	        if (!(nativeNode.hasOwnProperty(NG_DEBUG_PROPERTY))) {
	            nativeNode[NG_DEBUG_PROPERTY] = nativeNode.nodeType == Node.ELEMENT_NODE ?
	                new DebugElement__POST_R3__(nativeNode) :
	                new DebugNode__POST_R3__(nativeNode);
	        }
	        return nativeNode[NG_DEBUG_PROPERTY];
	    }
	    return null;
	}
	/**
	 * @publicApi
	 */
	var getDebugNode$1 = getDebugNode__PRE_R3__;
	function getDebugNodeR2__PRE_R3__(nativeNode) {
	    return getDebugNode__PRE_R3__(nativeNode);
	}
	var getDebugNodeR2 = getDebugNodeR2__PRE_R3__;
	function indexDebugNode(node) {
	    _nativeNodeToDebugNode.set(node.nativeNode, node);
	}
	function removeDebugNodeFromIndex(node) {
	    _nativeNodeToDebugNode.delete(node.nativeNode);
	}

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	var _CORE_PLATFORM_PROVIDERS = [
	    // Set a default platform name for platforms that don't set it explicitly.
	    { provide: PLATFORM_ID, useValue: 'unknown' },
	    { provide: PlatformRef, deps: [Injector] },
	    { provide: TestabilityRegistry, deps: [] },
	    { provide: Console, deps: [] },
	];
	/**
	 * This platform has to be included in any other platform
	 *
	 * @publicApi
	 */
	var platformCore = createPlatformFactory(null, 'core', _CORE_PLATFORM_PROVIDERS);

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	function _iterableDiffersFactory() {
	    return defaultIterableDiffers;
	}
	function _keyValueDiffersFactory() {
	    return defaultKeyValueDiffers;
	}
	function _localeFactory(locale) {
	    locale = locale || getGlobalLocale();
	    return locale;
	}
	/**
	 * Work out the locale from the potential global properties.
	 *
	 * * Closure Compiler: use `goog.LOCALE`.
	 * * Ivy enabled: use `$localize.locale`
	 */
	function getGlobalLocale() {
	    if (typeof ngI18nClosureMode !== 'undefined' && ngI18nClosureMode &&
	        typeof goog !== 'undefined' && goog.LOCALE !== 'en') {
	        // * The default `goog.LOCALE` value is `en`, while Angular used `en-US`.
	        // * In order to preserve backwards compatibility, we use Angular default value over
	        //   Closure Compiler's one.
	        return goog.LOCALE;
	    }
	    else {
	        // KEEP `typeof $localize !== 'undefined' && $localize.locale` IN SYNC WITH THE LOCALIZE
	        // COMPILE-TIME INLINER.
	        //
	        // * During compile time inlining of translations the expression will be replaced
	        //   with a string literal that is the current locale. Other forms of this expression are not
	        //   guaranteed to be replaced.
	        //
	        // * During runtime translation evaluation, the developer is required to set `$localize.locale`
	        //   if required, or just to provide their own `LOCALE_ID` provider.
	        return             DEFAULT_LOCALE_ID;
	    }
	}
	var Éµ0$g = USD_CURRENCY_CODE;
	/**
	 * A built-in [dependency injection token](guide/glossary#di-token)
	 * that is used to configure the root injector for bootstrapping.
	 */
	var APPLICATION_MODULE_PROVIDERS = [
	    {
	        provide: ApplicationRef,
	        useClass: ApplicationRef,
	        deps: [NgZone, Console, Injector, ErrorHandler, ComponentFactoryResolver, ApplicationInitStatus]
	    },
	    { provide: SCHEDULER, deps: [NgZone], useFactory: zoneSchedulerFactory },
	    {
	        provide: ApplicationInitStatus,
	        useClass: ApplicationInitStatus,
	        deps: [[new Optional(), APP_INITIALIZER]]
	    },
	    { provide: Compiler, useClass: Compiler, deps: [] },
	    APP_ID_RANDOM_PROVIDER,
	    { provide: IterableDiffers, useFactory: _iterableDiffersFactory, deps: [] },
	    { provide: KeyValueDiffers, useFactory: _keyValueDiffersFactory, deps: [] },
	    {
	        provide: LOCALE_ID$1,
	        useFactory: _localeFactory,
	        deps: [[new Inject(LOCALE_ID$1), new Optional(), new SkipSelf()]]
	    },
	    { provide: DEFAULT_CURRENCY_CODE, useValue: Éµ0$g },
	];
	/**
	 * Schedule work at next available slot.
	 *
	 * In Ivy this is just `requestAnimationFrame`. For compatibility reasons when bootstrapped
	 * using `platformRef.bootstrap` we need to use `NgZone.onStable` as the scheduling mechanism.
	 * This overrides the scheduling mechanism in Ivy to `NgZone.onStable`.
	 *
	 * @param ngZone NgZone to use for scheduling.
	 */
	function zoneSchedulerFactory(ngZone) {
	    var queue = [];
	    ngZone.onStable.subscribe(function () {
	        while (queue.length) {
	            queue.pop()();
	        }
	    });
	    return function (fn) {
	        queue.push(fn);
	    };
	}
	/**
	 * Configures the root injector for an app with
	 * providers of `@angular/core` dependencies that `ApplicationRef` needs
	 * to bootstrap components.
	 *
	 * Re-exported by `BrowserModule`, which is included automatically in the root
	 * `AppModule` when you create a new app with the CLI `new` command.
	 *
	 * @publicApi
	 */
	var ApplicationModule = /** @class */ (function () {
	    // Inject ApplicationRef to make it eager...
	    function ApplicationModule(appRef) {
	    }
	    ApplicationModule = __decorate([
	        NgModule({ providers: APPLICATION_MODULE_PROVIDERS }),
	        __metadata("design:paramtypes", [ApplicationRef])
	    ], ApplicationModule);
	    return ApplicationModule;
	}());

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	function anchorDef(flags, matchedQueriesDsl, ngContentIndex, childCount, handleEvent, templateFactory) {
	    flags |= 1 /* TypeElement */;
	    var _a = splitMatchedQueriesDsl(matchedQueriesDsl), matchedQueries = _a.matchedQueries, references = _a.references, matchedQueryIds = _a.matchedQueryIds;
	    var template = templateFactory ? resolveDefinition(templateFactory) : null;
	    return {
	        // will bet set by the view definition
	        nodeIndex: -1,
	        parent: null,
	        renderParent: null,
	        bindingIndex: -1,
	        outputIndex: -1,
	        // regular values
	        flags: flags,
	        checkIndex: -1,
	        childFlags: 0,
	        directChildFlags: 0,
	        childMatchedQueries: 0,
	        matchedQueries: matchedQueries,
	        matchedQueryIds: matchedQueryIds,
	        references: references,
	        ngContentIndex: ngContentIndex,
	        childCount: childCount,
	        bindings: [],
	        bindingFlags: 0,
	        outputs: [],
	        element: {
	            ns: null,
	            name: null,
	            attrs: null,
	            template: template,
	            componentProvider: null,
	            componentView: null,
	            componentRendererType: null,
	            publicProviders: null,
	            allProviders: null,
	            handleEvent: handleEvent || NOOP
	        },
	        provider: null,
	        text: null,
	        query: null,
	        ngContent: null
	    };
	}
	function elementDef(checkIndex, flags, matchedQueriesDsl, ngContentIndex, childCount, namespaceAndName, fixedAttrs, bindings, outputs, handleEvent, componentView, componentRendererType) {
	    var _a;
	    if (fixedAttrs === void 0) { fixedAttrs = []; }
	    if (!handleEvent) {
	        handleEvent = NOOP;
	    }
	    var _b = splitMatchedQueriesDsl(matchedQueriesDsl), matchedQueries = _b.matchedQueries, references = _b.references, matchedQueryIds = _b.matchedQueryIds;
	    var ns = null;
	    var name = null;
	    if (namespaceAndName) {
	        _a = __read(splitNamespace(namespaceAndName), 2), ns = _a[0], name = _a[1];
	    }
	    bindings = bindings || [];
	    var bindingDefs = [];
	    for (var i = 0; i < bindings.length; i++) {
	        var _c = __read(bindings[i], 3), bindingFlags = _c[0], namespaceAndName_1 = _c[1], suffixOrSecurityContext = _c[2];
	        var _d = __read(splitNamespace(namespaceAndName_1), 2), ns_1 = _d[0], name_1 = _d[1];
	        var securityContext = undefined;
	        var suffix = undefined;
	        switch (bindingFlags & 15 /* Types */) {
	            case 4 /* TypeElementStyle */:
	                suffix = suffixOrSecurityContext;
	                break;
	            case 1 /* TypeElementAttribute */:
	            case 8 /* TypeProperty */:
	                securityContext = suffixOrSecurityContext;
	                break;
	        }
	        bindingDefs[i] =
	            { flags: bindingFlags, ns: ns_1, name: name_1, nonMinifiedName: name_1, securityContext: securityContext, suffix: suffix };
	    }
	    outputs = outputs || [];
	    var outputDefs = [];
	    for (var i = 0; i < outputs.length; i++) {
	        var _e = __read(outputs[i], 2), target = _e[0], eventName = _e[1];
	        outputDefs[i] =
	            { type: 0 /* ElementOutput */, target: target, eventName: eventName, propName: null };
	    }
	    fixedAttrs = fixedAttrs || [];
	    var attrs = fixedAttrs.map(function (_a) {
	        var _b = __read(_a, 2), namespaceAndName = _b[0], value = _b[1];
	        var _c = __read(splitNamespace(namespaceAndName), 2), ns = _c[0], name = _c[1];
	        return [ns, name, value];
	    });
	    componentRendererType = resolveRendererType2(componentRendererType);
	    if (componentView) {
	        flags |= 33554432 /* ComponentView */;
	    }
	    flags |= 1 /* TypeElement */;
	    return {
	        // will bet set by the view definition
	        nodeIndex: -1,
	        parent: null,
	        renderParent: null,
	        bindingIndex: -1,
	        outputIndex: -1,
	        // regular values
	        checkIndex: checkIndex,
	        flags: flags,
	        childFlags: 0,
	        directChildFlags: 0,
	        childMatchedQueries: 0,
	        matchedQueries: matchedQueries,
	        matchedQueryIds: matchedQueryIds,
	        references: references,
	        ngContentIndex: ngContentIndex,
	        childCount: childCount,
	        bindings: bindingDefs,
	        bindingFlags: calcBindingFlags(bindingDefs),
	        outputs: outputDefs,
	        element: {
	            ns: ns,
	            name: name,
	            attrs: attrs,
	            template: null,
	            // will bet set by the view definition
	            componentProvider: null,
	            componentView: componentView || null,
	            componentRendererType: componentRendererType,
	            publicProviders: null,
	            allProviders: null,
	            handleEvent: handleEvent || NOOP,
	        },
	        provider: null,
	        text: null,
	        query: null,
	        ngContent: null
	    };
	}
	function createElement(view, renderHost, def) {
	    var elDef = def.element;
	    var rootSelectorOrNode = view.root.selectorOrNode;
	    var renderer = view.renderer;
	    var el;
	    if (view.parent || !rootSelectorOrNode) {
	        if (elDef.name) {
	            el = renderer.createElement(elDef.name, elDef.ns);
	        }
	        else {
	            el = renderer.createComment('');
	        }
	        var parentEl = getParentRenderElement(view, renderHost, def);
	        if (parentEl) {
	            renderer.appendChild(parentEl, el);
	        }
	    }
	    else {
	        // when using native Shadow DOM, do not clear the root element contents to allow slot projection
	        var preserveContent = (!!elDef.componentRendererType &&
	            elDef.componentRendererType.encapsulation === ViewEncapsulation$1$1.ShadowDom);
	        el = renderer.selectRootElement(rootSelectorOrNode, preserveContent);
	    }
	    if (elDef.attrs) {
	        for (var i = 0; i < elDef.attrs.length; i++) {
	            var _a = __read(elDef.attrs[i], 3), ns = _a[0], name_2 = _a[1], value = _a[2];
	            renderer.setAttribute(el, name_2, value, ns);
	        }
	    }
	    return el;
	}
	function listenToElementOutputs(view, compView, def, el) {
	    for (var i = 0; i < def.outputs.length; i++) {
	        var output = def.outputs[i];
	        var handleEventClosure = renderEventHandlerClosure(view, def.nodeIndex, elementEventFullName$1(output.target, output.eventName));
	        var listenTarget = output.target;
	        var listenerView = view;
	        if (output.target === 'component') {
	            listenTarget = null;
	            listenerView = compView;
	        }
	        var disposable = listenerView.renderer.listen(listenTarget || el, output.eventName, handleEventClosure);
	        view.disposables[def.outputIndex + i] = disposable;
	    }
	}
	function renderEventHandlerClosure(view, index, eventName) {
	    return function (event) { return dispatchEvent(view, index, eventName, event); };
	}
	function checkAndUpdateElementInline(view, def, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9) {
	    var bindLen = def.bindings.length;
	    var changed = false;
	    if (bindLen > 0 && checkAndUpdateElementValue(view, def, 0, v0))
	        changed = true;
	    if (bindLen > 1 && checkAndUpdateElementValue(view, def, 1, v1))
	        changed = true;
	    if (bindLen > 2 && checkAndUpdateElementValue(view, def, 2, v2))
	        changed = true;
	    if (bindLen > 3 && checkAndUpdateElementValue(view, def, 3, v3))
	        changed = true;
	    if (bindLen > 4 && checkAndUpdateElementValue(view, def, 4, v4))
	        changed = true;
	    if (bindLen > 5 && checkAndUpdateElementValue(view, def, 5, v5))
	        changed = true;
	    if (bindLen > 6 && checkAndUpdateElementValue(view, def, 6, v6))
	        changed = true;
	    if (bindLen > 7 && checkAndUpdateElementValue(view, def, 7, v7))
	        changed = true;
	    if (bindLen > 8 && checkAndUpdateElementValue(view, def, 8, v8))
	        changed = true;
	    if (bindLen > 9 && checkAndUpdateElementValue(view, def, 9, v9))
	        changed = true;
	    return changed;
	}
	function checkAndUpdateElementDynamic(view, def, values) {
	    var changed = false;
	    for (var i = 0; i < values.length; i++) {
	        if (checkAndUpdateElementValue(view, def, i, values[i]))
	            changed = true;
	    }
	    return changed;
	}
	function checkAndUpdateElementValue(view, def, bindingIdx, value) {
	    if (!checkAndUpdateBinding(view, def, bindingIdx, value)) {
	        return false;
	    }
	    var binding = def.bindings[bindingIdx];
	    var elData = asElementData(view, def.nodeIndex);
	    var renderNode = elData.renderElement;
	    var name = binding.name;
	    switch (binding.flags & 15 /* Types */) {
	        case 1 /* TypeElementAttribute */:
	            setElementAttribute(view, binding, renderNode, binding.ns, name, value);
	            break;
	        case 2 /* TypeElementClass */:
	            setElementClass(view, renderNode, name, value);
	            break;
	        case 4 /* TypeElementStyle */:
	            setElementStyle(view, binding, renderNode, name, value);
	            break;
	        case 8 /* TypeProperty */:
	            var bindView = (def.flags & 33554432 /* ComponentView */ &&
	                binding.flags & 32 /* SyntheticHostProperty */) ?
	                elData.componentView :
	                view;
	            setElementProperty(bindView, binding, renderNode, name, value);
	            break;
	    }
	    return true;
	}
	function setElementAttribute(view, binding, renderNode, ns, name, value) {
	    var securityContext = binding.securityContext;
	    var renderValue = securityContext ? view.root.sanitizer.sanitize(securityContext, value) : value;
	    renderValue = renderValue != null ? renderValue.toString() : null;
	    var renderer = view.renderer;
	    if (value != null) {
	        renderer.setAttribute(renderNode, name, renderValue, ns);
	    }
	    else {
	        renderer.removeAttribute(renderNode, name, ns);
	    }
	}
	function setElementClass(view, renderNode, name, value) {
	    var renderer = view.renderer;
	    if (value) {
	        renderer.addClass(renderNode, name);
	    }
	    else {
	        renderer.removeClass(renderNode, name);
	    }
	}
	function setElementStyle(view, binding, renderNode, name, value) {
	    var renderValue = view.root.sanitizer.sanitize(SecurityContext$1.STYLE, value);
	    if (renderValue != null) {
	        renderValue = renderValue.toString();
	        var unit = binding.suffix;
	        if (unit != null) {
	            renderValue = renderValue + unit;
	        }
	    }
	    else {
	        renderValue = null;
	    }
	    var renderer = view.renderer;
	    if (renderValue != null) {
	        renderer.setStyle(renderNode, name, renderValue);
	    }
	    else {
	        renderer.removeStyle(renderNode, name);
	    }
	}
	function setElementProperty(view, binding, renderNode, name, value) {
	    var securityContext = binding.securityContext;
	    var renderValue = securityContext ? view.root.sanitizer.sanitize(securityContext, value) : value;
	    view.renderer.setProperty(renderNode, name, renderValue);
	}

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	function queryDef(flags, id, bindings) {
	    var bindingDefs = [];
	    for (var propName in bindings) {
	        var bindingType = bindings[propName];
	        bindingDefs.push({ propName: propName, bindingType: bindingType });
	    }
	    return {
	        // will bet set by the view definition
	        nodeIndex: -1,
	        parent: null,
	        renderParent: null,
	        bindingIndex: -1,
	        outputIndex: -1,
	        // regular values
	        // TODO(vicb): check
	        checkIndex: -1,
	        flags: flags,
	        childFlags: 0,
	        directChildFlags: 0,
	        childMatchedQueries: 0,
	        ngContentIndex: -1,
	        matchedQueries: {},
	        matchedQueryIds: 0,
	        references: {},
	        childCount: 0,
	        bindings: [],
	        bindingFlags: 0,
	        outputs: [],
	        element: null,
	        provider: null,
	        text: null,
	        query: { id: id, filterId: filterQueryId(id), bindings: bindingDefs },
	        ngContent: null
	    };
	}
	function createQuery() {
	    return new QueryList();
	}
	function dirtyParentQueries(view) {
	    var queryIds = view.def.nodeMatchedQueries;
	    while (view.parent && isEmbeddedView(view)) {
	        var tplDef = view.parentNodeDef;
	        view = view.parent;
	        // content queries
	        var end = tplDef.nodeIndex + tplDef.childCount;
	        for (var i = 0; i <= end; i++) {
	            var nodeDef = view.def.nodes[i];
	            if ((nodeDef.flags & 67108864 /* TypeContentQuery */) &&
	                (nodeDef.flags & 536870912 /* DynamicQuery */) &&
	                (nodeDef.query.filterId & queryIds) === nodeDef.query.filterId) {
	                asQueryList(view, i).setDirty();
	            }
	            if ((nodeDef.flags & 1 /* TypeElement */ && i + nodeDef.childCount < tplDef.nodeIndex) ||
	                !(nodeDef.childFlags & 67108864 /* TypeContentQuery */) ||
	                !(nodeDef.childFlags & 536870912 /* DynamicQuery */)) {
	                // skip elements that don't contain the template element or no query.
	                i += nodeDef.childCount;
	            }
	        }
	    }
	    // view queries
	    if (view.def.nodeFlags & 134217728 /* TypeViewQuery */) {
	        for (var i = 0; i < view.def.nodes.length; i++) {
	            var nodeDef = view.def.nodes[i];
	            if ((nodeDef.flags & 134217728 /* TypeViewQuery */) && (nodeDef.flags & 536870912 /* DynamicQuery */)) {
	                asQueryList(view, i).setDirty();
	            }
	            // only visit the root nodes
	            i += nodeDef.childCount;
	        }
	    }
	}
	function checkAndUpdateQuery(view, nodeDef) {
	    var queryList = asQueryList(view, nodeDef.nodeIndex);
	    if (!queryList.dirty) {
	        return;
	    }
	    var directiveInstance;
	    var newValues = undefined;
	    if (nodeDef.flags & 67108864 /* TypeContentQuery */) {
	        var elementDef = nodeDef.parent.parent;
	        newValues = calcQueryValues(view, elementDef.nodeIndex, elementDef.nodeIndex + elementDef.childCount, nodeDef.query, []);
	        directiveInstance = asProviderData(view, nodeDef.parent.nodeIndex).instance;
	    }
	    else if (nodeDef.flags & 134217728 /* TypeViewQuery */) {
	        newValues = calcQueryValues(view, 0, view.def.nodes.length - 1, nodeDef.query, []);
	        directiveInstance = view.component;
	    }
	    queryList.reset(newValues);
	    var bindings = nodeDef.query.bindings;
	    var notify = false;
	    for (var i = 0; i < bindings.length; i++) {
	        var binding = bindings[i];
	        var boundValue = void 0;
	        switch (binding.bindingType) {
	            case 0 /* First */:
	                boundValue = queryList.first;
	                break;
	            case 1 /* All */:
	                boundValue = queryList;
	                notify = true;
	                break;
	        }
	        directiveInstance[binding.propName] = boundValue;
	    }
	    if (notify) {
	        queryList.notifyOnChanges();
	    }
	}
	function calcQueryValues(view, startIndex, endIndex, queryDef, values) {
	    for (var i = startIndex; i <= endIndex; i++) {
	        var nodeDef = view.def.nodes[i];
	        var valueType = nodeDef.matchedQueries[queryDef.id];
	        if (valueType != null) {
	            values.push(getQueryValue(view, nodeDef, valueType));
	        }
	        if (nodeDef.flags & 1 /* TypeElement */ && nodeDef.element.template &&
	            (nodeDef.element.template.nodeMatchedQueries & queryDef.filterId) ===
	                queryDef.filterId) {
	            var elementData = asElementData(view, i);
	            // check embedded views that were attached at the place of their template,
	            // but process child nodes first if some match the query (see issue #16568)
	            if ((nodeDef.childMatchedQueries & queryDef.filterId) === queryDef.filterId) {
	                calcQueryValues(view, i + 1, i + nodeDef.childCount, queryDef, values);
	                i += nodeDef.childCount;
	            }
	            if (nodeDef.flags & 16777216 /* EmbeddedViews */) {
	                var embeddedViews = elementData.viewContainer._embeddedViews;
	                for (var k = 0; k < embeddedViews.length; k++) {
	                    var embeddedView = embeddedViews[k];
	                    var dvc = declaredViewContainer(embeddedView);
	                    if (dvc && dvc === elementData) {
	                        calcQueryValues(embeddedView, 0, embeddedView.def.nodes.length - 1, queryDef, values);
	                    }
	                }
	            }
	            var projectedViews = elementData.template._projectedViews;
	            if (projectedViews) {
	                for (var k = 0; k < projectedViews.length; k++) {
	                    var projectedView = projectedViews[k];
	                    calcQueryValues(projectedView, 0, projectedView.def.nodes.length - 1, queryDef, values);
	                }
	            }
	        }
	        if ((nodeDef.childMatchedQueries & queryDef.filterId) !== queryDef.filterId) {
	            // if no child matches the query, skip the children.
	            i += nodeDef.childCount;
	        }
	    }
	    return values;
	}
	function getQueryValue(view, nodeDef, queryValueType) {
	    if (queryValueType != null) {
	        // a match
	        switch (queryValueType) {
	            case 1 /* RenderElement */:
	                return asElementData(view, nodeDef.nodeIndex).renderElement;
	            case 0 /* ElementRef */:
	                return new ElementRef(asElementData(view, nodeDef.nodeIndex).renderElement);
	            case 2 /* TemplateRef */:
	                return asElementData(view, nodeDef.nodeIndex).template;
	            case 3 /* ViewContainerRef */:
	                return asElementData(view, nodeDef.nodeIndex).viewContainer;
	            case 4 /* Provider */:
	                return asProviderData(view, nodeDef.nodeIndex).instance;
	        }
	    }
	}

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	function ngContentDef(ngContentIndex, index) {
	    return {
	        // will bet set by the view definition
	        nodeIndex: -1,
	        parent: null,
	        renderParent: null,
	        bindingIndex: -1,
	        outputIndex: -1,
	        // regular values
	        checkIndex: -1,
	        flags: 8 /* TypeNgContent */,
	        childFlags: 0,
	        directChildFlags: 0,
	        childMatchedQueries: 0,
	        matchedQueries: {},
	        matchedQueryIds: 0,
	        references: {},
	        ngContentIndex: ngContentIndex,
	        childCount: 0,
	        bindings: [],
	        bindingFlags: 0,
	        outputs: [],
	        element: null,
	        provider: null,
	        text: null,
	        query: null,
	        ngContent: { index: index }
	    };
	}
	function appendNgContent(view, renderHost, def) {
	    var parentEl = getParentRenderElement(view, renderHost, def);
	    if (!parentEl) {
	        // Nothing to do if there is no parent element.
	        return;
	    }
	    var ngContentIndex = def.ngContent.index;
	    visitProjectedRenderNodes(view, ngContentIndex, 1 /* AppendChild */, parentEl, null, undefined);
	}

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	function purePipeDef(checkIndex, argCount) {
	    // argCount + 1 to include the pipe as first arg
	    return _pureExpressionDef(128 /* TypePurePipe */, checkIndex, newArray$1(argCount + 1));
	}
	function pureArrayDef(checkIndex, argCount) {
	    return _pureExpressionDef(32 /* TypePureArray */, checkIndex, newArray$1(argCount));
	}
	function pureObjectDef(checkIndex, propToIndex) {
	    var keys = Object.keys(propToIndex);
	    var nbKeys = keys.length;
	    var propertyNames = [];
	    for (var i = 0; i < nbKeys; i++) {
	        var key = keys[i];
	        var index = propToIndex[key];
	        propertyNames.push(key);
	    }
	    return _pureExpressionDef(64 /* TypePureObject */, checkIndex, propertyNames);
	}
	function _pureExpressionDef(flags, checkIndex, propertyNames) {
	    var bindings = [];
	    for (var i = 0; i < propertyNames.length; i++) {
	        var prop = propertyNames[i];
	        bindings.push({
	            flags: 8 /* TypeProperty */,
	            name: prop,
	            ns: null,
	            nonMinifiedName: prop,
	            securityContext: null,
	            suffix: null
	        });
	    }
	    return {
	        // will bet set by the view definition
	        nodeIndex: -1,
	        parent: null,
	        renderParent: null,
	        bindingIndex: -1,
	        outputIndex: -1,
	        // regular values
	        checkIndex: checkIndex,
	        flags: flags,
	        childFlags: 0,
	        directChildFlags: 0,
	        childMatchedQueries: 0,
	        matchedQueries: {},
	        matchedQueryIds: 0,
	        references: {},
	        ngContentIndex: -1,
	        childCount: 0,
	        bindings: bindings,
	        bindingFlags: calcBindingFlags(bindings),
	        outputs: [],
	        element: null,
	        provider: null,
	        text: null,
	        query: null,
	        ngContent: null
	    };
	}
	function createPureExpression(view, def) {
	    return { value: undefined };
	}
	function checkAndUpdatePureExpressionInline(view, def, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9) {
	    var bindings = def.bindings;
	    var changed = false;
	    var bindLen = bindings.length;
	    if (bindLen > 0 && checkAndUpdateBinding(view, def, 0, v0))
	        changed = true;
	    if (bindLen > 1 && checkAndUpdateBinding(view, def, 1, v1))
	        changed = true;
	    if (bindLen > 2 && checkAndUpdateBinding(view, def, 2, v2))
	        changed = true;
	    if (bindLen > 3 && checkAndUpdateBinding(view, def, 3, v3))
	        changed = true;
	    if (bindLen > 4 && checkAndUpdateBinding(view, def, 4, v4))
	        changed = true;
	    if (bindLen > 5 && checkAndUpdateBinding(view, def, 5, v5))
	        changed = true;
	    if (bindLen > 6 && checkAndUpdateBinding(view, def, 6, v6))
	        changed = true;
	    if (bindLen > 7 && checkAndUpdateBinding(view, def, 7, v7))
	        changed = true;
	    if (bindLen > 8 && checkAndUpdateBinding(view, def, 8, v8))
	        changed = true;
	    if (bindLen > 9 && checkAndUpdateBinding(view, def, 9, v9))
	        changed = true;
	    if (changed) {
	        var data = asPureExpressionData(view, def.nodeIndex);
	        var value = void 0;
	        switch (def.flags & 201347067 /* Types */) {
	            case 32 /* TypePureArray */:
	                value = [];
	                if (bindLen > 0)
	                    value.push(v0);
	                if (bindLen > 1)
	                    value.push(v1);
	                if (bindLen > 2)
	                    value.push(v2);
	                if (bindLen > 3)
	                    value.push(v3);
	                if (bindLen > 4)
	                    value.push(v4);
	                if (bindLen > 5)
	                    value.push(v5);
	                if (bindLen > 6)
	                    value.push(v6);
	                if (bindLen > 7)
	                    value.push(v7);
	                if (bindLen > 8)
	                    value.push(v8);
	                if (bindLen > 9)
	                    value.push(v9);
	                break;
	            case 64 /* TypePureObject */:
	                value = {};
	                if (bindLen > 0)
	                    value[bindings[0].name] = v0;
	                if (bindLen > 1)
	                    value[bindings[1].name] = v1;
	                if (bindLen > 2)
	                    value[bindings[2].name] = v2;
	                if (bindLen > 3)
	                    value[bindings[3].name] = v3;
	                if (bindLen > 4)
	                    value[bindings[4].name] = v4;
	                if (bindLen > 5)
	                    value[bindings[5].name] = v5;
	                if (bindLen > 6)
	                    value[bindings[6].name] = v6;
	                if (bindLen > 7)
	                    value[bindings[7].name] = v7;
	                if (bindLen > 8)
	                    value[bindings[8].name] = v8;
	                if (bindLen > 9)
	                    value[bindings[9].name] = v9;
	                break;
	            case 128 /* TypePurePipe */:
	                var pipe = v0;
	                switch (bindLen) {
	                    case 1:
	                        value = pipe.transform(v0);
	                        break;
	                    case 2:
	                        value = pipe.transform(v1);
	                        break;
	                    case 3:
	                        value = pipe.transform(v1, v2);
	                        break;
	                    case 4:
	                        value = pipe.transform(v1, v2, v3);
	                        break;
	                    case 5:
	                        value = pipe.transform(v1, v2, v3, v4);
	                        break;
	                    case 6:
	                        value = pipe.transform(v1, v2, v3, v4, v5);
	                        break;
	                    case 7:
	                        value = pipe.transform(v1, v2, v3, v4, v5, v6);
	                        break;
	                    case 8:
	                        value = pipe.transform(v1, v2, v3, v4, v5, v6, v7);
	                        break;
	                    case 9:
	                        value = pipe.transform(v1, v2, v3, v4, v5, v6, v7, v8);
	                        break;
	                    case 10:
	                        value = pipe.transform(v1, v2, v3, v4, v5, v6, v7, v8, v9);
	                        break;
	                }
	                break;
	        }
	        data.value = value;
	    }
	    return changed;
	}
	function checkAndUpdatePureExpressionDynamic(view, def, values) {
	    var bindings = def.bindings;
	    var changed = false;
	    for (var i = 0; i < values.length; i++) {
	        // Note: We need to loop over all values, so that
	        // the old values are updates as well!
	        if (checkAndUpdateBinding(view, def, i, values[i])) {
	            changed = true;
	        }
	    }
	    if (changed) {
	        var data = asPureExpressionData(view, def.nodeIndex);
	        var value = void 0;
	        switch (def.flags & 201347067 /* Types */) {
	            case 32 /* TypePureArray */:
	                value = values;
	                break;
	            case 64 /* TypePureObject */:
	                value = {};
	                for (var i = 0; i < values.length; i++) {
	                    value[bindings[i].name] = values[i];
	                }
	                break;
	            case 128 /* TypePurePipe */:
	                var pipe = values[0];
	                var params = values.slice(1);
	                value = pipe.transform.apply(pipe, __spread(params));
	                break;
	        }
	        data.value = value;
	    }
	    return changed;
	}

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	function textDef(checkIndex, ngContentIndex, staticText) {
	    var bindings = [];
	    for (var i = 1; i < staticText.length; i++) {
	        bindings[i - 1] = {
	            flags: 8 /* TypeProperty */,
	            name: null,
	            ns: null,
	            nonMinifiedName: null,
	            securityContext: null,
	            suffix: staticText[i],
	        };
	    }
	    return {
	        // will bet set by the view definition
	        nodeIndex: -1,
	        parent: null,
	        renderParent: null,
	        bindingIndex: -1,
	        outputIndex: -1,
	        // regular values
	        checkIndex: checkIndex,
	        flags: 2 /* TypeText */,
	        childFlags: 0,
	        directChildFlags: 0,
	        childMatchedQueries: 0,
	        matchedQueries: {},
	        matchedQueryIds: 0,
	        references: {},
	        ngContentIndex: ngContentIndex,
	        childCount: 0,
	        bindings: bindings,
	        bindingFlags: 8 /* TypeProperty */,
	        outputs: [],
	        element: null,
	        provider: null,
	        text: { prefix: staticText[0] },
	        query: null,
	        ngContent: null,
	    };
	}
	function createText(view, renderHost, def) {
	    var renderNode;
	    var renderer = view.renderer;
	    renderNode = renderer.createText(def.text.prefix);
	    var parentEl = getParentRenderElement(view, renderHost, def);
	    if (parentEl) {
	        renderer.appendChild(parentEl, renderNode);
	    }
	    return { renderText: renderNode };
	}
	function checkAndUpdateTextInline(view, def, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9) {
	    var changed = false;
	    var bindings = def.bindings;
	    var bindLen = bindings.length;
	    if (bindLen > 0 && checkAndUpdateBinding(view, def, 0, v0))
	        changed = true;
	    if (bindLen > 1 && checkAndUpdateBinding(view, def, 1, v1))
	        changed = true;
	    if (bindLen > 2 && checkAndUpdateBinding(view, def, 2, v2))
	        changed = true;
	    if (bindLen > 3 && checkAndUpdateBinding(view, def, 3, v3))
	        changed = true;
	    if (bindLen > 4 && checkAndUpdateBinding(view, def, 4, v4))
	        changed = true;
	    if (bindLen > 5 && checkAndUpdateBinding(view, def, 5, v5))
	        changed = true;
	    if (bindLen > 6 && checkAndUpdateBinding(view, def, 6, v6))
	        changed = true;
	    if (bindLen > 7 && checkAndUpdateBinding(view, def, 7, v7))
	        changed = true;
	    if (bindLen > 8 && checkAndUpdateBinding(view, def, 8, v8))
	        changed = true;
	    if (bindLen > 9 && checkAndUpdateBinding(view, def, 9, v9))
	        changed = true;
	    if (changed) {
	        var value = def.text.prefix;
	        if (bindLen > 0)
	            value += _addInterpolationPart(v0, bindings[0]);
	        if (bindLen > 1)
	            value += _addInterpolationPart(v1, bindings[1]);
	        if (bindLen > 2)
	            value += _addInterpolationPart(v2, bindings[2]);
	        if (bindLen > 3)
	            value += _addInterpolationPart(v3, bindings[3]);
	        if (bindLen > 4)
	            value += _addInterpolationPart(v4, bindings[4]);
	        if (bindLen > 5)
	            value += _addInterpolationPart(v5, bindings[5]);
	        if (bindLen > 6)
	            value += _addInterpolationPart(v6, bindings[6]);
	        if (bindLen > 7)
	            value += _addInterpolationPart(v7, bindings[7]);
	        if (bindLen > 8)
	            value += _addInterpolationPart(v8, bindings[8]);
	        if (bindLen > 9)
	            value += _addInterpolationPart(v9, bindings[9]);
	        var renderNode = asTextData(view, def.nodeIndex).renderText;
	        view.renderer.setValue(renderNode, value);
	    }
	    return changed;
	}
	function checkAndUpdateTextDynamic(view, def, values) {
	    var bindings = def.bindings;
	    var changed = false;
	    for (var i = 0; i < values.length; i++) {
	        // Note: We need to loop over all values, so that
	        // the old values are updates as well!
	        if (checkAndUpdateBinding(view, def, i, values[i])) {
	            changed = true;
	        }
	    }
	    if (changed) {
	        var value = '';
	        for (var i = 0; i < values.length; i++) {
	            value = value + _addInterpolationPart(values[i], bindings[i]);
	        }
	        value = def.text.prefix + value;
	        var renderNode = asTextData(view, def.nodeIndex).renderText;
	        view.renderer.setValue(renderNode, value);
	    }
	    return changed;
	}
	function _addInterpolationPart(value, binding) {
	    var valueStr = value != null ? value.toString() : '';
	    return valueStr + binding.suffix;
	}

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	function viewDef(flags, nodes, updateDirectives, updateRenderer) {
	    // clone nodes and set auto calculated values
	    var viewBindingCount = 0;
	    var viewDisposableCount = 0;
	    var viewNodeFlags = 0;
	    var viewRootNodeFlags = 0;
	    var viewMatchedQueries = 0;
	    var currentParent = null;
	    var currentRenderParent = null;
	    var currentElementHasPublicProviders = false;
	    var currentElementHasPrivateProviders = false;
	    var lastRenderRootNode = null;
	    for (var i = 0; i < nodes.length; i++) {
	        var node = nodes[i];
	        node.nodeIndex = i;
	        node.parent = currentParent;
	        node.bindingIndex = viewBindingCount;
	        node.outputIndex = viewDisposableCount;
	        node.renderParent = currentRenderParent;
	        viewNodeFlags |= node.flags;
	        viewMatchedQueries |= node.matchedQueryIds;
	        if (node.element) {
	            var elDef = node.element;
	            elDef.publicProviders =
	                currentParent ? currentParent.element.publicProviders : Object.create(null);
	            elDef.allProviders = elDef.publicProviders;
	            // Note: We assume that all providers of an element are before any child element!
	            currentElementHasPublicProviders = false;
	            currentElementHasPrivateProviders = false;
	            if (node.element.template) {
	                viewMatchedQueries |= node.element.template.nodeMatchedQueries;
	            }
	        }
	        validateNode(currentParent, node, nodes.length);
	        viewBindingCount += node.bindings.length;
	        viewDisposableCount += node.outputs.length;
	        if (!currentRenderParent && (node.flags & 3 /* CatRenderNode */)) {
	            lastRenderRootNode = node;
	        }
	        if (node.flags & 20224 /* CatProvider */) {
	            if (!currentElementHasPublicProviders) {
	                currentElementHasPublicProviders = true;
	                // Use prototypical inheritance to not get O(n^2) complexity...
	                currentParent.element.publicProviders =
	                    Object.create(currentParent.element.publicProviders);
	                currentParent.element.allProviders = currentParent.element.publicProviders;
	            }
	            var isPrivateService = (node.flags & 8192 /* PrivateProvider */) !== 0;
	            var isComponent = (node.flags & 32768 /* Component */) !== 0;
	            if (!isPrivateService || isComponent) {
	                currentParent.element.publicProviders[tokenKey(node.provider.token)] = node;
	            }
	            else {
	                if (!currentElementHasPrivateProviders) {
	                    currentElementHasPrivateProviders = true;
	                    // Use prototypical inheritance to not get O(n^2) complexity...
	                    currentParent.element.allProviders =
	                        Object.create(currentParent.element.publicProviders);
	                }
	                currentParent.element.allProviders[tokenKey(node.provider.token)] = node;
	            }
	            if (isComponent) {
	                currentParent.element.componentProvider = node;
	            }
	        }
	        if (currentParent) {
	            currentParent.childFlags |= node.flags;
	            currentParent.directChildFlags |= node.flags;
	            currentParent.childMatchedQueries |= node.matchedQueryIds;
	            if (node.element && node.element.template) {
	                currentParent.childMatchedQueries |= node.element.template.nodeMatchedQueries;
	            }
	        }
	        else {
	            viewRootNodeFlags |= node.flags;
	        }
	        if (node.childCount > 0) {
	            currentParent = node;
	            if (!isNgContainer$1(node)) {
	                currentRenderParent = node;
	            }
	        }
	        else {
	            // When the current node has no children, check if it is the last children of its parent.
	            // When it is, propagate the flags up.
	            // The loop is required because an element could be the last transitive children of several
	            // elements. We loop to either the root or the highest opened element (= with remaining
	            // children)
	            while (currentParent && i === currentParent.nodeIndex + currentParent.childCount) {
	                var newParent = currentParent.parent;
	                if (newParent) {
	                    newParent.childFlags |= currentParent.childFlags;
	                    newParent.childMatchedQueries |= currentParent.childMatchedQueries;
	                }
	                currentParent = newParent;
	                // We also need to update the render parent & account for ng-container
	                if (currentParent && isNgContainer$1(currentParent)) {
	                    currentRenderParent = currentParent.renderParent;
	                }
	                else {
	                    currentRenderParent = currentParent;
	                }
	            }
	        }
	    }
	    var handleEvent = function (view, nodeIndex, eventName, event) {
	        return nodes[nodeIndex].element.handleEvent(view, eventName, event);
	    };
	    return {
	        // Will be filled later...
	        factory: null,
	        nodeFlags: viewNodeFlags,
	        rootNodeFlags: viewRootNodeFlags,
	        nodeMatchedQueries: viewMatchedQueries,
	        flags: flags,
	        nodes: nodes,
	        updateDirectives: updateDirectives || NOOP,
	        updateRenderer: updateRenderer || NOOP,
	        handleEvent: handleEvent,
	        bindingCount: viewBindingCount,
	        outputCount: viewDisposableCount,
	        lastRenderRootNode: lastRenderRootNode
	    };
	}
	function isNgContainer$1(node) {
	    return (node.flags & 1 /* TypeElement */) !== 0 && node.element.name === null;
	}
	function validateNode(parent, node, nodeCount) {
	    var template = node.element && node.element.template;
	    if (template) {
	        if (!template.lastRenderRootNode) {
	            throw new Error("Illegal State: Embedded templates without nodes are not allowed!");
	        }
	        if (template.lastRenderRootNode &&
	            template.lastRenderRootNode.flags & 16777216 /* EmbeddedViews */) {
	            throw new Error("Illegal State: Last root node of a template can't have embedded views, at index " + node.nodeIndex + "!");
	        }
	    }
	    if (node.flags & 20224 /* CatProvider */) {
	        var parentFlags = parent ? parent.flags : 0;
	        if ((parentFlags & 1 /* TypeElement */) === 0) {
	            throw new Error("Illegal State: StaticProvider/Directive nodes need to be children of elements or anchors, at index " + node.nodeIndex + "!");
	        }
	    }
	    if (node.query) {
	        if (node.flags & 67108864 /* TypeContentQuery */ &&
	            (!parent || (parent.flags & 16384 /* TypeDirective */) === 0)) {
	            throw new Error("Illegal State: Content Query nodes need to be children of directives, at index " + node.nodeIndex + "!");
	        }
	        if (node.flags & 134217728 /* TypeViewQuery */ && parent) {
	            throw new Error("Illegal State: View Query nodes have to be top level nodes, at index " + node.nodeIndex + "!");
	        }
	    }
	    if (node.childCount) {
	        var parentEnd = parent ? parent.nodeIndex + parent.childCount : nodeCount - 1;
	        if (node.nodeIndex <= parentEnd && node.nodeIndex + node.childCount > parentEnd) {
	            throw new Error("Illegal State: childCount of node leads outside of parent, at index " + node.nodeIndex + "!");
	        }
	    }
	}
	function createEmbeddedView(parent, anchorDef, viewDef, context) {
	    // embedded views are seen as siblings to the anchor, so we need
	    // to get the parent of the anchor and use it as parentIndex.
	    var view = createView(parent.root, parent.renderer, parent, anchorDef, viewDef);
	    initView(view, parent.component, context);
	    createViewNodes(view);
	    return view;
	}
	function createRootView(root, def, context) {
	    var view = createView(root, root.renderer, null, null, def);
	    initView(view, context, context);
	    createViewNodes(view);
	    return view;
	}
	function createComponentView(parentView, nodeDef, viewDef, hostElement) {
	    var rendererType = nodeDef.element.componentRendererType;
	    var compRenderer;
	    if (!rendererType) {
	        compRenderer = parentView.root.renderer;
	    }
	    else {
	        compRenderer = parentView.root.rendererFactory.createRenderer(hostElement, rendererType);
	    }
	    return createView(parentView.root, compRenderer, parentView, nodeDef.element.componentProvider, viewDef);
	}
	function createView(root, renderer, parent, parentNodeDef, def) {
	    var nodes = new Array(def.nodes.length);
	    var disposables = def.outputCount ? new Array(def.outputCount) : null;
	    var view = {
	        def: def,
	        parent: parent,
	        viewContainerParent: null,
	        parentNodeDef: parentNodeDef,
	        context: null,
	        component: null,
	        nodes: nodes,
	        state: 13 /* CatInit */,
	        root: root,
	        renderer: renderer,
	        oldValues: new Array(def.bindingCount),
	        disposables: disposables,
	        initIndex: -1
	    };
	    return view;
	}
	function initView(view, component, context) {
	    view.component = component;
	    view.context = context;
	}
	function createViewNodes(view) {
	    var renderHost;
	    if (isComponentView(view)) {
	        var hostDef = view.parentNodeDef;
	        renderHost = asElementData(view.parent, hostDef.parent.nodeIndex).renderElement;
	    }
	    var def = view.def;
	    var nodes = view.nodes;
	    for (var i = 0; i < def.nodes.length; i++) {
	        var nodeDef = def.nodes[i];
	        Services.setCurrentNode(view, i);
	        var nodeData = void 0;
	        switch (nodeDef.flags & 201347067 /* Types */) {
	            case 1 /* TypeElement */:
	                var el = createElement(view, renderHost, nodeDef);
	                var componentView = undefined;
	                if (nodeDef.flags & 33554432 /* ComponentView */) {
	                    var compViewDef = resolveDefinition(nodeDef.element.componentView);
	                    componentView = Services.createComponentView(view, nodeDef, compViewDef, el);
	                }
	                listenToElementOutputs(view, componentView, nodeDef, el);
	                nodeData = {
	                    renderElement: el,
	                    componentView: componentView,
	                    viewContainer: null,
	                    template: nodeDef.element.template ? createTemplateData(view, nodeDef) : undefined
	                };
	                if (nodeDef.flags & 16777216 /* EmbeddedViews */) {
	                    nodeData.viewContainer = createViewContainerData(view, nodeDef, nodeData);
	                }
	                break;
	            case 2 /* TypeText */:
	                nodeData = createText(view, renderHost, nodeDef);
	                break;
	            case 512 /* TypeClassProvider */:
	            case 1024 /* TypeFactoryProvider */:
	            case 2048 /* TypeUseExistingProvider */:
	            case 256 /* TypeValueProvider */: {
	                nodeData = nodes[i];
	                if (!nodeData && !(nodeDef.flags & 4096 /* LazyProvider */)) {
	                    var instance = createProviderInstance(view, nodeDef);
	                    nodeData = { instance: instance };
	                }
	                break;
	            }
	            case 16 /* TypePipe */: {
	                var instance = createPipeInstance(view, nodeDef);
	                nodeData = { instance: instance };
	                break;
	            }
	            case 16384 /* TypeDirective */: {
	                nodeData = nodes[i];
	                if (!nodeData) {
	                    var instance = createDirectiveInstance(view, nodeDef);
	                    nodeData = { instance: instance };
	                }
	                if (nodeDef.flags & 32768 /* Component */) {
	                    var compView = asElementData(view, nodeDef.parent.nodeIndex).componentView;
	                    initView(compView, nodeData.instance, nodeData.instance);
	                }
	                break;
	            }
	            case 32 /* TypePureArray */:
	            case 64 /* TypePureObject */:
	            case 128 /* TypePurePipe */:
	                nodeData = createPureExpression();
	                break;
	            case 67108864 /* TypeContentQuery */:
	            case 134217728 /* TypeViewQuery */:
	                nodeData = createQuery();
	                break;
	            case 8 /* TypeNgContent */:
	                appendNgContent(view, renderHost, nodeDef);
	                // no runtime data needed for NgContent...
	                nodeData = undefined;
	                break;
	        }
	        nodes[i] = nodeData;
	    }
	    // Create the ViewData.nodes of component views after we created everything else,
	    // so that e.g. ng-content works
	    execComponentViewsAction(view, ViewAction.CreateViewNodes);
	    // fill static content and view queries
	    execQueriesAction(view, 67108864 /* TypeContentQuery */ | 134217728 /* TypeViewQuery */, 268435456 /* StaticQuery */, 0 /* CheckAndUpdate */);
	}
	function checkNoChangesView(view) {
	    markProjectedViewsForCheck(view);
	    Services.updateDirectives(view, 1 /* CheckNoChanges */);
	    execEmbeddedViewsAction(view, ViewAction.CheckNoChanges);
	    Services.updateRenderer(view, 1 /* CheckNoChanges */);
	    execComponentViewsAction(view, ViewAction.CheckNoChanges);
	    // Note: We don't check queries for changes as we didn't do this in v2.x.
	    // TODO(tbosch): investigate if we can enable the check again in v5.x with a nicer error message.
	    view.state &= ~(64 /* CheckProjectedViews */ | 32 /* CheckProjectedView */);
	}
	function checkAndUpdateView(view) {
	    if (view.state & 1 /* BeforeFirstCheck */) {
	        view.state &= ~1 /* BeforeFirstCheck */;
	        view.state |= 2 /* FirstCheck */;
	    }
	    else {
	        view.state &= ~2 /* FirstCheck */;
	    }
	    shiftInitState(view, 0 /* InitState_BeforeInit */, 256 /* InitState_CallingOnInit */);
	    markProjectedViewsForCheck(view);
	    Services.updateDirectives(view, 0 /* CheckAndUpdate */);
	    execEmbeddedViewsAction(view, ViewAction.CheckAndUpdate);
	    execQueriesAction(view, 67108864 /* TypeContentQuery */, 536870912 /* DynamicQuery */, 0 /* CheckAndUpdate */);
	    var callInit = shiftInitState(view, 256 /* InitState_CallingOnInit */, 512 /* InitState_CallingAfterContentInit */);
	    callLifecycleHooksChildrenFirst(view, 2097152 /* AfterContentChecked */ | (callInit ? 1048576 /* AfterContentInit */ : 0));
	    Services.updateRenderer(view, 0 /* CheckAndUpdate */);
	    execComponentViewsAction(view, ViewAction.CheckAndUpdate);
	    execQueriesAction(view, 134217728 /* TypeViewQuery */, 536870912 /* DynamicQuery */, 0 /* CheckAndUpdate */);
	    callInit = shiftInitState(view, 512 /* InitState_CallingAfterContentInit */, 768 /* InitState_CallingAfterViewInit */);
	    callLifecycleHooksChildrenFirst(view, 8388608 /* AfterViewChecked */ | (callInit ? 4194304 /* AfterViewInit */ : 0));
	    if (view.def.flags & 2 /* OnPush */) {
	        view.state &= ~8 /* ChecksEnabled */;
	    }
	    view.state &= ~(64 /* CheckProjectedViews */ | 32 /* CheckProjectedView */);
	    shiftInitState(view, 768 /* InitState_CallingAfterViewInit */, 1024 /* InitState_AfterInit */);
	}
	function checkAndUpdateNode(view, nodeDef, argStyle, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9) {
	    if (argStyle === 0 /* Inline */) {
	        return checkAndUpdateNodeInline(view, nodeDef, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9);
	    }
	    else {
	        return checkAndUpdateNodeDynamic(view, nodeDef, v0);
	    }
	}
	function markProjectedViewsForCheck(view) {
	    var def = view.def;
	    if (!(def.nodeFlags & 4 /* ProjectedTemplate */)) {
	        return;
	    }
	    for (var i = 0; i < def.nodes.length; i++) {
	        var nodeDef = def.nodes[i];
	        if (nodeDef.flags & 4 /* ProjectedTemplate */) {
	            var projectedViews = asElementData(view, i).template._projectedViews;
	            if (projectedViews) {
	                for (var i_1 = 0; i_1 < projectedViews.length; i_1++) {
	                    var projectedView = projectedViews[i_1];
	                    projectedView.state |= 32 /* CheckProjectedView */;
	                    markParentViewsForCheckProjectedViews(projectedView, view);
	                }
	            }
	        }
	        else if ((nodeDef.childFlags & 4 /* ProjectedTemplate */) === 0) {
	            // a parent with leafs
	            // no child is a component,
	            // then skip the children
	            i += nodeDef.childCount;
	        }
	    }
	}
	function checkAndUpdateNodeInline(view, nodeDef, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9) {
	    switch (nodeDef.flags & 201347067 /* Types */) {
	        case 1 /* TypeElement */:
	            return checkAndUpdateElementInline(view, nodeDef, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9);
	        case 2 /* TypeText */:
	            return checkAndUpdateTextInline(view, nodeDef, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9);
	        case 16384 /* TypeDirective */:
	            return checkAndUpdateDirectiveInline(view, nodeDef, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9);
	        case 32 /* TypePureArray */:
	        case 64 /* TypePureObject */:
	        case 128 /* TypePurePipe */:
	            return checkAndUpdatePureExpressionInline(view, nodeDef, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9);
	        default:
	            throw 'unreachable';
	    }
	}
	function checkAndUpdateNodeDynamic(view, nodeDef, values) {
	    switch (nodeDef.flags & 201347067 /* Types */) {
	        case 1 /* TypeElement */:
	            return checkAndUpdateElementDynamic(view, nodeDef, values);
	        case 2 /* TypeText */:
	            return checkAndUpdateTextDynamic(view, nodeDef, values);
	        case 16384 /* TypeDirective */:
	            return checkAndUpdateDirectiveDynamic(view, nodeDef, values);
	        case 32 /* TypePureArray */:
	        case 64 /* TypePureObject */:
	        case 128 /* TypePurePipe */:
	            return checkAndUpdatePureExpressionDynamic(view, nodeDef, values);
	        default:
	            throw 'unreachable';
	    }
	}
	function checkNoChangesNode(view, nodeDef, argStyle, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9) {
	    if (argStyle === 0 /* Inline */) {
	        checkNoChangesNodeInline(view, nodeDef, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9);
	    }
	    else {
	        checkNoChangesNodeDynamic(view, nodeDef, v0);
	    }
	    // Returning false is ok here as we would have thrown in case of a change.
	    return false;
	}
	function checkNoChangesNodeInline(view, nodeDef, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9) {
	    var bindLen = nodeDef.bindings.length;
	    if (bindLen > 0)
	        checkBindingNoChanges(view, nodeDef, 0, v0);
	    if (bindLen > 1)
	        checkBindingNoChanges(view, nodeDef, 1, v1);
	    if (bindLen > 2)
	        checkBindingNoChanges(view, nodeDef, 2, v2);
	    if (bindLen > 3)
	        checkBindingNoChanges(view, nodeDef, 3, v3);
	    if (bindLen > 4)
	        checkBindingNoChanges(view, nodeDef, 4, v4);
	    if (bindLen > 5)
	        checkBindingNoChanges(view, nodeDef, 5, v5);
	    if (bindLen > 6)
	        checkBindingNoChanges(view, nodeDef, 6, v6);
	    if (bindLen > 7)
	        checkBindingNoChanges(view, nodeDef, 7, v7);
	    if (bindLen > 8)
	        checkBindingNoChanges(view, nodeDef, 8, v8);
	    if (bindLen > 9)
	        checkBindingNoChanges(view, nodeDef, 9, v9);
	}
	function checkNoChangesNodeDynamic(view, nodeDef, values) {
	    for (var i = 0; i < values.length; i++) {
	        checkBindingNoChanges(view, nodeDef, i, values[i]);
	    }
	}
	/**
	 * Workaround https://github.com/angular/tsickle/issues/497
	 * @suppress {misplacedTypeAnnotation}
	 */
	function checkNoChangesQuery(view, nodeDef) {
	    var queryList = asQueryList(view, nodeDef.nodeIndex);
	    if (queryList.dirty) {
	        throw expressionChangedAfterItHasBeenCheckedError(Services.createDebugContext(view, nodeDef.nodeIndex), "Query " + nodeDef.query.id + " not dirty", "Query " + nodeDef.query.id + " dirty", (view.state & 1 /* BeforeFirstCheck */) !== 0);
	    }
	}
	function destroyView(view) {
	    if (view.state & 128 /* Destroyed */) {
	        return;
	    }
	    execEmbeddedViewsAction(view, ViewAction.Destroy);
	    execComponentViewsAction(view, ViewAction.Destroy);
	    callLifecycleHooksChildrenFirst(view, 131072 /* OnDestroy */);
	    if (view.disposables) {
	        for (var i = 0; i < view.disposables.length; i++) {
	            view.disposables[i]();
	        }
	    }
	    detachProjectedView(view);
	    if (view.renderer.destroyNode) {
	        destroyViewNodes(view);
	    }
	    if (isComponentView(view)) {
	        view.renderer.destroy();
	    }
	    view.state |= 128 /* Destroyed */;
	}
	function destroyViewNodes(view) {
	    var len = view.def.nodes.length;
	    for (var i = 0; i < len; i++) {
	        var def = view.def.nodes[i];
	        if (def.flags & 1 /* TypeElement */) {
	            view.renderer.destroyNode(asElementData(view, i).renderElement);
	        }
	        else if (def.flags & 2 /* TypeText */) {
	            view.renderer.destroyNode(asTextData(view, i).renderText);
	        }
	        else if (def.flags & 67108864 /* TypeContentQuery */ || def.flags & 134217728 /* TypeViewQuery */) {
	            asQueryList(view, i).destroy();
	        }
	    }
	}
	var ViewAction;
	(function (ViewAction) {
	    ViewAction[ViewAction["CreateViewNodes"] = 0] = "CreateViewNodes";
	    ViewAction[ViewAction["CheckNoChanges"] = 1] = "CheckNoChanges";
	    ViewAction[ViewAction["CheckNoChangesProjectedViews"] = 2] = "CheckNoChangesProjectedViews";
	    ViewAction[ViewAction["CheckAndUpdate"] = 3] = "CheckAndUpdate";
	    ViewAction[ViewAction["CheckAndUpdateProjectedViews"] = 4] = "CheckAndUpdateProjectedViews";
	    ViewAction[ViewAction["Destroy"] = 5] = "Destroy";
	})(ViewAction || (ViewAction = {}));
	function execComponentViewsAction(view, action) {
	    var def = view.def;
	    if (!(def.nodeFlags & 33554432 /* ComponentView */)) {
	        return;
	    }
	    for (var i = 0; i < def.nodes.length; i++) {
	        var nodeDef = def.nodes[i];
	        if (nodeDef.flags & 33554432 /* ComponentView */) {
	            // a leaf
	            callViewAction(asElementData(view, i).componentView, action);
	        }
	        else if ((nodeDef.childFlags & 33554432 /* ComponentView */) === 0) {
	            // a parent with leafs
	            // no child is a component,
	            // then skip the children
	            i += nodeDef.childCount;
	        }
	    }
	}
	function execEmbeddedViewsAction(view, action) {
	    var def = view.def;
	    if (!(def.nodeFlags & 16777216 /* EmbeddedViews */)) {
	        return;
	    }
	    for (var i = 0; i < def.nodes.length; i++) {
	        var nodeDef = def.nodes[i];
	        if (nodeDef.flags & 16777216 /* EmbeddedViews */) {
	            // a leaf
	            var embeddedViews = asElementData(view, i).viewContainer._embeddedViews;
	            for (var k = 0; k < embeddedViews.length; k++) {
	                callViewAction(embeddedViews[k], action);
	            }
	        }
	        else if ((nodeDef.childFlags & 16777216 /* EmbeddedViews */) === 0) {
	            // a parent with leafs
	            // no child is a component,
	            // then skip the children
	            i += nodeDef.childCount;
	        }
	    }
	}
	function callViewAction(view, action) {
	    var viewState = view.state;
	    switch (action) {
	        case ViewAction.CheckNoChanges:
	            if ((viewState & 128 /* Destroyed */) === 0) {
	                if ((viewState & 12 /* CatDetectChanges */) === 12 /* CatDetectChanges */) {
	                    checkNoChangesView(view);
	                }
	                else if (viewState & 64 /* CheckProjectedViews */) {
	                    execProjectedViewsAction(view, ViewAction.CheckNoChangesProjectedViews);
	                }
	            }
	            break;
	        case ViewAction.CheckNoChangesProjectedViews:
	            if ((viewState & 128 /* Destroyed */) === 0) {
	                if (viewState & 32 /* CheckProjectedView */) {
	                    checkNoChangesView(view);
	                }
	                else if (viewState & 64 /* CheckProjectedViews */) {
	                    execProjectedViewsAction(view, action);
	                }
	            }
	            break;
	        case ViewAction.CheckAndUpdate:
	            if ((viewState & 128 /* Destroyed */) === 0) {
	                if ((viewState & 12 /* CatDetectChanges */) === 12 /* CatDetectChanges */) {
	                    checkAndUpdateView(view);
	                }
	                else if (viewState & 64 /* CheckProjectedViews */) {
	                    execProjectedViewsAction(view, ViewAction.CheckAndUpdateProjectedViews);
	                }
	            }
	            break;
	        case ViewAction.CheckAndUpdateProjectedViews:
	            if ((viewState & 128 /* Destroyed */) === 0) {
	                if (viewState & 32 /* CheckProjectedView */) {
	                    checkAndUpdateView(view);
	                }
	                else if (viewState & 64 /* CheckProjectedViews */) {
	                    execProjectedViewsAction(view, action);
	                }
	            }
	            break;
	        case ViewAction.Destroy:
	            // Note: destroyView recurses over all views,
	            // so we don't need to special case projected views here.
	            destroyView(view);
	            break;
	        case ViewAction.CreateViewNodes:
	            createViewNodes(view);
	            break;
	    }
	}
	function execProjectedViewsAction(view, action) {
	    execEmbeddedViewsAction(view, action);
	    execComponentViewsAction(view, action);
	}
	function execQueriesAction(view, queryFlags, staticDynamicQueryFlag, checkType) {
	    if (!(view.def.nodeFlags & queryFlags) || !(view.def.nodeFlags & staticDynamicQueryFlag)) {
	        return;
	    }
	    var nodeCount = view.def.nodes.length;
	    for (var i = 0; i < nodeCount; i++) {
	        var nodeDef = view.def.nodes[i];
	        if ((nodeDef.flags & queryFlags) && (nodeDef.flags & staticDynamicQueryFlag)) {
	            Services.setCurrentNode(view, nodeDef.nodeIndex);
	            switch (checkType) {
	                case 0 /* CheckAndUpdate */:
	                    checkAndUpdateQuery(view, nodeDef);
	                    break;
	                case 1 /* CheckNoChanges */:
	                    checkNoChangesQuery(view, nodeDef);
	                    break;
	            }
	        }
	        if (!(nodeDef.childFlags & queryFlags) || !(nodeDef.childFlags & staticDynamicQueryFlag)) {
	            // no child has a matching query
	            // then skip the children
	            i += nodeDef.childCount;
	        }
	    }
	}

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	var initialized = false;
	function initServicesIfNeeded() {
	    if (initialized) {
	        return;
	    }
	    initialized = true;
	    var services =  createDebugServices() ;
	    Services.setCurrentNode = services.setCurrentNode;
	    Services.createRootView = services.createRootView;
	    Services.createEmbeddedView = services.createEmbeddedView;
	    Services.createComponentView = services.createComponentView;
	    Services.createNgModuleRef = services.createNgModuleRef;
	    Services.overrideProvider = services.overrideProvider;
	    Services.overrideComponentView = services.overrideComponentView;
	    Services.clearOverrides = services.clearOverrides;
	    Services.checkAndUpdateView = services.checkAndUpdateView;
	    Services.checkNoChangesView = services.checkNoChangesView;
	    Services.destroyView = services.destroyView;
	    Services.resolveDep = resolveDep;
	    Services.createDebugContext = services.createDebugContext;
	    Services.handleEvent = services.handleEvent;
	    Services.updateDirectives = services.updateDirectives;
	    Services.updateRenderer = services.updateRenderer;
	    Services.dirtyParentQueries = dirtyParentQueries;
	}
	function createDebugServices() {
	    return {
	        setCurrentNode: debugSetCurrentNode,
	        createRootView: debugCreateRootView,
	        createEmbeddedView: debugCreateEmbeddedView,
	        createComponentView: debugCreateComponentView,
	        createNgModuleRef: debugCreateNgModuleRef,
	        overrideProvider: debugOverrideProvider,
	        overrideComponentView: debugOverrideComponentView,
	        clearOverrides: debugClearOverrides,
	        checkAndUpdateView: debugCheckAndUpdateView,
	        checkNoChangesView: debugCheckNoChangesView,
	        destroyView: debugDestroyView,
	        createDebugContext: function (view, nodeIndex) { return new DebugContext_(view, nodeIndex); },
	        handleEvent: debugHandleEvent,
	        updateDirectives: debugUpdateDirectives,
	        updateRenderer: debugUpdateRenderer,
	    };
	}
	function debugCreateRootView(elInjector, projectableNodes, rootSelectorOrNode, def, ngModule, context) {
	    var rendererFactory = ngModule.injector.get(RendererFactory2);
	    var root = createRootData(elInjector, ngModule, new DebugRendererFactory2(rendererFactory), projectableNodes, rootSelectorOrNode);
	    var defWithOverride = applyProviderOverridesToView(def);
	    return callWithDebugContext(DebugAction.create, createRootView, null, [root, defWithOverride, context]);
	}
	function createRootData(elInjector, ngModule, rendererFactory, projectableNodes, rootSelectorOrNode) {
	    var sanitizer = ngModule.injector.get(Sanitizer);
	    var errorHandler = ngModule.injector.get(ErrorHandler);
	    var renderer = rendererFactory.createRenderer(null, null);
	    return {
	        ngModule: ngModule,
	        injector: elInjector,
	        projectableNodes: projectableNodes,
	        selectorOrNode: rootSelectorOrNode,
	        sanitizer: sanitizer,
	        rendererFactory: rendererFactory,
	        renderer: renderer,
	        errorHandler: errorHandler
	    };
	}
	function debugCreateEmbeddedView(parentView, anchorDef, viewDef, context) {
	    var defWithOverride = applyProviderOverridesToView(viewDef);
	    return callWithDebugContext(DebugAction.create, createEmbeddedView, null, [parentView, anchorDef, defWithOverride, context]);
	}
	function debugCreateComponentView(parentView, nodeDef, viewDef, hostElement) {
	    var overrideComponentView = viewDefOverrides.get(nodeDef.element.componentProvider.provider.token);
	    if (overrideComponentView) {
	        viewDef = overrideComponentView;
	    }
	    else {
	        viewDef = applyProviderOverridesToView(viewDef);
	    }
	    return callWithDebugContext(DebugAction.create, createComponentView, null, [parentView, nodeDef, viewDef, hostElement]);
	}
	function debugCreateNgModuleRef(moduleType, parentInjector, bootstrapComponents, def) {
	    var defWithOverride = applyProviderOverridesToNgModule(def);
	    return createNgModuleRef(moduleType, parentInjector, bootstrapComponents, defWithOverride);
	}
	var providerOverrides = new Map();
	var providerOverridesWithScope = new Map();
	var viewDefOverrides = new Map();
	function debugOverrideProvider(override) {
	    providerOverrides.set(override.token, override);
	    var injectableDef;
	    if (typeof override.token === 'function' && (injectableDef = getInjectableDef(override.token)) &&
	        typeof injectableDef.providedIn === 'function') {
	        providerOverridesWithScope.set(override.token, override);
	    }
	}
	function debugOverrideComponentView(comp, compFactory) {
	    var hostViewDef = resolveDefinition(getComponentViewDefinitionFactory(compFactory));
	    var compViewDef = resolveDefinition(hostViewDef.nodes[0].element.componentView);
	    viewDefOverrides.set(comp, compViewDef);
	}
	function debugClearOverrides() {
	    providerOverrides.clear();
	    providerOverridesWithScope.clear();
	    viewDefOverrides.clear();
	}
	// Notes about the algorithm:
	// 1) Locate the providers of an element and check if one of them was overwritten
	// 2) Change the providers of that element
	//
	// We only create new datastructures if we need to, to keep perf impact
	// reasonable.
	function applyProviderOverridesToView(def) {
	    if (providerOverrides.size === 0) {
	        return def;
	    }
	    var elementIndicesWithOverwrittenProviders = findElementIndicesWithOverwrittenProviders(def);
	    if (elementIndicesWithOverwrittenProviders.length === 0) {
	        return def;
	    }
	    // clone the whole view definition,
	    // as it maintains references between the nodes that are hard to update.
	    def = def.factory(function () { return NOOP; });
	    for (var i = 0; i < elementIndicesWithOverwrittenProviders.length; i++) {
	        applyProviderOverridesToElement(def, elementIndicesWithOverwrittenProviders[i]);
	    }
	    return def;
	    function findElementIndicesWithOverwrittenProviders(def) {
	        var elIndicesWithOverwrittenProviders = [];
	        var lastElementDef = null;
	        for (var i = 0; i < def.nodes.length; i++) {
	            var nodeDef = def.nodes[i];
	            if (nodeDef.flags & 1 /* TypeElement */) {
	                lastElementDef = nodeDef;
	            }
	            if (lastElementDef && nodeDef.flags & 3840 /* CatProviderNoDirective */ &&
	                providerOverrides.has(nodeDef.provider.token)) {
	                elIndicesWithOverwrittenProviders.push(lastElementDef.nodeIndex);
	                lastElementDef = null;
	            }
	        }
	        return elIndicesWithOverwrittenProviders;
	    }
	    function applyProviderOverridesToElement(viewDef, elIndex) {
	        for (var i = elIndex + 1; i < viewDef.nodes.length; i++) {
	            var nodeDef = viewDef.nodes[i];
	            if (nodeDef.flags & 1 /* TypeElement */) {
	                // stop at the next element
	                return;
	            }
	            if (nodeDef.flags & 3840 /* CatProviderNoDirective */) {
	                var provider = nodeDef.provider;
	                var override = providerOverrides.get(provider.token);
	                if (override) {
	                    nodeDef.flags = (nodeDef.flags & ~3840 /* CatProviderNoDirective */) | override.flags;
	                    provider.deps = splitDepsDsl(override.deps);
	                    provider.value = override.value;
	                }
	            }
	        }
	    }
	}
	// Notes about the algorithm:
	// We only create new datastructures if we need to, to keep perf impact
	// reasonable.
	function applyProviderOverridesToNgModule(def) {
	    var _a = calcHasOverrides(def), hasOverrides = _a.hasOverrides, hasDeprecatedOverrides = _a.hasDeprecatedOverrides;
	    if (!hasOverrides) {
	        return def;
	    }
	    // clone the whole view definition,
	    // as it maintains references between the nodes that are hard to update.
	    def = def.factory(function () { return NOOP; });
	    applyProviderOverrides(def);
	    return def;
	    function calcHasOverrides(def) {
	        var hasOverrides = false;
	        var hasDeprecatedOverrides = false;
	        if (providerOverrides.size === 0) {
	            return { hasOverrides: hasOverrides, hasDeprecatedOverrides: hasDeprecatedOverrides };
	        }
	        def.providers.forEach(function (node) {
	            var override = providerOverrides.get(node.token);
	            if ((node.flags & 3840 /* CatProviderNoDirective */) && override) {
	                hasOverrides = true;
	                hasDeprecatedOverrides = hasDeprecatedOverrides || override.deprecatedBehavior;
	            }
	        });
	        def.modules.forEach(function (module) {
	            providerOverridesWithScope.forEach(function (override, token) {
	                if (getInjectableDef(token).providedIn === module) {
	                    hasOverrides = true;
	                    hasDeprecatedOverrides = hasDeprecatedOverrides || override.deprecatedBehavior;
	                }
	            });
	        });
	        return { hasOverrides: hasOverrides, hasDeprecatedOverrides: hasDeprecatedOverrides };
	    }
	    function applyProviderOverrides(def) {
	        for (var i = 0; i < def.providers.length; i++) {
	            var provider = def.providers[i];
	            if (hasDeprecatedOverrides) {
	                // We had a bug where me made
	                // all providers lazy. Keep this logic behind a flag
	                // for migrating existing users.
	                provider.flags |= 4096 /* LazyProvider */;
	            }
	            var override = providerOverrides.get(provider.token);
	            if (override) {
	                provider.flags = (provider.flags & ~3840 /* CatProviderNoDirective */) | override.flags;
	                provider.deps = splitDepsDsl(override.deps);
	                provider.value = override.value;
	            }
	        }
	        if (providerOverridesWithScope.size > 0) {
	            var moduleSet_1 = new Set(def.modules);
	            providerOverridesWithScope.forEach(function (override, token) {
	                if (moduleSet_1.has(getInjectableDef(token).providedIn)) {
	                    var provider = {
	                        token: token,
	                        flags: override.flags | (hasDeprecatedOverrides ? 4096 /* LazyProvider */ : 0 /* None */),
	                        deps: splitDepsDsl(override.deps),
	                        value: override.value,
	                        index: def.providers.length,
	                    };
	                    def.providers.push(provider);
	                    def.providersByKey[tokenKey(token)] = provider;
	                }
	            });
	        }
	    }
	}
	function debugCheckAndUpdateView(view) {
	    return callWithDebugContext(DebugAction.detectChanges, checkAndUpdateView, null, [view]);
	}
	function debugCheckNoChangesView(view) {
	    return callWithDebugContext(DebugAction.checkNoChanges, checkNoChangesView, null, [view]);
	}
	function debugDestroyView(view) {
	    return callWithDebugContext(DebugAction.destroy, destroyView, null, [view]);
	}
	var DebugAction;
	(function (DebugAction) {
	    DebugAction[DebugAction["create"] = 0] = "create";
	    DebugAction[DebugAction["detectChanges"] = 1] = "detectChanges";
	    DebugAction[DebugAction["checkNoChanges"] = 2] = "checkNoChanges";
	    DebugAction[DebugAction["destroy"] = 3] = "destroy";
	    DebugAction[DebugAction["handleEvent"] = 4] = "handleEvent";
	})(DebugAction || (DebugAction = {}));
	var _currentAction;
	var _currentView;
	var _currentNodeIndex;
	function debugSetCurrentNode(view, nodeIndex) {
	    _currentView = view;
	    _currentNodeIndex = nodeIndex;
	}
	function debugHandleEvent(view, nodeIndex, eventName, event) {
	    debugSetCurrentNode(view, nodeIndex);
	    return callWithDebugContext(DebugAction.handleEvent, view.def.handleEvent, null, [view, nodeIndex, eventName, event]);
	}
	function debugUpdateDirectives(view, checkType) {
	    if (view.state & 128 /* Destroyed */) {
	        throw viewDestroyedError(DebugAction[_currentAction]);
	    }
	    debugSetCurrentNode(view, nextDirectiveWithBinding(view, 0));
	    return view.def.updateDirectives(debugCheckDirectivesFn, view);
	    function debugCheckDirectivesFn(view, nodeIndex, argStyle) {
	        var values = [];
	        for (var _i = 3; _i < arguments.length; _i++) {
	            values[_i - 3] = arguments[_i];
	        }
	        var nodeDef = view.def.nodes[nodeIndex];
	        if (checkType === 0 /* CheckAndUpdate */) {
	            debugCheckAndUpdateNode(view, nodeDef, argStyle, values);
	        }
	        else {
	            debugCheckNoChangesNode(view, nodeDef, argStyle, values);
	        }
	        if (nodeDef.flags & 16384 /* TypeDirective */) {
	            debugSetCurrentNode(view, nextDirectiveWithBinding(view, nodeIndex));
	        }
	        return (nodeDef.flags & 224 /* CatPureExpression */) ?
	            asPureExpressionData(view, nodeDef.nodeIndex).value :
	            undefined;
	    }
	}
	function debugUpdateRenderer(view, checkType) {
	    if (view.state & 128 /* Destroyed */) {
	        throw viewDestroyedError(DebugAction[_currentAction]);
	    }
	    debugSetCurrentNode(view, nextRenderNodeWithBinding(view, 0));
	    return view.def.updateRenderer(debugCheckRenderNodeFn, view);
	    function debugCheckRenderNodeFn(view, nodeIndex, argStyle) {
	        var values = [];
	        for (var _i = 3; _i < arguments.length; _i++) {
	            values[_i - 3] = arguments[_i];
	        }
	        var nodeDef = view.def.nodes[nodeIndex];
	        if (checkType === 0 /* CheckAndUpdate */) {
	            debugCheckAndUpdateNode(view, nodeDef, argStyle, values);
	        }
	        else {
	            debugCheckNoChangesNode(view, nodeDef, argStyle, values);
	        }
	        if (nodeDef.flags & 3 /* CatRenderNode */) {
	            debugSetCurrentNode(view, nextRenderNodeWithBinding(view, nodeIndex));
	        }
	        return (nodeDef.flags & 224 /* CatPureExpression */) ?
	            asPureExpressionData(view, nodeDef.nodeIndex).value :
	            undefined;
	    }
	}
	function debugCheckAndUpdateNode(view, nodeDef, argStyle, givenValues) {
	    var changed = checkAndUpdateNode.apply(void 0, __spread([view, nodeDef, argStyle], givenValues));
	    if (changed) {
	        var values = argStyle === 1 /* Dynamic */ ? givenValues[0] : givenValues;
	        if (nodeDef.flags & 16384 /* TypeDirective */) {
	            var bindingValues = {};
	            for (var i = 0; i < nodeDef.bindings.length; i++) {
	                var binding = nodeDef.bindings[i];
	                var value = values[i];
	                if (binding.flags & 8 /* TypeProperty */) {
	                    bindingValues[normalizeDebugBindingName(binding.nonMinifiedName)] =
	                        normalizeDebugBindingValue(value);
	                }
	            }
	            var elDef = nodeDef.parent;
	            var el = asElementData(view, elDef.nodeIndex).renderElement;
	            if (!elDef.element.name) {
	                // a comment.
	                view.renderer.setValue(el, "bindings=" + JSON.stringify(bindingValues, null, 2));
	            }
	            else {
	                // a regular element.
	                for (var attr in bindingValues) {
	                    var value = bindingValues[attr];
	                    if (value != null) {
	                        view.renderer.setAttribute(el, attr, value);
	                    }
	                    else {
	                        view.renderer.removeAttribute(el, attr);
	                    }
	                }
	            }
	        }
	    }
	}
	function debugCheckNoChangesNode(view, nodeDef, argStyle, values) {
	    checkNoChangesNode.apply(void 0, __spread([view, nodeDef, argStyle], values));
	}
	function nextDirectiveWithBinding(view, nodeIndex) {
	    for (var i = nodeIndex; i < view.def.nodes.length; i++) {
	        var nodeDef = view.def.nodes[i];
	        if (nodeDef.flags & 16384 /* TypeDirective */ && nodeDef.bindings && nodeDef.bindings.length) {
	            return i;
	        }
	    }
	    return null;
	}
	function nextRenderNodeWithBinding(view, nodeIndex) {
	    for (var i = nodeIndex; i < view.def.nodes.length; i++) {
	        var nodeDef = view.def.nodes[i];
	        if ((nodeDef.flags & 3 /* CatRenderNode */) && nodeDef.bindings && nodeDef.bindings.length) {
	            return i;
	        }
	    }
	    return null;
	}
	var DebugContext_ = /** @class */ (function () {
	    function DebugContext_(view, nodeIndex) {
	        this.view = view;
	        this.nodeIndex = nodeIndex;
	        if (nodeIndex == null) {
	            this.nodeIndex = nodeIndex = 0;
	        }
	        this.nodeDef = view.def.nodes[nodeIndex];
	        var elDef = this.nodeDef;
	        var elView = view;
	        while (elDef && (elDef.flags & 1 /* TypeElement */) === 0) {
	            elDef = elDef.parent;
	        }
	        if (!elDef) {
	            while (!elDef && elView) {
	                elDef = viewParentEl(elView);
	                elView = elView.parent;
	            }
	        }
	        this.elDef = elDef;
	        this.elView = elView;
	    }
	    Object.defineProperty(DebugContext_.prototype, "elOrCompView", {
	        get: function () {
	            // Has to be done lazily as we use the DebugContext also during creation of elements...
	            return asElementData(this.elView, this.elDef.nodeIndex).componentView || this.view;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DebugContext_.prototype, "injector", {
	        get: function () {
	            return createInjector$1(this.elView, this.elDef);
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DebugContext_.prototype, "component", {
	        get: function () {
	            return this.elOrCompView.component;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DebugContext_.prototype, "context", {
	        get: function () {
	            return this.elOrCompView.context;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DebugContext_.prototype, "providerTokens", {
	        get: function () {
	            var tokens = [];
	            if (this.elDef) {
	                for (var i = this.elDef.nodeIndex + 1; i <= this.elDef.nodeIndex + this.elDef.childCount; i++) {
	                    var childDef = this.elView.def.nodes[i];
	                    if (childDef.flags & 20224 /* CatProvider */) {
	                        tokens.push(childDef.provider.token);
	                    }
	                    i += childDef.childCount;
	                }
	            }
	            return tokens;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DebugContext_.prototype, "references", {
	        get: function () {
	            var references = {};
	            if (this.elDef) {
	                collectReferences(this.elView, this.elDef, references);
	                for (var i = this.elDef.nodeIndex + 1; i <= this.elDef.nodeIndex + this.elDef.childCount; i++) {
	                    var childDef = this.elView.def.nodes[i];
	                    if (childDef.flags & 20224 /* CatProvider */) {
	                        collectReferences(this.elView, childDef, references);
	                    }
	                    i += childDef.childCount;
	                }
	            }
	            return references;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DebugContext_.prototype, "componentRenderElement", {
	        get: function () {
	            var elData = findHostElement(this.elOrCompView);
	            return elData ? elData.renderElement : undefined;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DebugContext_.prototype, "renderNode", {
	        get: function () {
	            return this.nodeDef.flags & 2 /* TypeText */ ? renderNode(this.view, this.nodeDef) :
	                renderNode(this.elView, this.elDef);
	        },
	        enumerable: true,
	        configurable: true
	    });
	    DebugContext_.prototype.logError = function (console) {
	        var values = [];
	        for (var _i = 1; _i < arguments.length; _i++) {
	            values[_i - 1] = arguments[_i];
	        }
	        var logViewDef;
	        var logNodeIndex;
	        if (this.nodeDef.flags & 2 /* TypeText */) {
	            logViewDef = this.view.def;
	            logNodeIndex = this.nodeDef.nodeIndex;
	        }
	        else {
	            logViewDef = this.elView.def;
	            logNodeIndex = this.elDef.nodeIndex;
	        }
	        // Note: we only generate a log function for text and element nodes
	        // to make the generated code as small as possible.
	        var renderNodeIndex = getRenderNodeIndex(logViewDef, logNodeIndex);
	        var currRenderNodeIndex = -1;
	        var nodeLogger = function () {
	            var _a;
	            currRenderNodeIndex++;
	            if (currRenderNodeIndex === renderNodeIndex) {
	                return (_a = console.error).bind.apply(_a, __spread([console], values));
	            }
	            else {
	                return NOOP;
	            }
	        };
	        logViewDef.factory(nodeLogger);
	        if (currRenderNodeIndex < renderNodeIndex) {
	            console.error('Illegal state: the ViewDefinitionFactory did not call the logger!');
	            console.error.apply(console, __spread(values));
	        }
	    };
	    return DebugContext_;
	}());
	function getRenderNodeIndex(viewDef, nodeIndex) {
	    var renderNodeIndex = -1;
	    for (var i = 0; i <= nodeIndex; i++) {
	        var nodeDef = viewDef.nodes[i];
	        if (nodeDef.flags & 3 /* CatRenderNode */) {
	            renderNodeIndex++;
	        }
	    }
	    return renderNodeIndex;
	}
	function findHostElement(view) {
	    while (view && !isComponentView(view)) {
	        view = view.parent;
	    }
	    if (view.parent) {
	        return asElementData(view.parent, viewParentEl(view).nodeIndex);
	    }
	    return null;
	}
	function collectReferences(view, nodeDef, references) {
	    for (var refName in nodeDef.references) {
	        references[refName] = getQueryValue(view, nodeDef, nodeDef.references[refName]);
	    }
	}
	function callWithDebugContext(action, fn, self, args) {
	    var oldAction = _currentAction;
	    var oldView = _currentView;
	    var oldNodeIndex = _currentNodeIndex;
	    try {
	        _currentAction = action;
	        var result = fn.apply(self, args);
	        _currentView = oldView;
	        _currentNodeIndex = oldNodeIndex;
	        _currentAction = oldAction;
	        return result;
	    }
	    catch (e) {
	        if (isViewDebugError(e) || !_currentView) {
	            throw e;
	        }
	        throw viewWrappedDebugError(e, getCurrentDebugContext());
	    }
	}
	function getCurrentDebugContext() {
	    return _currentView ? new DebugContext_(_currentView, _currentNodeIndex) : null;
	}
	var DebugRendererFactory2 = /** @class */ (function () {
	    function DebugRendererFactory2(delegate) {
	        this.delegate = delegate;
	    }
	    DebugRendererFactory2.prototype.createRenderer = function (element, renderData) {
	        return new DebugRenderer2(this.delegate.createRenderer(element, renderData));
	    };
	    DebugRendererFactory2.prototype.begin = function () {
	        if (this.delegate.begin) {
	            this.delegate.begin();
	        }
	    };
	    DebugRendererFactory2.prototype.end = function () {
	        if (this.delegate.end) {
	            this.delegate.end();
	        }
	    };
	    DebugRendererFactory2.prototype.whenRenderingDone = function () {
	        if (this.delegate.whenRenderingDone) {
	            return this.delegate.whenRenderingDone();
	        }
	        return Promise.resolve(null);
	    };
	    return DebugRendererFactory2;
	}());
	var DebugRenderer2 = /** @class */ (function () {
	    function DebugRenderer2(delegate) {
	        this.delegate = delegate;
	        /**
	         * Factory function used to create a `DebugContext` when a node is created.
	         *
	         * The `DebugContext` allows to retrieve information about the nodes that are useful in tests.
	         *
	         * The factory is configurable so that the `DebugRenderer2` could instantiate either a View Engine
	         * or a Render context.
	         */
	        this.debugContextFactory = getCurrentDebugContext;
	        this.data = this.delegate.data;
	    }
	    DebugRenderer2.prototype.createDebugContext = function (nativeElement) {
	        return this.debugContextFactory(nativeElement);
	    };
	    DebugRenderer2.prototype.destroyNode = function (node) {
	        var debugNode = getDebugNode$1(node);
	        removeDebugNodeFromIndex(debugNode);
	        if (debugNode instanceof DebugNode__PRE_R3__) {
	            debugNode.listeners.length = 0;
	        }
	        if (this.delegate.destroyNode) {
	            this.delegate.destroyNode(node);
	        }
	    };
	    DebugRenderer2.prototype.destroy = function () {
	        this.delegate.destroy();
	    };
	    DebugRenderer2.prototype.createElement = function (name, namespace) {
	        var el = this.delegate.createElement(name, namespace);
	        var debugCtx = this.createDebugContext(el);
	        if (debugCtx) {
	            var debugEl = new DebugElement__PRE_R3__(el, null, debugCtx);
	            debugEl.name = name;
	            indexDebugNode(debugEl);
	        }
	        return el;
	    };
	    DebugRenderer2.prototype.createComment = function (value) {
	        var comment = this.delegate.createComment(value);
	        var debugCtx = this.createDebugContext(comment);
	        if (debugCtx) {
	            indexDebugNode(new DebugNode__PRE_R3__(comment, null, debugCtx));
	        }
	        return comment;
	    };
	    DebugRenderer2.prototype.createText = function (value) {
	        var text = this.delegate.createText(value);
	        var debugCtx = this.createDebugContext(text);
	        if (debugCtx) {
	            indexDebugNode(new DebugNode__PRE_R3__(text, null, debugCtx));
	        }
	        return text;
	    };
	    DebugRenderer2.prototype.appendChild = function (parent, newChild) {
	        var debugEl = getDebugNode$1(parent);
	        var debugChildEl = getDebugNode$1(newChild);
	        if (debugEl && debugChildEl && debugEl instanceof DebugElement__PRE_R3__) {
	            debugEl.addChild(debugChildEl);
	        }
	        this.delegate.appendChild(parent, newChild);
	    };
	    DebugRenderer2.prototype.insertBefore = function (parent, newChild, refChild) {
	        var debugEl = getDebugNode$1(parent);
	        var debugChildEl = getDebugNode$1(newChild);
	        var debugRefEl = getDebugNode$1(refChild);
	        if (debugEl && debugChildEl && debugEl instanceof DebugElement__PRE_R3__) {
	            debugEl.insertBefore(debugRefEl, debugChildEl);
	        }
	        this.delegate.insertBefore(parent, newChild, refChild);
	    };
	    DebugRenderer2.prototype.removeChild = function (parent, oldChild) {
	        var debugEl = getDebugNode$1(parent);
	        var debugChildEl = getDebugNode$1(oldChild);
	        if (debugEl && debugChildEl && debugEl instanceof DebugElement__PRE_R3__) {
	            debugEl.removeChild(debugChildEl);
	        }
	        this.delegate.removeChild(parent, oldChild);
	    };
	    DebugRenderer2.prototype.selectRootElement = function (selectorOrNode, preserveContent) {
	        var el = this.delegate.selectRootElement(selectorOrNode, preserveContent);
	        var debugCtx = getCurrentDebugContext();
	        if (debugCtx) {
	            indexDebugNode(new DebugElement__PRE_R3__(el, null, debugCtx));
	        }
	        return el;
	    };
	    DebugRenderer2.prototype.setAttribute = function (el, name, value, namespace) {
	        var debugEl = getDebugNode$1(el);
	        if (debugEl && debugEl instanceof DebugElement__PRE_R3__) {
	            var fullName = namespace ? namespace + ':' + name : name;
	            debugEl.attributes[fullName] = value;
	        }
	        this.delegate.setAttribute(el, name, value, namespace);
	    };
	    DebugRenderer2.prototype.removeAttribute = function (el, name, namespace) {
	        var debugEl = getDebugNode$1(el);
	        if (debugEl && debugEl instanceof DebugElement__PRE_R3__) {
	            var fullName = namespace ? namespace + ':' + name : name;
	            debugEl.attributes[fullName] = null;
	        }
	        this.delegate.removeAttribute(el, name, namespace);
	    };
	    DebugRenderer2.prototype.addClass = function (el, name) {
	        var debugEl = getDebugNode$1(el);
	        if (debugEl && debugEl instanceof DebugElement__PRE_R3__) {
	            debugEl.classes[name] = true;
	        }
	        this.delegate.addClass(el, name);
	    };
	    DebugRenderer2.prototype.removeClass = function (el, name) {
	        var debugEl = getDebugNode$1(el);
	        if (debugEl && debugEl instanceof DebugElement__PRE_R3__) {
	            debugEl.classes[name] = false;
	        }
	        this.delegate.removeClass(el, name);
	    };
	    DebugRenderer2.prototype.setStyle = function (el, style, value, flags) {
	        var debugEl = getDebugNode$1(el);
	        if (debugEl && debugEl instanceof DebugElement__PRE_R3__) {
	            debugEl.styles[style] = value;
	        }
	        this.delegate.setStyle(el, style, value, flags);
	    };
	    DebugRenderer2.prototype.removeStyle = function (el, style, flags) {
	        var debugEl = getDebugNode$1(el);
	        if (debugEl && debugEl instanceof DebugElement__PRE_R3__) {
	            debugEl.styles[style] = null;
	        }
	        this.delegate.removeStyle(el, style, flags);
	    };
	    DebugRenderer2.prototype.setProperty = function (el, name, value) {
	        var debugEl = getDebugNode$1(el);
	        if (debugEl && debugEl instanceof DebugElement__PRE_R3__) {
	            debugEl.properties[name] = value;
	        }
	        this.delegate.setProperty(el, name, value);
	    };
	    DebugRenderer2.prototype.listen = function (target, eventName, callback) {
	        if (typeof target !== 'string') {
	            var debugEl = getDebugNode$1(target);
	            if (debugEl) {
	                debugEl.listeners.push(new DebugEventListener(eventName, callback));
	            }
	        }
	        return this.delegate.listen(target, eventName, callback);
	    };
	    DebugRenderer2.prototype.parentNode = function (node) {
	        return this.delegate.parentNode(node);
	    };
	    DebugRenderer2.prototype.nextSibling = function (node) {
	        return this.delegate.nextSibling(node);
	    };
	    DebugRenderer2.prototype.setValue = function (node, value) {
	        return this.delegate.setValue(node, value);
	    };
	    return DebugRenderer2;
	}());
	// Attention: this function is called as top level function.
	// Putting any logic in here will destroy closure tree shaking!
	function createNgModuleFactory(ngModuleType, bootstrapComponents, defFactory) {
	    return new NgModuleFactory_(ngModuleType, bootstrapComponents, defFactory);
	}
	function cloneNgModuleDefinition(def) {
	    var providers = Array.from(def.providers);
	    var modules = Array.from(def.modules);
	    var providersByKey = {};
	    for (var key in def.providersByKey) {
	        providersByKey[key] = def.providersByKey[key];
	    }
	    return {
	        factory: def.factory,
	        scope: def.scope,
	        providers: providers,
	        modules: modules,
	        providersByKey: providersByKey,
	    };
	}
	var NgModuleFactory_ = /** @class */ (function (_super) {
	    __extends(NgModuleFactory_, _super);
	    function NgModuleFactory_(moduleType, _bootstrapComponents, _ngModuleDefFactory) {
	        var _this = 
	        // Attention: this ctor is called as top level function.
	        // Putting any logic in here will destroy closure tree shaking!
	        _super.call(this) || this;
	        _this.moduleType = moduleType;
	        _this._bootstrapComponents = _bootstrapComponents;
	        _this._ngModuleDefFactory = _ngModuleDefFactory;
	        return _this;
	    }
	    NgModuleFactory_.prototype.create = function (parentInjector) {
	        initServicesIfNeeded();
	        // Clone the NgModuleDefinition so that any tree shakeable provider definition
	        // added to this instance of the NgModuleRef doesn't affect the cached copy.
	        // See https://github.com/angular/angular/issues/25018.
	        var def = cloneNgModuleDefinition(resolveDefinition(this._ngModuleDefFactory));
	        return Services.createNgModuleRef(this.moduleType, parentInjector || Injector.NULL, this._bootstrapComponents, def);
	    };
	    return NgModuleFactory_;
	}(NgModuleFactory));

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	// clang-format on

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	if (ngDevMode) {
	    // This helper is to give a reasonable error message to people upgrading to v9 that have not yet
	    // installed `@angular/localize` in their app.
	    // tslint:disable-next-line: no-toplevel-property-access
	    _global$1.$localize = _global$1.$localize || function () {
	        throw new Error('It looks like your application or one of its dependencies is using i18n.\n' +
	            'Angular 9 introduced a global `$localize()` function that needs to be loaded.\n' +
	            'Please run `ng add @angular/localize` from the Angular CLI.\n' +
	            '(For non-CLI projects, add `import \'@angular/localize/init\';` to your `polyfills.ts` file.\n' +
	            'For server-side rendering applications add the import to your `main.server.ts` file.)');
	    };
	}

	/**
	 * @license Angular v9.1.6
	 * (c) 2010-2020 Google LLC. https://angular.io/
	 * License: MIT
	 */

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	var _DOM = null;
	function getDOM() {
	    return _DOM;
	}
	function setRootDomAdapter(adapter) {
	    if (!_DOM) {
	        _DOM = adapter;
	    }
	}
	/* tslint:disable:requireParameterType */
	/**
	 * Provides DOM operations in an environment-agnostic way.
	 *
	 * @security Tread carefully! Interacting with the DOM directly is dangerous and
	 * can introduce XSS risks.
	 */
	var DomAdapter = /** @class */ (function () {
	    function DomAdapter() {
	    }
	    return DomAdapter;
	}());

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * A DI Token representing the main rendering context. In a browser this is the DOM Document.
	 *
	 * Note: Document might not be available in the Application Context when Application and Rendering
	 * Contexts are not the same (e.g. when running the application in a Web Worker).
	 *
	 * @publicApi
	 */
	var DOCUMENT$1 = new InjectionToken('DocumentToken');

	/**
	 * This class should not be used directly by an application developer. Instead, use
	 * {@link Location}.
	 *
	 * `PlatformLocation` encapsulates all calls to DOM APIs, which allows the Router to be
	 * platform-agnostic.
	 * This means that we can have different implementation of `PlatformLocation` for the different
	 * platforms that Angular supports. For example, `@angular/platform-browser` provides an
	 * implementation specific to the browser environment, while `@angular/platform-server` provides
	 * one suitable for use with server-side rendering.
	 *
	 * The `PlatformLocation` class is used directly by all implementations of {@link LocationStrategy}
	 * when they need to interact with the DOM APIs like pushState, popState, etc.
	 *
	 * {@link LocationStrategy} in turn is used by the {@link Location} service which is used directly
	 * by the {@link Router} in order to navigate between routes. Since all interactions between {@link
	 * Router} /
	 * {@link Location} / {@link LocationStrategy} and DOM APIs flow through the `PlatformLocation`
	 * class, they are all platform-agnostic.
	 *
	 * @publicApi
	 */
	var PlatformLocation = /** @class */ (function () {
	    function PlatformLocation() {
	    }
	    PlatformLocation.Éµprov = ÉµÉµdefineInjectable({ factory: useBrowserPlatformLocation, token: PlatformLocation, providedIn: "platform" });
	    PlatformLocation = __decorate([
	        Injectable({
	            providedIn: 'platform',
	            // See #23917
	            useFactory: useBrowserPlatformLocation
	        })
	    ], PlatformLocation);
	    return PlatformLocation;
	}());
	function useBrowserPlatformLocation() {
	    return ÉµÉµinject(BrowserPlatformLocation);
	}
	/**
	 * @description
	 * Indicates when a location is initialized.
	 *
	 * @publicApi
	 */
	var LOCATION_INITIALIZED = new InjectionToken('Location Initialized');
	/**
	 * `PlatformLocation` encapsulates all of the direct calls to platform APIs.
	 * This class should not be used directly by an application developer. Instead, use
	 * {@link Location}.
	 */
	var BrowserPlatformLocation = /** @class */ (function (_super) {
	    __extends(BrowserPlatformLocation, _super);
	    function BrowserPlatformLocation(_doc) {
	        var _this = _super.call(this) || this;
	        _this._doc = _doc;
	        _this._init();
	        return _this;
	    }
	    // This is moved to its own method so that `MockPlatformLocationStrategy` can overwrite it
	    /** @internal */
	    BrowserPlatformLocation.prototype._init = function () {
	        this.location = getDOM().getLocation();
	        this._history = getDOM().getHistory();
	    };
	    BrowserPlatformLocation.prototype.getBaseHrefFromDOM = function () {
	        return getDOM().getBaseHref(this._doc);
	    };
	    BrowserPlatformLocation.prototype.onPopState = function (fn) {
	        getDOM().getGlobalEventTarget(this._doc, 'window').addEventListener('popstate', fn, false);
	    };
	    BrowserPlatformLocation.prototype.onHashChange = function (fn) {
	        getDOM().getGlobalEventTarget(this._doc, 'window').addEventListener('hashchange', fn, false);
	    };
	    Object.defineProperty(BrowserPlatformLocation.prototype, "href", {
	        get: function () {
	            return this.location.href;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(BrowserPlatformLocation.prototype, "protocol", {
	        get: function () {
	            return this.location.protocol;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(BrowserPlatformLocation.prototype, "hostname", {
	        get: function () {
	            return this.location.hostname;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(BrowserPlatformLocation.prototype, "port", {
	        get: function () {
	            return this.location.port;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(BrowserPlatformLocation.prototype, "pathname", {
	        get: function () {
	            return this.location.pathname;
	        },
	        set: function (newPath) {
	            this.location.pathname = newPath;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(BrowserPlatformLocation.prototype, "search", {
	        get: function () {
	            return this.location.search;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(BrowserPlatformLocation.prototype, "hash", {
	        get: function () {
	            return this.location.hash;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    BrowserPlatformLocation.prototype.pushState = function (state, title, url) {
	        if (supportsState()) {
	            this._history.pushState(state, title, url);
	        }
	        else {
	            this.location.hash = url;
	        }
	    };
	    BrowserPlatformLocation.prototype.replaceState = function (state, title, url) {
	        if (supportsState()) {
	            this._history.replaceState(state, title, url);
	        }
	        else {
	            this.location.hash = url;
	        }
	    };
	    BrowserPlatformLocation.prototype.forward = function () {
	        this._history.forward();
	    };
	    BrowserPlatformLocation.prototype.back = function () {
	        this._history.back();
	    };
	    BrowserPlatformLocation.prototype.getState = function () {
	        return this._history.state;
	    };
	    BrowserPlatformLocation.Éµprov = ÉµÉµdefineInjectable({ factory: createBrowserPlatformLocation, token: BrowserPlatformLocation, providedIn: "platform" });
	    BrowserPlatformLocation = __decorate([
	        Injectable({
	            providedIn: 'platform',
	            // See #23917
	            useFactory: createBrowserPlatformLocation,
	        }),
	        __param(0, Inject(DOCUMENT$1)),
	        __metadata("design:paramtypes", [Object])
	    ], BrowserPlatformLocation);
	    return BrowserPlatformLocation;
	}(PlatformLocation));
	function supportsState() {
	    return !!window.history.pushState;
	}
	function createBrowserPlatformLocation() {
	    return new BrowserPlatformLocation(ÉµÉµinject(DOCUMENT$1));
	}

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * Joins two parts of a URL with a slash if needed.
	 *
	 * @param start  URL string
	 * @param end    URL string
	 *
	 *
	 * @returns The joined URL string.
	 */
	function joinWithSlash(start, end) {
	    if (start.length == 0) {
	        return end;
	    }
	    if (end.length == 0) {
	        return start;
	    }
	    var slashes = 0;
	    if (start.endsWith('/')) {
	        slashes++;
	    }
	    if (end.startsWith('/')) {
	        slashes++;
	    }
	    if (slashes == 2) {
	        return start + end.substring(1);
	    }
	    if (slashes == 1) {
	        return start + end;
	    }
	    return start + '/' + end;
	}
	/**
	 * Removes a trailing slash from a URL string if needed.
	 * Looks for the first occurrence of either `#`, `?`, or the end of the
	 * line as `/` characters and removes the trailing slash if one exists.
	 *
	 * @param url URL string.
	 *
	 * @returns The URL string, modified if needed.
	 */
	function stripTrailingSlash(url) {
	    var match = url.match(/#|\?|$/);
	    var pathEndIdx = match && match.index || url.length;
	    var droppedSlashIdx = pathEndIdx - (url[pathEndIdx - 1] === '/' ? 1 : 0);
	    return url.slice(0, droppedSlashIdx) + url.slice(pathEndIdx);
	}
	/**
	 * Normalizes URL parameters by prepending with `?` if needed.
	 *
	 * @param  params String of URL parameters.
	 *
	 * @returns The normalized URL parameters string.
	 */
	function normalizeQueryParams(params) {
	    return params && params[0] !== '?' ? '?' + params : params;
	}

	/**
	 * Enables the `Location` service to read route state from the browser's URL.
	 * Angular provides two strategies:
	 * `HashLocationStrategy` and `PathLocationStrategy`.
	 *
	 * Applications should use the `Router` or `Location` services to
	 * interact with application route state.
	 *
	 * For instance, `HashLocationStrategy` produces URLs like
	 * <code class="no-auto-link">http://example.com#/foo</code>,
	 * and `PathLocationStrategy` produces
	 * <code class="no-auto-link">http://example.com/foo</code> as an equivalent URL.
	 *
	 * See these two classes for more.
	 *
	 * @publicApi
	 */
	var LocationStrategy = /** @class */ (function () {
	    function LocationStrategy() {
	    }
	    LocationStrategy.Éµprov = ÉµÉµdefineInjectable({ factory: provideLocationStrategy, token: LocationStrategy, providedIn: "root" });
	    LocationStrategy = __decorate([
	        Injectable({ providedIn: 'root', useFactory: provideLocationStrategy })
	    ], LocationStrategy);
	    return LocationStrategy;
	}());
	function provideLocationStrategy(platformLocation) {
	    // See #23917
	    var location = ÉµÉµinject(DOCUMENT$1).location;
	    return new PathLocationStrategy(ÉµÉµinject(PlatformLocation), location && location.origin || '');
	}
	/**
	 * A predefined [DI token](guide/glossary#di-token) for the base href
	 * to be used with the `PathLocationStrategy`.
	 * The base href is the URL prefix that should be preserved when generating
	 * and recognizing URLs.
	 *
	 * @usageNotes
	 *
	 * The following example shows how to use this token to configure the root app injector
	 * with a base href value, so that the DI framework can supply the dependency anywhere in the app.
	 *
	 * ```typescript
	 * import {Component, NgModule} from '@angular/core';
	 * import {APP_BASE_HREF} from '@angular/common';
	 *
	 * @NgModule({
	 *   providers: [{provide: APP_BASE_HREF, useValue: '/my/app'}]
	 * })
	 * class AppModule {}
	 * ```
	 *
	 * @publicApi
	 */
	var APP_BASE_HREF = new InjectionToken('appBaseHref');
	/**
	 * @description
	 * A {@link LocationStrategy} used to configure the {@link Location} service to
	 * represent its state in the
	 * [path](https://en.wikipedia.org/wiki/Uniform_Resource_Locator#Syntax) of the
	 * browser's URL.
	 *
	 * If you're using `PathLocationStrategy`, you must provide a {@link APP_BASE_HREF}
	 * or add a base element to the document. This URL prefix that will be preserved
	 * when generating and recognizing URLs.
	 *
	 * For instance, if you provide an `APP_BASE_HREF` of `'/my/app'` and call
	 * `location.go('/foo')`, the browser's URL will become
	 * `example.com/my/app/foo`.
	 *
	 * Similarly, if you add `<base href='/my/app'/>` to the document and call
	 * `location.go('/foo')`, the browser's URL will become
	 * `example.com/my/app/foo`.
	 *
	 * @usageNotes
	 *
	 * ### Example
	 *
	 * {@example common/location/ts/path_location_component.ts region='LocationComponent'}
	 *
	 * @publicApi
	 */
	var PathLocationStrategy = /** @class */ (function (_super) {
	    __extends(PathLocationStrategy, _super);
	    function PathLocationStrategy(_platformLocation, href) {
	        var _this = _super.call(this) || this;
	        _this._platformLocation = _platformLocation;
	        if (href == null) {
	            href = _this._platformLocation.getBaseHrefFromDOM();
	        }
	        if (href == null) {
	            throw new Error("No base href set. Please provide a value for the APP_BASE_HREF token or add a base element to the document.");
	        }
	        _this._baseHref = href;
	        return _this;
	    }
	    PathLocationStrategy.prototype.onPopState = function (fn) {
	        this._platformLocation.onPopState(fn);
	        this._platformLocation.onHashChange(fn);
	    };
	    PathLocationStrategy.prototype.getBaseHref = function () {
	        return this._baseHref;
	    };
	    PathLocationStrategy.prototype.prepareExternalUrl = function (internal) {
	        return joinWithSlash(this._baseHref, internal);
	    };
	    PathLocationStrategy.prototype.path = function (includeHash) {
	        if (includeHash === void 0) { includeHash = false; }
	        var pathname = this._platformLocation.pathname + normalizeQueryParams(this._platformLocation.search);
	        var hash = this._platformLocation.hash;
	        return hash && includeHash ? "" + pathname + hash : pathname;
	    };
	    PathLocationStrategy.prototype.pushState = function (state, title, url, queryParams) {
	        var externalUrl = this.prepareExternalUrl(url + normalizeQueryParams(queryParams));
	        this._platformLocation.pushState(state, title, externalUrl);
	    };
	    PathLocationStrategy.prototype.replaceState = function (state, title, url, queryParams) {
	        var externalUrl = this.prepareExternalUrl(url + normalizeQueryParams(queryParams));
	        this._platformLocation.replaceState(state, title, externalUrl);
	    };
	    PathLocationStrategy.prototype.forward = function () {
	        this._platformLocation.forward();
	    };
	    PathLocationStrategy.prototype.back = function () {
	        this._platformLocation.back();
	    };
	    PathLocationStrategy = __decorate([
	        Injectable(),
	        __param(1, Optional()), __param(1, Inject(APP_BASE_HREF)),
	        __metadata("design:paramtypes", [PlatformLocation, String])
	    ], PathLocationStrategy);
	    return PathLocationStrategy;
	}(LocationStrategy));

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * @description
	 * A {@link LocationStrategy} used to configure the {@link Location} service to
	 * represent its state in the
	 * [hash fragment](https://en.wikipedia.org/wiki/Uniform_Resource_Locator#Syntax)
	 * of the browser's URL.
	 *
	 * For instance, if you call `location.go('/foo')`, the browser's URL will become
	 * `example.com#/foo`.
	 *
	 * @usageNotes
	 *
	 * ### Example
	 *
	 * {@example common/location/ts/hash_location_component.ts region='LocationComponent'}
	 *
	 * @publicApi
	 */
	var HashLocationStrategy = /** @class */ (function (_super) {
	    __extends(HashLocationStrategy, _super);
	    function HashLocationStrategy(_platformLocation, _baseHref) {
	        var _this = _super.call(this) || this;
	        _this._platformLocation = _platformLocation;
	        _this._baseHref = '';
	        if (_baseHref != null) {
	            _this._baseHref = _baseHref;
	        }
	        return _this;
	    }
	    HashLocationStrategy.prototype.onPopState = function (fn) {
	        this._platformLocation.onPopState(fn);
	        this._platformLocation.onHashChange(fn);
	    };
	    HashLocationStrategy.prototype.getBaseHref = function () {
	        return this._baseHref;
	    };
	    HashLocationStrategy.prototype.path = function (includeHash) {
	        // the hash value is always prefixed with a `#`
	        // and if it is empty then it will stay empty
	        var path = this._platformLocation.hash;
	        if (path == null)
	            path = '#';
	        return path.length > 0 ? path.substring(1) : path;
	    };
	    HashLocationStrategy.prototype.prepareExternalUrl = function (internal) {
	        var url = joinWithSlash(this._baseHref, internal);
	        return url.length > 0 ? ('#' + url) : url;
	    };
	    HashLocationStrategy.prototype.pushState = function (state, title, path, queryParams) {
	        var url = this.prepareExternalUrl(path + normalizeQueryParams(queryParams));
	        if (url.length == 0) {
	            url = this._platformLocation.pathname;
	        }
	        this._platformLocation.pushState(state, title, url);
	    };
	    HashLocationStrategy.prototype.replaceState = function (state, title, path, queryParams) {
	        var url = this.prepareExternalUrl(path + normalizeQueryParams(queryParams));
	        if (url.length == 0) {
	            url = this._platformLocation.pathname;
	        }
	        this._platformLocation.replaceState(state, title, url);
	    };
	    HashLocationStrategy.prototype.forward = function () {
	        this._platformLocation.forward();
	    };
	    HashLocationStrategy.prototype.back = function () {
	        this._platformLocation.back();
	    };
	    HashLocationStrategy = __decorate([
	        Injectable(),
	        __param(1, Optional()), __param(1, Inject(APP_BASE_HREF)),
	        __metadata("design:paramtypes", [PlatformLocation, String])
	    ], HashLocationStrategy);
	    return HashLocationStrategy;
	}(LocationStrategy));

	/**
	 * @description
	 *
	 * A service that applications can use to interact with a browser's URL.
	 *
	 * Depending on the `LocationStrategy` used, `Location` persists
	 * to the URL's path or the URL's hash segment.
	 *
	 * @usageNotes
	 *
	 * It's better to use the `Router#navigate` service to trigger route changes. Use
	 * `Location` only if you need to interact with or create normalized URLs outside of
	 * routing.
	 *
	 * `Location` is responsible for normalizing the URL against the application's base href.
	 * A normalized URL is absolute from the URL host, includes the application's base href, and has no
	 * trailing slash:
	 * - `/my/app/user/123` is normalized
	 * - `my/app/user/123` **is not** normalized
	 * - `/my/app/user/123/` **is not** normalized
	 *
	 * ### Example
	 *
	 * <code-example path='common/location/ts/path_location_component.ts'
	 * region='LocationComponent'></code-example>
	 *
	 * @publicApi
	 */
	var Location = /** @class */ (function () {
	    function Location(platformStrategy, platformLocation) {
	        var _this = this;
	        /** @internal */
	        this._subject = new EventEmitter();
	        /** @internal */
	        this._urlChangeListeners = [];
	        this._platformStrategy = platformStrategy;
	        var browserBaseHref = this._platformStrategy.getBaseHref();
	        this._platformLocation = platformLocation;
	        this._baseHref = stripTrailingSlash(_stripIndexHtml(browserBaseHref));
	        this._platformStrategy.onPopState(function (ev) {
	            _this._subject.emit({
	                'url': _this.path(true),
	                'pop': true,
	                'state': ev.state,
	                'type': ev.type,
	            });
	        });
	    }
	    Location_1 = Location;
	    /**
	     * Normalizes the URL path for this location.
	     *
	     * @param includeHash True to include an anchor fragment in the path.
	     *
	     * @returns The normalized URL path.
	     */
	    // TODO: vsavkin. Remove the boolean flag and always include hash once the deprecated router is
	    // removed.
	    Location.prototype.path = function (includeHash) {
	        if (includeHash === void 0) { includeHash = false; }
	        return this.normalize(this._platformStrategy.path(includeHash));
	    };
	    /**
	     * Reports the current state of the location history.
	     * @returns The current value of the `history.state` object.
	     */
	    Location.prototype.getState = function () {
	        return this._platformLocation.getState();
	    };
	    /**
	     * Normalizes the given path and compares to the current normalized path.
	     *
	     * @param path The given URL path.
	     * @param query Query parameters.
	     *
	     * @returns True if the given URL path is equal to the current normalized path, false
	     * otherwise.
	     */
	    Location.prototype.isCurrentPathEqualTo = function (path, query) {
	        if (query === void 0) { query = ''; }
	        return this.path() == this.normalize(path + normalizeQueryParams(query));
	    };
	    /**
	     * Normalizes a URL path by stripping any trailing slashes.
	     *
	     * @param url String representing a URL.
	     *
	     * @returns The normalized URL string.
	     */
	    Location.prototype.normalize = function (url) {
	        return Location_1.stripTrailingSlash(_stripBaseHref(this._baseHref, _stripIndexHtml(url)));
	    };
	    /**
	     * Normalizes an external URL path.
	     * If the given URL doesn't begin with a leading slash (`'/'`), adds one
	     * before normalizing. Adds a hash if `HashLocationStrategy` is
	     * in use, or the `APP_BASE_HREF` if the `PathLocationStrategy` is in use.
	     *
	     * @param url String representing a URL.
	     *
	     * @returns  A normalized platform-specific URL.
	     */
	    Location.prototype.prepareExternalUrl = function (url) {
	        if (url && url[0] !== '/') {
	            url = '/' + url;
	        }
	        return this._platformStrategy.prepareExternalUrl(url);
	    };
	    // TODO: rename this method to pushState
	    /**
	     * Changes the browser's URL to a normalized version of a given URL, and pushes a
	     * new item onto the platform's history.
	     *
	     * @param path  URL path to normalize.
	     * @param query Query parameters.
	     * @param state Location history state.
	     *
	     */
	    Location.prototype.go = function (path, query, state) {
	        if (query === void 0) { query = ''; }
	        if (state === void 0) { state = null; }
	        this._platformStrategy.pushState(state, '', path, query);
	        this._notifyUrlChangeListeners(this.prepareExternalUrl(path + normalizeQueryParams(query)), state);
	    };
	    /**
	     * Changes the browser's URL to a normalized version of the given URL, and replaces
	     * the top item on the platform's history stack.
	     *
	     * @param path  URL path to normalize.
	     * @param query Query parameters.
	     * @param state Location history state.
	     */
	    Location.prototype.replaceState = function (path, query, state) {
	        if (query === void 0) { query = ''; }
	        if (state === void 0) { state = null; }
	        this._platformStrategy.replaceState(state, '', path, query);
	        this._notifyUrlChangeListeners(this.prepareExternalUrl(path + normalizeQueryParams(query)), state);
	    };
	    /**
	     * Navigates forward in the platform's history.
	     */
	    Location.prototype.forward = function () {
	        this._platformStrategy.forward();
	    };
	    /**
	     * Navigates back in the platform's history.
	     */
	    Location.prototype.back = function () {
	        this._platformStrategy.back();
	    };
	    /**
	     * Registers a URL change listener. Use to catch updates performed by the Angular
	     * framework that are not detectible through "popstate" or "hashchange" events.
	     *
	     * @param fn The change handler function, which take a URL and a location history state.
	     */
	    Location.prototype.onUrlChange = function (fn) {
	        var _this = this;
	        this._urlChangeListeners.push(fn);
	        this.subscribe(function (v) {
	            _this._notifyUrlChangeListeners(v.url, v.state);
	        });
	    };
	    /** @internal */
	    Location.prototype._notifyUrlChangeListeners = function (url, state) {
	        if (url === void 0) { url = ''; }
	        this._urlChangeListeners.forEach(function (fn) { return fn(url, state); });
	    };
	    /**
	     * Subscribes to the platform's `popState` events.
	     *
	     * @param value Event that is triggered when the state history changes.
	     * @param exception The exception to throw.
	     *
	     * @returns Subscribed events.
	     */
	    Location.prototype.subscribe = function (onNext, onThrow, onReturn) {
	        return this._subject.subscribe({ next: onNext, error: onThrow, complete: onReturn });
	    };
	    var Location_1;
	    /**
	     * Normalizes URL parameters by prepending with `?` if needed.
	     *
	     * @param  params String of URL parameters.
	     *
	     * @returns The normalized URL parameters string.
	     */
	    Location.normalizeQueryParams = normalizeQueryParams;
	    /**
	     * Joins two parts of a URL with a slash if needed.
	     *
	     * @param start  URL string
	     * @param end    URL string
	     *
	     *
	     * @returns The joined URL string.
	     */
	    Location.joinWithSlash = joinWithSlash;
	    /**
	     * Removes a trailing slash from a URL string if needed.
	     * Looks for the first occurrence of either `#`, `?`, or the end of the
	     * line as `/` characters and removes the trailing slash if one exists.
	     *
	     * @param url URL string.
	     *
	     * @returns The URL string, modified if needed.
	     */
	    Location.stripTrailingSlash = stripTrailingSlash;
	    Location.Éµprov = ÉµÉµdefineInjectable({ factory: createLocation, token: Location, providedIn: "root" });
	    Location = Location_1 = __decorate([
	        Injectable({
	            providedIn: 'root',
	            // See #23917
	            useFactory: createLocation,
	        }),
	        __metadata("design:paramtypes", [LocationStrategy, PlatformLocation])
	    ], Location);
	    return Location;
	}());
	function createLocation() {
	    return new Location(ÉµÉµinject(LocationStrategy), ÉµÉµinject(PlatformLocation));
	}
	function _stripBaseHref(baseHref, url) {
	    return baseHref && url.startsWith(baseHref) ? url.substring(baseHref.length) : url;
	}
	function _stripIndexHtml(url) {
	    return url.replace(/\/index.html$/, '');
	}

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/** @internal */
	var CURRENCIES_EN = {
	    'ADP': [undefined, undefined, 0],
	    'AFN': [undefined, undefined, 0],
	    'ALL': [undefined, undefined, 0],
	    'AMD': [undefined, undefined, 2],
	    'AOA': [undefined, 'Kz'],
	    'ARS': [undefined, '$'],
	    'AUD': ['A$', '$'],
	    'BAM': [undefined, 'KM'],
	    'BBD': [undefined, '$'],
	    'BDT': [undefined, 'à§³'],
	    'BHD': [undefined, undefined, 3],
	    'BIF': [undefined, undefined, 0],
	    'BMD': [undefined, '$'],
	    'BND': [undefined, '$'],
	    'BOB': [undefined, 'Bs'],
	    'BRL': ['R$'],
	    'BSD': [undefined, '$'],
	    'BWP': [undefined, 'P'],
	    'BYN': [undefined, 'Ñ.', 2],
	    'BYR': [undefined, undefined, 0],
	    'BZD': [undefined, '$'],
	    'CAD': ['CA$', '$', 2],
	    'CHF': [undefined, undefined, 2],
	    'CLF': [undefined, undefined, 4],
	    'CLP': [undefined, '$', 0],
	    'CNY': ['CNÂ¥', 'Â¥'],
	    'COP': [undefined, '$', 2],
	    'CRC': [undefined, 'â¡', 2],
	    'CUC': [undefined, '$'],
	    'CUP': [undefined, '$'],
	    'CZK': [undefined, 'KÄ', 2],
	    'DJF': [undefined, undefined, 0],
	    'DKK': [undefined, 'kr', 2],
	    'DOP': [undefined, '$'],
	    'EGP': [undefined, 'EÂ£'],
	    'ESP': [undefined, 'â§', 0],
	    'EUR': ['â¬'],
	    'FJD': [undefined, '$'],
	    'FKP': [undefined, 'Â£'],
	    'GBP': ['Â£'],
	    'GEL': [undefined, 'â¾'],
	    'GIP': [undefined, 'Â£'],
	    'GNF': [undefined, 'FG', 0],
	    'GTQ': [undefined, 'Q'],
	    'GYD': [undefined, '$', 2],
	    'HKD': ['HK$', '$'],
	    'HNL': [undefined, 'L'],
	    'HRK': [undefined, 'kn'],
	    'HUF': [undefined, 'Ft', 2],
	    'IDR': [undefined, 'Rp', 2],
	    'ILS': ['âª'],
	    'INR': ['â¹'],
	    'IQD': [undefined, undefined, 0],
	    'IRR': [undefined, undefined, 0],
	    'ISK': [undefined, 'kr', 0],
	    'ITL': [undefined, undefined, 0],
	    'JMD': [undefined, '$'],
	    'JOD': [undefined, undefined, 3],
	    'JPY': ['Â¥', undefined, 0],
	    'KHR': [undefined, 'á'],
	    'KMF': [undefined, 'CF', 0],
	    'KPW': [undefined, 'â©', 0],
	    'KRW': ['â©', undefined, 0],
	    'KWD': [undefined, undefined, 3],
	    'KYD': [undefined, '$'],
	    'KZT': [undefined, 'â¸'],
	    'LAK': [undefined, 'â­', 0],
	    'LBP': [undefined, 'LÂ£', 0],
	    'LKR': [undefined, 'Rs'],
	    'LRD': [undefined, '$'],
	    'LTL': [undefined, 'Lt'],
	    'LUF': [undefined, undefined, 0],
	    'LVL': [undefined, 'Ls'],
	    'LYD': [undefined, undefined, 3],
	    'MGA': [undefined, 'Ar', 0],
	    'MGF': [undefined, undefined, 0],
	    'MMK': [undefined, 'K', 0],
	    'MNT': [undefined, 'â®', 2],
	    'MRO': [undefined, undefined, 0],
	    'MUR': [undefined, 'Rs', 2],
	    'MXN': ['MX$', '$'],
	    'MYR': [undefined, 'RM'],
	    'NAD': [undefined, '$'],
	    'NGN': [undefined, 'â¦'],
	    'NIO': [undefined, 'C$'],
	    'NOK': [undefined, 'kr', 2],
	    'NPR': [undefined, 'Rs'],
	    'NZD': ['NZ$', '$'],
	    'OMR': [undefined, undefined, 3],
	    'PHP': [undefined, 'â±'],
	    'PKR': [undefined, 'Rs', 2],
	    'PLN': [undefined, 'zÅ'],
	    'PYG': [undefined, 'â²', 0],
	    'RON': [undefined, 'lei'],
	    'RSD': [undefined, undefined, 0],
	    'RUB': [undefined, 'â½'],
	    'RUR': [undefined, 'Ñ.'],
	    'RWF': [undefined, 'RF', 0],
	    'SBD': [undefined, '$'],
	    'SEK': [undefined, 'kr', 2],
	    'SGD': [undefined, '$'],
	    'SHP': [undefined, 'Â£'],
	    'SLL': [undefined, undefined, 0],
	    'SOS': [undefined, undefined, 0],
	    'SRD': [undefined, '$'],
	    'SSP': [undefined, 'Â£'],
	    'STD': [undefined, undefined, 0],
	    'STN': [undefined, 'Db'],
	    'SYP': [undefined, 'Â£', 0],
	    'THB': [undefined, 'à¸¿'],
	    'TMM': [undefined, undefined, 0],
	    'TND': [undefined, undefined, 3],
	    'TOP': [undefined, 'T$'],
	    'TRL': [undefined, undefined, 0],
	    'TRY': [undefined, 'âº'],
	    'TTD': [undefined, '$'],
	    'TWD': ['NT$', '$', 2],
	    'TZS': [undefined, undefined, 2],
	    'UAH': [undefined, 'â´'],
	    'UGX': [undefined, undefined, 0],
	    'USD': ['$'],
	    'UYI': [undefined, undefined, 0],
	    'UYU': [undefined, '$'],
	    'UYW': [undefined, undefined, 4],
	    'UZS': [undefined, undefined, 2],
	    'VEF': [undefined, 'Bs', 2],
	    'VND': ['â«', undefined, 0],
	    'VUV': [undefined, undefined, 0],
	    'XAF': ['FCFA', undefined, 0],
	    'XCD': ['EC$', '$'],
	    'XOF': ['CFA', undefined, 0],
	    'XPF': ['CFPF', undefined, 0],
	    'XXX': ['Â¤'],
	    'YER': [undefined, undefined, 0],
	    'ZAR': [undefined, 'R'],
	    'ZMK': [undefined, undefined, 0],
	    'ZMW': [undefined, 'ZK'],
	    'ZWD': [undefined, undefined, 0]
	};

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * Format styles that can be used to represent numbers.
	 * @see `getLocaleNumberFormat()`.
	 * @see [Internationalization (i18n) Guide](https://angular.io/guide/i18n)
	 *
	 * @publicApi
	 */
	var NumberFormatStyle;
	(function (NumberFormatStyle) {
	    NumberFormatStyle[NumberFormatStyle["Decimal"] = 0] = "Decimal";
	    NumberFormatStyle[NumberFormatStyle["Percent"] = 1] = "Percent";
	    NumberFormatStyle[NumberFormatStyle["Currency"] = 2] = "Currency";
	    NumberFormatStyle[NumberFormatStyle["Scientific"] = 3] = "Scientific";
	})(NumberFormatStyle || (NumberFormatStyle = {}));
	/**
	 * Plurality cases used for translating plurals to different languages.
	 *
	 * @see `NgPlural`
	 * @see `NgPluralCase`
	 * @see [Internationalization (i18n) Guide](https://angular.io/guide/i18n)
	 *
	 * @publicApi
	 */
	var Plural;
	(function (Plural) {
	    Plural[Plural["Zero"] = 0] = "Zero";
	    Plural[Plural["One"] = 1] = "One";
	    Plural[Plural["Two"] = 2] = "Two";
	    Plural[Plural["Few"] = 3] = "Few";
	    Plural[Plural["Many"] = 4] = "Many";
	    Plural[Plural["Other"] = 5] = "Other";
	})(Plural || (Plural = {}));
	/**
	 * Context-dependant translation forms for strings.
	 * Typically the standalone version is for the nominative form of the word,
	 * and the format version is used for the genitive case.
	 * @see [CLDR website](http://cldr.unicode.org/translation/date-time#TOC-Stand-Alone-vs.-Format-Styles)
	 * @see [Internationalization (i18n) Guide](https://angular.io/guide/i18n)
	 *
	 * @publicApi
	 */
	var FormStyle;
	(function (FormStyle) {
	    FormStyle[FormStyle["Format"] = 0] = "Format";
	    FormStyle[FormStyle["Standalone"] = 1] = "Standalone";
	})(FormStyle || (FormStyle = {}));
	/**
	 * String widths available for translations.
	 * The specific character widths are locale-specific.
	 * Examples are given for the word "Sunday" in English.
	 *
	 * @publicApi
	 */
	var TranslationWidth;
	(function (TranslationWidth) {
	    /** 1 character for `en-US`. For example: 'S' */
	    TranslationWidth[TranslationWidth["Narrow"] = 0] = "Narrow";
	    /** 3 characters for `en-US`. For example: 'Sun' */
	    TranslationWidth[TranslationWidth["Abbreviated"] = 1] = "Abbreviated";
	    /** Full length for `en-US`. For example: "Sunday" */
	    TranslationWidth[TranslationWidth["Wide"] = 2] = "Wide";
	    /** 2 characters for `en-US`, For example: "Su" */
	    TranslationWidth[TranslationWidth["Short"] = 3] = "Short";
	})(TranslationWidth || (TranslationWidth = {}));
	/**
	 * String widths available for date-time formats.
	 * The specific character widths are locale-specific.
	 * Examples are given for `en-US`.
	 *
	 * @see `getLocaleDateFormat()`
	 * @see `getLocaleTimeFormat()``
	 * @see `getLocaleDateTimeFormat()`
	 * @see [Internationalization (i18n) Guide](https://angular.io/guide/i18n)
	 * @publicApi
	 */
	var FormatWidth;
	(function (FormatWidth) {
	    /**
	     * For `en-US`, 'M/d/yy, h:mm a'`
	     * (Example: `6/15/15, 9:03 AM`)
	     */
	    FormatWidth[FormatWidth["Short"] = 0] = "Short";
	    /**
	     * For `en-US`, `'MMM d, y, h:mm:ss a'`
	     * (Example: `Jun 15, 2015, 9:03:01 AM`)
	     */
	    FormatWidth[FormatWidth["Medium"] = 1] = "Medium";
	    /**
	     * For `en-US`, `'MMMM d, y, h:mm:ss a z'`
	     * (Example: `June 15, 2015 at 9:03:01 AM GMT+1`)
	     */
	    FormatWidth[FormatWidth["Long"] = 2] = "Long";
	    /**
	     * For `en-US`, `'EEEE, MMMM d, y, h:mm:ss a zzzz'`
	     * (Example: `Monday, June 15, 2015 at 9:03:01 AM GMT+01:00`)
	     */
	    FormatWidth[FormatWidth["Full"] = 3] = "Full";
	})(FormatWidth || (FormatWidth = {}));
	/**
	 * Symbols that can be used to replace placeholders in number patterns.
	 * Examples are based on `en-US` values.
	 *
	 * @see `getLocaleNumberSymbol()`
	 * @see [Internationalization (i18n) Guide](https://angular.io/guide/i18n)
	 *
	 * @publicApi
	 */
	var NumberSymbol;
	(function (NumberSymbol) {
	    /**
	     * Decimal separator.
	     * For `en-US`, the dot character.
	     * Example : 2,345`.`67
	     */
	    NumberSymbol[NumberSymbol["Decimal"] = 0] = "Decimal";
	    /**
	     * Grouping separator, typically for thousands.
	     * For `en-US`, the comma character.
	     * Example: 2`,`345.67
	     */
	    NumberSymbol[NumberSymbol["Group"] = 1] = "Group";
	    /**
	     * List-item separator.
	     * Example: "one, two, and three"
	     */
	    NumberSymbol[NumberSymbol["List"] = 2] = "List";
	    /**
	     * Sign for percentage (out of 100).
	     * Example: 23.4%
	     */
	    NumberSymbol[NumberSymbol["PercentSign"] = 3] = "PercentSign";
	    /**
	     * Sign for positive numbers.
	     * Example: +23
	     */
	    NumberSymbol[NumberSymbol["PlusSign"] = 4] = "PlusSign";
	    /**
	     * Sign for negative numbers.
	     * Example: -23
	     */
	    NumberSymbol[NumberSymbol["MinusSign"] = 5] = "MinusSign";
	    /**
	     * Computer notation for exponential value (n times a power of 10).
	     * Example: 1.2E3
	     */
	    NumberSymbol[NumberSymbol["Exponential"] = 6] = "Exponential";
	    /**
	     * Human-readable format of exponential.
	     * Example: 1.2x103
	     */
	    NumberSymbol[NumberSymbol["SuperscriptingExponent"] = 7] = "SuperscriptingExponent";
	    /**
	     * Sign for permille (out of 1000).
	     * Example: 23.4â°
	     */
	    NumberSymbol[NumberSymbol["PerMille"] = 8] = "PerMille";
	    /**
	     * Infinity, can be used with plus and minus.
	     * Example: â, +â, -â
	     */
	    NumberSymbol[NumberSymbol["Infinity"] = 9] = "Infinity";
	    /**
	     * Not a number.
	     * Example: NaN
	     */
	    NumberSymbol[NumberSymbol["NaN"] = 10] = "NaN";
	    /**
	     * Symbol used between time units.
	     * Example: 10:52
	     */
	    NumberSymbol[NumberSymbol["TimeSeparator"] = 11] = "TimeSeparator";
	    /**
	     * Decimal separator for currency values (fallback to `Decimal`).
	     * Example: $2,345.67
	     */
	    NumberSymbol[NumberSymbol["CurrencyDecimal"] = 12] = "CurrencyDecimal";
	    /**
	     * Group separator for currency values (fallback to `Group`).
	     * Example: $2,345.67
	     */
	    NumberSymbol[NumberSymbol["CurrencyGroup"] = 13] = "CurrencyGroup";
	})(NumberSymbol || (NumberSymbol = {}));
	/**
	 * The value for each day of the week, based on the `en-US` locale
	 *
	 * @publicApi
	 */
	var WeekDay;
	(function (WeekDay) {
	    WeekDay[WeekDay["Sunday"] = 0] = "Sunday";
	    WeekDay[WeekDay["Monday"] = 1] = "Monday";
	    WeekDay[WeekDay["Tuesday"] = 2] = "Tuesday";
	    WeekDay[WeekDay["Wednesday"] = 3] = "Wednesday";
	    WeekDay[WeekDay["Thursday"] = 4] = "Thursday";
	    WeekDay[WeekDay["Friday"] = 5] = "Friday";
	    WeekDay[WeekDay["Saturday"] = 6] = "Saturday";
	})(WeekDay || (WeekDay = {}));
	/**
	 * Retrieves the locale ID from the currently loaded locale.
	 * The loaded locale could be, for example, a global one rather than a regional one.
	 * @param locale A locale code, such as `fr-FR`.
	 * @returns The locale code. For example, `fr`.
	 * @see [Internationalization (i18n) Guide](https://angular.io/guide/i18n)
	 *
	 * @publicApi
	 */
	function getLocaleId(locale) {
	    return findLocaleData(locale)[LocaleDataIndex.LocaleId];
	}
	/**
	 * Retrieves day period strings for the given locale.
	 *
	 * @param locale A locale code for the locale format rules to use.
	 * @param formStyle The required grammatical form.
	 * @param width The required character width.
	 * @returns An array of localized period strings. For example, `[AM, PM]` for `en-US`.
	 * @see [Internationalization (i18n) Guide](https://angular.io/guide/i18n)
	 *
	 * @publicApi
	 */
	function getLocaleDayPeriods(locale, formStyle, width) {
	    var data = findLocaleData(locale);
	    var amPmData = [
	        data[LocaleDataIndex.DayPeriodsFormat], data[LocaleDataIndex.DayPeriodsStandalone]
	    ];
	    var amPm = getLastDefinedValue(amPmData, formStyle);
	    return getLastDefinedValue(amPm, width);
	}
	/**
	 * Retrieves days of the week for the given locale, using the Gregorian calendar.
	 *
	 * @param locale A locale code for the locale format rules to use.
	 * @param formStyle The required grammatical form.
	 * @param width The required character width.
	 * @returns An array of localized name strings.
	 * For example,`[Sunday, Monday, ... Saturday]` for `en-US`.
	 * @see [Internationalization (i18n) Guide](https://angular.io/guide/i18n)
	 *
	 * @publicApi
	 */
	function getLocaleDayNames(locale, formStyle, width) {
	    var data = findLocaleData(locale);
	    var daysData = [data[LocaleDataIndex.DaysFormat], data[LocaleDataIndex.DaysStandalone]];
	    var days = getLastDefinedValue(daysData, formStyle);
	    return getLastDefinedValue(days, width);
	}
	/**
	 * Retrieves months of the year for the given locale, using the Gregorian calendar.
	 *
	 * @param locale A locale code for the locale format rules to use.
	 * @param formStyle The required grammatical form.
	 * @param width The required character width.
	 * @returns An array of localized name strings.
	 * For example,  `[January, February, ...]` for `en-US`.
	 * @see [Internationalization (i18n) Guide](https://angular.io/guide/i18n)
	 *
	 * @publicApi
	 */
	function getLocaleMonthNames(locale, formStyle, width) {
	    var data = findLocaleData(locale);
	    var monthsData = [data[LocaleDataIndex.MonthsFormat], data[LocaleDataIndex.MonthsStandalone]];
	    var months = getLastDefinedValue(monthsData, formStyle);
	    return getLastDefinedValue(months, width);
	}
	/**
	 * Retrieves Gregorian-calendar eras for the given locale.
	 * @param locale A locale code for the locale format rules to use.
	 * @param formStyle The required grammatical form.
	 * @param width The required character width.

	 * @returns An array of localized era strings.
	 * For example, `[AD, BC]` for `en-US`.
	 * @see [Internationalization (i18n) Guide](https://angular.io/guide/i18n)
	 *
	 * @publicApi
	 */
	function getLocaleEraNames(locale, width) {
	    var data = findLocaleData(locale);
	    var erasData = data[LocaleDataIndex.Eras];
	    return getLastDefinedValue(erasData, width);
	}
	/**
	 * Retrieves a localized date-value formating string.
	 *
	 * @param locale A locale code for the locale format rules to use.
	 * @param width The format type.
	 * @returns The localized formating string.
	 * @see `FormatWidth`
	 * @see [Internationalization (i18n) Guide](https://angular.io/guide/i18n)
	 *
	 * @publicApi
	 */
	function getLocaleDateFormat(locale, width) {
	    var data = findLocaleData(locale);
	    return getLastDefinedValue(data[LocaleDataIndex.DateFormat], width);
	}
	/**
	 * Retrieves a localized time-value formatting string.
	 *
	 * @param locale A locale code for the locale format rules to use.
	 * @param width The format type.
	 * @returns The localized formatting string.
	 * @see `FormatWidth`
	 * @see [Internationalization (i18n) Guide](https://angular.io/guide/i18n)

	 * @publicApi
	 */
	function getLocaleTimeFormat(locale, width) {
	    var data = findLocaleData(locale);
	    return getLastDefinedValue(data[LocaleDataIndex.TimeFormat], width);
	}
	/**
	 * Retrieves a localized date-time formatting string.
	 *
	 * @param locale A locale code for the locale format rules to use.
	 * @param width The format type.
	 * @returns The localized formatting string.
	 * @see `FormatWidth`
	 * @see [Internationalization (i18n) Guide](https://angular.io/guide/i18n)
	 *
	 * @publicApi
	 */
	function getLocaleDateTimeFormat(locale, width) {
	    var data = findLocaleData(locale);
	    var dateTimeFormatData = data[LocaleDataIndex.DateTimeFormat];
	    return getLastDefinedValue(dateTimeFormatData, width);
	}
	/**
	 * Retrieves a localized number symbol that can be used to replace placeholders in number formats.
	 * @param locale The locale code.
	 * @param symbol The symbol to localize.
	 * @returns The character for the localized symbol.
	 * @see `NumberSymbol`
	 * @see [Internationalization (i18n) Guide](https://angular.io/guide/i18n)
	 *
	 * @publicApi
	 */
	function getLocaleNumberSymbol(locale, symbol) {
	    var data = findLocaleData(locale);
	    var res = data[LocaleDataIndex.NumberSymbols][symbol];
	    if (typeof res === 'undefined') {
	        if (symbol === NumberSymbol.CurrencyDecimal) {
	            return data[LocaleDataIndex.NumberSymbols][NumberSymbol.Decimal];
	        }
	        else if (symbol === NumberSymbol.CurrencyGroup) {
	            return data[LocaleDataIndex.NumberSymbols][NumberSymbol.Group];
	        }
	    }
	    return res;
	}
	/**
	 * Retrieves a number format for a given locale.
	 *
	 * Numbers are formatted using patterns, like `#,###.00`. For example, the pattern `#,###.00`
	 * when used to format the number 12345.678 could result in "12'345,678". That would happen if the
	 * grouping separator for your language is an apostrophe, and the decimal separator is a comma.
	 *
	 * <b>Important:</b> The characters `.` `,` `0` `#` (and others below) are special placeholders
	 * that stand for the decimal separator, and so on, and are NOT real characters.
	 * You must NOT "translate" the placeholders. For example, don't change `.` to `,` even though in
	 * your language the decimal point is written with a comma. The symbols should be replaced by the
	 * local equivalents, using the appropriate `NumberSymbol` for your language.
	 *
	 * Here are the special characters used in number patterns:
	 *
	 * | Symbol | Meaning |
	 * |--------|---------|
	 * | . | Replaced automatically by the character used for the decimal point. |
	 * | , | Replaced by the "grouping" (thousands) separator. |
	 * | 0 | Replaced by a digit (or zero if there aren't enough digits). |
	 * | # | Replaced by a digit (or nothing if there aren't enough). |
	 * | Â¤ | Replaced by a currency symbol, such as $ or USD. |
	 * | % | Marks a percent format. The % symbol may change position, but must be retained. |
	 * | E | Marks a scientific format. The E symbol may change position, but must be retained. |
	 * | ' | Special characters used as literal characters are quoted with ASCII single quotes. |
	 *
	 * @param locale A locale code for the locale format rules to use.
	 * @param type The type of numeric value to be formatted (such as `Decimal` or `Currency`.)
	 * @returns The localized format string.
	 * @see `NumberFormatStyle`
	 * @see [CLDR website](http://cldr.unicode.org/translation/number-patterns)
	 * @see [Internationalization (i18n) Guide](https://angular.io/guide/i18n)
	 *
	 * @publicApi
	 */
	function getLocaleNumberFormat(locale, type) {
	    var data = findLocaleData(locale);
	    return data[LocaleDataIndex.NumberFormats][type];
	}
	/**
	 * Retrieves the currency values for a given locale.
	 * @param locale A locale code for the locale format rules to use.
	 * @returns The currency values.
	 * @see [Internationalization (i18n) Guide](https://angular.io/guide/i18n)
	 */
	function getLocaleCurrencies(locale) {
	    var data = findLocaleData(locale);
	    return data[LocaleDataIndex.Currencies];
	}
	/**
	 * @alias core/ÉµgetLocalePluralCase
	 * @publicApi
	 */
	var getLocalePluralCase$1 = getLocalePluralCase;
	function checkFullData(data) {
	    if (!data[LocaleDataIndex.ExtraData]) {
	        throw new Error("Missing extra locale data for the locale \"" + data[LocaleDataIndex
	            .LocaleId] + "\". Use \"registerLocaleData\" to load new data. See the \"I18n guide\" on angular.io to know more.");
	    }
	}
	/**
	 * Retrieves locale-specific rules used to determine which day period to use
	 * when more than one period is defined for a locale.
	 *
	 * There is a rule for each defined day period. The
	 * first rule is applied to the first day period and so on.
	 * Fall back to AM/PM when no rules are available.
	 *
	 * A rule can specify a period as time range, or as a single time value.
	 *
	 * This functionality is only available when you have loaded the full locale data.
	 * See the ["I18n guide"](guide/i18n#i18n-pipes).
	 *
	 * @param locale A locale code for the locale format rules to use.
	 * @returns The rules for the locale, a single time value or array of *from-time, to-time*,
	 * or null if no periods are available.
	 *
	 * @see `getLocaleExtraDayPeriods()`
	 * @see [Internationalization (i18n) Guide](https://angular.io/guide/i18n)
	 *
	 * @publicApi
	 */
	function getLocaleExtraDayPeriodRules(locale) {
	    var data = findLocaleData(locale);
	    checkFullData(data);
	    var rules = data[LocaleDataIndex.ExtraData][2 /* ExtraDayPeriodsRules */] || [];
	    return rules.map(function (rule) {
	        if (typeof rule === 'string') {
	            return extractTime(rule);
	        }
	        return [extractTime(rule[0]), extractTime(rule[1])];
	    });
	}
	/**
	 * Retrieves locale-specific day periods, which indicate roughly how a day is broken up
	 * in different languages.
	 * For example, for `en-US`, periods are morning, noon, afternoon, evening, and midnight.
	 *
	 * This functionality is only available when you have loaded the full locale data.
	 * See the ["I18n guide"](guide/i18n#i18n-pipes).
	 *
	 * @param locale A locale code for the locale format rules to use.
	 * @param formStyle The required grammatical form.
	 * @param width The required character width.
	 * @returns The translated day-period strings.
	 * @see `getLocaleExtraDayPeriodRules()`
	 * @see [Internationalization (i18n) Guide](https://angular.io/guide/i18n)
	 *
	 * @publicApi
	 */
	function getLocaleExtraDayPeriods(locale, formStyle, width) {
	    var data = findLocaleData(locale);
	    checkFullData(data);
	    var dayPeriodsData = [
	        data[LocaleDataIndex.ExtraData][0 /* ExtraDayPeriodFormats */],
	        data[LocaleDataIndex.ExtraData][1 /* ExtraDayPeriodStandalone */]
	    ];
	    var dayPeriods = getLastDefinedValue(dayPeriodsData, formStyle) || [];
	    return getLastDefinedValue(dayPeriods, width) || [];
	}
	/**
	 * Retrieves the first value that is defined in an array, going backwards from an index position.
	 *
	 * To avoid repeating the same data (as when the "format" and "standalone" forms are the same)
	 * add the first value to the locale data arrays, and add other values only if they are different.
	 *
	 * @param data The data array to retrieve from.
	 * @param index A 0-based index into the array to start from.
	 * @returns The value immediately before the given index position.
	 * @see [Internationalization (i18n) Guide](https://angular.io/guide/i18n)
	 *
	 * @publicApi
	 */
	function getLastDefinedValue(data, index) {
	    for (var i = index; i > -1; i--) {
	        if (typeof data[i] !== 'undefined') {
	            return data[i];
	        }
	    }
	    throw new Error('Locale data API: locale data undefined');
	}
	/**
	 * Extracts the hours and minutes from a string like "15:45"
	 */
	function extractTime(time) {
	    var _a = __read(time.split(':'), 2), h = _a[0], m = _a[1];
	    return { hours: +h, minutes: +m };
	}
	/**
	 * Retrieves the currency symbol for a given currency code.
	 *
	 * For example, for the default `en-US` locale, the code `USD` can
	 * be represented by the narrow symbol `$` or the wide symbol `US$`.
	 *
	 * @param code The currency code.
	 * @param format The format, `wide` or `narrow`.
	 * @param locale A locale code for the locale format rules to use.
	 *
	 * @returns The symbol, or the currency code if no symbol is available.
	 * @see [Internationalization (i18n) Guide](https://angular.io/guide/i18n)
	 *
	 * @publicApi
	 */
	function getCurrencySymbol(code, format, locale) {
	    if (locale === void 0) { locale = 'en'; }
	    var currency = getLocaleCurrencies(locale)[code] || CURRENCIES_EN[code] || [];
	    var symbolNarrow = currency[1 /* SymbolNarrow */];
	    if (format === 'narrow' && typeof symbolNarrow === 'string') {
	        return symbolNarrow;
	    }
	    return currency[0 /* Symbol */] || code;
	}
	// Most currencies have cents, that's why the default is 2
	var DEFAULT_NB_OF_CURRENCY_DIGITS = 2;
	/**
	 * Reports the number of decimal digits for a given currency.
	 * The value depends upon the presence of cents in that particular currency.
	 *
	 * @param code The currency code.
	 * @returns The number of decimal digits, typically 0 or 2.
	 * @see [Internationalization (i18n) Guide](https://angular.io/guide/i18n)
	 *
	 * @publicApi
	 */
	function getNumberOfCurrencyDigits(code) {
	    var digits;
	    var currency = CURRENCIES_EN[code];
	    if (currency) {
	        digits = currency[2 /* NbOfDigits */];
	    }
	    return typeof digits === 'number' ? digits : DEFAULT_NB_OF_CURRENCY_DIGITS;
	}

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	var ISO8601_DATE_REGEX = /^(\d{4})-?(\d\d)-?(\d\d)(?:T(\d\d)(?::?(\d\d)(?::?(\d\d)(?:\.(\d+))?)?)?(Z|([+-])(\d\d):?(\d\d))?)?$/;
	//    1        2       3         4          5          6          7          8  9     10      11
	var NAMED_FORMATS = {};
	var DATE_FORMATS_SPLIT = /((?:[^GyMLwWdEabBhHmsSzZO']+)|(?:'(?:[^']|'')*')|(?:G{1,5}|y{1,4}|M{1,5}|L{1,5}|w{1,2}|W{1}|d{1,2}|E{1,6}|a{1,5}|b{1,5}|B{1,5}|h{1,2}|H{1,2}|m{1,2}|s{1,2}|S{1,3}|z{1,4}|Z{1,5}|O{1,4}))([\s\S]*)/;
	var ZoneWidth;
	(function (ZoneWidth) {
	    ZoneWidth[ZoneWidth["Short"] = 0] = "Short";
	    ZoneWidth[ZoneWidth["ShortGMT"] = 1] = "ShortGMT";
	    ZoneWidth[ZoneWidth["Long"] = 2] = "Long";
	    ZoneWidth[ZoneWidth["Extended"] = 3] = "Extended";
	})(ZoneWidth || (ZoneWidth = {}));
	var DateType;
	(function (DateType) {
	    DateType[DateType["FullYear"] = 0] = "FullYear";
	    DateType[DateType["Month"] = 1] = "Month";
	    DateType[DateType["Date"] = 2] = "Date";
	    DateType[DateType["Hours"] = 3] = "Hours";
	    DateType[DateType["Minutes"] = 4] = "Minutes";
	    DateType[DateType["Seconds"] = 5] = "Seconds";
	    DateType[DateType["FractionalSeconds"] = 6] = "FractionalSeconds";
	    DateType[DateType["Day"] = 7] = "Day";
	})(DateType || (DateType = {}));
	var TranslationType;
	(function (TranslationType) {
	    TranslationType[TranslationType["DayPeriods"] = 0] = "DayPeriods";
	    TranslationType[TranslationType["Days"] = 1] = "Days";
	    TranslationType[TranslationType["Months"] = 2] = "Months";
	    TranslationType[TranslationType["Eras"] = 3] = "Eras";
	})(TranslationType || (TranslationType = {}));
	/**
	 * @ngModule CommonModule
	 * @description
	 *
	 * Formats a date according to locale rules.
	 *
	 * @param value The date to format, as a Date, or a number (milliseconds since UTC epoch)
	 * or an [ISO date-time string](https://www.w3.org/TR/NOTE-datetime).
	 * @param format The date-time components to include. See `DatePipe` for details.
	 * @param locale A locale code for the locale format rules to use.
	 * @param timezone The time zone. A time zone offset from GMT (such as `'+0430'`),
	 * or a standard UTC/GMT or continental US time zone abbreviation.
	 * If not specified, uses host system settings.
	 *
	 * @returns The formatted date string.
	 *
	 * @see `DatePipe`
	 * @see [Internationalization (i18n) Guide](https://angular.io/guide/i18n)
	 *
	 * @publicApi
	 */
	function formatDate(value, format, locale, timezone) {
	    var date = toDate(value);
	    var namedFormat = getNamedFormat(locale, format);
	    format = namedFormat || format;
	    var parts = [];
	    var match;
	    while (format) {
	        match = DATE_FORMATS_SPLIT.exec(format);
	        if (match) {
	            parts = parts.concat(match.slice(1));
	            var part = parts.pop();
	            if (!part) {
	                break;
	            }
	            format = part;
	        }
	        else {
	            parts.push(format);
	            break;
	        }
	    }
	    var dateTimezoneOffset = date.getTimezoneOffset();
	    if (timezone) {
	        dateTimezoneOffset = timezoneToOffset(timezone, dateTimezoneOffset);
	        date = convertTimezoneToLocal(date, timezone, true);
	    }
	    var text = '';
	    parts.forEach(function (value) {
	        var dateFormatter = getDateFormatter(value);
	        text += dateFormatter ?
	            dateFormatter(date, locale, dateTimezoneOffset) :
	            value === '\'\'' ? '\'' : value.replace(/(^'|'$)/g, '').replace(/''/g, '\'');
	    });
	    return text;
	}
	function getNamedFormat(locale, format) {
	    var localeId = getLocaleId(locale);
	    NAMED_FORMATS[localeId] = NAMED_FORMATS[localeId] || {};
	    if (NAMED_FORMATS[localeId][format]) {
	        return NAMED_FORMATS[localeId][format];
	    }
	    var formatValue = '';
	    switch (format) {
	        case 'shortDate':
	            formatValue = getLocaleDateFormat(locale, FormatWidth.Short);
	            break;
	        case 'mediumDate':
	            formatValue = getLocaleDateFormat(locale, FormatWidth.Medium);
	            break;
	        case 'longDate':
	            formatValue = getLocaleDateFormat(locale, FormatWidth.Long);
	            break;
	        case 'fullDate':
	            formatValue = getLocaleDateFormat(locale, FormatWidth.Full);
	            break;
	        case 'shortTime':
	            formatValue = getLocaleTimeFormat(locale, FormatWidth.Short);
	            break;
	        case 'mediumTime':
	            formatValue = getLocaleTimeFormat(locale, FormatWidth.Medium);
	            break;
	        case 'longTime':
	            formatValue = getLocaleTimeFormat(locale, FormatWidth.Long);
	            break;
	        case 'fullTime':
	            formatValue = getLocaleTimeFormat(locale, FormatWidth.Full);
	            break;
	        case 'short':
	            var shortTime = getNamedFormat(locale, 'shortTime');
	            var shortDate = getNamedFormat(locale, 'shortDate');
	            formatValue = formatDateTime(getLocaleDateTimeFormat(locale, FormatWidth.Short), [shortTime, shortDate]);
	            break;
	        case 'medium':
	            var mediumTime = getNamedFormat(locale, 'mediumTime');
	            var mediumDate = getNamedFormat(locale, 'mediumDate');
	            formatValue = formatDateTime(getLocaleDateTimeFormat(locale, FormatWidth.Medium), [mediumTime, mediumDate]);
	            break;
	        case 'long':
	            var longTime = getNamedFormat(locale, 'longTime');
	            var longDate = getNamedFormat(locale, 'longDate');
	            formatValue =
	                formatDateTime(getLocaleDateTimeFormat(locale, FormatWidth.Long), [longTime, longDate]);
	            break;
	        case 'full':
	            var fullTime = getNamedFormat(locale, 'fullTime');
	            var fullDate = getNamedFormat(locale, 'fullDate');
	            formatValue =
	                formatDateTime(getLocaleDateTimeFormat(locale, FormatWidth.Full), [fullTime, fullDate]);
	            break;
	    }
	    if (formatValue) {
	        NAMED_FORMATS[localeId][format] = formatValue;
	    }
	    return formatValue;
	}
	function formatDateTime(str, opt_values) {
	    if (opt_values) {
	        str = str.replace(/\{([^}]+)}/g, function (match, key) {
	            return (opt_values != null && key in opt_values) ? opt_values[key] : match;
	        });
	    }
	    return str;
	}
	function padNumber(num, digits, minusSign, trim, negWrap) {
	    if (minusSign === void 0) { minusSign = '-'; }
	    var neg = '';
	    if (num < 0 || (negWrap && num <= 0)) {
	        if (negWrap) {
	            num = -num + 1;
	        }
	        else {
	            num = -num;
	            neg = minusSign;
	        }
	    }
	    var strNum = String(num);
	    while (strNum.length < digits) {
	        strNum = '0' + strNum;
	    }
	    if (trim) {
	        strNum = strNum.substr(strNum.length - digits);
	    }
	    return neg + strNum;
	}
	function formatFractionalSeconds(milliseconds, digits) {
	    var strMs = padNumber(milliseconds, 3);
	    return strMs.substr(0, digits);
	}
	/**
	 * Returns a date formatter that transforms a date into its locale digit representation
	 */
	function dateGetter(name, size, offset, trim, negWrap) {
	    if (offset === void 0) { offset = 0; }
	    if (trim === void 0) { trim = false; }
	    if (negWrap === void 0) { negWrap = false; }
	    return function (date, locale) {
	        var part = getDatePart(name, date);
	        if (offset > 0 || part > -offset) {
	            part += offset;
	        }
	        if (name === DateType.Hours) {
	            if (part === 0 && offset === -12) {
	                part = 12;
	            }
	        }
	        else if (name === DateType.FractionalSeconds) {
	            return formatFractionalSeconds(part, size);
	        }
	        var localeMinus = getLocaleNumberSymbol(locale, NumberSymbol.MinusSign);
	        return padNumber(part, size, localeMinus, trim, negWrap);
	    };
	}
	function getDatePart(part, date) {
	    switch (part) {
	        case DateType.FullYear:
	            return date.getFullYear();
	        case DateType.Month:
	            return date.getMonth();
	        case DateType.Date:
	            return date.getDate();
	        case DateType.Hours:
	            return date.getHours();
	        case DateType.Minutes:
	            return date.getMinutes();
	        case DateType.Seconds:
	            return date.getSeconds();
	        case DateType.FractionalSeconds:
	            return date.getMilliseconds();
	        case DateType.Day:
	            return date.getDay();
	        default:
	            throw new Error("Unknown DateType value \"" + part + "\".");
	    }
	}
	/**
	 * Returns a date formatter that transforms a date into its locale string representation
	 */
	function dateStrGetter(name, width, form, extended) {
	    if (form === void 0) { form = FormStyle.Format; }
	    if (extended === void 0) { extended = false; }
	    return function (date, locale) {
	        return getDateTranslation(date, locale, name, width, form, extended);
	    };
	}
	/**
	 * Returns the locale translation of a date for a given form, type and width
	 */
	function getDateTranslation(date, locale, name, width, form, extended) {
	    switch (name) {
	        case TranslationType.Months:
	            return getLocaleMonthNames(locale, form, width)[date.getMonth()];
	        case TranslationType.Days:
	            return getLocaleDayNames(locale, form, width)[date.getDay()];
	        case TranslationType.DayPeriods:
	            var currentHours_1 = date.getHours();
	            var currentMinutes_1 = date.getMinutes();
	            if (extended) {
	                var rules = getLocaleExtraDayPeriodRules(locale);
	                var dayPeriods_1 = getLocaleExtraDayPeriods(locale, form, width);
	                var result_1;
	                rules.forEach(function (rule, index) {
	                    if (Array.isArray(rule)) {
	                        // morning, afternoon, evening, night
	                        var _a = rule[0], hoursFrom = _a.hours, minutesFrom = _a.minutes;
	                        var _b = rule[1], hoursTo = _b.hours, minutesTo = _b.minutes;
	                        if (currentHours_1 >= hoursFrom && currentMinutes_1 >= minutesFrom &&
	                            (currentHours_1 < hoursTo ||
	                                (currentHours_1 === hoursTo && currentMinutes_1 < minutesTo))) {
	                            result_1 = dayPeriods_1[index];
	                        }
	                    }
	                    else { // noon or midnight
	                        var hours = rule.hours, minutes = rule.minutes;
	                        if (hours === currentHours_1 && minutes === currentMinutes_1) {
	                            result_1 = dayPeriods_1[index];
	                        }
	                    }
	                });
	                if (result_1) {
	                    return result_1;
	                }
	            }
	            // if no rules for the day periods, we use am/pm by default
	            return getLocaleDayPeriods(locale, form, width)[currentHours_1 < 12 ? 0 : 1];
	        case TranslationType.Eras:
	            return getLocaleEraNames(locale, width)[date.getFullYear() <= 0 ? 0 : 1];
	        default:
	            // This default case is not needed by TypeScript compiler, as the switch is exhaustive.
	            // However Closure Compiler does not understand that and reports an error in typed mode.
	            // The `throw new Error` below works around the problem, and the unexpected: never variable
	            // makes sure tsc still checks this code is unreachable.
	            var unexpected = name;
	            throw new Error("unexpected translation type " + unexpected);
	    }
	}
	/**
	 * Returns a date formatter that transforms a date and an offset into a timezone with ISO8601 or
	 * GMT format depending on the width (eg: short = +0430, short:GMT = GMT+4, long = GMT+04:30,
	 * extended = +04:30)
	 */
	function timeZoneGetter(width) {
	    return function (date, locale, offset) {
	        var zone = -1 * offset;
	        var minusSign = getLocaleNumberSymbol(locale, NumberSymbol.MinusSign);
	        var hours = zone > 0 ? Math.floor(zone / 60) : Math.ceil(zone / 60);
	        switch (width) {
	            case ZoneWidth.Short:
	                return ((zone >= 0) ? '+' : '') + padNumber(hours, 2, minusSign) +
	                    padNumber(Math.abs(zone % 60), 2, minusSign);
	            case ZoneWidth.ShortGMT:
	                return 'GMT' + ((zone >= 0) ? '+' : '') + padNumber(hours, 1, minusSign);
	            case ZoneWidth.Long:
	                return 'GMT' + ((zone >= 0) ? '+' : '') + padNumber(hours, 2, minusSign) + ':' +
	                    padNumber(Math.abs(zone % 60), 2, minusSign);
	            case ZoneWidth.Extended:
	                if (offset === 0) {
	                    return 'Z';
	                }
	                else {
	                    return ((zone >= 0) ? '+' : '') + padNumber(hours, 2, minusSign) + ':' +
	                        padNumber(Math.abs(zone % 60), 2, minusSign);
	                }
	            default:
	                throw new Error("Unknown zone width \"" + width + "\"");
	        }
	    };
	}
	var JANUARY = 0;
	var THURSDAY = 4;
	function getFirstThursdayOfYear(year) {
	    var firstDayOfYear = (new Date(year, JANUARY, 1)).getDay();
	    return new Date(year, 0, 1 + ((firstDayOfYear <= THURSDAY) ? THURSDAY : THURSDAY + 7) - firstDayOfYear);
	}
	function getThursdayThisWeek(datetime) {
	    return new Date(datetime.getFullYear(), datetime.getMonth(), datetime.getDate() + (THURSDAY - datetime.getDay()));
	}
	function weekGetter(size, monthBased) {
	    if (monthBased === void 0) { monthBased = false; }
	    return function (date, locale) {
	        var result;
	        if (monthBased) {
	            var nbDaysBefore1stDayOfMonth = new Date(date.getFullYear(), date.getMonth(), 1).getDay() - 1;
	            var today = date.getDate();
	            result = 1 + Math.floor((today + nbDaysBefore1stDayOfMonth) / 7);
	        }
	        else {
	            var firstThurs = getFirstThursdayOfYear(date.getFullYear());
	            var thisThurs = getThursdayThisWeek(date);
	            var diff = thisThurs.getTime() - firstThurs.getTime();
	            result = 1 + Math.round(diff / 6.048e8); // 6.048e8 ms per week
	        }
	        return padNumber(result, size, getLocaleNumberSymbol(locale, NumberSymbol.MinusSign));
	    };
	}
	var DATE_FORMATS = {};
	// Based on CLDR formats:
	// See complete list: http://www.unicode.org/reports/tr35/tr35-dates.html#Date_Field_Symbol_Table
	// See also explanations: http://cldr.unicode.org/translation/date-time
	// TODO(ocombe): support all missing cldr formats: Y, U, Q, D, F, e, c, j, J, C, A, v, V, X, x
	function getDateFormatter(format) {
	    if (DATE_FORMATS[format]) {
	        return DATE_FORMATS[format];
	    }
	    var formatter;
	    switch (format) {
	        // Era name (AD/BC)
	        case 'G':
	        case 'GG':
	        case 'GGG':
	            formatter = dateStrGetter(TranslationType.Eras, TranslationWidth.Abbreviated);
	            break;
	        case 'GGGG':
	            formatter = dateStrGetter(TranslationType.Eras, TranslationWidth.Wide);
	            break;
	        case 'GGGGG':
	            formatter = dateStrGetter(TranslationType.Eras, TranslationWidth.Narrow);
	            break;
	        // 1 digit representation of the year, e.g. (AD 1 => 1, AD 199 => 199)
	        case 'y':
	            formatter = dateGetter(DateType.FullYear, 1, 0, false, true);
	            break;
	        // 2 digit representation of the year, padded (00-99). (e.g. AD 2001 => 01, AD 2010 => 10)
	        case 'yy':
	            formatter = dateGetter(DateType.FullYear, 2, 0, true, true);
	            break;
	        // 3 digit representation of the year, padded (000-999). (e.g. AD 2001 => 01, AD 2010 => 10)
	        case 'yyy':
	            formatter = dateGetter(DateType.FullYear, 3, 0, false, true);
	            break;
	        // 4 digit representation of the year (e.g. AD 1 => 0001, AD 2010 => 2010)
	        case 'yyyy':
	            formatter = dateGetter(DateType.FullYear, 4, 0, false, true);
	            break;
	        // Month of the year (1-12), numeric
	        case 'M':
	        case 'L':
	            formatter = dateGetter(DateType.Month, 1, 1);
	            break;
	        case 'MM':
	        case 'LL':
	            formatter = dateGetter(DateType.Month, 2, 1);
	            break;
	        // Month of the year (January, ...), string, format
	        case 'MMM':
	            formatter = dateStrGetter(TranslationType.Months, TranslationWidth.Abbreviated);
	            break;
	        case 'MMMM':
	            formatter = dateStrGetter(TranslationType.Months, TranslationWidth.Wide);
	            break;
	        case 'MMMMM':
	            formatter = dateStrGetter(TranslationType.Months, TranslationWidth.Narrow);
	            break;
	        // Month of the year (January, ...), string, standalone
	        case 'LLL':
	            formatter =
	                dateStrGetter(TranslationType.Months, TranslationWidth.Abbreviated, FormStyle.Standalone);
	            break;
	        case 'LLLL':
	            formatter =
	                dateStrGetter(TranslationType.Months, TranslationWidth.Wide, FormStyle.Standalone);
	            break;
	        case 'LLLLL':
	            formatter =
	                dateStrGetter(TranslationType.Months, TranslationWidth.Narrow, FormStyle.Standalone);
	            break;
	        // Week of the year (1, ... 52)
	        case 'w':
	            formatter = weekGetter(1);
	            break;
	        case 'ww':
	            formatter = weekGetter(2);
	            break;
	        // Week of the month (1, ...)
	        case 'W':
	            formatter = weekGetter(1, true);
	            break;
	        // Day of the month (1-31)
	        case 'd':
	            formatter = dateGetter(DateType.Date, 1);
	            break;
	        case 'dd':
	            formatter = dateGetter(DateType.Date, 2);
	            break;
	        // Day of the Week
	        case 'E':
	        case 'EE':
	        case 'EEE':
	            formatter = dateStrGetter(TranslationType.Days, TranslationWidth.Abbreviated);
	            break;
	        case 'EEEE':
	            formatter = dateStrGetter(TranslationType.Days, TranslationWidth.Wide);
	            break;
	        case 'EEEEE':
	            formatter = dateStrGetter(TranslationType.Days, TranslationWidth.Narrow);
	            break;
	        case 'EEEEEE':
	            formatter = dateStrGetter(TranslationType.Days, TranslationWidth.Short);
	            break;
	        // Generic period of the day (am-pm)
	        case 'a':
	        case 'aa':
	        case 'aaa':
	            formatter = dateStrGetter(TranslationType.DayPeriods, TranslationWidth.Abbreviated);
	            break;
	        case 'aaaa':
	            formatter = dateStrGetter(TranslationType.DayPeriods, TranslationWidth.Wide);
	            break;
	        case 'aaaaa':
	            formatter = dateStrGetter(TranslationType.DayPeriods, TranslationWidth.Narrow);
	            break;
	        // Extended period of the day (midnight, at night, ...), standalone
	        case 'b':
	        case 'bb':
	        case 'bbb':
	            formatter = dateStrGetter(TranslationType.DayPeriods, TranslationWidth.Abbreviated, FormStyle.Standalone, true);
	            break;
	        case 'bbbb':
	            formatter = dateStrGetter(TranslationType.DayPeriods, TranslationWidth.Wide, FormStyle.Standalone, true);
	            break;
	        case 'bbbbb':
	            formatter = dateStrGetter(TranslationType.DayPeriods, TranslationWidth.Narrow, FormStyle.Standalone, true);
	            break;
	        // Extended period of the day (midnight, night, ...), standalone
	        case 'B':
	        case 'BB':
	        case 'BBB':
	            formatter = dateStrGetter(TranslationType.DayPeriods, TranslationWidth.Abbreviated, FormStyle.Format, true);
	            break;
	        case 'BBBB':
	            formatter =
	                dateStrGetter(TranslationType.DayPeriods, TranslationWidth.Wide, FormStyle.Format, true);
	            break;
	        case 'BBBBB':
	            formatter = dateStrGetter(TranslationType.DayPeriods, TranslationWidth.Narrow, FormStyle.Format, true);
	            break;
	        // Hour in AM/PM, (1-12)
	        case 'h':
	            formatter = dateGetter(DateType.Hours, 1, -12);
	            break;
	        case 'hh':
	            formatter = dateGetter(DateType.Hours, 2, -12);
	            break;
	        // Hour of the day (0-23)
	        case 'H':
	            formatter = dateGetter(DateType.Hours, 1);
	            break;
	        // Hour in day, padded (00-23)
	        case 'HH':
	            formatter = dateGetter(DateType.Hours, 2);
	            break;
	        // Minute of the hour (0-59)
	        case 'm':
	            formatter = dateGetter(DateType.Minutes, 1);
	            break;
	        case 'mm':
	            formatter = dateGetter(DateType.Minutes, 2);
	            break;
	        // Second of the minute (0-59)
	        case 's':
	            formatter = dateGetter(DateType.Seconds, 1);
	            break;
	        case 'ss':
	            formatter = dateGetter(DateType.Seconds, 2);
	            break;
	        // Fractional second
	        case 'S':
	            formatter = dateGetter(DateType.FractionalSeconds, 1);
	            break;
	        case 'SS':
	            formatter = dateGetter(DateType.FractionalSeconds, 2);
	            break;
	        case 'SSS':
	            formatter = dateGetter(DateType.FractionalSeconds, 3);
	            break;
	        // Timezone ISO8601 short format (-0430)
	        case 'Z':
	        case 'ZZ':
	        case 'ZZZ':
	            formatter = timeZoneGetter(ZoneWidth.Short);
	            break;
	        // Timezone ISO8601 extended format (-04:30)
	        case 'ZZZZZ':
	            formatter = timeZoneGetter(ZoneWidth.Extended);
	            break;
	        // Timezone GMT short format (GMT+4)
	        case 'O':
	        case 'OO':
	        case 'OOO':
	        // Should be location, but fallback to format O instead because we don't have the data yet
	        case 'z':
	        case 'zz':
	        case 'zzz':
	            formatter = timeZoneGetter(ZoneWidth.ShortGMT);
	            break;
	        // Timezone GMT long format (GMT+0430)
	        case 'OOOO':
	        case 'ZZZZ':
	        // Should be location, but fallback to format O instead because we don't have the data yet
	        case 'zzzz':
	            formatter = timeZoneGetter(ZoneWidth.Long);
	            break;
	        default:
	            return null;
	    }
	    DATE_FORMATS[format] = formatter;
	    return formatter;
	}
	function timezoneToOffset(timezone, fallback) {
	    // Support: IE 9-11 only, Edge 13-15+
	    // IE/Edge do not "understand" colon (`:`) in timezone
	    timezone = timezone.replace(/:/g, '');
	    var requestedTimezoneOffset = Date.parse('Jan 01, 1970 00:00:00 ' + timezone) / 60000;
	    return isNaN(requestedTimezoneOffset) ? fallback : requestedTimezoneOffset;
	}
	function addDateMinutes(date, minutes) {
	    date = new Date(date.getTime());
	    date.setMinutes(date.getMinutes() + minutes);
	    return date;
	}
	function convertTimezoneToLocal(date, timezone, reverse) {
	    var reverseValue = reverse ? -1 : 1;
	    var dateTimezoneOffset = date.getTimezoneOffset();
	    var timezoneOffset = timezoneToOffset(timezone, dateTimezoneOffset);
	    return addDateMinutes(date, reverseValue * (timezoneOffset - dateTimezoneOffset));
	}
	/**
	 * Converts a value to date.
	 *
	 * Supported input formats:
	 * - `Date`
	 * - number: timestamp
	 * - string: numeric (e.g. "1234"), ISO and date strings in a format supported by
	 *   [Date.parse()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/parse).
	 *   Note: ISO strings without time return a date without timeoffset.
	 *
	 * Throws if unable to convert to a date.
	 */
	function toDate(value) {
	    if (isDate(value)) {
	        return value;
	    }
	    if (typeof value === 'number' && !isNaN(value)) {
	        return new Date(value);
	    }
	    if (typeof value === 'string') {
	        value = value.trim();
	        var parsedNb = parseFloat(value);
	        // any string that only contains numbers, like "1234" but not like "1234hello"
	        if (!isNaN(value - parsedNb)) {
	            return new Date(parsedNb);
	        }
	        if (/^(\d{4}-\d{1,2}-\d{1,2})$/.test(value)) {
	            /* For ISO Strings without time the day, month and year must be extracted from the ISO String
	            before Date creation to avoid time offset and errors in the new Date.
	            If we only replace '-' with ',' in the ISO String ("2015,01,01"), and try to create a new
	            date, some browsers (e.g. IE 9) will throw an invalid Date error.
	            If we leave the '-' ("2015-01-01") and try to create a new Date("2015-01-01") the timeoffset
	            is applied.
	            Note: ISO months are 0 for January, 1 for February, ... */
	            var _a = __read(value.split('-').map(function (val) { return +val; }), 3), y = _a[0], m = _a[1], d = _a[2];
	            return new Date(y, m - 1, d);
	        }
	        var match = void 0;
	        if (match = value.match(ISO8601_DATE_REGEX)) {
	            return isoStringToDate(match);
	        }
	    }
	    var date = new Date(value);
	    if (!isDate(date)) {
	        throw new Error("Unable to convert \"" + value + "\" into a date");
	    }
	    return date;
	}
	/**
	 * Converts a date in ISO8601 to a Date.
	 * Used instead of `Date.parse` because of browser discrepancies.
	 */
	function isoStringToDate(match) {
	    var date = new Date(0);
	    var tzHour = 0;
	    var tzMin = 0;
	    // match[8] means that the string contains "Z" (UTC) or a timezone like "+01:00" or "+0100"
	    var dateSetter = match[8] ? date.setUTCFullYear : date.setFullYear;
	    var timeSetter = match[8] ? date.setUTCHours : date.setHours;
	    // if there is a timezone defined like "+01:00" or "+0100"
	    if (match[9]) {
	        tzHour = Number(match[9] + match[10]);
	        tzMin = Number(match[9] + match[11]);
	    }
	    dateSetter.call(date, Number(match[1]), Number(match[2]) - 1, Number(match[3]));
	    var h = Number(match[4] || 0) - tzHour;
	    var m = Number(match[5] || 0) - tzMin;
	    var s = Number(match[6] || 0);
	    var ms = Math.round(parseFloat('0.' + (match[7] || 0)) * 1000);
	    timeSetter.call(date, h, m, s, ms);
	    return date;
	}
	function isDate(value) {
	    return value instanceof Date && !isNaN(value.valueOf());
	}

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	var NUMBER_FORMAT_REGEXP = /^(\d+)?\.((\d+)(-(\d+))?)?$/;
	var MAX_DIGITS = 22;
	var DECIMAL_SEP = '.';
	var ZERO_CHAR = '0';
	var PATTERN_SEP = ';';
	var GROUP_SEP = ',';
	var DIGIT_CHAR = '#';
	var CURRENCY_CHAR = 'Â¤';
	var PERCENT_CHAR = '%';
	/**
	 * Transforms a number to a locale string based on a style and a format.
	 */
	function formatNumberToLocaleString(value, pattern, locale, groupSymbol, decimalSymbol, digitsInfo, isPercent) {
	    if (isPercent === void 0) { isPercent = false; }
	    var formattedText = '';
	    var isZero = false;
	    if (!isFinite(value)) {
	        formattedText = getLocaleNumberSymbol(locale, NumberSymbol.Infinity);
	    }
	    else {
	        var parsedNumber = parseNumber(value);
	        if (isPercent) {
	            parsedNumber = toPercent(parsedNumber);
	        }
	        var minInt = pattern.minInt;
	        var minFraction = pattern.minFrac;
	        var maxFraction = pattern.maxFrac;
	        if (digitsInfo) {
	            var parts = digitsInfo.match(NUMBER_FORMAT_REGEXP);
	            if (parts === null) {
	                throw new Error(digitsInfo + " is not a valid digit info");
	            }
	            var minIntPart = parts[1];
	            var minFractionPart = parts[3];
	            var maxFractionPart = parts[5];
	            if (minIntPart != null) {
	                minInt = parseIntAutoRadix$1(minIntPart);
	            }
	            if (minFractionPart != null) {
	                minFraction = parseIntAutoRadix$1(minFractionPart);
	            }
	            if (maxFractionPart != null) {
	                maxFraction = parseIntAutoRadix$1(maxFractionPart);
	            }
	            else if (minFractionPart != null && minFraction > maxFraction) {
	                maxFraction = minFraction;
	            }
	        }
	        roundNumber(parsedNumber, minFraction, maxFraction);
	        var digits = parsedNumber.digits;
	        var integerLen = parsedNumber.integerLen;
	        var exponent = parsedNumber.exponent;
	        var decimals = [];
	        isZero = digits.every(function (d) { return !d; });
	        // pad zeros for small numbers
	        for (; integerLen < minInt; integerLen++) {
	            digits.unshift(0);
	        }
	        // pad zeros for small numbers
	        for (; integerLen < 0; integerLen++) {
	            digits.unshift(0);
	        }
	        // extract decimals digits
	        if (integerLen > 0) {
	            decimals = digits.splice(integerLen, digits.length);
	        }
	        else {
	            decimals = digits;
	            digits = [0];
	        }
	        // format the integer digits with grouping separators
	        var groups = [];
	        if (digits.length >= pattern.lgSize) {
	            groups.unshift(digits.splice(-pattern.lgSize, digits.length).join(''));
	        }
	        while (digits.length > pattern.gSize) {
	            groups.unshift(digits.splice(-pattern.gSize, digits.length).join(''));
	        }
	        if (digits.length) {
	            groups.unshift(digits.join(''));
	        }
	        formattedText = groups.join(getLocaleNumberSymbol(locale, groupSymbol));
	        // append the decimal digits
	        if (decimals.length) {
	            formattedText += getLocaleNumberSymbol(locale, decimalSymbol) + decimals.join('');
	        }
	        if (exponent) {
	            formattedText += getLocaleNumberSymbol(locale, NumberSymbol.Exponential) + '+' + exponent;
	        }
	    }
	    if (value < 0 && !isZero) {
	        formattedText = pattern.negPre + formattedText + pattern.negSuf;
	    }
	    else {
	        formattedText = pattern.posPre + formattedText + pattern.posSuf;
	    }
	    return formattedText;
	}
	/**
	 * @ngModule CommonModule
	 * @description
	 *
	 * Formats a number as currency using locale rules.
	 *
	 * @param value The number to format.
	 * @param locale A locale code for the locale format rules to use.
	 * @param currency A string containing the currency symbol or its name,
	 * such as "$" or "Canadian Dollar". Used in output string, but does not affect the operation
	 * of the function.
	 * @param currencyCode The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217)
	 * currency code, such as `USD` for the US dollar and `EUR` for the euro.
	 * Used to determine the number of digits in the decimal part.
	 * @param digitInfo Decimal representation options, specified by a string in the following format:
	 * `{minIntegerDigits}.{minFractionDigits}-{maxFractionDigits}`. See `DecimalPipe` for more details.
	 *
	 * @returns The formatted currency value.
	 *
	 * @see `formatNumber()`
	 * @see `DecimalPipe`
	 * @see [Internationalization (i18n) Guide](https://angular.io/guide/i18n)
	 *
	 * @publicApi
	 */
	function formatCurrency(value, locale, currency, currencyCode, digitsInfo) {
	    var format = getLocaleNumberFormat(locale, NumberFormatStyle.Currency);
	    var pattern = parseNumberFormat(format, getLocaleNumberSymbol(locale, NumberSymbol.MinusSign));
	    pattern.minFrac = getNumberOfCurrencyDigits(currencyCode);
	    pattern.maxFrac = pattern.minFrac;
	    var res = formatNumberToLocaleString(value, pattern, locale, NumberSymbol.CurrencyGroup, NumberSymbol.CurrencyDecimal, digitsInfo);
	    return res
	        .replace(CURRENCY_CHAR, currency)
	        // if we have 2 time the currency character, the second one is ignored
	        .replace(CURRENCY_CHAR, '')
	        // If there is a spacing between currency character and the value and
	        // the currency character is supressed by passing an empty string, the
	        // spacing character would remain as part of the string. Then we
	        // should remove it.
	        .trim();
	}
	/**
	 * @ngModule CommonModule
	 * @description
	 *
	 * Formats a number as a percentage according to locale rules.
	 *
	 * @param value The number to format.
	 * @param locale A locale code for the locale format rules to use.
	 * @param digitInfo Decimal representation options, specified by a string in the following format:
	 * `{minIntegerDigits}.{minFractionDigits}-{maxFractionDigits}`. See `DecimalPipe` for more details.
	 *
	 * @returns The formatted percentage value.
	 *
	 * @see `formatNumber()`
	 * @see `DecimalPipe`
	 * @see [Internationalization (i18n) Guide](https://angular.io/guide/i18n)
	 * @publicApi
	 *
	 */
	function formatPercent(value, locale, digitsInfo) {
	    var format = getLocaleNumberFormat(locale, NumberFormatStyle.Percent);
	    var pattern = parseNumberFormat(format, getLocaleNumberSymbol(locale, NumberSymbol.MinusSign));
	    var res = formatNumberToLocaleString(value, pattern, locale, NumberSymbol.Group, NumberSymbol.Decimal, digitsInfo, true);
	    return res.replace(new RegExp(PERCENT_CHAR, 'g'), getLocaleNumberSymbol(locale, NumberSymbol.PercentSign));
	}
	/**
	 * @ngModule CommonModule
	 * @description
	 *
	 * Formats a number as text, with group sizing, separator, and other
	 * parameters based on the locale.
	 *
	 * @param value The number to format.
	 * @param locale A locale code for the locale format rules to use.
	 * @param digitInfo Decimal representation options, specified by a string in the following format:
	 * `{minIntegerDigits}.{minFractionDigits}-{maxFractionDigits}`. See `DecimalPipe` for more details.
	 *
	 * @returns The formatted text string.
	 * @see [Internationalization (i18n) Guide](https://angular.io/guide/i18n)
	 *
	 * @publicApi
	 */
	function formatNumber(value, locale, digitsInfo) {
	    var format = getLocaleNumberFormat(locale, NumberFormatStyle.Decimal);
	    var pattern = parseNumberFormat(format, getLocaleNumberSymbol(locale, NumberSymbol.MinusSign));
	    return formatNumberToLocaleString(value, pattern, locale, NumberSymbol.Group, NumberSymbol.Decimal, digitsInfo);
	}
	function parseNumberFormat(format, minusSign) {
	    if (minusSign === void 0) { minusSign = '-'; }
	    var p = {
	        minInt: 1,
	        minFrac: 0,
	        maxFrac: 0,
	        posPre: '',
	        posSuf: '',
	        negPre: '',
	        negSuf: '',
	        gSize: 0,
	        lgSize: 0
	    };
	    var patternParts = format.split(PATTERN_SEP);
	    var positive = patternParts[0];
	    var negative = patternParts[1];
	    var positiveParts = positive.indexOf(DECIMAL_SEP) !== -1 ?
	        positive.split(DECIMAL_SEP) :
	        [
	            positive.substring(0, positive.lastIndexOf(ZERO_CHAR) + 1),
	            positive.substring(positive.lastIndexOf(ZERO_CHAR) + 1)
	        ], integer = positiveParts[0], fraction = positiveParts[1] || '';
	    p.posPre = integer.substr(0, integer.indexOf(DIGIT_CHAR));
	    for (var i = 0; i < fraction.length; i++) {
	        var ch = fraction.charAt(i);
	        if (ch === ZERO_CHAR) {
	            p.minFrac = p.maxFrac = i + 1;
	        }
	        else if (ch === DIGIT_CHAR) {
	            p.maxFrac = i + 1;
	        }
	        else {
	            p.posSuf += ch;
	        }
	    }
	    var groups = integer.split(GROUP_SEP);
	    p.gSize = groups[1] ? groups[1].length : 0;
	    p.lgSize = (groups[2] || groups[1]) ? (groups[2] || groups[1]).length : 0;
	    if (negative) {
	        var trunkLen = positive.length - p.posPre.length - p.posSuf.length, pos = negative.indexOf(DIGIT_CHAR);
	        p.negPre = negative.substr(0, pos).replace(/'/g, '');
	        p.negSuf = negative.substr(pos + trunkLen).replace(/'/g, '');
	    }
	    else {
	        p.negPre = minusSign + p.posPre;
	        p.negSuf = p.posSuf;
	    }
	    return p;
	}
	// Transforms a parsed number into a percentage by multiplying it by 100
	function toPercent(parsedNumber) {
	    // if the number is 0, don't do anything
	    if (parsedNumber.digits[0] === 0) {
	        return parsedNumber;
	    }
	    // Getting the current number of decimals
	    var fractionLen = parsedNumber.digits.length - parsedNumber.integerLen;
	    if (parsedNumber.exponent) {
	        parsedNumber.exponent += 2;
	    }
	    else {
	        if (fractionLen === 0) {
	            parsedNumber.digits.push(0, 0);
	        }
	        else if (fractionLen === 1) {
	            parsedNumber.digits.push(0);
	        }
	        parsedNumber.integerLen += 2;
	    }
	    return parsedNumber;
	}
	/**
	 * Parses a number.
	 * Significant bits of this parse algorithm came from https://github.com/MikeMcl/big.js/
	 */
	function parseNumber(num) {
	    var numStr = Math.abs(num) + '';
	    var exponent = 0, digits, integerLen;
	    var i, j, zeros;
	    // Decimal point?
	    if ((integerLen = numStr.indexOf(DECIMAL_SEP)) > -1) {
	        numStr = numStr.replace(DECIMAL_SEP, '');
	    }
	    // Exponential form?
	    if ((i = numStr.search(/e/i)) > 0) {
	        // Work out the exponent.
	        if (integerLen < 0)
	            integerLen = i;
	        integerLen += +numStr.slice(i + 1);
	        numStr = numStr.substring(0, i);
	    }
	    else if (integerLen < 0) {
	        // There was no decimal point or exponent so it is an integer.
	        integerLen = numStr.length;
	    }
	    // Count the number of leading zeros.
	    for (i = 0; numStr.charAt(i) === ZERO_CHAR; i++) { /* empty */
	    }
	    if (i === (zeros = numStr.length)) {
	        // The digits are all zero.
	        digits = [0];
	        integerLen = 1;
	    }
	    else {
	        // Count the number of trailing zeros
	        zeros--;
	        while (numStr.charAt(zeros) === ZERO_CHAR)
	            zeros--;
	        // Trailing zeros are insignificant so ignore them
	        integerLen -= i;
	        digits = [];
	        // Convert string to array of digits without leading/trailing zeros.
	        for (j = 0; i <= zeros; i++, j++) {
	            digits[j] = Number(numStr.charAt(i));
	        }
	    }
	    // If the number overflows the maximum allowed digits then use an exponent.
	    if (integerLen > MAX_DIGITS) {
	        digits = digits.splice(0, MAX_DIGITS - 1);
	        exponent = integerLen - 1;
	        integerLen = 1;
	    }
	    return { digits: digits, exponent: exponent, integerLen: integerLen };
	}
	/**
	 * Round the parsed number to the specified number of decimal places
	 * This function changes the parsedNumber in-place
	 */
	function roundNumber(parsedNumber, minFrac, maxFrac) {
	    if (minFrac > maxFrac) {
	        throw new Error("The minimum number of digits after fraction (" + minFrac + ") is higher than the maximum (" + maxFrac + ").");
	    }
	    var digits = parsedNumber.digits;
	    var fractionLen = digits.length - parsedNumber.integerLen;
	    var fractionSize = Math.min(Math.max(minFrac, fractionLen), maxFrac);
	    // The index of the digit to where rounding is to occur
	    var roundAt = fractionSize + parsedNumber.integerLen;
	    var digit = digits[roundAt];
	    if (roundAt > 0) {
	        // Drop fractional digits beyond `roundAt`
	        digits.splice(Math.max(parsedNumber.integerLen, roundAt));
	        // Set non-fractional digits beyond `roundAt` to 0
	        for (var j = roundAt; j < digits.length; j++) {
	            digits[j] = 0;
	        }
	    }
	    else {
	        // We rounded to zero so reset the parsedNumber
	        fractionLen = Math.max(0, fractionLen);
	        parsedNumber.integerLen = 1;
	        digits.length = Math.max(1, roundAt = fractionSize + 1);
	        digits[0] = 0;
	        for (var i = 1; i < roundAt; i++)
	            digits[i] = 0;
	    }
	    if (digit >= 5) {
	        if (roundAt - 1 < 0) {
	            for (var k = 0; k > roundAt; k--) {
	                digits.unshift(0);
	                parsedNumber.integerLen++;
	            }
	            digits.unshift(1);
	            parsedNumber.integerLen++;
	        }
	        else {
	            digits[roundAt - 1]++;
	        }
	    }
	    // Pad out with zeros to get the required fraction length
	    for (; fractionLen < Math.max(0, fractionSize); fractionLen++)
	        digits.push(0);
	    var dropTrailingZeros = fractionSize !== 0;
	    // Minimal length = nb of decimals required + current nb of integers
	    // Any number besides that is optional and can be removed if it's a trailing 0
	    var minLen = minFrac + parsedNumber.integerLen;
	    // Do any carrying, e.g. a digit was rounded up to 10
	    var carry = digits.reduceRight(function (carry, d, i, digits) {
	        d = d + carry;
	        digits[i] = d < 10 ? d : d - 10; // d % 10
	        if (dropTrailingZeros) {
	            // Do not keep meaningless fractional trailing zeros (e.g. 15.52000 --> 15.52)
	            if (digits[i] === 0 && i >= minLen) {
	                digits.pop();
	            }
	            else {
	                dropTrailingZeros = false;
	            }
	        }
	        return d >= 10 ? 1 : 0; // Math.floor(d / 10);
	    }, 0);
	    if (carry) {
	        digits.unshift(carry);
	        parsedNumber.integerLen++;
	    }
	}
	function parseIntAutoRadix$1(text) {
	    var result = parseInt(text);
	    if (isNaN(result)) {
	        throw new Error('Invalid integer literal when parsing ' + text);
	    }
	    return result;
	}

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * @publicApi
	 */
	var NgLocalization = /** @class */ (function () {
	    function NgLocalization() {
	    }
	    return NgLocalization;
	}());
	/**
	 * Returns the plural category for a given value.
	 * - "=value" when the case exists,
	 * - the plural category otherwise
	 */
	function getPluralCategory(value, cases, ngLocalization, locale) {
	    var key = "=" + value;
	    if (cases.indexOf(key) > -1) {
	        return key;
	    }
	    key = ngLocalization.getPluralCategory(value, locale);
	    if (cases.indexOf(key) > -1) {
	        return key;
	    }
	    if (cases.indexOf('other') > -1) {
	        return 'other';
	    }
	    throw new Error("No plural message found for value \"" + value + "\"");
	}
	/**
	 * Returns the plural case based on the locale
	 *
	 * @publicApi
	 */
	var NgLocaleLocalization = /** @class */ (function (_super) {
	    __extends(NgLocaleLocalization, _super);
	    function NgLocaleLocalization(locale) {
	        var _this = _super.call(this) || this;
	        _this.locale = locale;
	        return _this;
	    }
	    NgLocaleLocalization.prototype.getPluralCategory = function (value, locale) {
	        var plural = getLocalePluralCase$1(locale || this.locale)(value);
	        switch (plural) {
	            case Plural.Zero:
	                return 'zero';
	            case Plural.One:
	                return 'one';
	            case Plural.Two:
	                return 'two';
	            case Plural.Few:
	                return 'few';
	            case Plural.Many:
	                return 'many';
	            default:
	                return 'other';
	        }
	    };
	    NgLocaleLocalization = __decorate([
	        Injectable(),
	        __param(0, Inject(LOCALE_ID$1)),
	        __metadata("design:paramtypes", [String])
	    ], NgLocaleLocalization);
	    return NgLocaleLocalization;
	}(NgLocalization));

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	function parseCookieValue(cookieStr, name) {
	    var e_1, _a;
	    name = encodeURIComponent(name);
	    try {
	        for (var _b = __values(cookieStr.split(';')), _c = _b.next(); !_c.done; _c = _b.next()) {
	            var cookie = _c.value;
	            var eqIndex = cookie.indexOf('=');
	            var _d = __read(eqIndex == -1 ? [cookie, ''] : [cookie.slice(0, eqIndex), cookie.slice(eqIndex + 1)], 2), cookieName = _d[0], cookieValue = _d[1];
	            if (cookieName.trim() === name) {
	                return decodeURIComponent(cookieValue);
	            }
	        }
	    }
	    catch (e_1_1) { e_1 = { error: e_1_1 }; }
	    finally {
	        try {
	            if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
	        }
	        finally { if (e_1) throw e_1.error; }
	    }
	    return null;
	}

	/**
	 * @ngModule CommonModule
	 *
	 * @usageNotes
	 * ```
	 *     <some-element [ngClass]="'first second'">...</some-element>
	 *
	 *     <some-element [ngClass]="['first', 'second']">...</some-element>
	 *
	 *     <some-element [ngClass]="{'first': true, 'second': true, 'third': false}">...</some-element>
	 *
	 *     <some-element [ngClass]="stringExp|arrayExp|objExp">...</some-element>
	 *
	 *     <some-element [ngClass]="{'class1 class2 class3' : true}">...</some-element>
	 * ```
	 *
	 * @description
	 *
	 * Adds and removes CSS classes on an HTML element.
	 *
	 * The CSS classes are updated as follows, depending on the type of the expression evaluation:
	 * - `string` - the CSS classes listed in the string (space delimited) are added,
	 * - `Array` - the CSS classes declared as Array elements are added,
	 * - `Object` - keys are CSS classes that get added when the expression given in the value
	 *              evaluates to a truthy value, otherwise they are removed.
	 *
	 * @publicApi
	 */
	var NgClass = /** @class */ (function () {
	    function NgClass(_iterableDiffers, _keyValueDiffers, _ngEl, _renderer) {
	        this._iterableDiffers = _iterableDiffers;
	        this._keyValueDiffers = _keyValueDiffers;
	        this._ngEl = _ngEl;
	        this._renderer = _renderer;
	        this._iterableDiffer = null;
	        this._keyValueDiffer = null;
	        this._initialClasses = [];
	        this._rawClass = null;
	    }
	    Object.defineProperty(NgClass.prototype, "klass", {
	        set: function (value) {
	            this._removeClasses(this._initialClasses);
	            this._initialClasses = typeof value === 'string' ? value.split(/\s+/) : [];
	            this._applyClasses(this._initialClasses);
	            this._applyClasses(this._rawClass);
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(NgClass.prototype, "ngClass", {
	        set: function (value) {
	            this._removeClasses(this._rawClass);
	            this._applyClasses(this._initialClasses);
	            this._iterableDiffer = null;
	            this._keyValueDiffer = null;
	            this._rawClass = typeof value === 'string' ? value.split(/\s+/) : value;
	            if (this._rawClass) {
	                if (isListLikeIterable$1(this._rawClass)) {
	                    this._iterableDiffer = this._iterableDiffers.find(this._rawClass).create();
	                }
	                else {
	                    this._keyValueDiffer = this._keyValueDiffers.find(this._rawClass).create();
	                }
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    NgClass.prototype.ngDoCheck = function () {
	        if (this._iterableDiffer) {
	            var iterableChanges = this._iterableDiffer.diff(this._rawClass);
	            if (iterableChanges) {
	                this._applyIterableChanges(iterableChanges);
	            }
	        }
	        else if (this._keyValueDiffer) {
	            var keyValueChanges = this._keyValueDiffer.diff(this._rawClass);
	            if (keyValueChanges) {
	                this._applyKeyValueChanges(keyValueChanges);
	            }
	        }
	    };
	    NgClass.prototype._applyKeyValueChanges = function (changes) {
	        var _this = this;
	        changes.forEachAddedItem(function (record) { return _this._toggleClass(record.key, record.currentValue); });
	        changes.forEachChangedItem(function (record) { return _this._toggleClass(record.key, record.currentValue); });
	        changes.forEachRemovedItem(function (record) {
	            if (record.previousValue) {
	                _this._toggleClass(record.key, false);
	            }
	        });
	    };
	    NgClass.prototype._applyIterableChanges = function (changes) {
	        var _this = this;
	        changes.forEachAddedItem(function (record) {
	            if (typeof record.item === 'string') {
	                _this._toggleClass(record.item, true);
	            }
	            else {
	                throw new Error("NgClass can only toggle CSS classes expressed as strings, got " + stringify$1(record.item));
	            }
	        });
	        changes.forEachRemovedItem(function (record) { return _this._toggleClass(record.item, false); });
	    };
	    /**
	     * Applies a collection of CSS classes to the DOM element.
	     *
	     * For argument of type Set and Array CSS class names contained in those collections are always
	     * added.
	     * For argument of type Map CSS class name in the map's key is toggled based on the value (added
	     * for truthy and removed for falsy).
	     */
	    NgClass.prototype._applyClasses = function (rawClassVal) {
	        var _this = this;
	        if (rawClassVal) {
	            if (Array.isArray(rawClassVal) || rawClassVal instanceof Set) {
	                rawClassVal.forEach(function (klass) { return _this._toggleClass(klass, true); });
	            }
	            else {
	                Object.keys(rawClassVal).forEach(function (klass) { return _this._toggleClass(klass, !!rawClassVal[klass]); });
	            }
	        }
	    };
	    /**
	     * Removes a collection of CSS classes from the DOM element. This is mostly useful for cleanup
	     * purposes.
	     */
	    NgClass.prototype._removeClasses = function (rawClassVal) {
	        var _this = this;
	        if (rawClassVal) {
	            if (Array.isArray(rawClassVal) || rawClassVal instanceof Set) {
	                rawClassVal.forEach(function (klass) { return _this._toggleClass(klass, false); });
	            }
	            else {
	                Object.keys(rawClassVal).forEach(function (klass) { return _this._toggleClass(klass, false); });
	            }
	        }
	    };
	    NgClass.prototype._toggleClass = function (klass, enabled) {
	        var _this = this;
	        klass = klass.trim();
	        if (klass) {
	            klass.split(/\s+/g).forEach(function (klass) {
	                if (enabled) {
	                    _this._renderer.addClass(_this._ngEl.nativeElement, klass);
	                }
	                else {
	                    _this._renderer.removeClass(_this._ngEl.nativeElement, klass);
	                }
	            });
	        }
	    };
	    __decorate([
	        Input('class'),
	        __metadata("design:type", String),
	        __metadata("design:paramtypes", [String])
	    ], NgClass.prototype, "klass", null);
	    __decorate([
	        Input('ngClass'),
	        __metadata("design:type", Object),
	        __metadata("design:paramtypes", [Object])
	    ], NgClass.prototype, "ngClass", null);
	    NgClass = __decorate([
	        Directive({ selector: '[ngClass]' }),
	        __metadata("design:paramtypes", [IterableDiffers, KeyValueDiffers,
	            ElementRef, Renderer2])
	    ], NgClass);
	    return NgClass;
	}());

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * Instantiates a single {@link Component} type and inserts its Host View into current View.
	 * `NgComponentOutlet` provides a declarative approach for dynamic component creation.
	 *
	 * `NgComponentOutlet` requires a component type, if a falsy value is set the view will clear and
	 * any existing component will get destroyed.
	 *
	 * @usageNotes
	 *
	 * ### Fine tune control
	 *
	 * You can control the component creation process by using the following optional attributes:
	 *
	 * * `ngComponentOutletInjector`: Optional custom {@link Injector} that will be used as parent for
	 * the Component. Defaults to the injector of the current view container.
	 *
	 * * `ngComponentOutletContent`: Optional list of projectable nodes to insert into the content
	 * section of the component, if exists.
	 *
	 * * `ngComponentOutletNgModuleFactory`: Optional module factory to allow dynamically loading other
	 * module, then load a component from that module.
	 *
	 * ### Syntax
	 *
	 * Simple
	 * ```
	 * <ng-container *ngComponentOutlet="componentTypeExpression"></ng-container>
	 * ```
	 *
	 * Customized injector/content
	 * ```
	 * <ng-container *ngComponentOutlet="componentTypeExpression;
	 *                                   injector: injectorExpression;
	 *                                   content: contentNodesExpression;">
	 * </ng-container>
	 * ```
	 *
	 * Customized ngModuleFactory
	 * ```
	 * <ng-container *ngComponentOutlet="componentTypeExpression;
	 *                                   ngModuleFactory: moduleFactory;">
	 * </ng-container>
	 * ```
	 *
	 * ### A simple example
	 *
	 * {@example common/ngComponentOutlet/ts/module.ts region='SimpleExample'}
	 *
	 * A more complete example with additional options:
	 *
	 * {@example common/ngComponentOutlet/ts/module.ts region='CompleteExample'}
	 *
	 * @publicApi
	 * @ngModule CommonModule
	 */
	var NgComponentOutlet = /** @class */ (function () {
	    function NgComponentOutlet(_viewContainerRef) {
	        this._viewContainerRef = _viewContainerRef;
	        this._componentRef = null;
	        this._moduleRef = null;
	    }
	    NgComponentOutlet.prototype.ngOnChanges = function (changes) {
	        this._viewContainerRef.clear();
	        this._componentRef = null;
	        if (this.ngComponentOutlet) {
	            var elInjector = this.ngComponentOutletInjector || this._viewContainerRef.parentInjector;
	            if (changes['ngComponentOutletNgModuleFactory']) {
	                if (this._moduleRef)
	                    this._moduleRef.destroy();
	                if (this.ngComponentOutletNgModuleFactory) {
	                    var parentModule = elInjector.get(NgModuleRef);
	                    this._moduleRef = this.ngComponentOutletNgModuleFactory.create(parentModule.injector);
	                }
	                else {
	                    this._moduleRef = null;
	                }
	            }
	            var componentFactoryResolver = this._moduleRef ? this._moduleRef.componentFactoryResolver :
	                elInjector.get(ComponentFactoryResolver);
	            var componentFactory = componentFactoryResolver.resolveComponentFactory(this.ngComponentOutlet);
	            this._componentRef = this._viewContainerRef.createComponent(componentFactory, this._viewContainerRef.length, elInjector, this.ngComponentOutletContent);
	        }
	    };
	    NgComponentOutlet.prototype.ngOnDestroy = function () {
	        if (this._moduleRef)
	            this._moduleRef.destroy();
	    };
	    __decorate([
	        Input(),
	        __metadata("design:type", Type$2)
	    ], NgComponentOutlet.prototype, "ngComponentOutlet", void 0);
	    __decorate([
	        Input(),
	        __metadata("design:type", Injector)
	    ], NgComponentOutlet.prototype, "ngComponentOutletInjector", void 0);
	    __decorate([
	        Input(),
	        __metadata("design:type", Array)
	    ], NgComponentOutlet.prototype, "ngComponentOutletContent", void 0);
	    __decorate([
	        Input(),
	        __metadata("design:type", NgModuleFactory)
	    ], NgComponentOutlet.prototype, "ngComponentOutletNgModuleFactory", void 0);
	    NgComponentOutlet = __decorate([
	        Directive({ selector: '[ngComponentOutlet]' }),
	        __metadata("design:paramtypes", [ViewContainerRef])
	    ], NgComponentOutlet);
	    return NgComponentOutlet;
	}());

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * @publicApi
	 */
	var NgForOfContext = /** @class */ (function () {
	    function NgForOfContext($implicit, ngForOf, index, count) {
	        this.$implicit = $implicit;
	        this.ngForOf = ngForOf;
	        this.index = index;
	        this.count = count;
	    }
	    Object.defineProperty(NgForOfContext.prototype, "first", {
	        get: function () {
	            return this.index === 0;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(NgForOfContext.prototype, "last", {
	        get: function () {
	            return this.index === this.count - 1;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(NgForOfContext.prototype, "even", {
	        get: function () {
	            return this.index % 2 === 0;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(NgForOfContext.prototype, "odd", {
	        get: function () {
	            return !this.even;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    return NgForOfContext;
	}());
	/**
	 * A [structural directive](guide/structural-directives) that renders
	 * a template for each item in a collection.
	 * The directive is placed on an element, which becomes the parent
	 * of the cloned templates.
	 *
	 * The `ngForOf` directive is generally used in the
	 * [shorthand form](guide/structural-directives#the-asterisk--prefix) `*ngFor`.
	 * In this form, the template to be rendered for each iteration is the content
	 * of an anchor element containing the directive.
	 *
	 * The following example shows the shorthand syntax with some options,
	 * contained in an `<li>` element.
	 *
	 * ```
	 * <li *ngFor="let item of items; index as i; trackBy: trackByFn">...</li>
	 * ```
	 *
	 * The shorthand form expands into a long form that uses the `ngForOf` selector
	 * on an `<ng-template>` element.
	 * The content of the `<ng-template>` element is the `<li>` element that held the
	 * short-form directive.
	 *
	 * Here is the expanded version of the short-form example.
	 *
	 * ```
	 * <ng-template ngFor let-item [ngForOf]="items" let-i="index" [ngForTrackBy]="trackByFn">
	 *   <li>...</li>
	 * </ng-template>
	 * ```
	 *
	 * Angular automatically expands the shorthand syntax as it compiles the template.
	 * The context for each embedded view is logically merged to the current component
	 * context according to its lexical position.
	 *
	 * When using the shorthand syntax, Angular allows only [one structural directive
	 * on an element](guide/structural-directives#one-structural-directive-per-host-element).
	 * If you want to iterate conditionally, for example,
	 * put the `*ngIf` on a container element that wraps the `*ngFor` element.
	 * For futher discussion, see
	 * [Structural Directives](guide/structural-directives#one-per-element).
	 *
	 * @usageNotes
	 *
	 * ### Local variables
	 *
	 * `NgForOf` provides exported values that can be aliased to local variables.
	 * For example:
	 *
	 *  ```
	 * <li *ngFor="let user of users; index as i; first as isFirst">
	 *    {{i}}/{{users.length}}. {{user}} <span *ngIf="isFirst">default</span>
	 * </li>
	 * ```
	 *
	 * The following exported values can be aliased to local variables:
	 *
	 * - `$implicit: T`: The value of the individual items in the iterable (`ngForOf`).
	 * - `ngForOf: NgIterable<T>`: The value of the iterable expression. Useful when the expression is
	 * more complex then a property access, for example when using the async pipe (`userStreams |
	 * async`).
	 * - `index: number`: The index of the current item in the iterable.
	 * - `count: number`: The length of the iterable.
	 * - `first: boolean`: True when the item is the first item in the iterable.
	 * - `last: boolean`: True when the item is the last item in the iterable.
	 * - `even: boolean`: True when the item has an even index in the iterable.
	 * - `odd: boolean`: True when the item has an odd index in the iterable.
	 *
	 * ### Change propagation
	 *
	 * When the contents of the iterator changes, `NgForOf` makes the corresponding changes to the DOM:
	 *
	 * * When an item is added, a new instance of the template is added to the DOM.
	 * * When an item is removed, its template instance is removed from the DOM.
	 * * When items are reordered, their respective templates are reordered in the DOM.
	 *
	 * Angular uses object identity to track insertions and deletions within the iterator and reproduce
	 * those changes in the DOM. This has important implications for animations and any stateful
	 * controls that are present, such as `<input>` elements that accept user input. Inserted rows can
	 * be animated in, deleted rows can be animated out, and unchanged rows retain any unsaved state
	 * such as user input.
	 * For more on animations, see [Transitions and Triggers](guide/transition-and-triggers).
	 *
	 * The identities of elements in the iterator can change while the data does not.
	 * This can happen, for example, if the iterator is produced from an RPC to the server, and that
	 * RPC is re-run. Even if the data hasn't changed, the second response produces objects with
	 * different identities, and Angular must tear down the entire DOM and rebuild it (as if all old
	 * elements were deleted and all new elements inserted).
	 *
	 * To avoid this expensive operation, you can customize the default tracking algorithm.
	 * by supplying the `trackBy` option to `NgForOf`.
	 * `trackBy` takes a function that has two arguments: `index` and `item`.
	 * If `trackBy` is given, Angular tracks changes by the return value of the function.
	 *
	 * @see [Structural Directives](guide/structural-directives)
	 * @ngModule CommonModule
	 * @publicApi
	 */
	var NgForOf = /** @class */ (function () {
	    function NgForOf(_viewContainer, _template, _differs) {
	        this._viewContainer = _viewContainer;
	        this._template = _template;
	        this._differs = _differs;
	        this._ngForOf = null;
	        this._ngForOfDirty = true;
	        this._differ = null;
	    }
	    Object.defineProperty(NgForOf.prototype, "ngForOf", {
	        /**
	         * The value of the iterable expression, which can be used as a
	         * [template input variable](guide/structural-directives#template-input-variable).
	         */
	        set: function (ngForOf) {
	            this._ngForOf = ngForOf;
	            this._ngForOfDirty = true;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(NgForOf.prototype, "ngForTrackBy", {
	        get: function () {
	            return this._trackByFn;
	        },
	        /**
	         * A function that defines how to track changes for items in the iterable.
	         *
	         * When items are added, moved, or removed in the iterable,
	         * the directive must re-render the appropriate DOM nodes.
	         * To minimize churn in the DOM, only nodes that have changed
	         * are re-rendered.
	         *
	         * By default, the change detector assumes that
	         * the object instance identifies the node in the iterable.
	         * When this function is supplied, the directive uses
	         * the result of calling this function to identify the item node,
	         * rather than the identity of the object itself.
	         *
	         * The function receives two inputs,
	         * the iteration index and the node object ID.
	         */
	        set: function (fn) {
	            if ( fn != null && typeof fn !== 'function') {
	                // TODO(vicb): use a log service once there is a public one available
	                if (console && console.warn) {
	                    console.warn("trackBy must be a function, but received " + JSON.stringify(fn) + ". " +
	                        "See https://angular.io/api/common/NgForOf#change-propagation for more information.");
	                }
	            }
	            this._trackByFn = fn;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(NgForOf.prototype, "ngForTemplate", {
	        /**
	         * A reference to the template that is stamped out for each item in the iterable.
	         * @see [template reference variable](guide/template-syntax#template-reference-variables--var-)
	         */
	        set: function (value) {
	            // TODO(TS2.1): make TemplateRef<Partial<NgForRowOf<T>>> once we move to TS v2.1
	            // The current type is too restrictive; a template that just uses index, for example,
	            // should be acceptable.
	            if (value) {
	                this._template = value;
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    /**
	     * Applies the changes when needed.
	     */
	    NgForOf.prototype.ngDoCheck = function () {
	        if (this._ngForOfDirty) {
	            this._ngForOfDirty = false;
	            // React on ngForOf changes only once all inputs have been initialized
	            var value = this._ngForOf;
	            if (!this._differ && value) {
	                try {
	                    this._differ = this._differs.find(value).create(this.ngForTrackBy);
	                }
	                catch (_a) {
	                    throw new Error("Cannot find a differ supporting object '" + value + "' of type '" + getTypeName$1(value) + "'. NgFor only supports binding to Iterables such as Arrays.");
	                }
	            }
	        }
	        if (this._differ) {
	            var changes = this._differ.diff(this._ngForOf);
	            if (changes)
	                this._applyChanges(changes);
	        }
	    };
	    NgForOf.prototype._applyChanges = function (changes) {
	        var _this = this;
	        var insertTuples = [];
	        changes.forEachOperation(function (item, adjustedPreviousIndex, currentIndex) {
	            if (item.previousIndex == null) {
	                // NgForOf is never "null" or "undefined" here because the differ detected
	                // that a new item needs to be inserted from the iterable. This implies that
	                // there is an iterable value for "_ngForOf".
	                var view = _this._viewContainer.createEmbeddedView(_this._template, new NgForOfContext(null, _this._ngForOf, -1, -1), currentIndex === null ? undefined : currentIndex);
	                var tuple = new RecordViewTuple(item, view);
	                insertTuples.push(tuple);
	            }
	            else if (currentIndex == null) {
	                _this._viewContainer.remove(adjustedPreviousIndex === null ? undefined : adjustedPreviousIndex);
	            }
	            else if (adjustedPreviousIndex !== null) {
	                var view = _this._viewContainer.get(adjustedPreviousIndex);
	                _this._viewContainer.move(view, currentIndex);
	                var tuple = new RecordViewTuple(item, view);
	                insertTuples.push(tuple);
	            }
	        });
	        for (var i = 0; i < insertTuples.length; i++) {
	            this._perViewChange(insertTuples[i].view, insertTuples[i].record);
	        }
	        for (var i = 0, ilen = this._viewContainer.length; i < ilen; i++) {
	            var viewRef = this._viewContainer.get(i);
	            viewRef.context.index = i;
	            viewRef.context.count = ilen;
	            viewRef.context.ngForOf = this._ngForOf;
	        }
	        changes.forEachIdentityChange(function (record) {
	            var viewRef = _this._viewContainer.get(record.currentIndex);
	            viewRef.context.$implicit = record.item;
	        });
	    };
	    NgForOf.prototype._perViewChange = function (view, record) {
	        view.context.$implicit = record.item;
	    };
	    /**
	     * Asserts the correct type of the context for the template that `NgForOf` will render.
	     *
	     * The presence of this method is a signal to the Ivy template type-check compiler that the
	     * `NgForOf` structural directive renders its template with a specific context type.
	     */
	    NgForOf.ngTemplateContextGuard = function (dir, ctx) {
	        return true;
	    };
	    __decorate([
	        Input(),
	        __metadata("design:type", Object),
	        __metadata("design:paramtypes", [Object])
	    ], NgForOf.prototype, "ngForOf", null);
	    __decorate([
	        Input(),
	        __metadata("design:type", Function),
	        __metadata("design:paramtypes", [Function])
	    ], NgForOf.prototype, "ngForTrackBy", null);
	    __decorate([
	        Input(),
	        __metadata("design:type", TemplateRef),
	        __metadata("design:paramtypes", [TemplateRef])
	    ], NgForOf.prototype, "ngForTemplate", null);
	    NgForOf = __decorate([
	        Directive({ selector: '[ngFor][ngForOf]' }),
	        __metadata("design:paramtypes", [ViewContainerRef,
	            TemplateRef, IterableDiffers])
	    ], NgForOf);
	    return NgForOf;
	}());
	var RecordViewTuple = /** @class */ (function () {
	    function RecordViewTuple(record, view) {
	        this.record = record;
	        this.view = view;
	    }
	    return RecordViewTuple;
	}());
	function getTypeName$1(type) {
	    return type['name'] || typeof type;
	}

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * A structural directive that conditionally includes a template based on the value of
	 * an expression coerced to Boolean.
	 * When the expression evaluates to true, Angular renders the template
	 * provided in a `then` clause, and when  false or null,
	 * Angular renders the template provided in an optional `else` clause. The default
	 * template for the `else` clause is blank.
	 *
	 * A [shorthand form](guide/structural-directives#the-asterisk--prefix) of the directive,
	 * `*ngIf="condition"`, is generally used, provided
	 * as an attribute of the anchor element for the inserted template.
	 * Angular expands this into a more explicit version, in which the anchor element
	 * is contained in an `<ng-template>` element.
	 *
	 * Simple form with shorthand syntax:
	 *
	 * ```
	 * <div *ngIf="condition">Content to render when condition is true.</div>
	 * ```
	 *
	 * Simple form with expanded syntax:
	 *
	 * ```
	 * <ng-template [ngIf]="condition"><div>Content to render when condition is
	 * true.</div></ng-template>
	 * ```
	 *
	 * Form with an "else" block:
	 *
	 * ```
	 * <div *ngIf="condition; else elseBlock">Content to render when condition is true.</div>
	 * <ng-template #elseBlock>Content to render when condition is false.</ng-template>
	 * ```
	 *
	 * Shorthand form with "then" and "else" blocks:
	 *
	 * ```
	 * <div *ngIf="condition; then thenBlock else elseBlock"></div>
	 * <ng-template #thenBlock>Content to render when condition is true.</ng-template>
	 * <ng-template #elseBlock>Content to render when condition is false.</ng-template>
	 * ```
	 *
	 * Form with storing the value locally:
	 *
	 * ```
	 * <div *ngIf="condition as value; else elseBlock">{{value}}</div>
	 * <ng-template #elseBlock>Content to render when value is null.</ng-template>
	 * ```
	 *
	 * @usageNotes
	 *
	 * The `*ngIf` directive is most commonly used to conditionally show an inline template,
	 * as seen in the following  example.
	 * The default `else` template is blank.
	 *
	 * {@example common/ngIf/ts/module.ts region='NgIfSimple'}
	 *
	 * ### Showing an alternative template using `else`
	 *
	 * To display a template when `expression` evaluates to false, use an `else` template
	 * binding as shown in the following example.
	 * The `else` binding points to an `<ng-template>`  element labeled `#elseBlock`.
	 * The template can be defined anywhere in the component view, but is typically placed right after
	 * `ngIf` for readability.
	 *
	 * {@example common/ngIf/ts/module.ts region='NgIfElse'}
	 *
	 * ### Using an external `then` template
	 *
	 * In the previous example, the then-clause template is specified inline, as the content of the
	 * tag that contains the `ngIf` directive. You can also specify a template that is defined
	 * externally, by referencing a labeled `<ng-template>` element. When you do this, you can
	 * change which template to use at runtime, as shown in the following example.
	 *
	 * {@example common/ngIf/ts/module.ts region='NgIfThenElse'}
	 *
	 * ### Storing a conditional result in a variable
	 *
	 * You might want to show a set of properties from the same object. If you are waiting
	 * for asynchronous data, the object can be undefined.
	 * In this case, you can use `ngIf` and store the result of the condition in a local
	 * variable as shown in the the following example.
	 *
	 * {@example common/ngIf/ts/module.ts region='NgIfAs'}
	 *
	 * This code uses only one `AsyncPipe`, so only one subscription is created.
	 * The conditional statement stores the result of `userStream|async` in the local variable `user`.
	 * You can then bind the local `user` repeatedly.
	 *
	 * The conditional displays the data only if `userStream` returns a value,
	 * so you don't need to use the
	 * [safe-navigation-operator](guide/template-syntax#safe-navigation-operator) (`?.`)
	 * to guard against null values when accessing properties.
	 * You can display an alternative template while waiting for the data.
	 *
	 * ### Shorthand syntax
	 *
	 * The shorthand syntax `*ngIf` expands into two separate template specifications
	 * for the "then" and "else" clauses. For example, consider the following shorthand statement,
	 * that is meant to show a loading page while waiting for data to be loaded.
	 *
	 * ```
	 * <div class="hero-list" *ngIf="heroes else loading">
	 *  ...
	 * </div>
	 *
	 * <ng-template #loading>
	 *  <div>Loading...</div>
	 * </ng-template>
	 * ```
	 *
	 * You can see that the "else" clause references the `<ng-template>`
	 * with the `#loading` label, and the template for the "then" clause
	 * is provided as the content of the anchor element.
	 *
	 * However, when Angular expands the shorthand syntax, it creates
	 * another `<ng-template>` tag, with `ngIf` and `ngIfElse` directives.
	 * The anchor element containing the template for the "then" clause becomes
	 * the content of this unlabeled `<ng-template>` tag.
	 *
	 * ```
	 * <ng-template [ngIf]="heroes" [ngIfElse]="loading">
	 *  <div class="hero-list">
	 *   ...
	 *  </div>
	 * </ng-template>
	 *
	 * <ng-template #loading>
	 *  <div>Loading...</div>
	 * </ng-template>
	 * ```
	 *
	 * The presence of the implicit template object has implications for the nesting of
	 * structural directives. For more on this subject, see
	 * [Structural Directives](https://angular.io/guide/structural-directives#one-per-element).
	 *
	 * @ngModule CommonModule
	 * @publicApi
	 */
	var NgIf = /** @class */ (function () {
	    function NgIf(_viewContainer, templateRef) {
	        this._viewContainer = _viewContainer;
	        this._context = new NgIfContext();
	        this._thenTemplateRef = null;
	        this._elseTemplateRef = null;
	        this._thenViewRef = null;
	        this._elseViewRef = null;
	        this._thenTemplateRef = templateRef;
	    }
	    Object.defineProperty(NgIf.prototype, "ngIf", {
	        /**
	         * The Boolean expression to evaluate as the condition for showing a template.
	         */
	        set: function (condition) {
	            this._context.$implicit = this._context.ngIf = condition;
	            this._updateView();
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(NgIf.prototype, "ngIfThen", {
	        /**
	         * A template to show if the condition expression evaluates to true.
	         */
	        set: function (templateRef) {
	            assertTemplate('ngIfThen', templateRef);
	            this._thenTemplateRef = templateRef;
	            this._thenViewRef = null; // clear previous view if any.
	            this._updateView();
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(NgIf.prototype, "ngIfElse", {
	        /**
	         * A template to show if the condition expression evaluates to false.
	         */
	        set: function (templateRef) {
	            assertTemplate('ngIfElse', templateRef);
	            this._elseTemplateRef = templateRef;
	            this._elseViewRef = null; // clear previous view if any.
	            this._updateView();
	        },
	        enumerable: true,
	        configurable: true
	    });
	    NgIf.prototype._updateView = function () {
	        if (this._context.$implicit) {
	            if (!this._thenViewRef) {
	                this._viewContainer.clear();
	                this._elseViewRef = null;
	                if (this._thenTemplateRef) {
	                    this._thenViewRef =
	                        this._viewContainer.createEmbeddedView(this._thenTemplateRef, this._context);
	                }
	            }
	        }
	        else {
	            if (!this._elseViewRef) {
	                this._viewContainer.clear();
	                this._thenViewRef = null;
	                if (this._elseTemplateRef) {
	                    this._elseViewRef =
	                        this._viewContainer.createEmbeddedView(this._elseTemplateRef, this._context);
	                }
	            }
	        }
	    };
	    /**
	     * Asserts the correct type of the context for the template that `NgIf` will render.
	     *
	     * The presence of this method is a signal to the Ivy template type-check compiler that the
	     * `NgIf` structural directive renders its template with a specific context type.
	     */
	    NgIf.ngTemplateContextGuard = function (dir, ctx) {
	        return true;
	    };
	    __decorate([
	        Input(),
	        __metadata("design:type", Object),
	        __metadata("design:paramtypes", [Object])
	    ], NgIf.prototype, "ngIf", null);
	    __decorate([
	        Input(),
	        __metadata("design:type", Object),
	        __metadata("design:paramtypes", [Object])
	    ], NgIf.prototype, "ngIfThen", null);
	    __decorate([
	        Input(),
	        __metadata("design:type", Object),
	        __metadata("design:paramtypes", [Object])
	    ], NgIf.prototype, "ngIfElse", null);
	    NgIf = __decorate([
	        Directive({ selector: '[ngIf]' }),
	        __metadata("design:paramtypes", [ViewContainerRef, TemplateRef])
	    ], NgIf);
	    return NgIf;
	}());
	/**
	 * @publicApi
	 */
	var NgIfContext = /** @class */ (function () {
	    function NgIfContext() {
	        this.$implicit = null;
	        this.ngIf = null;
	    }
	    return NgIfContext;
	}());
	function assertTemplate(property, templateRef) {
	    var isTemplateRefOrNull = !!(!templateRef || templateRef.createEmbeddedView);
	    if (!isTemplateRefOrNull) {
	        throw new Error(property + " must be a TemplateRef, but received '" + stringify$1(templateRef) + "'.");
	    }
	}

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	var SwitchView = /** @class */ (function () {
	    function SwitchView(_viewContainerRef, _templateRef) {
	        this._viewContainerRef = _viewContainerRef;
	        this._templateRef = _templateRef;
	        this._created = false;
	    }
	    SwitchView.prototype.create = function () {
	        this._created = true;
	        this._viewContainerRef.createEmbeddedView(this._templateRef);
	    };
	    SwitchView.prototype.destroy = function () {
	        this._created = false;
	        this._viewContainerRef.clear();
	    };
	    SwitchView.prototype.enforceState = function (created) {
	        if (created && !this._created) {
	            this.create();
	        }
	        else if (!created && this._created) {
	            this.destroy();
	        }
	    };
	    return SwitchView;
	}());
	/**
	 * @ngModule CommonModule
	 *
	 * @description
	 * The `[ngSwitch]` directive on a container specifies an expression to match against.
	 * The expressions to match are provided by `ngSwitchCase` directives on views within the container.
	 * - Every view that matches is rendered.
	 * - If there are no matches, a view with the `ngSwitchDefault` directive is rendered.
	 * - Elements within the `[NgSwitch]` statement but outside of any `NgSwitchCase`
	 * or `ngSwitchDefault` directive are preserved at the location.
	 *
	 * @usageNotes
	 * Define a container element for the directive, and specify the switch expression
	 * to match against as an attribute:
	 *
	 * ```
	 * <container-element [ngSwitch]="switch_expression">
	 * ```
	 *
	 * Within the container, `*ngSwitchCase` statements specify the match expressions
	 * as attributes. Include `*ngSwitchDefault` as the final case.
	 *
	 * ```
	 * <container-element [ngSwitch]="switch_expression">
	 *    <some-element *ngSwitchCase="match_expression_1">...</some-element>
	 * ...
	 *    <some-element *ngSwitchDefault>...</some-element>
	 * </container-element>
	 * ```
	 *
	 * ### Usage Examples
	 *
	 * The following example shows how to use more than one case to display the same view:
	 *
	 * ```
	 * <container-element [ngSwitch]="switch_expression">
	 *   <!-- the same view can be shown in more than one case -->
	 *   <some-element *ngSwitchCase="match_expression_1">...</some-element>
	 *   <some-element *ngSwitchCase="match_expression_2">...</some-element>
	 *   <some-other-element *ngSwitchCase="match_expression_3">...</some-other-element>
	 *   <!--default case when there are no matches -->
	 *   <some-element *ngSwitchDefault>...</some-element>
	 * </container-element>
	 * ```
	 *
	 * The following example shows how cases can be nested:
	 * ```
	 * <container-element [ngSwitch]="switch_expression">
	 *       <some-element *ngSwitchCase="match_expression_1">...</some-element>
	 *       <some-element *ngSwitchCase="match_expression_2">...</some-element>
	 *       <some-other-element *ngSwitchCase="match_expression_3">...</some-other-element>
	 *       <ng-container *ngSwitchCase="match_expression_3">
	 *         <!-- use a ng-container to group multiple root nodes -->
	 *         <inner-element></inner-element>
	 *         <inner-other-element></inner-other-element>
	 *       </ng-container>
	 *       <some-element *ngSwitchDefault>...</some-element>
	 *     </container-element>
	 * ```
	 *
	 * @publicApi
	 * @see `NgSwitchCase`
	 * @see `NgSwitchDefault`
	 * @see [Structural Directives](guide/structural-directives)
	 *
	 */
	var NgSwitch = /** @class */ (function () {
	    function NgSwitch() {
	        this._defaultUsed = false;
	        this._caseCount = 0;
	        this._lastCaseCheckIndex = 0;
	        this._lastCasesMatched = false;
	    }
	    Object.defineProperty(NgSwitch.prototype, "ngSwitch", {
	        set: function (newValue) {
	            this._ngSwitch = newValue;
	            if (this._caseCount === 0) {
	                this._updateDefaultCases(true);
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    /** @internal */
	    NgSwitch.prototype._addCase = function () {
	        return this._caseCount++;
	    };
	    /** @internal */
	    NgSwitch.prototype._addDefault = function (view) {
	        if (!this._defaultViews) {
	            this._defaultViews = [];
	        }
	        this._defaultViews.push(view);
	    };
	    /** @internal */
	    NgSwitch.prototype._matchCase = function (value) {
	        var matched = value == this._ngSwitch;
	        this._lastCasesMatched = this._lastCasesMatched || matched;
	        this._lastCaseCheckIndex++;
	        if (this._lastCaseCheckIndex === this._caseCount) {
	            this._updateDefaultCases(!this._lastCasesMatched);
	            this._lastCaseCheckIndex = 0;
	            this._lastCasesMatched = false;
	        }
	        return matched;
	    };
	    NgSwitch.prototype._updateDefaultCases = function (useDefault) {
	        if (this._defaultViews && useDefault !== this._defaultUsed) {
	            this._defaultUsed = useDefault;
	            for (var i = 0; i < this._defaultViews.length; i++) {
	                var defaultView = this._defaultViews[i];
	                defaultView.enforceState(useDefault);
	            }
	        }
	    };
	    __decorate([
	        Input(),
	        __metadata("design:type", Object),
	        __metadata("design:paramtypes", [Object])
	    ], NgSwitch.prototype, "ngSwitch", null);
	    NgSwitch = __decorate([
	        Directive({ selector: '[ngSwitch]' })
	    ], NgSwitch);
	    return NgSwitch;
	}());
	/**
	 * @ngModule CommonModule
	 *
	 * @description
	 * Provides a switch case expression to match against an enclosing `ngSwitch` expression.
	 * When the expressions match, the given `NgSwitchCase` template is rendered.
	 * If multiple match expressions match the switch expression value, all of them are displayed.
	 *
	 * @usageNotes
	 *
	 * Within a switch container, `*ngSwitchCase` statements specify the match expressions
	 * as attributes. Include `*ngSwitchDefault` as the final case.
	 *
	 * ```
	 * <container-element [ngSwitch]="switch_expression">
	 *   <some-element *ngSwitchCase="match_expression_1">...</some-element>
	 *   ...
	 *   <some-element *ngSwitchDefault>...</some-element>
	 * </container-element>
	 * ```
	 *
	 * Each switch-case statement contains an in-line HTML template or template reference
	 * that defines the subtree to be selected if the value of the match expression
	 * matches the value of the switch expression.
	 *
	 * Unlike JavaScript, which uses strict equality, Angular uses loose equality.
	 * This means that the empty string, `""` matches 0.
	 *
	 * @publicApi
	 * @see `NgSwitch`
	 * @see `NgSwitchDefault`
	 *
	 */
	var NgSwitchCase = /** @class */ (function () {
	    function NgSwitchCase(viewContainer, templateRef, ngSwitch) {
	        this.ngSwitch = ngSwitch;
	        ngSwitch._addCase();
	        this._view = new SwitchView(viewContainer, templateRef);
	    }
	    /**
	     * Performs case matching. For internal use only.
	     */
	    NgSwitchCase.prototype.ngDoCheck = function () {
	        this._view.enforceState(this.ngSwitch._matchCase(this.ngSwitchCase));
	    };
	    __decorate([
	        Input(),
	        __metadata("design:type", Object)
	    ], NgSwitchCase.prototype, "ngSwitchCase", void 0);
	    NgSwitchCase = __decorate([
	        Directive({ selector: '[ngSwitchCase]' }),
	        __param(2, Host()),
	        __metadata("design:paramtypes", [ViewContainerRef, TemplateRef,
	            NgSwitch])
	    ], NgSwitchCase);
	    return NgSwitchCase;
	}());
	/**
	 * @ngModule CommonModule
	 *
	 * @description
	 *
	 * Creates a view that is rendered when no `NgSwitchCase` expressions
	 * match the `NgSwitch` expression.
	 * This statement should be the final case in an `NgSwitch`.
	 *
	 * @publicApi
	 * @see `NgSwitch`
	 * @see `NgSwitchCase`
	 *
	 */
	var NgSwitchDefault = /** @class */ (function () {
	    function NgSwitchDefault(viewContainer, templateRef, ngSwitch) {
	        ngSwitch._addDefault(new SwitchView(viewContainer, templateRef));
	    }
	    NgSwitchDefault = __decorate([
	        Directive({ selector: '[ngSwitchDefault]' }),
	        __param(2, Host()),
	        __metadata("design:paramtypes", [ViewContainerRef, TemplateRef,
	            NgSwitch])
	    ], NgSwitchDefault);
	    return NgSwitchDefault;
	}());

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * @ngModule CommonModule
	 *
	 * @usageNotes
	 * ```
	 * <some-element [ngPlural]="value">
	 *   <ng-template ngPluralCase="=0">there is nothing</ng-template>
	 *   <ng-template ngPluralCase="=1">there is one</ng-template>
	 *   <ng-template ngPluralCase="few">there are a few</ng-template>
	 * </some-element>
	 * ```
	 *
	 * @description
	 *
	 * Adds / removes DOM sub-trees based on a numeric value. Tailored for pluralization.
	 *
	 * Displays DOM sub-trees that match the switch expression value, or failing that, DOM sub-trees
	 * that match the switch expression's pluralization category.
	 *
	 * To use this directive you must provide a container element that sets the `[ngPlural]` attribute
	 * to a switch expression. Inner elements with a `[ngPluralCase]` will display based on their
	 * expression:
	 * - if `[ngPluralCase]` is set to a value starting with `=`, it will only display if the value
	 *   matches the switch expression exactly,
	 * - otherwise, the view will be treated as a "category match", and will only display if exact
	 *   value matches aren't found and the value maps to its category for the defined locale.
	 *
	 * See http://cldr.unicode.org/index/cldr-spec/plural-rules
	 *
	 * @publicApi
	 */
	var NgPlural = /** @class */ (function () {
	    function NgPlural(_localization) {
	        this._localization = _localization;
	        this._caseViews = {};
	    }
	    Object.defineProperty(NgPlural.prototype, "ngPlural", {
	        set: function (value) {
	            this._switchValue = value;
	            this._updateView();
	        },
	        enumerable: true,
	        configurable: true
	    });
	    NgPlural.prototype.addCase = function (value, switchView) {
	        this._caseViews[value] = switchView;
	    };
	    NgPlural.prototype._updateView = function () {
	        this._clearViews();
	        var cases = Object.keys(this._caseViews);
	        var key = getPluralCategory(this._switchValue, cases, this._localization);
	        this._activateView(this._caseViews[key]);
	    };
	    NgPlural.prototype._clearViews = function () {
	        if (this._activeView)
	            this._activeView.destroy();
	    };
	    NgPlural.prototype._activateView = function (view) {
	        if (view) {
	            this._activeView = view;
	            this._activeView.create();
	        }
	    };
	    __decorate([
	        Input(),
	        __metadata("design:type", Number),
	        __metadata("design:paramtypes", [Number])
	    ], NgPlural.prototype, "ngPlural", null);
	    NgPlural = __decorate([
	        Directive({ selector: '[ngPlural]' }),
	        __metadata("design:paramtypes", [NgLocalization])
	    ], NgPlural);
	    return NgPlural;
	}());
	/**
	 * @ngModule CommonModule
	 *
	 * @description
	 *
	 * Creates a view that will be added/removed from the parent {@link NgPlural} when the
	 * given expression matches the plural expression according to CLDR rules.
	 *
	 * @usageNotes
	 * ```
	 * <some-element [ngPlural]="value">
	 *   <ng-template ngPluralCase="=0">...</ng-template>
	 *   <ng-template ngPluralCase="other">...</ng-template>
	 * </some-element>
	 *```
	 *
	 * See {@link NgPlural} for more details and example.
	 *
	 * @publicApi
	 */
	var NgPluralCase = /** @class */ (function () {
	    function NgPluralCase(value, template, viewContainer, ngPlural) {
	        this.value = value;
	        var isANumber = !isNaN(Number(value));
	        ngPlural.addCase(isANumber ? "=" + value : value, new SwitchView(viewContainer, template));
	    }
	    NgPluralCase = __decorate([
	        Directive({ selector: '[ngPluralCase]' }),
	        __param(0, Attribute$1('ngPluralCase')),
	        __param(3, Host()),
	        __metadata("design:paramtypes", [String, TemplateRef,
	            ViewContainerRef, NgPlural])
	    ], NgPluralCase);
	    return NgPluralCase;
	}());

	/**
	 * @ngModule CommonModule
	 *
	 * @usageNotes
	 *
	 * Set the font of the containing element to the result of an expression.
	 *
	 * ```
	 * <some-element [ngStyle]="{'font-style': styleExp}">...</some-element>
	 * ```
	 *
	 * Set the width of the containing element to a pixel value returned by an expression.
	 *
	 * ```
	 * <some-element [ngStyle]="{'max-width.px': widthExp}">...</some-element>
	 * ```
	 *
	 * Set a collection of style values using an expression that returns key-value pairs.
	 *
	 * ```
	 * <some-element [ngStyle]="objExp">...</some-element>
	 * ```
	 *
	 * @description
	 *
	 * An attribute directive that updates styles for the containing HTML element.
	 * Sets one or more style properties, specified as colon-separated key-value pairs.
	 * The key is a style name, with an optional `.<unit>` suffix
	 * (such as 'top.px', 'font-style.em').
	 * The value is an expression to be evaluated.
	 * The resulting non-null value, expressed in the given unit,
	 * is assigned to the given style property.
	 * If the result of evaluation is null, the corresponding style is removed.
	 *
	 * @publicApi
	 */
	var NgStyle = /** @class */ (function () {
	    function NgStyle(_ngEl, _differs, _renderer) {
	        this._ngEl = _ngEl;
	        this._differs = _differs;
	        this._renderer = _renderer;
	        this._ngStyle = null;
	        this._differ = null;
	    }
	    Object.defineProperty(NgStyle.prototype, "ngStyle", {
	        set: function (values) {
	            this._ngStyle = values;
	            if (!this._differ && values) {
	                this._differ = this._differs.find(values).create();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    NgStyle.prototype.ngDoCheck = function () {
	        if (this._differ) {
	            var changes = this._differ.diff(this._ngStyle);
	            if (changes) {
	                this._applyChanges(changes);
	            }
	        }
	    };
	    NgStyle.prototype._setStyle = function (nameAndUnit, value) {
	        var _a = __read(nameAndUnit.split('.'), 2), name = _a[0], unit = _a[1];
	        value = value != null && unit ? "" + value + unit : value;
	        if (value != null) {
	            this._renderer.setStyle(this._ngEl.nativeElement, name, value);
	        }
	        else {
	            this._renderer.removeStyle(this._ngEl.nativeElement, name);
	        }
	    };
	    NgStyle.prototype._applyChanges = function (changes) {
	        var _this = this;
	        changes.forEachRemovedItem(function (record) { return _this._setStyle(record.key, null); });
	        changes.forEachAddedItem(function (record) { return _this._setStyle(record.key, record.currentValue); });
	        changes.forEachChangedItem(function (record) { return _this._setStyle(record.key, record.currentValue); });
	    };
	    __decorate([
	        Input('ngStyle'),
	        __metadata("design:type", Object),
	        __metadata("design:paramtypes", [Object])
	    ], NgStyle.prototype, "ngStyle", null);
	    NgStyle = __decorate([
	        Directive({ selector: '[ngStyle]' }),
	        __metadata("design:paramtypes", [ElementRef, KeyValueDiffers, Renderer2])
	    ], NgStyle);
	    return NgStyle;
	}());

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * @ngModule CommonModule
	 *
	 * @description
	 *
	 * Inserts an embedded view from a prepared `TemplateRef`.
	 *
	 * You can attach a context object to the `EmbeddedViewRef` by setting `[ngTemplateOutletContext]`.
	 * `[ngTemplateOutletContext]` should be an object, the object's keys will be available for binding
	 * by the local template `let` declarations.
	 *
	 * @usageNotes
	 * ```
	 * <ng-container *ngTemplateOutlet="templateRefExp; context: contextExp"></ng-container>
	 * ```
	 *
	 * Using the key `$implicit` in the context object will set its value as default.
	 *
	 * ### Example
	 *
	 * {@example common/ngTemplateOutlet/ts/module.ts region='NgTemplateOutlet'}
	 *
	 * @publicApi
	 */
	var NgTemplateOutlet = /** @class */ (function () {
	    function NgTemplateOutlet(_viewContainerRef) {
	        this._viewContainerRef = _viewContainerRef;
	        this._viewRef = null;
	        /**
	         * A context object to attach to the {@link EmbeddedViewRef}. This should be an
	         * object, the object's keys will be available for binding by the local template `let`
	         * declarations.
	         * Using the key `$implicit` in the context object will set its value as default.
	         */
	        this.ngTemplateOutletContext = null;
	        /**
	         * A string defining the template reference and optionally the context object for the template.
	         */
	        this.ngTemplateOutlet = null;
	    }
	    NgTemplateOutlet.prototype.ngOnChanges = function (changes) {
	        var recreateView = this._shouldRecreateView(changes);
	        if (recreateView) {
	            var viewContainerRef = this._viewContainerRef;
	            if (this._viewRef) {
	                viewContainerRef.remove(viewContainerRef.indexOf(this._viewRef));
	            }
	            this._viewRef = this.ngTemplateOutlet ?
	                viewContainerRef.createEmbeddedView(this.ngTemplateOutlet, this.ngTemplateOutletContext) :
	                null;
	        }
	        else if (this._viewRef && this.ngTemplateOutletContext) {
	            this._updateExistingContext(this.ngTemplateOutletContext);
	        }
	    };
	    /**
	     * We need to re-create existing embedded view if:
	     * - templateRef has changed
	     * - context has changes
	     *
	     * We mark context object as changed when the corresponding object
	     * shape changes (new properties are added or existing properties are removed).
	     * In other words we consider context with the same properties as "the same" even
	     * if object reference changes (see https://github.com/angular/angular/issues/13407).
	     */
	    NgTemplateOutlet.prototype._shouldRecreateView = function (changes) {
	        var ctxChange = changes['ngTemplateOutletContext'];
	        return !!changes['ngTemplateOutlet'] || (ctxChange && this._hasContextShapeChanged(ctxChange));
	    };
	    NgTemplateOutlet.prototype._hasContextShapeChanged = function (ctxChange) {
	        var e_1, _a;
	        var prevCtxKeys = Object.keys(ctxChange.previousValue || {});
	        var currCtxKeys = Object.keys(ctxChange.currentValue || {});
	        if (prevCtxKeys.length === currCtxKeys.length) {
	            try {
	                for (var currCtxKeys_1 = __values(currCtxKeys), currCtxKeys_1_1 = currCtxKeys_1.next(); !currCtxKeys_1_1.done; currCtxKeys_1_1 = currCtxKeys_1.next()) {
	                    var propName = currCtxKeys_1_1.value;
	                    if (prevCtxKeys.indexOf(propName) === -1) {
	                        return true;
	                    }
	                }
	            }
	            catch (e_1_1) { e_1 = { error: e_1_1 }; }
	            finally {
	                try {
	                    if (currCtxKeys_1_1 && !currCtxKeys_1_1.done && (_a = currCtxKeys_1.return)) _a.call(currCtxKeys_1);
	                }
	                finally { if (e_1) throw e_1.error; }
	            }
	            return false;
	        }
	        return true;
	    };
	    NgTemplateOutlet.prototype._updateExistingContext = function (ctx) {
	        var e_2, _a;
	        try {
	            for (var _b = __values(Object.keys(ctx)), _c = _b.next(); !_c.done; _c = _b.next()) {
	                var propName = _c.value;
	                this._viewRef.context[propName] = this.ngTemplateOutletContext[propName];
	            }
	        }
	        catch (e_2_1) { e_2 = { error: e_2_1 }; }
	        finally {
	            try {
	                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
	            }
	            finally { if (e_2) throw e_2.error; }
	        }
	    };
	    __decorate([
	        Input(),
	        __metadata("design:type", Object)
	    ], NgTemplateOutlet.prototype, "ngTemplateOutletContext", void 0);
	    __decorate([
	        Input(),
	        __metadata("design:type", Object)
	    ], NgTemplateOutlet.prototype, "ngTemplateOutlet", void 0);
	    NgTemplateOutlet = __decorate([
	        Directive({ selector: '[ngTemplateOutlet]' }),
	        __metadata("design:paramtypes", [ViewContainerRef])
	    ], NgTemplateOutlet);
	    return NgTemplateOutlet;
	}());

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * A collection of Angular directives that are likely to be used in each and every Angular
	 * application.
	 */
	var COMMON_DIRECTIVES = [
	    NgClass,
	    NgComponentOutlet,
	    NgForOf,
	    NgIf,
	    NgTemplateOutlet,
	    NgStyle,
	    NgSwitch,
	    NgSwitchCase,
	    NgSwitchDefault,
	    NgPlural,
	    NgPluralCase,
	];

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	function invalidPipeArgumentError(type, value) {
	    return Error("InvalidPipeArgument: '" + value + "' for pipe '" + stringify$1(type) + "'");
	}

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	var ObservableStrategy = /** @class */ (function () {
	    function ObservableStrategy() {
	    }
	    ObservableStrategy.prototype.createSubscription = function (async, updateLatestValue) {
	        return async.subscribe({
	            next: updateLatestValue,
	            error: function (e) {
	                throw e;
	            }
	        });
	    };
	    ObservableStrategy.prototype.dispose = function (subscription) {
	        subscription.unsubscribe();
	    };
	    ObservableStrategy.prototype.onDestroy = function (subscription) {
	        subscription.unsubscribe();
	    };
	    return ObservableStrategy;
	}());
	var PromiseStrategy = /** @class */ (function () {
	    function PromiseStrategy() {
	    }
	    PromiseStrategy.prototype.createSubscription = function (async, updateLatestValue) {
	        return async.then(updateLatestValue, function (e) {
	            throw e;
	        });
	    };
	    PromiseStrategy.prototype.dispose = function (subscription) { };
	    PromiseStrategy.prototype.onDestroy = function (subscription) { };
	    return PromiseStrategy;
	}());
	var _promiseStrategy = new PromiseStrategy();
	var _observableStrategy = new ObservableStrategy();
	/**
	 * @ngModule CommonModule
	 * @description
	 *
	 * Unwraps a value from an asynchronous primitive.
	 *
	 * The `async` pipe subscribes to an `Observable` or `Promise` and returns the latest value it has
	 * emitted. When a new value is emitted, the `async` pipe marks the component to be checked for
	 * changes. When the component gets destroyed, the `async` pipe unsubscribes automatically to avoid
	 * potential memory leaks.
	 *
	 * @usageNotes
	 *
	 * ### Examples
	 *
	 * This example binds a `Promise` to the view. Clicking the `Resolve` button resolves the
	 * promise.
	 *
	 * {@example common/pipes/ts/async_pipe.ts region='AsyncPipePromise'}
	 *
	 * It's also possible to use `async` with Observables. The example below binds the `time` Observable
	 * to the view. The Observable continuously updates the view with the current time.
	 *
	 * {@example common/pipes/ts/async_pipe.ts region='AsyncPipeObservable'}
	 *
	 * @publicApi
	 */
	var AsyncPipe = /** @class */ (function () {
	    function AsyncPipe(_ref) {
	        this._ref = _ref;
	        this._latestValue = null;
	        this._latestReturnedValue = null;
	        this._subscription = null;
	        this._obj = null;
	        this._strategy = null;
	    }
	    AsyncPipe_1 = AsyncPipe;
	    AsyncPipe.prototype.ngOnDestroy = function () {
	        if (this._subscription) {
	            this._dispose();
	        }
	    };
	    AsyncPipe.prototype.transform = function (obj) {
	        if (!this._obj) {
	            if (obj) {
	                this._subscribe(obj);
	            }
	            this._latestReturnedValue = this._latestValue;
	            return this._latestValue;
	        }
	        if (obj !== this._obj) {
	            this._dispose();
	            return this.transform(obj);
	        }
	        if (looseIdentical(this._latestValue, this._latestReturnedValue)) {
	            return this._latestReturnedValue;
	        }
	        this._latestReturnedValue = this._latestValue;
	        return WrappedValue.wrap(this._latestValue);
	    };
	    AsyncPipe.prototype._subscribe = function (obj) {
	        var _this = this;
	        this._obj = obj;
	        this._strategy = this._selectStrategy(obj);
	        this._subscription = this._strategy.createSubscription(obj, function (value) { return _this._updateLatestValue(obj, value); });
	    };
	    AsyncPipe.prototype._selectStrategy = function (obj) {
	        if (isPromise$2(obj)) {
	            return _promiseStrategy;
	        }
	        if (isObservable$1(obj)) {
	            return _observableStrategy;
	        }
	        throw invalidPipeArgumentError(AsyncPipe_1, obj);
	    };
	    AsyncPipe.prototype._dispose = function () {
	        this._strategy.dispose(this._subscription);
	        this._latestValue = null;
	        this._latestReturnedValue = null;
	        this._subscription = null;
	        this._obj = null;
	    };
	    AsyncPipe.prototype._updateLatestValue = function (async, value) {
	        if (async === this._obj) {
	            this._latestValue = value;
	            this._ref.markForCheck();
	        }
	    };
	    var AsyncPipe_1;
	    AsyncPipe = AsyncPipe_1 = __decorate([
	        Pipe({ name: 'async', pure: false }),
	        __metadata("design:paramtypes", [ChangeDetectorRef])
	    ], AsyncPipe);
	    return AsyncPipe;
	}());

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * Transforms text to all lower case.
	 *
	 * @see `UpperCasePipe`
	 * @see `TitleCasePipe`
	 * @usageNotes
	 *
	 * The following example defines a view that allows the user to enter
	 * text, and then uses the pipe to convert the input text to all lower case.
	 *
	 * <code-example path="common/pipes/ts/lowerupper_pipe.ts" region='LowerUpperPipe'></code-example>
	 *
	 * @ngModule CommonModule
	 * @publicApi
	 */
	var LowerCasePipe = /** @class */ (function () {
	    function LowerCasePipe() {
	    }
	    LowerCasePipe_1 = LowerCasePipe;
	    /**
	     * @param value The string to transform to lower case.
	     */
	    LowerCasePipe.prototype.transform = function (value) {
	        if (!value)
	            return value;
	        if (typeof value !== 'string') {
	            throw invalidPipeArgumentError(LowerCasePipe_1, value);
	        }
	        return value.toLowerCase();
	    };
	    var LowerCasePipe_1;
	    LowerCasePipe = LowerCasePipe_1 = __decorate([
	        Pipe({ name: 'lowercase' })
	    ], LowerCasePipe);
	    return LowerCasePipe;
	}());
	//
	// Regex below matches any Unicode word and compatible with ES5. In ES2018 the same result
	// can be achieved by using /\p{L}\S*/gu and also known as Unicode Property Escapes
	// (http://2ality.com/2017/07/regexp-unicode-property-escapes.html). Since there is no
	// transpilation of this functionality down to ES5 without external tool, the only solution is
	// to use already transpiled form. Example can be found here -
	// https://mothereff.in/regexpu#input=var+regex+%3D+/%5Cp%7BL%7D/u%3B&unicodePropertyEscape=1
	//
	var unicodeWordMatch = /(?:[A-Za-z\xAA\xB5\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0370-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u048A-\u052F\u0531-\u0556\u0559\u0561-\u0587\u05D0-\u05EA\u05F0-\u05F2\u0620-\u064A\u066E\u066F\u0671-\u06D3\u06D5\u06E5\u06E6\u06EE\u06EF\u06FA-\u06FC\u06FF\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07CA-\u07EA\u07F4\u07F5\u07FA\u0800-\u0815\u081A\u0824\u0828\u0840-\u0858\u0860-\u086A\u08A0-\u08B4\u08B6-\u08BD\u0904-\u0939\u093D\u0950\u0958-\u0961\u0971-\u0980\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD\u09CE\u09DC\u09DD\u09DF-\u09E1\u09F0\u09F1\u09FC\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A59-\u0A5C\u0A5E\u0A72-\u0A74\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABD\u0AD0\u0AE0\u0AE1\u0AF9\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3D\u0B5C\u0B5D\u0B5F-\u0B61\u0B71\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BD0\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D\u0C58-\u0C5A\u0C60\u0C61\u0C80\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD\u0CDE\u0CE0\u0CE1\u0CF1\u0CF2\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D\u0D4E\u0D54-\u0D56\u0D5F-\u0D61\u0D7A-\u0D7F\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0E01-\u0E30\u0E32\u0E33\u0E40-\u0E46\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB0\u0EB2\u0EB3\u0EBD\u0EC0-\u0EC4\u0EC6\u0EDC-\u0EDF\u0F00\u0F40-\u0F47\u0F49-\u0F6C\u0F88-\u0F8C\u1000-\u102A\u103F\u1050-\u1055\u105A-\u105D\u1061\u1065\u1066\u106E-\u1070\u1075-\u1081\u108E\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1380-\u138F\u13A0-\u13F5\u13F8-\u13FD\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16F1-\u16F8\u1700-\u170C\u170E-\u1711\u1720-\u1731\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17D7\u17DC\u1820-\u1877\u1880-\u1884\u1887-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191E\u1950-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u1A00-\u1A16\u1A20-\u1A54\u1AA7\u1B05-\u1B33\u1B45-\u1B4B\u1B83-\u1BA0\u1BAE\u1BAF\u1BBA-\u1BE5\u1C00-\u1C23\u1C4D-\u1C4F\u1C5A-\u1C7D\u1C80-\u1C88\u1CE9-\u1CEC\u1CEE-\u1CF1\u1CF5\u1CF6\u1D00-\u1DBF\u1E00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u2071\u207F\u2090-\u209C\u2102\u2107\u210A-\u2113\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u212F-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2183\u2184\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CEE\u2CF2\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u2E2F\u3005\u3006\u3031-\u3035\u303B\u303C\u3041-\u3096\u309D-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312E\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FEA\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA61F\uA62A\uA62B\uA640-\uA66E\uA67F-\uA69D\uA6A0-\uA6E5\uA717-\uA71F\uA722-\uA788\uA78B-\uA7AE\uA7B0-\uA7B7\uA7F7-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA822\uA840-\uA873\uA882-\uA8B3\uA8F2-\uA8F7\uA8FB\uA8FD\uA90A-\uA925\uA930-\uA946\uA960-\uA97C\uA984-\uA9B2\uA9CF\uA9E0-\uA9E4\uA9E6-\uA9EF\uA9FA-\uA9FE\uAA00-\uAA28\uAA40-\uAA42\uAA44-\uAA4B\uAA60-\uAA76\uAA7A\uAA7E-\uAAAF\uAAB1\uAAB5\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB-\uAADD\uAAE0-\uAAEA\uAAF2-\uAAF4\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB65\uAB70-\uABE2\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF21-\uFF3A\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]|\uD800[\uDC00-\uDC0B\uDC0D-\uDC26\uDC28-\uDC3A\uDC3C\uDC3D\uDC3F-\uDC4D\uDC50-\uDC5D\uDC80-\uDCFA\uDE80-\uDE9C\uDEA0-\uDED0\uDF00-\uDF1F\uDF2D-\uDF40\uDF42-\uDF49\uDF50-\uDF75\uDF80-\uDF9D\uDFA0-\uDFC3\uDFC8-\uDFCF]|\uD801[\uDC00-\uDC9D\uDCB0-\uDCD3\uDCD8-\uDCFB\uDD00-\uDD27\uDD30-\uDD63\uDE00-\uDF36\uDF40-\uDF55\uDF60-\uDF67]|\uD802[\uDC00-\uDC05\uDC08\uDC0A-\uDC35\uDC37\uDC38\uDC3C\uDC3F-\uDC55\uDC60-\uDC76\uDC80-\uDC9E\uDCE0-\uDCF2\uDCF4\uDCF5\uDD00-\uDD15\uDD20-\uDD39\uDD80-\uDDB7\uDDBE\uDDBF\uDE00\uDE10-\uDE13\uDE15-\uDE17\uDE19-\uDE33\uDE60-\uDE7C\uDE80-\uDE9C\uDEC0-\uDEC7\uDEC9-\uDEE4\uDF00-\uDF35\uDF40-\uDF55\uDF60-\uDF72\uDF80-\uDF91]|\uD803[\uDC00-\uDC48\uDC80-\uDCB2\uDCC0-\uDCF2]|\uD804[\uDC03-\uDC37\uDC83-\uDCAF\uDCD0-\uDCE8\uDD03-\uDD26\uDD50-\uDD72\uDD76\uDD83-\uDDB2\uDDC1-\uDDC4\uDDDA\uDDDC\uDE00-\uDE11\uDE13-\uDE2B\uDE80-\uDE86\uDE88\uDE8A-\uDE8D\uDE8F-\uDE9D\uDE9F-\uDEA8\uDEB0-\uDEDE\uDF05-\uDF0C\uDF0F\uDF10\uDF13-\uDF28\uDF2A-\uDF30\uDF32\uDF33\uDF35-\uDF39\uDF3D\uDF50\uDF5D-\uDF61]|\uD805[\uDC00-\uDC34\uDC47-\uDC4A\uDC80-\uDCAF\uDCC4\uDCC5\uDCC7\uDD80-\uDDAE\uDDD8-\uDDDB\uDE00-\uDE2F\uDE44\uDE80-\uDEAA\uDF00-\uDF19]|\uD806[\uDCA0-\uDCDF\uDCFF\uDE00\uDE0B-\uDE32\uDE3A\uDE50\uDE5C-\uDE83\uDE86-\uDE89\uDEC0-\uDEF8]|\uD807[\uDC00-\uDC08\uDC0A-\uDC2E\uDC40\uDC72-\uDC8F\uDD00-\uDD06\uDD08\uDD09\uDD0B-\uDD30\uDD46]|\uD808[\uDC00-\uDF99]|\uD809[\uDC80-\uDD43]|[\uD80C\uD81C-\uD820\uD840-\uD868\uD86A-\uD86C\uD86F-\uD872\uD874-\uD879][\uDC00-\uDFFF]|\uD80D[\uDC00-\uDC2E]|\uD811[\uDC00-\uDE46]|\uD81A[\uDC00-\uDE38\uDE40-\uDE5E\uDED0-\uDEED\uDF00-\uDF2F\uDF40-\uDF43\uDF63-\uDF77\uDF7D-\uDF8F]|\uD81B[\uDF00-\uDF44\uDF50\uDF93-\uDF9F\uDFE0\uDFE1]|\uD821[\uDC00-\uDFEC]|\uD822[\uDC00-\uDEF2]|\uD82C[\uDC00-\uDD1E\uDD70-\uDEFB]|\uD82F[\uDC00-\uDC6A\uDC70-\uDC7C\uDC80-\uDC88\uDC90-\uDC99]|\uD835[\uDC00-\uDC54\uDC56-\uDC9C\uDC9E\uDC9F\uDCA2\uDCA5\uDCA6\uDCA9-\uDCAC\uDCAE-\uDCB9\uDCBB\uDCBD-\uDCC3\uDCC5-\uDD05\uDD07-\uDD0A\uDD0D-\uDD14\uDD16-\uDD1C\uDD1E-\uDD39\uDD3B-\uDD3E\uDD40-\uDD44\uDD46\uDD4A-\uDD50\uDD52-\uDEA5\uDEA8-\uDEC0\uDEC2-\uDEDA\uDEDC-\uDEFA\uDEFC-\uDF14\uDF16-\uDF34\uDF36-\uDF4E\uDF50-\uDF6E\uDF70-\uDF88\uDF8A-\uDFA8\uDFAA-\uDFC2\uDFC4-\uDFCB]|\uD83A[\uDC00-\uDCC4\uDD00-\uDD43]|\uD83B[\uDE00-\uDE03\uDE05-\uDE1F\uDE21\uDE22\uDE24\uDE27\uDE29-\uDE32\uDE34-\uDE37\uDE39\uDE3B\uDE42\uDE47\uDE49\uDE4B\uDE4D-\uDE4F\uDE51\uDE52\uDE54\uDE57\uDE59\uDE5B\uDE5D\uDE5F\uDE61\uDE62\uDE64\uDE67-\uDE6A\uDE6C-\uDE72\uDE74-\uDE77\uDE79-\uDE7C\uDE7E\uDE80-\uDE89\uDE8B-\uDE9B\uDEA1-\uDEA3\uDEA5-\uDEA9\uDEAB-\uDEBB]|\uD869[\uDC00-\uDED6\uDF00-\uDFFF]|\uD86D[\uDC00-\uDF34\uDF40-\uDFFF]|\uD86E[\uDC00-\uDC1D\uDC20-\uDFFF]|\uD873[\uDC00-\uDEA1\uDEB0-\uDFFF]|\uD87A[\uDC00-\uDFE0]|\uD87E[\uDC00-\uDE1D])\S*/g;
	/**
	 * Transforms text to title case.
	 * Capitalizes the first letter of each word, and transforms the
	 * rest of the word to lower case.
	 * Words are delimited by any whitespace character, such as a space, tab, or line-feed character.
	 *
	 * @see `LowerCasePipe`
	 * @see `UpperCasePipe`
	 *
	 * @usageNotes
	 * The following example shows the result of transforming various strings into title case.
	 *
	 * <code-example path="common/pipes/ts/titlecase_pipe.ts" region='TitleCasePipe'></code-example>
	 *
	 * @ngModule CommonModule
	 * @publicApi
	 */
	var TitleCasePipe = /** @class */ (function () {
	    function TitleCasePipe() {
	    }
	    TitleCasePipe_1 = TitleCasePipe;
	    /**
	     * @param value The string to transform to title case.
	     */
	    TitleCasePipe.prototype.transform = function (value) {
	        if (!value)
	            return value;
	        if (typeof value !== 'string') {
	            throw invalidPipeArgumentError(TitleCasePipe_1, value);
	        }
	        return value.replace(unicodeWordMatch, (function (txt) { return txt[0].toUpperCase() + txt.substr(1).toLowerCase(); }));
	    };
	    var TitleCasePipe_1;
	    TitleCasePipe = TitleCasePipe_1 = __decorate([
	        Pipe({ name: 'titlecase' })
	    ], TitleCasePipe);
	    return TitleCasePipe;
	}());
	/**
	 * Transforms text to all upper case.
	 * @see `LowerCasePipe`
	 * @see `TitleCasePipe`
	 *
	 * @ngModule CommonModule
	 * @publicApi
	 */
	var UpperCasePipe = /** @class */ (function () {
	    function UpperCasePipe() {
	    }
	    UpperCasePipe_1 = UpperCasePipe;
	    /**
	     * @param value The string to transform to upper case.
	     */
	    UpperCasePipe.prototype.transform = function (value) {
	        if (!value)
	            return value;
	        if (typeof value !== 'string') {
	            throw invalidPipeArgumentError(UpperCasePipe_1, value);
	        }
	        return value.toUpperCase();
	    };
	    var UpperCasePipe_1;
	    UpperCasePipe = UpperCasePipe_1 = __decorate([
	        Pipe({ name: 'uppercase' })
	    ], UpperCasePipe);
	    return UpperCasePipe;
	}());

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	// clang-format off
	/**
	 * @ngModule CommonModule
	 * @description
	 *
	 * Formats a date value according to locale rules.
	 *
	 * Only the `en-US` locale data comes with Angular. To localize dates
	 * in another language, you must import the corresponding locale data.
	 * See the [I18n guide](guide/i18n#i18n-pipes) for more information.
	 *
	 * @see `formatDate()`
	 *
	 *
	 * @usageNotes
	 *
	 * The result of this pipe is not reevaluated when the input is mutated. To avoid the need to
	 * reformat the date on every change-detection cycle, treat the date as an immutable object
	 * and change the reference when the pipe needs to run again.
	 *
	 * ### Pre-defined format options
	 *
	 * Examples are given in `en-US` locale.
	 *
	 * - `'short'`: equivalent to `'M/d/yy, h:mm a'` (`6/15/15, 9:03 AM`).
	 * - `'medium'`: equivalent to `'MMM d, y, h:mm:ss a'` (`Jun 15, 2015, 9:03:01 AM`).
	 * - `'long'`: equivalent to `'MMMM d, y, h:mm:ss a z'` (`June 15, 2015 at 9:03:01 AM
	 * GMT+1`).
	 * - `'full'`: equivalent to `'EEEE, MMMM d, y, h:mm:ss a zzzz'` (`Monday, June 15, 2015 at
	 * 9:03:01 AM GMT+01:00`).
	 * - `'shortDate'`: equivalent to `'M/d/yy'` (`6/15/15`).
	 * - `'mediumDate'`: equivalent to `'MMM d, y'` (`Jun 15, 2015`).
	 * - `'longDate'`: equivalent to `'MMMM d, y'` (`June 15, 2015`).
	 * - `'fullDate'`: equivalent to `'EEEE, MMMM d, y'` (`Monday, June 15, 2015`).
	 * - `'shortTime'`: equivalent to `'h:mm a'` (`9:03 AM`).
	 * - `'mediumTime'`: equivalent to `'h:mm:ss a'` (`9:03:01 AM`).
	 * - `'longTime'`: equivalent to `'h:mm:ss a z'` (`9:03:01 AM GMT+1`).
	 * - `'fullTime'`: equivalent to `'h:mm:ss a zzzz'` (`9:03:01 AM GMT+01:00`).
	 *
	 * ### Custom format options
	 *
	 * You can construct a format string using symbols to specify the components
	 * of a date-time value, as described in the following table.
	 * Format details depend on the locale.
	 * Fields marked with (*) are only available in the extra data set for the given locale.
	 *
	 *  | Field type         | Format      | Description                                                   | Example Value                                              |
	 *  |--------------------|-------------|---------------------------------------------------------------|------------------------------------------------------------|
	 *  | Era                | G, GG & GGG | Abbreviated                                                   | AD                                                         |
	 *  |                    | GGGG        | Wide                                                          | Anno Domini                                                |
	 *  |                    | GGGGG       | Narrow                                                        | A                                                          |
	 *  | Year               | y           | Numeric: minimum digits                                       | 2, 20, 201, 2017, 20173                                    |
	 *  |                    | yy          | Numeric: 2 digits + zero padded                               | 02, 20, 01, 17, 73                                         |
	 *  |                    | yyy         | Numeric: 3 digits + zero padded                               | 002, 020, 201, 2017, 20173                                 |
	 *  |                    | yyyy        | Numeric: 4 digits or more + zero padded                       | 0002, 0020, 0201, 2017, 20173                              |
	 *  | Month              | M           | Numeric: 1 digit                                              | 9, 12                                                      |
	 *  |                    | MM          | Numeric: 2 digits + zero padded                               | 09, 12                                                     |
	 *  |                    | MMM         | Abbreviated                                                   | Sep                                                        |
	 *  |                    | MMMM        | Wide                                                          | September                                                  |
	 *  |                    | MMMMM       | Narrow                                                        | S                                                          |
	 *  | Month standalone   | L           | Numeric: 1 digit                                              | 9, 12                                                      |
	 *  |                    | LL          | Numeric: 2 digits + zero padded                               | 09, 12                                                     |
	 *  |                    | LLL         | Abbreviated                                                   | Sep                                                        |
	 *  |                    | LLLL        | Wide                                                          | September                                                  |
	 *  |                    | LLLLL       | Narrow                                                        | S                                                          |
	 *  | Week of year       | w           | Numeric: minimum digits                                       | 1... 53                                                    |
	 *  |                    | ww          | Numeric: 2 digits + zero padded                               | 01... 53                                                   |
	 *  | Week of month      | W           | Numeric: 1 digit                                              | 1... 5                                                     |
	 *  | Day of month       | d           | Numeric: minimum digits                                       | 1                                                          |
	 *  |                    | dd          | Numeric: 2 digits + zero padded                               | 01                                                          |
	 *  | Week day           | E, EE & EEE | Abbreviated                                                   | Tue                                                        |
	 *  |                    | EEEE        | Wide                                                          | Tuesday                                                    |
	 *  |                    | EEEEE       | Narrow                                                        | T                                                          |
	 *  |                    | EEEEEE      | Short                                                         | Tu                                                         |
	 *  | Period             | a, aa & aaa | Abbreviated                                                   | am/pm or AM/PM                                             |
	 *  |                    | aaaa        | Wide (fallback to `a` when missing)                           | ante meridiem/post meridiem                                |
	 *  |                    | aaaaa       | Narrow                                                        | a/p                                                        |
	 *  | Period*            | B, BB & BBB | Abbreviated                                                   | mid.                                                       |
	 *  |                    | BBBB        | Wide                                                          | am, pm, midnight, noon, morning, afternoon, evening, night |
	 *  |                    | BBBBB       | Narrow                                                        | md                                                         |
	 *  | Period standalone* | b, bb & bbb | Abbreviated                                                   | mid.                                                       |
	 *  |                    | bbbb        | Wide                                                          | am, pm, midnight, noon, morning, afternoon, evening, night |
	 *  |                    | bbbbb       | Narrow                                                        | md                                                         |
	 *  | Hour 1-12          | h           | Numeric: minimum digits                                       | 1, 12                                                      |
	 *  |                    | hh          | Numeric: 2 digits + zero padded                               | 01, 12                                                     |
	 *  | Hour 0-23          | H           | Numeric: minimum digits                                       | 0, 23                                                      |
	 *  |                    | HH          | Numeric: 2 digits + zero padded                               | 00, 23                                                     |
	 *  | Minute             | m           | Numeric: minimum digits                                       | 8, 59                                                      |
	 *  |                    | mm          | Numeric: 2 digits + zero padded                               | 08, 59                                                     |
	 *  | Second             | s           | Numeric: minimum digits                                       | 0... 59                                                    |
	 *  |                    | ss          | Numeric: 2 digits + zero padded                               | 00... 59                                                   |
	 *  | Fractional seconds | S           | Numeric: 1 digit                                              | 0... 9                                                     |
	 *  |                    | SS          | Numeric: 2 digits + zero padded                               | 00... 99                                                   |
	 *  |                    | SSS         | Numeric: 3 digits + zero padded (= milliseconds)              | 000... 999                                                 |
	 *  | Zone               | z, zz & zzz | Short specific non location format (fallback to O)            | GMT-8                                                      |
	 *  |                    | zzzz        | Long specific non location format (fallback to OOOO)          | GMT-08:00                                                  |
	 *  |                    | Z, ZZ & ZZZ | ISO8601 basic format                                          | -0800                                                      |
	 *  |                    | ZZZZ        | Long localized GMT format                                     | GMT-8:00                                                   |
	 *  |                    | ZZZZZ       | ISO8601 extended format + Z indicator for offset 0 (= XXXXX)  | -08:00                                                     |
	 *  |                    | O, OO & OOO | Short localized GMT format                                    | GMT-8                                                      |
	 *  |                    | OOOO        | Long localized GMT format                                     | GMT-08:00                                                  |
	 *
	 * Note that timezone correction is not applied to an ISO string that has no time component, such as "2016-09-19"
	 *
	 * ### Format examples
	 *
	 * These examples transform a date into various formats,
	 * assuming that `dateObj` is a JavaScript `Date` object for
	 * year: 2015, month: 6, day: 15, hour: 21, minute: 43, second: 11,
	 * given in the local time for the `en-US` locale.
	 *
	 * ```
	 * {{ dateObj | date }}               // output is 'Jun 15, 2015'
	 * {{ dateObj | date:'medium' }}      // output is 'Jun 15, 2015, 9:43:11 PM'
	 * {{ dateObj | date:'shortTime' }}   // output is '9:43 PM'
	 * {{ dateObj | date:'mm:ss' }}       // output is '43:11'
	 * ```
	 *
	 * ### Usage example
	 *
	 * The following component uses a date pipe to display the current date in different formats.
	 *
	 * ```
	 * @Component({
	 *  selector: 'date-pipe',
	 *  template: `<div>
	 *    <p>Today is {{today | date}}</p>
	 *    <p>Or if you prefer, {{today | date:'fullDate'}}</p>
	 *    <p>The time is {{today | date:'h:mm a z'}}</p>
	 *  </div>`
	 * })
	 * // Get the current date and time as a date-time value.
	 * export class DatePipeComponent {
	 *   today: number = Date.now();
	 * }
	 * ```
	 *
	 * @publicApi
	 */
	// clang-format on
	var DatePipe = /** @class */ (function () {
	    function DatePipe(locale) {
	        this.locale = locale;
	    }
	    DatePipe_1 = DatePipe;
	    /**
	     * @param value The date expression: a `Date` object,  a number
	     * (milliseconds since UTC epoch), or an ISO string (https://www.w3.org/TR/NOTE-datetime).
	     * @param format The date/time components to include, using predefined options or a
	     * custom format string.
	     * @param timezone A timezone offset (such as `'+0430'`), or a standard
	     * UTC/GMT or continental US timezone abbreviation.
	     * When not supplied, uses the end-user's local system timezone.
	     * @param locale A locale code for the locale format rules to use.
	     * When not supplied, uses the value of `LOCALE_ID`, which is `en-US` by default.
	     * See [Setting your app locale](guide/i18n#setting-up-the-locale-of-your-app).
	     * @returns A date string in the desired format.
	     */
	    DatePipe.prototype.transform = function (value, format, timezone, locale) {
	        if (format === void 0) { format = 'mediumDate'; }
	        if (value == null || value === '' || value !== value)
	            return null;
	        try {
	            return formatDate(value, format, locale || this.locale, timezone);
	        }
	        catch (error) {
	            throw invalidPipeArgumentError(DatePipe_1, error.message);
	        }
	    };
	    var DatePipe_1;
	    DatePipe = DatePipe_1 = __decorate([
	        Pipe({ name: 'date', pure: true }),
	        __param(0, Inject(LOCALE_ID$1)),
	        __metadata("design:paramtypes", [String])
	    ], DatePipe);
	    return DatePipe;
	}());

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	var _INTERPOLATION_REGEXP = /#/g;
	/**
	 * @ngModule CommonModule
	 * @description
	 *
	 * Maps a value to a string that pluralizes the value according to locale rules.
	 *
	 * @usageNotes
	 *
	 * ### Example
	 *
	 * {@example common/pipes/ts/i18n_pipe.ts region='I18nPluralPipeComponent'}
	 *
	 * @publicApi
	 */
	var I18nPluralPipe = /** @class */ (function () {
	    function I18nPluralPipe(_localization) {
	        this._localization = _localization;
	    }
	    I18nPluralPipe_1 = I18nPluralPipe;
	    /**
	     * @param value the number to be formatted
	     * @param pluralMap an object that mimics the ICU format, see
	     * http://userguide.icu-project.org/formatparse/messages.
	     * @param locale a `string` defining the locale to use (uses the current {@link LOCALE_ID} by
	     * default).
	     */
	    I18nPluralPipe.prototype.transform = function (value, pluralMap, locale) {
	        if (value == null)
	            return '';
	        if (typeof pluralMap !== 'object' || pluralMap === null) {
	            throw invalidPipeArgumentError(I18nPluralPipe_1, pluralMap);
	        }
	        var key = getPluralCategory(value, Object.keys(pluralMap), this._localization, locale);
	        return pluralMap[key].replace(_INTERPOLATION_REGEXP, value.toString());
	    };
	    var I18nPluralPipe_1;
	    I18nPluralPipe = I18nPluralPipe_1 = __decorate([
	        Pipe({ name: 'i18nPlural', pure: true }),
	        __metadata("design:paramtypes", [NgLocalization])
	    ], I18nPluralPipe);
	    return I18nPluralPipe;
	}());

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * @ngModule CommonModule
	 * @description
	 *
	 * Generic selector that displays the string that matches the current value.
	 *
	 * If none of the keys of the `mapping` match the `value`, then the content
	 * of the `other` key is returned when present, otherwise an empty string is returned.
	 *
	 * @usageNotes
	 *
	 * ### Example
	 *
	 * {@example common/pipes/ts/i18n_pipe.ts region='I18nSelectPipeComponent'}
	 *
	 * @publicApi
	 */
	var I18nSelectPipe = /** @class */ (function () {
	    function I18nSelectPipe() {
	    }
	    I18nSelectPipe_1 = I18nSelectPipe;
	    /**
	     * @param value a string to be internationalized.
	     * @param mapping an object that indicates the text that should be displayed
	     * for different values of the provided `value`.
	     */
	    I18nSelectPipe.prototype.transform = function (value, mapping) {
	        if (value == null)
	            return '';
	        if (typeof mapping !== 'object' || typeof value !== 'string') {
	            throw invalidPipeArgumentError(I18nSelectPipe_1, mapping);
	        }
	        if (mapping.hasOwnProperty(value)) {
	            return mapping[value];
	        }
	        if (mapping.hasOwnProperty('other')) {
	            return mapping['other'];
	        }
	        return '';
	    };
	    var I18nSelectPipe_1;
	    I18nSelectPipe = I18nSelectPipe_1 = __decorate([
	        Pipe({ name: 'i18nSelect', pure: true })
	    ], I18nSelectPipe);
	    return I18nSelectPipe;
	}());

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * @ngModule CommonModule
	 * @description
	 *
	 * Converts a value into its JSON-format representation.  Useful for debugging.
	 *
	 * @usageNotes
	 *
	 * The following component uses a JSON pipe to convert an object
	 * to JSON format, and displays the string in both formats for comparison.
	 *
	 * {@example common/pipes/ts/json_pipe.ts region='JsonPipe'}
	 *
	 * @publicApi
	 */
	var JsonPipe = /** @class */ (function () {
	    function JsonPipe() {
	    }
	    /**
	     * @param value A value of any type to convert into a JSON-format string.
	     */
	    JsonPipe.prototype.transform = function (value) {
	        return JSON.stringify(value, null, 2);
	    };
	    JsonPipe = __decorate([
	        Pipe({ name: 'json', pure: false })
	    ], JsonPipe);
	    return JsonPipe;
	}());

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	function makeKeyValuePair(key, value) {
	    return { key: key, value: value };
	}
	/**
	 * @ngModule CommonModule
	 * @description
	 *
	 * Transforms Object or Map into an array of key value pairs.
	 *
	 * The output array will be ordered by keys.
	 * By default the comparator will be by Unicode point value.
	 * You can optionally pass a compareFn if your keys are complex types.
	 *
	 * @usageNotes
	 * ### Examples
	 *
	 * This examples show how an Object or a Map can be iterated by ngFor with the use of this keyvalue
	 * pipe.
	 *
	 * {@example common/pipes/ts/keyvalue_pipe.ts region='KeyValuePipe'}
	 *
	 * @publicApi
	 */
	var KeyValuePipe = /** @class */ (function () {
	    function KeyValuePipe(differs) {
	        this.differs = differs;
	        this.keyValues = [];
	    }
	    KeyValuePipe.prototype.transform = function (input, compareFn) {
	        var _this = this;
	        if (compareFn === void 0) { compareFn = defaultComparator; }
	        if (!input || (!(input instanceof Map) && typeof input !== 'object')) {
	            return null;
	        }
	        if (!this.differ) {
	            // make a differ for whatever type we've been passed in
	            this.differ = this.differs.find(input).create();
	        }
	        var differChanges = this.differ.diff(input);
	        if (differChanges) {
	            this.keyValues = [];
	            differChanges.forEachItem(function (r) {
	                _this.keyValues.push(makeKeyValuePair(r.key, r.currentValue));
	            });
	            this.keyValues.sort(compareFn);
	        }
	        return this.keyValues;
	    };
	    KeyValuePipe = __decorate([
	        Pipe({ name: 'keyvalue', pure: false }),
	        __metadata("design:paramtypes", [KeyValueDiffers])
	    ], KeyValuePipe);
	    return KeyValuePipe;
	}());
	function defaultComparator(keyValueA, keyValueB) {
	    var a = keyValueA.key;
	    var b = keyValueB.key;
	    // if same exit with 0;
	    if (a === b)
	        return 0;
	    // make sure that undefined are at the end of the sort.
	    if (a === undefined)
	        return 1;
	    if (b === undefined)
	        return -1;
	    // make sure that nulls are at the end of the sort.
	    if (a === null)
	        return 1;
	    if (b === null)
	        return -1;
	    if (typeof a == 'string' && typeof b == 'string') {
	        return a < b ? -1 : 1;
	    }
	    if (typeof a == 'number' && typeof b == 'number') {
	        return a - b;
	    }
	    if (typeof a == 'boolean' && typeof b == 'boolean') {
	        return a < b ? -1 : 1;
	    }
	    // `a` and `b` are of different types. Compare their string values.
	    var aString = String(a);
	    var bString = String(b);
	    return aString == bString ? 0 : aString < bString ? -1 : 1;
	}

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * @ngModule CommonModule
	 * @description
	 *
	 * Transforms a number into a string,
	 * formatted according to locale rules that determine group sizing and
	 * separator, decimal-point character, and other locale-specific
	 * configurations.
	 *
	 * If no parameters are specified, the function rounds off to the nearest value using this
	 * [rounding method](https://en.wikibooks.org/wiki/Arithmetic/Rounding).
	 * The behavior differs from that of the JavaScript ```Math.round()``` function.
	 * In the following case for example, the pipe rounds down where
	 * ```Math.round()``` rounds up:
	 *
	 * ```html
	 * -2.5 | number:'1.0-0'
	 * > -3
	 * Math.round(-2.5)
	 * > -2
	 * ```
	 *
	 * @see `formatNumber()`
	 *
	 * @usageNotes
	 * The following code shows how the pipe transforms numbers
	 * into text strings, according to various format specifications,
	 * where the caller's default locale is `en-US`.
	 *
	 * ### Example
	 *
	 * <code-example path="common/pipes/ts/number_pipe.ts" region='NumberPipe'></code-example>
	 *
	 * @publicApi
	 */
	var DecimalPipe = /** @class */ (function () {
	    function DecimalPipe(_locale) {
	        this._locale = _locale;
	    }
	    DecimalPipe_1 = DecimalPipe;
	    /**
	     * @param value The number to be formatted.
	     * @param digitsInfo Decimal representation options, specified by a string
	     * in the following format:<br>
	     * <code>{minIntegerDigits}.{minFractionDigits}-{maxFractionDigits}</code>.
	     *   - `minIntegerDigits`: The minimum number of integer digits before the decimal point.
	     * Default is `1`.
	     *   - `minFractionDigits`: The minimum number of digits after the decimal point.
	     * Default is `0`.
	     *   - `maxFractionDigits`: The maximum number of digits after the decimal point.
	     * Default is `3`.
	     * @param locale A locale code for the locale format rules to use.
	     * When not supplied, uses the value of `LOCALE_ID`, which is `en-US` by default.
	     * See [Setting your app locale](guide/i18n#setting-up-the-locale-of-your-app).
	     */
	    DecimalPipe.prototype.transform = function (value, digitsInfo, locale) {
	        if (isEmpty(value))
	            return null;
	        locale = locale || this._locale;
	        try {
	            var num = strToNumber(value);
	            return formatNumber(num, locale, digitsInfo);
	        }
	        catch (error) {
	            throw invalidPipeArgumentError(DecimalPipe_1, error.message);
	        }
	    };
	    var DecimalPipe_1;
	    DecimalPipe = DecimalPipe_1 = __decorate([
	        Pipe({ name: 'number' }),
	        __param(0, Inject(LOCALE_ID$1)),
	        __metadata("design:paramtypes", [String])
	    ], DecimalPipe);
	    return DecimalPipe;
	}());
	/**
	 * @ngModule CommonModule
	 * @description
	 *
	 * Transforms a number to a percentage
	 * string, formatted according to locale rules that determine group sizing and
	 * separator, decimal-point character, and other locale-specific
	 * configurations.
	 *
	 * @see `formatPercent()`
	 *
	 * @usageNotes
	 * The following code shows how the pipe transforms numbers
	 * into text strings, according to various format specifications,
	 * where the caller's default locale is `en-US`.
	 *
	 * <code-example path="common/pipes/ts/percent_pipe.ts" region='PercentPipe'></code-example>
	 *
	 * @publicApi
	 */
	var PercentPipe = /** @class */ (function () {
	    function PercentPipe(_locale) {
	        this._locale = _locale;
	    }
	    PercentPipe_1 = PercentPipe;
	    /**
	     *
	     * @param value The number to be formatted as a percentage.
	     * @param digitsInfo Decimal representation options, specified by a string
	     * in the following format:<br>
	     * <code>{minIntegerDigits}.{minFractionDigits}-{maxFractionDigits}</code>.
	     *   - `minIntegerDigits`: The minimum number of integer digits before the decimal point.
	     * Default is `1`.
	     *   - `minFractionDigits`: The minimum number of digits after the decimal point.
	     * Default is `0`.
	     *   - `maxFractionDigits`: The maximum number of digits after the decimal point.
	     * Default is `0`.
	     * @param locale A locale code for the locale format rules to use.
	     * When not supplied, uses the value of `LOCALE_ID`, which is `en-US` by default.
	     * See [Setting your app locale](guide/i18n#setting-up-the-locale-of-your-app).
	     */
	    PercentPipe.prototype.transform = function (value, digitsInfo, locale) {
	        if (isEmpty(value))
	            return null;
	        locale = locale || this._locale;
	        try {
	            var num = strToNumber(value);
	            return formatPercent(num, locale, digitsInfo);
	        }
	        catch (error) {
	            throw invalidPipeArgumentError(PercentPipe_1, error.message);
	        }
	    };
	    var PercentPipe_1;
	    PercentPipe = PercentPipe_1 = __decorate([
	        Pipe({ name: 'percent' }),
	        __param(0, Inject(LOCALE_ID$1)),
	        __metadata("design:paramtypes", [String])
	    ], PercentPipe);
	    return PercentPipe;
	}());
	/**
	 * @ngModule CommonModule
	 * @description
	 *
	 * Transforms a number to a currency string, formatted according to locale rules
	 * that determine group sizing and separator, decimal-point character,
	 * and other locale-specific configurations.
	 *
	 * {@a currency-code-deprecation}
	 * <div class="alert is-helpful">
	 *
	 * **Deprecation notice:**
	 *
	 * The default currency code is currently always `USD` but this is deprecated from v9.
	 *
	 * **In v11 the default currency code will be taken from the current locale identified by
	 * the `LOCAL_ID` token. See the [i18n guide](guide/i18n#setting-up-the-locale-of-your-app) for
	 * more information.**
	 *
	 * If you need the previous behavior then set it by creating a `DEFAULT_CURRENCY_CODE` provider in
	 * your application `NgModule`:
	 *
	 * ```ts
	 * {provide: DEFAULT_CURRENCY_CODE, useValue: 'USD'}
	 * ```
	 *
	 * </div>
	 *
	 * @see `getCurrencySymbol()`
	 * @see `formatCurrency()`
	 *
	 * @usageNotes
	 * The following code shows how the pipe transforms numbers
	 * into text strings, according to various format specifications,
	 * where the caller's default locale is `en-US`.
	 *
	 * <code-example path="common/pipes/ts/currency_pipe.ts" region='CurrencyPipe'></code-example>
	 *
	 * @publicApi
	 */
	var CurrencyPipe = /** @class */ (function () {
	    function CurrencyPipe(_locale, _defaultCurrencyCode) {
	        if (_defaultCurrencyCode === void 0) { _defaultCurrencyCode = 'USD'; }
	        this._locale = _locale;
	        this._defaultCurrencyCode = _defaultCurrencyCode;
	    }
	    CurrencyPipe_1 = CurrencyPipe;
	    /**
	     *
	     * @param value The number to be formatted as currency.
	     * @param currencyCode The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) currency code,
	     * such as `USD` for the US dollar and `EUR` for the euro. The default currency code can be
	     * configured using the `DEFAULT_CURRENCY_CODE` injection token.
	     * @param display The format for the currency indicator. One of the following:
	     *   - `code`: Show the code (such as `USD`).
	     *   - `symbol`(default): Show the symbol (such as `$`).
	     *   - `symbol-narrow`: Use the narrow symbol for locales that have two symbols for their
	     * currency.
	     * For example, the Canadian dollar CAD has the symbol `CA$` and the symbol-narrow `$`. If the
	     * locale has no narrow symbol, uses the standard symbol for the locale.
	     *   - String: Use the given string value instead of a code or a symbol.
	     * For example, an empty string will suppress the currency & symbol.
	     *   - Boolean (marked deprecated in v5): `true` for symbol and false for `code`.
	     *
	     * @param digitsInfo Decimal representation options, specified by a string
	     * in the following format:<br>
	     * <code>{minIntegerDigits}.{minFractionDigits}-{maxFractionDigits}</code>.
	     *   - `minIntegerDigits`: The minimum number of integer digits before the decimal point.
	     * Default is `1`.
	     *   - `minFractionDigits`: The minimum number of digits after the decimal point.
	     * Default is `2`.
	     *   - `maxFractionDigits`: The maximum number of digits after the decimal point.
	     * Default is `2`.
	     * If not provided, the number will be formatted with the proper amount of digits,
	     * depending on what the [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) specifies.
	     * For example, the Canadian dollar has 2 digits, whereas the Chilean peso has none.
	     * @param locale A locale code for the locale format rules to use.
	     * When not supplied, uses the value of `LOCALE_ID`, which is `en-US` by default.
	     * See [Setting your app locale](guide/i18n#setting-up-the-locale-of-your-app).
	     */
	    CurrencyPipe.prototype.transform = function (value, currencyCode, display, digitsInfo, locale) {
	        if (display === void 0) { display = 'symbol'; }
	        if (isEmpty(value))
	            return null;
	        locale = locale || this._locale;
	        if (typeof display === 'boolean') {
	            if (console && console.warn) {
	                console.warn("Warning: the currency pipe has been changed in Angular v5. The symbolDisplay option (third parameter) is now a string instead of a boolean. The accepted values are \"code\", \"symbol\" or \"symbol-narrow\".");
	            }
	            display = display ? 'symbol' : 'code';
	        }
	        var currency = currencyCode || this._defaultCurrencyCode;
	        if (display !== 'code') {
	            if (display === 'symbol' || display === 'symbol-narrow') {
	                currency = getCurrencySymbol(currency, display === 'symbol' ? 'wide' : 'narrow', locale);
	            }
	            else {
	                currency = display;
	            }
	        }
	        try {
	            var num = strToNumber(value);
	            return formatCurrency(num, locale, currency, currencyCode, digitsInfo);
	        }
	        catch (error) {
	            throw invalidPipeArgumentError(CurrencyPipe_1, error.message);
	        }
	    };
	    var CurrencyPipe_1;
	    CurrencyPipe = CurrencyPipe_1 = __decorate([
	        Pipe({ name: 'currency' }),
	        __param(0, Inject(LOCALE_ID$1)),
	        __param(1, Inject(DEFAULT_CURRENCY_CODE)),
	        __metadata("design:paramtypes", [String, String])
	    ], CurrencyPipe);
	    return CurrencyPipe;
	}());
	function isEmpty(value) {
	    return value == null || value === '' || value !== value;
	}
	/**
	 * Transforms a string into a number (if needed).
	 */
	function strToNumber(value) {
	    // Convert strings to numbers
	    if (typeof value === 'string' && !isNaN(Number(value) - parseFloat(value))) {
	        return Number(value);
	    }
	    if (typeof value !== 'number') {
	        throw new Error(value + " is not a number");
	    }
	    return value;
	}

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * @ngModule CommonModule
	 * @description
	 *
	 * Creates a new `Array` or `String` containing a subset (slice) of the elements.
	 *
	 * @usageNotes
	 *
	 * All behavior is based on the expected behavior of the JavaScript API `Array.prototype.slice()`
	 * and `String.prototype.slice()`.
	 *
	 * When operating on an `Array`, the returned `Array` is always a copy even when all
	 * the elements are being returned.
	 *
	 * When operating on a blank value, the pipe returns the blank value.
	 *
	 * ### List Example
	 *
	 * This `ngFor` example:
	 *
	 * {@example common/pipes/ts/slice_pipe.ts region='SlicePipe_list'}
	 *
	 * produces the following:
	 *
	 * ```html
	 * <li>b</li>
	 * <li>c</li>
	 * ```
	 *
	 * ### String Examples
	 *
	 * {@example common/pipes/ts/slice_pipe.ts region='SlicePipe_string'}
	 *
	 * @publicApi
	 */
	var SlicePipe = /** @class */ (function () {
	    function SlicePipe() {
	    }
	    SlicePipe_1 = SlicePipe;
	    SlicePipe.prototype.transform = function (value, start, end) {
	        if (value == null)
	            return value;
	        if (!this.supports(value)) {
	            throw invalidPipeArgumentError(SlicePipe_1, value);
	        }
	        return value.slice(start, end);
	    };
	    SlicePipe.prototype.supports = function (obj) {
	        return typeof obj === 'string' || Array.isArray(obj);
	    };
	    var SlicePipe_1;
	    SlicePipe = SlicePipe_1 = __decorate([
	        Pipe({ name: 'slice', pure: false })
	    ], SlicePipe);
	    return SlicePipe;
	}());

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * A collection of Angular pipes that are likely to be used in each and every application.
	 */
	var COMMON_PIPES = [
	    AsyncPipe,
	    UpperCasePipe,
	    LowerCasePipe,
	    JsonPipe,
	    SlicePipe,
	    DecimalPipe,
	    PercentPipe,
	    TitleCasePipe,
	    CurrencyPipe,
	    DatePipe,
	    I18nPluralPipe,
	    I18nSelectPipe,
	    KeyValuePipe,
	];

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	// Note: This does not contain the location providers,
	// as they need some platform specific implementations to work.
	/**
	 * Exports all the basic Angular directives and pipes,
	 * such as `NgIf`, `NgForOf`, `DecimalPipe`, and so on.
	 * Re-exported by `BrowserModule`, which is included automatically in the root
	 * `AppModule` when you create a new app with the CLI `new` command.
	 *
	 * * The `providers` options configure the NgModule's injector to provide
	 * localization dependencies to members.
	 * * The `exports` options make the declared directives and pipes available for import
	 * by other NgModules.
	 *
	 * @publicApi
	 */
	var CommonModule = /** @class */ (function () {
	    function CommonModule() {
	    }
	    CommonModule = __decorate([
	        NgModule({
	            declarations: [COMMON_DIRECTIVES, COMMON_PIPES],
	            exports: [COMMON_DIRECTIVES, COMMON_PIPES],
	            providers: [
	                { provide: NgLocalization, useClass: NgLocaleLocalization },
	            ],
	        })
	    ], CommonModule);
	    return CommonModule;
	}());

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	var PLATFORM_BROWSER_ID = 'browser';
	/**
	 * Returns whether a platform id represents a browser platform.
	 * @publicApi
	 */
	function isPlatformBrowser(platformId) {
	    return platformId === PLATFORM_BROWSER_ID;
	}

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * @publicApi
	 */
	var VERSION$3 = new Version$1('9.1.6');

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * Defines a scroll position manager. Implemented by `BrowserViewportScroller`.
	 *
	 * @publicApi
	 */
	var ViewportScroller = /** @class */ (function () {
	    function ViewportScroller() {
	    }
	    // De-sugared tree-shakable injection
	    // See #23917
	    /** @nocollapse */
	    ViewportScroller.Éµprov = ÉµÉµdefineInjectable({
	        token: ViewportScroller,
	        providedIn: 'root',
	        factory: function () { return new BrowserViewportScroller(ÉµÉµinject(DOCUMENT$1), window, ÉµÉµinject(ErrorHandler)); }
	    });
	    return ViewportScroller;
	}());
	/**
	 * Manages the scroll position for a browser window.
	 */
	var BrowserViewportScroller = /** @class */ (function () {
	    function BrowserViewportScroller(document, window, errorHandler) {
	        this.document = document;
	        this.window = window;
	        this.errorHandler = errorHandler;
	        this.offset = function () { return [0, 0]; };
	    }
	    /**
	     * Configures the top offset used when scrolling to an anchor.
	     * @param offset A position in screen coordinates (a tuple with x and y values)
	     * or a function that returns the top offset position.
	     *
	     */
	    BrowserViewportScroller.prototype.setOffset = function (offset) {
	        if (Array.isArray(offset)) {
	            this.offset = function () { return offset; };
	        }
	        else {
	            this.offset = offset;
	        }
	    };
	    /**
	     * Retrieves the current scroll position.
	     * @returns The position in screen coordinates.
	     */
	    BrowserViewportScroller.prototype.getScrollPosition = function () {
	        if (this.supportScrollRestoration()) {
	            return [this.window.scrollX, this.window.scrollY];
	        }
	        else {
	            return [0, 0];
	        }
	    };
	    /**
	     * Sets the scroll position.
	     * @param position The new position in screen coordinates.
	     */
	    BrowserViewportScroller.prototype.scrollToPosition = function (position) {
	        if (this.supportScrollRestoration()) {
	            this.window.scrollTo(position[0], position[1]);
	        }
	    };
	    /**
	     * Scrolls to an anchor element.
	     * @param anchor The ID of the anchor element.
	     */
	    BrowserViewportScroller.prototype.scrollToAnchor = function (anchor) {
	        if (this.supportScrollRestoration()) {
	            // Escape anything passed to `querySelector` as it can throw errors and stop the application
	            // from working if invalid values are passed.
	            if (this.window.CSS && this.window.CSS.escape) {
	                anchor = this.window.CSS.escape(anchor);
	            }
	            else {
	                anchor = anchor.replace(/(\"|\'\ |:|\.|\[|\]|,|=)/g, '\\$1');
	            }
	            try {
	                var elSelectedById = this.document.querySelector("#" + anchor);
	                if (elSelectedById) {
	                    this.scrollToElement(elSelectedById);
	                    return;
	                }
	                var elSelectedByName = this.document.querySelector("[name='" + anchor + "']");
	                if (elSelectedByName) {
	                    this.scrollToElement(elSelectedByName);
	                    return;
	                }
	            }
	            catch (e) {
	                this.errorHandler.handleError(e);
	            }
	        }
	    };
	    /**
	     * Disables automatic scroll restoration provided by the browser.
	     */
	    BrowserViewportScroller.prototype.setHistoryScrollRestoration = function (scrollRestoration) {
	        if (this.supportScrollRestoration()) {
	            var history_1 = this.window.history;
	            if (history_1 && history_1.scrollRestoration) {
	                history_1.scrollRestoration = scrollRestoration;
	            }
	        }
	    };
	    BrowserViewportScroller.prototype.scrollToElement = function (el) {
	        var rect = el.getBoundingClientRect();
	        var left = rect.left + this.window.pageXOffset;
	        var top = rect.top + this.window.pageYOffset;
	        var offset = this.offset();
	        this.window.scrollTo(left - offset[0], top - offset[1]);
	    };
	    /**
	     * We only support scroll restoration when we can get a hold of window.
	     * This means that we do not support this behavior when running in a web worker.
	     *
	     * Lifting this restriction right now would require more changes in the dom adapter.
	     * Since webworkers aren't widely used, we will lift it once RouterScroller is
	     * battle-tested.
	     */
	    BrowserViewportScroller.prototype.supportScrollRestoration = function () {
	        try {
	            return !!this.window && !!this.window.scrollTo;
	        }
	        catch (_a) {
	            return false;
	        }
	    };
	    return BrowserViewportScroller;
	}());

	/**
	 * @license Angular v9.1.6
	 * (c) 2010-2020 Google LLC. https://angular.io/
	 * License: MIT
	 */

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * Provides DOM operations in any browser environment.
	 *
	 * @security Tread carefully! Interacting with the DOM directly is dangerous and
	 * can introduce XSS risks.
	 */
	var GenericBrowserDomAdapter = /** @class */ (function (_super) {
	    __extends(GenericBrowserDomAdapter, _super);
	    function GenericBrowserDomAdapter() {
	        return _super.call(this) || this;
	    }
	    GenericBrowserDomAdapter.prototype.supportsDOMEvents = function () {
	        return true;
	    };
	    return GenericBrowserDomAdapter;
	}(DomAdapter));

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	var Éµ0$5 = function () {
	    if (_global$1['Node']) {
	        return _global$1['Node'].prototype.contains || function (node) {
	            return !!(this.compareDocumentPosition(node) & 16);
	        };
	    }
	    return undefined;
	};
	var nodeContains = (Éµ0$5)();
	/**
	 * A `DomAdapter` powered by full browser DOM APIs.
	 *
	 * @security Tread carefully! Interacting with the DOM directly is dangerous and
	 * can introduce XSS risks.
	 */
	/* tslint:disable:requireParameterType no-console */
	var BrowserDomAdapter = /** @class */ (function (_super) {
	    __extends(BrowserDomAdapter, _super);
	    function BrowserDomAdapter() {
	        return _super !== null && _super.apply(this, arguments) || this;
	    }
	    BrowserDomAdapter.makeCurrent = function () {
	        setRootDomAdapter(new BrowserDomAdapter());
	    };
	    BrowserDomAdapter.prototype.getProperty = function (el, name) {
	        return el[name];
	    };
	    BrowserDomAdapter.prototype.log = function (error) {
	        if (window.console) {
	            window.console.log && window.console.log(error);
	        }
	    };
	    BrowserDomAdapter.prototype.logGroup = function (error) {
	        if (window.console) {
	            window.console.group && window.console.group(error);
	        }
	    };
	    BrowserDomAdapter.prototype.logGroupEnd = function () {
	        if (window.console) {
	            window.console.groupEnd && window.console.groupEnd();
	        }
	    };
	    BrowserDomAdapter.prototype.onAndCancel = function (el, evt, listener) {
	        el.addEventListener(evt, listener, false);
	        // Needed to follow Dart's subscription semantic, until fix of
	        // https://code.google.com/p/dart/issues/detail?id=17406
	        return function () {
	            el.removeEventListener(evt, listener, false);
	        };
	    };
	    BrowserDomAdapter.prototype.dispatchEvent = function (el, evt) {
	        el.dispatchEvent(evt);
	    };
	    BrowserDomAdapter.prototype.remove = function (node) {
	        if (node.parentNode) {
	            node.parentNode.removeChild(node);
	        }
	        return node;
	    };
	    BrowserDomAdapter.prototype.getValue = function (el) {
	        return el.value;
	    };
	    BrowserDomAdapter.prototype.createElement = function (tagName, doc) {
	        doc = doc || this.getDefaultDocument();
	        return doc.createElement(tagName);
	    };
	    BrowserDomAdapter.prototype.createHtmlDocument = function () {
	        return document.implementation.createHTMLDocument('fakeTitle');
	    };
	    BrowserDomAdapter.prototype.getDefaultDocument = function () {
	        return document;
	    };
	    BrowserDomAdapter.prototype.isElementNode = function (node) {
	        return node.nodeType === Node.ELEMENT_NODE;
	    };
	    BrowserDomAdapter.prototype.isShadowRoot = function (node) {
	        return node instanceof DocumentFragment;
	    };
	    BrowserDomAdapter.prototype.getGlobalEventTarget = function (doc, target) {
	        if (target === 'window') {
	            return window;
	        }
	        if (target === 'document') {
	            return doc;
	        }
	        if (target === 'body') {
	            return doc.body;
	        }
	        return null;
	    };
	    BrowserDomAdapter.prototype.getHistory = function () {
	        return window.history;
	    };
	    BrowserDomAdapter.prototype.getLocation = function () {
	        return window.location;
	    };
	    BrowserDomAdapter.prototype.getBaseHref = function (doc) {
	        var href = getBaseElementHref();
	        return href == null ? null : relativePath(href);
	    };
	    BrowserDomAdapter.prototype.resetBaseElement = function () {
	        baseElement = null;
	    };
	    BrowserDomAdapter.prototype.getUserAgent = function () {
	        return window.navigator.userAgent;
	    };
	    BrowserDomAdapter.prototype.performanceNow = function () {
	        // performance.now() is not available in all browsers, see
	        // http://caniuse.com/#search=performance.now
	        return window.performance && window.performance.now ? window.performance.now() :
	            new Date().getTime();
	    };
	    BrowserDomAdapter.prototype.supportsCookies = function () {
	        return true;
	    };
	    BrowserDomAdapter.prototype.getCookie = function (name) {
	        return parseCookieValue(document.cookie, name);
	    };
	    return BrowserDomAdapter;
	}(GenericBrowserDomAdapter));
	var baseElement = null;
	function getBaseElementHref() {
	    if (!baseElement) {
	        baseElement = document.querySelector('base');
	        if (!baseElement) {
	            return null;
	        }
	    }
	    return baseElement.getAttribute('href');
	}
	// based on urlUtils.js in AngularJS 1
	var urlParsingNode;
	function relativePath(url) {
	    if (!urlParsingNode) {
	        urlParsingNode = document.createElement('a');
	    }
	    urlParsingNode.setAttribute('href', url);
	    return (urlParsingNode.pathname.charAt(0) === '/') ? urlParsingNode.pathname :
	        '/' + urlParsingNode.pathname;
	}

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * An id that identifies a particular application being bootstrapped, that should
	 * match across the client/server boundary.
	 */
	var TRANSITION_ID = new InjectionToken('TRANSITION_ID');
	function appInitializerFactory(transitionId, document, injector) {
	    return function () {
	        // Wait for all application initializers to be completed before removing the styles set by
	        // the server.
	        injector.get(ApplicationInitStatus).donePromise.then(function () {
	            var dom = getDOM();
	            var styles = Array.prototype.slice.apply(document.querySelectorAll("style[ng-transition]"));
	            styles.filter(function (el) { return el.getAttribute('ng-transition') === transitionId; })
	                .forEach(function (el) { return dom.remove(el); });
	        });
	    };
	}
	var SERVER_TRANSITION_PROVIDERS = [
	    {
	        provide: APP_INITIALIZER,
	        useFactory: appInitializerFactory,
	        deps: [TRANSITION_ID, DOCUMENT$1, Injector],
	        multi: true
	    },
	];

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	var BrowserGetTestability = /** @class */ (function () {
	    function BrowserGetTestability() {
	    }
	    BrowserGetTestability.init = function () {
	        setTestabilityGetter(new BrowserGetTestability());
	    };
	    BrowserGetTestability.prototype.addToWindow = function (registry) {
	        _global$1['getAngularTestability'] = function (elem, findInAncestors) {
	            if (findInAncestors === void 0) { findInAncestors = true; }
	            var testability = registry.findTestabilityInTree(elem, findInAncestors);
	            if (testability == null) {
	                throw new Error('Could not find testability for element.');
	            }
	            return testability;
	        };
	        _global$1['getAllAngularTestabilities'] = function () { return registry.getAllTestabilities(); };
	        _global$1['getAllAngularRootElements'] = function () { return registry.getAllRootElements(); };
	        var whenAllStable = function (callback /** TODO #9100 */) {
	            var testabilities = _global$1['getAllAngularTestabilities']();
	            var count = testabilities.length;
	            var didWork = false;
	            var decrement = function (didWork_ /** TODO #9100 */) {
	                didWork = didWork || didWork_;
	                count--;
	                if (count == 0) {
	                    callback(didWork);
	                }
	            };
	            testabilities.forEach(function (testability /** TODO #9100 */) {
	                testability.whenStable(decrement);
	            });
	        };
	        if (!_global$1['frameworkStabilizers']) {
	            _global$1['frameworkStabilizers'] = [];
	        }
	        _global$1['frameworkStabilizers'].push(whenAllStable);
	    };
	    BrowserGetTestability.prototype.findTestabilityInTree = function (registry, elem, findInAncestors) {
	        if (elem == null) {
	            return null;
	        }
	        var t = registry.getTestability(elem);
	        if (t != null) {
	            return t;
	        }
	        else if (!findInAncestors) {
	            return null;
	        }
	        if (getDOM().isShadowRoot(elem)) {
	            return this.findTestabilityInTree(registry, elem.host, true);
	        }
	        return this.findTestabilityInTree(registry, elem.parentElement, true);
	    };
	    return BrowserGetTestability;
	}());
	/**
	 * Exports the value under a given `name` in the global property `ng`. For example `ng.probe` if
	 * `name` is `'probe'`.
	 * @param name Name under which it will be exported. Keep in mind this will be a property of the
	 * global `ng` object.
	 * @param value The value to export.
	 */
	function exportNgVar(name, value) {
	    if (typeof COMPILED === 'undefined' || !COMPILED) {
	        // Note: we can't export `ng` when using closure enhanced optimization as:
	        // - closure declares globals itself for minified names, which sometimes clobber our `ng` global
	        // - we can't declare a closure extern as the namespace `ng` is already used within Google
	        //   for typings for angularJS (via `goog.provide('ng....')`).
	        var ng = _global$1['ng'] = _global$1['ng'] || {};
	        ng[name] = value;
	    }
	}

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	var Éµ0$1$1 = function () { return ({
	    'ApplicationRef': ApplicationRef,
	    'NgZone': NgZone,
	}); };
	var CORE_TOKENS = (Éµ0$1$1)();
	var INSPECT_GLOBAL_NAME = 'probe';
	var CORE_TOKENS_GLOBAL_NAME = 'coreTokens';
	/**
	 * Returns a {@link DebugElement} for the given native DOM element, or
	 * null if the given native element does not have an Angular view associated
	 * with it.
	 */
	function inspectNativeElementR2(element) {
	    return getDebugNodeR2(element);
	}
	function _createNgProbeR2(coreTokens) {
	    exportNgVar(INSPECT_GLOBAL_NAME, inspectNativeElementR2);
	    exportNgVar(CORE_TOKENS_GLOBAL_NAME, __assign(__assign({}, CORE_TOKENS), _ngProbeTokensToMap(coreTokens || [])));
	    return function () { return inspectNativeElementR2; };
	}
	function _ngProbeTokensToMap(tokens) {
	    return tokens.reduce(function (prev, t) { return (prev[t.name] = t.token, prev); }, {});
	}
	/**
	 * Providers which support debugging Angular applications (e.g. via `ng.probe`).
	 */
	var ELEMENT_PROBE_PROVIDERS__PRE_R3__ = [
	    {
	        provide: APP_INITIALIZER,
	        useFactory: _createNgProbeR2,
	        deps: [
	            [NgProbeToken, new Optional()],
	        ],
	        multi: true,
	    },
	];
	var ELEMENT_PROBE_PROVIDERS = ELEMENT_PROBE_PROVIDERS__PRE_R3__;

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * The injection token for the event-manager plug-in service.
	 *
	 * @publicApi
	 */
	var EVENT_MANAGER_PLUGINS = new InjectionToken('EventManagerPlugins');
	/**
	 * An injectable service that provides event management for Angular
	 * through a browser plug-in.
	 *
	 * @publicApi
	 */
	var EventManager = /** @class */ (function () {
	    /**
	     * Initializes an instance of the event-manager service.
	     */
	    function EventManager(plugins, _zone) {
	        var _this = this;
	        this._zone = _zone;
	        this._eventNameToPlugin = new Map();
	        plugins.forEach(function (p) { return p.manager = _this; });
	        this._plugins = plugins.slice().reverse();
	    }
	    /**
	     * Registers a handler for a specific element and event.
	     *
	     * @param element The HTML element to receive event notifications.
	     * @param eventName The name of the event to listen for.
	     * @param handler A function to call when the notification occurs. Receives the
	     * event object as an argument.
	     * @returns  A callback function that can be used to remove the handler.
	     */
	    EventManager.prototype.addEventListener = function (element, eventName, handler) {
	        var plugin = this._findPluginFor(eventName);
	        return plugin.addEventListener(element, eventName, handler);
	    };
	    /**
	     * Registers a global handler for an event in a target view.
	     *
	     * @param target A target for global event notifications. One of "window", "document", or "body".
	     * @param eventName The name of the event to listen for.
	     * @param handler A function to call when the notification occurs. Receives the
	     * event object as an argument.
	     * @returns A callback function that can be used to remove the handler.
	     */
	    EventManager.prototype.addGlobalEventListener = function (target, eventName, handler) {
	        var plugin = this._findPluginFor(eventName);
	        return plugin.addGlobalEventListener(target, eventName, handler);
	    };
	    /**
	     * Retrieves the compilation zone in which event listeners are registered.
	     */
	    EventManager.prototype.getZone = function () {
	        return this._zone;
	    };
	    /** @internal */
	    EventManager.prototype._findPluginFor = function (eventName) {
	        var plugin = this._eventNameToPlugin.get(eventName);
	        if (plugin) {
	            return plugin;
	        }
	        var plugins = this._plugins;
	        for (var i = 0; i < plugins.length; i++) {
	            var plugin_1 = plugins[i];
	            if (plugin_1.supports(eventName)) {
	                this._eventNameToPlugin.set(eventName, plugin_1);
	                return plugin_1;
	            }
	        }
	        throw new Error("No event manager plugin found for event " + eventName);
	    };
	    EventManager = __decorate([
	        Injectable(),
	        __param(0, Inject(EVENT_MANAGER_PLUGINS)),
	        __metadata("design:paramtypes", [Array, NgZone])
	    ], EventManager);
	    return EventManager;
	}());
	var EventManagerPlugin = /** @class */ (function () {
	    function EventManagerPlugin(_doc) {
	        this._doc = _doc;
	    }
	    EventManagerPlugin.prototype.addGlobalEventListener = function (element, eventName, handler) {
	        var target = getDOM().getGlobalEventTarget(this._doc, element);
	        if (!target) {
	            throw new Error("Unsupported event target " + target + " for event " + eventName);
	        }
	        return this.addEventListener(target, eventName, handler);
	    };
	    return EventManagerPlugin;
	}());

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	var SharedStylesHost = /** @class */ (function () {
	    function SharedStylesHost() {
	        /** @internal */
	        this._stylesSet = new Set();
	    }
	    SharedStylesHost.prototype.addStyles = function (styles) {
	        var _this = this;
	        var additions = new Set();
	        styles.forEach(function (style) {
	            if (!_this._stylesSet.has(style)) {
	                _this._stylesSet.add(style);
	                additions.add(style);
	            }
	        });
	        this.onStylesAdded(additions);
	    };
	    SharedStylesHost.prototype.onStylesAdded = function (additions) { };
	    SharedStylesHost.prototype.getAllStyles = function () {
	        return Array.from(this._stylesSet);
	    };
	    SharedStylesHost = __decorate([
	        Injectable()
	    ], SharedStylesHost);
	    return SharedStylesHost;
	}());
	var DomSharedStylesHost = /** @class */ (function (_super) {
	    __extends(DomSharedStylesHost, _super);
	    function DomSharedStylesHost(_doc) {
	        var _this = _super.call(this) || this;
	        _this._doc = _doc;
	        _this._hostNodes = new Set();
	        _this._styleNodes = new Set();
	        _this._hostNodes.add(_doc.head);
	        return _this;
	    }
	    DomSharedStylesHost.prototype._addStylesToHost = function (styles, host) {
	        var _this = this;
	        styles.forEach(function (style) {
	            var styleEl = _this._doc.createElement('style');
	            styleEl.textContent = style;
	            _this._styleNodes.add(host.appendChild(styleEl));
	        });
	    };
	    DomSharedStylesHost.prototype.addHost = function (hostNode) {
	        this._addStylesToHost(this._stylesSet, hostNode);
	        this._hostNodes.add(hostNode);
	    };
	    DomSharedStylesHost.prototype.removeHost = function (hostNode) {
	        this._hostNodes.delete(hostNode);
	    };
	    DomSharedStylesHost.prototype.onStylesAdded = function (additions) {
	        var _this = this;
	        this._hostNodes.forEach(function (hostNode) { return _this._addStylesToHost(additions, hostNode); });
	    };
	    DomSharedStylesHost.prototype.ngOnDestroy = function () {
	        this._styleNodes.forEach(function (styleNode) { return getDOM().remove(styleNode); });
	    };
	    DomSharedStylesHost = __decorate([
	        Injectable(),
	        __param(0, Inject(DOCUMENT$1)),
	        __metadata("design:paramtypes", [Object])
	    ], DomSharedStylesHost);
	    return DomSharedStylesHost;
	}(SharedStylesHost));

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	var NAMESPACE_URIS = {
	    'svg': 'http://www.w3.org/2000/svg',
	    'xhtml': 'http://www.w3.org/1999/xhtml',
	    'xlink': 'http://www.w3.org/1999/xlink',
	    'xml': 'http://www.w3.org/XML/1998/namespace',
	    'xmlns': 'http://www.w3.org/2000/xmlns/',
	};
	var COMPONENT_REGEX = /%COMP%/g;
	var NG_DEV_MODE$1 = typeof ngDevMode === 'undefined' || !!ngDevMode;
	var COMPONENT_VARIABLE$1 = '%COMP%';
	var HOST_ATTR$1 = "_nghost-" + COMPONENT_VARIABLE$1;
	var CONTENT_ATTR$1 = "_ngcontent-" + COMPONENT_VARIABLE$1;
	function shimContentAttribute(componentShortId) {
	    return CONTENT_ATTR$1.replace(COMPONENT_REGEX, componentShortId);
	}
	function shimHostAttribute(componentShortId) {
	    return HOST_ATTR$1.replace(COMPONENT_REGEX, componentShortId);
	}
	function flattenStyles(compId, styles, target) {
	    for (var i = 0; i < styles.length; i++) {
	        var style = styles[i];
	        if (Array.isArray(style)) {
	            flattenStyles(compId, style, target);
	        }
	        else {
	            style = style.replace(COMPONENT_REGEX, compId);
	            target.push(style);
	        }
	    }
	    return target;
	}
	function decoratePreventDefault(eventHandler) {
	    // `DebugNode.triggerEventHandler` needs to know if the listener was created with
	    // decoratePreventDefault or is a listener added outside the Angular context so it can handle the
	    // two differently. In the first case, the special '__ngUnwrap__' token is passed to the unwrap
	    // the listener (see below).
	    return function (event) {
	        // Ivy uses '__ngUnwrap__' as a special token that allows us to unwrap the function
	        // so that it can be invoked programmatically by `DebugNode.triggerEventHandler`. The debug_node
	        // can inspect the listener toString contents for the existence of this special token. Because
	        // the token is a string literal, it is ensured to not be modified by compiled code.
	        if (event === '__ngUnwrap__') {
	            return eventHandler;
	        }
	        var allowDefaultBehavior = eventHandler(event);
	        if (allowDefaultBehavior === false) {
	            // TODO(tbosch): move preventDefault into event plugins...
	            event.preventDefault();
	            event.returnValue = false;
	        }
	        return undefined;
	    };
	}
	var DomRendererFactory2 = /** @class */ (function () {
	    function DomRendererFactory2(eventManager, sharedStylesHost, appId) {
	        this.eventManager = eventManager;
	        this.sharedStylesHost = sharedStylesHost;
	        this.appId = appId;
	        this.rendererByCompId = new Map();
	        this.defaultRenderer = new DefaultDomRenderer2(eventManager);
	    }
	    DomRendererFactory2.prototype.createRenderer = function (element, type) {
	        if (!element || !type) {
	            return this.defaultRenderer;
	        }
	        switch (type.encapsulation) {
	            case ViewEncapsulation$1$1.Emulated: {
	                var renderer = this.rendererByCompId.get(type.id);
	                if (!renderer) {
	                    renderer = new EmulatedEncapsulationDomRenderer2(this.eventManager, this.sharedStylesHost, type, this.appId);
	                    this.rendererByCompId.set(type.id, renderer);
	                }
	                renderer.applyToHost(element);
	                return renderer;
	            }
	            case ViewEncapsulation$1$1.Native:
	            case ViewEncapsulation$1$1.ShadowDom:
	                return new ShadowDomRenderer(this.eventManager, this.sharedStylesHost, element, type);
	            default: {
	                if (!this.rendererByCompId.has(type.id)) {
	                    var styles = flattenStyles(type.id, type.styles, []);
	                    this.sharedStylesHost.addStyles(styles);
	                    this.rendererByCompId.set(type.id, this.defaultRenderer);
	                }
	                return this.defaultRenderer;
	            }
	        }
	    };
	    DomRendererFactory2.prototype.begin = function () { };
	    DomRendererFactory2.prototype.end = function () { };
	    DomRendererFactory2 = __decorate([
	        Injectable(),
	        __param(2, Inject(APP_ID)),
	        __metadata("design:paramtypes", [EventManager, DomSharedStylesHost, String])
	    ], DomRendererFactory2);
	    return DomRendererFactory2;
	}());
	var DefaultDomRenderer2 = /** @class */ (function () {
	    function DefaultDomRenderer2(eventManager) {
	        this.eventManager = eventManager;
	        this.data = Object.create(null);
	    }
	    DefaultDomRenderer2.prototype.destroy = function () { };
	    DefaultDomRenderer2.prototype.createElement = function (name, namespace) {
	        if (namespace) {
	            // In cases where Ivy (not ViewEngine) is giving us the actual namespace, the look up by key
	            // will result in undefined, so we just return the namespace here.
	            return document.createElementNS(NAMESPACE_URIS[namespace] || namespace, name);
	        }
	        return document.createElement(name);
	    };
	    DefaultDomRenderer2.prototype.createComment = function (value) {
	        return document.createComment(value);
	    };
	    DefaultDomRenderer2.prototype.createText = function (value) {
	        return document.createTextNode(value);
	    };
	    DefaultDomRenderer2.prototype.appendChild = function (parent, newChild) {
	        parent.appendChild(newChild);
	    };
	    DefaultDomRenderer2.prototype.insertBefore = function (parent, newChild, refChild) {
	        if (parent) {
	            parent.insertBefore(newChild, refChild);
	        }
	    };
	    DefaultDomRenderer2.prototype.removeChild = function (parent, oldChild) {
	        if (parent) {
	            parent.removeChild(oldChild);
	        }
	    };
	    DefaultDomRenderer2.prototype.selectRootElement = function (selectorOrNode, preserveContent) {
	        var el = typeof selectorOrNode === 'string' ? document.querySelector(selectorOrNode) :
	            selectorOrNode;
	        if (!el) {
	            throw new Error("The selector \"" + selectorOrNode + "\" did not match any elements");
	        }
	        if (!preserveContent) {
	            el.textContent = '';
	        }
	        return el;
	    };
	    DefaultDomRenderer2.prototype.parentNode = function (node) {
	        return node.parentNode;
	    };
	    DefaultDomRenderer2.prototype.nextSibling = function (node) {
	        return node.nextSibling;
	    };
	    DefaultDomRenderer2.prototype.setAttribute = function (el, name, value, namespace) {
	        if (namespace) {
	            name = namespace + ':' + name;
	            // TODO(FW-811): Ivy may cause issues here because it's passing around
	            // full URIs for namespaces, therefore this lookup will fail.
	            var namespaceUri = NAMESPACE_URIS[namespace];
	            if (namespaceUri) {
	                el.setAttributeNS(namespaceUri, name, value);
	            }
	            else {
	                el.setAttribute(name, value);
	            }
	        }
	        else {
	            el.setAttribute(name, value);
	        }
	    };
	    DefaultDomRenderer2.prototype.removeAttribute = function (el, name, namespace) {
	        if (namespace) {
	            // TODO(FW-811): Ivy may cause issues here because it's passing around
	            // full URIs for namespaces, therefore this lookup will fail.
	            var namespaceUri = NAMESPACE_URIS[namespace];
	            if (namespaceUri) {
	                el.removeAttributeNS(namespaceUri, name);
	            }
	            else {
	                // TODO(FW-811): Since ivy is passing around full URIs for namespaces
	                // this could result in properties like `http://www.w3.org/2000/svg:cx="123"`,
	                // which is wrong.
	                el.removeAttribute(namespace + ":" + name);
	            }
	        }
	        else {
	            el.removeAttribute(name);
	        }
	    };
	    DefaultDomRenderer2.prototype.addClass = function (el, name) {
	        el.classList.add(name);
	    };
	    DefaultDomRenderer2.prototype.removeClass = function (el, name) {
	        el.classList.remove(name);
	    };
	    DefaultDomRenderer2.prototype.setStyle = function (el, style, value, flags) {
	        if (flags & RendererStyleFlags2.DashCase) {
	            el.style.setProperty(style, value, !!(flags & RendererStyleFlags2.Important) ? 'important' : '');
	        }
	        else {
	            el.style[style] = value;
	        }
	    };
	    DefaultDomRenderer2.prototype.removeStyle = function (el, style, flags) {
	        if (flags & RendererStyleFlags2.DashCase) {
	            el.style.removeProperty(style);
	        }
	        else {
	            // IE requires '' instead of null
	            // see https://github.com/angular/angular/issues/7916
	            el.style[style] = '';
	        }
	    };
	    DefaultDomRenderer2.prototype.setProperty = function (el, name, value) {
	        NG_DEV_MODE$1 && checkNoSyntheticProp(name, 'property');
	        el[name] = value;
	    };
	    DefaultDomRenderer2.prototype.setValue = function (node, value) {
	        node.nodeValue = value;
	    };
	    DefaultDomRenderer2.prototype.listen = function (target, event, callback) {
	        NG_DEV_MODE$1 && checkNoSyntheticProp(event, 'listener');
	        if (typeof target === 'string') {
	            return this.eventManager.addGlobalEventListener(target, event, decoratePreventDefault(callback));
	        }
	        return this.eventManager.addEventListener(target, event, decoratePreventDefault(callback));
	    };
	    return DefaultDomRenderer2;
	}());
	var Éµ0$2$1 = function () { return '@'.charCodeAt(0); };
	var AT_CHARCODE = (Éµ0$2$1)();
	function checkNoSyntheticProp(name, nameKind) {
	    if (name.charCodeAt(0) === AT_CHARCODE) {
	        throw new Error("Found the synthetic " + nameKind + " " + name + ". Please include either \"BrowserAnimationsModule\" or \"NoopAnimationsModule\" in your application.");
	    }
	}
	var EmulatedEncapsulationDomRenderer2 = /** @class */ (function (_super) {
	    __extends(EmulatedEncapsulationDomRenderer2, _super);
	    function EmulatedEncapsulationDomRenderer2(eventManager, sharedStylesHost, component, appId) {
	        var _this = _super.call(this, eventManager) || this;
	        _this.component = component;
	        var styles = flattenStyles(appId + '-' + component.id, component.styles, []);
	        sharedStylesHost.addStyles(styles);
	        _this.contentAttr = shimContentAttribute(appId + '-' + component.id);
	        _this.hostAttr = shimHostAttribute(appId + '-' + component.id);
	        return _this;
	    }
	    EmulatedEncapsulationDomRenderer2.prototype.applyToHost = function (element) {
	        _super.prototype.setAttribute.call(this, element, this.hostAttr, '');
	    };
	    EmulatedEncapsulationDomRenderer2.prototype.createElement = function (parent, name) {
	        var el = _super.prototype.createElement.call(this, parent, name);
	        _super.prototype.setAttribute.call(this, el, this.contentAttr, '');
	        return el;
	    };
	    return EmulatedEncapsulationDomRenderer2;
	}(DefaultDomRenderer2));
	var ShadowDomRenderer = /** @class */ (function (_super) {
	    __extends(ShadowDomRenderer, _super);
	    function ShadowDomRenderer(eventManager, sharedStylesHost, hostEl, component) {
	        var _this = _super.call(this, eventManager) || this;
	        _this.sharedStylesHost = sharedStylesHost;
	        _this.hostEl = hostEl;
	        _this.component = component;
	        if (component.encapsulation === ViewEncapsulation$1$1.ShadowDom) {
	            _this.shadowRoot = hostEl.attachShadow({ mode: 'open' });
	        }
	        else {
	            _this.shadowRoot = hostEl.createShadowRoot();
	        }
	        _this.sharedStylesHost.addHost(_this.shadowRoot);
	        var styles = flattenStyles(component.id, component.styles, []);
	        for (var i = 0; i < styles.length; i++) {
	            var styleEl = document.createElement('style');
	            styleEl.textContent = styles[i];
	            _this.shadowRoot.appendChild(styleEl);
	        }
	        return _this;
	    }
	    ShadowDomRenderer.prototype.nodeOrShadowRoot = function (node) {
	        return node === this.hostEl ? this.shadowRoot : node;
	    };
	    ShadowDomRenderer.prototype.destroy = function () {
	        this.sharedStylesHost.removeHost(this.shadowRoot);
	    };
	    ShadowDomRenderer.prototype.appendChild = function (parent, newChild) {
	        return _super.prototype.appendChild.call(this, this.nodeOrShadowRoot(parent), newChild);
	    };
	    ShadowDomRenderer.prototype.insertBefore = function (parent, newChild, refChild) {
	        return _super.prototype.insertBefore.call(this, this.nodeOrShadowRoot(parent), newChild, refChild);
	    };
	    ShadowDomRenderer.prototype.removeChild = function (parent, oldChild) {
	        return _super.prototype.removeChild.call(this, this.nodeOrShadowRoot(parent), oldChild);
	    };
	    ShadowDomRenderer.prototype.parentNode = function (node) {
	        return this.nodeOrShadowRoot(_super.prototype.parentNode.call(this, this.nodeOrShadowRoot(node)));
	    };
	    return ShadowDomRenderer;
	}(DefaultDomRenderer2));

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	var DomEventsPlugin = /** @class */ (function (_super) {
	    __extends(DomEventsPlugin, _super);
	    function DomEventsPlugin(doc) {
	        return _super.call(this, doc) || this;
	    }
	    // This plugin should come last in the list of plugins, because it accepts all
	    // events.
	    DomEventsPlugin.prototype.supports = function (eventName) {
	        return true;
	    };
	    DomEventsPlugin.prototype.addEventListener = function (element, eventName, handler) {
	        var _this = this;
	        element.addEventListener(eventName, handler, false);
	        return function () { return _this.removeEventListener(element, eventName, handler); };
	    };
	    DomEventsPlugin.prototype.removeEventListener = function (target, eventName, callback) {
	        return target.removeEventListener(eventName, callback);
	    };
	    DomEventsPlugin = __decorate([
	        Injectable(),
	        __param(0, Inject(DOCUMENT$1)),
	        __metadata("design:paramtypes", [Object])
	    ], DomEventsPlugin);
	    return DomEventsPlugin;
	}(EventManagerPlugin));

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * Supported HammerJS recognizer event names.
	 */
	var EVENT_NAMES = {
	    // pan
	    'pan': true,
	    'panstart': true,
	    'panmove': true,
	    'panend': true,
	    'pancancel': true,
	    'panleft': true,
	    'panright': true,
	    'panup': true,
	    'pandown': true,
	    // pinch
	    'pinch': true,
	    'pinchstart': true,
	    'pinchmove': true,
	    'pinchend': true,
	    'pinchcancel': true,
	    'pinchin': true,
	    'pinchout': true,
	    // press
	    'press': true,
	    'pressup': true,
	    // rotate
	    'rotate': true,
	    'rotatestart': true,
	    'rotatemove': true,
	    'rotateend': true,
	    'rotatecancel': true,
	    // swipe
	    'swipe': true,
	    'swipeleft': true,
	    'swiperight': true,
	    'swipeup': true,
	    'swipedown': true,
	    // tap
	    'tap': true,
	};
	/**
	 * DI token for providing [HammerJS](http://hammerjs.github.io/) support to Angular.
	 * @see `HammerGestureConfig`
	 *
	 * @ngModule HammerModule
	 * @publicApi
	 */
	var HAMMER_GESTURE_CONFIG = new InjectionToken('HammerGestureConfig');
	/**
	 * Injection token used to provide a {@link HammerLoader} to Angular.
	 *
	 * @publicApi
	 */
	var HAMMER_LOADER = new InjectionToken('HammerLoader');
	/**
	 * An injectable [HammerJS Manager](http://hammerjs.github.io/api/#hammer.manager)
	 * for gesture recognition. Configures specific event recognition.
	 * @publicApi
	 */
	var HammerGestureConfig = /** @class */ (function () {
	    function HammerGestureConfig() {
	        /**
	         * A set of supported event names for gestures to be used in Angular.
	         * Angular supports all built-in recognizers, as listed in
	         * [HammerJS documentation](http://hammerjs.github.io/).
	         */
	        this.events = [];
	        /**
	         * Maps gesture event names to a set of configuration options
	         * that specify overrides to the default values for specific properties.
	         *
	         * The key is a supported event name to be configured,
	         * and the options object contains a set of properties, with override values
	         * to be applied to the named recognizer event.
	         * For example, to disable recognition of the rotate event, specify
	         *  `{"rotate": {"enable": false}}`.
	         *
	         * Properties that are not present take the HammerJS default values.
	         * For information about which properties are supported for which events,
	         * and their allowed and default values, see
	         * [HammerJS documentation](http://hammerjs.github.io/).
	         *
	         */
	        this.overrides = {};
	    }
	    /**
	     * Creates a [HammerJS Manager](http://hammerjs.github.io/api/#hammer.manager)
	     * and attaches it to a given HTML element.
	     * @param element The element that will recognize gestures.
	     * @returns A HammerJS event-manager object.
	     */
	    HammerGestureConfig.prototype.buildHammer = function (element) {
	        var mc = new Hammer(element, this.options);
	        mc.get('pinch').set({ enable: true });
	        mc.get('rotate').set({ enable: true });
	        for (var eventName in this.overrides) {
	            mc.get(eventName).set(this.overrides[eventName]);
	        }
	        return mc;
	    };
	    HammerGestureConfig = __decorate([
	        Injectable()
	    ], HammerGestureConfig);
	    return HammerGestureConfig;
	}());
	/**
	 * Event plugin that adds Hammer support to an application.
	 *
	 * @ngModule HammerModule
	 */
	var HammerGesturesPlugin = /** @class */ (function (_super) {
	    __extends(HammerGesturesPlugin, _super);
	    function HammerGesturesPlugin(doc, _config, console, loader) {
	        var _this = _super.call(this, doc) || this;
	        _this._config = _config;
	        _this.console = console;
	        _this.loader = loader;
	        return _this;
	    }
	    HammerGesturesPlugin.prototype.supports = function (eventName) {
	        if (!EVENT_NAMES.hasOwnProperty(eventName.toLowerCase()) && !this.isCustomEvent(eventName)) {
	            return false;
	        }
	        if (!window.Hammer && !this.loader) {
	            this.console.warn("The \"" + eventName + "\" event cannot be bound because Hammer.JS is not " +
	                "loaded and no custom loader has been specified.");
	            return false;
	        }
	        return true;
	    };
	    HammerGesturesPlugin.prototype.addEventListener = function (element, eventName, handler) {
	        var _this = this;
	        var zone = this.manager.getZone();
	        eventName = eventName.toLowerCase();
	        // If Hammer is not present but a loader is specified, we defer adding the event listener
	        // until Hammer is loaded.
	        if (!window.Hammer && this.loader) {
	            // This `addEventListener` method returns a function to remove the added listener.
	            // Until Hammer is loaded, the returned function needs to *cancel* the registration rather
	            // than remove anything.
	            var cancelRegistration_1 = false;
	            var deregister_1 = function () {
	                cancelRegistration_1 = true;
	            };
	            this.loader()
	                .then(function () {
	                // If Hammer isn't actually loaded when the custom loader resolves, give up.
	                if (!window.Hammer) {
	                    _this.console.warn("The custom HAMMER_LOADER completed, but Hammer.JS is not present.");
	                    deregister_1 = function () { };
	                    return;
	                }
	                if (!cancelRegistration_1) {
	                    // Now that Hammer is loaded and the listener is being loaded for real,
	                    // the deregistration function changes from canceling registration to removal.
	                    deregister_1 = _this.addEventListener(element, eventName, handler);
	                }
	            })
	                .catch(function () {
	                _this.console.warn("The \"" + eventName + "\" event cannot be bound because the custom " +
	                    "Hammer.JS loader failed.");
	                deregister_1 = function () { };
	            });
	            // Return a function that *executes* `deregister` (and not `deregister` itself) so that we
	            // can change the behavior of `deregister` once the listener is added. Using a closure in
	            // this way allows us to avoid any additional data structures to track listener removal.
	            return function () {
	                deregister_1();
	            };
	        }
	        return zone.runOutsideAngular(function () {
	            // Creating the manager bind events, must be done outside of angular
	            var mc = _this._config.buildHammer(element);
	            var callback = function (eventObj) {
	                zone.runGuarded(function () {
	                    handler(eventObj);
	                });
	            };
	            mc.on(eventName, callback);
	            return function () {
	                mc.off(eventName, callback);
	                // destroy mc to prevent memory leak
	                if (typeof mc.destroy === 'function') {
	                    mc.destroy();
	                }
	            };
	        });
	    };
	    HammerGesturesPlugin.prototype.isCustomEvent = function (eventName) {
	        return this._config.events.indexOf(eventName) > -1;
	    };
	    HammerGesturesPlugin = __decorate([
	        Injectable(),
	        __param(0, Inject(DOCUMENT$1)),
	        __param(1, Inject(HAMMER_GESTURE_CONFIG)),
	        __param(3, Optional()), __param(3, Inject(HAMMER_LOADER)),
	        __metadata("design:paramtypes", [Object, HammerGestureConfig, Console, Object])
	    ], HammerGesturesPlugin);
	    return HammerGesturesPlugin;
	}(EventManagerPlugin));
	/**
	 * In View Engine, support for Hammer gestures is built-in by default.
	 */
	var HAMMER_PROVIDERS__PRE_R3__ = [
	    {
	        provide: EVENT_MANAGER_PLUGINS,
	        useClass: HammerGesturesPlugin,
	        multi: true,
	        deps: [DOCUMENT$1, HAMMER_GESTURE_CONFIG, Console, [new Optional(), HAMMER_LOADER]]
	    },
	    { provide: HAMMER_GESTURE_CONFIG, useClass: HammerGestureConfig, deps: [] },
	];
	var HAMMER_PROVIDERS = HAMMER_PROVIDERS__PRE_R3__;
	/**
	 * Adds support for HammerJS.
	 *
	 * Import this module at the root of your application so that Angular can work with
	 * HammerJS to detect gesture events.
	 *
	 * Note that applications still need to include the HammerJS script itself. This module
	 * simply sets up the coordination layer between HammerJS and Angular's EventManager.
	 *
	 * @publicApi
	 */
	var HammerModule = /** @class */ (function () {
	    function HammerModule() {
	    }
	    HammerModule = __decorate([
	        NgModule({ providers: HAMMER_PROVIDERS__PRE_R3__ })
	    ], HammerModule);
	    return HammerModule;
	}());

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * Defines supported modifiers for key events.
	 */
	var MODIFIER_KEYS = ['alt', 'control', 'meta', 'shift'];
	var DOM_KEY_LOCATION_NUMPAD = 3;
	// Map to convert some key or keyIdentifier values to what will be returned by getEventKey
	var _keyMap = {
	    // The following values are here for cross-browser compatibility and to match the W3C standard
	    // cf http://www.w3.org/TR/DOM-Level-3-Events-key/
	    '\b': 'Backspace',
	    '\t': 'Tab',
	    '\x7F': 'Delete',
	    '\x1B': 'Escape',
	    'Del': 'Delete',
	    'Esc': 'Escape',
	    'Left': 'ArrowLeft',
	    'Right': 'ArrowRight',
	    'Up': 'ArrowUp',
	    'Down': 'ArrowDown',
	    'Menu': 'ContextMenu',
	    'Scroll': 'ScrollLock',
	    'Win': 'OS'
	};
	// There is a bug in Chrome for numeric keypad keys:
	// https://code.google.com/p/chromium/issues/detail?id=155654
	// 1, 2, 3 ... are reported as A, B, C ...
	var _chromeNumKeyPadMap = {
	    'A': '1',
	    'B': '2',
	    'C': '3',
	    'D': '4',
	    'E': '5',
	    'F': '6',
	    'G': '7',
	    'H': '8',
	    'I': '9',
	    'J': '*',
	    'K': '+',
	    'M': '-',
	    'N': '.',
	    'O': '/',
	    '\x60': '0',
	    '\x90': 'NumLock'
	};
	var Éµ0$3$1 = function (event) { return event.altKey; }, Éµ1$1 = function (event) { return event.ctrlKey; }, Éµ2$2 = function (event) { return event.metaKey; }, Éµ3$2 = function (event) { return event.shiftKey; };
	/**
	 * Retrieves modifiers from key-event objects.
	 */
	var MODIFIER_KEY_GETTERS = {
	    'alt': Éµ0$3$1,
	    'control': Éµ1$1,
	    'meta': Éµ2$2,
	    'shift': Éµ3$2
	};
	/**
	 * @publicApi
	 * A browser plug-in that provides support for handling of key events in Angular.
	 */
	var KeyEventsPlugin = /** @class */ (function (_super) {
	    __extends(KeyEventsPlugin, _super);
	    /**
	     * Initializes an instance of the browser plug-in.
	     * @param doc The document in which key events will be detected.
	     */
	    function KeyEventsPlugin(doc) {
	        return _super.call(this, doc) || this;
	    }
	    KeyEventsPlugin_1 = KeyEventsPlugin;
	    /**
	     * Reports whether a named key event is supported.
	     * @param eventName The event name to query.
	     * @return True if the named key event is supported.
	     */
	    KeyEventsPlugin.prototype.supports = function (eventName) {
	        return KeyEventsPlugin_1.parseEventName(eventName) != null;
	    };
	    /**
	     * Registers a handler for a specific element and key event.
	     * @param element The HTML element to receive event notifications.
	     * @param eventName The name of the key event to listen for.
	     * @param handler A function to call when the notification occurs. Receives the
	     * event object as an argument.
	     * @returns The key event that was registered.
	     */
	    KeyEventsPlugin.prototype.addEventListener = function (element, eventName, handler) {
	        var parsedEvent = KeyEventsPlugin_1.parseEventName(eventName);
	        var outsideHandler = KeyEventsPlugin_1.eventCallback(parsedEvent['fullKey'], handler, this.manager.getZone());
	        return this.manager.getZone().runOutsideAngular(function () {
	            return getDOM().onAndCancel(element, parsedEvent['domEventName'], outsideHandler);
	        });
	    };
	    KeyEventsPlugin.parseEventName = function (eventName) {
	        var parts = eventName.toLowerCase().split('.');
	        var domEventName = parts.shift();
	        if ((parts.length === 0) || !(domEventName === 'keydown' || domEventName === 'keyup')) {
	            return null;
	        }
	        var key = KeyEventsPlugin_1._normalizeKey(parts.pop());
	        var fullKey = '';
	        MODIFIER_KEYS.forEach(function (modifierName) {
	            var index = parts.indexOf(modifierName);
	            if (index > -1) {
	                parts.splice(index, 1);
	                fullKey += modifierName + '.';
	            }
	        });
	        fullKey += key;
	        if (parts.length != 0 || key.length === 0) {
	            // returning null instead of throwing to let another plugin process the event
	            return null;
	        }
	        var result = {};
	        result['domEventName'] = domEventName;
	        result['fullKey'] = fullKey;
	        return result;
	    };
	    KeyEventsPlugin.getEventFullKey = function (event) {
	        var fullKey = '';
	        var key = getEventKey(event);
	        key = key.toLowerCase();
	        if (key === ' ') {
	            key = 'space'; // for readability
	        }
	        else if (key === '.') {
	            key = 'dot'; // because '.' is used as a separator in event names
	        }
	        MODIFIER_KEYS.forEach(function (modifierName) {
	            if (modifierName != key) {
	                var modifierGetter = MODIFIER_KEY_GETTERS[modifierName];
	                if (modifierGetter(event)) {
	                    fullKey += modifierName + '.';
	                }
	            }
	        });
	        fullKey += key;
	        return fullKey;
	    };
	    /**
	     * Configures a handler callback for a key event.
	     * @param fullKey The event name that combines all simultaneous keystrokes.
	     * @param handler The function that responds to the key event.
	     * @param zone The zone in which the event occurred.
	     * @returns A callback function.
	     */
	    KeyEventsPlugin.eventCallback = function (fullKey, handler, zone) {
	        return function (event /** TODO #9100 */) {
	            if (KeyEventsPlugin_1.getEventFullKey(event) === fullKey) {
	                zone.runGuarded(function () { return handler(event); });
	            }
	        };
	    };
	    /** @internal */
	    KeyEventsPlugin._normalizeKey = function (keyName) {
	        // TODO: switch to a Map if the mapping grows too much
	        switch (keyName) {
	            case 'esc':
	                return 'escape';
	            default:
	                return keyName;
	        }
	    };
	    var KeyEventsPlugin_1;
	    KeyEventsPlugin = KeyEventsPlugin_1 = __decorate([
	        Injectable(),
	        __param(0, Inject(DOCUMENT$1)),
	        __metadata("design:paramtypes", [Object])
	    ], KeyEventsPlugin);
	    return KeyEventsPlugin;
	}(EventManagerPlugin));
	function getEventKey(event) {
	    var key = event.key;
	    if (key == null) {
	        key = event.keyIdentifier;
	        // keyIdentifier is defined in the old draft of DOM Level 3 Events implemented by Chrome and
	        // Safari cf
	        // http://www.w3.org/TR/2007/WD-DOM-Level-3-Events-20071221/events.html#Events-KeyboardEvents-Interfaces
	        if (key == null) {
	            return 'Unidentified';
	        }
	        if (key.startsWith('U+')) {
	            key = String.fromCharCode(parseInt(key.substring(2), 16));
	            if (event.location === DOM_KEY_LOCATION_NUMPAD && _chromeNumKeyPadMap.hasOwnProperty(key)) {
	                // There is a bug in Chrome for numeric keypad keys:
	                // https://code.google.com/p/chromium/issues/detail?id=155654
	                // 1, 2, 3 ... are reported as A, B, C ...
	                key = _chromeNumKeyPadMap[key];
	            }
	        }
	    }
	    return _keyMap[key] || key;
	}

	/**
	 * DomSanitizer helps preventing Cross Site Scripting Security bugs (XSS) by sanitizing
	 * values to be safe to use in the different DOM contexts.
	 *
	 * For example, when binding a URL in an `<a [href]="someValue">` hyperlink, `someValue` will be
	 * sanitized so that an attacker cannot inject e.g. a `javascript:` URL that would execute code on
	 * the website.
	 *
	 * In specific situations, it might be necessary to disable sanitization, for example if the
	 * application genuinely needs to produce a `javascript:` style link with a dynamic value in it.
	 * Users can bypass security by constructing a value with one of the `bypassSecurityTrust...`
	 * methods, and then binding to that value from the template.
	 *
	 * These situations should be very rare, and extraordinary care must be taken to avoid creating a
	 * Cross Site Scripting (XSS) security bug!
	 *
	 * When using `bypassSecurityTrust...`, make sure to call the method as early as possible and as
	 * close as possible to the source of the value, to make it easy to verify no security bug is
	 * created by its use.
	 *
	 * It is not required (and not recommended) to bypass security if the value is safe, e.g. a URL that
	 * does not start with a suspicious protocol, or an HTML snippet that does not contain dangerous
	 * code. The sanitizer leaves safe values intact.
	 *
	 * @security Calling any of the `bypassSecurityTrust...` APIs disables Angular's built-in
	 * sanitization for the value passed in. Carefully check and audit all values and code paths going
	 * into this call. Make sure any user data is appropriately escaped for this security context.
	 * For more detail, see the [Security Guide](http://g.co/ng/security).
	 *
	 * @publicApi
	 */
	var DomSanitizer = /** @class */ (function () {
	    function DomSanitizer() {
	    }
	    DomSanitizer.Éµprov = ÉµÉµdefineInjectable({ factory: function DomSanitizer_Factory() { return ÉµÉµinject(DomSanitizerImpl); }, token: DomSanitizer, providedIn: "root" });
	    DomSanitizer = __decorate([
	        Injectable({ providedIn: 'root', useExisting: forwardRef(function () { return DomSanitizerImpl; }) })
	    ], DomSanitizer);
	    return DomSanitizer;
	}());
	function domSanitizerImplFactory(injector) {
	    return new DomSanitizerImpl(injector.get(DOCUMENT$1));
	}
	var DomSanitizerImpl = /** @class */ (function (_super) {
	    __extends(DomSanitizerImpl, _super);
	    function DomSanitizerImpl(_doc) {
	        var _this = _super.call(this) || this;
	        _this._doc = _doc;
	        return _this;
	    }
	    DomSanitizerImpl.prototype.sanitize = function (ctx, value) {
	        if (value == null)
	            return null;
	        switch (ctx) {
	            case SecurityContext$1.NONE:
	                return value;
	            case SecurityContext$1.HTML:
	                if (allowSanitizationBypassAndThrow(value, "HTML" /* Html */)) {
	                    return unwrapSafeValue(value);
	                }
	                return _sanitizeHtml(this._doc, String(value));
	            case SecurityContext$1.STYLE:
	                if (allowSanitizationBypassAndThrow(value, "Style" /* Style */)) {
	                    return unwrapSafeValue(value);
	                }
	                return _sanitizeStyle(value);
	            case SecurityContext$1.SCRIPT:
	                if (allowSanitizationBypassAndThrow(value, "Script" /* Script */)) {
	                    return unwrapSafeValue(value);
	                }
	                throw new Error('unsafe value used in a script context');
	            case SecurityContext$1.URL:
	                var type = getSanitizationBypassType(value);
	                if (allowSanitizationBypassAndThrow(value, "URL" /* Url */)) {
	                    return unwrapSafeValue(value);
	                }
	                return _sanitizeUrl(String(value));
	            case SecurityContext$1.RESOURCE_URL:
	                if (allowSanitizationBypassAndThrow(value, "ResourceURL" /* ResourceUrl */)) {
	                    return unwrapSafeValue(value);
	                }
	                throw new Error('unsafe value used in a resource URL context (see http://g.co/ng/security#xss)');
	            default:
	                throw new Error("Unexpected SecurityContext " + ctx + " (see http://g.co/ng/security#xss)");
	        }
	    };
	    DomSanitizerImpl.prototype.bypassSecurityTrustHtml = function (value) {
	        return bypassSanitizationTrustHtml(value);
	    };
	    DomSanitizerImpl.prototype.bypassSecurityTrustStyle = function (value) {
	        return bypassSanitizationTrustStyle(value);
	    };
	    DomSanitizerImpl.prototype.bypassSecurityTrustScript = function (value) {
	        return bypassSanitizationTrustScript(value);
	    };
	    DomSanitizerImpl.prototype.bypassSecurityTrustUrl = function (value) {
	        return bypassSanitizationTrustUrl(value);
	    };
	    DomSanitizerImpl.prototype.bypassSecurityTrustResourceUrl = function (value) {
	        return bypassSanitizationTrustResourceUrl(value);
	    };
	    DomSanitizerImpl.Éµprov = ÉµÉµdefineInjectable({ factory: function DomSanitizerImpl_Factory() { return domSanitizerImplFactory(ÉµÉµinject(INJECTOR)); }, token: DomSanitizerImpl, providedIn: "root" });
	    DomSanitizerImpl = __decorate([
	        Injectable({ providedIn: 'root', useFactory: domSanitizerImplFactory, deps: [Injector] }),
	        __param(0, Inject(DOCUMENT$1)),
	        __metadata("design:paramtypes", [Object])
	    ], DomSanitizerImpl);
	    return DomSanitizerImpl;
	}(DomSanitizer));

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	function initDomAdapter() {
	    BrowserDomAdapter.makeCurrent();
	    BrowserGetTestability.init();
	}
	function errorHandler() {
	    return new ErrorHandler();
	}
	function _document() {
	    // Tell ivy about the global document
	    setDocument(document);
	    return document;
	}
	var Éµ0$4$1 = PLATFORM_BROWSER_ID;
	var INTERNAL_BROWSER_PLATFORM_PROVIDERS = [
	    { provide: PLATFORM_ID, useValue: Éµ0$4$1 },
	    { provide: PLATFORM_INITIALIZER, useValue: initDomAdapter, multi: true },
	    { provide: DOCUMENT$1, useFactory: _document, deps: [] },
	];
	var BROWSER_SANITIZATION_PROVIDERS__PRE_R3__ = [
	    { provide: Sanitizer, useExisting: DomSanitizer },
	    { provide: DomSanitizer, useClass: DomSanitizerImpl, deps: [DOCUMENT$1] },
	];
	/**
	 * @security Replacing built-in sanitization providers exposes the application to XSS risks.
	 * Attacker-controlled data introduced by an unsanitized provider could expose your
	 * application to XSS risks. For more detail, see the [Security Guide](http://g.co/ng/security).
	 * @publicApi
	 */
	var BROWSER_SANITIZATION_PROVIDERS = BROWSER_SANITIZATION_PROVIDERS__PRE_R3__;
	/**
	 * @publicApi
	 */
	var platformBrowser = createPlatformFactory(platformCore, 'browser', INTERNAL_BROWSER_PLATFORM_PROVIDERS);
	var BROWSER_MODULE_PROVIDERS = [
	    BROWSER_SANITIZATION_PROVIDERS,
	    { provide: INJECTOR_SCOPE, useValue: 'root' },
	    { provide: ErrorHandler, useFactory: errorHandler, deps: [] },
	    {
	        provide: EVENT_MANAGER_PLUGINS,
	        useClass: DomEventsPlugin,
	        multi: true,
	        deps: [DOCUMENT$1, NgZone, PLATFORM_ID]
	    },
	    { provide: EVENT_MANAGER_PLUGINS, useClass: KeyEventsPlugin, multi: true, deps: [DOCUMENT$1] },
	    HAMMER_PROVIDERS,
	    {
	        provide: DomRendererFactory2,
	        useClass: DomRendererFactory2,
	        deps: [EventManager, DomSharedStylesHost, APP_ID]
	    },
	    { provide: RendererFactory2, useExisting: DomRendererFactory2 },
	    { provide: SharedStylesHost, useExisting: DomSharedStylesHost },
	    { provide: DomSharedStylesHost, useClass: DomSharedStylesHost, deps: [DOCUMENT$1] },
	    { provide: Testability, useClass: Testability, deps: [NgZone] },
	    { provide: EventManager, useClass: EventManager, deps: [EVENT_MANAGER_PLUGINS, NgZone] },
	    ELEMENT_PROBE_PROVIDERS,
	];
	/**
	 * Exports required infrastructure for all Angular apps.
	 * Included by default in all Angular apps created with the CLI
	 * `new` command.
	 * Re-exports `CommonModule` and `ApplicationModule`, making their
	 * exports and providers available to all apps.
	 *
	 * @publicApi
	 */
	var BrowserModule = /** @class */ (function () {
	    function BrowserModule(parentModule) {
	        if (parentModule) {
	            throw new Error("BrowserModule has already been loaded. If you need access to common directives such as NgIf and NgFor from a lazy loaded module, import CommonModule instead.");
	        }
	    }
	    BrowserModule_1 = BrowserModule;
	    /**
	     * Configures a browser-based app to transition from a server-rendered app, if
	     * one is present on the page.
	     *
	     * @param params An object containing an identifier for the app to transition.
	     * The ID must match between the client and server versions of the app.
	     * @returns The reconfigured `BrowserModule` to import into the app's root `AppModule`.
	     */
	    BrowserModule.withServerTransition = function (params) {
	        return {
	            ngModule: BrowserModule_1,
	            providers: [
	                { provide: APP_ID, useValue: params.appId },
	                { provide: TRANSITION_ID, useExisting: APP_ID },
	                SERVER_TRANSITION_PROVIDERS,
	            ],
	        };
	    };
	    var BrowserModule_1;
	    BrowserModule = BrowserModule_1 = __decorate([
	        NgModule({ providers: BROWSER_MODULE_PROVIDERS, exports: [CommonModule, ApplicationModule] }),
	        __param(0, Optional()), __param(0, SkipSelf()), __param(0, Inject(BrowserModule_1)),
	        __metadata("design:paramtypes", [Object])
	    ], BrowserModule);
	    return BrowserModule;
	}());

	/**
	 * Factory to create Meta service.
	 */
	function createMeta() {
	    return new Meta(ÉµÉµinject(DOCUMENT$1));
	}
	/**
	 * A service that can be used to get and add meta tags.
	 *
	 * @publicApi
	 */
	var Meta = /** @class */ (function () {
	    function Meta(_doc) {
	        this._doc = _doc;
	        this._dom = getDOM();
	    }
	    Meta.prototype.addTag = function (tag, forceCreation) {
	        if (forceCreation === void 0) { forceCreation = false; }
	        if (!tag)
	            return null;
	        return this._getOrCreateElement(tag, forceCreation);
	    };
	    Meta.prototype.addTags = function (tags, forceCreation) {
	        var _this = this;
	        if (forceCreation === void 0) { forceCreation = false; }
	        if (!tags)
	            return [];
	        return tags.reduce(function (result, tag) {
	            if (tag) {
	                result.push(_this._getOrCreateElement(tag, forceCreation));
	            }
	            return result;
	        }, []);
	    };
	    Meta.prototype.getTag = function (attrSelector) {
	        if (!attrSelector)
	            return null;
	        return this._doc.querySelector("meta[" + attrSelector + "]") || null;
	    };
	    Meta.prototype.getTags = function (attrSelector) {
	        if (!attrSelector)
	            return [];
	        var list /*NodeList*/ = this._doc.querySelectorAll("meta[" + attrSelector + "]");
	        return list ? [].slice.call(list) : [];
	    };
	    Meta.prototype.updateTag = function (tag, selector) {
	        if (!tag)
	            return null;
	        selector = selector || this._parseSelector(tag);
	        var meta = this.getTag(selector);
	        if (meta) {
	            return this._setMetaElementAttributes(tag, meta);
	        }
	        return this._getOrCreateElement(tag, true);
	    };
	    Meta.prototype.removeTag = function (attrSelector) {
	        this.removeTagElement(this.getTag(attrSelector));
	    };
	    Meta.prototype.removeTagElement = function (meta) {
	        if (meta) {
	            this._dom.remove(meta);
	        }
	    };
	    Meta.prototype._getOrCreateElement = function (meta, forceCreation) {
	        if (forceCreation === void 0) { forceCreation = false; }
	        if (!forceCreation) {
	            var selector = this._parseSelector(meta);
	            var elem = this.getTag(selector);
	            // It's allowed to have multiple elements with the same name so it's not enough to
	            // just check that element with the same name already present on the page. We also need to
	            // check if element has tag attributes
	            if (elem && this._containsAttributes(meta, elem))
	                return elem;
	        }
	        var element = this._dom.createElement('meta');
	        this._setMetaElementAttributes(meta, element);
	        var head = this._doc.getElementsByTagName('head')[0];
	        head.appendChild(element);
	        return element;
	    };
	    Meta.prototype._setMetaElementAttributes = function (tag, el) {
	        Object.keys(tag).forEach(function (prop) { return el.setAttribute(prop, tag[prop]); });
	        return el;
	    };
	    Meta.prototype._parseSelector = function (tag) {
	        var attr = tag.name ? 'name' : 'property';
	        return attr + "=\"" + tag[attr] + "\"";
	    };
	    Meta.prototype._containsAttributes = function (tag, elem) {
	        return Object.keys(tag).every(function (key) { return elem.getAttribute(key) === tag[key]; });
	    };
	    Meta.Éµprov = ÉµÉµdefineInjectable({ factory: createMeta, token: Meta, providedIn: "root" });
	    Meta = __decorate([
	        Injectable({ providedIn: 'root', useFactory: createMeta, deps: [] }),
	        __param(0, Inject(DOCUMENT$1)),
	        __metadata("design:paramtypes", [Object])
	    ], Meta);
	    return Meta;
	}());

	/**
	 * Factory to create Title service.
	 */
	function createTitle() {
	    return new Title(ÉµÉµinject(DOCUMENT$1));
	}
	/**
	 * A service that can be used to get and set the title of a current HTML document.
	 *
	 * Since an Angular application can't be bootstrapped on the entire HTML document (`<html>` tag)
	 * it is not possible to bind to the `text` property of the `HTMLTitleElement` elements
	 * (representing the `<title>` tag). Instead, this service can be used to set and get the current
	 * title value.
	 *
	 * @publicApi
	 */
	var Title = /** @class */ (function () {
	    function Title(_doc) {
	        this._doc = _doc;
	    }
	    /**
	     * Get the title of the current HTML document.
	     */
	    Title.prototype.getTitle = function () {
	        return this._doc.title;
	    };
	    /**
	     * Set the title of the current HTML document.
	     * @param newTitle
	     */
	    Title.prototype.setTitle = function (newTitle) {
	        this._doc.title = newTitle || '';
	    };
	    Title.Éµprov = ÉµÉµdefineInjectable({ factory: createTitle, token: Title, providedIn: "root" });
	    Title = __decorate([
	        Injectable({ providedIn: 'root', useFactory: createTitle, deps: [] }),
	        __param(0, Inject(DOCUMENT$1)),
	        __metadata("design:paramtypes", [Object])
	    ], Title);
	    return Title;
	}());
	function unescapeHtml(text) {
	    var unescapedText = {
	        '&a;': '&',
	        '&q;': '"',
	        '&s;': '\'',
	        '&l;': '<',
	        '&g;': '>',
	    };
	    return text.replace(/&[^;]+;/g, function (s) { return unescapedText[s]; });
	}
	/**
	 * A key value store that is transferred from the application on the server side to the application
	 * on the client side.
	 *
	 * `TransferState` will be available as an injectable token. To use it import
	 * `ServerTransferStateModule` on the server and `BrowserTransferStateModule` on the client.
	 *
	 * The values in the store are serialized/deserialized using JSON.stringify/JSON.parse. So only
	 * boolean, number, string, null and non-class objects will be serialized and deserialzied in a
	 * non-lossy manner.
	 *
	 * @publicApi
	 */
	var TransferState = /** @class */ (function () {
	    function TransferState() {
	        this.store = {};
	        this.onSerializeCallbacks = {};
	    }
	    TransferState_1 = TransferState;
	    /** @internal */
	    TransferState.init = function (initState) {
	        var transferState = new TransferState_1();
	        transferState.store = initState;
	        return transferState;
	    };
	    /**
	     * Get the value corresponding to a key. Return `defaultValue` if key is not found.
	     */
	    TransferState.prototype.get = function (key, defaultValue) {
	        return this.store[key] !== undefined ? this.store[key] : defaultValue;
	    };
	    /**
	     * Set the value corresponding to a key.
	     */
	    TransferState.prototype.set = function (key, value) {
	        this.store[key] = value;
	    };
	    /**
	     * Remove a key from the store.
	     */
	    TransferState.prototype.remove = function (key) {
	        delete this.store[key];
	    };
	    /**
	     * Test whether a key exists in the store.
	     */
	    TransferState.prototype.hasKey = function (key) {
	        return this.store.hasOwnProperty(key);
	    };
	    /**
	     * Register a callback to provide the value for a key when `toJson` is called.
	     */
	    TransferState.prototype.onSerialize = function (key, callback) {
	        this.onSerializeCallbacks[key] = callback;
	    };
	    /**
	     * Serialize the current state of the store to JSON.
	     */
	    TransferState.prototype.toJson = function () {
	        // Call the onSerialize callbacks and put those values into the store.
	        for (var key in this.onSerializeCallbacks) {
	            if (this.onSerializeCallbacks.hasOwnProperty(key)) {
	                try {
	                    this.store[key] = this.onSerializeCallbacks[key]();
	                }
	                catch (e) {
	                    console.warn('Exception in onSerialize callback: ', e);
	                }
	            }
	        }
	        return JSON.stringify(this.store);
	    };
	    var TransferState_1;
	    TransferState = TransferState_1 = __decorate([
	        Injectable()
	    ], TransferState);
	    return TransferState;
	}());
	function initTransferState(doc, appId) {
	    // Locate the script tag with the JSON data transferred from the server.
	    // The id of the script tag is set to the Angular appId + 'state'.
	    var script = doc.getElementById(appId + '-state');
	    var initialState = {};
	    if (script && script.textContent) {
	        try {
	            initialState = JSON.parse(unescapeHtml(script.textContent));
	        }
	        catch (e) {
	            console.warn('Exception while restoring TransferState for app ' + appId, e);
	        }
	    }
	    return TransferState.init(initialState);
	}
	/**
	 * NgModule to install on the client side while using the `TransferState` to transfer state from
	 * server to client.
	 *
	 * @publicApi
	 */
	var BrowserTransferStateModule = /** @class */ (function () {
	    function BrowserTransferStateModule() {
	    }
	    BrowserTransferStateModule = __decorate([
	        NgModule({
	            providers: [{ provide: TransferState, useFactory: initTransferState, deps: [DOCUMENT$1, APP_ID] }],
	        })
	    ], BrowserTransferStateModule);
	    return BrowserTransferStateModule;
	}());

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * @publicApi
	 */
	var VERSION$4 = new Version$1('9.1.6');

	/**
	 * @license Angular v9.1.6
	 * (c) 2010-2020 Google LLC. https://angular.io/
	 * License: MIT
	 */

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	var MODULE_SUFFIX = '';
	var builtinExternalReferences = createBuiltinExternalReferencesMap();
	var JitReflector = /** @class */ (function () {
	    function JitReflector() {
	        this.reflectionCapabilities = new ReflectionCapabilities();
	    }
	    JitReflector.prototype.componentModuleUrl = function (type, cmpMetadata) {
	        var moduleId = cmpMetadata.moduleId;
	        if (typeof moduleId === 'string') {
	            var scheme = getUrlScheme(moduleId);
	            return scheme ? moduleId : "package:" + moduleId + MODULE_SUFFIX;
	        }
	        else if (moduleId !== null && moduleId !== void 0) {
	            throw syntaxError("moduleId should be a string in \"" + stringify$1(type) + "\". See https://goo.gl/wIDDiL for more information.\n" +
	                "If you're using Webpack you should inline the template and the styles, see https://goo.gl/X2J8zc.");
	        }
	        return "./" + stringify$1(type);
	    };
	    JitReflector.prototype.parameters = function (typeOrFunc) {
	        return this.reflectionCapabilities.parameters(typeOrFunc);
	    };
	    JitReflector.prototype.tryAnnotations = function (typeOrFunc) {
	        return this.annotations(typeOrFunc);
	    };
	    JitReflector.prototype.annotations = function (typeOrFunc) {
	        return this.reflectionCapabilities.annotations(typeOrFunc);
	    };
	    JitReflector.prototype.shallowAnnotations = function (typeOrFunc) {
	        throw new Error('Not supported in JIT mode');
	    };
	    JitReflector.prototype.propMetadata = function (typeOrFunc) {
	        return this.reflectionCapabilities.propMetadata(typeOrFunc);
	    };
	    JitReflector.prototype.hasLifecycleHook = function (type, lcProperty) {
	        return this.reflectionCapabilities.hasLifecycleHook(type, lcProperty);
	    };
	    JitReflector.prototype.guards = function (type) {
	        return this.reflectionCapabilities.guards(type);
	    };
	    JitReflector.prototype.resolveExternalReference = function (ref) {
	        return builtinExternalReferences.get(ref) || ref.runtime;
	    };
	    return JitReflector;
	}());
	function createBuiltinExternalReferencesMap() {
	    var map = new Map();
	    map.set(Identifiers.ANALYZE_FOR_ENTRY_COMPONENTS, ANALYZE_FOR_ENTRY_COMPONENTS);
	    map.set(Identifiers.ElementRef, ElementRef);
	    map.set(Identifiers.NgModuleRef, NgModuleRef);
	    map.set(Identifiers.ViewContainerRef, ViewContainerRef);
	    map.set(Identifiers.ChangeDetectorRef, ChangeDetectorRef);
	    map.set(Identifiers.Renderer2, Renderer2);
	    map.set(Identifiers.QueryList, QueryList);
	    map.set(Identifiers.TemplateRef, TemplateRef);
	    map.set(Identifiers.CodegenComponentFactoryResolver, CodegenComponentFactoryResolver);
	    map.set(Identifiers.ComponentFactoryResolver, ComponentFactoryResolver);
	    map.set(Identifiers.ComponentFactory, ComponentFactory);
	    map.set(Identifiers.ComponentRef, ComponentRef);
	    map.set(Identifiers.NgModuleFactory, NgModuleFactory);
	    map.set(Identifiers.createModuleFactory, createNgModuleFactory);
	    map.set(Identifiers.moduleDef, moduleDef);
	    map.set(Identifiers.moduleProviderDef, moduleProvideDef);
	    map.set(Identifiers.RegisterModuleFactoryFn, registerModuleFactory);
	    map.set(Identifiers.Injector, Injector);
	    map.set(Identifiers.ViewEncapsulation, ViewEncapsulation$1$1);
	    map.set(Identifiers.ChangeDetectionStrategy, ChangeDetectionStrategy$1);
	    map.set(Identifiers.SecurityContext, SecurityContext$1);
	    map.set(Identifiers.LOCALE_ID, LOCALE_ID$1);
	    map.set(Identifiers.TRANSLATIONS_FORMAT, TRANSLATIONS_FORMAT);
	    map.set(Identifiers.inlineInterpolate, inlineInterpolate);
	    map.set(Identifiers.interpolate, interpolate);
	    map.set(Identifiers.EMPTY_ARRAY, EMPTY_ARRAY$4);
	    map.set(Identifiers.EMPTY_MAP, EMPTY_MAP);
	    map.set(Identifiers.viewDef, viewDef);
	    map.set(Identifiers.elementDef, elementDef);
	    map.set(Identifiers.anchorDef, anchorDef);
	    map.set(Identifiers.textDef, textDef);
	    map.set(Identifiers.directiveDef, directiveDef);
	    map.set(Identifiers.providerDef, providerDef$1);
	    map.set(Identifiers.queryDef, queryDef);
	    map.set(Identifiers.pureArrayDef, pureArrayDef);
	    map.set(Identifiers.pureObjectDef, pureObjectDef);
	    map.set(Identifiers.purePipeDef, purePipeDef);
	    map.set(Identifiers.pipeDef, pipeDef);
	    map.set(Identifiers.nodeValue, nodeValue);
	    map.set(Identifiers.ngContentDef, ngContentDef);
	    map.set(Identifiers.unwrapValue, unwrapValue);
	    map.set(Identifiers.createRendererType2, createRendererType2);
	    map.set(Identifiers.createComponentFactory, createComponentFactory);
	    return map;
	}

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	var ERROR_COLLECTOR_TOKEN = new InjectionToken('ErrorCollector');
	/**
	 * A default provider for {@link PACKAGE_ROOT_URL} that maps to '/'.
	 */
	var DEFAULT_PACKAGE_URL_PROVIDER = {
	    provide: PACKAGE_ROOT_URL,
	    useValue: '/'
	};
	var _NO_RESOURCE_LOADER = {
	    get: function (url) {
	        throw new Error("No ResourceLoader implementation has been provided. Can't read the url \"" + url + "\"");
	    }
	};
	var baseHtmlParser = new InjectionToken('HtmlParser');
	var CompilerImpl = /** @class */ (function () {
	    function CompilerImpl(injector, _metadataResolver, templateParser, styleCompiler, viewCompiler, ngModuleCompiler, summaryResolver, compileReflector, jitEvaluator, compilerConfig, console) {
	        this._metadataResolver = _metadataResolver;
	        this._delegate = new JitCompiler(_metadataResolver, templateParser, styleCompiler, viewCompiler, ngModuleCompiler, summaryResolver, compileReflector, jitEvaluator, compilerConfig, console, this.getExtraNgModuleProviders.bind(this));
	        this.injector = injector;
	    }
	    CompilerImpl.prototype.getExtraNgModuleProviders = function () {
	        return [this._metadataResolver.getProviderMetadata(new ProviderMeta(Compiler, { useValue: this }))];
	    };
	    CompilerImpl.prototype.compileModuleSync = function (moduleType) {
	        return this._delegate.compileModuleSync(moduleType);
	    };
	    CompilerImpl.prototype.compileModuleAsync = function (moduleType) {
	        return this._delegate.compileModuleAsync(moduleType);
	    };
	    CompilerImpl.prototype.compileModuleAndAllComponentsSync = function (moduleType) {
	        var result = this._delegate.compileModuleAndAllComponentsSync(moduleType);
	        return {
	            ngModuleFactory: result.ngModuleFactory,
	            componentFactories: result.componentFactories,
	        };
	    };
	    CompilerImpl.prototype.compileModuleAndAllComponentsAsync = function (moduleType) {
	        return this._delegate.compileModuleAndAllComponentsAsync(moduleType)
	            .then(function (result) { return ({
	            ngModuleFactory: result.ngModuleFactory,
	            componentFactories: result.componentFactories,
	        }); });
	    };
	    CompilerImpl.prototype.loadAotSummaries = function (summaries) {
	        this._delegate.loadAotSummaries(summaries);
	    };
	    CompilerImpl.prototype.hasAotSummary = function (ref) {
	        return this._delegate.hasAotSummary(ref);
	    };
	    CompilerImpl.prototype.getComponentFactory = function (component) {
	        return this._delegate.getComponentFactory(component);
	    };
	    CompilerImpl.prototype.clearCache = function () {
	        this._delegate.clearCache();
	    };
	    CompilerImpl.prototype.clearCacheFor = function (type) {
	        this._delegate.clearCacheFor(type);
	    };
	    CompilerImpl.prototype.getModuleId = function (moduleType) {
	        var meta = this._metadataResolver.getNgModuleMetadata(moduleType);
	        return meta && meta.id || undefined;
	    };
	    return CompilerImpl;
	}());
	var Éµ0$9 = new JitReflector(), Éµ1$5 = _NO_RESOURCE_LOADER, Éµ2$3 = function (parser, translations, format, config, console) {
	    translations = translations || '';
	    var missingTranslation = translations ? config.missingTranslation : MissingTranslationStrategy$1.Ignore;
	    return new I18NHtmlParser(parser, translations, format, missingTranslation, console);
	}, Éµ3$3 = new CompilerConfig();
	/**
	 * A set of providers that provide `JitCompiler` and its dependencies to use for
	 * template compilation.
	 */
	var COMPILER_PROVIDERS__PRE_R3__ = [
	    { provide: CompileReflector, useValue: Éµ0$9 },
	    { provide: ResourceLoader, useValue: Éµ1$5 },
	    { provide: JitSummaryResolver, deps: [] },
	    { provide: SummaryResolver, useExisting: JitSummaryResolver },
	    { provide: Console, deps: [] },
	    { provide: Lexer, deps: [] },
	    { provide: Parser$1, deps: [Lexer] },
	    {
	        provide: baseHtmlParser,
	        useClass: HtmlParser,
	        deps: [],
	    },
	    {
	        provide: I18NHtmlParser,
	        useFactory: Éµ2$3,
	        deps: [
	            baseHtmlParser,
	            [new Optional(), new Inject(TRANSLATIONS)],
	            [new Optional(), new Inject(TRANSLATIONS_FORMAT)],
	            [CompilerConfig],
	            [Console],
	        ]
	    },
	    {
	        provide: HtmlParser,
	        useExisting: I18NHtmlParser,
	    },
	    {
	        provide: TemplateParser,
	        deps: [CompilerConfig, CompileReflector, Parser$1, ElementSchemaRegistry, I18NHtmlParser, Console]
	    },
	    { provide: JitEvaluator, useClass: JitEvaluator, deps: [] },
	    { provide: DirectiveNormalizer, deps: [ResourceLoader, UrlResolver, HtmlParser, CompilerConfig] },
	    {
	        provide: CompileMetadataResolver,
	        deps: [
	            CompilerConfig, HtmlParser, NgModuleResolver, DirectiveResolver, PipeResolver,
	            SummaryResolver, ElementSchemaRegistry, DirectiveNormalizer, Console,
	            [Optional, StaticSymbolCache], CompileReflector, [Optional, ERROR_COLLECTOR_TOKEN]
	        ]
	    },
	    DEFAULT_PACKAGE_URL_PROVIDER,
	    { provide: StyleCompiler, deps: [UrlResolver] },
	    { provide: ViewCompiler, deps: [CompileReflector] },
	    { provide: NgModuleCompiler, deps: [CompileReflector] },
	    { provide: CompilerConfig, useValue: Éµ3$3 },
	    {
	        provide: Compiler,
	        useClass: CompilerImpl,
	        deps: [
	            Injector, CompileMetadataResolver, TemplateParser, StyleCompiler, ViewCompiler,
	            NgModuleCompiler, SummaryResolver, CompileReflector, JitEvaluator, CompilerConfig, Console
	        ]
	    },
	    { provide: DomElementSchemaRegistry, deps: [] },
	    { provide: ElementSchemaRegistry, useExisting: DomElementSchemaRegistry },
	    { provide: UrlResolver, deps: [PACKAGE_ROOT_URL] },
	    { provide: DirectiveResolver, deps: [CompileReflector] },
	    { provide: PipeResolver, deps: [CompileReflector] },
	    { provide: NgModuleResolver, deps: [CompileReflector] },
	];
	var COMPILER_PROVIDERS = COMPILER_PROVIDERS__PRE_R3__;
	/**
	 * @publicApi
	 */
	var JitCompilerFactory = /** @class */ (function () {
	    /* @internal */
	    function JitCompilerFactory(defaultOptions) {
	        var compilerOptions = {
	            useJit: true,
	            defaultEncapsulation: ViewEncapsulation$1$1.Emulated,
	            missingTranslation: MissingTranslationStrategy$1.Warning,
	        };
	        this._defaultOptions = __spread([compilerOptions], defaultOptions);
	    }
	    JitCompilerFactory.prototype.createCompiler = function (options) {
	        if (options === void 0) { options = []; }
	        var opts = _mergeOptions(this._defaultOptions.concat(options));
	        var injector = Injector.create([
	            COMPILER_PROVIDERS, {
	                provide: CompilerConfig,
	                useFactory: function () {
	                    return new CompilerConfig({
	                        // let explicit values from the compiler options overwrite options
	                        // from the app providers
	                        useJit: opts.useJit,
	                        jitDevMode: isDevMode(),
	                        // let explicit values from the compiler options overwrite options
	                        // from the app providers
	                        defaultEncapsulation: opts.defaultEncapsulation,
	                        missingTranslation: opts.missingTranslation,
	                        preserveWhitespaces: opts.preserveWhitespaces,
	                    });
	                },
	                deps: []
	            },
	            opts.providers
	        ]);
	        return injector.get(Compiler);
	    };
	    return JitCompilerFactory;
	}());
	function _mergeOptions(optionsArr) {
	    return {
	        useJit: _lastDefined(optionsArr.map(function (options) { return options.useJit; })),
	        defaultEncapsulation: _lastDefined(optionsArr.map(function (options) { return options.defaultEncapsulation; })),
	        providers: _mergeArrays(optionsArr.map(function (options) { return options.providers; })),
	        missingTranslation: _lastDefined(optionsArr.map(function (options) { return options.missingTranslation; })),
	        preserveWhitespaces: _lastDefined(optionsArr.map(function (options) { return options.preserveWhitespaces; })),
	    };
	}
	function _lastDefined(args) {
	    for (var i = args.length - 1; i >= 0; i--) {
	        if (args[i] !== undefined) {
	            return args[i];
	        }
	    }
	    return undefined;
	}
	function _mergeArrays(parts) {
	    var result = [];
	    parts.forEach(function (part) { return part && result.push.apply(result, __spread(part)); });
	    return result;
	}

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	var Éµ0$1$2 = {};
	/**
	 * A platform that included corePlatform and the compiler.
	 *
	 * @publicApi
	 */
	var platformCoreDynamic = createPlatformFactory(platformCore, 'coreDynamic', [
	    { provide: COMPILER_OPTIONS, useValue: Éµ0$1$2, multi: true },
	    { provide: CompilerFactory, useClass: JitCompilerFactory, deps: [COMPILER_OPTIONS] },
	]);

	var ResourceLoaderImpl = /** @class */ (function (_super) {
	    __extends(ResourceLoaderImpl, _super);
	    function ResourceLoaderImpl() {
	        return _super !== null && _super.apply(this, arguments) || this;
	    }
	    ResourceLoaderImpl.prototype.get = function (url) {
	        var resolve;
	        var reject;
	        var promise = new Promise(function (res, rej) {
	            resolve = res;
	            reject = rej;
	        });
	        var xhr = new XMLHttpRequest();
	        xhr.open('GET', url, true);
	        xhr.responseType = 'text';
	        xhr.onload = function () {
	            // responseText is the old-school way of retrieving response (supported by IE8 & 9)
	            // response/responseType properties were introduced in ResourceLoader Level2 spec (supported
	            // by IE10)
	            var response = xhr.response || xhr.responseText;
	            // normalize IE9 bug (http://bugs.jquery.com/ticket/1450)
	            var status = xhr.status === 1223 ? 204 : xhr.status;
	            // fix status code when it is 0 (0 status is undocumented).
	            // Occurs when accessing file resources or on Android 4.1 stock browser
	            // while retrieving files from application cache.
	            if (status === 0) {
	                status = response ? 200 : 0;
	            }
	            if (200 <= status && status <= 300) {
	                resolve(response);
	            }
	            else {
	                reject("Failed to load " + url);
	            }
	        };
	        xhr.onerror = function () {
	            reject("Failed to load " + url);
	        };
	        xhr.send();
	        return promise;
	    };
	    ResourceLoaderImpl = __decorate([
	        Injectable()
	    ], ResourceLoaderImpl);
	    return ResourceLoaderImpl;
	}(ResourceLoader));

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	var Éµ0$2$2 = { providers: [{ provide: ResourceLoader, useClass: ResourceLoaderImpl, deps: [] }] }, Éµ1$1$1 = PLATFORM_BROWSER_ID;
	/**
	 * @publicApi
	 */
	var INTERNAL_BROWSER_DYNAMIC_PLATFORM_PROVIDERS = [
	    INTERNAL_BROWSER_PLATFORM_PROVIDERS,
	    {
	        provide: COMPILER_OPTIONS,
	        useValue: Éµ0$2$2,
	        multi: true
	    },
	    { provide: PLATFORM_ID, useValue: Éµ1$1$1 },
	];

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * An implementation of ResourceLoader that uses a template cache to avoid doing an actual
	 * ResourceLoader.
	 *
	 * The template cache needs to be built and loaded into window.$templateCache
	 * via a separate mechanism.
	 *
	 * @publicApi
	 */
	var CachedResourceLoader = /** @class */ (function (_super) {
	    __extends(CachedResourceLoader, _super);
	    function CachedResourceLoader() {
	        var _this = _super.call(this) || this;
	        _this._cache = _global$1.$templateCache;
	        if (_this._cache == null) {
	            throw new Error('CachedResourceLoader: Template cache was not found in $templateCache.');
	        }
	        return _this;
	    }
	    CachedResourceLoader.prototype.get = function (url) {
	        if (this._cache.hasOwnProperty(url)) {
	            return Promise.resolve(this._cache[url]);
	        }
	        else {
	            return Promise.reject('CachedResourceLoader: Did not find cached template for ' + url);
	        }
	    };
	    return CachedResourceLoader;
	}(ResourceLoader));

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * @publicApi
	 */
	var VERSION$5 = new Version$1('9.1.6');
	/**
	 * @publicApi
	 */
	var platformBrowserDynamic = createPlatformFactory(platformCoreDynamic, 'browserDynamic', INTERNAL_BROWSER_DYNAMIC_PLATFORM_PROVIDERS);

	/**
	 * @license Angular v9.1.7
	 * (c) 2010-2020 Google LLC. https://angular.io/
	 * License: MIT
	 */

	/**
	 * An injectable service that produces an animation sequence programmatically within an
	 * Angular component or directive.
	 * Provided by the `BrowserAnimationsModule` or `NoopAnimationsModule`.
	 *
	 * @usageNotes
	 *
	 * To use this service, add it to your component or directive as a dependency.
	 * The service is instantiated along with your component.
	 *
	 * Apps do not typically need to create their own animation players, but if you
	 * do need to, follow these steps:
	 *
	 * 1. Use the `build()` method to create a programmatic animation using the
	 * `animate()` function. The method returns an `AnimationFactory` instance.
	 *
	 * 2. Use the factory object to create an `AnimationPlayer` and attach it to a DOM element.
	 *
	 * 3. Use the player object to control the animation programmatically.
	 *
	 * For example:
	 *
	 * ```ts
	 * // import the service from BrowserAnimationsModule
	 * import {AnimationBuilder} from '@angular/animations';
	 * // require the service as a dependency
	 * class MyCmp {
	 *   constructor(private _builder: AnimationBuilder) {}
	 *
	 *   makeAnimation(element: any) {
	 *     // first define a reusable animation
	 *     const myAnimation = this._builder.build([
	 *       style({ width: 0 }),
	 *       animate(1000, style({ width: '100px' }))
	 *     ]);
	 *
	 *     // use the returned factory object to create a player
	 *     const player = myAnimation.create(element);
	 *
	 *     player.play();
	 *   }
	 * }
	 * ```
	 *
	 * @publicApi
	 */
	var AnimationBuilder = /** @class */ (function () {
	    function AnimationBuilder() {
	    }
	    return AnimationBuilder;
	}());
	/**
	 * A factory object returned from the `AnimationBuilder`.`build()` method.
	 *
	 * @publicApi
	 */
	var AnimationFactory = /** @class */ (function () {
	    function AnimationFactory() {
	    }
	    return AnimationFactory;
	}());

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * Specifies automatic styling.
	 *
	 * @publicApi
	 */
	var AUTO_STYLE = '*';
	/**
	 * Creates a named animation trigger, containing a  list of `state()`
	 * and `transition()` entries to be evaluated when the expression
	 * bound to the trigger changes.
	 *
	 * @param name An identifying string.
	 * @param definitions  An animation definition object, containing an array of `state()`
	 * and `transition()` declarations.
	 *
	 * @return An object that encapsulates the trigger data.
	 *
	 * @usageNotes
	 * Define an animation trigger in the `animations` section of `@Component` metadata.
	 * In the template, reference the trigger by name and bind it to a trigger expression that
	 * evaluates to a defined animation state, using the following format:
	 *
	 * `[@triggerName]="expression"`
	 *
	 * Animation trigger bindings convert all values to strings, and then match the
	 * previous and current values against any linked transitions.
	 * Booleans can be specified as `1` or `true` and `0` or `false`.
	 *
	 * ### Usage Example
	 *
	 * The following example creates an animation trigger reference based on the provided
	 * name value.
	 * The provided animation value is expected to be an array consisting of state and
	 * transition declarations.
	 *
	 * ```typescript
	 * @Component({
	 *   selector: "my-component",
	 *   templateUrl: "my-component-tpl.html",
	 *   animations: [
	 *     trigger("myAnimationTrigger", [
	 *       state(...),
	 *       state(...),
	 *       transition(...),
	 *       transition(...)
	 *     ])
	 *   ]
	 * })
	 * class MyComponent {
	 *   myStatusExp = "something";
	 * }
	 * ```
	 *
	 * The template associated with this component makes use of the defined trigger
	 * by binding to an element within its template code.
	 *
	 * ```html
	 * <!-- somewhere inside of my-component-tpl.html -->
	 * <div [@myAnimationTrigger]="myStatusExp">...</div>
	 * ```
	 *
	 * ### Using an inline function
	 * The `transition` animation method also supports reading an inline function which can decide
	 * if its associated animation should be run.
	 *
	 * ```typescript
	 * // this method is run each time the `myAnimationTrigger` trigger value changes.
	 * function myInlineMatcherFn(fromState: string, toState: string, element: any, params: {[key:
	 string]: any}): boolean {
	 *   // notice that `element` and `params` are also available here
	 *   return toState == 'yes-please-animate';
	 * }
	 *
	 * @Component({
	 *   selector: 'my-component',
	 *   templateUrl: 'my-component-tpl.html',
	 *   animations: [
	 *     trigger('myAnimationTrigger', [
	 *       transition(myInlineMatcherFn, [
	 *         // the animation sequence code
	 *       ]),
	 *     ])
	 *   ]
	 * })
	 * class MyComponent {
	 *   myStatusExp = "yes-please-animate";
	 * }
	 * ```
	 *
	 * ### Disabling Animations
	 * When true, the special animation control binding `@.disabled` binding prevents
	 * all animations from rendering.
	 * Place the  `@.disabled` binding on an element to disable
	 * animations on the element itself, as well as any inner animation triggers
	 * within the element.
	 *
	 * The following example shows how to use this feature:
	 *
	 * ```typescript
	 * @Component({
	 *   selector: 'my-component',
	 *   template: `
	 *     <div [@.disabled]="isDisabled">
	 *       <div [@childAnimation]="exp"></div>
	 *     </div>
	 *   `,
	 *   animations: [
	 *     trigger("childAnimation", [
	 *       // ...
	 *     ])
	 *   ]
	 * })
	 * class MyComponent {
	 *   isDisabled = true;
	 *   exp = '...';
	 * }
	 * ```
	 *
	 * When `@.disabled` is true, it prevents the `@childAnimation` trigger from animating,
	 * along with any inner animations.
	 *
	 * ### Disable animations application-wide
	 * When an area of the template is set to have animations disabled,
	 * **all** inner components have their animations disabled as well.
	 * This means that you can disable all animations for an app
	 * by placing a host binding set on `@.disabled` on the topmost Angular component.
	 *
	 * ```typescript
	 * import {Component, HostBinding} from '@angular/core';
	 *
	 * @Component({
	 *   selector: 'app-component',
	 *   templateUrl: 'app.component.html',
	 * })
	 * class AppComponent {
	 *   @HostBinding('@.disabled')
	 *   public animationsDisabled = true;
	 * }
	 * ```
	 *
	 * ### Overriding disablement of inner animations
	 * Despite inner animations being disabled, a parent animation can `query()`
	 * for inner elements located in disabled areas of the template and still animate
	 * them if needed. This is also the case for when a sub animation is
	 * queried by a parent and then later animated using `animateChild()`.
	 *
	 * ### Detecting when an animation is disabled
	 * If a region of the DOM (or the entire application) has its animations disabled, the animation
	 * trigger callbacks still fire, but for zero seconds. When the callback fires, it provides
	 * an instance of an `AnimationEvent`. If animations are disabled,
	 * the `.disabled` flag on the event is true.
	 *
	 * @publicApi
	 */
	function trigger(name, definitions) {
	    return { type: 7 /* Trigger */, name: name, definitions: definitions, options: {} };
	}
	/**
	 * Defines an animation step that combines styling information with timing information.
	 *
	 * @param timings Sets `AnimateTimings` for the parent animation.
	 * A string in the format "duration [delay] [easing]".
	 *  - Duration and delay are expressed as a number and optional time unit,
	 * such as "1s" or "10ms" for one second and 10 milliseconds, respectively.
	 * The default unit is milliseconds.
	 *  - The easing value controls how the animation accelerates and decelerates
	 * during its runtime. Value is one of  `ease`, `ease-in`, `ease-out`,
	 * `ease-in-out`, or a `cubic-bezier()` function call.
	 * If not supplied, no easing is applied.
	 *
	 * For example, the string "1s 100ms ease-out" specifies a duration of
	 * 1000 milliseconds, and delay of 100 ms, and the "ease-out" easing style,
	 * which decelerates near the end of the duration.
	 * @param styles Sets AnimationStyles for the parent animation.
	 * A function call to either `style()` or `keyframes()`
	 * that returns a collection of CSS style entries to be applied to the parent animation.
	 * When null, uses the styles from the destination state.
	 * This is useful when describing an animation step that will complete an animation;
	 * see "Animating to the final state" in `transitions()`.
	 * @returns An object that encapsulates the animation step.
	 *
	 * @usageNotes
	 * Call within an animation `sequence()`, `{@link animations/group group()}`, or
	 * `transition()` call to specify an animation step
	 * that applies given style data to the parent animation for a given amount of time.
	 *
	 * ### Syntax Examples
	 * **Timing examples**
	 *
	 * The following examples show various `timings` specifications.
	 * - `animate(500)` : Duration is 500 milliseconds.
	 * - `animate("1s")` : Duration is 1000 milliseconds.
	 * - `animate("100ms 0.5s")` : Duration is 100 milliseconds, delay is 500 milliseconds.
	 * - `animate("5s ease-in")` : Duration is 5000 milliseconds, easing in.
	 * - `animate("5s 10ms cubic-bezier(.17,.67,.88,.1)")` : Duration is 5000 milliseconds, delay is 10
	 * milliseconds, easing according to a bezier curve.
	 *
	 * **Style examples**
	 *
	 * The following example calls `style()` to set a single CSS style.
	 * ```typescript
	 * animate(500, style({ background: "red" }))
	 * ```
	 * The following example calls `keyframes()` to set a CSS style
	 * to different values for successive keyframes.
	 * ```typescript
	 * animate(500, keyframes(
	 *  [
	 *   style({ background: "blue" })),
	 *   style({ background: "red" }))
	 *  ])
	 * ```
	 *
	 * @publicApi
	 */
	function animate(timings, styles) {
	    if (styles === void 0) { styles = null; }
	    return { type: 4 /* Animate */, styles: styles, timings: timings };
	}
	/**
	 * @description Defines a list of animation steps to be run in parallel.
	 *
	 * @param steps An array of animation step objects.
	 * - When steps are defined by `style()` or `animate()`
	 * function calls, each call within the group is executed instantly.
	 * - To specify offset styles to be applied at a later time, define steps with
	 * `keyframes()`, or use `animate()` calls with a delay value.
	 * For example:
	 *
	 * ```typescript
	 * group([
	 *   animate("1s", style({ background: "black" })),
	 *   animate("2s", style({ color: "white" }))
	 * ])
	 * ```
	 *
	 * @param options An options object containing a delay and
	 * developer-defined parameters that provide styling defaults and
	 * can be overridden on invocation.
	 *
	 * @return An object that encapsulates the group data.
	 *
	 * @usageNotes
	 * Grouped animations are useful when a series of styles must be
	 * animated at different starting times and closed off at different ending times.
	 *
	 * When called within a `sequence()` or a
	 * `transition()` call, does not continue to the next
	 * instruction until all of the inner animation steps have completed.
	 *
	 * @publicApi
	 */
	function group(steps, options) {
	    if (options === void 0) { options = null; }
	    return { type: 3 /* Group */, steps: steps, options: options };
	}
	/**
	 * Defines a list of animation steps to be run sequentially, one by one.
	 *
	 * @param steps An array of animation step objects.
	 * - Steps defined by `style()` calls apply the styling data immediately.
	 * - Steps defined by `animate()` calls apply the styling data over time
	 *   as specified by the timing data.
	 *
	 * ```typescript
	 * sequence([
	 *   style({ opacity: 0 }),
	 *   animate("1s", style({ opacity: 1 }))
	 * ])
	 * ```
	 *
	 * @param options An options object containing a delay and
	 * developer-defined parameters that provide styling defaults and
	 * can be overridden on invocation.
	 *
	 * @return An object that encapsulates the sequence data.
	 *
	 * @usageNotes
	 * When you pass an array of steps to a
	 * `transition()` call, the steps run sequentially by default.
	 * Compare this to the `{@link animations/group group()}` call, which runs animation steps in
	 *parallel.
	 *
	 * When a sequence is used within a `{@link animations/group group()}` or a `transition()` call,
	 * execution continues to the next instruction only after each of the inner animation
	 * steps have completed.
	 *
	 * @publicApi
	 **/
	function sequence(steps, options) {
	    if (options === void 0) { options = null; }
	    return { type: 2 /* Sequence */, steps: steps, options: options };
	}
	/**
	 * Declares a key/value object containing CSS properties/styles that
	 * can then be used for an animation `state`, within an animation `sequence`,
	 * or as styling data for calls to `animate()` and `keyframes()`.
	 *
	 * @param tokens A set of CSS styles or HTML styles associated with an animation state.
	 * The value can be any of the following:
	 * - A key-value style pair associating a CSS property with a value.
	 * - An array of key-value style pairs.
	 * - An asterisk (*), to use auto-styling, where styles are derived from the element
	 * being animated and applied to the animation when it starts.
	 *
	 * Auto-styling can be used to define a state that depends on layout or other
	 * environmental factors.
	 *
	 * @return An object that encapsulates the style data.
	 *
	 * @usageNotes
	 * The following examples create animation styles that collect a set of
	 * CSS property values:
	 *
	 * ```typescript
	 * // string values for CSS properties
	 * style({ background: "red", color: "blue" })
	 *
	 * // numerical pixel values
	 * style({ width: 100, height: 0 })
	 * ```
	 *
	 * The following example uses auto-styling to allow a component to animate from
	 * a height of 0 up to the height of the parent element:
	 *
	 * ```
	 * style({ height: 0 }),
	 * animate("1s", style({ height: "*" }))
	 * ```
	 *
	 * @publicApi
	 **/
	function style(tokens) {
	    return { type: 6 /* Style */, styles: tokens, offset: null };
	}
	/**
	 * Declares an animation state within a trigger attached to an element.
	 *
	 * @param name One or more names for the defined state in a comma-separated string.
	 * The following reserved state names can be supplied to define a style for specific use
	 * cases:
	 *
	 * - `void` You can associate styles with this name to be used when
	 * the element is detached from the application. For example, when an `ngIf` evaluates
	 * to false, the state of the associated element is void.
	 *  - `*` (asterisk) Indicates the default state. You can associate styles with this name
	 * to be used as the fallback when the state that is being animated is not declared
	 * within the trigger.
	 *
	 * @param styles A set of CSS styles associated with this state, created using the
	 * `style()` function.
	 * This set of styles persists on the element once the state has been reached.
	 * @param options Parameters that can be passed to the state when it is invoked.
	 * 0 or more key-value pairs.
	 * @return An object that encapsulates the new state data.
	 *
	 * @usageNotes
	 * Use the `trigger()` function to register states to an animation trigger.
	 * Use the `transition()` function to animate between states.
	 * When a state is active within a component, its associated styles persist on the element,
	 * even when the animation ends.
	 *
	 * @publicApi
	 **/
	function state(name, styles, options) {
	    return { type: 0 /* State */, name: name, styles: styles, options: options };
	}
	/**
	 * Declares an animation transition as a sequence of animation steps to run when a given
	 * condition is satisfied. The condition is a Boolean expression or function that compares
	 * the previous and current animation states, and returns true if this transition should occur.
	 * When the state criteria of a defined transition are met, the associated animation is
	 * triggered.
	 *
	 * @param stateChangeExpr A Boolean expression or function that compares the previous and current
	 * animation states, and returns true if this transition should occur. Note that  "true" and "false"
	 * match 1 and 0, respectively. An expression is evaluated each time a state change occurs in the
	 * animation trigger element.
	 * The animation steps run when the expression evaluates to true.
	 *
	 * - A state-change string takes the form "state1 => state2", where each side is a defined animation
	 * state, or an asterix (*) to refer to a dynamic start or end state.
	 *   - The expression string can contain multiple comma-separated statements;
	 * for example "state1 => state2, state3 => state4".
	 *   - Special values `:enter` and `:leave` initiate a transition on the entry and exit states,
	 * equivalent to  "void => *"  and "* => void".
	 *   - Special values `:increment` and `:decrement` initiate a transition when a numeric value has
	 * increased or decreased in value.
	 * - A function is executed each time a state change occurs in the animation trigger element.
	 * The animation steps run when the function returns true.
	 *
	 * @param steps One or more animation objects, as returned by the `animate()` or
	 * `sequence()` function, that form a transformation from one state to another.
	 * A sequence is used by default when you pass an array.
	 * @param options An options object that can contain a delay value for the start of the animation,
	 * and additional developer-defined parameters. Provided values for additional parameters are used
	 * as defaults, and override values can be passed to the caller on invocation.
	 * @returns An object that encapsulates the transition data.
	 *
	 * @usageNotes
	 * The template associated with a component binds an animation trigger to an element.
	 *
	 * ```HTML
	 * <!-- somewhere inside of my-component-tpl.html -->
	 * <div [@myAnimationTrigger]="myStatusExp">...</div>
	 * ```
	 *
	 * All transitions are defined within an animation trigger,
	 * along with named states that the transitions change to and from.
	 *
	 * ```typescript
	 * trigger("myAnimationTrigger", [
	 *  // define states
	 *  state("on", style({ background: "green" })),
	 *  state("off", style({ background: "grey" })),
	 *  ...]
	 * ```
	 *
	 * Note that when you call the `sequence()` function within a `{@link animations/group group()}`
	 * or a `transition()` call, execution does not continue to the next instruction
	 * until each of the inner animation steps have completed.
	 *
	 * ### Syntax examples
	 *
	 * The following examples define transitions between the two defined states (and default states),
	 * using various options:
	 *
	 * ```typescript
	 * // Transition occurs when the state value
	 * // bound to "myAnimationTrigger" changes from "on" to "off"
	 * transition("on => off", animate(500))
	 * // Run the same animation for both directions
	 * transition("on <=> off", animate(500))
	 * // Define multiple state-change pairs separated by commas
	 * transition("on => off, off => void", animate(500))
	 * ```
	 *
	 * ### Special values for state-change expressions
	 *
	 * - Catch-all state change for when an element is inserted into the page and the
	 * destination state is unknown:
	 *
	 * ```typescript
	 * transition("void => *", [
	 *  style({ opacity: 0 }),
	 *  animate(500)
	 *  ])
	 * ```
	 *
	 * - Capture a state change between any states:
	 *
	 *  `transition("* => *", animate("1s 0s"))`
	 *
	 * - Entry and exit transitions:
	 *
	 * ```typescript
	 * transition(":enter", [
	 *   style({ opacity: 0 }),
	 *   animate(500, style({ opacity: 1 }))
	 *   ]),
	 * transition(":leave", [
	 *   animate(500, style({ opacity: 0 }))
	 *   ])
	 * ```
	 *
	 * - Use `:increment` and `:decrement` to initiate transitions:
	 *
	 * ```typescript
	 * transition(":increment", group([
	 *  query(':enter', [
	 *     style({ left: '100%' }),
	 *     animate('0.5s ease-out', style('*'))
	 *   ]),
	 *  query(':leave', [
	 *     animate('0.5s ease-out', style({ left: '-100%' }))
	 *  ])
	 * ]))
	 *
	 * transition(":decrement", group([
	 *  query(':enter', [
	 *     style({ left: '100%' }),
	 *     animate('0.5s ease-out', style('*'))
	 *   ]),
	 *  query(':leave', [
	 *     animate('0.5s ease-out', style({ left: '-100%' }))
	 *  ])
	 * ]))
	 * ```
	 *
	 * ### State-change functions
	 *
	 * Here is an example of a `fromState` specified as a state-change function that invokes an
	 * animation when true:
	 *
	 * ```typescript
	 * transition((fromState, toState) =>
	 *  {
	 *   return fromState == "off" && toState == "on";
	 *  },
	 *  animate("1s 0s"))
	 * ```
	 *
	 * ### Animating to the final state
	 *
	 * If the final step in a transition is a call to `animate()` that uses a timing value
	 * with no style data, that step is automatically considered the final animation arc,
	 * for the element to reach the final state. Angular automatically adds or removes
	 * CSS styles to ensure that the element is in the correct final state.
	 *
	 * The following example defines a transition that starts by hiding the element,
	 * then makes sure that it animates properly to whatever state is currently active for trigger:
	 *
	 * ```typescript
	 * transition("void => *", [
	 *   style({ opacity: 0 }),
	 *   animate(500)
	 *  ])
	 * ```
	 * ### Boolean value matching
	 * If a trigger binding value is a Boolean, it can be matched using a transition expression
	 * that compares true and false or 1 and 0. For example:
	 *
	 * ```
	 * // in the template
	 * <div [@openClose]="open ? true : false">...</div>
	 * // in the component metadata
	 * trigger('openClose', [
	 *   state('true', style({ height: '*' })),
	 *   state('false', style({ height: '0px' })),
	 *   transition('false <=> true', animate(500))
	 * ])
	 * ```
	 *
	 * @publicApi
	 **/
	function transition(stateChangeExpr, steps, options) {
	    if (options === void 0) { options = null; }
	    return { type: 1 /* Transition */, expr: stateChangeExpr, animation: steps, options: options };
	}
	/**
	 * Executes a queried inner animation element within an animation sequence.
	 *
	 * @param options An options object that can contain a delay value for the start of the
	 * animation, and additional override values for developer-defined parameters.
	 * @return An object that encapsulates the child animation data.
	 *
	 * @usageNotes
	 * Each time an animation is triggered in Angular, the parent animation
	 * has priority and any child animations are blocked. In order
	 * for a child animation to run, the parent animation must query each of the elements
	 * containing child animations, and run them using this function.
	 *
	 * Note that this feature is designed to be used with `query()` and it will only work
	 * with animations that are assigned using the Angular animation library. CSS keyframes
	 * and transitions are not handled by this API.
	 *
	 * @publicApi
	 */
	function animateChild(options) {
	    if (options === void 0) { options = null; }
	    return { type: 9 /* AnimateChild */, options: options };
	}
	/**
	 * Finds one or more inner elements within the current element that is
	 * being animated within a sequence. Use with `animate()`.
	 *
	 * @param selector The element to query, or a set of elements that contain Angular-specific
	 * characteristics, specified with one or more of the following tokens.
	 *  - `query(":enter")` or `query(":leave")` : Query for newly inserted/removed elements.
	 *  - `query(":animating")` : Query all currently animating elements.
	 *  - `query("@triggerName")` : Query elements that contain an animation trigger.
	 *  - `query("@*")` : Query all elements that contain an animation triggers.
	 *  - `query(":self")` : Include the current element into the animation sequence.
	 *
	 * @param animation One or more animation steps to apply to the queried element or elements.
	 * An array is treated as an animation sequence.
	 * @param options An options object. Use the 'limit' field to limit the total number of
	 * items to collect.
	 * @return An object that encapsulates the query data.
	 *
	 * @usageNotes
	 * Tokens can be merged into a combined query selector string. For example:
	 *
	 * ```typescript
	 *  query(':self, .record:enter, .record:leave, @subTrigger', [...])
	 * ```
	 *
	 * The `query()` function collects multiple elements and works internally by using
	 * `element.querySelectorAll`. Use the `limit` field of an options object to limit
	 * the total number of items to be collected. For example:
	 *
	 * ```js
	 * query('div', [
	 *   animate(...),
	 *   animate(...)
	 * ], { limit: 1 })
	 * ```
	 *
	 * By default, throws an error when zero items are found. Set the
	 * `optional` flag to ignore this error. For example:
	 *
	 * ```js
	 * query('.some-element-that-may-not-be-there', [
	 *   animate(...),
	 *   animate(...)
	 * ], { optional: true })
	 * ```
	 *
	 * ### Usage Example
	 *
	 * The following example queries for inner elements and animates them
	 * individually using `animate()`.
	 *
	 * ```typescript
	 * @Component({
	 *   selector: 'inner',
	 *   template: `
	 *     <div [@queryAnimation]="exp">
	 *       <h1>Title</h1>
	 *       <div class="content">
	 *         Blah blah blah
	 *       </div>
	 *     </div>
	 *   `,
	 *   animations: [
	 *    trigger('queryAnimation', [
	 *      transition('* => goAnimate', [
	 *        // hide the inner elements
	 *        query('h1', style({ opacity: 0 })),
	 *        query('.content', style({ opacity: 0 })),
	 *
	 *        // animate the inner elements in, one by one
	 *        query('h1', animate(1000, style({ opacity: 1 }))),
	 *        query('.content', animate(1000, style({ opacity: 1 }))),
	 *      ])
	 *    ])
	 *  ]
	 * })
	 * class Cmp {
	 *   exp = '';
	 *
	 *   goAnimate() {
	 *     this.exp = 'goAnimate';
	 *   }
	 * }
	 * ```
	 *
	 * @publicApi
	 */
	function query(selector, animation, options) {
	    if (options === void 0) { options = null; }
	    return { type: 11 /* Query */, selector: selector, animation: animation, options: options };
	}

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	function scheduleMicroTask$1(cb) {
	    Promise.resolve(null).then(cb);
	}

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * An empty programmatic controller for reusable animations.
	 * Used internally when animations are disabled, to avoid
	 * checking for the null case when an animation player is expected.
	 *
	 * @see `animate()`
	 * @see `AnimationPlayer`
	 * @see `GroupPlayer`
	 *
	 * @publicApi
	 */
	var NoopAnimationPlayer = /** @class */ (function () {
	    function NoopAnimationPlayer(duration, delay) {
	        if (duration === void 0) { duration = 0; }
	        if (delay === void 0) { delay = 0; }
	        this._onDoneFns = [];
	        this._onStartFns = [];
	        this._onDestroyFns = [];
	        this._started = false;
	        this._destroyed = false;
	        this._finished = false;
	        this.parentPlayer = null;
	        this.totalTime = duration + delay;
	    }
	    NoopAnimationPlayer.prototype._onFinish = function () {
	        if (!this._finished) {
	            this._finished = true;
	            this._onDoneFns.forEach(function (fn) { return fn(); });
	            this._onDoneFns = [];
	        }
	    };
	    NoopAnimationPlayer.prototype.onStart = function (fn) {
	        this._onStartFns.push(fn);
	    };
	    NoopAnimationPlayer.prototype.onDone = function (fn) {
	        this._onDoneFns.push(fn);
	    };
	    NoopAnimationPlayer.prototype.onDestroy = function (fn) {
	        this._onDestroyFns.push(fn);
	    };
	    NoopAnimationPlayer.prototype.hasStarted = function () {
	        return this._started;
	    };
	    NoopAnimationPlayer.prototype.init = function () { };
	    NoopAnimationPlayer.prototype.play = function () {
	        if (!this.hasStarted()) {
	            this._onStart();
	            this.triggerMicrotask();
	        }
	        this._started = true;
	    };
	    /** @internal */
	    NoopAnimationPlayer.prototype.triggerMicrotask = function () {
	        var _this = this;
	        scheduleMicroTask$1(function () { return _this._onFinish(); });
	    };
	    NoopAnimationPlayer.prototype._onStart = function () {
	        this._onStartFns.forEach(function (fn) { return fn(); });
	        this._onStartFns = [];
	    };
	    NoopAnimationPlayer.prototype.pause = function () { };
	    NoopAnimationPlayer.prototype.restart = function () { };
	    NoopAnimationPlayer.prototype.finish = function () {
	        this._onFinish();
	    };
	    NoopAnimationPlayer.prototype.destroy = function () {
	        if (!this._destroyed) {
	            this._destroyed = true;
	            if (!this.hasStarted()) {
	                this._onStart();
	            }
	            this.finish();
	            this._onDestroyFns.forEach(function (fn) { return fn(); });
	            this._onDestroyFns = [];
	        }
	    };
	    NoopAnimationPlayer.prototype.reset = function () { };
	    NoopAnimationPlayer.prototype.setPosition = function (position) { };
	    NoopAnimationPlayer.prototype.getPosition = function () {
	        return 0;
	    };
	    /** @internal */
	    NoopAnimationPlayer.prototype.triggerCallback = function (phaseName) {
	        var methods = phaseName == 'start' ? this._onStartFns : this._onDoneFns;
	        methods.forEach(function (fn) { return fn(); });
	        methods.length = 0;
	    };
	    return NoopAnimationPlayer;
	}());

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * A programmatic controller for a group of reusable animations.
	 * Used internally to control animations.
	 *
	 * @see `AnimationPlayer`
	 * @see `{@link animations/group group()}`
	 *
	 */
	var AnimationGroupPlayer = /** @class */ (function () {
	    function AnimationGroupPlayer(_players) {
	        var _this = this;
	        this._onDoneFns = [];
	        this._onStartFns = [];
	        this._finished = false;
	        this._started = false;
	        this._destroyed = false;
	        this._onDestroyFns = [];
	        this.parentPlayer = null;
	        this.totalTime = 0;
	        this.players = _players;
	        var doneCount = 0;
	        var destroyCount = 0;
	        var startCount = 0;
	        var total = this.players.length;
	        if (total == 0) {
	            scheduleMicroTask$1(function () { return _this._onFinish(); });
	        }
	        else {
	            this.players.forEach(function (player) {
	                player.onDone(function () {
	                    if (++doneCount == total) {
	                        _this._onFinish();
	                    }
	                });
	                player.onDestroy(function () {
	                    if (++destroyCount == total) {
	                        _this._onDestroy();
	                    }
	                });
	                player.onStart(function () {
	                    if (++startCount == total) {
	                        _this._onStart();
	                    }
	                });
	            });
	        }
	        this.totalTime = this.players.reduce(function (time, player) { return Math.max(time, player.totalTime); }, 0);
	    }
	    AnimationGroupPlayer.prototype._onFinish = function () {
	        if (!this._finished) {
	            this._finished = true;
	            this._onDoneFns.forEach(function (fn) { return fn(); });
	            this._onDoneFns = [];
	        }
	    };
	    AnimationGroupPlayer.prototype.init = function () {
	        this.players.forEach(function (player) { return player.init(); });
	    };
	    AnimationGroupPlayer.prototype.onStart = function (fn) {
	        this._onStartFns.push(fn);
	    };
	    AnimationGroupPlayer.prototype._onStart = function () {
	        if (!this.hasStarted()) {
	            this._started = true;
	            this._onStartFns.forEach(function (fn) { return fn(); });
	            this._onStartFns = [];
	        }
	    };
	    AnimationGroupPlayer.prototype.onDone = function (fn) {
	        this._onDoneFns.push(fn);
	    };
	    AnimationGroupPlayer.prototype.onDestroy = function (fn) {
	        this._onDestroyFns.push(fn);
	    };
	    AnimationGroupPlayer.prototype.hasStarted = function () {
	        return this._started;
	    };
	    AnimationGroupPlayer.prototype.play = function () {
	        if (!this.parentPlayer) {
	            this.init();
	        }
	        this._onStart();
	        this.players.forEach(function (player) { return player.play(); });
	    };
	    AnimationGroupPlayer.prototype.pause = function () {
	        this.players.forEach(function (player) { return player.pause(); });
	    };
	    AnimationGroupPlayer.prototype.restart = function () {
	        this.players.forEach(function (player) { return player.restart(); });
	    };
	    AnimationGroupPlayer.prototype.finish = function () {
	        this._onFinish();
	        this.players.forEach(function (player) { return player.finish(); });
	    };
	    AnimationGroupPlayer.prototype.destroy = function () {
	        this._onDestroy();
	    };
	    AnimationGroupPlayer.prototype._onDestroy = function () {
	        if (!this._destroyed) {
	            this._destroyed = true;
	            this._onFinish();
	            this.players.forEach(function (player) { return player.destroy(); });
	            this._onDestroyFns.forEach(function (fn) { return fn(); });
	            this._onDestroyFns = [];
	        }
	    };
	    AnimationGroupPlayer.prototype.reset = function () {
	        this.players.forEach(function (player) { return player.reset(); });
	        this._destroyed = false;
	        this._finished = false;
	        this._started = false;
	    };
	    AnimationGroupPlayer.prototype.setPosition = function (p) {
	        var timeAtPosition = p * this.totalTime;
	        this.players.forEach(function (player) {
	            var position = player.totalTime ? Math.min(1, timeAtPosition / player.totalTime) : 1;
	            player.setPosition(position);
	        });
	    };
	    AnimationGroupPlayer.prototype.getPosition = function () {
	        var min = 0;
	        this.players.forEach(function (player) {
	            var p = player.getPosition();
	            min = Math.min(p, min);
	        });
	        return min;
	    };
	    AnimationGroupPlayer.prototype.beforeDestroy = function () {
	        this.players.forEach(function (player) {
	            if (player.beforeDestroy) {
	                player.beforeDestroy();
	            }
	        });
	    };
	    /** @internal */
	    AnimationGroupPlayer.prototype.triggerCallback = function (phaseName) {
	        var methods = phaseName == 'start' ? this._onStartFns : this._onDoneFns;
	        methods.forEach(function (fn) { return fn(); });
	        methods.length = 0;
	    };
	    return AnimationGroupPlayer;
	}());

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	var ÉµPRE_STYLE = '!';

	/**
	 * @license Angular v9.1.7
	 * (c) 2010-2020 Google LLC. https://angular.io/
	 * License: MIT
	 */

	function isBrowser() {
	    return (typeof window !== 'undefined' && typeof window.document !== 'undefined');
	}
	function isNode() {
	    // Checking only for `process` isn't enough to identify whether or not we're in a Node
	    // environment, because Webpack by default will polyfill the `process`. While we can discern
	    // that Webpack polyfilled it by looking at `process.browser`, it's very Webpack-specific and
	    // might not be future-proof. Instead we look at the stringified version of `process` which
	    // is `[object process]` in Node and `[object Object]` when polyfilled.
	    return typeof process !== 'undefined' && {}.toString.call(process) === '[object process]';
	}
	function optimizeGroupPlayer(players) {
	    switch (players.length) {
	        case 0:
	            return new NoopAnimationPlayer();
	        case 1:
	            return players[0];
	        default:
	            return new AnimationGroupPlayer(players);
	    }
	}
	function normalizeKeyframes(driver, normalizer, element, keyframes, preStyles, postStyles) {
	    if (preStyles === void 0) { preStyles = {}; }
	    if (postStyles === void 0) { postStyles = {}; }
	    var errors = [];
	    var normalizedKeyframes = [];
	    var previousOffset = -1;
	    var previousKeyframe = null;
	    keyframes.forEach(function (kf) {
	        var offset = kf['offset'];
	        var isSameOffset = offset == previousOffset;
	        var normalizedKeyframe = (isSameOffset && previousKeyframe) || {};
	        Object.keys(kf).forEach(function (prop) {
	            var normalizedProp = prop;
	            var normalizedValue = kf[prop];
	            if (prop !== 'offset') {
	                normalizedProp = normalizer.normalizePropertyName(normalizedProp, errors);
	                switch (normalizedValue) {
	                    case ÉµPRE_STYLE:
	                        normalizedValue = preStyles[prop];
	                        break;
	                    case AUTO_STYLE:
	                        normalizedValue = postStyles[prop];
	                        break;
	                    default:
	                        normalizedValue =
	                            normalizer.normalizeStyleValue(prop, normalizedProp, normalizedValue, errors);
	                        break;
	                }
	            }
	            normalizedKeyframe[normalizedProp] = normalizedValue;
	        });
	        if (!isSameOffset) {
	            normalizedKeyframes.push(normalizedKeyframe);
	        }
	        previousKeyframe = normalizedKeyframe;
	        previousOffset = offset;
	    });
	    if (errors.length) {
	        var LINE_START = '\n - ';
	        throw new Error("Unable to animate due to the following errors:" + LINE_START + errors.join(LINE_START));
	    }
	    return normalizedKeyframes;
	}
	function listenOnPlayer(player, eventName, event, callback) {
	    switch (eventName) {
	        case 'start':
	            player.onStart(function () { return callback(event && copyAnimationEvent(event, 'start', player)); });
	            break;
	        case 'done':
	            player.onDone(function () { return callback(event && copyAnimationEvent(event, 'done', player)); });
	            break;
	        case 'destroy':
	            player.onDestroy(function () { return callback(event && copyAnimationEvent(event, 'destroy', player)); });
	            break;
	    }
	}
	function copyAnimationEvent(e, phaseName, player) {
	    var totalTime = player.totalTime;
	    var disabled = player.disabled ? true : false;
	    var event = makeAnimationEvent(e.element, e.triggerName, e.fromState, e.toState, phaseName || e.phaseName, totalTime == undefined ? e.totalTime : totalTime, disabled);
	    var data = e['_data'];
	    if (data != null) {
	        event['_data'] = data;
	    }
	    return event;
	}
	function makeAnimationEvent(element, triggerName, fromState, toState, phaseName, totalTime, disabled) {
	    if (phaseName === void 0) { phaseName = ''; }
	    if (totalTime === void 0) { totalTime = 0; }
	    return { element: element, triggerName: triggerName, fromState: fromState, toState: toState, phaseName: phaseName, totalTime: totalTime, disabled: !!disabled };
	}
	function getOrSetAsInMap(map, key, defaultValue) {
	    var value;
	    if (map instanceof Map) {
	        value = map.get(key);
	        if (!value) {
	            map.set(key, value = defaultValue);
	        }
	    }
	    else {
	        value = map[key];
	        if (!value) {
	            value = map[key] = defaultValue;
	        }
	    }
	    return value;
	}
	function parseTimelineCommand(command) {
	    var separatorPos = command.indexOf(':');
	    var id = command.substring(1, separatorPos);
	    var action = command.substr(separatorPos + 1);
	    return [id, action];
	}
	var _contains = function (elm1, elm2) { return false; };
	var _matches = function (element, selector) {
	    return false;
	};
	var _query = function (element, selector, multi) {
	    return [];
	};
	// Define utility methods for browsers and platform-server(domino) where Element
	// and utility methods exist.
	var _isNode = isNode();
	if (_isNode || typeof Element !== 'undefined') {
	    // this is well supported in all browsers
	    _contains = function (elm1, elm2) {
	        return elm1.contains(elm2);
	    };
	    _matches = (function () {
	        if (_isNode || Element.prototype.matches) {
	            return function (element, selector) { return element.matches(selector); };
	        }
	        else {
	            var proto = Element.prototype;
	            var fn_1 = proto.matchesSelector || proto.mozMatchesSelector || proto.msMatchesSelector ||
	                proto.oMatchesSelector || proto.webkitMatchesSelector;
	            if (fn_1) {
	                return function (element, selector) { return fn_1.apply(element, [selector]); };
	            }
	            else {
	                return _matches;
	            }
	        }
	    })();
	    _query = function (element, selector, multi) {
	        var results = [];
	        if (multi) {
	            results.push.apply(results, __spread(element.querySelectorAll(selector)));
	        }
	        else {
	            var elm = element.querySelector(selector);
	            if (elm) {
	                results.push(elm);
	            }
	        }
	        return results;
	    };
	}
	function containsVendorPrefix(prop) {
	    // Webkit is the only real popular vendor prefix nowadays
	    // cc: http://shouldiprefix.com/
	    return prop.substring(1, 6) == 'ebkit'; // webkit or Webkit
	}
	var _CACHED_BODY = null;
	var _IS_WEBKIT = false;
	function validateStyleProperty(prop) {
	    if (!_CACHED_BODY) {
	        _CACHED_BODY = getBodyNode() || {};
	        _IS_WEBKIT = _CACHED_BODY.style ? ('WebkitAppearance' in _CACHED_BODY.style) : false;
	    }
	    var result = true;
	    if (_CACHED_BODY.style && !containsVendorPrefix(prop)) {
	        result = prop in _CACHED_BODY.style;
	        if (!result && _IS_WEBKIT) {
	            var camelProp = 'Webkit' + prop.charAt(0).toUpperCase() + prop.substr(1);
	            result = camelProp in _CACHED_BODY.style;
	        }
	    }
	    return result;
	}
	function getBodyNode() {
	    if (typeof document != 'undefined') {
	        return document.body;
	    }
	    return null;
	}
	var matchesElement = _matches;
	var containsElement = _contains;
	var invokeQuery = _query;
	function hypenatePropsObject(object) {
	    var newObj = {};
	    Object.keys(object).forEach(function (prop) {
	        var newProp = prop.replace(/([a-z])([A-Z])/g, '$1-$2');
	        newObj[newProp] = object[prop];
	    });
	    return newObj;
	}

	/**
	 * @publicApi
	 */
	var NoopAnimationDriver = /** @class */ (function () {
	    function NoopAnimationDriver() {
	    }
	    NoopAnimationDriver.prototype.validateStyleProperty = function (prop) {
	        return validateStyleProperty(prop);
	    };
	    NoopAnimationDriver.prototype.matchesElement = function (element, selector) {
	        return matchesElement(element, selector);
	    };
	    NoopAnimationDriver.prototype.containsElement = function (elm1, elm2) {
	        return containsElement(elm1, elm2);
	    };
	    NoopAnimationDriver.prototype.query = function (element, selector, multi) {
	        return invokeQuery(element, selector, multi);
	    };
	    NoopAnimationDriver.prototype.computeStyle = function (element, prop, defaultValue) {
	        return defaultValue || '';
	    };
	    NoopAnimationDriver.prototype.animate = function (element, keyframes, duration, delay, easing, previousPlayers, scrubberAccessRequested) {
	        return new NoopAnimationPlayer(duration, delay);
	    };
	    NoopAnimationDriver = __decorate([
	        Injectable()
	    ], NoopAnimationDriver);
	    return NoopAnimationDriver;
	}());
	/**
	 * @publicApi
	 */
	var AnimationDriver = /** @class */ (function () {
	    function AnimationDriver() {
	    }
	    AnimationDriver.NOOP = new NoopAnimationDriver();
	    return AnimationDriver;
	}());

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	var ONE_SECOND = 1000;
	var SUBSTITUTION_EXPR_START = '{{';
	var SUBSTITUTION_EXPR_END = '}}';
	var ENTER_CLASSNAME = 'ng-enter';
	var LEAVE_CLASSNAME = 'ng-leave';
	var NG_TRIGGER_CLASSNAME = 'ng-trigger';
	var NG_TRIGGER_SELECTOR = '.ng-trigger';
	var NG_ANIMATING_CLASSNAME = 'ng-animating';
	var NG_ANIMATING_SELECTOR = '.ng-animating';
	function resolveTimingValue(value) {
	    if (typeof value == 'number')
	        return value;
	    var matches = value.match(/^(-?[\.\d]+)(m?s)/);
	    if (!matches || matches.length < 2)
	        return 0;
	    return _convertTimeValueToMS(parseFloat(matches[1]), matches[2]);
	}
	function _convertTimeValueToMS(value, unit) {
	    switch (unit) {
	        case 's':
	            return value * ONE_SECOND;
	        default: // ms or something else
	            return value;
	    }
	}
	function resolveTiming(timings, errors, allowNegativeValues) {
	    return timings.hasOwnProperty('duration') ?
	        timings :
	        parseTimeExpression(timings, errors, allowNegativeValues);
	}
	function parseTimeExpression(exp, errors, allowNegativeValues) {
	    var regex = /^(-?[\.\d]+)(m?s)(?:\s+(-?[\.\d]+)(m?s))?(?:\s+([-a-z]+(?:\(.+?\))?))?$/i;
	    var duration;
	    var delay = 0;
	    var easing = '';
	    if (typeof exp === 'string') {
	        var matches = exp.match(regex);
	        if (matches === null) {
	            errors.push("The provided timing value \"" + exp + "\" is invalid.");
	            return { duration: 0, delay: 0, easing: '' };
	        }
	        duration = _convertTimeValueToMS(parseFloat(matches[1]), matches[2]);
	        var delayMatch = matches[3];
	        if (delayMatch != null) {
	            delay = _convertTimeValueToMS(parseFloat(delayMatch), matches[4]);
	        }
	        var easingVal = matches[5];
	        if (easingVal) {
	            easing = easingVal;
	        }
	    }
	    else {
	        duration = exp;
	    }
	    if (!allowNegativeValues) {
	        var containsErrors = false;
	        var startIndex = errors.length;
	        if (duration < 0) {
	            errors.push("Duration values below 0 are not allowed for this animation step.");
	            containsErrors = true;
	        }
	        if (delay < 0) {
	            errors.push("Delay values below 0 are not allowed for this animation step.");
	            containsErrors = true;
	        }
	        if (containsErrors) {
	            errors.splice(startIndex, 0, "The provided timing value \"" + exp + "\" is invalid.");
	        }
	    }
	    return { duration: duration, delay: delay, easing: easing };
	}
	function copyObj(obj, destination) {
	    if (destination === void 0) { destination = {}; }
	    Object.keys(obj).forEach(function (prop) {
	        destination[prop] = obj[prop];
	    });
	    return destination;
	}
	function copyStyles(styles, readPrototype, destination) {
	    if (destination === void 0) { destination = {}; }
	    if (readPrototype) {
	        // we make use of a for-in loop so that the
	        // prototypically inherited properties are
	        // revealed from the backFill map
	        for (var prop in styles) {
	            destination[prop] = styles[prop];
	        }
	    }
	    else {
	        copyObj(styles, destination);
	    }
	    return destination;
	}
	function getStyleAttributeString(element, key, value) {
	    // Return the key-value pair string to be added to the style attribute for the
	    // given CSS style key.
	    if (value) {
	        return key + ':' + value + ';';
	    }
	    else {
	        return '';
	    }
	}
	function writeStyleAttribute(element) {
	    // Read the style property of the element and manually reflect it to the
	    // style attribute. This is needed because Domino on platform-server doesn't
	    // understand the full set of allowed CSS properties and doesn't reflect some
	    // of them automatically.
	    var styleAttrValue = '';
	    for (var i = 0; i < element.style.length; i++) {
	        var key = element.style.item(i);
	        styleAttrValue += getStyleAttributeString(element, key, element.style.getPropertyValue(key));
	    }
	    for (var key in element.style) {
	        // Skip internal Domino properties that don't need to be reflected.
	        if (!element.style.hasOwnProperty(key) || key.startsWith('_')) {
	            continue;
	        }
	        var dashKey = camelCaseToDashCase$1(key);
	        styleAttrValue += getStyleAttributeString(element, dashKey, element.style[key]);
	    }
	    element.setAttribute('style', styleAttrValue);
	}
	function setStyles(element, styles, formerStyles) {
	    if (element['style']) {
	        Object.keys(styles).forEach(function (prop) {
	            var camelProp = dashCaseToCamelCase$1(prop);
	            if (formerStyles && !formerStyles.hasOwnProperty(prop)) {
	                formerStyles[prop] = element.style[camelProp];
	            }
	            element.style[camelProp] = styles[prop];
	        });
	        // On the server set the 'style' attribute since it's not automatically reflected.
	        if (isNode()) {
	            writeStyleAttribute(element);
	        }
	    }
	}
	function eraseStyles(element, styles) {
	    if (element['style']) {
	        Object.keys(styles).forEach(function (prop) {
	            var camelProp = dashCaseToCamelCase$1(prop);
	            element.style[camelProp] = '';
	        });
	        // On the server set the 'style' attribute since it's not automatically reflected.
	        if (isNode()) {
	            writeStyleAttribute(element);
	        }
	    }
	}
	function normalizeAnimationEntry(steps) {
	    if (Array.isArray(steps)) {
	        if (steps.length == 1)
	            return steps[0];
	        return sequence(steps);
	    }
	    return steps;
	}
	function validateStyleParams(value, options, errors) {
	    var params = options.params || {};
	    var matches = extractStyleParams(value);
	    if (matches.length) {
	        matches.forEach(function (varName) {
	            if (!params.hasOwnProperty(varName)) {
	                errors.push("Unable to resolve the local animation param " + varName + " in the given list of values");
	            }
	        });
	    }
	}
	var PARAM_REGEX = new RegExp(SUBSTITUTION_EXPR_START + "\\s*(.+?)\\s*" + SUBSTITUTION_EXPR_END, 'g');
	function extractStyleParams(value) {
	    var params = [];
	    if (typeof value === 'string') {
	        var match = void 0;
	        while (match = PARAM_REGEX.exec(value)) {
	            params.push(match[1]);
	        }
	        PARAM_REGEX.lastIndex = 0;
	    }
	    return params;
	}
	function interpolateParams(value, params, errors) {
	    var original = value.toString();
	    var str = original.replace(PARAM_REGEX, function (_, varName) {
	        var localVal = params[varName];
	        // this means that the value was never overridden by the data passed in by the user
	        if (!params.hasOwnProperty(varName)) {
	            errors.push("Please provide a value for the animation param " + varName);
	            localVal = '';
	        }
	        return localVal.toString();
	    });
	    // we do this to assert that numeric values stay as they are
	    return str == original ? value : str;
	}
	function iteratorToArray(iterator) {
	    var arr = [];
	    var item = iterator.next();
	    while (!item.done) {
	        arr.push(item.value);
	        item = iterator.next();
	    }
	    return arr;
	}
	var DASH_CASE_REGEXP$1 = /-+([a-z0-9])/g;
	function dashCaseToCamelCase$1(input) {
	    return input.replace(DASH_CASE_REGEXP$1, function () {
	        var m = [];
	        for (var _i = 0; _i < arguments.length; _i++) {
	            m[_i] = arguments[_i];
	        }
	        return m[1].toUpperCase();
	    });
	}
	function camelCaseToDashCase$1(input) {
	    return input.replace(/([a-z])([A-Z])/g, '$1-$2').toLowerCase();
	}
	function allowPreviousPlayerStylesMerge(duration, delay) {
	    return duration === 0 || delay === 0;
	}
	function balancePreviousStylesIntoKeyframes(element, keyframes, previousStyles) {
	    var previousStyleProps = Object.keys(previousStyles);
	    if (previousStyleProps.length && keyframes.length) {
	        var startingKeyframe_1 = keyframes[0];
	        var missingStyleProps_1 = [];
	        previousStyleProps.forEach(function (prop) {
	            if (!startingKeyframe_1.hasOwnProperty(prop)) {
	                missingStyleProps_1.push(prop);
	            }
	            startingKeyframe_1[prop] = previousStyles[prop];
	        });
	        if (missingStyleProps_1.length) {
	            var _loop_1 = function () {
	                var kf = keyframes[i];
	                missingStyleProps_1.forEach(function (prop) {
	                    kf[prop] = computeStyle(element, prop);
	                });
	            };
	            // tslint:disable-next-line
	            for (var i = 1; i < keyframes.length; i++) {
	                _loop_1();
	            }
	        }
	    }
	    return keyframes;
	}
	function visitDslNode(visitor, node, context) {
	    switch (node.type) {
	        case 7 /* Trigger */:
	            return visitor.visitTrigger(node, context);
	        case 0 /* State */:
	            return visitor.visitState(node, context);
	        case 1 /* Transition */:
	            return visitor.visitTransition(node, context);
	        case 2 /* Sequence */:
	            return visitor.visitSequence(node, context);
	        case 3 /* Group */:
	            return visitor.visitGroup(node, context);
	        case 4 /* Animate */:
	            return visitor.visitAnimate(node, context);
	        case 5 /* Keyframes */:
	            return visitor.visitKeyframes(node, context);
	        case 6 /* Style */:
	            return visitor.visitStyle(node, context);
	        case 8 /* Reference */:
	            return visitor.visitReference(node, context);
	        case 9 /* AnimateChild */:
	            return visitor.visitAnimateChild(node, context);
	        case 10 /* AnimateRef */:
	            return visitor.visitAnimateRef(node, context);
	        case 11 /* Query */:
	            return visitor.visitQuery(node, context);
	        case 12 /* Stagger */:
	            return visitor.visitStagger(node, context);
	        default:
	            throw new Error("Unable to resolve animation metadata node #" + node.type);
	    }
	}
	function computeStyle(element, prop) {
	    return window.getComputedStyle(element)[prop];
	}

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	var ANY_STATE = '*';
	function parseTransitionExpr(transitionValue, errors) {
	    var expressions = [];
	    if (typeof transitionValue == 'string') {
	        transitionValue.split(/\s*,\s*/).forEach(function (str) { return parseInnerTransitionStr(str, expressions, errors); });
	    }
	    else {
	        expressions.push(transitionValue);
	    }
	    return expressions;
	}
	function parseInnerTransitionStr(eventStr, expressions, errors) {
	    if (eventStr[0] == ':') {
	        var result = parseAnimationAlias(eventStr, errors);
	        if (typeof result == 'function') {
	            expressions.push(result);
	            return;
	        }
	        eventStr = result;
	    }
	    var match = eventStr.match(/^(\*|[-\w]+)\s*(<?[=-]>)\s*(\*|[-\w]+)$/);
	    if (match == null || match.length < 4) {
	        errors.push("The provided transition expression \"" + eventStr + "\" is not supported");
	        return expressions;
	    }
	    var fromState = match[1];
	    var separator = match[2];
	    var toState = match[3];
	    expressions.push(makeLambdaFromStates(fromState, toState));
	    var isFullAnyStateExpr = fromState == ANY_STATE && toState == ANY_STATE;
	    if (separator[0] == '<' && !isFullAnyStateExpr) {
	        expressions.push(makeLambdaFromStates(toState, fromState));
	    }
	}
	function parseAnimationAlias(alias, errors) {
	    switch (alias) {
	        case ':enter':
	            return 'void => *';
	        case ':leave':
	            return '* => void';
	        case ':increment':
	            return function (fromState, toState) { return parseFloat(toState) > parseFloat(fromState); };
	        case ':decrement':
	            return function (fromState, toState) { return parseFloat(toState) < parseFloat(fromState); };
	        default:
	            errors.push("The transition alias value \"" + alias + "\" is not supported");
	            return '* => *';
	    }
	}
	// DO NOT REFACTOR ... keep the follow set instantiations
	// with the values intact (closure compiler for some reason
	// removes follow-up lines that add the values outside of
	// the constructor...
	var TRUE_BOOLEAN_VALUES = new Set(['true', '1']);
	var FALSE_BOOLEAN_VALUES = new Set(['false', '0']);
	function makeLambdaFromStates(lhs, rhs) {
	    var LHS_MATCH_BOOLEAN = TRUE_BOOLEAN_VALUES.has(lhs) || FALSE_BOOLEAN_VALUES.has(lhs);
	    var RHS_MATCH_BOOLEAN = TRUE_BOOLEAN_VALUES.has(rhs) || FALSE_BOOLEAN_VALUES.has(rhs);
	    return function (fromState, toState) {
	        var lhsMatch = lhs == ANY_STATE || lhs == fromState;
	        var rhsMatch = rhs == ANY_STATE || rhs == toState;
	        if (!lhsMatch && LHS_MATCH_BOOLEAN && typeof fromState === 'boolean') {
	            lhsMatch = fromState ? TRUE_BOOLEAN_VALUES.has(lhs) : FALSE_BOOLEAN_VALUES.has(lhs);
	        }
	        if (!rhsMatch && RHS_MATCH_BOOLEAN && typeof toState === 'boolean') {
	            rhsMatch = toState ? TRUE_BOOLEAN_VALUES.has(rhs) : FALSE_BOOLEAN_VALUES.has(rhs);
	        }
	        return lhsMatch && rhsMatch;
	    };
	}

	var SELF_TOKEN = ':self';
	var SELF_TOKEN_REGEX = new RegExp("s*" + SELF_TOKEN + "s*,?", 'g');
	/*
	 * [Validation]
	 * The visitor code below will traverse the animation AST generated by the animation verb functions
	 * (the output is a tree of objects) and attempt to perform a series of validations on the data. The
	 * following corner-cases will be validated:
	 *
	 * 1. Overlap of animations
	 * Given that a CSS property cannot be animated in more than one place at the same time, it's
	 * important that this behavior is detected and validated. The way in which this occurs is that
	 * each time a style property is examined, a string-map containing the property will be updated with
	 * the start and end times for when the property is used within an animation step.
	 *
	 * If there are two or more parallel animations that are currently running (these are invoked by the
	 * group()) on the same element then the validator will throw an error. Since the start/end timing
	 * values are collected for each property then if the current animation step is animating the same
	 * property and its timing values fall anywhere into the window of time that the property is
	 * currently being animated within then this is what causes an error.
	 *
	 * 2. Timing values
	 * The validator will validate to see if a timing value of `duration delay easing` or
	 * `durationNumber` is valid or not.
	 *
	 * (note that upon validation the code below will replace the timing data with an object containing
	 * {duration,delay,easing}.
	 *
	 * 3. Offset Validation
	 * Each of the style() calls are allowed to have an offset value when placed inside of keyframes().
	 * Offsets within keyframes() are considered valid when:
	 *
	 *   - No offsets are used at all
	 *   - Each style() entry contains an offset value
	 *   - Each offset is between 0 and 1
	 *   - Each offset is greater to or equal than the previous one
	 *
	 * Otherwise an error will be thrown.
	 */
	function buildAnimationAst(driver, metadata, errors) {
	    return new AnimationAstBuilderVisitor(driver).build(metadata, errors);
	}
	var ROOT_SELECTOR = '';
	var AnimationAstBuilderVisitor = /** @class */ (function () {
	    function AnimationAstBuilderVisitor(_driver) {
	        this._driver = _driver;
	    }
	    AnimationAstBuilderVisitor.prototype.build = function (metadata, errors) {
	        var context = new AnimationAstBuilderContext(errors);
	        this._resetContextStyleTimingState(context);
	        return visitDslNode(this, normalizeAnimationEntry(metadata), context);
	    };
	    AnimationAstBuilderVisitor.prototype._resetContextStyleTimingState = function (context) {
	        context.currentQuerySelector = ROOT_SELECTOR;
	        context.collectedStyles = {};
	        context.collectedStyles[ROOT_SELECTOR] = {};
	        context.currentTime = 0;
	    };
	    AnimationAstBuilderVisitor.prototype.visitTrigger = function (metadata, context) {
	        var _this = this;
	        var queryCount = context.queryCount = 0;
	        var depCount = context.depCount = 0;
	        var states = [];
	        var transitions = [];
	        if (metadata.name.charAt(0) == '@') {
	            context.errors.push('animation triggers cannot be prefixed with an `@` sign (e.g. trigger(\'@foo\', [...]))');
	        }
	        metadata.definitions.forEach(function (def) {
	            _this._resetContextStyleTimingState(context);
	            if (def.type == 0 /* State */) {
	                var stateDef_1 = def;
	                var name_1 = stateDef_1.name;
	                name_1.toString().split(/\s*,\s*/).forEach(function (n) {
	                    stateDef_1.name = n;
	                    states.push(_this.visitState(stateDef_1, context));
	                });
	                stateDef_1.name = name_1;
	            }
	            else if (def.type == 1 /* Transition */) {
	                var transition = _this.visitTransition(def, context);
	                queryCount += transition.queryCount;
	                depCount += transition.depCount;
	                transitions.push(transition);
	            }
	            else {
	                context.errors.push('only state() and transition() definitions can sit inside of a trigger()');
	            }
	        });
	        return {
	            type: 7 /* Trigger */,
	            name: metadata.name,
	            states: states,
	            transitions: transitions,
	            queryCount: queryCount,
	            depCount: depCount,
	            options: null
	        };
	    };
	    AnimationAstBuilderVisitor.prototype.visitState = function (metadata, context) {
	        var styleAst = this.visitStyle(metadata.styles, context);
	        var astParams = (metadata.options && metadata.options.params) || null;
	        if (styleAst.containsDynamicStyles) {
	            var missingSubs_1 = new Set();
	            var params_1 = astParams || {};
	            styleAst.styles.forEach(function (value) {
	                if (isObject$2(value)) {
	                    var stylesObj_1 = value;
	                    Object.keys(stylesObj_1).forEach(function (prop) {
	                        extractStyleParams(stylesObj_1[prop]).forEach(function (sub) {
	                            if (!params_1.hasOwnProperty(sub)) {
	                                missingSubs_1.add(sub);
	                            }
	                        });
	                    });
	                }
	            });
	            if (missingSubs_1.size) {
	                var missingSubsArr = iteratorToArray(missingSubs_1.values());
	                context.errors.push("state(\"" + metadata
	                    .name + "\", ...) must define default values for all the following style substitutions: " + missingSubsArr.join(', '));
	            }
	        }
	        return {
	            type: 0 /* State */,
	            name: metadata.name,
	            style: styleAst,
	            options: astParams ? { params: astParams } : null
	        };
	    };
	    AnimationAstBuilderVisitor.prototype.visitTransition = function (metadata, context) {
	        context.queryCount = 0;
	        context.depCount = 0;
	        var animation = visitDslNode(this, normalizeAnimationEntry(metadata.animation), context);
	        var matchers = parseTransitionExpr(metadata.expr, context.errors);
	        return {
	            type: 1 /* Transition */,
	            matchers: matchers,
	            animation: animation,
	            queryCount: context.queryCount,
	            depCount: context.depCount,
	            options: normalizeAnimationOptions(metadata.options)
	        };
	    };
	    AnimationAstBuilderVisitor.prototype.visitSequence = function (metadata, context) {
	        var _this = this;
	        return {
	            type: 2 /* Sequence */,
	            steps: metadata.steps.map(function (s) { return visitDslNode(_this, s, context); }),
	            options: normalizeAnimationOptions(metadata.options)
	        };
	    };
	    AnimationAstBuilderVisitor.prototype.visitGroup = function (metadata, context) {
	        var _this = this;
	        var currentTime = context.currentTime;
	        var furthestTime = 0;
	        var steps = metadata.steps.map(function (step) {
	            context.currentTime = currentTime;
	            var innerAst = visitDslNode(_this, step, context);
	            furthestTime = Math.max(furthestTime, context.currentTime);
	            return innerAst;
	        });
	        context.currentTime = furthestTime;
	        return {
	            type: 3 /* Group */,
	            steps: steps,
	            options: normalizeAnimationOptions(metadata.options)
	        };
	    };
	    AnimationAstBuilderVisitor.prototype.visitAnimate = function (metadata, context) {
	        var timingAst = constructTimingAst(metadata.timings, context.errors);
	        context.currentAnimateTimings = timingAst;
	        var styleAst;
	        var styleMetadata = metadata.styles ? metadata.styles : style({});
	        if (styleMetadata.type == 5 /* Keyframes */) {
	            styleAst = this.visitKeyframes(styleMetadata, context);
	        }
	        else {
	            var styleMetadata_1 = metadata.styles;
	            var isEmpty = false;
	            if (!styleMetadata_1) {
	                isEmpty = true;
	                var newStyleData = {};
	                if (timingAst.easing) {
	                    newStyleData['easing'] = timingAst.easing;
	                }
	                styleMetadata_1 = style(newStyleData);
	            }
	            context.currentTime += timingAst.duration + timingAst.delay;
	            var _styleAst = this.visitStyle(styleMetadata_1, context);
	            _styleAst.isEmptyStep = isEmpty;
	            styleAst = _styleAst;
	        }
	        context.currentAnimateTimings = null;
	        return {
	            type: 4 /* Animate */,
	            timings: timingAst,
	            style: styleAst,
	            options: null
	        };
	    };
	    AnimationAstBuilderVisitor.prototype.visitStyle = function (metadata, context) {
	        var ast = this._makeStyleAst(metadata, context);
	        this._validateStyleAst(ast, context);
	        return ast;
	    };
	    AnimationAstBuilderVisitor.prototype._makeStyleAst = function (metadata, context) {
	        var styles = [];
	        if (Array.isArray(metadata.styles)) {
	            metadata.styles.forEach(function (styleTuple) {
	                if (typeof styleTuple == 'string') {
	                    if (styleTuple == AUTO_STYLE) {
	                        styles.push(styleTuple);
	                    }
	                    else {
	                        context.errors.push("The provided style string value " + styleTuple + " is not allowed.");
	                    }
	                }
	                else {
	                    styles.push(styleTuple);
	                }
	            });
	        }
	        else {
	            styles.push(metadata.styles);
	        }
	        var containsDynamicStyles = false;
	        var collectedEasing = null;
	        styles.forEach(function (styleData) {
	            if (isObject$2(styleData)) {
	                var styleMap = styleData;
	                var easing = styleMap['easing'];
	                if (easing) {
	                    collectedEasing = easing;
	                    delete styleMap['easing'];
	                }
	                if (!containsDynamicStyles) {
	                    for (var prop in styleMap) {
	                        var value = styleMap[prop];
	                        if (value.toString().indexOf(SUBSTITUTION_EXPR_START) >= 0) {
	                            containsDynamicStyles = true;
	                            break;
	                        }
	                    }
	                }
	            }
	        });
	        return {
	            type: 6 /* Style */,
	            styles: styles,
	            easing: collectedEasing,
	            offset: metadata.offset,
	            containsDynamicStyles: containsDynamicStyles,
	            options: null
	        };
	    };
	    AnimationAstBuilderVisitor.prototype._validateStyleAst = function (ast, context) {
	        var _this = this;
	        var timings = context.currentAnimateTimings;
	        var endTime = context.currentTime;
	        var startTime = context.currentTime;
	        if (timings && startTime > 0) {
	            startTime -= timings.duration + timings.delay;
	        }
	        ast.styles.forEach(function (tuple) {
	            if (typeof tuple == 'string')
	                return;
	            Object.keys(tuple).forEach(function (prop) {
	                if (!_this._driver.validateStyleProperty(prop)) {
	                    context.errors.push("The provided animation property \"" + prop + "\" is not a supported CSS property for animations");
	                    return;
	                }
	                var collectedStyles = context.collectedStyles[context.currentQuerySelector];
	                var collectedEntry = collectedStyles[prop];
	                var updateCollectedStyle = true;
	                if (collectedEntry) {
	                    if (startTime != endTime && startTime >= collectedEntry.startTime &&
	                        endTime <= collectedEntry.endTime) {
	                        context.errors.push("The CSS property \"" + prop + "\" that exists between the times of \"" + collectedEntry.startTime + "ms\" and \"" + collectedEntry
	                            .endTime + "ms\" is also being animated in a parallel animation between the times of \"" + startTime + "ms\" and \"" + endTime + "ms\"");
	                        updateCollectedStyle = false;
	                    }
	                    // we always choose the smaller start time value since we
	                    // want to have a record of the entire animation window where
	                    // the style property is being animated in between
	                    startTime = collectedEntry.startTime;
	                }
	                if (updateCollectedStyle) {
	                    collectedStyles[prop] = { startTime: startTime, endTime: endTime };
	                }
	                if (context.options) {
	                    validateStyleParams(tuple[prop], context.options, context.errors);
	                }
	            });
	        });
	    };
	    AnimationAstBuilderVisitor.prototype.visitKeyframes = function (metadata, context) {
	        var _this = this;
	        var ast = { type: 5 /* Keyframes */, styles: [], options: null };
	        if (!context.currentAnimateTimings) {
	            context.errors.push("keyframes() must be placed inside of a call to animate()");
	            return ast;
	        }
	        var MAX_KEYFRAME_OFFSET = 1;
	        var totalKeyframesWithOffsets = 0;
	        var offsets = [];
	        var offsetsOutOfOrder = false;
	        var keyframesOutOfRange = false;
	        var previousOffset = 0;
	        var keyframes = metadata.steps.map(function (styles) {
	            var style = _this._makeStyleAst(styles, context);
	            var offsetVal = style.offset != null ? style.offset : consumeOffset(style.styles);
	            var offset = 0;
	            if (offsetVal != null) {
	                totalKeyframesWithOffsets++;
	                offset = style.offset = offsetVal;
	            }
	            keyframesOutOfRange = keyframesOutOfRange || offset < 0 || offset > 1;
	            offsetsOutOfOrder = offsetsOutOfOrder || offset < previousOffset;
	            previousOffset = offset;
	            offsets.push(offset);
	            return style;
	        });
	        if (keyframesOutOfRange) {
	            context.errors.push("Please ensure that all keyframe offsets are between 0 and 1");
	        }
	        if (offsetsOutOfOrder) {
	            context.errors.push("Please ensure that all keyframe offsets are in order");
	        }
	        var length = metadata.steps.length;
	        var generatedOffset = 0;
	        if (totalKeyframesWithOffsets > 0 && totalKeyframesWithOffsets < length) {
	            context.errors.push("Not all style() steps within the declared keyframes() contain offsets");
	        }
	        else if (totalKeyframesWithOffsets == 0) {
	            generatedOffset = MAX_KEYFRAME_OFFSET / (length - 1);
	        }
	        var limit = length - 1;
	        var currentTime = context.currentTime;
	        var currentAnimateTimings = context.currentAnimateTimings;
	        var animateDuration = currentAnimateTimings.duration;
	        keyframes.forEach(function (kf, i) {
	            var offset = generatedOffset > 0 ? (i == limit ? 1 : (generatedOffset * i)) : offsets[i];
	            var durationUpToThisFrame = offset * animateDuration;
	            context.currentTime = currentTime + currentAnimateTimings.delay + durationUpToThisFrame;
	            currentAnimateTimings.duration = durationUpToThisFrame;
	            _this._validateStyleAst(kf, context);
	            kf.offset = offset;
	            ast.styles.push(kf);
	        });
	        return ast;
	    };
	    AnimationAstBuilderVisitor.prototype.visitReference = function (metadata, context) {
	        return {
	            type: 8 /* Reference */,
	            animation: visitDslNode(this, normalizeAnimationEntry(metadata.animation), context),
	            options: normalizeAnimationOptions(metadata.options)
	        };
	    };
	    AnimationAstBuilderVisitor.prototype.visitAnimateChild = function (metadata, context) {
	        context.depCount++;
	        return {
	            type: 9 /* AnimateChild */,
	            options: normalizeAnimationOptions(metadata.options)
	        };
	    };
	    AnimationAstBuilderVisitor.prototype.visitAnimateRef = function (metadata, context) {
	        return {
	            type: 10 /* AnimateRef */,
	            animation: this.visitReference(metadata.animation, context),
	            options: normalizeAnimationOptions(metadata.options)
	        };
	    };
	    AnimationAstBuilderVisitor.prototype.visitQuery = function (metadata, context) {
	        var parentSelector = context.currentQuerySelector;
	        var options = (metadata.options || {});
	        context.queryCount++;
	        context.currentQuery = metadata;
	        var _a = __read(normalizeSelector(metadata.selector), 2), selector = _a[0], includeSelf = _a[1];
	        context.currentQuerySelector =
	            parentSelector.length ? (parentSelector + ' ' + selector) : selector;
	        getOrSetAsInMap(context.collectedStyles, context.currentQuerySelector, {});
	        var animation = visitDslNode(this, normalizeAnimationEntry(metadata.animation), context);
	        context.currentQuery = null;
	        context.currentQuerySelector = parentSelector;
	        return {
	            type: 11 /* Query */,
	            selector: selector,
	            limit: options.limit || 0,
	            optional: !!options.optional,
	            includeSelf: includeSelf,
	            animation: animation,
	            originalSelector: metadata.selector,
	            options: normalizeAnimationOptions(metadata.options)
	        };
	    };
	    AnimationAstBuilderVisitor.prototype.visitStagger = function (metadata, context) {
	        if (!context.currentQuery) {
	            context.errors.push("stagger() can only be used inside of query()");
	        }
	        var timings = metadata.timings === 'full' ?
	            { duration: 0, delay: 0, easing: 'full' } :
	            resolveTiming(metadata.timings, context.errors, true);
	        return {
	            type: 12 /* Stagger */,
	            animation: visitDslNode(this, normalizeAnimationEntry(metadata.animation), context),
	            timings: timings,
	            options: null
	        };
	    };
	    return AnimationAstBuilderVisitor;
	}());
	function normalizeSelector(selector) {
	    var hasAmpersand = selector.split(/\s*,\s*/).find(function (token) { return token == SELF_TOKEN; }) ? true : false;
	    if (hasAmpersand) {
	        selector = selector.replace(SELF_TOKEN_REGEX, '');
	    }
	    // the :enter and :leave selectors are filled in at runtime during timeline building
	    selector = selector.replace(/@\*/g, NG_TRIGGER_SELECTOR)
	        .replace(/@\w+/g, function (match) { return NG_TRIGGER_SELECTOR + '-' + match.substr(1); })
	        .replace(/:animating/g, NG_ANIMATING_SELECTOR);
	    return [selector, hasAmpersand];
	}
	function normalizeParams(obj) {
	    return obj ? copyObj(obj) : null;
	}
	var AnimationAstBuilderContext = /** @class */ (function () {
	    function AnimationAstBuilderContext(errors) {
	        this.errors = errors;
	        this.queryCount = 0;
	        this.depCount = 0;
	        this.currentTransition = null;
	        this.currentQuery = null;
	        this.currentQuerySelector = null;
	        this.currentAnimateTimings = null;
	        this.currentTime = 0;
	        this.collectedStyles = {};
	        this.options = null;
	    }
	    return AnimationAstBuilderContext;
	}());
	function consumeOffset(styles) {
	    if (typeof styles == 'string')
	        return null;
	    var offset = null;
	    if (Array.isArray(styles)) {
	        styles.forEach(function (styleTuple) {
	            if (isObject$2(styleTuple) && styleTuple.hasOwnProperty('offset')) {
	                var obj = styleTuple;
	                offset = parseFloat(obj['offset']);
	                delete obj['offset'];
	            }
	        });
	    }
	    else if (isObject$2(styles) && styles.hasOwnProperty('offset')) {
	        var obj = styles;
	        offset = parseFloat(obj['offset']);
	        delete obj['offset'];
	    }
	    return offset;
	}
	function isObject$2(value) {
	    return !Array.isArray(value) && typeof value == 'object';
	}
	function constructTimingAst(value, errors) {
	    var timings = null;
	    if (value.hasOwnProperty('duration')) {
	        timings = value;
	    }
	    else if (typeof value == 'number') {
	        var duration = resolveTiming(value, errors).duration;
	        return makeTimingAst(duration, 0, '');
	    }
	    var strValue = value;
	    var isDynamic = strValue.split(/\s+/).some(function (v) { return v.charAt(0) == '{' && v.charAt(1) == '{'; });
	    if (isDynamic) {
	        var ast = makeTimingAst(0, 0, '');
	        ast.dynamic = true;
	        ast.strValue = strValue;
	        return ast;
	    }
	    timings = timings || resolveTiming(strValue, errors);
	    return makeTimingAst(timings.duration, timings.delay, timings.easing);
	}
	function normalizeAnimationOptions(options) {
	    if (options) {
	        options = copyObj(options);
	        if (options['params']) {
	            options['params'] = normalizeParams(options['params']);
	        }
	    }
	    else {
	        options = {};
	    }
	    return options;
	}
	function makeTimingAst(duration, delay, easing) {
	    return { duration: duration, delay: delay, easing: easing };
	}

	function createTimelineInstruction(element, keyframes, preStyleProps, postStyleProps, duration, delay, easing, subTimeline) {
	    if (easing === void 0) { easing = null; }
	    if (subTimeline === void 0) { subTimeline = false; }
	    return {
	        type: 1 /* TimelineAnimation */,
	        element: element,
	        keyframes: keyframes,
	        preStyleProps: preStyleProps,
	        postStyleProps: postStyleProps,
	        duration: duration,
	        delay: delay,
	        totalTime: duration + delay,
	        easing: easing,
	        subTimeline: subTimeline
	    };
	}

	var ElementInstructionMap = /** @class */ (function () {
	    function ElementInstructionMap() {
	        this._map = new Map();
	    }
	    ElementInstructionMap.prototype.consume = function (element) {
	        var instructions = this._map.get(element);
	        if (instructions) {
	            this._map.delete(element);
	        }
	        else {
	            instructions = [];
	        }
	        return instructions;
	    };
	    ElementInstructionMap.prototype.append = function (element, instructions) {
	        var existingInstructions = this._map.get(element);
	        if (!existingInstructions) {
	            this._map.set(element, existingInstructions = []);
	        }
	        existingInstructions.push.apply(existingInstructions, __spread(instructions));
	    };
	    ElementInstructionMap.prototype.has = function (element) {
	        return this._map.has(element);
	    };
	    ElementInstructionMap.prototype.clear = function () {
	        this._map.clear();
	    };
	    return ElementInstructionMap;
	}());

	var ONE_FRAME_IN_MILLISECONDS = 1;
	var ENTER_TOKEN = ':enter';
	var ENTER_TOKEN_REGEX = new RegExp(ENTER_TOKEN, 'g');
	var LEAVE_TOKEN = ':leave';
	var LEAVE_TOKEN_REGEX = new RegExp(LEAVE_TOKEN, 'g');
	/*
	 * The code within this file aims to generate web-animations-compatible keyframes from Angular's
	 * animation DSL code.
	 *
	 * The code below will be converted from:
	 *
	 * ```
	 * sequence([
	 *   style({ opacity: 0 }),
	 *   animate(1000, style({ opacity: 0 }))
	 * ])
	 * ```
	 *
	 * To:
	 * ```
	 * keyframes = [{ opacity: 0, offset: 0 }, { opacity: 1, offset: 1 }]
	 * duration = 1000
	 * delay = 0
	 * easing = ''
	 * ```
	 *
	 * For this operation to cover the combination of animation verbs (style, animate, group, etc...) a
	 * combination of prototypical inheritance, AST traversal and merge-sort-like algorithms are used.
	 *
	 * [AST Traversal]
	 * Each of the animation verbs, when executed, will return an string-map object representing what
	 * type of action it is (style, animate, group, etc...) and the data associated with it. This means
	 * that when functional composition mix of these functions is evaluated (like in the example above)
	 * then it will end up producing a tree of objects representing the animation itself.
	 *
	 * When this animation object tree is processed by the visitor code below it will visit each of the
	 * verb statements within the visitor. And during each visit it will build the context of the
	 * animation keyframes by interacting with the `TimelineBuilder`.
	 *
	 * [TimelineBuilder]
	 * This class is responsible for tracking the styles and building a series of keyframe objects for a
	 * timeline between a start and end time. The builder starts off with an initial timeline and each
	 * time the AST comes across a `group()`, `keyframes()` or a combination of the two wihtin a
	 * `sequence()` then it will generate a sub timeline for each step as well as a new one after
	 * they are complete.
	 *
	 * As the AST is traversed, the timing state on each of the timelines will be incremented. If a sub
	 * timeline was created (based on one of the cases above) then the parent timeline will attempt to
	 * merge the styles used within the sub timelines into itself (only with group() this will happen).
	 * This happens with a merge operation (much like how the merge works in mergesort) and it will only
	 * copy the most recently used styles from the sub timelines into the parent timeline. This ensures
	 * that if the styles are used later on in another phase of the animation then they will be the most
	 * up-to-date values.
	 *
	 * [How Missing Styles Are Updated]
	 * Each timeline has a `backFill` property which is responsible for filling in new styles into
	 * already processed keyframes if a new style shows up later within the animation sequence.
	 *
	 * ```
	 * sequence([
	 *   style({ width: 0 }),
	 *   animate(1000, style({ width: 100 })),
	 *   animate(1000, style({ width: 200 })),
	 *   animate(1000, style({ width: 300 }))
	 *   animate(1000, style({ width: 400, height: 400 })) // notice how `height` doesn't exist anywhere
	 * else
	 * ])
	 * ```
	 *
	 * What is happening here is that the `height` value is added later in the sequence, but is missing
	 * from all previous animation steps. Therefore when a keyframe is created it would also be missing
	 * from all previous keyframes up until where it is first used. For the timeline keyframe generation
	 * to properly fill in the style it will place the previous value (the value from the parent
	 * timeline) or a default value of `*` into the backFill object. Given that each of the keyframe
	 * styles are objects that prototypically inhert from the backFill object, this means that if a
	 * value is added into the backFill then it will automatically propagate any missing values to all
	 * keyframes. Therefore the missing `height` value will be properly filled into the already
	 * processed keyframes.
	 *
	 * When a sub-timeline is created it will have its own backFill property. This is done so that
	 * styles present within the sub-timeline do not accidentally seep into the previous/future timeline
	 * keyframes
	 *
	 * (For prototypically-inherited contents to be detected a `for(i in obj)` loop must be used.)
	 *
	 * [Validation]
	 * The code in this file is not responsible for validation. That functionality happens with within
	 * the `AnimationValidatorVisitor` code.
	 */
	function buildAnimationTimelines(driver, rootElement, ast, enterClassName, leaveClassName, startingStyles, finalStyles, options, subInstructions, errors) {
	    if (startingStyles === void 0) { startingStyles = {}; }
	    if (finalStyles === void 0) { finalStyles = {}; }
	    if (errors === void 0) { errors = []; }
	    return new AnimationTimelineBuilderVisitor().buildKeyframes(driver, rootElement, ast, enterClassName, leaveClassName, startingStyles, finalStyles, options, subInstructions, errors);
	}
	var AnimationTimelineBuilderVisitor = /** @class */ (function () {
	    function AnimationTimelineBuilderVisitor() {
	    }
	    AnimationTimelineBuilderVisitor.prototype.buildKeyframes = function (driver, rootElement, ast, enterClassName, leaveClassName, startingStyles, finalStyles, options, subInstructions, errors) {
	        if (errors === void 0) { errors = []; }
	        subInstructions = subInstructions || new ElementInstructionMap();
	        var context = new AnimationTimelineContext(driver, rootElement, subInstructions, enterClassName, leaveClassName, errors, []);
	        context.options = options;
	        context.currentTimeline.setStyles([startingStyles], null, context.errors, options);
	        visitDslNode(this, ast, context);
	        // this checks to see if an actual animation happened
	        var timelines = context.timelines.filter(function (timeline) { return timeline.containsAnimation(); });
	        if (timelines.length && Object.keys(finalStyles).length) {
	            var tl = timelines[timelines.length - 1];
	            if (!tl.allowOnlyTimelineStyles()) {
	                tl.setStyles([finalStyles], null, context.errors, options);
	            }
	        }
	        return timelines.length ? timelines.map(function (timeline) { return timeline.buildKeyframes(); }) :
	            [createTimelineInstruction(rootElement, [], [], [], 0, 0, '', false)];
	    };
	    AnimationTimelineBuilderVisitor.prototype.visitTrigger = function (ast, context) {
	        // these values are not visited in this AST
	    };
	    AnimationTimelineBuilderVisitor.prototype.visitState = function (ast, context) {
	        // these values are not visited in this AST
	    };
	    AnimationTimelineBuilderVisitor.prototype.visitTransition = function (ast, context) {
	        // these values are not visited in this AST
	    };
	    AnimationTimelineBuilderVisitor.prototype.visitAnimateChild = function (ast, context) {
	        var elementInstructions = context.subInstructions.consume(context.element);
	        if (elementInstructions) {
	            var innerContext = context.createSubContext(ast.options);
	            var startTime = context.currentTimeline.currentTime;
	            var endTime = this._visitSubInstructions(elementInstructions, innerContext, innerContext.options);
	            if (startTime != endTime) {
	                // we do this on the upper context because we created a sub context for
	                // the sub child animations
	                context.transformIntoNewTimeline(endTime);
	            }
	        }
	        context.previousNode = ast;
	    };
	    AnimationTimelineBuilderVisitor.prototype.visitAnimateRef = function (ast, context) {
	        var innerContext = context.createSubContext(ast.options);
	        innerContext.transformIntoNewTimeline();
	        this.visitReference(ast.animation, innerContext);
	        context.transformIntoNewTimeline(innerContext.currentTimeline.currentTime);
	        context.previousNode = ast;
	    };
	    AnimationTimelineBuilderVisitor.prototype._visitSubInstructions = function (instructions, context, options) {
	        var startTime = context.currentTimeline.currentTime;
	        var furthestTime = startTime;
	        // this is a special-case for when a user wants to skip a sub
	        // animation from being fired entirely.
	        var duration = options.duration != null ? resolveTimingValue(options.duration) : null;
	        var delay = options.delay != null ? resolveTimingValue(options.delay) : null;
	        if (duration !== 0) {
	            instructions.forEach(function (instruction) {
	                var instructionTimings = context.appendInstructionToTimeline(instruction, duration, delay);
	                furthestTime =
	                    Math.max(furthestTime, instructionTimings.duration + instructionTimings.delay);
	            });
	        }
	        return furthestTime;
	    };
	    AnimationTimelineBuilderVisitor.prototype.visitReference = function (ast, context) {
	        context.updateOptions(ast.options, true);
	        visitDslNode(this, ast.animation, context);
	        context.previousNode = ast;
	    };
	    AnimationTimelineBuilderVisitor.prototype.visitSequence = function (ast, context) {
	        var _this = this;
	        var subContextCount = context.subContextCount;
	        var ctx = context;
	        var options = ast.options;
	        if (options && (options.params || options.delay)) {
	            ctx = context.createSubContext(options);
	            ctx.transformIntoNewTimeline();
	            if (options.delay != null) {
	                if (ctx.previousNode.type == 6 /* Style */) {
	                    ctx.currentTimeline.snapshotCurrentStyles();
	                    ctx.previousNode = DEFAULT_NOOP_PREVIOUS_NODE;
	                }
	                var delay = resolveTimingValue(options.delay);
	                ctx.delayNextStep(delay);
	            }
	        }
	        if (ast.steps.length) {
	            ast.steps.forEach(function (s) { return visitDslNode(_this, s, ctx); });
	            // this is here just incase the inner steps only contain or end with a style() call
	            ctx.currentTimeline.applyStylesToKeyframe();
	            // this means that some animation function within the sequence
	            // ended up creating a sub timeline (which means the current
	            // timeline cannot overlap with the contents of the sequence)
	            if (ctx.subContextCount > subContextCount) {
	                ctx.transformIntoNewTimeline();
	            }
	        }
	        context.previousNode = ast;
	    };
	    AnimationTimelineBuilderVisitor.prototype.visitGroup = function (ast, context) {
	        var _this = this;
	        var innerTimelines = [];
	        var furthestTime = context.currentTimeline.currentTime;
	        var delay = ast.options && ast.options.delay ? resolveTimingValue(ast.options.delay) : 0;
	        ast.steps.forEach(function (s) {
	            var innerContext = context.createSubContext(ast.options);
	            if (delay) {
	                innerContext.delayNextStep(delay);
	            }
	            visitDslNode(_this, s, innerContext);
	            furthestTime = Math.max(furthestTime, innerContext.currentTimeline.currentTime);
	            innerTimelines.push(innerContext.currentTimeline);
	        });
	        // this operation is run after the AST loop because otherwise
	        // if the parent timeline's collected styles were updated then
	        // it would pass in invalid data into the new-to-be forked items
	        innerTimelines.forEach(function (timeline) { return context.currentTimeline.mergeTimelineCollectedStyles(timeline); });
	        context.transformIntoNewTimeline(furthestTime);
	        context.previousNode = ast;
	    };
	    AnimationTimelineBuilderVisitor.prototype._visitTiming = function (ast, context) {
	        if (ast.dynamic) {
	            var strValue = ast.strValue;
	            var timingValue = context.params ? interpolateParams(strValue, context.params, context.errors) : strValue;
	            return resolveTiming(timingValue, context.errors);
	        }
	        else {
	            return { duration: ast.duration, delay: ast.delay, easing: ast.easing };
	        }
	    };
	    AnimationTimelineBuilderVisitor.prototype.visitAnimate = function (ast, context) {
	        var timings = context.currentAnimateTimings = this._visitTiming(ast.timings, context);
	        var timeline = context.currentTimeline;
	        if (timings.delay) {
	            context.incrementTime(timings.delay);
	            timeline.snapshotCurrentStyles();
	        }
	        var style = ast.style;
	        if (style.type == 5 /* Keyframes */) {
	            this.visitKeyframes(style, context);
	        }
	        else {
	            context.incrementTime(timings.duration);
	            this.visitStyle(style, context);
	            timeline.applyStylesToKeyframe();
	        }
	        context.currentAnimateTimings = null;
	        context.previousNode = ast;
	    };
	    AnimationTimelineBuilderVisitor.prototype.visitStyle = function (ast, context) {
	        var timeline = context.currentTimeline;
	        var timings = context.currentAnimateTimings;
	        // this is a special case for when a style() call
	        // directly follows  an animate() call (but not inside of an animate() call)
	        if (!timings && timeline.getCurrentStyleProperties().length) {
	            timeline.forwardFrame();
	        }
	        var easing = (timings && timings.easing) || ast.easing;
	        if (ast.isEmptyStep) {
	            timeline.applyEmptyStep(easing);
	        }
	        else {
	            timeline.setStyles(ast.styles, easing, context.errors, context.options);
	        }
	        context.previousNode = ast;
	    };
	    AnimationTimelineBuilderVisitor.prototype.visitKeyframes = function (ast, context) {
	        var currentAnimateTimings = context.currentAnimateTimings;
	        var startTime = (context.currentTimeline).duration;
	        var duration = currentAnimateTimings.duration;
	        var innerContext = context.createSubContext();
	        var innerTimeline = innerContext.currentTimeline;
	        innerTimeline.easing = currentAnimateTimings.easing;
	        ast.styles.forEach(function (step) {
	            var offset = step.offset || 0;
	            innerTimeline.forwardTime(offset * duration);
	            innerTimeline.setStyles(step.styles, step.easing, context.errors, context.options);
	            innerTimeline.applyStylesToKeyframe();
	        });
	        // this will ensure that the parent timeline gets all the styles from
	        // the child even if the new timeline below is not used
	        context.currentTimeline.mergeTimelineCollectedStyles(innerTimeline);
	        // we do this because the window between this timeline and the sub timeline
	        // should ensure that the styles within are exactly the same as they were before
	        context.transformIntoNewTimeline(startTime + duration);
	        context.previousNode = ast;
	    };
	    AnimationTimelineBuilderVisitor.prototype.visitQuery = function (ast, context) {
	        var _this = this;
	        // in the event that the first step before this is a style step we need
	        // to ensure the styles are applied before the children are animated
	        var startTime = context.currentTimeline.currentTime;
	        var options = (ast.options || {});
	        var delay = options.delay ? resolveTimingValue(options.delay) : 0;
	        if (delay &&
	            (context.previousNode.type === 6 /* Style */ ||
	                (startTime == 0 && context.currentTimeline.getCurrentStyleProperties().length))) {
	            context.currentTimeline.snapshotCurrentStyles();
	            context.previousNode = DEFAULT_NOOP_PREVIOUS_NODE;
	        }
	        var furthestTime = startTime;
	        var elms = context.invokeQuery(ast.selector, ast.originalSelector, ast.limit, ast.includeSelf, options.optional ? true : false, context.errors);
	        context.currentQueryTotal = elms.length;
	        var sameElementTimeline = null;
	        elms.forEach(function (element, i) {
	            context.currentQueryIndex = i;
	            var innerContext = context.createSubContext(ast.options, element);
	            if (delay) {
	                innerContext.delayNextStep(delay);
	            }
	            if (element === context.element) {
	                sameElementTimeline = innerContext.currentTimeline;
	            }
	            visitDslNode(_this, ast.animation, innerContext);
	            // this is here just incase the inner steps only contain or end
	            // with a style() call (which is here to signal that this is a preparatory
	            // call to style an element before it is animated again)
	            innerContext.currentTimeline.applyStylesToKeyframe();
	            var endTime = innerContext.currentTimeline.currentTime;
	            furthestTime = Math.max(furthestTime, endTime);
	        });
	        context.currentQueryIndex = 0;
	        context.currentQueryTotal = 0;
	        context.transformIntoNewTimeline(furthestTime);
	        if (sameElementTimeline) {
	            context.currentTimeline.mergeTimelineCollectedStyles(sameElementTimeline);
	            context.currentTimeline.snapshotCurrentStyles();
	        }
	        context.previousNode = ast;
	    };
	    AnimationTimelineBuilderVisitor.prototype.visitStagger = function (ast, context) {
	        var parentContext = context.parentContext;
	        var tl = context.currentTimeline;
	        var timings = ast.timings;
	        var duration = Math.abs(timings.duration);
	        var maxTime = duration * (context.currentQueryTotal - 1);
	        var delay = duration * context.currentQueryIndex;
	        var staggerTransformer = timings.duration < 0 ? 'reverse' : timings.easing;
	        switch (staggerTransformer) {
	            case 'reverse':
	                delay = maxTime - delay;
	                break;
	            case 'full':
	                delay = parentContext.currentStaggerTime;
	                break;
	        }
	        var timeline = context.currentTimeline;
	        if (delay) {
	            timeline.delayNextStep(delay);
	        }
	        var startingTime = timeline.currentTime;
	        visitDslNode(this, ast.animation, context);
	        context.previousNode = ast;
	        // time = duration + delay
	        // the reason why this computation is so complex is because
	        // the inner timeline may either have a delay value or a stretched
	        // keyframe depending on if a subtimeline is not used or is used.
	        parentContext.currentStaggerTime =
	            (tl.currentTime - startingTime) + (tl.startTime - parentContext.currentTimeline.startTime);
	    };
	    return AnimationTimelineBuilderVisitor;
	}());
	var DEFAULT_NOOP_PREVIOUS_NODE = {};
	var AnimationTimelineContext = /** @class */ (function () {
	    function AnimationTimelineContext(_driver, element, subInstructions, _enterClassName, _leaveClassName, errors, timelines, initialTimeline) {
	        this._driver = _driver;
	        this.element = element;
	        this.subInstructions = subInstructions;
	        this._enterClassName = _enterClassName;
	        this._leaveClassName = _leaveClassName;
	        this.errors = errors;
	        this.timelines = timelines;
	        this.parentContext = null;
	        this.currentAnimateTimings = null;
	        this.previousNode = DEFAULT_NOOP_PREVIOUS_NODE;
	        this.subContextCount = 0;
	        this.options = {};
	        this.currentQueryIndex = 0;
	        this.currentQueryTotal = 0;
	        this.currentStaggerTime = 0;
	        this.currentTimeline = initialTimeline || new TimelineBuilder(this._driver, element, 0);
	        timelines.push(this.currentTimeline);
	    }
	    Object.defineProperty(AnimationTimelineContext.prototype, "params", {
	        get: function () {
	            return this.options.params;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    AnimationTimelineContext.prototype.updateOptions = function (options, skipIfExists) {
	        var _this = this;
	        if (!options)
	            return;
	        var newOptions = options;
	        var optionsToUpdate = this.options;
	        // NOTE: this will get patched up when other animation methods support duration overrides
	        if (newOptions.duration != null) {
	            optionsToUpdate.duration = resolveTimingValue(newOptions.duration);
	        }
	        if (newOptions.delay != null) {
	            optionsToUpdate.delay = resolveTimingValue(newOptions.delay);
	        }
	        var newParams = newOptions.params;
	        if (newParams) {
	            var paramsToUpdate_1 = optionsToUpdate.params;
	            if (!paramsToUpdate_1) {
	                paramsToUpdate_1 = this.options.params = {};
	            }
	            Object.keys(newParams).forEach(function (name) {
	                if (!skipIfExists || !paramsToUpdate_1.hasOwnProperty(name)) {
	                    paramsToUpdate_1[name] = interpolateParams(newParams[name], paramsToUpdate_1, _this.errors);
	                }
	            });
	        }
	    };
	    AnimationTimelineContext.prototype._copyOptions = function () {
	        var options = {};
	        if (this.options) {
	            var oldParams_1 = this.options.params;
	            if (oldParams_1) {
	                var params_1 = options['params'] = {};
	                Object.keys(oldParams_1).forEach(function (name) {
	                    params_1[name] = oldParams_1[name];
	                });
	            }
	        }
	        return options;
	    };
	    AnimationTimelineContext.prototype.createSubContext = function (options, element, newTime) {
	        if (options === void 0) { options = null; }
	        var target = element || this.element;
	        var context = new AnimationTimelineContext(this._driver, target, this.subInstructions, this._enterClassName, this._leaveClassName, this.errors, this.timelines, this.currentTimeline.fork(target, newTime || 0));
	        context.previousNode = this.previousNode;
	        context.currentAnimateTimings = this.currentAnimateTimings;
	        context.options = this._copyOptions();
	        context.updateOptions(options);
	        context.currentQueryIndex = this.currentQueryIndex;
	        context.currentQueryTotal = this.currentQueryTotal;
	        context.parentContext = this;
	        this.subContextCount++;
	        return context;
	    };
	    AnimationTimelineContext.prototype.transformIntoNewTimeline = function (newTime) {
	        this.previousNode = DEFAULT_NOOP_PREVIOUS_NODE;
	        this.currentTimeline = this.currentTimeline.fork(this.element, newTime);
	        this.timelines.push(this.currentTimeline);
	        return this.currentTimeline;
	    };
	    AnimationTimelineContext.prototype.appendInstructionToTimeline = function (instruction, duration, delay) {
	        var updatedTimings = {
	            duration: duration != null ? duration : instruction.duration,
	            delay: this.currentTimeline.currentTime + (delay != null ? delay : 0) + instruction.delay,
	            easing: ''
	        };
	        var builder = new SubTimelineBuilder(this._driver, instruction.element, instruction.keyframes, instruction.preStyleProps, instruction.postStyleProps, updatedTimings, instruction.stretchStartingKeyframe);
	        this.timelines.push(builder);
	        return updatedTimings;
	    };
	    AnimationTimelineContext.prototype.incrementTime = function (time) {
	        this.currentTimeline.forwardTime(this.currentTimeline.duration + time);
	    };
	    AnimationTimelineContext.prototype.delayNextStep = function (delay) {
	        // negative delays are not yet supported
	        if (delay > 0) {
	            this.currentTimeline.delayNextStep(delay);
	        }
	    };
	    AnimationTimelineContext.prototype.invokeQuery = function (selector, originalSelector, limit, includeSelf, optional, errors) {
	        var results = [];
	        if (includeSelf) {
	            results.push(this.element);
	        }
	        if (selector.length > 0) { // if :self is only used then the selector is empty
	            selector = selector.replace(ENTER_TOKEN_REGEX, '.' + this._enterClassName);
	            selector = selector.replace(LEAVE_TOKEN_REGEX, '.' + this._leaveClassName);
	            var multi = limit != 1;
	            var elements = this._driver.query(this.element, selector, multi);
	            if (limit !== 0) {
	                elements = limit < 0 ? elements.slice(elements.length + limit, elements.length) :
	                    elements.slice(0, limit);
	            }
	            results.push.apply(results, __spread(elements));
	        }
	        if (!optional && results.length == 0) {
	            errors.push("`query(\"" + originalSelector + "\")` returned zero elements. (Use `query(\"" + originalSelector + "\", { optional: true })` if you wish to allow this.)");
	        }
	        return results;
	    };
	    return AnimationTimelineContext;
	}());
	var TimelineBuilder = /** @class */ (function () {
	    function TimelineBuilder(_driver, element, startTime, _elementTimelineStylesLookup) {
	        this._driver = _driver;
	        this.element = element;
	        this.startTime = startTime;
	        this._elementTimelineStylesLookup = _elementTimelineStylesLookup;
	        this.duration = 0;
	        this._previousKeyframe = {};
	        this._currentKeyframe = {};
	        this._keyframes = new Map();
	        this._styleSummary = {};
	        this._pendingStyles = {};
	        this._backFill = {};
	        this._currentEmptyStepKeyframe = null;
	        if (!this._elementTimelineStylesLookup) {
	            this._elementTimelineStylesLookup = new Map();
	        }
	        this._localTimelineStyles = Object.create(this._backFill, {});
	        this._globalTimelineStyles = this._elementTimelineStylesLookup.get(element);
	        if (!this._globalTimelineStyles) {
	            this._globalTimelineStyles = this._localTimelineStyles;
	            this._elementTimelineStylesLookup.set(element, this._localTimelineStyles);
	        }
	        this._loadKeyframe();
	    }
	    TimelineBuilder.prototype.containsAnimation = function () {
	        switch (this._keyframes.size) {
	            case 0:
	                return false;
	            case 1:
	                return this.getCurrentStyleProperties().length > 0;
	            default:
	                return true;
	        }
	    };
	    TimelineBuilder.prototype.getCurrentStyleProperties = function () {
	        return Object.keys(this._currentKeyframe);
	    };
	    Object.defineProperty(TimelineBuilder.prototype, "currentTime", {
	        get: function () {
	            return this.startTime + this.duration;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    TimelineBuilder.prototype.delayNextStep = function (delay) {
	        // in the event that a style() step is placed right before a stagger()
	        // and that style() step is the very first style() value in the animation
	        // then we need to make a copy of the keyframe [0, copy, 1] so that the delay
	        // properly applies the style() values to work with the stagger...
	        var hasPreStyleStep = this._keyframes.size == 1 && Object.keys(this._pendingStyles).length;
	        if (this.duration || hasPreStyleStep) {
	            this.forwardTime(this.currentTime + delay);
	            if (hasPreStyleStep) {
	                this.snapshotCurrentStyles();
	            }
	        }
	        else {
	            this.startTime += delay;
	        }
	    };
	    TimelineBuilder.prototype.fork = function (element, currentTime) {
	        this.applyStylesToKeyframe();
	        return new TimelineBuilder(this._driver, element, currentTime || this.currentTime, this._elementTimelineStylesLookup);
	    };
	    TimelineBuilder.prototype._loadKeyframe = function () {
	        if (this._currentKeyframe) {
	            this._previousKeyframe = this._currentKeyframe;
	        }
	        this._currentKeyframe = this._keyframes.get(this.duration);
	        if (!this._currentKeyframe) {
	            this._currentKeyframe = Object.create(this._backFill, {});
	            this._keyframes.set(this.duration, this._currentKeyframe);
	        }
	    };
	    TimelineBuilder.prototype.forwardFrame = function () {
	        this.duration += ONE_FRAME_IN_MILLISECONDS;
	        this._loadKeyframe();
	    };
	    TimelineBuilder.prototype.forwardTime = function (time) {
	        this.applyStylesToKeyframe();
	        this.duration = time;
	        this._loadKeyframe();
	    };
	    TimelineBuilder.prototype._updateStyle = function (prop, value) {
	        this._localTimelineStyles[prop] = value;
	        this._globalTimelineStyles[prop] = value;
	        this._styleSummary[prop] = { time: this.currentTime, value: value };
	    };
	    TimelineBuilder.prototype.allowOnlyTimelineStyles = function () {
	        return this._currentEmptyStepKeyframe !== this._currentKeyframe;
	    };
	    TimelineBuilder.prototype.applyEmptyStep = function (easing) {
	        var _this = this;
	        if (easing) {
	            this._previousKeyframe['easing'] = easing;
	        }
	        // special case for animate(duration):
	        // all missing styles are filled with a `*` value then
	        // if any destination styles are filled in later on the same
	        // keyframe then they will override the overridden styles
	        // We use `_globalTimelineStyles` here because there may be
	        // styles in previous keyframes that are not present in this timeline
	        Object.keys(this._globalTimelineStyles).forEach(function (prop) {
	            _this._backFill[prop] = _this._globalTimelineStyles[prop] || AUTO_STYLE;
	            _this._currentKeyframe[prop] = AUTO_STYLE;
	        });
	        this._currentEmptyStepKeyframe = this._currentKeyframe;
	    };
	    TimelineBuilder.prototype.setStyles = function (input, easing, errors, options) {
	        var _this = this;
	        if (easing) {
	            this._previousKeyframe['easing'] = easing;
	        }
	        var params = (options && options.params) || {};
	        var styles = flattenStyles$1(input, this._globalTimelineStyles);
	        Object.keys(styles).forEach(function (prop) {
	            var val = interpolateParams(styles[prop], params, errors);
	            _this._pendingStyles[prop] = val;
	            if (!_this._localTimelineStyles.hasOwnProperty(prop)) {
	                _this._backFill[prop] = _this._globalTimelineStyles.hasOwnProperty(prop) ?
	                    _this._globalTimelineStyles[prop] :
	                    AUTO_STYLE;
	            }
	            _this._updateStyle(prop, val);
	        });
	    };
	    TimelineBuilder.prototype.applyStylesToKeyframe = function () {
	        var _this = this;
	        var styles = this._pendingStyles;
	        var props = Object.keys(styles);
	        if (props.length == 0)
	            return;
	        this._pendingStyles = {};
	        props.forEach(function (prop) {
	            var val = styles[prop];
	            _this._currentKeyframe[prop] = val;
	        });
	        Object.keys(this._localTimelineStyles).forEach(function (prop) {
	            if (!_this._currentKeyframe.hasOwnProperty(prop)) {
	                _this._currentKeyframe[prop] = _this._localTimelineStyles[prop];
	            }
	        });
	    };
	    TimelineBuilder.prototype.snapshotCurrentStyles = function () {
	        var _this = this;
	        Object.keys(this._localTimelineStyles).forEach(function (prop) {
	            var val = _this._localTimelineStyles[prop];
	            _this._pendingStyles[prop] = val;
	            _this._updateStyle(prop, val);
	        });
	    };
	    TimelineBuilder.prototype.getFinalKeyframe = function () {
	        return this._keyframes.get(this.duration);
	    };
	    Object.defineProperty(TimelineBuilder.prototype, "properties", {
	        get: function () {
	            var properties = [];
	            for (var prop in this._currentKeyframe) {
	                properties.push(prop);
	            }
	            return properties;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    TimelineBuilder.prototype.mergeTimelineCollectedStyles = function (timeline) {
	        var _this = this;
	        Object.keys(timeline._styleSummary).forEach(function (prop) {
	            var details0 = _this._styleSummary[prop];
	            var details1 = timeline._styleSummary[prop];
	            if (!details0 || details1.time > details0.time) {
	                _this._updateStyle(prop, details1.value);
	            }
	        });
	    };
	    TimelineBuilder.prototype.buildKeyframes = function () {
	        var _this = this;
	        this.applyStylesToKeyframe();
	        var preStyleProps = new Set();
	        var postStyleProps = new Set();
	        var isEmpty = this._keyframes.size === 1 && this.duration === 0;
	        var finalKeyframes = [];
	        this._keyframes.forEach(function (keyframe, time) {
	            var finalKeyframe = copyStyles(keyframe, true);
	            Object.keys(finalKeyframe).forEach(function (prop) {
	                var value = finalKeyframe[prop];
	                if (value == ÉµPRE_STYLE) {
	                    preStyleProps.add(prop);
	                }
	                else if (value == AUTO_STYLE) {
	                    postStyleProps.add(prop);
	                }
	            });
	            if (!isEmpty) {
	                finalKeyframe['offset'] = time / _this.duration;
	            }
	            finalKeyframes.push(finalKeyframe);
	        });
	        var preProps = preStyleProps.size ? iteratorToArray(preStyleProps.values()) : [];
	        var postProps = postStyleProps.size ? iteratorToArray(postStyleProps.values()) : [];
	        // special case for a 0-second animation (which is designed just to place styles onscreen)
	        if (isEmpty) {
	            var kf0 = finalKeyframes[0];
	            var kf1 = copyObj(kf0);
	            kf0['offset'] = 0;
	            kf1['offset'] = 1;
	            finalKeyframes = [kf0, kf1];
	        }
	        return createTimelineInstruction(this.element, finalKeyframes, preProps, postProps, this.duration, this.startTime, this.easing, false);
	    };
	    return TimelineBuilder;
	}());
	var SubTimelineBuilder = /** @class */ (function (_super) {
	    __extends(SubTimelineBuilder, _super);
	    function SubTimelineBuilder(driver, element, keyframes, preStyleProps, postStyleProps, timings, _stretchStartingKeyframe) {
	        if (_stretchStartingKeyframe === void 0) { _stretchStartingKeyframe = false; }
	        var _this = _super.call(this, driver, element, timings.delay) || this;
	        _this.element = element;
	        _this.keyframes = keyframes;
	        _this.preStyleProps = preStyleProps;
	        _this.postStyleProps = postStyleProps;
	        _this._stretchStartingKeyframe = _stretchStartingKeyframe;
	        _this.timings = { duration: timings.duration, delay: timings.delay, easing: timings.easing };
	        return _this;
	    }
	    SubTimelineBuilder.prototype.containsAnimation = function () {
	        return this.keyframes.length > 1;
	    };
	    SubTimelineBuilder.prototype.buildKeyframes = function () {
	        var keyframes = this.keyframes;
	        var _a = this.timings, delay = _a.delay, duration = _a.duration, easing = _a.easing;
	        if (this._stretchStartingKeyframe && delay) {
	            var newKeyframes = [];
	            var totalTime = duration + delay;
	            var startingGap = delay / totalTime;
	            // the original starting keyframe now starts once the delay is done
	            var newFirstKeyframe = copyStyles(keyframes[0], false);
	            newFirstKeyframe['offset'] = 0;
	            newKeyframes.push(newFirstKeyframe);
	            var oldFirstKeyframe = copyStyles(keyframes[0], false);
	            oldFirstKeyframe['offset'] = roundOffset(startingGap);
	            newKeyframes.push(oldFirstKeyframe);
	            /*
	              When the keyframe is stretched then it means that the delay before the animation
	              starts is gone. Instead the first keyframe is placed at the start of the animation
	              and it is then copied to where it starts when the original delay is over. This basically
	              means nothing animates during that delay, but the styles are still renderered. For this
	              to work the original offset values that exist in the original keyframes must be "warped"
	              so that they can take the new keyframe + delay into account.
	      
	              delay=1000, duration=1000, keyframes = 0 .5 1
	      
	              turns into
	      
	              delay=0, duration=2000, keyframes = 0 .33 .66 1
	             */
	            // offsets between 1 ... n -1 are all warped by the keyframe stretch
	            var limit = keyframes.length - 1;
	            for (var i = 1; i <= limit; i++) {
	                var kf = copyStyles(keyframes[i], false);
	                var oldOffset = kf['offset'];
	                var timeAtKeyframe = delay + oldOffset * duration;
	                kf['offset'] = roundOffset(timeAtKeyframe / totalTime);
	                newKeyframes.push(kf);
	            }
	            // the new starting keyframe should be added at the start
	            duration = totalTime;
	            delay = 0;
	            easing = '';
	            keyframes = newKeyframes;
	        }
	        return createTimelineInstruction(this.element, keyframes, this.preStyleProps, this.postStyleProps, duration, delay, easing, true);
	    };
	    return SubTimelineBuilder;
	}(TimelineBuilder));
	function roundOffset(offset, decimalPoints) {
	    if (decimalPoints === void 0) { decimalPoints = 3; }
	    var mult = Math.pow(10, decimalPoints - 1);
	    return Math.round(offset * mult) / mult;
	}
	function flattenStyles$1(input, allStyles) {
	    var styles = {};
	    var allProperties;
	    input.forEach(function (token) {
	        if (token === '*') {
	            allProperties = allProperties || Object.keys(allStyles);
	            allProperties.forEach(function (prop) {
	                styles[prop] = AUTO_STYLE;
	            });
	        }
	        else {
	            copyStyles(token, false, styles);
	        }
	    });
	    return styles;
	}

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * @publicApi
	 */
	var AnimationStyleNormalizer = /** @class */ (function () {
	    function AnimationStyleNormalizer() {
	    }
	    return AnimationStyleNormalizer;
	}());

	var WebAnimationsStyleNormalizer = /** @class */ (function (_super) {
	    __extends(WebAnimationsStyleNormalizer, _super);
	    function WebAnimationsStyleNormalizer() {
	        return _super !== null && _super.apply(this, arguments) || this;
	    }
	    WebAnimationsStyleNormalizer.prototype.normalizePropertyName = function (propertyName, errors) {
	        return dashCaseToCamelCase$1(propertyName);
	    };
	    WebAnimationsStyleNormalizer.prototype.normalizeStyleValue = function (userProvidedProperty, normalizedProperty, value, errors) {
	        var unit = '';
	        var strVal = value.toString().trim();
	        if (DIMENSIONAL_PROP_MAP[normalizedProperty] && value !== 0 && value !== '0') {
	            if (typeof value === 'number') {
	                unit = 'px';
	            }
	            else {
	                var valAndSuffixMatch = value.match(/^[+-]?[\d\.]+([a-z]*)$/);
	                if (valAndSuffixMatch && valAndSuffixMatch[1].length == 0) {
	                    errors.push("Please provide a CSS unit value for " + userProvidedProperty + ":" + value);
	                }
	            }
	        }
	        return strVal + unit;
	    };
	    return WebAnimationsStyleNormalizer;
	}(AnimationStyleNormalizer));
	var Éµ0$1$3 = function () { return makeBooleanMap('width,height,minWidth,minHeight,maxWidth,maxHeight,left,top,bottom,right,fontSize,outlineWidth,outlineOffset,paddingTop,paddingLeft,paddingBottom,paddingRight,marginTop,marginLeft,marginBottom,marginRight,borderRadius,borderWidth,borderTopWidth,borderLeftWidth,borderRightWidth,borderBottomWidth,textIndent,perspective'
	    .split(',')); };
	var DIMENSIONAL_PROP_MAP = (Éµ0$1$3)();
	function makeBooleanMap(keys) {
	    var map = {};
	    keys.forEach(function (key) { return map[key] = true; });
	    return map;
	}

	function createTransitionInstruction(element, triggerName, fromState, toState, isRemovalTransition, fromStyles, toStyles, timelines, queriedElements, preStyleProps, postStyleProps, totalTime, errors) {
	    return {
	        type: 0 /* TransitionAnimation */,
	        element: element,
	        triggerName: triggerName,
	        isRemovalTransition: isRemovalTransition,
	        fromState: fromState,
	        fromStyles: fromStyles,
	        toState: toState,
	        toStyles: toStyles,
	        timelines: timelines,
	        queriedElements: queriedElements,
	        preStyleProps: preStyleProps,
	        postStyleProps: postStyleProps,
	        totalTime: totalTime,
	        errors: errors
	    };
	}

	var EMPTY_OBJECT = {};
	var AnimationTransitionFactory = /** @class */ (function () {
	    function AnimationTransitionFactory(_triggerName, ast, _stateStyles) {
	        this._triggerName = _triggerName;
	        this.ast = ast;
	        this._stateStyles = _stateStyles;
	    }
	    AnimationTransitionFactory.prototype.match = function (currentState, nextState, element, params) {
	        return oneOrMoreTransitionsMatch(this.ast.matchers, currentState, nextState, element, params);
	    };
	    AnimationTransitionFactory.prototype.buildStyles = function (stateName, params, errors) {
	        var backupStateStyler = this._stateStyles['*'];
	        var stateStyler = this._stateStyles[stateName];
	        var backupStyles = backupStateStyler ? backupStateStyler.buildStyles(params, errors) : {};
	        return stateStyler ? stateStyler.buildStyles(params, errors) : backupStyles;
	    };
	    AnimationTransitionFactory.prototype.build = function (driver, element, currentState, nextState, enterClassName, leaveClassName, currentOptions, nextOptions, subInstructions, skipAstBuild) {
	        var errors = [];
	        var transitionAnimationParams = this.ast.options && this.ast.options.params || EMPTY_OBJECT;
	        var currentAnimationParams = currentOptions && currentOptions.params || EMPTY_OBJECT;
	        var currentStateStyles = this.buildStyles(currentState, currentAnimationParams, errors);
	        var nextAnimationParams = nextOptions && nextOptions.params || EMPTY_OBJECT;
	        var nextStateStyles = this.buildStyles(nextState, nextAnimationParams, errors);
	        var queriedElements = new Set();
	        var preStyleMap = new Map();
	        var postStyleMap = new Map();
	        var isRemoval = nextState === 'void';
	        var animationOptions = { params: __assign(__assign({}, transitionAnimationParams), nextAnimationParams) };
	        var timelines = skipAstBuild ?
	            [] :
	            buildAnimationTimelines(driver, element, this.ast.animation, enterClassName, leaveClassName, currentStateStyles, nextStateStyles, animationOptions, subInstructions, errors);
	        var totalTime = 0;
	        timelines.forEach(function (tl) {
	            totalTime = Math.max(tl.duration + tl.delay, totalTime);
	        });
	        if (errors.length) {
	            return createTransitionInstruction(element, this._triggerName, currentState, nextState, isRemoval, currentStateStyles, nextStateStyles, [], [], preStyleMap, postStyleMap, totalTime, errors);
	        }
	        timelines.forEach(function (tl) {
	            var elm = tl.element;
	            var preProps = getOrSetAsInMap(preStyleMap, elm, {});
	            tl.preStyleProps.forEach(function (prop) { return preProps[prop] = true; });
	            var postProps = getOrSetAsInMap(postStyleMap, elm, {});
	            tl.postStyleProps.forEach(function (prop) { return postProps[prop] = true; });
	            if (elm !== element) {
	                queriedElements.add(elm);
	            }
	        });
	        var queriedElementsList = iteratorToArray(queriedElements.values());
	        return createTransitionInstruction(element, this._triggerName, currentState, nextState, isRemoval, currentStateStyles, nextStateStyles, timelines, queriedElementsList, preStyleMap, postStyleMap, totalTime);
	    };
	    return AnimationTransitionFactory;
	}());
	function oneOrMoreTransitionsMatch(matchFns, currentState, nextState, element, params) {
	    return matchFns.some(function (fn) { return fn(currentState, nextState, element, params); });
	}
	var AnimationStateStyles = /** @class */ (function () {
	    function AnimationStateStyles(styles, defaultParams) {
	        this.styles = styles;
	        this.defaultParams = defaultParams;
	    }
	    AnimationStateStyles.prototype.buildStyles = function (params, errors) {
	        var finalStyles = {};
	        var combinedParams = copyObj(this.defaultParams);
	        Object.keys(params).forEach(function (key) {
	            var value = params[key];
	            if (value != null) {
	                combinedParams[key] = value;
	            }
	        });
	        this.styles.styles.forEach(function (value) {
	            if (typeof value !== 'string') {
	                var styleObj_1 = value;
	                Object.keys(styleObj_1).forEach(function (prop) {
	                    var val = styleObj_1[prop];
	                    if (val.length > 1) {
	                        val = interpolateParams(val, combinedParams, errors);
	                    }
	                    finalStyles[prop] = val;
	                });
	            }
	        });
	        return finalStyles;
	    };
	    return AnimationStateStyles;
	}());

	/**
	 * @publicApi
	 */
	function buildTrigger(name, ast) {
	    return new AnimationTrigger(name, ast);
	}
	/**
	 * @publicApi
	 */
	var AnimationTrigger = /** @class */ (function () {
	    function AnimationTrigger(name, ast) {
	        var _this = this;
	        this.name = name;
	        this.ast = ast;
	        this.transitionFactories = [];
	        this.states = {};
	        ast.states.forEach(function (ast) {
	            var defaultParams = (ast.options && ast.options.params) || {};
	            _this.states[ast.name] = new AnimationStateStyles(ast.style, defaultParams);
	        });
	        balanceProperties(this.states, 'true', '1');
	        balanceProperties(this.states, 'false', '0');
	        ast.transitions.forEach(function (ast) {
	            _this.transitionFactories.push(new AnimationTransitionFactory(name, ast, _this.states));
	        });
	        this.fallbackTransition = createFallbackTransition(name, this.states);
	    }
	    Object.defineProperty(AnimationTrigger.prototype, "containsQueries", {
	        get: function () {
	            return this.ast.queryCount > 0;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    AnimationTrigger.prototype.matchTransition = function (currentState, nextState, element, params) {
	        var entry = this.transitionFactories.find(function (f) { return f.match(currentState, nextState, element, params); });
	        return entry || null;
	    };
	    AnimationTrigger.prototype.matchStyles = function (currentState, params, errors) {
	        return this.fallbackTransition.buildStyles(currentState, params, errors);
	    };
	    return AnimationTrigger;
	}());
	function createFallbackTransition(triggerName, states) {
	    var matchers = [function (fromState, toState) { return true; }];
	    var animation = { type: 2 /* Sequence */, steps: [], options: null };
	    var transition = {
	        type: 1 /* Transition */,
	        animation: animation,
	        matchers: matchers,
	        options: null,
	        queryCount: 0,
	        depCount: 0
	    };
	    return new AnimationTransitionFactory(triggerName, transition, states);
	}
	function balanceProperties(obj, key1, key2) {
	    if (obj.hasOwnProperty(key1)) {
	        if (!obj.hasOwnProperty(key2)) {
	            obj[key2] = obj[key1];
	        }
	    }
	    else if (obj.hasOwnProperty(key2)) {
	        obj[key1] = obj[key2];
	    }
	}

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	var EMPTY_INSTRUCTION_MAP = new ElementInstructionMap();
	var TimelineAnimationEngine = /** @class */ (function () {
	    function TimelineAnimationEngine(bodyNode, _driver, _normalizer) {
	        this.bodyNode = bodyNode;
	        this._driver = _driver;
	        this._normalizer = _normalizer;
	        this._animations = {};
	        this._playersById = {};
	        this.players = [];
	    }
	    TimelineAnimationEngine.prototype.register = function (id, metadata) {
	        var errors = [];
	        var ast = buildAnimationAst(this._driver, metadata, errors);
	        if (errors.length) {
	            throw new Error("Unable to build the animation due to the following errors: " + errors.join('\n'));
	        }
	        else {
	            this._animations[id] = ast;
	        }
	    };
	    TimelineAnimationEngine.prototype._buildPlayer = function (i, preStyles, postStyles) {
	        var element = i.element;
	        var keyframes = normalizeKeyframes(this._driver, this._normalizer, element, i.keyframes, preStyles, postStyles);
	        return this._driver.animate(element, keyframes, i.duration, i.delay, i.easing, [], true);
	    };
	    TimelineAnimationEngine.prototype.create = function (id, element, options) {
	        var _this = this;
	        if (options === void 0) { options = {}; }
	        var errors = [];
	        var ast = this._animations[id];
	        var instructions;
	        var autoStylesMap = new Map();
	        if (ast) {
	            instructions = buildAnimationTimelines(this._driver, element, ast, ENTER_CLASSNAME, LEAVE_CLASSNAME, {}, {}, options, EMPTY_INSTRUCTION_MAP, errors);
	            instructions.forEach(function (inst) {
	                var styles = getOrSetAsInMap(autoStylesMap, inst.element, {});
	                inst.postStyleProps.forEach(function (prop) { return styles[prop] = null; });
	            });
	        }
	        else {
	            errors.push('The requested animation doesn\'t exist or has already been destroyed');
	            instructions = [];
	        }
	        if (errors.length) {
	            throw new Error("Unable to create the animation due to the following errors: " + errors.join('\n'));
	        }
	        autoStylesMap.forEach(function (styles, element) {
	            Object.keys(styles).forEach(function (prop) {
	                styles[prop] = _this._driver.computeStyle(element, prop, AUTO_STYLE);
	            });
	        });
	        var players = instructions.map(function (i) {
	            var styles = autoStylesMap.get(i.element);
	            return _this._buildPlayer(i, {}, styles);
	        });
	        var player = optimizeGroupPlayer(players);
	        this._playersById[id] = player;
	        player.onDestroy(function () { return _this.destroy(id); });
	        this.players.push(player);
	        return player;
	    };
	    TimelineAnimationEngine.prototype.destroy = function (id) {
	        var player = this._getPlayer(id);
	        player.destroy();
	        delete this._playersById[id];
	        var index = this.players.indexOf(player);
	        if (index >= 0) {
	            this.players.splice(index, 1);
	        }
	    };
	    TimelineAnimationEngine.prototype._getPlayer = function (id) {
	        var player = this._playersById[id];
	        if (!player) {
	            throw new Error("Unable to find the timeline player referenced by " + id);
	        }
	        return player;
	    };
	    TimelineAnimationEngine.prototype.listen = function (id, element, eventName, callback) {
	        // triggerName, fromState, toState are all ignored for timeline animations
	        var baseEvent = makeAnimationEvent(element, '', '', '');
	        listenOnPlayer(this._getPlayer(id), eventName, baseEvent, callback);
	        return function () { };
	    };
	    TimelineAnimationEngine.prototype.command = function (id, element, command, args) {
	        if (command == 'register') {
	            this.register(id, args[0]);
	            return;
	        }
	        if (command == 'create') {
	            var options = (args[0] || {});
	            this.create(id, element, options);
	            return;
	        }
	        var player = this._getPlayer(id);
	        switch (command) {
	            case 'play':
	                player.play();
	                break;
	            case 'pause':
	                player.pause();
	                break;
	            case 'reset':
	                player.reset();
	                break;
	            case 'restart':
	                player.restart();
	                break;
	            case 'finish':
	                player.finish();
	                break;
	            case 'init':
	                player.init();
	                break;
	            case 'setPosition':
	                player.setPosition(parseFloat(args[0]));
	                break;
	            case 'destroy':
	                this.destroy(id);
	                break;
	        }
	    };
	    return TimelineAnimationEngine;
	}());

	var QUEUED_CLASSNAME = 'ng-animate-queued';
	var QUEUED_SELECTOR = '.ng-animate-queued';
	var DISABLED_CLASSNAME = 'ng-animate-disabled';
	var DISABLED_SELECTOR = '.ng-animate-disabled';
	var STAR_CLASSNAME = 'ng-star-inserted';
	var STAR_SELECTOR = '.ng-star-inserted';
	var EMPTY_PLAYER_ARRAY = [];
	var NULL_REMOVAL_STATE = {
	    namespaceId: '',
	    setForRemoval: false,
	    setForMove: false,
	    hasAnimation: false,
	    removedBeforeQueried: false
	};
	var NULL_REMOVED_QUERIED_STATE = {
	    namespaceId: '',
	    setForMove: false,
	    setForRemoval: false,
	    hasAnimation: false,
	    removedBeforeQueried: true
	};
	var REMOVAL_FLAG = '__ng_removed';
	var StateValue = /** @class */ (function () {
	    function StateValue(input, namespaceId) {
	        if (namespaceId === void 0) { namespaceId = ''; }
	        this.namespaceId = namespaceId;
	        var isObj = input && input.hasOwnProperty('value');
	        var value = isObj ? input['value'] : input;
	        this.value = normalizeTriggerValue(value);
	        if (isObj) {
	            var options = copyObj(input);
	            delete options['value'];
	            this.options = options;
	        }
	        else {
	            this.options = {};
	        }
	        if (!this.options.params) {
	            this.options.params = {};
	        }
	    }
	    Object.defineProperty(StateValue.prototype, "params", {
	        get: function () {
	            return this.options.params;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    StateValue.prototype.absorbOptions = function (options) {
	        var newParams = options.params;
	        if (newParams) {
	            var oldParams_1 = this.options.params;
	            Object.keys(newParams).forEach(function (prop) {
	                if (oldParams_1[prop] == null) {
	                    oldParams_1[prop] = newParams[prop];
	                }
	            });
	        }
	    };
	    return StateValue;
	}());
	var VOID_VALUE = 'void';
	var DEFAULT_STATE_VALUE = new StateValue(VOID_VALUE);
	var AnimationTransitionNamespace = /** @class */ (function () {
	    function AnimationTransitionNamespace(id, hostElement, _engine) {
	        this.id = id;
	        this.hostElement = hostElement;
	        this._engine = _engine;
	        this.players = [];
	        this._triggers = {};
	        this._queue = [];
	        this._elementListeners = new Map();
	        this._hostClassName = 'ng-tns-' + id;
	        addClass(hostElement, this._hostClassName);
	    }
	    AnimationTransitionNamespace.prototype.listen = function (element, name, phase, callback) {
	        var _this = this;
	        if (!this._triggers.hasOwnProperty(name)) {
	            throw new Error("Unable to listen on the animation trigger event \"" + phase + "\" because the animation trigger \"" + name + "\" doesn't exist!");
	        }
	        if (phase == null || phase.length == 0) {
	            throw new Error("Unable to listen on the animation trigger \"" + name + "\" because the provided event is undefined!");
	        }
	        if (!isTriggerEventValid(phase)) {
	            throw new Error("The provided animation trigger event \"" + phase + "\" for the animation trigger \"" + name + "\" is not supported!");
	        }
	        var listeners = getOrSetAsInMap(this._elementListeners, element, []);
	        var data = { name: name, phase: phase, callback: callback };
	        listeners.push(data);
	        var triggersWithStates = getOrSetAsInMap(this._engine.statesByElement, element, {});
	        if (!triggersWithStates.hasOwnProperty(name)) {
	            addClass(element, NG_TRIGGER_CLASSNAME);
	            addClass(element, NG_TRIGGER_CLASSNAME + '-' + name);
	            triggersWithStates[name] = DEFAULT_STATE_VALUE;
	        }
	        return function () {
	            // the event listener is removed AFTER the flush has occurred such
	            // that leave animations callbacks can fire (otherwise if the node
	            // is removed in between then the listeners would be deregistered)
	            _this._engine.afterFlush(function () {
	                var index = listeners.indexOf(data);
	                if (index >= 0) {
	                    listeners.splice(index, 1);
	                }
	                if (!_this._triggers[name]) {
	                    delete triggersWithStates[name];
	                }
	            });
	        };
	    };
	    AnimationTransitionNamespace.prototype.register = function (name, ast) {
	        if (this._triggers[name]) {
	            // throw
	            return false;
	        }
	        else {
	            this._triggers[name] = ast;
	            return true;
	        }
	    };
	    AnimationTransitionNamespace.prototype._getTrigger = function (name) {
	        var trigger = this._triggers[name];
	        if (!trigger) {
	            throw new Error("The provided animation trigger \"" + name + "\" has not been registered!");
	        }
	        return trigger;
	    };
	    AnimationTransitionNamespace.prototype.trigger = function (element, triggerName, value, defaultToFallback) {
	        var _this = this;
	        if (defaultToFallback === void 0) { defaultToFallback = true; }
	        var trigger = this._getTrigger(triggerName);
	        var player = new TransitionAnimationPlayer(this.id, triggerName, element);
	        var triggersWithStates = this._engine.statesByElement.get(element);
	        if (!triggersWithStates) {
	            addClass(element, NG_TRIGGER_CLASSNAME);
	            addClass(element, NG_TRIGGER_CLASSNAME + '-' + triggerName);
	            this._engine.statesByElement.set(element, triggersWithStates = {});
	        }
	        var fromState = triggersWithStates[triggerName];
	        var toState = new StateValue(value, this.id);
	        var isObj = value && value.hasOwnProperty('value');
	        if (!isObj && fromState) {
	            toState.absorbOptions(fromState.options);
	        }
	        triggersWithStates[triggerName] = toState;
	        if (!fromState) {
	            fromState = DEFAULT_STATE_VALUE;
	        }
	        var isRemoval = toState.value === VOID_VALUE;
	        // normally this isn't reached by here, however, if an object expression
	        // is passed in then it may be a new object each time. Comparing the value
	        // is important since that will stay the same despite there being a new object.
	        // The removal arc here is special cased because the same element is triggered
	        // twice in the event that it contains animations on the outer/inner portions
	        // of the host container
	        if (!isRemoval && fromState.value === toState.value) {
	            // this means that despite the value not changing, some inner params
	            // have changed which means that the animation final styles need to be applied
	            if (!objEquals(fromState.params, toState.params)) {
	                var errors = [];
	                var fromStyles_1 = trigger.matchStyles(fromState.value, fromState.params, errors);
	                var toStyles_1 = trigger.matchStyles(toState.value, toState.params, errors);
	                if (errors.length) {
	                    this._engine.reportError(errors);
	                }
	                else {
	                    this._engine.afterFlush(function () {
	                        eraseStyles(element, fromStyles_1);
	                        setStyles(element, toStyles_1);
	                    });
	                }
	            }
	            return;
	        }
	        var playersOnElement = getOrSetAsInMap(this._engine.playersByElement, element, []);
	        playersOnElement.forEach(function (player) {
	            // only remove the player if it is queued on the EXACT same trigger/namespace
	            // we only also deal with queued players here because if the animation has
	            // started then we want to keep the player alive until the flush happens
	            // (which is where the previousPlayers are passed into the new palyer)
	            if (player.namespaceId == _this.id && player.triggerName == triggerName && player.queued) {
	                player.destroy();
	            }
	        });
	        var transition = trigger.matchTransition(fromState.value, toState.value, element, toState.params);
	        var isFallbackTransition = false;
	        if (!transition) {
	            if (!defaultToFallback)
	                return;
	            transition = trigger.fallbackTransition;
	            isFallbackTransition = true;
	        }
	        this._engine.totalQueuedPlayers++;
	        this._queue.push({ element: element, triggerName: triggerName, transition: transition, fromState: fromState, toState: toState, player: player, isFallbackTransition: isFallbackTransition });
	        if (!isFallbackTransition) {
	            addClass(element, QUEUED_CLASSNAME);
	            player.onStart(function () {
	                removeClass(element, QUEUED_CLASSNAME);
	            });
	        }
	        player.onDone(function () {
	            var index = _this.players.indexOf(player);
	            if (index >= 0) {
	                _this.players.splice(index, 1);
	            }
	            var players = _this._engine.playersByElement.get(element);
	            if (players) {
	                var index_1 = players.indexOf(player);
	                if (index_1 >= 0) {
	                    players.splice(index_1, 1);
	                }
	            }
	        });
	        this.players.push(player);
	        playersOnElement.push(player);
	        return player;
	    };
	    AnimationTransitionNamespace.prototype.deregister = function (name) {
	        var _this = this;
	        delete this._triggers[name];
	        this._engine.statesByElement.forEach(function (stateMap, element) {
	            delete stateMap[name];
	        });
	        this._elementListeners.forEach(function (listeners, element) {
	            _this._elementListeners.set(element, listeners.filter(function (entry) {
	                return entry.name != name;
	            }));
	        });
	    };
	    AnimationTransitionNamespace.prototype.clearElementCache = function (element) {
	        this._engine.statesByElement.delete(element);
	        this._elementListeners.delete(element);
	        var elementPlayers = this._engine.playersByElement.get(element);
	        if (elementPlayers) {
	            elementPlayers.forEach(function (player) { return player.destroy(); });
	            this._engine.playersByElement.delete(element);
	        }
	    };
	    AnimationTransitionNamespace.prototype._signalRemovalForInnerTriggers = function (rootElement, context) {
	        var _this = this;
	        var elements = this._engine.driver.query(rootElement, NG_TRIGGER_SELECTOR, true);
	        // emulate a leave animation for all inner nodes within this node.
	        // If there are no animations found for any of the nodes then clear the cache
	        // for the element.
	        elements.forEach(function (elm) {
	            // this means that an inner remove() operation has already kicked off
	            // the animation on this element...
	            if (elm[REMOVAL_FLAG])
	                return;
	            var namespaces = _this._engine.fetchNamespacesByElement(elm);
	            if (namespaces.size) {
	                namespaces.forEach(function (ns) { return ns.triggerLeaveAnimation(elm, context, false, true); });
	            }
	            else {
	                _this.clearElementCache(elm);
	            }
	        });
	        // If the child elements were removed along with the parent, their animations might not
	        // have completed. Clear all the elements from the cache so we don't end up with a memory leak.
	        this._engine.afterFlushAnimationsDone(function () { return elements.forEach(function (elm) { return _this.clearElementCache(elm); }); });
	    };
	    AnimationTransitionNamespace.prototype.triggerLeaveAnimation = function (element, context, destroyAfterComplete, defaultToFallback) {
	        var _this = this;
	        var triggerStates = this._engine.statesByElement.get(element);
	        if (triggerStates) {
	            var players_1 = [];
	            Object.keys(triggerStates).forEach(function (triggerName) {
	                // this check is here in the event that an element is removed
	                // twice (both on the host level and the component level)
	                if (_this._triggers[triggerName]) {
	                    var player = _this.trigger(element, triggerName, VOID_VALUE, defaultToFallback);
	                    if (player) {
	                        players_1.push(player);
	                    }
	                }
	            });
	            if (players_1.length) {
	                this._engine.markElementAsRemoved(this.id, element, true, context);
	                if (destroyAfterComplete) {
	                    optimizeGroupPlayer(players_1).onDone(function () { return _this._engine.processLeaveNode(element); });
	                }
	                return true;
	            }
	        }
	        return false;
	    };
	    AnimationTransitionNamespace.prototype.prepareLeaveAnimationListeners = function (element) {
	        var _this = this;
	        var listeners = this._elementListeners.get(element);
	        if (listeners) {
	            var visitedTriggers_1 = new Set();
	            listeners.forEach(function (listener) {
	                var triggerName = listener.name;
	                if (visitedTriggers_1.has(triggerName))
	                    return;
	                visitedTriggers_1.add(triggerName);
	                var trigger = _this._triggers[triggerName];
	                var transition = trigger.fallbackTransition;
	                var elementStates = _this._engine.statesByElement.get(element);
	                var fromState = elementStates[triggerName] || DEFAULT_STATE_VALUE;
	                var toState = new StateValue(VOID_VALUE);
	                var player = new TransitionAnimationPlayer(_this.id, triggerName, element);
	                _this._engine.totalQueuedPlayers++;
	                _this._queue.push({
	                    element: element,
	                    triggerName: triggerName,
	                    transition: transition,
	                    fromState: fromState,
	                    toState: toState,
	                    player: player,
	                    isFallbackTransition: true
	                });
	            });
	        }
	    };
	    AnimationTransitionNamespace.prototype.removeNode = function (element, context) {
	        var _this = this;
	        var engine = this._engine;
	        if (element.childElementCount) {
	            this._signalRemovalForInnerTriggers(element, context);
	        }
	        // this means that a * => VOID animation was detected and kicked off
	        if (this.triggerLeaveAnimation(element, context, true))
	            return;
	        // find the player that is animating and make sure that the
	        // removal is delayed until that player has completed
	        var containsPotentialParentTransition = false;
	        if (engine.totalAnimations) {
	            var currentPlayers = engine.players.length ? engine.playersByQueriedElement.get(element) : [];
	            // when this `if statement` does not continue forward it means that
	            // a previous animation query has selected the current element and
	            // is animating it. In this situation want to continue forwards and
	            // allow the element to be queued up for animation later.
	            if (currentPlayers && currentPlayers.length) {
	                containsPotentialParentTransition = true;
	            }
	            else {
	                var parent_1 = element;
	                while (parent_1 = parent_1.parentNode) {
	                    var triggers = engine.statesByElement.get(parent_1);
	                    if (triggers) {
	                        containsPotentialParentTransition = true;
	                        break;
	                    }
	                }
	            }
	        }
	        // at this stage we know that the element will either get removed
	        // during flush or will be picked up by a parent query. Either way
	        // we need to fire the listeners for this element when it DOES get
	        // removed (once the query parent animation is done or after flush)
	        this.prepareLeaveAnimationListeners(element);
	        // whether or not a parent has an animation we need to delay the deferral of the leave
	        // operation until we have more information (which we do after flush() has been called)
	        if (containsPotentialParentTransition) {
	            engine.markElementAsRemoved(this.id, element, false, context);
	        }
	        else {
	            var removalFlag = element[REMOVAL_FLAG];
	            if (!removalFlag || removalFlag === NULL_REMOVAL_STATE) {
	                // we do this after the flush has occurred such
	                // that the callbacks can be fired
	                engine.afterFlush(function () { return _this.clearElementCache(element); });
	                engine.destroyInnerAnimations(element);
	                engine._onRemovalComplete(element, context);
	            }
	        }
	    };
	    AnimationTransitionNamespace.prototype.insertNode = function (element, parent) {
	        addClass(element, this._hostClassName);
	    };
	    AnimationTransitionNamespace.prototype.drainQueuedTransitions = function (microtaskId) {
	        var _this = this;
	        var instructions = [];
	        this._queue.forEach(function (entry) {
	            var player = entry.player;
	            if (player.destroyed)
	                return;
	            var element = entry.element;
	            var listeners = _this._elementListeners.get(element);
	            if (listeners) {
	                listeners.forEach(function (listener) {
	                    if (listener.name == entry.triggerName) {
	                        var baseEvent = makeAnimationEvent(element, entry.triggerName, entry.fromState.value, entry.toState.value);
	                        baseEvent['_data'] = microtaskId;
	                        listenOnPlayer(entry.player, listener.phase, baseEvent, listener.callback);
	                    }
	                });
	            }
	            if (player.markedForDestroy) {
	                _this._engine.afterFlush(function () {
	                    // now we can destroy the element properly since the event listeners have
	                    // been bound to the player
	                    player.destroy();
	                });
	            }
	            else {
	                instructions.push(entry);
	            }
	        });
	        this._queue = [];
	        return instructions.sort(function (a, b) {
	            // if depCount == 0 them move to front
	            // otherwise if a contains b then move back
	            var d0 = a.transition.ast.depCount;
	            var d1 = b.transition.ast.depCount;
	            if (d0 == 0 || d1 == 0) {
	                return d0 - d1;
	            }
	            return _this._engine.driver.containsElement(a.element, b.element) ? 1 : -1;
	        });
	    };
	    AnimationTransitionNamespace.prototype.destroy = function (context) {
	        this.players.forEach(function (p) { return p.destroy(); });
	        this._signalRemovalForInnerTriggers(this.hostElement, context);
	    };
	    AnimationTransitionNamespace.prototype.elementContainsData = function (element) {
	        var containsData = false;
	        if (this._elementListeners.has(element))
	            containsData = true;
	        containsData =
	            (this._queue.find(function (entry) { return entry.element === element; }) ? true : false) || containsData;
	        return containsData;
	    };
	    return AnimationTransitionNamespace;
	}());
	var TransitionAnimationEngine = /** @class */ (function () {
	    function TransitionAnimationEngine(bodyNode, driver, _normalizer) {
	        this.bodyNode = bodyNode;
	        this.driver = driver;
	        this._normalizer = _normalizer;
	        this.players = [];
	        this.newHostElements = new Map();
	        this.playersByElement = new Map();
	        this.playersByQueriedElement = new Map();
	        this.statesByElement = new Map();
	        this.disabledNodes = new Set();
	        this.totalAnimations = 0;
	        this.totalQueuedPlayers = 0;
	        this._namespaceLookup = {};
	        this._namespaceList = [];
	        this._flushFns = [];
	        this._whenQuietFns = [];
	        this.namespacesByHostElement = new Map();
	        this.collectedEnterElements = [];
	        this.collectedLeaveElements = [];
	        // this method is designed to be overridden by the code that uses this engine
	        this.onRemovalComplete = function (element, context) { };
	    }
	    /** @internal */
	    TransitionAnimationEngine.prototype._onRemovalComplete = function (element, context) {
	        this.onRemovalComplete(element, context);
	    };
	    Object.defineProperty(TransitionAnimationEngine.prototype, "queuedPlayers", {
	        get: function () {
	            var players = [];
	            this._namespaceList.forEach(function (ns) {
	                ns.players.forEach(function (player) {
	                    if (player.queued) {
	                        players.push(player);
	                    }
	                });
	            });
	            return players;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    TransitionAnimationEngine.prototype.createNamespace = function (namespaceId, hostElement) {
	        var ns = new AnimationTransitionNamespace(namespaceId, hostElement, this);
	        if (hostElement.parentNode) {
	            this._balanceNamespaceList(ns, hostElement);
	        }
	        else {
	            // defer this later until flush during when the host element has
	            // been inserted so that we know exactly where to place it in
	            // the namespace list
	            this.newHostElements.set(hostElement, ns);
	            // given that this host element is apart of the animation code, it
	            // may or may not be inserted by a parent node that is an of an
	            // animation renderer type. If this happens then we can still have
	            // access to this item when we query for :enter nodes. If the parent
	            // is a renderer then the set data-structure will normalize the entry
	            this.collectEnterElement(hostElement);
	        }
	        return this._namespaceLookup[namespaceId] = ns;
	    };
	    TransitionAnimationEngine.prototype._balanceNamespaceList = function (ns, hostElement) {
	        var limit = this._namespaceList.length - 1;
	        if (limit >= 0) {
	            var found = false;
	            for (var i = limit; i >= 0; i--) {
	                var nextNamespace = this._namespaceList[i];
	                if (this.driver.containsElement(nextNamespace.hostElement, hostElement)) {
	                    this._namespaceList.splice(i + 1, 0, ns);
	                    found = true;
	                    break;
	                }
	            }
	            if (!found) {
	                this._namespaceList.splice(0, 0, ns);
	            }
	        }
	        else {
	            this._namespaceList.push(ns);
	        }
	        this.namespacesByHostElement.set(hostElement, ns);
	        return ns;
	    };
	    TransitionAnimationEngine.prototype.register = function (namespaceId, hostElement) {
	        var ns = this._namespaceLookup[namespaceId];
	        if (!ns) {
	            ns = this.createNamespace(namespaceId, hostElement);
	        }
	        return ns;
	    };
	    TransitionAnimationEngine.prototype.registerTrigger = function (namespaceId, name, trigger) {
	        var ns = this._namespaceLookup[namespaceId];
	        if (ns && ns.register(name, trigger)) {
	            this.totalAnimations++;
	        }
	    };
	    TransitionAnimationEngine.prototype.destroy = function (namespaceId, context) {
	        var _this = this;
	        if (!namespaceId)
	            return;
	        var ns = this._fetchNamespace(namespaceId);
	        this.afterFlush(function () {
	            _this.namespacesByHostElement.delete(ns.hostElement);
	            delete _this._namespaceLookup[namespaceId];
	            var index = _this._namespaceList.indexOf(ns);
	            if (index >= 0) {
	                _this._namespaceList.splice(index, 1);
	            }
	        });
	        this.afterFlushAnimationsDone(function () { return ns.destroy(context); });
	    };
	    TransitionAnimationEngine.prototype._fetchNamespace = function (id) {
	        return this._namespaceLookup[id];
	    };
	    TransitionAnimationEngine.prototype.fetchNamespacesByElement = function (element) {
	        // normally there should only be one namespace per element, however
	        // if @triggers are placed on both the component element and then
	        // its host element (within the component code) then there will be
	        // two namespaces returned. We use a set here to simply the dedupe
	        // of namespaces incase there are multiple triggers both the elm and host
	        var namespaces = new Set();
	        var elementStates = this.statesByElement.get(element);
	        if (elementStates) {
	            var keys = Object.keys(elementStates);
	            for (var i = 0; i < keys.length; i++) {
	                var nsId = elementStates[keys[i]].namespaceId;
	                if (nsId) {
	                    var ns = this._fetchNamespace(nsId);
	                    if (ns) {
	                        namespaces.add(ns);
	                    }
	                }
	            }
	        }
	        return namespaces;
	    };
	    TransitionAnimationEngine.prototype.trigger = function (namespaceId, element, name, value) {
	        if (isElementNode(element)) {
	            var ns = this._fetchNamespace(namespaceId);
	            if (ns) {
	                ns.trigger(element, name, value);
	                return true;
	            }
	        }
	        return false;
	    };
	    TransitionAnimationEngine.prototype.insertNode = function (namespaceId, element, parent, insertBefore) {
	        if (!isElementNode(element))
	            return;
	        // special case for when an element is removed and reinserted (move operation)
	        // when this occurs we do not want to use the element for deletion later
	        var details = element[REMOVAL_FLAG];
	        if (details && details.setForRemoval) {
	            details.setForRemoval = false;
	            details.setForMove = true;
	            var index = this.collectedLeaveElements.indexOf(element);
	            if (index >= 0) {
	                this.collectedLeaveElements.splice(index, 1);
	            }
	        }
	        // in the event that the namespaceId is blank then the caller
	        // code does not contain any animation code in it, but it is
	        // just being called so that the node is marked as being inserted
	        if (namespaceId) {
	            var ns = this._fetchNamespace(namespaceId);
	            // This if-statement is a workaround for router issue #21947.
	            // The router sometimes hits a race condition where while a route
	            // is being instantiated a new navigation arrives, triggering leave
	            // animation of DOM that has not been fully initialized, until this
	            // is resolved, we need to handle the scenario when DOM is not in a
	            // consistent state during the animation.
	            if (ns) {
	                ns.insertNode(element, parent);
	            }
	        }
	        // only *directives and host elements are inserted before
	        if (insertBefore) {
	            this.collectEnterElement(element);
	        }
	    };
	    TransitionAnimationEngine.prototype.collectEnterElement = function (element) {
	        this.collectedEnterElements.push(element);
	    };
	    TransitionAnimationEngine.prototype.markElementAsDisabled = function (element, value) {
	        if (value) {
	            if (!this.disabledNodes.has(element)) {
	                this.disabledNodes.add(element);
	                addClass(element, DISABLED_CLASSNAME);
	            }
	        }
	        else if (this.disabledNodes.has(element)) {
	            this.disabledNodes.delete(element);
	            removeClass(element, DISABLED_CLASSNAME);
	        }
	    };
	    TransitionAnimationEngine.prototype.removeNode = function (namespaceId, element, isHostElement, context) {
	        if (isElementNode(element)) {
	            var ns = namespaceId ? this._fetchNamespace(namespaceId) : null;
	            if (ns) {
	                ns.removeNode(element, context);
	            }
	            else {
	                this.markElementAsRemoved(namespaceId, element, false, context);
	            }
	            if (isHostElement) {
	                var hostNS = this.namespacesByHostElement.get(element);
	                if (hostNS && hostNS.id !== namespaceId) {
	                    hostNS.removeNode(element, context);
	                }
	            }
	        }
	        else {
	            this._onRemovalComplete(element, context);
	        }
	    };
	    TransitionAnimationEngine.prototype.markElementAsRemoved = function (namespaceId, element, hasAnimation, context) {
	        this.collectedLeaveElements.push(element);
	        element[REMOVAL_FLAG] =
	            { namespaceId: namespaceId, setForRemoval: context, hasAnimation: hasAnimation, removedBeforeQueried: false };
	    };
	    TransitionAnimationEngine.prototype.listen = function (namespaceId, element, name, phase, callback) {
	        if (isElementNode(element)) {
	            return this._fetchNamespace(namespaceId).listen(element, name, phase, callback);
	        }
	        return function () { };
	    };
	    TransitionAnimationEngine.prototype._buildInstruction = function (entry, subTimelines, enterClassName, leaveClassName, skipBuildAst) {
	        return entry.transition.build(this.driver, entry.element, entry.fromState.value, entry.toState.value, enterClassName, leaveClassName, entry.fromState.options, entry.toState.options, subTimelines, skipBuildAst);
	    };
	    TransitionAnimationEngine.prototype.destroyInnerAnimations = function (containerElement) {
	        var _this = this;
	        var elements = this.driver.query(containerElement, NG_TRIGGER_SELECTOR, true);
	        elements.forEach(function (element) { return _this.destroyActiveAnimationsForElement(element); });
	        if (this.playersByQueriedElement.size == 0)
	            return;
	        elements = this.driver.query(containerElement, NG_ANIMATING_SELECTOR, true);
	        elements.forEach(function (element) { return _this.finishActiveQueriedAnimationOnElement(element); });
	    };
	    TransitionAnimationEngine.prototype.destroyActiveAnimationsForElement = function (element) {
	        var players = this.playersByElement.get(element);
	        if (players) {
	            players.forEach(function (player) {
	                // special case for when an element is set for destruction, but hasn't started.
	                // in this situation we want to delay the destruction until the flush occurs
	                // so that any event listeners attached to the player are triggered.
	                if (player.queued) {
	                    player.markedForDestroy = true;
	                }
	                else {
	                    player.destroy();
	                }
	            });
	        }
	    };
	    TransitionAnimationEngine.prototype.finishActiveQueriedAnimationOnElement = function (element) {
	        var players = this.playersByQueriedElement.get(element);
	        if (players) {
	            players.forEach(function (player) { return player.finish(); });
	        }
	    };
	    TransitionAnimationEngine.prototype.whenRenderingDone = function () {
	        var _this = this;
	        return new Promise(function (resolve) {
	            if (_this.players.length) {
	                return optimizeGroupPlayer(_this.players).onDone(function () { return resolve(); });
	            }
	            else {
	                resolve();
	            }
	        });
	    };
	    TransitionAnimationEngine.prototype.processLeaveNode = function (element) {
	        var _this = this;
	        var details = element[REMOVAL_FLAG];
	        if (details && details.setForRemoval) {
	            // this will prevent it from removing it twice
	            element[REMOVAL_FLAG] = NULL_REMOVAL_STATE;
	            if (details.namespaceId) {
	                this.destroyInnerAnimations(element);
	                var ns = this._fetchNamespace(details.namespaceId);
	                if (ns) {
	                    ns.clearElementCache(element);
	                }
	            }
	            this._onRemovalComplete(element, details.setForRemoval);
	        }
	        if (this.driver.matchesElement(element, DISABLED_SELECTOR)) {
	            this.markElementAsDisabled(element, false);
	        }
	        this.driver.query(element, DISABLED_SELECTOR, true).forEach(function (node) {
	            _this.markElementAsDisabled(node, false);
	        });
	    };
	    TransitionAnimationEngine.prototype.flush = function (microtaskId) {
	        var _this = this;
	        if (microtaskId === void 0) { microtaskId = -1; }
	        var players = [];
	        if (this.newHostElements.size) {
	            this.newHostElements.forEach(function (ns, element) { return _this._balanceNamespaceList(ns, element); });
	            this.newHostElements.clear();
	        }
	        if (this.totalAnimations && this.collectedEnterElements.length) {
	            for (var i = 0; i < this.collectedEnterElements.length; i++) {
	                var elm = this.collectedEnterElements[i];
	                addClass(elm, STAR_CLASSNAME);
	            }
	        }
	        if (this._namespaceList.length &&
	            (this.totalQueuedPlayers || this.collectedLeaveElements.length)) {
	            var cleanupFns = [];
	            try {
	                players = this._flushAnimations(cleanupFns, microtaskId);
	            }
	            finally {
	                for (var i = 0; i < cleanupFns.length; i++) {
	                    cleanupFns[i]();
	                }
	            }
	        }
	        else {
	            for (var i = 0; i < this.collectedLeaveElements.length; i++) {
	                var element = this.collectedLeaveElements[i];
	                this.processLeaveNode(element);
	            }
	        }
	        this.totalQueuedPlayers = 0;
	        this.collectedEnterElements.length = 0;
	        this.collectedLeaveElements.length = 0;
	        this._flushFns.forEach(function (fn) { return fn(); });
	        this._flushFns = [];
	        if (this._whenQuietFns.length) {
	            // we move these over to a variable so that
	            // if any new callbacks are registered in another
	            // flush they do not populate the existing set
	            var quietFns_1 = this._whenQuietFns;
	            this._whenQuietFns = [];
	            if (players.length) {
	                optimizeGroupPlayer(players).onDone(function () {
	                    quietFns_1.forEach(function (fn) { return fn(); });
	                });
	            }
	            else {
	                quietFns_1.forEach(function (fn) { return fn(); });
	            }
	        }
	    };
	    TransitionAnimationEngine.prototype.reportError = function (errors) {
	        throw new Error("Unable to process animations due to the following failed trigger transitions\n " + errors.join('\n'));
	    };
	    TransitionAnimationEngine.prototype._flushAnimations = function (cleanupFns, microtaskId) {
	        var _this = this;
	        var subTimelines = new ElementInstructionMap();
	        var skippedPlayers = [];
	        var skippedPlayersMap = new Map();
	        var queuedInstructions = [];
	        var queriedElements = new Map();
	        var allPreStyleElements = new Map();
	        var allPostStyleElements = new Map();
	        var disabledElementsSet = new Set();
	        this.disabledNodes.forEach(function (node) {
	            disabledElementsSet.add(node);
	            var nodesThatAreDisabled = _this.driver.query(node, QUEUED_SELECTOR, true);
	            for (var i_1 = 0; i_1 < nodesThatAreDisabled.length; i_1++) {
	                disabledElementsSet.add(nodesThatAreDisabled[i_1]);
	            }
	        });
	        var bodyNode = this.bodyNode;
	        var allTriggerElements = Array.from(this.statesByElement.keys());
	        var enterNodeMap = buildRootMap(allTriggerElements, this.collectedEnterElements);
	        // this must occur before the instructions are built below such that
	        // the :enter queries match the elements (since the timeline queries
	        // are fired during instruction building).
	        var enterNodeMapIds = new Map();
	        var i = 0;
	        enterNodeMap.forEach(function (nodes, root) {
	            var className = ENTER_CLASSNAME + i++;
	            enterNodeMapIds.set(root, className);
	            nodes.forEach(function (node) { return addClass(node, className); });
	        });
	        var allLeaveNodes = [];
	        var mergedLeaveNodes = new Set();
	        var leaveNodesWithoutAnimations = new Set();
	        for (var i_2 = 0; i_2 < this.collectedLeaveElements.length; i_2++) {
	            var element = this.collectedLeaveElements[i_2];
	            var details = element[REMOVAL_FLAG];
	            if (details && details.setForRemoval) {
	                allLeaveNodes.push(element);
	                mergedLeaveNodes.add(element);
	                if (details.hasAnimation) {
	                    this.driver.query(element, STAR_SELECTOR, true).forEach(function (elm) { return mergedLeaveNodes.add(elm); });
	                }
	                else {
	                    leaveNodesWithoutAnimations.add(element);
	                }
	            }
	        }
	        var leaveNodeMapIds = new Map();
	        var leaveNodeMap = buildRootMap(allTriggerElements, Array.from(mergedLeaveNodes));
	        leaveNodeMap.forEach(function (nodes, root) {
	            var className = LEAVE_CLASSNAME + i++;
	            leaveNodeMapIds.set(root, className);
	            nodes.forEach(function (node) { return addClass(node, className); });
	        });
	        cleanupFns.push(function () {
	            enterNodeMap.forEach(function (nodes, root) {
	                var className = enterNodeMapIds.get(root);
	                nodes.forEach(function (node) { return removeClass(node, className); });
	            });
	            leaveNodeMap.forEach(function (nodes, root) {
	                var className = leaveNodeMapIds.get(root);
	                nodes.forEach(function (node) { return removeClass(node, className); });
	            });
	            allLeaveNodes.forEach(function (element) {
	                _this.processLeaveNode(element);
	            });
	        });
	        var allPlayers = [];
	        var erroneousTransitions = [];
	        for (var i_3 = this._namespaceList.length - 1; i_3 >= 0; i_3--) {
	            var ns = this._namespaceList[i_3];
	            ns.drainQueuedTransitions(microtaskId).forEach(function (entry) {
	                var player = entry.player;
	                var element = entry.element;
	                allPlayers.push(player);
	                if (_this.collectedEnterElements.length) {
	                    var details = element[REMOVAL_FLAG];
	                    // move animations are currently not supported...
	                    if (details && details.setForMove) {
	                        player.destroy();
	                        return;
	                    }
	                }
	                var nodeIsOrphaned = !bodyNode || !_this.driver.containsElement(bodyNode, element);
	                var leaveClassName = leaveNodeMapIds.get(element);
	                var enterClassName = enterNodeMapIds.get(element);
	                var instruction = _this._buildInstruction(entry, subTimelines, enterClassName, leaveClassName, nodeIsOrphaned);
	                if (instruction.errors && instruction.errors.length) {
	                    erroneousTransitions.push(instruction);
	                    return;
	                }
	                // even though the element may not be apart of the DOM, it may
	                // still be added at a later point (due to the mechanics of content
	                // projection and/or dynamic component insertion) therefore it's
	                // important we still style the element.
	                if (nodeIsOrphaned) {
	                    player.onStart(function () { return eraseStyles(element, instruction.fromStyles); });
	                    player.onDestroy(function () { return setStyles(element, instruction.toStyles); });
	                    skippedPlayers.push(player);
	                    return;
	                }
	                // if a unmatched transition is queued to go then it SHOULD NOT render
	                // an animation and cancel the previously running animations.
	                if (entry.isFallbackTransition) {
	                    player.onStart(function () { return eraseStyles(element, instruction.fromStyles); });
	                    player.onDestroy(function () { return setStyles(element, instruction.toStyles); });
	                    skippedPlayers.push(player);
	                    return;
	                }
	                // this means that if a parent animation uses this animation as a sub trigger
	                // then it will instruct the timeline builder to not add a player delay, but
	                // instead stretch the first keyframe gap up until the animation starts. The
	                // reason this is important is to prevent extra initialization styles from being
	                // required by the user in the animation.
	                instruction.timelines.forEach(function (tl) { return tl.stretchStartingKeyframe = true; });
	                subTimelines.append(element, instruction.timelines);
	                var tuple = { instruction: instruction, player: player, element: element };
	                queuedInstructions.push(tuple);
	                instruction.queriedElements.forEach(function (element) { return getOrSetAsInMap(queriedElements, element, []).push(player); });
	                instruction.preStyleProps.forEach(function (stringMap, element) {
	                    var props = Object.keys(stringMap);
	                    if (props.length) {
	                        var setVal_1 = allPreStyleElements.get(element);
	                        if (!setVal_1) {
	                            allPreStyleElements.set(element, setVal_1 = new Set());
	                        }
	                        props.forEach(function (prop) { return setVal_1.add(prop); });
	                    }
	                });
	                instruction.postStyleProps.forEach(function (stringMap, element) {
	                    var props = Object.keys(stringMap);
	                    var setVal = allPostStyleElements.get(element);
	                    if (!setVal) {
	                        allPostStyleElements.set(element, setVal = new Set());
	                    }
	                    props.forEach(function (prop) { return setVal.add(prop); });
	                });
	            });
	        }
	        if (erroneousTransitions.length) {
	            var errors_1 = [];
	            erroneousTransitions.forEach(function (instruction) {
	                errors_1.push("@" + instruction.triggerName + " has failed due to:\n");
	                instruction.errors.forEach(function (error) { return errors_1.push("- " + error + "\n"); });
	            });
	            allPlayers.forEach(function (player) { return player.destroy(); });
	            this.reportError(errors_1);
	        }
	        var allPreviousPlayersMap = new Map();
	        // this map works to tell which element in the DOM tree is contained by
	        // which animation. Further down below this map will get populated once
	        // the players are built and in doing so it can efficiently figure out
	        // if a sub player is skipped due to a parent player having priority.
	        var animationElementMap = new Map();
	        queuedInstructions.forEach(function (entry) {
	            var element = entry.element;
	            if (subTimelines.has(element)) {
	                animationElementMap.set(element, element);
	                _this._beforeAnimationBuild(entry.player.namespaceId, entry.instruction, allPreviousPlayersMap);
	            }
	        });
	        skippedPlayers.forEach(function (player) {
	            var element = player.element;
	            var previousPlayers = _this._getPreviousPlayers(element, false, player.namespaceId, player.triggerName, null);
	            previousPlayers.forEach(function (prevPlayer) {
	                getOrSetAsInMap(allPreviousPlayersMap, element, []).push(prevPlayer);
	                prevPlayer.destroy();
	            });
	        });
	        // this is a special case for nodes that will be removed (either by)
	        // having their own leave animations or by being queried in a container
	        // that will be removed once a parent animation is complete. The idea
	        // here is that * styles must be identical to ! styles because of
	        // backwards compatibility (* is also filled in by default in many places).
	        // Otherwise * styles will return an empty value or auto since the element
	        // that is being getComputedStyle'd will not be visible (since * = destination)
	        var replaceNodes = allLeaveNodes.filter(function (node) {
	            return replacePostStylesAsPre(node, allPreStyleElements, allPostStyleElements);
	        });
	        // POST STAGE: fill the * styles
	        var postStylesMap = new Map();
	        var allLeaveQueriedNodes = cloakAndComputeStyles(postStylesMap, this.driver, leaveNodesWithoutAnimations, allPostStyleElements, AUTO_STYLE);
	        allLeaveQueriedNodes.forEach(function (node) {
	            if (replacePostStylesAsPre(node, allPreStyleElements, allPostStyleElements)) {
	                replaceNodes.push(node);
	            }
	        });
	        // PRE STAGE: fill the ! styles
	        var preStylesMap = new Map();
	        enterNodeMap.forEach(function (nodes, root) {
	            cloakAndComputeStyles(preStylesMap, _this.driver, new Set(nodes), allPreStyleElements, ÉµPRE_STYLE);
	        });
	        replaceNodes.forEach(function (node) {
	            var post = postStylesMap.get(node);
	            var pre = preStylesMap.get(node);
	            postStylesMap.set(node, __assign(__assign({}, post), pre));
	        });
	        var rootPlayers = [];
	        var subPlayers = [];
	        var NO_PARENT_ANIMATION_ELEMENT_DETECTED = {};
	        queuedInstructions.forEach(function (entry) {
	            var element = entry.element, player = entry.player, instruction = entry.instruction;
	            // this means that it was never consumed by a parent animation which
	            // means that it is independent and therefore should be set for animation
	            if (subTimelines.has(element)) {
	                if (disabledElementsSet.has(element)) {
	                    player.onDestroy(function () { return setStyles(element, instruction.toStyles); });
	                    player.disabled = true;
	                    player.overrideTotalTime(instruction.totalTime);
	                    skippedPlayers.push(player);
	                    return;
	                }
	                // this will flow up the DOM and query the map to figure out
	                // if a parent animation has priority over it. In the situation
	                // that a parent is detected then it will cancel the loop. If
	                // nothing is detected, or it takes a few hops to find a parent,
	                // then it will fill in the missing nodes and signal them as having
	                // a detected parent (or a NO_PARENT value via a special constant).
	                var parentWithAnimation_1 = NO_PARENT_ANIMATION_ELEMENT_DETECTED;
	                if (animationElementMap.size > 1) {
	                    var elm = element;
	                    var parentsToAdd = [];
	                    while (elm = elm.parentNode) {
	                        var detectedParent = animationElementMap.get(elm);
	                        if (detectedParent) {
	                            parentWithAnimation_1 = detectedParent;
	                            break;
	                        }
	                        parentsToAdd.push(elm);
	                    }
	                    parentsToAdd.forEach(function (parent) { return animationElementMap.set(parent, parentWithAnimation_1); });
	                }
	                var innerPlayer = _this._buildAnimation(player.namespaceId, instruction, allPreviousPlayersMap, skippedPlayersMap, preStylesMap, postStylesMap);
	                player.setRealPlayer(innerPlayer);
	                if (parentWithAnimation_1 === NO_PARENT_ANIMATION_ELEMENT_DETECTED) {
	                    rootPlayers.push(player);
	                }
	                else {
	                    var parentPlayers = _this.playersByElement.get(parentWithAnimation_1);
	                    if (parentPlayers && parentPlayers.length) {
	                        player.parentPlayer = optimizeGroupPlayer(parentPlayers);
	                    }
	                    skippedPlayers.push(player);
	                }
	            }
	            else {
	                eraseStyles(element, instruction.fromStyles);
	                player.onDestroy(function () { return setStyles(element, instruction.toStyles); });
	                // there still might be a ancestor player animating this
	                // element therefore we will still add it as a sub player
	                // even if its animation may be disabled
	                subPlayers.push(player);
	                if (disabledElementsSet.has(element)) {
	                    skippedPlayers.push(player);
	                }
	            }
	        });
	        // find all of the sub players' corresponding inner animation player
	        subPlayers.forEach(function (player) {
	            // even if any players are not found for a sub animation then it
	            // will still complete itself after the next tick since it's Noop
	            var playersForElement = skippedPlayersMap.get(player.element);
	            if (playersForElement && playersForElement.length) {
	                var innerPlayer = optimizeGroupPlayer(playersForElement);
	                player.setRealPlayer(innerPlayer);
	            }
	        });
	        // the reason why we don't actually play the animation is
	        // because all that a skipped player is designed to do is to
	        // fire the start/done transition callback events
	        skippedPlayers.forEach(function (player) {
	            if (player.parentPlayer) {
	                player.syncPlayerEvents(player.parentPlayer);
	            }
	            else {
	                player.destroy();
	            }
	        });
	        // run through all of the queued removals and see if they
	        // were picked up by a query. If not then perform the removal
	        // operation right away unless a parent animation is ongoing.
	        for (var i_4 = 0; i_4 < allLeaveNodes.length; i_4++) {
	            var element = allLeaveNodes[i_4];
	            var details = element[REMOVAL_FLAG];
	            removeClass(element, LEAVE_CLASSNAME);
	            // this means the element has a removal animation that is being
	            // taken care of and therefore the inner elements will hang around
	            // until that animation is over (or the parent queried animation)
	            if (details && details.hasAnimation)
	                continue;
	            var players = [];
	            // if this element is queried or if it contains queried children
	            // then we want for the element not to be removed from the page
	            // until the queried animations have finished
	            if (queriedElements.size) {
	                var queriedPlayerResults = queriedElements.get(element);
	                if (queriedPlayerResults && queriedPlayerResults.length) {
	                    players.push.apply(players, __spread(queriedPlayerResults));
	                }
	                var queriedInnerElements = this.driver.query(element, NG_ANIMATING_SELECTOR, true);
	                for (var j = 0; j < queriedInnerElements.length; j++) {
	                    var queriedPlayers = queriedElements.get(queriedInnerElements[j]);
	                    if (queriedPlayers && queriedPlayers.length) {
	                        players.push.apply(players, __spread(queriedPlayers));
	                    }
	                }
	            }
	            var activePlayers = players.filter(function (p) { return !p.destroyed; });
	            if (activePlayers.length) {
	                removeNodesAfterAnimationDone(this, element, activePlayers);
	            }
	            else {
	                this.processLeaveNode(element);
	            }
	        }
	        // this is required so the cleanup method doesn't remove them
	        allLeaveNodes.length = 0;
	        rootPlayers.forEach(function (player) {
	            _this.players.push(player);
	            player.onDone(function () {
	                player.destroy();
	                var index = _this.players.indexOf(player);
	                _this.players.splice(index, 1);
	            });
	            player.play();
	        });
	        return rootPlayers;
	    };
	    TransitionAnimationEngine.prototype.elementContainsData = function (namespaceId, element) {
	        var containsData = false;
	        var details = element[REMOVAL_FLAG];
	        if (details && details.setForRemoval)
	            containsData = true;
	        if (this.playersByElement.has(element))
	            containsData = true;
	        if (this.playersByQueriedElement.has(element))
	            containsData = true;
	        if (this.statesByElement.has(element))
	            containsData = true;
	        return this._fetchNamespace(namespaceId).elementContainsData(element) || containsData;
	    };
	    TransitionAnimationEngine.prototype.afterFlush = function (callback) {
	        this._flushFns.push(callback);
	    };
	    TransitionAnimationEngine.prototype.afterFlushAnimationsDone = function (callback) {
	        this._whenQuietFns.push(callback);
	    };
	    TransitionAnimationEngine.prototype._getPreviousPlayers = function (element, isQueriedElement, namespaceId, triggerName, toStateValue) {
	        var players = [];
	        if (isQueriedElement) {
	            var queriedElementPlayers = this.playersByQueriedElement.get(element);
	            if (queriedElementPlayers) {
	                players = queriedElementPlayers;
	            }
	        }
	        else {
	            var elementPlayers = this.playersByElement.get(element);
	            if (elementPlayers) {
	                var isRemovalAnimation_1 = !toStateValue || toStateValue == VOID_VALUE;
	                elementPlayers.forEach(function (player) {
	                    if (player.queued)
	                        return;
	                    if (!isRemovalAnimation_1 && player.triggerName != triggerName)
	                        return;
	                    players.push(player);
	                });
	            }
	        }
	        if (namespaceId || triggerName) {
	            players = players.filter(function (player) {
	                if (namespaceId && namespaceId != player.namespaceId)
	                    return false;
	                if (triggerName && triggerName != player.triggerName)
	                    return false;
	                return true;
	            });
	        }
	        return players;
	    };
	    TransitionAnimationEngine.prototype._beforeAnimationBuild = function (namespaceId, instruction, allPreviousPlayersMap) {
	        var e_1, _a;
	        var triggerName = instruction.triggerName;
	        var rootElement = instruction.element;
	        // when a removal animation occurs, ALL previous players are collected
	        // and destroyed (even if they are outside of the current namespace)
	        var targetNameSpaceId = instruction.isRemovalTransition ? undefined : namespaceId;
	        var targetTriggerName = instruction.isRemovalTransition ? undefined : triggerName;
	        var _loop_1 = function (timelineInstruction) {
	            var element = timelineInstruction.element;
	            var isQueriedElement = element !== rootElement;
	            var players = getOrSetAsInMap(allPreviousPlayersMap, element, []);
	            var previousPlayers = this_1._getPreviousPlayers(element, isQueriedElement, targetNameSpaceId, targetTriggerName, instruction.toState);
	            previousPlayers.forEach(function (player) {
	                var realPlayer = player.getRealPlayer();
	                if (realPlayer.beforeDestroy) {
	                    realPlayer.beforeDestroy();
	                }
	                player.destroy();
	                players.push(player);
	            });
	        };
	        var this_1 = this;
	        try {
	            for (var _b = __values(instruction.timelines), _c = _b.next(); !_c.done; _c = _b.next()) {
	                var timelineInstruction = _c.value;
	                _loop_1(timelineInstruction);
	            }
	        }
	        catch (e_1_1) { e_1 = { error: e_1_1 }; }
	        finally {
	            try {
	                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
	            }
	            finally { if (e_1) throw e_1.error; }
	        }
	        // this needs to be done so that the PRE/POST styles can be
	        // computed properly without interfering with the previous animation
	        eraseStyles(rootElement, instruction.fromStyles);
	    };
	    TransitionAnimationEngine.prototype._buildAnimation = function (namespaceId, instruction, allPreviousPlayersMap, skippedPlayersMap, preStylesMap, postStylesMap) {
	        var _this = this;
	        var triggerName = instruction.triggerName;
	        var rootElement = instruction.element;
	        // we first run this so that the previous animation player
	        // data can be passed into the successive animation players
	        var allQueriedPlayers = [];
	        var allConsumedElements = new Set();
	        var allSubElements = new Set();
	        var allNewPlayers = instruction.timelines.map(function (timelineInstruction) {
	            var element = timelineInstruction.element;
	            allConsumedElements.add(element);
	            // FIXME (matsko): make sure to-be-removed animations are removed properly
	            var details = element[REMOVAL_FLAG];
	            if (details && details.removedBeforeQueried)
	                return new NoopAnimationPlayer(timelineInstruction.duration, timelineInstruction.delay);
	            var isQueriedElement = element !== rootElement;
	            var previousPlayers = flattenGroupPlayers((allPreviousPlayersMap.get(element) || EMPTY_PLAYER_ARRAY)
	                .map(function (p) { return p.getRealPlayer(); }))
	                .filter(function (p) {
	                // the `element` is not apart of the AnimationPlayer definition, but
	                // Mock/WebAnimations
	                // use the element within their implementation. This will be added in Angular5 to
	                // AnimationPlayer
	                var pp = p;
	                return pp.element ? pp.element === element : false;
	            });
	            var preStyles = preStylesMap.get(element);
	            var postStyles = postStylesMap.get(element);
	            var keyframes = normalizeKeyframes(_this.driver, _this._normalizer, element, timelineInstruction.keyframes, preStyles, postStyles);
	            var player = _this._buildPlayer(timelineInstruction, keyframes, previousPlayers);
	            // this means that this particular player belongs to a sub trigger. It is
	            // important that we match this player up with the corresponding (@trigger.listener)
	            if (timelineInstruction.subTimeline && skippedPlayersMap) {
	                allSubElements.add(element);
	            }
	            if (isQueriedElement) {
	                var wrappedPlayer = new TransitionAnimationPlayer(namespaceId, triggerName, element);
	                wrappedPlayer.setRealPlayer(player);
	                allQueriedPlayers.push(wrappedPlayer);
	            }
	            return player;
	        });
	        allQueriedPlayers.forEach(function (player) {
	            getOrSetAsInMap(_this.playersByQueriedElement, player.element, []).push(player);
	            player.onDone(function () { return deleteOrUnsetInMap(_this.playersByQueriedElement, player.element, player); });
	        });
	        allConsumedElements.forEach(function (element) { return addClass(element, NG_ANIMATING_CLASSNAME); });
	        var player = optimizeGroupPlayer(allNewPlayers);
	        player.onDestroy(function () {
	            allConsumedElements.forEach(function (element) { return removeClass(element, NG_ANIMATING_CLASSNAME); });
	            setStyles(rootElement, instruction.toStyles);
	        });
	        // this basically makes all of the callbacks for sub element animations
	        // be dependent on the upper players for when they finish
	        allSubElements.forEach(function (element) {
	            getOrSetAsInMap(skippedPlayersMap, element, []).push(player);
	        });
	        return player;
	    };
	    TransitionAnimationEngine.prototype._buildPlayer = function (instruction, keyframes, previousPlayers) {
	        if (keyframes.length > 0) {
	            return this.driver.animate(instruction.element, keyframes, instruction.duration, instruction.delay, instruction.easing, previousPlayers);
	        }
	        // special case for when an empty transition|definition is provided
	        // ... there is no point in rendering an empty animation
	        return new NoopAnimationPlayer(instruction.duration, instruction.delay);
	    };
	    return TransitionAnimationEngine;
	}());
	var TransitionAnimationPlayer = /** @class */ (function () {
	    function TransitionAnimationPlayer(namespaceId, triggerName, element) {
	        this.namespaceId = namespaceId;
	        this.triggerName = triggerName;
	        this.element = element;
	        this._player = new NoopAnimationPlayer();
	        this._containsRealPlayer = false;
	        this._queuedCallbacks = {};
	        this.destroyed = false;
	        this.markedForDestroy = false;
	        this.disabled = false;
	        this.queued = true;
	        this.totalTime = 0;
	    }
	    TransitionAnimationPlayer.prototype.setRealPlayer = function (player) {
	        var _this = this;
	        if (this._containsRealPlayer)
	            return;
	        this._player = player;
	        Object.keys(this._queuedCallbacks).forEach(function (phase) {
	            _this._queuedCallbacks[phase].forEach(function (callback) { return listenOnPlayer(player, phase, undefined, callback); });
	        });
	        this._queuedCallbacks = {};
	        this._containsRealPlayer = true;
	        this.overrideTotalTime(player.totalTime);
	        this.queued = false;
	    };
	    TransitionAnimationPlayer.prototype.getRealPlayer = function () {
	        return this._player;
	    };
	    TransitionAnimationPlayer.prototype.overrideTotalTime = function (totalTime) {
	        this.totalTime = totalTime;
	    };
	    TransitionAnimationPlayer.prototype.syncPlayerEvents = function (player) {
	        var _this = this;
	        var p = this._player;
	        if (p.triggerCallback) {
	            player.onStart(function () { return p.triggerCallback('start'); });
	        }
	        player.onDone(function () { return _this.finish(); });
	        player.onDestroy(function () { return _this.destroy(); });
	    };
	    TransitionAnimationPlayer.prototype._queueEvent = function (name, callback) {
	        getOrSetAsInMap(this._queuedCallbacks, name, []).push(callback);
	    };
	    TransitionAnimationPlayer.prototype.onDone = function (fn) {
	        if (this.queued) {
	            this._queueEvent('done', fn);
	        }
	        this._player.onDone(fn);
	    };
	    TransitionAnimationPlayer.prototype.onStart = function (fn) {
	        if (this.queued) {
	            this._queueEvent('start', fn);
	        }
	        this._player.onStart(fn);
	    };
	    TransitionAnimationPlayer.prototype.onDestroy = function (fn) {
	        if (this.queued) {
	            this._queueEvent('destroy', fn);
	        }
	        this._player.onDestroy(fn);
	    };
	    TransitionAnimationPlayer.prototype.init = function () {
	        this._player.init();
	    };
	    TransitionAnimationPlayer.prototype.hasStarted = function () {
	        return this.queued ? false : this._player.hasStarted();
	    };
	    TransitionAnimationPlayer.prototype.play = function () {
	        !this.queued && this._player.play();
	    };
	    TransitionAnimationPlayer.prototype.pause = function () {
	        !this.queued && this._player.pause();
	    };
	    TransitionAnimationPlayer.prototype.restart = function () {
	        !this.queued && this._player.restart();
	    };
	    TransitionAnimationPlayer.prototype.finish = function () {
	        this._player.finish();
	    };
	    TransitionAnimationPlayer.prototype.destroy = function () {
	        this.destroyed = true;
	        this._player.destroy();
	    };
	    TransitionAnimationPlayer.prototype.reset = function () {
	        !this.queued && this._player.reset();
	    };
	    TransitionAnimationPlayer.prototype.setPosition = function (p) {
	        if (!this.queued) {
	            this._player.setPosition(p);
	        }
	    };
	    TransitionAnimationPlayer.prototype.getPosition = function () {
	        return this.queued ? 0 : this._player.getPosition();
	    };
	    /** @internal */
	    TransitionAnimationPlayer.prototype.triggerCallback = function (phaseName) {
	        var p = this._player;
	        if (p.triggerCallback) {
	            p.triggerCallback(phaseName);
	        }
	    };
	    return TransitionAnimationPlayer;
	}());
	function deleteOrUnsetInMap(map, key, value) {
	    var currentValues;
	    if (map instanceof Map) {
	        currentValues = map.get(key);
	        if (currentValues) {
	            if (currentValues.length) {
	                var index = currentValues.indexOf(value);
	                currentValues.splice(index, 1);
	            }
	            if (currentValues.length == 0) {
	                map.delete(key);
	            }
	        }
	    }
	    else {
	        currentValues = map[key];
	        if (currentValues) {
	            if (currentValues.length) {
	                var index = currentValues.indexOf(value);
	                currentValues.splice(index, 1);
	            }
	            if (currentValues.length == 0) {
	                delete map[key];
	            }
	        }
	    }
	    return currentValues;
	}
	function normalizeTriggerValue(value) {
	    // we use `!= null` here because it's the most simple
	    // way to test against a "falsy" value without mixing
	    // in empty strings or a zero value. DO NOT OPTIMIZE.
	    return value != null ? value : null;
	}
	function isElementNode(node) {
	    return node && node['nodeType'] === 1;
	}
	function isTriggerEventValid(eventName) {
	    return eventName == 'start' || eventName == 'done';
	}
	function cloakElement(element, value) {
	    var oldValue = element.style.display;
	    element.style.display = value != null ? value : 'none';
	    return oldValue;
	}
	function cloakAndComputeStyles(valuesMap, driver, elements, elementPropsMap, defaultStyle) {
	    var cloakVals = [];
	    elements.forEach(function (element) { return cloakVals.push(cloakElement(element)); });
	    var failedElements = [];
	    elementPropsMap.forEach(function (props, element) {
	        var styles = {};
	        props.forEach(function (prop) {
	            var value = styles[prop] = driver.computeStyle(element, prop, defaultStyle);
	            // there is no easy way to detect this because a sub element could be removed
	            // by a parent animation element being detached.
	            if (!value || value.length == 0) {
	                element[REMOVAL_FLAG] = NULL_REMOVED_QUERIED_STATE;
	                failedElements.push(element);
	            }
	        });
	        valuesMap.set(element, styles);
	    });
	    // we use a index variable here since Set.forEach(a, i) does not return
	    // an index value for the closure (but instead just the value)
	    var i = 0;
	    elements.forEach(function (element) { return cloakElement(element, cloakVals[i++]); });
	    return failedElements;
	}
	/*
	Since the Angular renderer code will return a collection of inserted
	nodes in all areas of a DOM tree, it's up to this algorithm to figure
	out which nodes are roots for each animation @trigger.

	By placing each inserted node into a Set and traversing upwards, it
	is possible to find the @trigger elements and well any direct *star
	insertion nodes, if a @trigger root is found then the enter element
	is placed into the Map[@trigger] spot.
	 */
	function buildRootMap(roots, nodes) {
	    var rootMap = new Map();
	    roots.forEach(function (root) { return rootMap.set(root, []); });
	    if (nodes.length == 0)
	        return rootMap;
	    var NULL_NODE = 1;
	    var nodeSet = new Set(nodes);
	    var localRootMap = new Map();
	    function getRoot(node) {
	        if (!node)
	            return NULL_NODE;
	        var root = localRootMap.get(node);
	        if (root)
	            return root;
	        var parent = node.parentNode;
	        if (rootMap.has(parent)) { // ngIf inside @trigger
	            root = parent;
	        }
	        else if (nodeSet.has(parent)) { // ngIf inside ngIf
	            root = NULL_NODE;
	        }
	        else { // recurse upwards
	            root = getRoot(parent);
	        }
	        localRootMap.set(node, root);
	        return root;
	    }
	    nodes.forEach(function (node) {
	        var root = getRoot(node);
	        if (root !== NULL_NODE) {
	            rootMap.get(root).push(node);
	        }
	    });
	    return rootMap;
	}
	var CLASSES_CACHE_KEY = '$$classes';
	function addClass(element, className) {
	    if (element.classList) {
	        element.classList.add(className);
	    }
	    else {
	        var classes = element[CLASSES_CACHE_KEY];
	        if (!classes) {
	            classes = element[CLASSES_CACHE_KEY] = {};
	        }
	        classes[className] = true;
	    }
	}
	function removeClass(element, className) {
	    if (element.classList) {
	        element.classList.remove(className);
	    }
	    else {
	        var classes = element[CLASSES_CACHE_KEY];
	        if (classes) {
	            delete classes[className];
	        }
	    }
	}
	function removeNodesAfterAnimationDone(engine, element, players) {
	    optimizeGroupPlayer(players).onDone(function () { return engine.processLeaveNode(element); });
	}
	function flattenGroupPlayers(players) {
	    var finalPlayers = [];
	    _flattenGroupPlayersRecur(players, finalPlayers);
	    return finalPlayers;
	}
	function _flattenGroupPlayersRecur(players, finalPlayers) {
	    for (var i = 0; i < players.length; i++) {
	        var player = players[i];
	        if (player instanceof AnimationGroupPlayer) {
	            _flattenGroupPlayersRecur(player.players, finalPlayers);
	        }
	        else {
	            finalPlayers.push(player);
	        }
	    }
	}
	function objEquals(a, b) {
	    var k1 = Object.keys(a);
	    var k2 = Object.keys(b);
	    if (k1.length != k2.length)
	        return false;
	    for (var i = 0; i < k1.length; i++) {
	        var prop = k1[i];
	        if (!b.hasOwnProperty(prop) || a[prop] !== b[prop])
	            return false;
	    }
	    return true;
	}
	function replacePostStylesAsPre(element, allPreStyleElements, allPostStyleElements) {
	    var postEntry = allPostStyleElements.get(element);
	    if (!postEntry)
	        return false;
	    var preEntry = allPreStyleElements.get(element);
	    if (preEntry) {
	        postEntry.forEach(function (data) { return preEntry.add(data); });
	    }
	    else {
	        allPreStyleElements.set(element, postEntry);
	    }
	    allPostStyleElements.delete(element);
	    return true;
	}

	var AnimationEngine = /** @class */ (function () {
	    function AnimationEngine(bodyNode, _driver, normalizer) {
	        var _this = this;
	        this.bodyNode = bodyNode;
	        this._driver = _driver;
	        this._triggerCache = {};
	        // this method is designed to be overridden by the code that uses this engine
	        this.onRemovalComplete = function (element, context) { };
	        this._transitionEngine = new TransitionAnimationEngine(bodyNode, _driver, normalizer);
	        this._timelineEngine = new TimelineAnimationEngine(bodyNode, _driver, normalizer);
	        this._transitionEngine.onRemovalComplete = function (element, context) {
	            return _this.onRemovalComplete(element, context);
	        };
	    }
	    AnimationEngine.prototype.registerTrigger = function (componentId, namespaceId, hostElement, name, metadata) {
	        var cacheKey = componentId + '-' + name;
	        var trigger = this._triggerCache[cacheKey];
	        if (!trigger) {
	            var errors = [];
	            var ast = buildAnimationAst(this._driver, metadata, errors);
	            if (errors.length) {
	                throw new Error("The animation trigger \"" + name + "\" has failed to build due to the following errors:\n - " + errors.join('\n - '));
	            }
	            trigger = buildTrigger(name, ast);
	            this._triggerCache[cacheKey] = trigger;
	        }
	        this._transitionEngine.registerTrigger(namespaceId, name, trigger);
	    };
	    AnimationEngine.prototype.register = function (namespaceId, hostElement) {
	        this._transitionEngine.register(namespaceId, hostElement);
	    };
	    AnimationEngine.prototype.destroy = function (namespaceId, context) {
	        this._transitionEngine.destroy(namespaceId, context);
	    };
	    AnimationEngine.prototype.onInsert = function (namespaceId, element, parent, insertBefore) {
	        this._transitionEngine.insertNode(namespaceId, element, parent, insertBefore);
	    };
	    AnimationEngine.prototype.onRemove = function (namespaceId, element, context, isHostElement) {
	        this._transitionEngine.removeNode(namespaceId, element, isHostElement || false, context);
	    };
	    AnimationEngine.prototype.disableAnimations = function (element, disable) {
	        this._transitionEngine.markElementAsDisabled(element, disable);
	    };
	    AnimationEngine.prototype.process = function (namespaceId, element, property, value) {
	        if (property.charAt(0) == '@') {
	            var _a = __read(parseTimelineCommand(property), 2), id = _a[0], action = _a[1];
	            var args = value;
	            this._timelineEngine.command(id, element, action, args);
	        }
	        else {
	            this._transitionEngine.trigger(namespaceId, element, property, value);
	        }
	    };
	    AnimationEngine.prototype.listen = function (namespaceId, element, eventName, eventPhase, callback) {
	        // @@listen
	        if (eventName.charAt(0) == '@') {
	            var _a = __read(parseTimelineCommand(eventName), 2), id = _a[0], action = _a[1];
	            return this._timelineEngine.listen(id, element, action, callback);
	        }
	        return this._transitionEngine.listen(namespaceId, element, eventName, eventPhase, callback);
	    };
	    AnimationEngine.prototype.flush = function (microtaskId) {
	        if (microtaskId === void 0) { microtaskId = -1; }
	        this._transitionEngine.flush(microtaskId);
	    };
	    Object.defineProperty(AnimationEngine.prototype, "players", {
	        get: function () {
	            return this._transitionEngine.players
	                .concat(this._timelineEngine.players);
	        },
	        enumerable: true,
	        configurable: true
	    });
	    AnimationEngine.prototype.whenRenderingDone = function () {
	        return this._transitionEngine.whenRenderingDone();
	    };
	    return AnimationEngine;
	}());

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * Returns an instance of `SpecialCasedStyles` if and when any special (non animateable) styles are
	 * detected.
	 *
	 * In CSS there exist properties that cannot be animated within a keyframe animation
	 * (whether it be via CSS keyframes or web-animations) and the animation implementation
	 * will ignore them. This function is designed to detect those special cased styles and
	 * return a container that will be executed at the start and end of the animation.
	 *
	 * @returns an instance of `SpecialCasedStyles` if any special styles are detected otherwise `null`
	 */
	function packageNonAnimatableStyles(element, styles) {
	    var startStyles = null;
	    var endStyles = null;
	    if (Array.isArray(styles) && styles.length) {
	        startStyles = filterNonAnimatableStyles(styles[0]);
	        if (styles.length > 1) {
	            endStyles = filterNonAnimatableStyles(styles[styles.length - 1]);
	        }
	    }
	    else if (styles) {
	        startStyles = filterNonAnimatableStyles(styles);
	    }
	    return (startStyles || endStyles) ? new SpecialCasedStyles(element, startStyles, endStyles) :
	        null;
	}
	/**
	 * Designed to be executed during a keyframe-based animation to apply any special-cased styles.
	 *
	 * When started (when the `start()` method is run) then the provided `startStyles`
	 * will be applied. When finished (when the `finish()` method is called) the
	 * `endStyles` will be applied as well any any starting styles. Finally when
	 * `destroy()` is called then all styles will be removed.
	 */
	var SpecialCasedStyles = /** @class */ (function () {
	    function SpecialCasedStyles(_element, _startStyles, _endStyles) {
	        this._element = _element;
	        this._startStyles = _startStyles;
	        this._endStyles = _endStyles;
	        this._state = 0 /* Pending */;
	        var initialStyles = SpecialCasedStyles.initialStylesByElement.get(_element);
	        if (!initialStyles) {
	            SpecialCasedStyles.initialStylesByElement.set(_element, initialStyles = {});
	        }
	        this._initialStyles = initialStyles;
	    }
	    SpecialCasedStyles.prototype.start = function () {
	        if (this._state < 1 /* Started */) {
	            if (this._startStyles) {
	                setStyles(this._element, this._startStyles, this._initialStyles);
	            }
	            this._state = 1 /* Started */;
	        }
	    };
	    SpecialCasedStyles.prototype.finish = function () {
	        this.start();
	        if (this._state < 2 /* Finished */) {
	            setStyles(this._element, this._initialStyles);
	            if (this._endStyles) {
	                setStyles(this._element, this._endStyles);
	                this._endStyles = null;
	            }
	            this._state = 1 /* Started */;
	        }
	    };
	    SpecialCasedStyles.prototype.destroy = function () {
	        this.finish();
	        if (this._state < 3 /* Destroyed */) {
	            SpecialCasedStyles.initialStylesByElement.delete(this._element);
	            if (this._startStyles) {
	                eraseStyles(this._element, this._startStyles);
	                this._endStyles = null;
	            }
	            if (this._endStyles) {
	                eraseStyles(this._element, this._endStyles);
	                this._endStyles = null;
	            }
	            setStyles(this._element, this._initialStyles);
	            this._state = 3 /* Destroyed */;
	        }
	    };
	    SpecialCasedStyles.initialStylesByElement = new WeakMap();
	    return SpecialCasedStyles;
	}());
	function filterNonAnimatableStyles(styles) {
	    var result = null;
	    var props = Object.keys(styles);
	    for (var i = 0; i < props.length; i++) {
	        var prop = props[i];
	        if (isNonAnimatableStyle(prop)) {
	            result = result || {};
	            result[prop] = styles[prop];
	        }
	    }
	    return result;
	}
	function isNonAnimatableStyle(prop) {
	    return prop === 'display' || prop === 'position';
	}

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	var ELAPSED_TIME_MAX_DECIMAL_PLACES = 3;
	var ANIMATION_PROP = 'animation';
	var ANIMATIONEND_EVENT = 'animationend';
	var ONE_SECOND$1 = 1000;
	var ElementAnimationStyleHandler = /** @class */ (function () {
	    function ElementAnimationStyleHandler(_element, _name, _duration, _delay, _easing, _fillMode, _onDoneFn) {
	        var _this = this;
	        this._element = _element;
	        this._name = _name;
	        this._duration = _duration;
	        this._delay = _delay;
	        this._easing = _easing;
	        this._fillMode = _fillMode;
	        this._onDoneFn = _onDoneFn;
	        this._finished = false;
	        this._destroyed = false;
	        this._startTime = 0;
	        this._position = 0;
	        this._eventFn = function (e) { return _this._handleCallback(e); };
	    }
	    ElementAnimationStyleHandler.prototype.apply = function () {
	        applyKeyframeAnimation(this._element, this._duration + "ms " + this._easing + " " + this._delay + "ms 1 normal " + this._fillMode + " " + this._name);
	        addRemoveAnimationEvent(this._element, this._eventFn, false);
	        this._startTime = Date.now();
	    };
	    ElementAnimationStyleHandler.prototype.pause = function () {
	        playPauseAnimation(this._element, this._name, 'paused');
	    };
	    ElementAnimationStyleHandler.prototype.resume = function () {
	        playPauseAnimation(this._element, this._name, 'running');
	    };
	    ElementAnimationStyleHandler.prototype.setPosition = function (position) {
	        var index = findIndexForAnimation(this._element, this._name);
	        this._position = position * this._duration;
	        setAnimationStyle(this._element, 'Delay', "-" + this._position + "ms", index);
	    };
	    ElementAnimationStyleHandler.prototype.getPosition = function () {
	        return this._position;
	    };
	    ElementAnimationStyleHandler.prototype._handleCallback = function (event) {
	        var timestamp = event._ngTestManualTimestamp || Date.now();
	        var elapsedTime = parseFloat(event.elapsedTime.toFixed(ELAPSED_TIME_MAX_DECIMAL_PLACES)) * ONE_SECOND$1;
	        if (event.animationName == this._name &&
	            Math.max(timestamp - this._startTime, 0) >= this._delay && elapsedTime >= this._duration) {
	            this.finish();
	        }
	    };
	    ElementAnimationStyleHandler.prototype.finish = function () {
	        if (this._finished)
	            return;
	        this._finished = true;
	        this._onDoneFn();
	        addRemoveAnimationEvent(this._element, this._eventFn, true);
	    };
	    ElementAnimationStyleHandler.prototype.destroy = function () {
	        if (this._destroyed)
	            return;
	        this._destroyed = true;
	        this.finish();
	        removeKeyframeAnimation(this._element, this._name);
	    };
	    return ElementAnimationStyleHandler;
	}());
	function playPauseAnimation(element, name, status) {
	    var index = findIndexForAnimation(element, name);
	    setAnimationStyle(element, 'PlayState', status, index);
	}
	function applyKeyframeAnimation(element, value) {
	    var anim = getAnimationStyle(element, '').trim();
	    var index = 0;
	    if (anim.length) {
	        index = countChars(anim, ',') + 1;
	        value = anim + ", " + value;
	    }
	    setAnimationStyle(element, '', value);
	    return index;
	}
	function removeKeyframeAnimation(element, name) {
	    var anim = getAnimationStyle(element, '');
	    var tokens = anim.split(',');
	    var index = findMatchingTokenIndex(tokens, name);
	    if (index >= 0) {
	        tokens.splice(index, 1);
	        var newValue = tokens.join(',');
	        setAnimationStyle(element, '', newValue);
	    }
	}
	function findIndexForAnimation(element, value) {
	    var anim = getAnimationStyle(element, '');
	    if (anim.indexOf(',') > 0) {
	        var tokens = anim.split(',');
	        return findMatchingTokenIndex(tokens, value);
	    }
	    return findMatchingTokenIndex([anim], value);
	}
	function findMatchingTokenIndex(tokens, searchToken) {
	    for (var i = 0; i < tokens.length; i++) {
	        if (tokens[i].indexOf(searchToken) >= 0) {
	            return i;
	        }
	    }
	    return -1;
	}
	function addRemoveAnimationEvent(element, fn, doRemove) {
	    doRemove ? element.removeEventListener(ANIMATIONEND_EVENT, fn) :
	        element.addEventListener(ANIMATIONEND_EVENT, fn);
	}
	function setAnimationStyle(element, name, value, index) {
	    var prop = ANIMATION_PROP + name;
	    if (index != null) {
	        var oldValue = element.style[prop];
	        if (oldValue.length) {
	            var tokens = oldValue.split(',');
	            tokens[index] = value;
	            value = tokens.join(',');
	        }
	    }
	    element.style[prop] = value;
	}
	function getAnimationStyle(element, name) {
	    return element.style[ANIMATION_PROP + name];
	}
	function countChars(value, char) {
	    var count = 0;
	    for (var i = 0; i < value.length; i++) {
	        var c = value.charAt(i);
	        if (c === char)
	            count++;
	    }
	    return count;
	}

	var DEFAULT_FILL_MODE = 'forwards';
	var DEFAULT_EASING = 'linear';
	var CssKeyframesPlayer = /** @class */ (function () {
	    function CssKeyframesPlayer(element, keyframes, animationName, _duration, _delay, easing, _finalStyles, _specialStyles) {
	        this.element = element;
	        this.keyframes = keyframes;
	        this.animationName = animationName;
	        this._duration = _duration;
	        this._delay = _delay;
	        this._finalStyles = _finalStyles;
	        this._specialStyles = _specialStyles;
	        this._onDoneFns = [];
	        this._onStartFns = [];
	        this._onDestroyFns = [];
	        this._started = false;
	        this.currentSnapshot = {};
	        this._state = 0;
	        this.easing = easing || DEFAULT_EASING;
	        this.totalTime = _duration + _delay;
	        this._buildStyler();
	    }
	    CssKeyframesPlayer.prototype.onStart = function (fn) {
	        this._onStartFns.push(fn);
	    };
	    CssKeyframesPlayer.prototype.onDone = function (fn) {
	        this._onDoneFns.push(fn);
	    };
	    CssKeyframesPlayer.prototype.onDestroy = function (fn) {
	        this._onDestroyFns.push(fn);
	    };
	    CssKeyframesPlayer.prototype.destroy = function () {
	        this.init();
	        if (this._state >= 4 /* DESTROYED */)
	            return;
	        this._state = 4 /* DESTROYED */;
	        this._styler.destroy();
	        this._flushStartFns();
	        this._flushDoneFns();
	        if (this._specialStyles) {
	            this._specialStyles.destroy();
	        }
	        this._onDestroyFns.forEach(function (fn) { return fn(); });
	        this._onDestroyFns = [];
	    };
	    CssKeyframesPlayer.prototype._flushDoneFns = function () {
	        this._onDoneFns.forEach(function (fn) { return fn(); });
	        this._onDoneFns = [];
	    };
	    CssKeyframesPlayer.prototype._flushStartFns = function () {
	        this._onStartFns.forEach(function (fn) { return fn(); });
	        this._onStartFns = [];
	    };
	    CssKeyframesPlayer.prototype.finish = function () {
	        this.init();
	        if (this._state >= 3 /* FINISHED */)
	            return;
	        this._state = 3 /* FINISHED */;
	        this._styler.finish();
	        this._flushStartFns();
	        if (this._specialStyles) {
	            this._specialStyles.finish();
	        }
	        this._flushDoneFns();
	    };
	    CssKeyframesPlayer.prototype.setPosition = function (value) {
	        this._styler.setPosition(value);
	    };
	    CssKeyframesPlayer.prototype.getPosition = function () {
	        return this._styler.getPosition();
	    };
	    CssKeyframesPlayer.prototype.hasStarted = function () {
	        return this._state >= 2 /* STARTED */;
	    };
	    CssKeyframesPlayer.prototype.init = function () {
	        if (this._state >= 1 /* INITIALIZED */)
	            return;
	        this._state = 1 /* INITIALIZED */;
	        var elm = this.element;
	        this._styler.apply();
	        if (this._delay) {
	            this._styler.pause();
	        }
	    };
	    CssKeyframesPlayer.prototype.play = function () {
	        this.init();
	        if (!this.hasStarted()) {
	            this._flushStartFns();
	            this._state = 2 /* STARTED */;
	            if (this._specialStyles) {
	                this._specialStyles.start();
	            }
	        }
	        this._styler.resume();
	    };
	    CssKeyframesPlayer.prototype.pause = function () {
	        this.init();
	        this._styler.pause();
	    };
	    CssKeyframesPlayer.prototype.restart = function () {
	        this.reset();
	        this.play();
	    };
	    CssKeyframesPlayer.prototype.reset = function () {
	        this._styler.destroy();
	        this._buildStyler();
	        this._styler.apply();
	    };
	    CssKeyframesPlayer.prototype._buildStyler = function () {
	        var _this = this;
	        this._styler = new ElementAnimationStyleHandler(this.element, this.animationName, this._duration, this._delay, this.easing, DEFAULT_FILL_MODE, function () { return _this.finish(); });
	    };
	    /** @internal */
	    CssKeyframesPlayer.prototype.triggerCallback = function (phaseName) {
	        var methods = phaseName == 'start' ? this._onStartFns : this._onDoneFns;
	        methods.forEach(function (fn) { return fn(); });
	        methods.length = 0;
	    };
	    CssKeyframesPlayer.prototype.beforeDestroy = function () {
	        var _this = this;
	        this.init();
	        var styles = {};
	        if (this.hasStarted()) {
	            var finished_1 = this._state >= 3 /* FINISHED */;
	            Object.keys(this._finalStyles).forEach(function (prop) {
	                if (prop != 'offset') {
	                    styles[prop] = finished_1 ? _this._finalStyles[prop] : computeStyle(_this.element, prop);
	                }
	            });
	        }
	        this.currentSnapshot = styles;
	    };
	    return CssKeyframesPlayer;
	}());

	var DirectStylePlayer = /** @class */ (function (_super) {
	    __extends(DirectStylePlayer, _super);
	    function DirectStylePlayer(element, styles) {
	        var _this = _super.call(this) || this;
	        _this.element = element;
	        _this._startingStyles = {};
	        _this.__initialized = false;
	        _this._styles = hypenatePropsObject(styles);
	        return _this;
	    }
	    DirectStylePlayer.prototype.init = function () {
	        var _this = this;
	        if (this.__initialized || !this._startingStyles)
	            return;
	        this.__initialized = true;
	        Object.keys(this._styles).forEach(function (prop) {
	            _this._startingStyles[prop] = _this.element.style[prop];
	        });
	        _super.prototype.init.call(this);
	    };
	    DirectStylePlayer.prototype.play = function () {
	        var _this = this;
	        if (!this._startingStyles)
	            return;
	        this.init();
	        Object.keys(this._styles)
	            .forEach(function (prop) { return _this.element.style.setProperty(prop, _this._styles[prop]); });
	        _super.prototype.play.call(this);
	    };
	    DirectStylePlayer.prototype.destroy = function () {
	        var _this = this;
	        if (!this._startingStyles)
	            return;
	        Object.keys(this._startingStyles).forEach(function (prop) {
	            var value = _this._startingStyles[prop];
	            if (value) {
	                _this.element.style.setProperty(prop, value);
	            }
	            else {
	                _this.element.style.removeProperty(prop);
	            }
	        });
	        this._startingStyles = null;
	        _super.prototype.destroy.call(this);
	    };
	    return DirectStylePlayer;
	}(NoopAnimationPlayer));

	var KEYFRAMES_NAME_PREFIX = 'gen_css_kf_';
	var TAB_SPACE = ' ';
	var CssKeyframesDriver = /** @class */ (function () {
	    function CssKeyframesDriver() {
	        this._count = 0;
	        this._head = document.querySelector('head');
	        this._warningIssued = false;
	    }
	    CssKeyframesDriver.prototype.validateStyleProperty = function (prop) {
	        return validateStyleProperty(prop);
	    };
	    CssKeyframesDriver.prototype.matchesElement = function (element, selector) {
	        return matchesElement(element, selector);
	    };
	    CssKeyframesDriver.prototype.containsElement = function (elm1, elm2) {
	        return containsElement(elm1, elm2);
	    };
	    CssKeyframesDriver.prototype.query = function (element, selector, multi) {
	        return invokeQuery(element, selector, multi);
	    };
	    CssKeyframesDriver.prototype.computeStyle = function (element, prop, defaultValue) {
	        return window.getComputedStyle(element)[prop];
	    };
	    CssKeyframesDriver.prototype.buildKeyframeElement = function (element, name, keyframes) {
	        keyframes = keyframes.map(function (kf) { return hypenatePropsObject(kf); });
	        var keyframeStr = "@keyframes " + name + " {\n";
	        var tab = '';
	        keyframes.forEach(function (kf) {
	            tab = TAB_SPACE;
	            var offset = parseFloat(kf['offset']);
	            keyframeStr += "" + tab + offset * 100 + "% {\n";
	            tab += TAB_SPACE;
	            Object.keys(kf).forEach(function (prop) {
	                var value = kf[prop];
	                switch (prop) {
	                    case 'offset':
	                        return;
	                    case 'easing':
	                        if (value) {
	                            keyframeStr += tab + "animation-timing-function: " + value + ";\n";
	                        }
	                        return;
	                    default:
	                        keyframeStr += "" + tab + prop + ": " + value + ";\n";
	                        return;
	                }
	            });
	            keyframeStr += tab + "}\n";
	        });
	        keyframeStr += "}\n";
	        var kfElm = document.createElement('style');
	        kfElm.innerHTML = keyframeStr;
	        return kfElm;
	    };
	    CssKeyframesDriver.prototype.animate = function (element, keyframes, duration, delay, easing, previousPlayers, scrubberAccessRequested) {
	        if (previousPlayers === void 0) { previousPlayers = []; }
	        if (scrubberAccessRequested) {
	            this._notifyFaultyScrubber();
	        }
	        var previousCssKeyframePlayers = previousPlayers.filter(function (player) { return player instanceof CssKeyframesPlayer; });
	        var previousStyles = {};
	        if (allowPreviousPlayerStylesMerge(duration, delay)) {
	            previousCssKeyframePlayers.forEach(function (player) {
	                var styles = player.currentSnapshot;
	                Object.keys(styles).forEach(function (prop) { return previousStyles[prop] = styles[prop]; });
	            });
	        }
	        keyframes = balancePreviousStylesIntoKeyframes(element, keyframes, previousStyles);
	        var finalStyles = flattenKeyframesIntoStyles(keyframes);
	        // if there is no animation then there is no point in applying
	        // styles and waiting for an event to get fired. This causes lag.
	        // It's better to just directly apply the styles to the element
	        // via the direct styling animation player.
	        if (duration == 0) {
	            return new DirectStylePlayer(element, finalStyles);
	        }
	        var animationName = "" + KEYFRAMES_NAME_PREFIX + this._count++;
	        var kfElm = this.buildKeyframeElement(element, animationName, keyframes);
	        document.querySelector('head').appendChild(kfElm);
	        var specialStyles = packageNonAnimatableStyles(element, keyframes);
	        var player = new CssKeyframesPlayer(element, keyframes, animationName, duration, delay, easing, finalStyles, specialStyles);
	        player.onDestroy(function () { return removeElement(kfElm); });
	        return player;
	    };
	    CssKeyframesDriver.prototype._notifyFaultyScrubber = function () {
	        if (!this._warningIssued) {
	            console.warn('@angular/animations: please load the web-animations.js polyfill to allow programmatic access...\n', '  visit http://bit.ly/IWukam to learn more about using the web-animation-js polyfill.');
	            this._warningIssued = true;
	        }
	    };
	    return CssKeyframesDriver;
	}());
	function flattenKeyframesIntoStyles(keyframes) {
	    var flatKeyframes = {};
	    if (keyframes) {
	        var kfs = Array.isArray(keyframes) ? keyframes : [keyframes];
	        kfs.forEach(function (kf) {
	            Object.keys(kf).forEach(function (prop) {
	                if (prop == 'offset' || prop == 'easing')
	                    return;
	                flatKeyframes[prop] = kf[prop];
	            });
	        });
	    }
	    return flatKeyframes;
	}
	function removeElement(node) {
	    node.parentNode.removeChild(node);
	}

	var WebAnimationsPlayer = /** @class */ (function () {
	    function WebAnimationsPlayer(element, keyframes, options, _specialStyles) {
	        this.element = element;
	        this.keyframes = keyframes;
	        this.options = options;
	        this._specialStyles = _specialStyles;
	        this._onDoneFns = [];
	        this._onStartFns = [];
	        this._onDestroyFns = [];
	        this._initialized = false;
	        this._finished = false;
	        this._started = false;
	        this._destroyed = false;
	        this.time = 0;
	        this.parentPlayer = null;
	        this.currentSnapshot = {};
	        this._duration = options['duration'];
	        this._delay = options['delay'] || 0;
	        this.time = this._duration + this._delay;
	    }
	    WebAnimationsPlayer.prototype._onFinish = function () {
	        if (!this._finished) {
	            this._finished = true;
	            this._onDoneFns.forEach(function (fn) { return fn(); });
	            this._onDoneFns = [];
	        }
	    };
	    WebAnimationsPlayer.prototype.init = function () {
	        this._buildPlayer();
	        this._preparePlayerBeforeStart();
	    };
	    WebAnimationsPlayer.prototype._buildPlayer = function () {
	        var _this = this;
	        if (this._initialized)
	            return;
	        this._initialized = true;
	        var keyframes = this.keyframes;
	        this.domPlayer =
	            this._triggerWebAnimation(this.element, keyframes, this.options);
	        this._finalKeyframe = keyframes.length ? keyframes[keyframes.length - 1] : {};
	        this.domPlayer.addEventListener('finish', function () { return _this._onFinish(); });
	    };
	    WebAnimationsPlayer.prototype._preparePlayerBeforeStart = function () {
	        // this is required so that the player doesn't start to animate right away
	        if (this._delay) {
	            this._resetDomPlayerState();
	        }
	        else {
	            this.domPlayer.pause();
	        }
	    };
	    /** @internal */
	    WebAnimationsPlayer.prototype._triggerWebAnimation = function (element, keyframes, options) {
	        // jscompiler doesn't seem to know animate is a native property because it's not fully
	        // supported yet across common browsers (we polyfill it for Edge/Safari) [CL #143630929]
	        return element['animate'](keyframes, options);
	    };
	    WebAnimationsPlayer.prototype.onStart = function (fn) {
	        this._onStartFns.push(fn);
	    };
	    WebAnimationsPlayer.prototype.onDone = function (fn) {
	        this._onDoneFns.push(fn);
	    };
	    WebAnimationsPlayer.prototype.onDestroy = function (fn) {
	        this._onDestroyFns.push(fn);
	    };
	    WebAnimationsPlayer.prototype.play = function () {
	        this._buildPlayer();
	        if (!this.hasStarted()) {
	            this._onStartFns.forEach(function (fn) { return fn(); });
	            this._onStartFns = [];
	            this._started = true;
	            if (this._specialStyles) {
	                this._specialStyles.start();
	            }
	        }
	        this.domPlayer.play();
	    };
	    WebAnimationsPlayer.prototype.pause = function () {
	        this.init();
	        this.domPlayer.pause();
	    };
	    WebAnimationsPlayer.prototype.finish = function () {
	        this.init();
	        if (this._specialStyles) {
	            this._specialStyles.finish();
	        }
	        this._onFinish();
	        this.domPlayer.finish();
	    };
	    WebAnimationsPlayer.prototype.reset = function () {
	        this._resetDomPlayerState();
	        this._destroyed = false;
	        this._finished = false;
	        this._started = false;
	    };
	    WebAnimationsPlayer.prototype._resetDomPlayerState = function () {
	        if (this.domPlayer) {
	            this.domPlayer.cancel();
	        }
	    };
	    WebAnimationsPlayer.prototype.restart = function () {
	        this.reset();
	        this.play();
	    };
	    WebAnimationsPlayer.prototype.hasStarted = function () {
	        return this._started;
	    };
	    WebAnimationsPlayer.prototype.destroy = function () {
	        if (!this._destroyed) {
	            this._destroyed = true;
	            this._resetDomPlayerState();
	            this._onFinish();
	            if (this._specialStyles) {
	                this._specialStyles.destroy();
	            }
	            this._onDestroyFns.forEach(function (fn) { return fn(); });
	            this._onDestroyFns = [];
	        }
	    };
	    WebAnimationsPlayer.prototype.setPosition = function (p) {
	        this.domPlayer.currentTime = p * this.time;
	    };
	    WebAnimationsPlayer.prototype.getPosition = function () {
	        return this.domPlayer.currentTime / this.time;
	    };
	    Object.defineProperty(WebAnimationsPlayer.prototype, "totalTime", {
	        get: function () {
	            return this._delay + this._duration;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    WebAnimationsPlayer.prototype.beforeDestroy = function () {
	        var _this = this;
	        var styles = {};
	        if (this.hasStarted()) {
	            Object.keys(this._finalKeyframe).forEach(function (prop) {
	                if (prop != 'offset') {
	                    styles[prop] =
	                        _this._finished ? _this._finalKeyframe[prop] : computeStyle(_this.element, prop);
	                }
	            });
	        }
	        this.currentSnapshot = styles;
	    };
	    /** @internal */
	    WebAnimationsPlayer.prototype.triggerCallback = function (phaseName) {
	        var methods = phaseName == 'start' ? this._onStartFns : this._onDoneFns;
	        methods.forEach(function (fn) { return fn(); });
	        methods.length = 0;
	    };
	    return WebAnimationsPlayer;
	}());

	var WebAnimationsDriver = /** @class */ (function () {
	    function WebAnimationsDriver() {
	        this._isNativeImpl = /\{\s*\[native\s+code\]\s*\}/.test(getElementAnimateFn().toString());
	        this._cssKeyframesDriver = new CssKeyframesDriver();
	    }
	    WebAnimationsDriver.prototype.validateStyleProperty = function (prop) {
	        return validateStyleProperty(prop);
	    };
	    WebAnimationsDriver.prototype.matchesElement = function (element, selector) {
	        return matchesElement(element, selector);
	    };
	    WebAnimationsDriver.prototype.containsElement = function (elm1, elm2) {
	        return containsElement(elm1, elm2);
	    };
	    WebAnimationsDriver.prototype.query = function (element, selector, multi) {
	        return invokeQuery(element, selector, multi);
	    };
	    WebAnimationsDriver.prototype.computeStyle = function (element, prop, defaultValue) {
	        return window.getComputedStyle(element)[prop];
	    };
	    WebAnimationsDriver.prototype.overrideWebAnimationsSupport = function (supported) {
	        this._isNativeImpl = supported;
	    };
	    WebAnimationsDriver.prototype.animate = function (element, keyframes, duration, delay, easing, previousPlayers, scrubberAccessRequested) {
	        if (previousPlayers === void 0) { previousPlayers = []; }
	        var useKeyframes = !scrubberAccessRequested && !this._isNativeImpl;
	        if (useKeyframes) {
	            return this._cssKeyframesDriver.animate(element, keyframes, duration, delay, easing, previousPlayers);
	        }
	        var fill = delay == 0 ? 'both' : 'forwards';
	        var playerOptions = { duration: duration, delay: delay, fill: fill };
	        // we check for this to avoid having a null|undefined value be present
	        // for the easing (which results in an error for certain browsers #9752)
	        if (easing) {
	            playerOptions['easing'] = easing;
	        }
	        var previousStyles = {};
	        var previousWebAnimationPlayers = previousPlayers.filter(function (player) { return player instanceof WebAnimationsPlayer; });
	        if (allowPreviousPlayerStylesMerge(duration, delay)) {
	            previousWebAnimationPlayers.forEach(function (player) {
	                var styles = player.currentSnapshot;
	                Object.keys(styles).forEach(function (prop) { return previousStyles[prop] = styles[prop]; });
	            });
	        }
	        keyframes = keyframes.map(function (styles) { return copyStyles(styles, false); });
	        keyframes = balancePreviousStylesIntoKeyframes(element, keyframes, previousStyles);
	        var specialStyles = packageNonAnimatableStyles(element, keyframes);
	        return new WebAnimationsPlayer(element, keyframes, playerOptions, specialStyles);
	    };
	    return WebAnimationsDriver;
	}());
	function supportsWebAnimations() {
	    return typeof getElementAnimateFn() === 'function';
	}
	function getElementAnimateFn() {
	    return (isBrowser() && Element.prototype['animate']) || {};
	}

	/**
	 * @license Angular v9.1.6
	 * (c) 2010-2020 Google LLC. https://angular.io/
	 * License: MIT
	 */

	var BrowserAnimationBuilder = /** @class */ (function (_super) {
	    __extends(BrowserAnimationBuilder, _super);
	    function BrowserAnimationBuilder(rootRenderer, doc) {
	        var _this = _super.call(this) || this;
	        _this._nextAnimationId = 0;
	        var typeData = { id: '0', encapsulation: ViewEncapsulation$1$1.None, styles: [], data: { animation: [] } };
	        _this._renderer = rootRenderer.createRenderer(doc.body, typeData);
	        return _this;
	    }
	    BrowserAnimationBuilder.prototype.build = function (animation) {
	        var id = this._nextAnimationId.toString();
	        this._nextAnimationId++;
	        var entry = Array.isArray(animation) ? sequence(animation) : animation;
	        issueAnimationCommand(this._renderer, null, id, 'register', [entry]);
	        return new BrowserAnimationFactory(id, this._renderer);
	    };
	    BrowserAnimationBuilder = __decorate([
	        Injectable(),
	        __param(1, Inject(DOCUMENT$1)),
	        __metadata("design:paramtypes", [RendererFactory2, Object])
	    ], BrowserAnimationBuilder);
	    return BrowserAnimationBuilder;
	}(AnimationBuilder));
	var BrowserAnimationFactory = /** @class */ (function (_super) {
	    __extends(BrowserAnimationFactory, _super);
	    function BrowserAnimationFactory(_id, _renderer) {
	        var _this = _super.call(this) || this;
	        _this._id = _id;
	        _this._renderer = _renderer;
	        return _this;
	    }
	    BrowserAnimationFactory.prototype.create = function (element, options) {
	        return new RendererAnimationPlayer(this._id, element, options || {}, this._renderer);
	    };
	    return BrowserAnimationFactory;
	}(AnimationFactory));
	var RendererAnimationPlayer = /** @class */ (function () {
	    function RendererAnimationPlayer(id, element, options, _renderer) {
	        this.id = id;
	        this.element = element;
	        this._renderer = _renderer;
	        this.parentPlayer = null;
	        this._started = false;
	        this.totalTime = 0;
	        this._command('create', options);
	    }
	    RendererAnimationPlayer.prototype._listen = function (eventName, callback) {
	        return this._renderer.listen(this.element, "@@" + this.id + ":" + eventName, callback);
	    };
	    RendererAnimationPlayer.prototype._command = function (command) {
	        var args = [];
	        for (var _i = 1; _i < arguments.length; _i++) {
	            args[_i - 1] = arguments[_i];
	        }
	        return issueAnimationCommand(this._renderer, this.element, this.id, command, args);
	    };
	    RendererAnimationPlayer.prototype.onDone = function (fn) {
	        this._listen('done', fn);
	    };
	    RendererAnimationPlayer.prototype.onStart = function (fn) {
	        this._listen('start', fn);
	    };
	    RendererAnimationPlayer.prototype.onDestroy = function (fn) {
	        this._listen('destroy', fn);
	    };
	    RendererAnimationPlayer.prototype.init = function () {
	        this._command('init');
	    };
	    RendererAnimationPlayer.prototype.hasStarted = function () {
	        return this._started;
	    };
	    RendererAnimationPlayer.prototype.play = function () {
	        this._command('play');
	        this._started = true;
	    };
	    RendererAnimationPlayer.prototype.pause = function () {
	        this._command('pause');
	    };
	    RendererAnimationPlayer.prototype.restart = function () {
	        this._command('restart');
	    };
	    RendererAnimationPlayer.prototype.finish = function () {
	        this._command('finish');
	    };
	    RendererAnimationPlayer.prototype.destroy = function () {
	        this._command('destroy');
	    };
	    RendererAnimationPlayer.prototype.reset = function () {
	        this._command('reset');
	    };
	    RendererAnimationPlayer.prototype.setPosition = function (p) {
	        this._command('setPosition', p);
	    };
	    RendererAnimationPlayer.prototype.getPosition = function () {
	        return 0;
	    };
	    return RendererAnimationPlayer;
	}());
	function issueAnimationCommand(renderer, element, id, command, args) {
	    return renderer.setProperty(element, "@@" + id + ":" + command, args);
	}

	var ANIMATION_PREFIX = '@';
	var DISABLE_ANIMATIONS_FLAG = '@.disabled';
	var AnimationRendererFactory = /** @class */ (function () {
	    function AnimationRendererFactory(delegate, engine, _zone) {
	        this.delegate = delegate;
	        this.engine = engine;
	        this._zone = _zone;
	        this._currentId = 0;
	        this._microtaskId = 1;
	        this._animationCallbacksBuffer = [];
	        this._rendererCache = new Map();
	        this._cdRecurDepth = 0;
	        this.promise = Promise.resolve(0);
	        engine.onRemovalComplete = function (element, delegate) {
	            // Note: if an component element has a leave animation, and the component
	            // a host leave animation, the view engine will call `removeChild` for the parent
	            // component renderer as well as for the child component renderer.
	            // Therefore, we need to check if we already removed the element.
	            if (delegate && delegate.parentNode(element)) {
	                delegate.removeChild(element.parentNode, element);
	            }
	        };
	    }
	    AnimationRendererFactory.prototype.createRenderer = function (hostElement, type) {
	        var _this = this;
	        var EMPTY_NAMESPACE_ID = '';
	        // cache the delegates to find out which cached delegate can
	        // be used by which cached renderer
	        var delegate = this.delegate.createRenderer(hostElement, type);
	        if (!hostElement || !type || !type.data || !type.data['animation']) {
	            var renderer = this._rendererCache.get(delegate);
	            if (!renderer) {
	                renderer = new BaseAnimationRenderer(EMPTY_NAMESPACE_ID, delegate, this.engine);
	                // only cache this result when the base renderer is used
	                this._rendererCache.set(delegate, renderer);
	            }
	            return renderer;
	        }
	        var componentId = type.id;
	        var namespaceId = type.id + '-' + this._currentId;
	        this._currentId++;
	        this.engine.register(namespaceId, hostElement);
	        var registerTrigger = function (trigger) {
	            if (Array.isArray(trigger)) {
	                trigger.forEach(registerTrigger);
	            }
	            else {
	                _this.engine.registerTrigger(componentId, namespaceId, hostElement, trigger.name, trigger);
	            }
	        };
	        var animationTriggers = type.data['animation'];
	        animationTriggers.forEach(registerTrigger);
	        return new AnimationRenderer(this, namespaceId, delegate, this.engine);
	    };
	    AnimationRendererFactory.prototype.begin = function () {
	        this._cdRecurDepth++;
	        if (this.delegate.begin) {
	            this.delegate.begin();
	        }
	    };
	    AnimationRendererFactory.prototype._scheduleCountTask = function () {
	        var _this = this;
	        // always use promise to schedule microtask instead of use Zone
	        this.promise.then(function () {
	            _this._microtaskId++;
	        });
	    };
	    /** @internal */
	    AnimationRendererFactory.prototype.scheduleListenerCallback = function (count, fn, data) {
	        var _this = this;
	        if (count >= 0 && count < this._microtaskId) {
	            this._zone.run(function () { return fn(data); });
	            return;
	        }
	        if (this._animationCallbacksBuffer.length == 0) {
	            Promise.resolve(null).then(function () {
	                _this._zone.run(function () {
	                    _this._animationCallbacksBuffer.forEach(function (tuple) {
	                        var _a = __read(tuple, 2), fn = _a[0], data = _a[1];
	                        fn(data);
	                    });
	                    _this._animationCallbacksBuffer = [];
	                });
	            });
	        }
	        this._animationCallbacksBuffer.push([fn, data]);
	    };
	    AnimationRendererFactory.prototype.end = function () {
	        var _this = this;
	        this._cdRecurDepth--;
	        // this is to prevent animations from running twice when an inner
	        // component does CD when a parent component instead has inserted it
	        if (this._cdRecurDepth == 0) {
	            this._zone.runOutsideAngular(function () {
	                _this._scheduleCountTask();
	                _this.engine.flush(_this._microtaskId);
	            });
	        }
	        if (this.delegate.end) {
	            this.delegate.end();
	        }
	    };
	    AnimationRendererFactory.prototype.whenRenderingDone = function () {
	        return this.engine.whenRenderingDone();
	    };
	    AnimationRendererFactory = __decorate([
	        Injectable(),
	        __metadata("design:paramtypes", [RendererFactory2, AnimationEngine, NgZone])
	    ], AnimationRendererFactory);
	    return AnimationRendererFactory;
	}());
	var BaseAnimationRenderer = /** @class */ (function () {
	    function BaseAnimationRenderer(namespaceId, delegate, engine) {
	        this.namespaceId = namespaceId;
	        this.delegate = delegate;
	        this.engine = engine;
	        this.destroyNode = this.delegate.destroyNode ? function (n) { return delegate.destroyNode(n); } : null;
	    }
	    Object.defineProperty(BaseAnimationRenderer.prototype, "data", {
	        get: function () {
	            return this.delegate.data;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    BaseAnimationRenderer.prototype.destroy = function () {
	        this.engine.destroy(this.namespaceId, this.delegate);
	        this.delegate.destroy();
	    };
	    BaseAnimationRenderer.prototype.createElement = function (name, namespace) {
	        return this.delegate.createElement(name, namespace);
	    };
	    BaseAnimationRenderer.prototype.createComment = function (value) {
	        return this.delegate.createComment(value);
	    };
	    BaseAnimationRenderer.prototype.createText = function (value) {
	        return this.delegate.createText(value);
	    };
	    BaseAnimationRenderer.prototype.appendChild = function (parent, newChild) {
	        this.delegate.appendChild(parent, newChild);
	        this.engine.onInsert(this.namespaceId, newChild, parent, false);
	    };
	    BaseAnimationRenderer.prototype.insertBefore = function (parent, newChild, refChild) {
	        this.delegate.insertBefore(parent, newChild, refChild);
	        this.engine.onInsert(this.namespaceId, newChild, parent, true);
	    };
	    BaseAnimationRenderer.prototype.removeChild = function (parent, oldChild, isHostElement) {
	        this.engine.onRemove(this.namespaceId, oldChild, this.delegate, isHostElement);
	    };
	    BaseAnimationRenderer.prototype.selectRootElement = function (selectorOrNode, preserveContent) {
	        return this.delegate.selectRootElement(selectorOrNode, preserveContent);
	    };
	    BaseAnimationRenderer.prototype.parentNode = function (node) {
	        return this.delegate.parentNode(node);
	    };
	    BaseAnimationRenderer.prototype.nextSibling = function (node) {
	        return this.delegate.nextSibling(node);
	    };
	    BaseAnimationRenderer.prototype.setAttribute = function (el, name, value, namespace) {
	        this.delegate.setAttribute(el, name, value, namespace);
	    };
	    BaseAnimationRenderer.prototype.removeAttribute = function (el, name, namespace) {
	        this.delegate.removeAttribute(el, name, namespace);
	    };
	    BaseAnimationRenderer.prototype.addClass = function (el, name) {
	        this.delegate.addClass(el, name);
	    };
	    BaseAnimationRenderer.prototype.removeClass = function (el, name) {
	        this.delegate.removeClass(el, name);
	    };
	    BaseAnimationRenderer.prototype.setStyle = function (el, style, value, flags) {
	        this.delegate.setStyle(el, style, value, flags);
	    };
	    BaseAnimationRenderer.prototype.removeStyle = function (el, style, flags) {
	        this.delegate.removeStyle(el, style, flags);
	    };
	    BaseAnimationRenderer.prototype.setProperty = function (el, name, value) {
	        if (name.charAt(0) == ANIMATION_PREFIX && name == DISABLE_ANIMATIONS_FLAG) {
	            this.disableAnimations(el, !!value);
	        }
	        else {
	            this.delegate.setProperty(el, name, value);
	        }
	    };
	    BaseAnimationRenderer.prototype.setValue = function (node, value) {
	        this.delegate.setValue(node, value);
	    };
	    BaseAnimationRenderer.prototype.listen = function (target, eventName, callback) {
	        return this.delegate.listen(target, eventName, callback);
	    };
	    BaseAnimationRenderer.prototype.disableAnimations = function (element, value) {
	        this.engine.disableAnimations(element, value);
	    };
	    return BaseAnimationRenderer;
	}());
	var AnimationRenderer = /** @class */ (function (_super) {
	    __extends(AnimationRenderer, _super);
	    function AnimationRenderer(factory, namespaceId, delegate, engine) {
	        var _this = _super.call(this, namespaceId, delegate, engine) || this;
	        _this.factory = factory;
	        _this.namespaceId = namespaceId;
	        return _this;
	    }
	    AnimationRenderer.prototype.setProperty = function (el, name, value) {
	        if (name.charAt(0) == ANIMATION_PREFIX) {
	            if (name.charAt(1) == '.' && name == DISABLE_ANIMATIONS_FLAG) {
	                value = value === undefined ? true : !!value;
	                this.disableAnimations(el, value);
	            }
	            else {
	                this.engine.process(this.namespaceId, el, name.substr(1), value);
	            }
	        }
	        else {
	            this.delegate.setProperty(el, name, value);
	        }
	    };
	    AnimationRenderer.prototype.listen = function (target, eventName, callback) {
	        var _a;
	        var _this = this;
	        if (eventName.charAt(0) == ANIMATION_PREFIX) {
	            var element = resolveElementFromTarget(target);
	            var name_1 = eventName.substr(1);
	            var phase = '';
	            // @listener.phase is for trigger animation callbacks
	            // @@listener is for animation builder callbacks
	            if (name_1.charAt(0) != ANIMATION_PREFIX) {
	                _a = __read(parseTriggerCallbackName(name_1), 2), name_1 = _a[0], phase = _a[1];
	            }
	            return this.engine.listen(this.namespaceId, element, name_1, phase, function (event) {
	                var countId = event['_data'] || -1;
	                _this.factory.scheduleListenerCallback(countId, callback, event);
	            });
	        }
	        return this.delegate.listen(target, eventName, callback);
	    };
	    return AnimationRenderer;
	}(BaseAnimationRenderer));
	function resolveElementFromTarget(target) {
	    switch (target) {
	        case 'body':
	            return document.body;
	        case 'document':
	            return document;
	        case 'window':
	            return window;
	        default:
	            return target;
	    }
	}
	function parseTriggerCallbackName(triggerName) {
	    var dotIndex = triggerName.indexOf('.');
	    var trigger = triggerName.substring(0, dotIndex);
	    var phase = triggerName.substr(dotIndex + 1);
	    return [trigger, phase];
	}

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	var InjectableAnimationEngine = /** @class */ (function (_super) {
	    __extends(InjectableAnimationEngine, _super);
	    function InjectableAnimationEngine(doc, driver, normalizer) {
	        return _super.call(this, doc.body, driver, normalizer) || this;
	    }
	    InjectableAnimationEngine = __decorate([
	        Injectable(),
	        __param(0, Inject(DOCUMENT$1)),
	        __metadata("design:paramtypes", [Object, AnimationDriver, AnimationStyleNormalizer])
	    ], InjectableAnimationEngine);
	    return InjectableAnimationEngine;
	}(AnimationEngine));
	function instantiateSupportedAnimationDriver() {
	    return supportsWebAnimations() ? new WebAnimationsDriver() : new CssKeyframesDriver();
	}
	function instantiateDefaultStyleNormalizer() {
	    return new WebAnimationsStyleNormalizer();
	}
	function instantiateRendererFactory(renderer, engine, zone) {
	    return new AnimationRendererFactory(renderer, engine, zone);
	}
	/**
	 * @publicApi
	 */
	var ANIMATION_MODULE_TYPE = new InjectionToken('AnimationModuleType');
	var SHARED_ANIMATION_PROVIDERS = [
	    { provide: AnimationBuilder, useClass: BrowserAnimationBuilder },
	    { provide: AnimationStyleNormalizer, useFactory: instantiateDefaultStyleNormalizer },
	    { provide: AnimationEngine, useClass: InjectableAnimationEngine }, {
	        provide: RendererFactory2,
	        useFactory: instantiateRendererFactory,
	        deps: [DomRendererFactory2, AnimationEngine, NgZone]
	    }
	];
	/**
	 * Separate providers from the actual module so that we can do a local modification in Google3 to
	 * include them in the BrowserModule.
	 */
	var BROWSER_ANIMATIONS_PROVIDERS = __spread([
	    { provide: AnimationDriver, useFactory: instantiateSupportedAnimationDriver },
	    { provide: ANIMATION_MODULE_TYPE, useValue: 'BrowserAnimations' }
	], SHARED_ANIMATION_PROVIDERS);
	/**
	 * Separate providers from the actual module so that we can do a local modification in Google3 to
	 * include them in the BrowserTestingModule.
	 */
	var BROWSER_NOOP_ANIMATIONS_PROVIDERS = __spread([
	    { provide: AnimationDriver, useClass: NoopAnimationDriver },
	    { provide: ANIMATION_MODULE_TYPE, useValue: 'NoopAnimations' }
	], SHARED_ANIMATION_PROVIDERS);

	/**
	 * Exports `BrowserModule` with additional [dependency-injection providers](guide/glossary#provider)
	 * for use with animations. See [Animations](guide/animations).
	 * @publicApi
	 */
	var BrowserAnimationsModule = /** @class */ (function () {
	    function BrowserAnimationsModule() {
	    }
	    BrowserAnimationsModule = __decorate([
	        NgModule({
	            exports: [BrowserModule],
	            providers: BROWSER_ANIMATIONS_PROVIDERS,
	        })
	    ], BrowserAnimationsModule);
	    return BrowserAnimationsModule;
	}());
	/**
	 * A null player that must be imported to allow disabling of animations.
	 * @publicApi
	 */
	var NoopAnimationsModule = /** @class */ (function () {
	    function NoopAnimationsModule() {
	    }
	    NoopAnimationsModule = __decorate([
	        NgModule({
	            exports: [BrowserModule],
	            providers: BROWSER_NOOP_ANIMATIONS_PROVIDERS,
	        })
	    ], NoopAnimationsModule);
	    return NoopAnimationsModule;
	}());

	/**
	 * @license Angular v9.1.6
	 * (c) 2010-2020 Google LLC. https://angular.io/
	 * License: MIT
	 */

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * Transforms an `HttpRequest` into a stream of `HttpEvent`s, one of which will likely be a
	 * `HttpResponse`.
	 *
	 * `HttpHandler` is injectable. When injected, the handler instance dispatches requests to the
	 * first interceptor in the chain, which dispatches to the second, etc, eventually reaching the
	 * `HttpBackend`.
	 *
	 * In an `HttpInterceptor`, the `HttpHandler` parameter is the next interceptor in the chain.
	 *
	 * @publicApi
	 */
	var HttpHandler = /** @class */ (function () {
	    function HttpHandler() {
	    }
	    return HttpHandler;
	}());
	/**
	 * A final `HttpHandler` which will dispatch the request via browser HTTP APIs to a backend.
	 *
	 * Interceptors sit between the `HttpClient` interface and the `HttpBackend`.
	 *
	 * When injected, `HttpBackend` dispatches requests directly to the backend, without going
	 * through the interceptor chain.
	 *
	 * @publicApi
	 */
	var HttpBackend = /** @class */ (function () {
	    function HttpBackend() {
	    }
	    return HttpBackend;
	}());

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * Represents the header configuration options for an HTTP request.
	 * Instances are immutable. Modifying methods return a cloned
	 * instance with the change. The original object is never changed.
	 *
	 * @publicApi
	 */
	var HttpHeaders = /** @class */ (function () {
	    /**  Constructs a new HTTP header object with the given values.*/
	    function HttpHeaders(headers) {
	        var _this = this;
	        /**
	         * Internal map of lowercased header names to the normalized
	         * form of the name (the form seen first).
	         */
	        this.normalizedNames = new Map();
	        /**
	         * Queued updates to be materialized the next initialization.
	         */
	        this.lazyUpdate = null;
	        if (!headers) {
	            this.headers = new Map();
	        }
	        else if (typeof headers === 'string') {
	            this.lazyInit = function () {
	                _this.headers = new Map();
	                headers.split('\n').forEach(function (line) {
	                    var index = line.indexOf(':');
	                    if (index > 0) {
	                        var name_1 = line.slice(0, index);
	                        var key = name_1.toLowerCase();
	                        var value = line.slice(index + 1).trim();
	                        _this.maybeSetNormalizedName(name_1, key);
	                        if (_this.headers.has(key)) {
	                            _this.headers.get(key).push(value);
	                        }
	                        else {
	                            _this.headers.set(key, [value]);
	                        }
	                    }
	                });
	            };
	        }
	        else {
	            this.lazyInit = function () {
	                _this.headers = new Map();
	                Object.keys(headers).forEach(function (name) {
	                    var values = headers[name];
	                    var key = name.toLowerCase();
	                    if (typeof values === 'string') {
	                        values = [values];
	                    }
	                    if (values.length > 0) {
	                        _this.headers.set(key, values);
	                        _this.maybeSetNormalizedName(name, key);
	                    }
	                });
	            };
	        }
	    }
	    /**
	     * Checks for existence of a given header.
	     *
	     * @param name The header name to check for existence.
	     *
	     * @returns True if the header exists, false otherwise.
	     */
	    HttpHeaders.prototype.has = function (name) {
	        this.init();
	        return this.headers.has(name.toLowerCase());
	    };
	    /**
	     * Retrieves the first value of a given header.
	     *
	     * @param name The header name.
	     *
	     * @returns The value string if the header exists, null otherwise
	     */
	    HttpHeaders.prototype.get = function (name) {
	        this.init();
	        var values = this.headers.get(name.toLowerCase());
	        return values && values.length > 0 ? values[0] : null;
	    };
	    /**
	     * Retrieves the names of the headers.
	     *
	     * @returns A list of header names.
	     */
	    HttpHeaders.prototype.keys = function () {
	        this.init();
	        return Array.from(this.normalizedNames.values());
	    };
	    /**
	     * Retrieves a list of values for a given header.
	     *
	     * @param name The header name from which to retrieve values.
	     *
	     * @returns A string of values if the header exists, null otherwise.
	     */
	    HttpHeaders.prototype.getAll = function (name) {
	        this.init();
	        return this.headers.get(name.toLowerCase()) || null;
	    };
	    /**
	     * Appends a new value to the existing set of values for a header
	     * and returns them in a clone of the original instance.
	     *
	     * @param name The header name for which to append the values.
	     * @param value The value to append.
	     *
	     * @returns A clone of the HTTP headers object with the value appended to the given header.
	     */
	    HttpHeaders.prototype.append = function (name, value) {
	        return this.clone({ name: name, value: value, op: 'a' });
	    };
	    /**
	     * Sets or modifies a value for a given header in a clone of the original instance.
	     * If the header already exists, its value is replaced with the given value
	     * in the returned object.
	     *
	     * @param name The header name.
	     * @param value The value or values to set or overide for the given header.
	     *
	     * @returns A clone of the HTTP headers object with the newly set header value.
	     */
	    HttpHeaders.prototype.set = function (name, value) {
	        return this.clone({ name: name, value: value, op: 's' });
	    };
	    /**
	     * Deletes values for a given header in a clone of the original instance.
	     *
	     * @param name The header name.
	     * @param value The value or values to delete for the given header.
	     *
	     * @returns A clone of the HTTP headers object with the given value deleted.
	     */
	    HttpHeaders.prototype.delete = function (name, value) {
	        return this.clone({ name: name, value: value, op: 'd' });
	    };
	    HttpHeaders.prototype.maybeSetNormalizedName = function (name, lcName) {
	        if (!this.normalizedNames.has(lcName)) {
	            this.normalizedNames.set(lcName, name);
	        }
	    };
	    HttpHeaders.prototype.init = function () {
	        var _this = this;
	        if (!!this.lazyInit) {
	            if (this.lazyInit instanceof HttpHeaders) {
	                this.copyFrom(this.lazyInit);
	            }
	            else {
	                this.lazyInit();
	            }
	            this.lazyInit = null;
	            if (!!this.lazyUpdate) {
	                this.lazyUpdate.forEach(function (update) { return _this.applyUpdate(update); });
	                this.lazyUpdate = null;
	            }
	        }
	    };
	    HttpHeaders.prototype.copyFrom = function (other) {
	        var _this = this;
	        other.init();
	        Array.from(other.headers.keys()).forEach(function (key) {
	            _this.headers.set(key, other.headers.get(key));
	            _this.normalizedNames.set(key, other.normalizedNames.get(key));
	        });
	    };
	    HttpHeaders.prototype.clone = function (update) {
	        var clone = new HttpHeaders();
	        clone.lazyInit =
	            (!!this.lazyInit && this.lazyInit instanceof HttpHeaders) ? this.lazyInit : this;
	        clone.lazyUpdate = (this.lazyUpdate || []).concat([update]);
	        return clone;
	    };
	    HttpHeaders.prototype.applyUpdate = function (update) {
	        var key = update.name.toLowerCase();
	        switch (update.op) {
	            case 'a':
	            case 's':
	                var value = update.value;
	                if (typeof value === 'string') {
	                    value = [value];
	                }
	                if (value.length === 0) {
	                    return;
	                }
	                this.maybeSetNormalizedName(update.name, key);
	                var base = (update.op === 'a' ? this.headers.get(key) : undefined) || [];
	                base.push.apply(base, __spread(value));
	                this.headers.set(key, base);
	                break;
	            case 'd':
	                var toDelete_1 = update.value;
	                if (!toDelete_1) {
	                    this.headers.delete(key);
	                    this.normalizedNames.delete(key);
	                }
	                else {
	                    var existing = this.headers.get(key);
	                    if (!existing) {
	                        return;
	                    }
	                    existing = existing.filter(function (value) { return toDelete_1.indexOf(value) === -1; });
	                    if (existing.length === 0) {
	                        this.headers.delete(key);
	                        this.normalizedNames.delete(key);
	                    }
	                    else {
	                        this.headers.set(key, existing);
	                    }
	                }
	                break;
	        }
	    };
	    /**
	     * @internal
	     */
	    HttpHeaders.prototype.forEach = function (fn) {
	        var _this = this;
	        this.init();
	        Array.from(this.normalizedNames.keys())
	            .forEach(function (key) { return fn(_this.normalizedNames.get(key), _this.headers.get(key)); });
	    };
	    return HttpHeaders;
	}());

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * Provides encoding and decoding of URL parameter and query-string values.
	 *
	 * Serializes and parses URL parameter keys and values to encode and decode them.
	 * If you pass URL query parameters without encoding,
	 * the query parameters can be misinterpreted at the receiving end.
	 *
	 *
	 * @publicApi
	 */
	var HttpUrlEncodingCodec = /** @class */ (function () {
	    function HttpUrlEncodingCodec() {
	    }
	    /**
	     * Encodes a key name for a URL parameter or query-string.
	     * @param key The key name.
	     * @returns The encoded key name.
	     */
	    HttpUrlEncodingCodec.prototype.encodeKey = function (key) {
	        return standardEncoding(key);
	    };
	    /**
	     * Encodes the value of a URL parameter or query-string.
	     * @param value The value.
	     * @returns The encoded value.
	     */
	    HttpUrlEncodingCodec.prototype.encodeValue = function (value) {
	        return standardEncoding(value);
	    };
	    /**
	     * Decodes an encoded URL parameter or query-string key.
	     * @param key The encoded key name.
	     * @returns The decoded key name.
	     */
	    HttpUrlEncodingCodec.prototype.decodeKey = function (key) {
	        return decodeURIComponent(key);
	    };
	    /**
	     * Decodes an encoded URL parameter or query-string value.
	     * @param value The encoded value.
	     * @returns The decoded value.
	     */
	    HttpUrlEncodingCodec.prototype.decodeValue = function (value) {
	        return decodeURIComponent(value);
	    };
	    return HttpUrlEncodingCodec;
	}());
	function paramParser(rawParams, codec) {
	    var map = new Map();
	    if (rawParams.length > 0) {
	        var params = rawParams.split('&');
	        params.forEach(function (param) {
	            var eqIdx = param.indexOf('=');
	            var _a = __read(eqIdx == -1 ?
	                [codec.decodeKey(param), ''] :
	                [codec.decodeKey(param.slice(0, eqIdx)), codec.decodeValue(param.slice(eqIdx + 1))], 2), key = _a[0], val = _a[1];
	            var list = map.get(key) || [];
	            list.push(val);
	            map.set(key, list);
	        });
	    }
	    return map;
	}
	function standardEncoding(v) {
	    return encodeURIComponent(v)
	        .replace(/%40/gi, '@')
	        .replace(/%3A/gi, ':')
	        .replace(/%24/gi, '$')
	        .replace(/%2C/gi, ',')
	        .replace(/%3B/gi, ';')
	        .replace(/%2B/gi, '+')
	        .replace(/%3D/gi, '=')
	        .replace(/%3F/gi, '?')
	        .replace(/%2F/gi, '/');
	}
	/**
	 * An HTTP request/response body that represents serialized parameters,
	 * per the MIME type `application/x-www-form-urlencoded`.
	 *
	 * This class is immutable; all mutation operations return a new instance.
	 *
	 * @publicApi
	 */
	var HttpParams = /** @class */ (function () {
	    function HttpParams(options) {
	        var _this = this;
	        if (options === void 0) { options = {}; }
	        this.updates = null;
	        this.cloneFrom = null;
	        this.encoder = options.encoder || new HttpUrlEncodingCodec();
	        if (!!options.fromString) {
	            if (!!options.fromObject) {
	                throw new Error("Cannot specify both fromString and fromObject.");
	            }
	            this.map = paramParser(options.fromString, this.encoder);
	        }
	        else if (!!options.fromObject) {
	            this.map = new Map();
	            Object.keys(options.fromObject).forEach(function (key) {
	                var value = options.fromObject[key];
	                _this.map.set(key, Array.isArray(value) ? value : [value]);
	            });
	        }
	        else {
	            this.map = null;
	        }
	    }
	    /**
	     * Reports whether the body includes one or more values for a given parameter.
	     * @param param The parameter name.
	     * @returns True if the parameter has one or more values,
	     * false if it has no value or is not present.
	     */
	    HttpParams.prototype.has = function (param) {
	        this.init();
	        return this.map.has(param);
	    };
	    /**
	     * Retrieves the first value for a parameter.
	     * @param param The parameter name.
	     * @returns The first value of the given parameter,
	     * or `null` if the parameter is not present.
	     */
	    HttpParams.prototype.get = function (param) {
	        this.init();
	        var res = this.map.get(param);
	        return !!res ? res[0] : null;
	    };
	    /**
	     * Retrieves all values for a  parameter.
	     * @param param The parameter name.
	     * @returns All values in a string array,
	     * or `null` if the parameter not present.
	     */
	    HttpParams.prototype.getAll = function (param) {
	        this.init();
	        return this.map.get(param) || null;
	    };
	    /**
	     * Retrieves all the parameters for this body.
	     * @returns The parameter names in a string array.
	     */
	    HttpParams.prototype.keys = function () {
	        this.init();
	        return Array.from(this.map.keys());
	    };
	    /**
	     * Appends a new value to existing values for a parameter.
	     * @param param The parameter name.
	     * @param value The new value to add.
	     * @return A new body with the appended value.
	     */
	    HttpParams.prototype.append = function (param, value) {
	        return this.clone({ param: param, value: value, op: 'a' });
	    };
	    /**
	     * Replaces the value for a parameter.
	     * @param param The parameter name.
	     * @param value The new value.
	     * @return A new body with the new value.
	     */
	    HttpParams.prototype.set = function (param, value) {
	        return this.clone({ param: param, value: value, op: 's' });
	    };
	    /**
	     * Removes a given value or all values from a parameter.
	     * @param param The parameter name.
	     * @param value The value to remove, if provided.
	     * @return A new body with the given value removed, or with all values
	     * removed if no value is specified.
	     */
	    HttpParams.prototype.delete = function (param, value) {
	        return this.clone({ param: param, value: value, op: 'd' });
	    };
	    /**
	     * Serializes the body to an encoded string, where key-value pairs (separated by `=`) are
	     * separated by `&`s.
	     */
	    HttpParams.prototype.toString = function () {
	        var _this = this;
	        this.init();
	        return this.keys()
	            .map(function (key) {
	            var eKey = _this.encoder.encodeKey(key);
	            // `a: ['1']` produces `'a=1'`
	            // `b: []` produces `''`
	            // `c: ['1', '2']` produces `'c=1&c=2'`
	            return _this.map.get(key).map(function (value) { return eKey + '=' + _this.encoder.encodeValue(value); })
	                .join('&');
	        })
	            // filter out empty values because `b: []` produces `''`
	            // which results in `a=1&&c=1&c=2` instead of `a=1&c=1&c=2` if we don't
	            .filter(function (param) { return param !== ''; })
	            .join('&');
	    };
	    HttpParams.prototype.clone = function (update) {
	        var clone = new HttpParams({ encoder: this.encoder });
	        clone.cloneFrom = this.cloneFrom || this;
	        clone.updates = (this.updates || []).concat([update]);
	        return clone;
	    };
	    HttpParams.prototype.init = function () {
	        var _this = this;
	        if (this.map === null) {
	            this.map = new Map();
	        }
	        if (this.cloneFrom !== null) {
	            this.cloneFrom.init();
	            this.cloneFrom.keys().forEach(function (key) { return _this.map.set(key, _this.cloneFrom.map.get(key)); });
	            this.updates.forEach(function (update) {
	                switch (update.op) {
	                    case 'a':
	                    case 's':
	                        var base = (update.op === 'a' ? _this.map.get(update.param) : undefined) || [];
	                        base.push(update.value);
	                        _this.map.set(update.param, base);
	                        break;
	                    case 'd':
	                        if (update.value !== undefined) {
	                            var base_1 = _this.map.get(update.param) || [];
	                            var idx = base_1.indexOf(update.value);
	                            if (idx !== -1) {
	                                base_1.splice(idx, 1);
	                            }
	                            if (base_1.length > 0) {
	                                _this.map.set(update.param, base_1);
	                            }
	                            else {
	                                _this.map.delete(update.param);
	                            }
	                        }
	                        else {
	                            _this.map.delete(update.param);
	                            break;
	                        }
	                }
	            });
	            this.cloneFrom = this.updates = null;
	        }
	    };
	    return HttpParams;
	}());

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * Determine whether the given HTTP method may include a body.
	 */
	function mightHaveBody(method) {
	    switch (method) {
	        case 'DELETE':
	        case 'GET':
	        case 'HEAD':
	        case 'OPTIONS':
	        case 'JSONP':
	            return false;
	        default:
	            return true;
	    }
	}
	/**
	 * Safely assert whether the given value is an ArrayBuffer.
	 *
	 * In some execution environments ArrayBuffer is not defined.
	 */
	function isArrayBuffer(value) {
	    return typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer;
	}
	/**
	 * Safely assert whether the given value is a Blob.
	 *
	 * In some execution environments Blob is not defined.
	 */
	function isBlob(value) {
	    return typeof Blob !== 'undefined' && value instanceof Blob;
	}
	/**
	 * Safely assert whether the given value is a FormData instance.
	 *
	 * In some execution environments FormData is not defined.
	 */
	function isFormData(value) {
	    return typeof FormData !== 'undefined' && value instanceof FormData;
	}
	/**
	 * An outgoing HTTP request with an optional typed body.
	 *
	 * `HttpRequest` represents an outgoing request, including URL, method,
	 * headers, body, and other request configuration options. Instances should be
	 * assumed to be immutable. To modify a `HttpRequest`, the `clone`
	 * method should be used.
	 *
	 * @publicApi
	 */
	var HttpRequest = /** @class */ (function () {
	    function HttpRequest(method, url, third, fourth) {
	        this.url = url;
	        /**
	         * The request body, or `null` if one isn't set.
	         *
	         * Bodies are not enforced to be immutable, as they can include a reference to any
	         * user-defined data type. However, interceptors should take care to preserve
	         * idempotence by treating them as such.
	         */
	        this.body = null;
	        /**
	         * Whether this request should be made in a way that exposes progress events.
	         *
	         * Progress events are expensive (change detection runs on each event) and so
	         * they should only be requested if the consumer intends to monitor them.
	         */
	        this.reportProgress = false;
	        /**
	         * Whether this request should be sent with outgoing credentials (cookies).
	         */
	        this.withCredentials = false;
	        /**
	         * The expected response type of the server.
	         *
	         * This is used to parse the response appropriately before returning it to
	         * the requestee.
	         */
	        this.responseType = 'json';
	        this.method = method.toUpperCase();
	        // Next, need to figure out which argument holds the HttpRequestInit
	        // options, if any.
	        var options;
	        // Check whether a body argument is expected. The only valid way to omit
	        // the body argument is to use a known no-body method like GET.
	        if (mightHaveBody(this.method) || !!fourth) {
	            // Body is the third argument, options are the fourth.
	            this.body = (third !== undefined) ? third : null;
	            options = fourth;
	        }
	        else {
	            // No body required, options are the third argument. The body stays null.
	            options = third;
	        }
	        // If options have been passed, interpret them.
	        if (options) {
	            // Normalize reportProgress and withCredentials.
	            this.reportProgress = !!options.reportProgress;
	            this.withCredentials = !!options.withCredentials;
	            // Override default response type of 'json' if one is provided.
	            if (!!options.responseType) {
	                this.responseType = options.responseType;
	            }
	            // Override headers if they're provided.
	            if (!!options.headers) {
	                this.headers = options.headers;
	            }
	            if (!!options.params) {
	                this.params = options.params;
	            }
	        }
	        // If no headers have been passed in, construct a new HttpHeaders instance.
	        if (!this.headers) {
	            this.headers = new HttpHeaders();
	        }
	        // If no parameters have been passed in, construct a new HttpUrlEncodedParams instance.
	        if (!this.params) {
	            this.params = new HttpParams();
	            this.urlWithParams = url;
	        }
	        else {
	            // Encode the parameters to a string in preparation for inclusion in the URL.
	            var params = this.params.toString();
	            if (params.length === 0) {
	                // No parameters, the visible URL is just the URL given at creation time.
	                this.urlWithParams = url;
	            }
	            else {
	                // Does the URL already have query parameters? Look for '?'.
	                var qIdx = url.indexOf('?');
	                // There are 3 cases to handle:
	                // 1) No existing parameters -> append '?' followed by params.
	                // 2) '?' exists and is followed by existing query string ->
	                //    append '&' followed by params.
	                // 3) '?' exists at the end of the url -> append params directly.
	                // This basically amounts to determining the character, if any, with
	                // which to join the URL and parameters.
	                var sep = qIdx === -1 ? '?' : (qIdx < url.length - 1 ? '&' : '');
	                this.urlWithParams = url + sep + params;
	            }
	        }
	    }
	    /**
	     * Transform the free-form body into a serialized format suitable for
	     * transmission to the server.
	     */
	    HttpRequest.prototype.serializeBody = function () {
	        // If no body is present, no need to serialize it.
	        if (this.body === null) {
	            return null;
	        }
	        // Check whether the body is already in a serialized form. If so,
	        // it can just be returned directly.
	        if (isArrayBuffer(this.body) || isBlob(this.body) || isFormData(this.body) ||
	            typeof this.body === 'string') {
	            return this.body;
	        }
	        // Check whether the body is an instance of HttpUrlEncodedParams.
	        if (this.body instanceof HttpParams) {
	            return this.body.toString();
	        }
	        // Check whether the body is an object or array, and serialize with JSON if so.
	        if (typeof this.body === 'object' || typeof this.body === 'boolean' ||
	            Array.isArray(this.body)) {
	            return JSON.stringify(this.body);
	        }
	        // Fall back on toString() for everything else.
	        return this.body.toString();
	    };
	    /**
	     * Examine the body and attempt to infer an appropriate MIME type
	     * for it.
	     *
	     * If no such type can be inferred, this method will return `null`.
	     */
	    HttpRequest.prototype.detectContentTypeHeader = function () {
	        // An empty body has no content type.
	        if (this.body === null) {
	            return null;
	        }
	        // FormData bodies rely on the browser's content type assignment.
	        if (isFormData(this.body)) {
	            return null;
	        }
	        // Blobs usually have their own content type. If it doesn't, then
	        // no type can be inferred.
	        if (isBlob(this.body)) {
	            return this.body.type || null;
	        }
	        // Array buffers have unknown contents and thus no type can be inferred.
	        if (isArrayBuffer(this.body)) {
	            return null;
	        }
	        // Technically, strings could be a form of JSON data, but it's safe enough
	        // to assume they're plain strings.
	        if (typeof this.body === 'string') {
	            return 'text/plain';
	        }
	        // `HttpUrlEncodedParams` has its own content-type.
	        if (this.body instanceof HttpParams) {
	            return 'application/x-www-form-urlencoded;charset=UTF-8';
	        }
	        // Arrays, objects, and numbers will be encoded as JSON.
	        if (typeof this.body === 'object' || typeof this.body === 'number' ||
	            Array.isArray(this.body)) {
	            return 'application/json';
	        }
	        // No type could be inferred.
	        return null;
	    };
	    HttpRequest.prototype.clone = function (update) {
	        if (update === void 0) { update = {}; }
	        // For method, url, and responseType, take the current value unless
	        // it is overridden in the update hash.
	        var method = update.method || this.method;
	        var url = update.url || this.url;
	        var responseType = update.responseType || this.responseType;
	        // The body is somewhat special - a `null` value in update.body means
	        // whatever current body is present is being overridden with an empty
	        // body, whereas an `undefined` value in update.body implies no
	        // override.
	        var body = (update.body !== undefined) ? update.body : this.body;
	        // Carefully handle the boolean options to differentiate between
	        // `false` and `undefined` in the update args.
	        var withCredentials = (update.withCredentials !== undefined) ? update.withCredentials : this.withCredentials;
	        var reportProgress = (update.reportProgress !== undefined) ? update.reportProgress : this.reportProgress;
	        // Headers and params may be appended to if `setHeaders` or
	        // `setParams` are used.
	        var headers = update.headers || this.headers;
	        var params = update.params || this.params;
	        // Check whether the caller has asked to add headers.
	        if (update.setHeaders !== undefined) {
	            // Set every requested header.
	            headers =
	                Object.keys(update.setHeaders)
	                    .reduce(function (headers, name) { return headers.set(name, update.setHeaders[name]); }, headers);
	        }
	        // Check whether the caller has asked to set params.
	        if (update.setParams) {
	            // Set every requested param.
	            params = Object.keys(update.setParams)
	                .reduce(function (params, param) { return params.set(param, update.setParams[param]); }, params);
	        }
	        // Finally, construct the new HttpRequest using the pieces from above.
	        return new HttpRequest(method, url, body, {
	            params: params,
	            headers: headers,
	            reportProgress: reportProgress,
	            responseType: responseType,
	            withCredentials: withCredentials,
	        });
	    };
	    return HttpRequest;
	}());

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * Type enumeration for the different kinds of `HttpEvent`.
	 *
	 * @publicApi
	 */
	var HttpEventType;
	(function (HttpEventType) {
	    /**
	     * The request was sent out over the wire.
	     */
	    HttpEventType[HttpEventType["Sent"] = 0] = "Sent";
	    /**
	     * An upload progress event was received.
	     */
	    HttpEventType[HttpEventType["UploadProgress"] = 1] = "UploadProgress";
	    /**
	     * The response status code and headers were received.
	     */
	    HttpEventType[HttpEventType["ResponseHeader"] = 2] = "ResponseHeader";
	    /**
	     * A download progress event was received.
	     */
	    HttpEventType[HttpEventType["DownloadProgress"] = 3] = "DownloadProgress";
	    /**
	     * The full response including the body was received.
	     */
	    HttpEventType[HttpEventType["Response"] = 4] = "Response";
	    /**
	     * A custom event from an interceptor or a backend.
	     */
	    HttpEventType[HttpEventType["User"] = 5] = "User";
	})(HttpEventType || (HttpEventType = {}));
	/**
	 * Base class for both `HttpResponse` and `HttpHeaderResponse`.
	 *
	 * @publicApi
	 */
	var HttpResponseBase = /** @class */ (function () {
	    /**
	     * Super-constructor for all responses.
	     *
	     * The single parameter accepted is an initialization hash. Any properties
	     * of the response passed there will override the default values.
	     */
	    function HttpResponseBase(init, defaultStatus, defaultStatusText) {
	        if (defaultStatus === void 0) { defaultStatus = 200; }
	        if (defaultStatusText === void 0) { defaultStatusText = 'OK'; }
	        // If the hash has values passed, use them to initialize the response.
	        // Otherwise use the default values.
	        this.headers = init.headers || new HttpHeaders();
	        this.status = init.status !== undefined ? init.status : defaultStatus;
	        this.statusText = init.statusText || defaultStatusText;
	        this.url = init.url || null;
	        // Cache the ok value to avoid defining a getter.
	        this.ok = this.status >= 200 && this.status < 300;
	    }
	    return HttpResponseBase;
	}());
	/**
	 * A partial HTTP response which only includes the status and header data,
	 * but no response body.
	 *
	 * `HttpHeaderResponse` is a `HttpEvent` available on the response
	 * event stream, only when progress events are requested.
	 *
	 * @publicApi
	 */
	var HttpHeaderResponse = /** @class */ (function (_super) {
	    __extends(HttpHeaderResponse, _super);
	    /**
	     * Create a new `HttpHeaderResponse` with the given parameters.
	     */
	    function HttpHeaderResponse(init) {
	        if (init === void 0) { init = {}; }
	        var _this = _super.call(this, init) || this;
	        _this.type = HttpEventType.ResponseHeader;
	        return _this;
	    }
	    /**
	     * Copy this `HttpHeaderResponse`, overriding its contents with the
	     * given parameter hash.
	     */
	    HttpHeaderResponse.prototype.clone = function (update) {
	        if (update === void 0) { update = {}; }
	        // Perform a straightforward initialization of the new HttpHeaderResponse,
	        // overriding the current parameters with new ones if given.
	        return new HttpHeaderResponse({
	            headers: update.headers || this.headers,
	            status: update.status !== undefined ? update.status : this.status,
	            statusText: update.statusText || this.statusText,
	            url: update.url || this.url || undefined,
	        });
	    };
	    return HttpHeaderResponse;
	}(HttpResponseBase));
	/**
	 * A full HTTP response, including a typed response body (which may be `null`
	 * if one was not returned).
	 *
	 * `HttpResponse` is a `HttpEvent` available on the response event
	 * stream.
	 *
	 * @publicApi
	 */
	var HttpResponse = /** @class */ (function (_super) {
	    __extends(HttpResponse, _super);
	    /**
	     * Construct a new `HttpResponse`.
	     */
	    function HttpResponse(init) {
	        if (init === void 0) { init = {}; }
	        var _this = _super.call(this, init) || this;
	        _this.type = HttpEventType.Response;
	        _this.body = init.body !== undefined ? init.body : null;
	        return _this;
	    }
	    HttpResponse.prototype.clone = function (update) {
	        if (update === void 0) { update = {}; }
	        return new HttpResponse({
	            body: (update.body !== undefined) ? update.body : this.body,
	            headers: update.headers || this.headers,
	            status: (update.status !== undefined) ? update.status : this.status,
	            statusText: update.statusText || this.statusText,
	            url: update.url || this.url || undefined,
	        });
	    };
	    return HttpResponse;
	}(HttpResponseBase));
	/**
	 * A response that represents an error or failure, either from a
	 * non-successful HTTP status, an error while executing the request,
	 * or some other failure which occurred during the parsing of the response.
	 *
	 * Any error returned on the `Observable` response stream will be
	 * wrapped in an `HttpErrorResponse` to provide additional context about
	 * the state of the HTTP layer when the error occurred. The error property
	 * will contain either a wrapped Error object or the error response returned
	 * from the server.
	 *
	 * @publicApi
	 */
	var HttpErrorResponse = /** @class */ (function (_super) {
	    __extends(HttpErrorResponse, _super);
	    function HttpErrorResponse(init) {
	        var _this = 
	        // Initialize with a default status of 0 / Unknown Error.
	        _super.call(this, init, 0, 'Unknown Error') || this;
	        _this.name = 'HttpErrorResponse';
	        /**
	         * Errors are never okay, even when the status code is in the 2xx success range.
	         */
	        _this.ok = false;
	        // If the response was successful, then this was a parse error. Otherwise, it was
	        // a protocol-level failure of some sort. Either the request failed in transit
	        // or the server returned an unsuccessful status code.
	        if (_this.status >= 200 && _this.status < 300) {
	            _this.message = "Http failure during parsing for " + (init.url || '(unknown url)');
	        }
	        else {
	            _this.message = "Http failure response for " + (init.url || '(unknown url)') + ": " + init.status + " " + init.statusText;
	        }
	        _this.error = init.error || null;
	        return _this;
	    }
	    return HttpErrorResponse;
	}(HttpResponseBase));

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * Constructs an instance of `HttpRequestOptions<T>` from a source `HttpMethodOptions` and
	 * the given `body`. This function clones the object and adds the body.
	 *
	 * Note that the `responseType` *options* value is a String that identifies the
	 * single data type of the response.
	 * A single overload version of the method handles each response type.
	 * The value of `responseType` cannot be a union, as the combined signature could imply.
	 *
	 */
	function addBody(options, body) {
	    return {
	        body: body,
	        headers: options.headers,
	        observe: options.observe,
	        params: options.params,
	        reportProgress: options.reportProgress,
	        responseType: options.responseType,
	        withCredentials: options.withCredentials,
	    };
	}
	/**
	 * Performs HTTP requests.
	 * This service is available as an injectable class, with methods to perform HTTP requests.
	 * Each request method has multiple signatures, and the return type varies based on
	 * the signature that is called (mainly the values of `observe` and `responseType`).
	 *
	 * Note that the `responseType` *options* value is a String that identifies the
	 * single data type of the response.
	 * A single overload version of the method handles each response type.
	 * The value of `responseType` cannot be a union, as the combined signature could imply.

	 *
	 * @usageNotes
	 * Sample HTTP requests for the [Tour of Heroes](/tutorial/toh-pt0) application.
	 *
	 * ### HTTP Request Example
	 *
	 * ```
	 *  // GET heroes whose name contains search term
	 * searchHeroes(term: string): observable<Hero[]>{
	 *
	 *  const params = new HttpParams({fromString: 'name=term'});
	 *    return this.httpClient.request('GET', this.heroesUrl, {responseType:'json', params});
	 * }
	 * ```
	 * ### JSONP Example
	 * ```
	 * requestJsonp(url, callback = 'callback') {
	 *  return this.httpClient.jsonp(this.heroesURL, callback);
	 * }
	 * ```
	 *
	 * ### PATCH Example
	 * ```
	 * // PATCH one of the heroes' name
	 * patchHero (id: number, heroName: string): Observable<{}> {
	 * const url = `${this.heroesUrl}/${id}`;   // PATCH api/heroes/42
	 *  return this.httpClient.patch(url, {name: heroName}, httpOptions)
	 *    .pipe(catchError(this.handleError('patchHero')));
	 * }
	 * ```
	 *
	 * @see [HTTP Guide](guide/http)
	 *
	 * @publicApi
	 */
	var HttpClient = /** @class */ (function () {
	    function HttpClient(handler) {
	        this.handler = handler;
	    }
	    /**
	     * Constructs an observable for a generic HTTP request that, when subscribed,
	     * fires the request through the chain of registered interceptors and on to the
	     * server.
	     *
	     * You can pass an `HttpRequest` directly as the only parameter. In this case,
	     * the call returns an observable of the raw `HttpEvent` stream.
	     *
	     * Alternatively you can pass an HTTP method as the first parameter,
	     * a URL string as the second, and an options hash containing the request body as the third.
	     * See `addBody()`. In this case, the specified `responseType` and `observe` options determine the
	     * type of returned observable.
	     *   * The `responseType` value determines how a successful response body is parsed.
	     *   * If `responseType` is the default `json`, you can pass a type interface for the resulting
	     * object as a type parameter to the call.
	     *
	     * The `observe` value determines the return type, according to what you are interested in
	     * observing.
	     *   * An `observe` value of events returns an observable of the raw `HttpEvent` stream, including
	     * progress events by default.
	     *   * An `observe` value of response returns an observable of `HttpResponse<T>`,
	     * where the `T` parameter depends on the `responseType` and any optionally provided type
	     * parameter.
	     *   * An `observe` value of body returns an observable of `<T>` with the same `T` body type.
	     *
	     */
	    HttpClient.prototype.request = function (first, url, options) {
	        var _this = this;
	        if (options === void 0) { options = {}; }
	        var req;
	        // First, check whether the primary argument is an instance of `HttpRequest`.
	        if (first instanceof HttpRequest) {
	            // It is. The other arguments must be undefined (per the signatures) and can be
	            // ignored.
	            req = first;
	        }
	        else {
	            // It's a string, so it represents a URL. Construct a request based on it,
	            // and incorporate the remaining arguments (assuming `GET` unless a method is
	            // provided.
	            // Figure out the headers.
	            var headers = undefined;
	            if (options.headers instanceof HttpHeaders) {
	                headers = options.headers;
	            }
	            else {
	                headers = new HttpHeaders(options.headers);
	            }
	            // Sort out parameters.
	            var params = undefined;
	            if (!!options.params) {
	                if (options.params instanceof HttpParams) {
	                    params = options.params;
	                }
	                else {
	                    params = new HttpParams({ fromObject: options.params });
	                }
	            }
	            // Construct the request.
	            req = new HttpRequest(first, url, (options.body !== undefined ? options.body : null), {
	                headers: headers,
	                params: params,
	                reportProgress: options.reportProgress,
	                // By default, JSON is assumed to be returned for all calls.
	                responseType: options.responseType || 'json',
	                withCredentials: options.withCredentials,
	            });
	        }
	        // Start with an Observable.of() the initial request, and run the handler (which
	        // includes all interceptors) inside a concatMap(). This way, the handler runs
	        // inside an Observable chain, which causes interceptors to be re-run on every
	        // subscription (this also makes retries re-run the handler, including interceptors).
	        var events$ = of(req).pipe(concatMap(function (req) { return _this.handler.handle(req); }));
	        // If coming via the API signature which accepts a previously constructed HttpRequest,
	        // the only option is to get the event stream. Otherwise, return the event stream if
	        // that is what was requested.
	        if (first instanceof HttpRequest || options.observe === 'events') {
	            return events$;
	        }
	        // The requested stream contains either the full response or the body. In either
	        // case, the first step is to filter the event stream to extract a stream of
	        // responses(s).
	        var res$ = events$.pipe(filter(function (event) { return event instanceof HttpResponse; }));
	        // Decide which stream to return.
	        switch (options.observe || 'body') {
	            case 'body':
	                // The requested stream is the body. Map the response stream to the response
	                // body. This could be done more simply, but a misbehaving interceptor might
	                // transform the response body into a different format and ignore the requested
	                // responseType. Guard against this by validating that the response is of the
	                // requested type.
	                switch (req.responseType) {
	                    case 'arraybuffer':
	                        return res$.pipe(map(function (res) {
	                            // Validate that the body is an ArrayBuffer.
	                            if (res.body !== null && !(res.body instanceof ArrayBuffer)) {
	                                throw new Error('Response is not an ArrayBuffer.');
	                            }
	                            return res.body;
	                        }));
	                    case 'blob':
	                        return res$.pipe(map(function (res) {
	                            // Validate that the body is a Blob.
	                            if (res.body !== null && !(res.body instanceof Blob)) {
	                                throw new Error('Response is not a Blob.');
	                            }
	                            return res.body;
	                        }));
	                    case 'text':
	                        return res$.pipe(map(function (res) {
	                            // Validate that the body is a string.
	                            if (res.body !== null && typeof res.body !== 'string') {
	                                throw new Error('Response is not a string.');
	                            }
	                            return res.body;
	                        }));
	                    case 'json':
	                    default:
	                        // No validation needed for JSON responses, as they can be of any type.
	                        return res$.pipe(map(function (res) { return res.body; }));
	                }
	            case 'response':
	                // The response stream was requested directly, so return it.
	                return res$;
	            default:
	                // Guard against new future observe types being added.
	                throw new Error("Unreachable: unhandled observe type " + options.observe + "}");
	        }
	    };
	    /**
	     * Constructs an observable that, when subscribed, causes the configured
	     * `DELETE` request to execute on the server. See the individual overloads for
	     * details on the return type.
	     *
	     * @param url     The endpoint URL.
	     * @param options The HTTP options to send with the request.
	     *
	     */
	    HttpClient.prototype.delete = function (url, options) {
	        if (options === void 0) { options = {}; }
	        return this.request('DELETE', url, options);
	    };
	    /**
	     * Constructs an observable that, when subscribed, causes the configured
	     * `GET` request to execute on the server. See the individual overloads for
	     * details on the return type.
	     */
	    HttpClient.prototype.get = function (url, options) {
	        if (options === void 0) { options = {}; }
	        return this.request('GET', url, options);
	    };
	    /**
	     * Constructs an observable that, when subscribed, causes the configured
	     * `HEAD` request to execute on the server. The `HEAD` method returns
	     * meta information about the resource without transferring the
	     * resource itself. See the individual overloads for
	     * details on the return type.
	     */
	    HttpClient.prototype.head = function (url, options) {
	        if (options === void 0) { options = {}; }
	        return this.request('HEAD', url, options);
	    };
	    /**
	     * Constructs an `Observable` that, when subscribed, causes a request with the special method
	     * `JSONP` to be dispatched via the interceptor pipeline.
	     * The [JSONP pattern](https://en.wikipedia.org/wiki/JSONP) works around limitations of certain
	     * API endpoints that don't support newer,
	     * and preferable [CORS](https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS) protocol.
	     * JSONP treats the endpoint API as a JavaScript file and tricks the browser to process the
	     * requests even if the API endpoint is not located on the same domain (origin) as the client-side
	     * application making the request.
	     * The endpoint API must support JSONP callback for JSONP requests to work.
	     * The resource API returns the JSON response wrapped in a callback function.
	     * You can pass the callback function name as one of the query parameters.
	     * Note that JSONP requests can only be used with `GET` requests.
	     *
	     * @param url The resource URL.
	     * @param callbackParam The callback function name.
	     *
	     */
	    HttpClient.prototype.jsonp = function (url, callbackParam) {
	        return this.request('JSONP', url, {
	            params: new HttpParams().append(callbackParam, 'JSONP_CALLBACK'),
	            observe: 'body',
	            responseType: 'json',
	        });
	    };
	    /**
	     * Constructs an `Observable` that, when subscribed, causes the configured
	     * `OPTIONS` request to execute on the server. This method allows the client
	     * to determine the supported HTTP methods and other capabilites of an endpoint,
	     * without implying a resource action. See the individual overloads for
	     * details on the return type.
	     */
	    HttpClient.prototype.options = function (url, options) {
	        if (options === void 0) { options = {}; }
	        return this.request('OPTIONS', url, options);
	    };
	    /**
	     * Constructs an observable that, when subscribed, causes the configured
	     * `PATCH` request to execute on the server. See the individual overloads for
	     * details on the return type.
	     */
	    HttpClient.prototype.patch = function (url, body, options) {
	        if (options === void 0) { options = {}; }
	        return this.request('PATCH', url, addBody(options, body));
	    };
	    /**
	     * Constructs an observable that, when subscribed, causes the configured
	     * `POST` request to execute on the server. The server responds with the location of
	     * the replaced resource. See the individual overloads for
	     * details on the return type.
	     */
	    HttpClient.prototype.post = function (url, body, options) {
	        if (options === void 0) { options = {}; }
	        return this.request('POST', url, addBody(options, body));
	    };
	    /**
	     * Constructs an observable that, when subscribed, causes the configured
	     * `PUT` request to execute on the server. The `PUT` method replaces an existing resource
	     * with a new set of values.
	     * See the individual overloads for details on the return type.
	     */
	    HttpClient.prototype.put = function (url, body, options) {
	        if (options === void 0) { options = {}; }
	        return this.request('PUT', url, addBody(options, body));
	    };
	    HttpClient = __decorate([
	        Injectable(),
	        __metadata("design:paramtypes", [HttpHandler])
	    ], HttpClient);
	    return HttpClient;
	}());

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * `HttpHandler` which applies an `HttpInterceptor` to an `HttpRequest`.
	 *
	 *
	 */
	var HttpInterceptorHandler = /** @class */ (function () {
	    function HttpInterceptorHandler(next, interceptor) {
	        this.next = next;
	        this.interceptor = interceptor;
	    }
	    HttpInterceptorHandler.prototype.handle = function (req) {
	        return this.interceptor.intercept(req, this.next);
	    };
	    return HttpInterceptorHandler;
	}());
	/**
	 * A multi-provider token that represents the array of registered
	 * `HttpInterceptor` objects.
	 *
	 * @publicApi
	 */
	var HTTP_INTERCEPTORS = new InjectionToken('HTTP_INTERCEPTORS');
	var NoopInterceptor = /** @class */ (function () {
	    function NoopInterceptor() {
	    }
	    NoopInterceptor.prototype.intercept = function (req, next) {
	        return next.handle(req);
	    };
	    NoopInterceptor = __decorate([
	        Injectable()
	    ], NoopInterceptor);
	    return NoopInterceptor;
	}());

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	// Every request made through JSONP needs a callback name that's unique across the
	// whole page. Each request is assigned an id and the callback name is constructed
	// from that. The next id to be assigned is tracked in a global variable here that
	// is shared among all applications on the page.
	var nextRequestId = 0;
	// Error text given when a JSONP script is injected, but doesn't invoke the callback
	// passed in its URL.
	var JSONP_ERR_NO_CALLBACK = 'JSONP injected script did not invoke callback.';
	// Error text given when a request is passed to the JsonpClientBackend that doesn't
	// have a request method JSONP.
	var JSONP_ERR_WRONG_METHOD = 'JSONP requests must use JSONP request method.';
	var JSONP_ERR_WRONG_RESPONSE_TYPE = 'JSONP requests must use Json response type.';
	/**
	 * DI token/abstract type representing a map of JSONP callbacks.
	 *
	 * In the browser, this should always be the `window` object.
	 *
	 *
	 */
	var JsonpCallbackContext = /** @class */ (function () {
	    function JsonpCallbackContext() {
	    }
	    return JsonpCallbackContext;
	}());
	/**
	 * Processes an `HttpRequest` with the JSONP method,
	 * by performing JSONP style requests.
	 * @see `HttpHandler`
	 * @see `HttpXhrBackend`
	 *
	 * @publicApi
	 */
	var JsonpClientBackend = /** @class */ (function () {
	    function JsonpClientBackend(callbackMap, document) {
	        this.callbackMap = callbackMap;
	        this.document = document;
	    }
	    /**
	     * Get the name of the next callback method, by incrementing the global `nextRequestId`.
	     */
	    JsonpClientBackend.prototype.nextCallback = function () {
	        return "ng_jsonp_callback_" + nextRequestId++;
	    };
	    /**
	     * Processes a JSONP request and returns an event stream of the results.
	     * @param req The request object.
	     * @returns An observable of the response events.
	     *
	     */
	    JsonpClientBackend.prototype.handle = function (req) {
	        var _this = this;
	        // Firstly, check both the method and response type. If either doesn't match
	        // then the request was improperly routed here and cannot be handled.
	        if (req.method !== 'JSONP') {
	            throw new Error(JSONP_ERR_WRONG_METHOD);
	        }
	        else if (req.responseType !== 'json') {
	            throw new Error(JSONP_ERR_WRONG_RESPONSE_TYPE);
	        }
	        // Everything else happens inside the Observable boundary.
	        return new Observable(function (observer) {
	            // The first step to make a request is to generate the callback name, and replace the
	            // callback placeholder in the URL with the name. Care has to be taken here to ensure
	            // a trailing &, if matched, gets inserted back into the URL in the correct place.
	            var callback = _this.nextCallback();
	            var url = req.urlWithParams.replace(/=JSONP_CALLBACK(&|$)/, "=" + callback + "$1");
	            // Construct the <script> tag and point it at the URL.
	            var node = _this.document.createElement('script');
	            node.src = url;
	            // A JSONP request requires waiting for multiple callbacks. These variables
	            // are closed over and track state across those callbacks.
	            // The response object, if one has been received, or null otherwise.
	            var body = null;
	            // Whether the response callback has been called.
	            var finished = false;
	            // Whether the request has been cancelled (and thus any other callbacks)
	            // should be ignored.
	            var cancelled = false;
	            // Set the response callback in this.callbackMap (which will be the window
	            // object in the browser. The script being loaded via the <script> tag will
	            // eventually call this callback.
	            _this.callbackMap[callback] = function (data) {
	                // Data has been received from the JSONP script. Firstly, delete this callback.
	                delete _this.callbackMap[callback];
	                // Next, make sure the request wasn't cancelled in the meantime.
	                if (cancelled) {
	                    return;
	                }
	                // Set state to indicate data was received.
	                body = data;
	                finished = true;
	            };
	            // cleanup() is a utility closure that removes the <script> from the page and
	            // the response callback from the window. This logic is used in both the
	            // success, error, and cancellation paths, so it's extracted out for convenience.
	            var cleanup = function () {
	                // Remove the <script> tag if it's still on the page.
	                if (node.parentNode) {
	                    node.parentNode.removeChild(node);
	                }
	                // Remove the response callback from the callbackMap (window object in the
	                // browser).
	                delete _this.callbackMap[callback];
	            };
	            // onLoad() is the success callback which runs after the response callback
	            // if the JSONP script loads successfully. The event itself is unimportant.
	            // If something went wrong, onLoad() may run without the response callback
	            // having been invoked.
	            var onLoad = function (event) {
	                // Do nothing if the request has been cancelled.
	                if (cancelled) {
	                    return;
	                }
	                // Cleanup the page.
	                cleanup();
	                // Check whether the response callback has run.
	                if (!finished) {
	                    // It hasn't, something went wrong with the request. Return an error via
	                    // the Observable error path. All JSONP errors have status 0.
	                    observer.error(new HttpErrorResponse({
	                        url: url,
	                        status: 0,
	                        statusText: 'JSONP Error',
	                        error: new Error(JSONP_ERR_NO_CALLBACK),
	                    }));
	                    return;
	                }
	                // Success. body either contains the response body or null if none was
	                // returned.
	                observer.next(new HttpResponse({
	                    body: body,
	                    status: 200,
	                    statusText: 'OK',
	                    url: url,
	                }));
	                // Complete the stream, the response is over.
	                observer.complete();
	            };
	            // onError() is the error callback, which runs if the script returned generates
	            // a Javascript error. It emits the error via the Observable error channel as
	            // a HttpErrorResponse.
	            var onError = function (error) {
	                // If the request was already cancelled, no need to emit anything.
	                if (cancelled) {
	                    return;
	                }
	                cleanup();
	                // Wrap the error in a HttpErrorResponse.
	                observer.error(new HttpErrorResponse({
	                    error: error,
	                    status: 0,
	                    statusText: 'JSONP Error',
	                    url: url,
	                }));
	            };
	            // Subscribe to both the success (load) and error events on the <script> tag,
	            // and add it to the page.
	            node.addEventListener('load', onLoad);
	            node.addEventListener('error', onError);
	            _this.document.body.appendChild(node);
	            // The request has now been successfully sent.
	            observer.next({ type: HttpEventType.Sent });
	            // Cancellation handler.
	            return function () {
	                // Track the cancellation so event listeners won't do anything even if already scheduled.
	                cancelled = true;
	                // Remove the event listeners so they won't run if the events later fire.
	                node.removeEventListener('load', onLoad);
	                node.removeEventListener('error', onError);
	                // And finally, clean up the page.
	                cleanup();
	            };
	        });
	    };
	    JsonpClientBackend = __decorate([
	        Injectable(),
	        __param(1, Inject(DOCUMENT$1)),
	        __metadata("design:paramtypes", [JsonpCallbackContext, Object])
	    ], JsonpClientBackend);
	    return JsonpClientBackend;
	}());
	/**
	 * Identifies requests with the method JSONP and
	 * shifts them to the `JsonpClientBackend`.
	 *
	 * @see `HttpInterceptor`
	 *
	 * @publicApi
	 */
	var JsonpInterceptor = /** @class */ (function () {
	    function JsonpInterceptor(jsonp) {
	        this.jsonp = jsonp;
	    }
	    /**
	     * Identifies and handles a given JSONP request.
	     * @param req The outgoing request object to handle.
	     * @param next The next interceptor in the chain, or the backend
	     * if no interceptors remain in the chain.
	     * @returns An observable of the event stream.
	     */
	    JsonpInterceptor.prototype.intercept = function (req, next) {
	        if (req.method === 'JSONP') {
	            return this.jsonp.handle(req);
	        }
	        // Fall through for normal HTTP requests.
	        return next.handle(req);
	    };
	    JsonpInterceptor = __decorate([
	        Injectable(),
	        __metadata("design:paramtypes", [JsonpClientBackend])
	    ], JsonpInterceptor);
	    return JsonpInterceptor;
	}());

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	var XSSI_PREFIX = /^\)\]\}',?\n/;
	/**
	 * Determine an appropriate URL for the response, by checking either
	 * XMLHttpRequest.responseURL or the X-Request-URL header.
	 */
	function getResponseUrl(xhr) {
	    if ('responseURL' in xhr && xhr.responseURL) {
	        return xhr.responseURL;
	    }
	    if (/^X-Request-URL:/m.test(xhr.getAllResponseHeaders())) {
	        return xhr.getResponseHeader('X-Request-URL');
	    }
	    return null;
	}
	/**
	 * A wrapper around the `XMLHttpRequest` constructor.
	 *
	 * @publicApi
	 */
	var XhrFactory = /** @class */ (function () {
	    function XhrFactory() {
	    }
	    return XhrFactory;
	}());
	/**
	 * A factory for `HttpXhrBackend` that uses the `XMLHttpRequest` browser API.
	 *
	 */
	var BrowserXhr = /** @class */ (function () {
	    function BrowserXhr() {
	    }
	    BrowserXhr.prototype.build = function () {
	        return (new XMLHttpRequest());
	    };
	    BrowserXhr = __decorate([
	        Injectable(),
	        __metadata("design:paramtypes", [])
	    ], BrowserXhr);
	    return BrowserXhr;
	}());
	/**
	 * Uses `XMLHttpRequest` to send requests to a backend server.
	 * @see `HttpHandler`
	 * @see `JsonpClientBackend`
	 *
	 * @publicApi
	 */
	var HttpXhrBackend = /** @class */ (function () {
	    function HttpXhrBackend(xhrFactory) {
	        this.xhrFactory = xhrFactory;
	    }
	    /**
	     * Processes a request and returns a stream of response events.
	     * @param req The request object.
	     * @returns An observable of the response events.
	     */
	    HttpXhrBackend.prototype.handle = function (req) {
	        var _this = this;
	        // Quick check to give a better error message when a user attempts to use
	        // HttpClient.jsonp() without installing the JsonpClientModule
	        if (req.method === 'JSONP') {
	            throw new Error("Attempted to construct Jsonp request without JsonpClientModule installed.");
	        }
	        // Everything happens on Observable subscription.
	        return new Observable(function (observer) {
	            // Start by setting up the XHR object with request method, URL, and withCredentials flag.
	            var xhr = _this.xhrFactory.build();
	            xhr.open(req.method, req.urlWithParams);
	            if (!!req.withCredentials) {
	                xhr.withCredentials = true;
	            }
	            // Add all the requested headers.
	            req.headers.forEach(function (name, values) { return xhr.setRequestHeader(name, values.join(',')); });
	            // Add an Accept header if one isn't present already.
	            if (!req.headers.has('Accept')) {
	                xhr.setRequestHeader('Accept', 'application/json, text/plain, */*');
	            }
	            // Auto-detect the Content-Type header if one isn't present already.
	            if (!req.headers.has('Content-Type')) {
	                var detectedType = req.detectContentTypeHeader();
	                // Sometimes Content-Type detection fails.
	                if (detectedType !== null) {
	                    xhr.setRequestHeader('Content-Type', detectedType);
	                }
	            }
	            // Set the responseType if one was requested.
	            if (req.responseType) {
	                var responseType = req.responseType.toLowerCase();
	                // JSON responses need to be processed as text. This is because if the server
	                // returns an XSSI-prefixed JSON response, the browser will fail to parse it,
	                // xhr.response will be null, and xhr.responseText cannot be accessed to
	                // retrieve the prefixed JSON data in order to strip the prefix. Thus, all JSON
	                // is parsed by first requesting text and then applying JSON.parse.
	                xhr.responseType = ((responseType !== 'json') ? responseType : 'text');
	            }
	            // Serialize the request body if one is present. If not, this will be set to null.
	            var reqBody = req.serializeBody();
	            // If progress events are enabled, response headers will be delivered
	            // in two events - the HttpHeaderResponse event and the full HttpResponse
	            // event. However, since response headers don't change in between these
	            // two events, it doesn't make sense to parse them twice. So headerResponse
	            // caches the data extracted from the response whenever it's first parsed,
	            // to ensure parsing isn't duplicated.
	            var headerResponse = null;
	            // partialFromXhr extracts the HttpHeaderResponse from the current XMLHttpRequest
	            // state, and memoizes it into headerResponse.
	            var partialFromXhr = function () {
	                if (headerResponse !== null) {
	                    return headerResponse;
	                }
	                // Read status and normalize an IE9 bug (http://bugs.jquery.com/ticket/1450).
	                var status = xhr.status === 1223 ? 204 : xhr.status;
	                var statusText = xhr.statusText || 'OK';
	                // Parse headers from XMLHttpRequest - this step is lazy.
	                var headers = new HttpHeaders(xhr.getAllResponseHeaders());
	                // Read the response URL from the XMLHttpResponse instance and fall back on the
	                // request URL.
	                var url = getResponseUrl(xhr) || req.url;
	                // Construct the HttpHeaderResponse and memoize it.
	                headerResponse = new HttpHeaderResponse({ headers: headers, status: status, statusText: statusText, url: url });
	                return headerResponse;
	            };
	            // Next, a few closures are defined for the various events which XMLHttpRequest can
	            // emit. This allows them to be unregistered as event listeners later.
	            // First up is the load event, which represents a response being fully available.
	            var onLoad = function () {
	                // Read response state from the memoized partial data.
	                var _a = partialFromXhr(), headers = _a.headers, status = _a.status, statusText = _a.statusText, url = _a.url;
	                // The body will be read out if present.
	                var body = null;
	                if (status !== 204) {
	                    // Use XMLHttpRequest.response if set, responseText otherwise.
	                    body = (typeof xhr.response === 'undefined') ? xhr.responseText : xhr.response;
	                }
	                // Normalize another potential bug (this one comes from CORS).
	                if (status === 0) {
	                    status = !!body ? 200 : 0;
	                }
	                // ok determines whether the response will be transmitted on the event or
	                // error channel. Unsuccessful status codes (not 2xx) will always be errors,
	                // but a successful status code can still result in an error if the user
	                // asked for JSON data and the body cannot be parsed as such.
	                var ok = status >= 200 && status < 300;
	                // Check whether the body needs to be parsed as JSON (in many cases the browser
	                // will have done that already).
	                if (req.responseType === 'json' && typeof body === 'string') {
	                    // Save the original body, before attempting XSSI prefix stripping.
	                    var originalBody = body;
	                    body = body.replace(XSSI_PREFIX, '');
	                    try {
	                        // Attempt the parse. If it fails, a parse error should be delivered to the user.
	                        body = body !== '' ? JSON.parse(body) : null;
	                    }
	                    catch (error) {
	                        // Since the JSON.parse failed, it's reasonable to assume this might not have been a
	                        // JSON response. Restore the original body (including any XSSI prefix) to deliver
	                        // a better error response.
	                        body = originalBody;
	                        // If this was an error request to begin with, leave it as a string, it probably
	                        // just isn't JSON. Otherwise, deliver the parsing error to the user.
	                        if (ok) {
	                            // Even though the response status was 2xx, this is still an error.
	                            ok = false;
	                            // The parse error contains the text of the body that failed to parse.
	                            body = { error: error, text: body };
	                        }
	                    }
	                }
	                if (ok) {
	                    // A successful response is delivered on the event stream.
	                    observer.next(new HttpResponse({
	                        body: body,
	                        headers: headers,
	                        status: status,
	                        statusText: statusText,
	                        url: url || undefined,
	                    }));
	                    // The full body has been received and delivered, no further events
	                    // are possible. This request is complete.
	                    observer.complete();
	                }
	                else {
	                    // An unsuccessful request is delivered on the error channel.
	                    observer.error(new HttpErrorResponse({
	                        // The error in this case is the response body (error from the server).
	                        error: body,
	                        headers: headers,
	                        status: status,
	                        statusText: statusText,
	                        url: url || undefined,
	                    }));
	                }
	            };
	            // The onError callback is called when something goes wrong at the network level.
	            // Connection timeout, DNS error, offline, etc. These are actual errors, and are
	            // transmitted on the error channel.
	            var onError = function (error) {
	                var url = partialFromXhr().url;
	                var res = new HttpErrorResponse({
	                    error: error,
	                    status: xhr.status || 0,
	                    statusText: xhr.statusText || 'Unknown Error',
	                    url: url || undefined,
	                });
	                observer.error(res);
	            };
	            // The sentHeaders flag tracks whether the HttpResponseHeaders event
	            // has been sent on the stream. This is necessary to track if progress
	            // is enabled since the event will be sent on only the first download
	            // progerss event.
	            var sentHeaders = false;
	            // The download progress event handler, which is only registered if
	            // progress events are enabled.
	            var onDownProgress = function (event) {
	                // Send the HttpResponseHeaders event if it hasn't been sent already.
	                if (!sentHeaders) {
	                    observer.next(partialFromXhr());
	                    sentHeaders = true;
	                }
	                // Start building the download progress event to deliver on the response
	                // event stream.
	                var progressEvent = {
	                    type: HttpEventType.DownloadProgress,
	                    loaded: event.loaded,
	                };
	                // Set the total number of bytes in the event if it's available.
	                if (event.lengthComputable) {
	                    progressEvent.total = event.total;
	                }
	                // If the request was for text content and a partial response is
	                // available on XMLHttpRequest, include it in the progress event
	                // to allow for streaming reads.
	                if (req.responseType === 'text' && !!xhr.responseText) {
	                    progressEvent.partialText = xhr.responseText;
	                }
	                // Finally, fire the event.
	                observer.next(progressEvent);
	            };
	            // The upload progress event handler, which is only registered if
	            // progress events are enabled.
	            var onUpProgress = function (event) {
	                // Upload progress events are simpler. Begin building the progress
	                // event.
	                var progress = {
	                    type: HttpEventType.UploadProgress,
	                    loaded: event.loaded,
	                };
	                // If the total number of bytes being uploaded is available, include
	                // it.
	                if (event.lengthComputable) {
	                    progress.total = event.total;
	                }
	                // Send the event.
	                observer.next(progress);
	            };
	            // By default, register for load and error events.
	            xhr.addEventListener('load', onLoad);
	            xhr.addEventListener('error', onError);
	            // Progress events are only enabled if requested.
	            if (req.reportProgress) {
	                // Download progress is always enabled if requested.
	                xhr.addEventListener('progress', onDownProgress);
	                // Upload progress depends on whether there is a body to upload.
	                if (reqBody !== null && xhr.upload) {
	                    xhr.upload.addEventListener('progress', onUpProgress);
	                }
	            }
	            // Fire the request, and notify the event stream that it was fired.
	            xhr.send(reqBody);
	            observer.next({ type: HttpEventType.Sent });
	            // This is the return from the Observable function, which is the
	            // request cancellation handler.
	            return function () {
	                // On a cancellation, remove all registered event listeners.
	                xhr.removeEventListener('error', onError);
	                xhr.removeEventListener('load', onLoad);
	                if (req.reportProgress) {
	                    xhr.removeEventListener('progress', onDownProgress);
	                    if (reqBody !== null && xhr.upload) {
	                        xhr.upload.removeEventListener('progress', onUpProgress);
	                    }
	                }
	                // Finally, abort the in-flight request.
	                xhr.abort();
	            };
	        });
	    };
	    HttpXhrBackend = __decorate([
	        Injectable(),
	        __metadata("design:paramtypes", [XhrFactory])
	    ], HttpXhrBackend);
	    return HttpXhrBackend;
	}());

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	var XSRF_COOKIE_NAME = new InjectionToken('XSRF_COOKIE_NAME');
	var XSRF_HEADER_NAME = new InjectionToken('XSRF_HEADER_NAME');
	/**
	 * Retrieves the current XSRF token to use with the next outgoing request.
	 *
	 * @publicApi
	 */
	var HttpXsrfTokenExtractor = /** @class */ (function () {
	    function HttpXsrfTokenExtractor() {
	    }
	    return HttpXsrfTokenExtractor;
	}());
	/**
	 * `HttpXsrfTokenExtractor` which retrieves the token from a cookie.
	 */
	var HttpXsrfCookieExtractor = /** @class */ (function () {
	    function HttpXsrfCookieExtractor(doc, platform, cookieName) {
	        this.doc = doc;
	        this.platform = platform;
	        this.cookieName = cookieName;
	        this.lastCookieString = '';
	        this.lastToken = null;
	        /**
	         * @internal for testing
	         */
	        this.parseCount = 0;
	    }
	    HttpXsrfCookieExtractor.prototype.getToken = function () {
	        if (this.platform === 'server') {
	            return null;
	        }
	        var cookieString = this.doc.cookie || '';
	        if (cookieString !== this.lastCookieString) {
	            this.parseCount++;
	            this.lastToken = parseCookieValue(cookieString, this.cookieName);
	            this.lastCookieString = cookieString;
	        }
	        return this.lastToken;
	    };
	    HttpXsrfCookieExtractor = __decorate([
	        Injectable(),
	        __param(0, Inject(DOCUMENT$1)), __param(1, Inject(PLATFORM_ID)),
	        __param(2, Inject(XSRF_COOKIE_NAME)),
	        __metadata("design:paramtypes", [Object, String, String])
	    ], HttpXsrfCookieExtractor);
	    return HttpXsrfCookieExtractor;
	}());
	/**
	 * `HttpInterceptor` which adds an XSRF token to eligible outgoing requests.
	 */
	var HttpXsrfInterceptor = /** @class */ (function () {
	    function HttpXsrfInterceptor(tokenService, headerName) {
	        this.tokenService = tokenService;
	        this.headerName = headerName;
	    }
	    HttpXsrfInterceptor.prototype.intercept = function (req, next) {
	        var lcUrl = req.url.toLowerCase();
	        // Skip both non-mutating requests and absolute URLs.
	        // Non-mutating requests don't require a token, and absolute URLs require special handling
	        // anyway as the cookie set
	        // on our origin is not the same as the token expected by another origin.
	        if (req.method === 'GET' || req.method === 'HEAD' || lcUrl.startsWith('http://') ||
	            lcUrl.startsWith('https://')) {
	            return next.handle(req);
	        }
	        var token = this.tokenService.getToken();
	        // Be careful not to overwrite an existing header of the same name.
	        if (token !== null && !req.headers.has(this.headerName)) {
	            req = req.clone({ headers: req.headers.set(this.headerName, token) });
	        }
	        return next.handle(req);
	    };
	    HttpXsrfInterceptor = __decorate([
	        Injectable(),
	        __param(1, Inject(XSRF_HEADER_NAME)),
	        __metadata("design:paramtypes", [HttpXsrfTokenExtractor, String])
	    ], HttpXsrfInterceptor);
	    return HttpXsrfInterceptor;
	}());

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * An injectable `HttpHandler` that applies multiple interceptors
	 * to a request before passing it to the given `HttpBackend`.
	 *
	 * The interceptors are loaded lazily from the injector, to allow
	 * interceptors to themselves inject classes depending indirectly
	 * on `HttpInterceptingHandler` itself.
	 * @see `HttpInterceptor`
	 */
	var HttpInterceptingHandler = /** @class */ (function () {
	    function HttpInterceptingHandler(backend, injector) {
	        this.backend = backend;
	        this.injector = injector;
	        this.chain = null;
	    }
	    HttpInterceptingHandler.prototype.handle = function (req) {
	        if (this.chain === null) {
	            var interceptors = this.injector.get(HTTP_INTERCEPTORS, []);
	            this.chain = interceptors.reduceRight(function (next, interceptor) { return new HttpInterceptorHandler(next, interceptor); }, this.backend);
	        }
	        return this.chain.handle(req);
	    };
	    HttpInterceptingHandler = __decorate([
	        Injectable(),
	        __metadata("design:paramtypes", [HttpBackend, Injector])
	    ], HttpInterceptingHandler);
	    return HttpInterceptingHandler;
	}());
	/**
	 * Factory function that determines where to store JSONP callbacks.
	 *
	 * Ordinarily JSONP callbacks are stored on the `window` object, but this may not exist
	 * in test environments. In that case, callbacks are stored on an anonymous object instead.
	 *
	 *
	 */
	function jsonpCallbackContext() {
	    if (typeof window === 'object') {
	        return window;
	    }
	    return {};
	}
	/**
	 * Configures XSRF protection support for outgoing requests.
	 *
	 * For a server that supports a cookie-based XSRF protection system,
	 * use directly to configure XSRF protection with the correct
	 * cookie and header names.
	 *
	 * If no names are supplied, the default cookie name is `XSRF-TOKEN`
	 * and the default header name is `X-XSRF-TOKEN`.
	 *
	 * @publicApi
	 */
	var HttpClientXsrfModule = /** @class */ (function () {
	    function HttpClientXsrfModule() {
	    }
	    HttpClientXsrfModule_1 = HttpClientXsrfModule;
	    /**
	     * Disable the default XSRF protection.
	     */
	    HttpClientXsrfModule.disable = function () {
	        return {
	            ngModule: HttpClientXsrfModule_1,
	            providers: [
	                { provide: HttpXsrfInterceptor, useClass: NoopInterceptor },
	            ],
	        };
	    };
	    /**
	     * Configure XSRF protection.
	     * @param options An object that can specify either or both
	     * cookie name or header name.
	     * - Cookie name default is `XSRF-TOKEN`.
	     * - Header name default is `X-XSRF-TOKEN`.
	     *
	     */
	    HttpClientXsrfModule.withOptions = function (options) {
	        if (options === void 0) { options = {}; }
	        return {
	            ngModule: HttpClientXsrfModule_1,
	            providers: [
	                options.cookieName ? { provide: XSRF_COOKIE_NAME, useValue: options.cookieName } : [],
	                options.headerName ? { provide: XSRF_HEADER_NAME, useValue: options.headerName } : [],
	            ],
	        };
	    };
	    var HttpClientXsrfModule_1;
	    HttpClientXsrfModule = HttpClientXsrfModule_1 = __decorate([
	        NgModule({
	            providers: [
	                HttpXsrfInterceptor,
	                { provide: HTTP_INTERCEPTORS, useExisting: HttpXsrfInterceptor, multi: true },
	                { provide: HttpXsrfTokenExtractor, useClass: HttpXsrfCookieExtractor },
	                { provide: XSRF_COOKIE_NAME, useValue: 'XSRF-TOKEN' },
	                { provide: XSRF_HEADER_NAME, useValue: 'X-XSRF-TOKEN' },
	            ],
	        })
	    ], HttpClientXsrfModule);
	    return HttpClientXsrfModule;
	}());
	/**
	 * Configures the [dependency injector](guide/glossary#injector) for `HttpClient`
	 * with supporting services for XSRF. Automatically imported by `HttpClientModule`.
	 *
	 * You can add interceptors to the chain behind `HttpClient` by binding them to the
	 * multiprovider for built-in [DI token](guide/glossary#di-token) `HTTP_INTERCEPTORS`.
	 *
	 * @publicApi
	 */
	var HttpClientModule = /** @class */ (function () {
	    function HttpClientModule() {
	    }
	    HttpClientModule = __decorate([
	        NgModule({
	            /**
	             * Optional configuration for XSRF protection.
	             */
	            imports: [
	                HttpClientXsrfModule.withOptions({
	                    cookieName: 'XSRF-TOKEN',
	                    headerName: 'X-XSRF-TOKEN',
	                }),
	            ],
	            /**
	             * Configures the [dependency injector](guide/glossary#injector) where it is imported
	             * with supporting services for HTTP communications.
	             */
	            providers: [
	                HttpClient,
	                { provide: HttpHandler, useClass: HttpInterceptingHandler },
	                HttpXhrBackend,
	                { provide: HttpBackend, useExisting: HttpXhrBackend },
	                BrowserXhr,
	                { provide: XhrFactory, useExisting: BrowserXhr },
	            ],
	        })
	    ], HttpClientModule);
	    return HttpClientModule;
	}());
	/**
	 * Configures the [dependency injector](guide/glossary#injector) for `HttpClient`
	 * with supporting services for JSONP.
	 * Without this module, Jsonp requests reach the backend
	 * with method JSONP, where they are rejected.
	 *
	 * You can add interceptors to the chain behind `HttpClient` by binding them to the
	 * multiprovider for built-in [DI token](guide/glossary#di-token) `HTTP_INTERCEPTORS`.
	 *
	 * @publicApi
	 */
	var HttpClientJsonpModule = /** @class */ (function () {
	    function HttpClientJsonpModule() {
	    }
	    HttpClientJsonpModule = __decorate([
	        NgModule({
	            providers: [
	                JsonpClientBackend,
	                { provide: JsonpCallbackContext, useFactory: jsonpCallbackContext },
	                { provide: HTTP_INTERCEPTORS, useClass: JsonpInterceptor, multi: true },
	            ],
	        })
	    ], HttpClientJsonpModule);
	    return HttpClientJsonpModule;
	}());

	/**
	 * @license
	 * Copyright Google LLC All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	var TAB = 9;
	var ENTER = 13;
	var SPACE = 32;
	var END = 35;
	var HOME = 36;
	var LEFT_ARROW = 37;
	var UP_ARROW = 38;
	var RIGHT_ARROW = 39;
	var DOWN_ARROW = 40;
	var ZERO = 48;
	var NINE = 57;
	var A = 65;
	var Z = 90;

	/**
	 * @license
	 * Copyright Google LLC All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * Checks whether a modifier key is pressed.
	 * @param event Event to be checked.
	 */
	function hasModifierKey(event) {
	    var modifiers = [];
	    for (var _i = 1; _i < arguments.length; _i++) {
	        modifiers[_i - 1] = arguments[_i];
	    }
	    if (modifiers.length) {
	        return modifiers.some(function (modifier) { return event[modifier]; });
	    }
	    return event.altKey || event.shiftKey || event.ctrlKey || event.metaKey;
	}

	/**
	 * @license
	 * Copyright Google LLC All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/** Coerces a data-bound value (typically a string) to a boolean. */
	function coerceBooleanProperty(value) {
	    return value != null && "" + value !== 'false';
	}

	/**
	 * @license
	 * Copyright Google LLC All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	function coerceNumberProperty(value, fallbackValue) {
	    if (fallbackValue === void 0) { fallbackValue = 0; }
	    return _isNumberValue(value) ? Number(value) : fallbackValue;
	}
	/**
	 * Whether the provided value is considered a number.
	 * @docs-private
	 */
	function _isNumberValue(value) {
	    // parseFloat(value) handles most of the cases we're interested in (it treats null, empty string,
	    // and other non-number values as NaN, where Number just uses 0) but it considers the string
	    // '123hello' to be a valid number. Therefore we also check if Number(value) is NaN.
	    return !isNaN(parseFloat(value)) && !isNaN(Number(value));
	}

	/**
	 * @license
	 * Copyright Google LLC All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * Coerces an ElementRef or an Element into an element.
	 * Useful for APIs that can accept either a ref or the native element itself.
	 */
	function coerceElement(elementOrRef) {
	    return elementOrRef instanceof ElementRef ? elementOrRef.nativeElement : elementOrRef;
	}

	/**
	 * @license
	 * Copyright Google LLC All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	// Whether the current platform supports the V8 Break Iterator. The V8 check
	// is necessary to detect all Blink based browsers.
	var hasV8BreakIterator;
	// We need a try/catch around the reference to `Intl`, because accessing it in some cases can
	// cause IE to throw. These cases are tied to particular versions of Windows and can happen if
	// the consumer is providing a polyfilled `Map`. See:
	// https://github.com/Microsoft/ChakraCore/issues/3189
	// https://github.com/angular/components/issues/15687
	try {
	    hasV8BreakIterator = (typeof Intl !== 'undefined' && Intl.v8BreakIterator);
	}
	catch (_a) {
	    hasV8BreakIterator = false;
	}
	/**
	 * Service to detect the current platform by comparing the userAgent strings and
	 * checking browser-specific global properties.
	 */
	var Platform = /** @class */ (function () {
	    /**
	     * @breaking-change 8.0.0 remove optional decorator
	     */
	    function Platform(_platformId) {
	        this._platformId = _platformId;
	        // We want to use the Angular platform check because if the Document is shimmed
	        // without the navigator, the following checks will fail. This is preferred because
	        // sometimes the Document may be shimmed without the user's knowledge or intention
	        /** Whether the Angular application is being rendered in the browser. */
	        this.isBrowser = this._platformId ?
	            isPlatformBrowser(this._platformId) : typeof document === 'object' && !!document;
	        /** Whether the current browser is Microsoft Edge. */
	        this.EDGE = this.isBrowser && /(edge)/i.test(navigator.userAgent);
	        /** Whether the current rendering engine is Microsoft Trident. */
	        this.TRIDENT = this.isBrowser && /(msie|trident)/i.test(navigator.userAgent);
	        // EdgeHTML and Trident mock Blink specific things and need to be excluded from this check.
	        /** Whether the current rendering engine is Blink. */
	        this.BLINK = this.isBrowser && (!!(window.chrome || hasV8BreakIterator) &&
	            typeof CSS !== 'undefined' && !this.EDGE && !this.TRIDENT);
	        // Webkit is part of the userAgent in EdgeHTML, Blink and Trident. Therefore we need to
	        // ensure that Webkit runs standalone and is not used as another engine's base.
	        /** Whether the current rendering engine is WebKit. */
	        this.WEBKIT = this.isBrowser &&
	            /AppleWebKit/i.test(navigator.userAgent) && !this.BLINK && !this.EDGE && !this.TRIDENT;
	        /** Whether the current platform is Apple iOS. */
	        this.IOS = this.isBrowser && /iPad|iPhone|iPod/.test(navigator.userAgent) &&
	            !('MSStream' in window);
	        // It's difficult to detect the plain Gecko engine, because most of the browsers identify
	        // them self as Gecko-like browsers and modify the userAgent's according to that.
	        // Since we only cover one explicit Firefox case, we can simply check for Firefox
	        // instead of having an unstable check for Gecko.
	        /** Whether the current browser is Firefox. */
	        this.FIREFOX = this.isBrowser && /(firefox|minefield)/i.test(navigator.userAgent);
	        /** Whether the current platform is Android. */
	        // Trident on mobile adds the android platform to the userAgent to trick detections.
	        this.ANDROID = this.isBrowser && /android/i.test(navigator.userAgent) && !this.TRIDENT;
	        // Safari browsers will include the Safari keyword in their userAgent. Some browsers may fake
	        // this and just place the Safari keyword in the userAgent. To be more safe about Safari every
	        // Safari browser should also use Webkit as its layout engine.
	        /** Whether the current browser is Safari. */
	        this.SAFARI = this.isBrowser && /safari/i.test(navigator.userAgent) && this.WEBKIT;
	    }
	    Platform.decorators = [
	        { type: Injectable, args: [{ providedIn: 'root' },] }
	    ];
	    /** @nocollapse */
	    Platform.ctorParameters = function () { return [
	        { type: Object, decorators: [{ type: Optional }, { type: Inject, args: [PLATFORM_ID,] }] }
	    ]; };
	    Platform.Éµprov = ÉµÉµdefineInjectable({ factory: function Platform_Factory() { return new Platform(ÉµÉµinject(PLATFORM_ID, 8)); }, token: Platform, providedIn: "root" });
	    return Platform;
	}());

	/**
	 * @license
	 * Copyright Google LLC All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	var PlatformModule = /** @class */ (function () {
	    function PlatformModule() {
	    }
	    PlatformModule.decorators = [
	        { type: NgModule, args: [{},] }
	    ];
	    return PlatformModule;
	}());

	/**
	 * @license
	 * Copyright Google LLC All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/** Cached result of whether the user's browser supports passive event listeners. */
	var supportsPassiveEvents;
	/**
	 * Checks whether the user's browser supports passive event listeners.
	 * See: https://github.com/WICG/EventListenerOptions/blob/gh-pages/explainer.md
	 */
	function supportsPassiveEventListeners() {
	    if (supportsPassiveEvents == null && typeof window !== 'undefined') {
	        try {
	            window.addEventListener('test', null, Object.defineProperty({}, 'passive', {
	                get: function () { return supportsPassiveEvents = true; }
	            }));
	        }
	        finally {
	            supportsPassiveEvents = supportsPassiveEvents || false;
	        }
	    }
	    return supportsPassiveEvents;
	}
	/**
	 * Normalizes an `AddEventListener` object to something that can be passed
	 * to `addEventListener` on any browser, no matter whether it supports the
	 * `options` parameter.
	 * @param options Object to be normalized.
	 */
	function normalizePassiveListenerOptions(options) {
	    return supportsPassiveEventListeners() ? options : !!options.capture;
	}

	/**
	 * @license
	 * Copyright Google LLC All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	var shadowDomIsSupported;
	/** Checks whether the user's browser support Shadow DOM. */
	function _supportsShadowDom() {
	    if (shadowDomIsSupported == null) {
	        var head = typeof document !== 'undefined' ? document.head : null;
	        shadowDomIsSupported = !!(head && (head.createShadowRoot || head.attachShadow));
	    }
	    return shadowDomIsSupported;
	}
	/** Gets the shadow root of an element, if supported and the element is inside the Shadow DOM. */
	function _getShadowRoot(element) {
	    if (_supportsShadowDom()) {
	        var rootNode = element.getRootNode ? element.getRootNode() : null;
	        // Note that this should be caught by `_supportsShadowDom`, but some
	        // teams have been able to hit this code path on unsupported browsers.
	        if (typeof ShadowRoot !== 'undefined' && ShadowRoot && rootNode instanceof ShadowRoot) {
	            return rootNode;
	        }
	    }
	    return null;
	}

	/**
	 * @license
	 * Copyright Google LLC All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * Factory that creates a new MutationObserver and allows us to stub it out in unit tests.
	 * @docs-private
	 */
	var MutationObserverFactory = /** @class */ (function () {
	    function MutationObserverFactory() {
	    }
	    MutationObserverFactory.prototype.create = function (callback) {
	        return typeof MutationObserver === 'undefined' ? null : new MutationObserver(callback);
	    };
	    MutationObserverFactory.decorators = [
	        { type: Injectable, args: [{ providedIn: 'root' },] }
	    ];
	    MutationObserverFactory.Éµprov = ÉµÉµdefineInjectable({ factory: function MutationObserverFactory_Factory() { return new MutationObserverFactory(); }, token: MutationObserverFactory, providedIn: "root" });
	    return MutationObserverFactory;
	}());
	/** An injectable service that allows watching elements for changes to their content. */
	var ContentObserver = /** @class */ (function () {
	    function ContentObserver(_mutationObserverFactory) {
	        this._mutationObserverFactory = _mutationObserverFactory;
	        /** Keeps track of the existing MutationObservers so they can be reused. */
	        this._observedElements = new Map();
	    }
	    ContentObserver.prototype.ngOnDestroy = function () {
	        var _this = this;
	        this._observedElements.forEach(function (_, element) { return _this._cleanupObserver(element); });
	    };
	    ContentObserver.prototype.observe = function (elementOrRef) {
	        var _this = this;
	        var element = coerceElement(elementOrRef);
	        return new Observable(function (observer) {
	            var stream = _this._observeElement(element);
	            var subscription = stream.subscribe(observer);
	            return function () {
	                subscription.unsubscribe();
	                _this._unobserveElement(element);
	            };
	        });
	    };
	    /**
	     * Observes the given element by using the existing MutationObserver if available, or creating a
	     * new one if not.
	     */
	    ContentObserver.prototype._observeElement = function (element) {
	        if (!this._observedElements.has(element)) {
	            var stream_1 = new Subject();
	            var observer = this._mutationObserverFactory.create(function (mutations) { return stream_1.next(mutations); });
	            if (observer) {
	                observer.observe(element, {
	                    characterData: true,
	                    childList: true,
	                    subtree: true
	                });
	            }
	            this._observedElements.set(element, { observer: observer, stream: stream_1, count: 1 });
	        }
	        else {
	            this._observedElements.get(element).count++;
	        }
	        return this._observedElements.get(element).stream;
	    };
	    /**
	     * Un-observes the given element and cleans up the underlying MutationObserver if nobody else is
	     * observing this element.
	     */
	    ContentObserver.prototype._unobserveElement = function (element) {
	        if (this._observedElements.has(element)) {
	            this._observedElements.get(element).count--;
	            if (!this._observedElements.get(element).count) {
	                this._cleanupObserver(element);
	            }
	        }
	    };
	    /** Clean up the underlying MutationObserver for the specified element. */
	    ContentObserver.prototype._cleanupObserver = function (element) {
	        if (this._observedElements.has(element)) {
	            var _a = this._observedElements.get(element), observer = _a.observer, stream = _a.stream;
	            if (observer) {
	                observer.disconnect();
	            }
	            stream.complete();
	            this._observedElements.delete(element);
	        }
	    };
	    ContentObserver.decorators = [
	        { type: Injectable, args: [{ providedIn: 'root' },] }
	    ];
	    /** @nocollapse */
	    ContentObserver.ctorParameters = function () { return [
	        { type: MutationObserverFactory }
	    ]; };
	    ContentObserver.Éµprov = ÉµÉµdefineInjectable({ factory: function ContentObserver_Factory() { return new ContentObserver(ÉµÉµinject(MutationObserverFactory)); }, token: ContentObserver, providedIn: "root" });
	    return ContentObserver;
	}());
	/**
	 * Directive that triggers a callback whenever the content of
	 * its associated element has changed.
	 */
	var CdkObserveContent = /** @class */ (function () {
	    function CdkObserveContent(_contentObserver, _elementRef, _ngZone) {
	        this._contentObserver = _contentObserver;
	        this._elementRef = _elementRef;
	        this._ngZone = _ngZone;
	        /** Event emitted for each change in the element's content. */
	        this.event = new EventEmitter();
	        this._disabled = false;
	        this._currentSubscription = null;
	    }
	    Object.defineProperty(CdkObserveContent.prototype, "disabled", {
	        /**
	         * Whether observing content is disabled. This option can be used
	         * to disconnect the underlying MutationObserver until it is needed.
	         */
	        get: function () { return this._disabled; },
	        set: function (value) {
	            this._disabled = coerceBooleanProperty(value);
	            this._disabled ? this._unsubscribe() : this._subscribe();
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(CdkObserveContent.prototype, "debounce", {
	        /** Debounce interval for emitting the changes. */
	        get: function () { return this._debounce; },
	        set: function (value) {
	            this._debounce = coerceNumberProperty(value);
	            this._subscribe();
	        },
	        enumerable: true,
	        configurable: true
	    });
	    CdkObserveContent.prototype.ngAfterContentInit = function () {
	        if (!this._currentSubscription && !this.disabled) {
	            this._subscribe();
	        }
	    };
	    CdkObserveContent.prototype.ngOnDestroy = function () {
	        this._unsubscribe();
	    };
	    CdkObserveContent.prototype._subscribe = function () {
	        var _this = this;
	        this._unsubscribe();
	        var stream = this._contentObserver.observe(this._elementRef);
	        // TODO(mmalerba): We shouldn't be emitting on this @Output() outside the zone.
	        // Consider brining it back inside the zone next time we're making breaking changes.
	        // Bringing it back inside can cause things like infinite change detection loops and changed
	        // after checked errors if people's code isn't handling it properly.
	        this._ngZone.runOutsideAngular(function () {
	            _this._currentSubscription =
	                (_this.debounce ? stream.pipe(debounceTime(_this.debounce)) : stream).subscribe(_this.event);
	        });
	    };
	    CdkObserveContent.prototype._unsubscribe = function () {
	        if (this._currentSubscription) {
	            this._currentSubscription.unsubscribe();
	        }
	    };
	    CdkObserveContent.decorators = [
	        { type: Directive, args: [{
	                    selector: '[cdkObserveContent]',
	                    exportAs: 'cdkObserveContent',
	                },] }
	    ];
	    /** @nocollapse */
	    CdkObserveContent.ctorParameters = function () { return [
	        { type: ContentObserver },
	        { type: ElementRef },
	        { type: NgZone }
	    ]; };
	    CdkObserveContent.propDecorators = {
	        event: [{ type: Output, args: ['cdkObserveContent',] }],
	        disabled: [{ type: Input, args: ['cdkObserveContentDisabled',] }],
	        debounce: [{ type: Input }]
	    };
	    return CdkObserveContent;
	}());

	/**
	 * @license
	 * Copyright Google LLC All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/** IDs are delimited by an empty space, as per the spec. */
	var ID_DELIMITER = ' ';
	/**
	 * Adds the given ID to the specified ARIA attribute on an element.
	 * Used for attributes such as aria-labelledby, aria-owns, etc.
	 */
	function addAriaReferencedId(el, attr, id) {
	    var ids = getAriaReferenceIds(el, attr);
	    if (ids.some(function (existingId) { return existingId.trim() == id.trim(); })) {
	        return;
	    }
	    ids.push(id.trim());
	    el.setAttribute(attr, ids.join(ID_DELIMITER));
	}
	/**
	 * Removes the given ID from the specified ARIA attribute on an element.
	 * Used for attributes such as aria-labelledby, aria-owns, etc.
	 */
	function removeAriaReferencedId(el, attr, id) {
	    var ids = getAriaReferenceIds(el, attr);
	    var filteredIds = ids.filter(function (val) { return val != id.trim(); });
	    if (filteredIds.length) {
	        el.setAttribute(attr, filteredIds.join(ID_DELIMITER));
	    }
	    else {
	        el.removeAttribute(attr);
	    }
	}
	/**
	 * Gets the list of IDs referenced by the given ARIA attribute on an element.
	 * Used for attributes such as aria-labelledby, aria-owns, etc.
	 */
	function getAriaReferenceIds(el, attr) {
	    // Get string array of all individual ids (whitespace delimited) in the attribute value
	    return (el.getAttribute(attr) || '').match(/\S+/g) || [];
	}

	/**
	 * @license
	 * Copyright Google LLC All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/** ID used for the body container where all messages are appended. */
	var MESSAGES_CONTAINER_ID = 'cdk-describedby-message-container';
	/** ID prefix used for each created message element. */
	var CDK_DESCRIBEDBY_ID_PREFIX = 'cdk-describedby-message';
	/** Attribute given to each host element that is described by a message element. */
	var CDK_DESCRIBEDBY_HOST_ATTRIBUTE = 'cdk-describedby-host';
	/** Global incremental identifier for each registered message element. */
	var nextId = 0;
	/** Global map of all registered message elements that have been placed into the document. */
	var messageRegistry = new Map();
	/** Container for all registered messages. */
	var messagesContainer = null;
	/**
	 * Utility that creates visually hidden elements with a message content. Useful for elements that
	 * want to use aria-describedby to further describe themselves without adding additional visual
	 * content.
	 */
	var AriaDescriber = /** @class */ (function () {
	    function AriaDescriber(_document) {
	        this._document = _document;
	    }
	    /**
	     * Adds to the host element an aria-describedby reference to a hidden element that contains
	     * the message. If the same message has already been registered, then it will reuse the created
	     * message element.
	     */
	    AriaDescriber.prototype.describe = function (hostElement, message) {
	        if (!this._canBeDescribed(hostElement, message)) {
	            return;
	        }
	        if (typeof message !== 'string') {
	            // We need to ensure that the element has an ID.
	            this._setMessageId(message);
	            messageRegistry.set(message, { messageElement: message, referenceCount: 0 });
	        }
	        else if (!messageRegistry.has(message)) {
	            this._createMessageElement(message);
	        }
	        if (!this._isElementDescribedByMessage(hostElement, message)) {
	            this._addMessageReference(hostElement, message);
	        }
	    };
	    /** Removes the host element's aria-describedby reference to the message element. */
	    AriaDescriber.prototype.removeDescription = function (hostElement, message) {
	        if (!this._isElementNode(hostElement)) {
	            return;
	        }
	        if (this._isElementDescribedByMessage(hostElement, message)) {
	            this._removeMessageReference(hostElement, message);
	        }
	        // If the message is a string, it means that it's one that we created for the
	        // consumer so we can remove it safely, otherwise we should leave it in place.
	        if (typeof message === 'string') {
	            var registeredMessage = messageRegistry.get(message);
	            if (registeredMessage && registeredMessage.referenceCount === 0) {
	                this._deleteMessageElement(message);
	            }
	        }
	        if (messagesContainer && messagesContainer.childNodes.length === 0) {
	            this._deleteMessagesContainer();
	        }
	    };
	    /** Unregisters all created message elements and removes the message container. */
	    AriaDescriber.prototype.ngOnDestroy = function () {
	        var describedElements = this._document.querySelectorAll("[" + CDK_DESCRIBEDBY_HOST_ATTRIBUTE + "]");
	        for (var i = 0; i < describedElements.length; i++) {
	            this._removeCdkDescribedByReferenceIds(describedElements[i]);
	            describedElements[i].removeAttribute(CDK_DESCRIBEDBY_HOST_ATTRIBUTE);
	        }
	        if (messagesContainer) {
	            this._deleteMessagesContainer();
	        }
	        messageRegistry.clear();
	    };
	    /**
	     * Creates a new element in the visually hidden message container element with the message
	     * as its content and adds it to the message registry.
	     */
	    AriaDescriber.prototype._createMessageElement = function (message) {
	        var messageElement = this._document.createElement('div');
	        this._setMessageId(messageElement);
	        messageElement.textContent = message;
	        this._createMessagesContainer();
	        messagesContainer.appendChild(messageElement);
	        messageRegistry.set(message, { messageElement: messageElement, referenceCount: 0 });
	    };
	    /** Assigns a unique ID to an element, if it doesn't have one already. */
	    AriaDescriber.prototype._setMessageId = function (element) {
	        if (!element.id) {
	            element.id = CDK_DESCRIBEDBY_ID_PREFIX + "-" + nextId++;
	        }
	    };
	    /** Deletes the message element from the global messages container. */
	    AriaDescriber.prototype._deleteMessageElement = function (message) {
	        var registeredMessage = messageRegistry.get(message);
	        var messageElement = registeredMessage && registeredMessage.messageElement;
	        if (messagesContainer && messageElement) {
	            messagesContainer.removeChild(messageElement);
	        }
	        messageRegistry.delete(message);
	    };
	    /** Creates the global container for all aria-describedby messages. */
	    AriaDescriber.prototype._createMessagesContainer = function () {
	        if (!messagesContainer) {
	            var preExistingContainer = this._document.getElementById(MESSAGES_CONTAINER_ID);
	            // When going from the server to the client, we may end up in a situation where there's
	            // already a container on the page, but we don't have a reference to it. Clear the
	            // old container so we don't get duplicates. Doing this, instead of emptying the previous
	            // container, should be slightly faster.
	            if (preExistingContainer) {
	                preExistingContainer.parentNode.removeChild(preExistingContainer);
	            }
	            messagesContainer = this._document.createElement('div');
	            messagesContainer.id = MESSAGES_CONTAINER_ID;
	            messagesContainer.setAttribute('aria-hidden', 'true');
	            messagesContainer.style.display = 'none';
	            this._document.body.appendChild(messagesContainer);
	        }
	    };
	    /** Deletes the global messages container. */
	    AriaDescriber.prototype._deleteMessagesContainer = function () {
	        if (messagesContainer && messagesContainer.parentNode) {
	            messagesContainer.parentNode.removeChild(messagesContainer);
	            messagesContainer = null;
	        }
	    };
	    /** Removes all cdk-describedby messages that are hosted through the element. */
	    AriaDescriber.prototype._removeCdkDescribedByReferenceIds = function (element) {
	        // Remove all aria-describedby reference IDs that are prefixed by CDK_DESCRIBEDBY_ID_PREFIX
	        var originalReferenceIds = getAriaReferenceIds(element, 'aria-describedby')
	            .filter(function (id) { return id.indexOf(CDK_DESCRIBEDBY_ID_PREFIX) != 0; });
	        element.setAttribute('aria-describedby', originalReferenceIds.join(' '));
	    };
	    /**
	     * Adds a message reference to the element using aria-describedby and increments the registered
	     * message's reference count.
	     */
	    AriaDescriber.prototype._addMessageReference = function (element, message) {
	        var registeredMessage = messageRegistry.get(message);
	        // Add the aria-describedby reference and set the
	        // describedby_host attribute to mark the element.
	        addAriaReferencedId(element, 'aria-describedby', registeredMessage.messageElement.id);
	        element.setAttribute(CDK_DESCRIBEDBY_HOST_ATTRIBUTE, '');
	        registeredMessage.referenceCount++;
	    };
	    /**
	     * Removes a message reference from the element using aria-describedby
	     * and decrements the registered message's reference count.
	     */
	    AriaDescriber.prototype._removeMessageReference = function (element, message) {
	        var registeredMessage = messageRegistry.get(message);
	        registeredMessage.referenceCount--;
	        removeAriaReferencedId(element, 'aria-describedby', registeredMessage.messageElement.id);
	        element.removeAttribute(CDK_DESCRIBEDBY_HOST_ATTRIBUTE);
	    };
	    /** Returns true if the element has been described by the provided message ID. */
	    AriaDescriber.prototype._isElementDescribedByMessage = function (element, message) {
	        var referenceIds = getAriaReferenceIds(element, 'aria-describedby');
	        var registeredMessage = messageRegistry.get(message);
	        var messageId = registeredMessage && registeredMessage.messageElement.id;
	        return !!messageId && referenceIds.indexOf(messageId) != -1;
	    };
	    /** Determines whether a message can be described on a particular element. */
	    AriaDescriber.prototype._canBeDescribed = function (element, message) {
	        if (!this._isElementNode(element)) {
	            return false;
	        }
	        if (message && typeof message === 'object') {
	            // We'd have to make some assumptions about the description element's text, if the consumer
	            // passed in an element. Assume that if an element is passed in, the consumer has verified
	            // that it can be used as a description.
	            return true;
	        }
	        var trimmedMessage = message == null ? '' : ("" + message).trim();
	        var ariaLabel = element.getAttribute('aria-label');
	        // We shouldn't set descriptions if they're exactly the same as the `aria-label` of the
	        // element, because screen readers will end up reading out the same text twice in a row.
	        return trimmedMessage ? (!ariaLabel || ariaLabel.trim() !== trimmedMessage) : false;
	    };
	    /** Checks whether a node is an Element node. */
	    AriaDescriber.prototype._isElementNode = function (element) {
	        return element.nodeType === this._document.ELEMENT_NODE;
	    };
	    AriaDescriber.decorators = [
	        { type: Injectable, args: [{ providedIn: 'root' },] }
	    ];
	    /** @nocollapse */
	    AriaDescriber.ctorParameters = function () { return [
	        { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT$1,] }] }
	    ]; };
	    AriaDescriber.Éµprov = ÉµÉµdefineInjectable({ factory: function AriaDescriber_Factory() { return new AriaDescriber(ÉµÉµinject(DOCUMENT$1)); }, token: AriaDescriber, providedIn: "root" });
	    return AriaDescriber;
	}());

	/**
	 * @license
	 * Copyright Google LLC All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * This class manages keyboard events for selectable lists. If you pass it a query list
	 * of items, it will set the active item correctly when arrow events occur.
	 */
	var ListKeyManager = /** @class */ (function () {
	    function ListKeyManager(_items) {
	        var _this = this;
	        this._items = _items;
	        this._activeItemIndex = -1;
	        this._activeItem = null;
	        this._wrap = false;
	        this._letterKeyStream = new Subject();
	        this._typeaheadSubscription = Subscription.EMPTY;
	        this._vertical = true;
	        this._allowedModifierKeys = [];
	        /**
	         * Predicate function that can be used to check whether an item should be skipped
	         * by the key manager. By default, disabled items are skipped.
	         */
	        this._skipPredicateFn = function (item) { return item.disabled; };
	        // Buffer for the letters that the user has pressed when the typeahead option is turned on.
	        this._pressedLetters = [];
	        /**
	         * Stream that emits any time the TAB key is pressed, so components can react
	         * when focus is shifted off of the list.
	         */
	        this.tabOut = new Subject();
	        /** Stream that emits whenever the active item of the list manager changes. */
	        this.change = new Subject();
	        // We allow for the items to be an array because, in some cases, the consumer may
	        // not have access to a QueryList of the items they want to manage (e.g. when the
	        // items aren't being collected via `ViewChildren` or `ContentChildren`).
	        if (_items instanceof QueryList) {
	            _items.changes.subscribe(function (newItems) {
	                if (_this._activeItem) {
	                    var itemArray = newItems.toArray();
	                    var newIndex = itemArray.indexOf(_this._activeItem);
	                    if (newIndex > -1 && newIndex !== _this._activeItemIndex) {
	                        _this._activeItemIndex = newIndex;
	                    }
	                }
	            });
	        }
	    }
	    /**
	     * Sets the predicate function that determines which items should be skipped by the
	     * list key manager.
	     * @param predicate Function that determines whether the given item should be skipped.
	     */
	    ListKeyManager.prototype.skipPredicate = function (predicate) {
	        this._skipPredicateFn = predicate;
	        return this;
	    };
	    /**
	     * Configures wrapping mode, which determines whether the active item will wrap to
	     * the other end of list when there are no more items in the given direction.
	     * @param shouldWrap Whether the list should wrap when reaching the end.
	     */
	    ListKeyManager.prototype.withWrap = function (shouldWrap) {
	        if (shouldWrap === void 0) { shouldWrap = true; }
	        this._wrap = shouldWrap;
	        return this;
	    };
	    /**
	     * Configures whether the key manager should be able to move the selection vertically.
	     * @param enabled Whether vertical selection should be enabled.
	     */
	    ListKeyManager.prototype.withVerticalOrientation = function (enabled) {
	        if (enabled === void 0) { enabled = true; }
	        this._vertical = enabled;
	        return this;
	    };
	    /**
	     * Configures the key manager to move the selection horizontally.
	     * Passing in `null` will disable horizontal movement.
	     * @param direction Direction in which the selection can be moved.
	     */
	    ListKeyManager.prototype.withHorizontalOrientation = function (direction) {
	        this._horizontal = direction;
	        return this;
	    };
	    /**
	     * Modifier keys which are allowed to be held down and whose default actions will be prevented
	     * as the user is pressing the arrow keys. Defaults to not allowing any modifier keys.
	     */
	    ListKeyManager.prototype.withAllowedModifierKeys = function (keys) {
	        this._allowedModifierKeys = keys;
	        return this;
	    };
	    /**
	     * Turns on typeahead mode which allows users to set the active item by typing.
	     * @param debounceInterval Time to wait after the last keystroke before setting the active item.
	     */
	    ListKeyManager.prototype.withTypeAhead = function (debounceInterval) {
	        var _this = this;
	        if (debounceInterval === void 0) { debounceInterval = 200; }
	        if (this._items.length && this._items.some(function (item) { return typeof item.getLabel !== 'function'; })) {
	            throw Error('ListKeyManager items in typeahead mode must implement the `getLabel` method.');
	        }
	        this._typeaheadSubscription.unsubscribe();
	        // Debounce the presses of non-navigational keys, collect the ones that correspond to letters
	        // and convert those letters back into a string. Afterwards find the first item that starts
	        // with that string and select it.
	        this._typeaheadSubscription = this._letterKeyStream.pipe(tap(function (letter) { return _this._pressedLetters.push(letter); }), debounceTime(debounceInterval), filter(function () { return _this._pressedLetters.length > 0; }), map(function () { return _this._pressedLetters.join(''); })).subscribe(function (inputString) {
	            var items = _this._getItemsArray();
	            // Start at 1 because we want to start searching at the item immediately
	            // following the current active item.
	            for (var i = 1; i < items.length + 1; i++) {
	                var index = (_this._activeItemIndex + i) % items.length;
	                var item = items[index];
	                if (!_this._skipPredicateFn(item) &&
	                    item.getLabel().toUpperCase().trim().indexOf(inputString) === 0) {
	                    _this.setActiveItem(index);
	                    break;
	                }
	            }
	            _this._pressedLetters = [];
	        });
	        return this;
	    };
	    ListKeyManager.prototype.setActiveItem = function (item) {
	        var previousIndex = this._activeItemIndex;
	        this.updateActiveItem(item);
	        if (this._activeItemIndex !== previousIndex) {
	            this.change.next(this._activeItemIndex);
	        }
	    };
	    /**
	     * Sets the active item depending on the key event passed in.
	     * @param event Keyboard event to be used for determining which element should be active.
	     */
	    ListKeyManager.prototype.onKeydown = function (event) {
	        var _this = this;
	        var keyCode = event.keyCode;
	        var modifiers = ['altKey', 'ctrlKey', 'metaKey', 'shiftKey'];
	        var isModifierAllowed = modifiers.every(function (modifier) {
	            return !event[modifier] || _this._allowedModifierKeys.indexOf(modifier) > -1;
	        });
	        switch (keyCode) {
	            case TAB:
	                this.tabOut.next();
	                return;
	            case DOWN_ARROW:
	                if (this._vertical && isModifierAllowed) {
	                    this.setNextItemActive();
	                    break;
	                }
	                else {
	                    return;
	                }
	            case UP_ARROW:
	                if (this._vertical && isModifierAllowed) {
	                    this.setPreviousItemActive();
	                    break;
	                }
	                else {
	                    return;
	                }
	            case RIGHT_ARROW:
	                if (this._horizontal && isModifierAllowed) {
	                    this._horizontal === 'rtl' ? this.setPreviousItemActive() : this.setNextItemActive();
	                    break;
	                }
	                else {
	                    return;
	                }
	            case LEFT_ARROW:
	                if (this._horizontal && isModifierAllowed) {
	                    this._horizontal === 'rtl' ? this.setNextItemActive() : this.setPreviousItemActive();
	                    break;
	                }
	                else {
	                    return;
	                }
	            default:
	                if (isModifierAllowed || hasModifierKey(event, 'shiftKey')) {
	                    // Attempt to use the `event.key` which also maps it to the user's keyboard language,
	                    // otherwise fall back to resolving alphanumeric characters via the keyCode.
	                    if (event.key && event.key.length === 1) {
	                        this._letterKeyStream.next(event.key.toLocaleUpperCase());
	                    }
	                    else if ((keyCode >= A && keyCode <= Z) || (keyCode >= ZERO && keyCode <= NINE)) {
	                        this._letterKeyStream.next(String.fromCharCode(keyCode));
	                    }
	                }
	                // Note that we return here, in order to avoid preventing
	                // the default action of non-navigational keys.
	                return;
	        }
	        this._pressedLetters = [];
	        event.preventDefault();
	    };
	    Object.defineProperty(ListKeyManager.prototype, "activeItemIndex", {
	        /** Index of the currently active item. */
	        get: function () {
	            return this._activeItemIndex;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(ListKeyManager.prototype, "activeItem", {
	        /** The active item. */
	        get: function () {
	            return this._activeItem;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    /** Gets whether the user is currently typing into the manager using the typeahead feature. */
	    ListKeyManager.prototype.isTyping = function () {
	        return this._pressedLetters.length > 0;
	    };
	    /** Sets the active item to the first enabled item in the list. */
	    ListKeyManager.prototype.setFirstItemActive = function () {
	        this._setActiveItemByIndex(0, 1);
	    };
	    /** Sets the active item to the last enabled item in the list. */
	    ListKeyManager.prototype.setLastItemActive = function () {
	        this._setActiveItemByIndex(this._items.length - 1, -1);
	    };
	    /** Sets the active item to the next enabled item in the list. */
	    ListKeyManager.prototype.setNextItemActive = function () {
	        this._activeItemIndex < 0 ? this.setFirstItemActive() : this._setActiveItemByDelta(1);
	    };
	    /** Sets the active item to a previous enabled item in the list. */
	    ListKeyManager.prototype.setPreviousItemActive = function () {
	        this._activeItemIndex < 0 && this._wrap ? this.setLastItemActive()
	            : this._setActiveItemByDelta(-1);
	    };
	    ListKeyManager.prototype.updateActiveItem = function (item) {
	        var itemArray = this._getItemsArray();
	        var index = typeof item === 'number' ? item : itemArray.indexOf(item);
	        var activeItem = itemArray[index];
	        // Explicitly check for `null` and `undefined` because other falsy values are valid.
	        this._activeItem = activeItem == null ? null : activeItem;
	        this._activeItemIndex = index;
	    };
	    /**
	     * This method sets the active item, given a list of items and the delta between the
	     * currently active item and the new active item. It will calculate differently
	     * depending on whether wrap mode is turned on.
	     */
	    ListKeyManager.prototype._setActiveItemByDelta = function (delta) {
	        this._wrap ? this._setActiveInWrapMode(delta) : this._setActiveInDefaultMode(delta);
	    };
	    /**
	     * Sets the active item properly given "wrap" mode. In other words, it will continue to move
	     * down the list until it finds an item that is not disabled, and it will wrap if it
	     * encounters either end of the list.
	     */
	    ListKeyManager.prototype._setActiveInWrapMode = function (delta) {
	        var items = this._getItemsArray();
	        for (var i = 1; i <= items.length; i++) {
	            var index = (this._activeItemIndex + (delta * i) + items.length) % items.length;
	            var item = items[index];
	            if (!this._skipPredicateFn(item)) {
	                this.setActiveItem(index);
	                return;
	            }
	        }
	    };
	    /**
	     * Sets the active item properly given the default mode. In other words, it will
	     * continue to move down the list until it finds an item that is not disabled. If
	     * it encounters either end of the list, it will stop and not wrap.
	     */
	    ListKeyManager.prototype._setActiveInDefaultMode = function (delta) {
	        this._setActiveItemByIndex(this._activeItemIndex + delta, delta);
	    };
	    /**
	     * Sets the active item to the first enabled item starting at the index specified. If the
	     * item is disabled, it will move in the fallbackDelta direction until it either
	     * finds an enabled item or encounters the end of the list.
	     */
	    ListKeyManager.prototype._setActiveItemByIndex = function (index, fallbackDelta) {
	        var items = this._getItemsArray();
	        if (!items[index]) {
	            return;
	        }
	        while (this._skipPredicateFn(items[index])) {
	            index += fallbackDelta;
	            if (!items[index]) {
	                return;
	            }
	        }
	        this.setActiveItem(index);
	    };
	    /** Returns the items as an array. */
	    ListKeyManager.prototype._getItemsArray = function () {
	        return this._items instanceof QueryList ? this._items.toArray() : this._items;
	    };
	    return ListKeyManager;
	}());

	/**
	 * @license
	 * Copyright Google LLC All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	var ActiveDescendantKeyManager = /** @class */ (function (_super) {
	    __extends(ActiveDescendantKeyManager, _super);
	    function ActiveDescendantKeyManager() {
	        return _super !== null && _super.apply(this, arguments) || this;
	    }
	    ActiveDescendantKeyManager.prototype.setActiveItem = function (index) {
	        if (this.activeItem) {
	            this.activeItem.setInactiveStyles();
	        }
	        _super.prototype.setActiveItem.call(this, index);
	        if (this.activeItem) {
	            this.activeItem.setActiveStyles();
	        }
	    };
	    return ActiveDescendantKeyManager;
	}(ListKeyManager));

	/**
	 * @license
	 * Copyright Google LLC All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	var FocusKeyManager = /** @class */ (function (_super) {
	    __extends(FocusKeyManager, _super);
	    function FocusKeyManager() {
	        var _this = _super !== null && _super.apply(this, arguments) || this;
	        _this._origin = 'program';
	        return _this;
	    }
	    /**
	     * Sets the focus origin that will be passed in to the items for any subsequent `focus` calls.
	     * @param origin Focus origin to be used when focusing items.
	     */
	    FocusKeyManager.prototype.setFocusOrigin = function (origin) {
	        this._origin = origin;
	        return this;
	    };
	    FocusKeyManager.prototype.setActiveItem = function (item) {
	        _super.prototype.setActiveItem.call(this, item);
	        if (this.activeItem) {
	            this.activeItem.focus(this._origin);
	        }
	    };
	    return FocusKeyManager;
	}(ListKeyManager));

	/**
	 * @license
	 * Copyright Google LLC All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	// The InteractivityChecker leans heavily on the ally.js accessibility utilities.
	// Methods like `isTabbable` are only covering specific edge-cases for the browsers which are
	// supported.
	/**
	 * Utility for checking the interactivity of an element, such as whether is is focusable or
	 * tabbable.
	 */
	var InteractivityChecker = /** @class */ (function () {
	    function InteractivityChecker(_platform) {
	        this._platform = _platform;
	    }
	    /**
	     * Gets whether an element is disabled.
	     *
	     * @param element Element to be checked.
	     * @returns Whether the element is disabled.
	     */
	    InteractivityChecker.prototype.isDisabled = function (element) {
	        // This does not capture some cases, such as a non-form control with a disabled attribute or
	        // a form control inside of a disabled form, but should capture the most common cases.
	        return element.hasAttribute('disabled');
	    };
	    /**
	     * Gets whether an element is visible for the purposes of interactivity.
	     *
	     * This will capture states like `display: none` and `visibility: hidden`, but not things like
	     * being clipped by an `overflow: hidden` parent or being outside the viewport.
	     *
	     * @returns Whether the element is visible.
	     */
	    InteractivityChecker.prototype.isVisible = function (element) {
	        return hasGeometry(element) && getComputedStyle(element).visibility === 'visible';
	    };
	    /**
	     * Gets whether an element can be reached via Tab key.
	     * Assumes that the element has already been checked with isFocusable.
	     *
	     * @param element Element to be checked.
	     * @returns Whether the element is tabbable.
	     */
	    InteractivityChecker.prototype.isTabbable = function (element) {
	        // Nothing is tabbable on the server ð
	        if (!this._platform.isBrowser) {
	            return false;
	        }
	        var frameElement = getFrameElement(getWindow(element));
	        if (frameElement) {
	            var frameType = frameElement && frameElement.nodeName.toLowerCase();
	            // Frame elements inherit their tabindex onto all child elements.
	            if (getTabIndexValue(frameElement) === -1) {
	                return false;
	            }
	            // Webkit and Blink consider anything inside of an <object> element as non-tabbable.
	            if ((this._platform.BLINK || this._platform.WEBKIT) && frameType === 'object') {
	                return false;
	            }
	            // Webkit and Blink disable tabbing to an element inside of an invisible frame.
	            if ((this._platform.BLINK || this._platform.WEBKIT) && !this.isVisible(frameElement)) {
	                return false;
	            }
	        }
	        var nodeName = element.nodeName.toLowerCase();
	        var tabIndexValue = getTabIndexValue(element);
	        if (element.hasAttribute('contenteditable')) {
	            return tabIndexValue !== -1;
	        }
	        if (nodeName === 'iframe') {
	            // The frames may be tabbable depending on content, but it's not possibly to reliably
	            // investigate the content of the frames.
	            return false;
	        }
	        if (nodeName === 'audio') {
	            if (!element.hasAttribute('controls')) {
	                // By default an <audio> element without the controls enabled is not tabbable.
	                return false;
	            }
	            else if (this._platform.BLINK) {
	                // In Blink <audio controls> elements are always tabbable.
	                return true;
	            }
	        }
	        if (nodeName === 'video') {
	            if (!element.hasAttribute('controls') && this._platform.TRIDENT) {
	                // In Trident a <video> element without the controls enabled is not tabbable.
	                return false;
	            }
	            else if (this._platform.BLINK || this._platform.FIREFOX) {
	                // In Chrome and Firefox <video controls> elements are always tabbable.
	                return true;
	            }
	        }
	        if (nodeName === 'object' && (this._platform.BLINK || this._platform.WEBKIT)) {
	            // In all Blink and WebKit based browsers <object> elements are never tabbable.
	            return false;
	        }
	        // In iOS the browser only considers some specific elements as tabbable.
	        if (this._platform.WEBKIT && this._platform.IOS && !isPotentiallyTabbableIOS(element)) {
	            return false;
	        }
	        return element.tabIndex >= 0;
	    };
	    /**
	     * Gets whether an element can be focused by the user.
	     *
	     * @param element Element to be checked.
	     * @returns Whether the element is focusable.
	     */
	    InteractivityChecker.prototype.isFocusable = function (element) {
	        // Perform checks in order of left to most expensive.
	        // Again, naive approach that does not capture many edge cases and browser quirks.
	        return isPotentiallyFocusable(element) && !this.isDisabled(element) && this.isVisible(element);
	    };
	    InteractivityChecker.decorators = [
	        { type: Injectable, args: [{ providedIn: 'root' },] }
	    ];
	    /** @nocollapse */
	    InteractivityChecker.ctorParameters = function () { return [
	        { type: Platform }
	    ]; };
	    InteractivityChecker.Éµprov = ÉµÉµdefineInjectable({ factory: function InteractivityChecker_Factory() { return new InteractivityChecker(ÉµÉµinject(Platform)); }, token: InteractivityChecker, providedIn: "root" });
	    return InteractivityChecker;
	}());
	/**
	 * Returns the frame element from a window object. Since browsers like MS Edge throw errors if
	 * the frameElement property is being accessed from a different host address, this property
	 * should be accessed carefully.
	 */
	function getFrameElement(window) {
	    try {
	        return window.frameElement;
	    }
	    catch (_a) {
	        return null;
	    }
	}
	/** Checks whether the specified element has any geometry / rectangles. */
	function hasGeometry(element) {
	    // Use logic from jQuery to check for an invisible element.
	    // See https://github.com/jquery/jquery/blob/master/src/css/hiddenVisibleSelectors.js#L12
	    return !!(element.offsetWidth || element.offsetHeight ||
	        (typeof element.getClientRects === 'function' && element.getClientRects().length));
	}
	/** Gets whether an element's  */
	function isNativeFormElement(element) {
	    var nodeName = element.nodeName.toLowerCase();
	    return nodeName === 'input' ||
	        nodeName === 'select' ||
	        nodeName === 'button' ||
	        nodeName === 'textarea';
	}
	/** Gets whether an element is an `<input type="hidden">`. */
	function isHiddenInput(element) {
	    return isInputElement(element) && element.type == 'hidden';
	}
	/** Gets whether an element is an anchor that has an href attribute. */
	function isAnchorWithHref(element) {
	    return isAnchorElement(element) && element.hasAttribute('href');
	}
	/** Gets whether an element is an input element. */
	function isInputElement(element) {
	    return element.nodeName.toLowerCase() == 'input';
	}
	/** Gets whether an element is an anchor element. */
	function isAnchorElement(element) {
	    return element.nodeName.toLowerCase() == 'a';
	}
	/** Gets whether an element has a valid tabindex. */
	function hasValidTabIndex(element) {
	    if (!element.hasAttribute('tabindex') || element.tabIndex === undefined) {
	        return false;
	    }
	    var tabIndex = element.getAttribute('tabindex');
	    // IE11 parses tabindex="" as the value "-32768"
	    if (tabIndex == '-32768') {
	        return false;
	    }
	    return !!(tabIndex && !isNaN(parseInt(tabIndex, 10)));
	}
	/**
	 * Returns the parsed tabindex from the element attributes instead of returning the
	 * evaluated tabindex from the browsers defaults.
	 */
	function getTabIndexValue(element) {
	    if (!hasValidTabIndex(element)) {
	        return null;
	    }
	    // See browser issue in Gecko https://bugzilla.mozilla.org/show_bug.cgi?id=1128054
	    var tabIndex = parseInt(element.getAttribute('tabindex') || '', 10);
	    return isNaN(tabIndex) ? -1 : tabIndex;
	}
	/** Checks whether the specified element is potentially tabbable on iOS */
	function isPotentiallyTabbableIOS(element) {
	    var nodeName = element.nodeName.toLowerCase();
	    var inputType = nodeName === 'input' && element.type;
	    return inputType === 'text'
	        || inputType === 'password'
	        || nodeName === 'select'
	        || nodeName === 'textarea';
	}
	/**
	 * Gets whether an element is potentially focusable without taking current visible/disabled state
	 * into account.
	 */
	function isPotentiallyFocusable(element) {
	    // Inputs are potentially focusable *unless* they're type="hidden".
	    if (isHiddenInput(element)) {
	        return false;
	    }
	    return isNativeFormElement(element) ||
	        isAnchorWithHref(element) ||
	        element.hasAttribute('contenteditable') ||
	        hasValidTabIndex(element);
	}
	/** Gets the parent window of a DOM node with regards of being inside of an iframe. */
	function getWindow(node) {
	    // ownerDocument is null if `node` itself *is* a document.
	    return node.ownerDocument && node.ownerDocument.defaultView || window;
	}

	/**
	 * @license
	 * Copyright Google LLC All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * Class that allows for trapping focus within a DOM element.
	 *
	 * This class currently uses a relatively simple approach to focus trapping.
	 * It assumes that the tab order is the same as DOM order, which is not necessarily true.
	 * Things like `tabIndex > 0`, flex `order`, and shadow roots can cause to two to misalign.
	 *
	 * @deprecated Use `ConfigurableFocusTrap` instead.
	 * @breaking-change for 11.0.0 Remove this class.
	 */
	var FocusTrap = /** @class */ (function () {
	    function FocusTrap(_element, _checker, _ngZone, _document, deferAnchors) {
	        var _this = this;
	        if (deferAnchors === void 0) { deferAnchors = false; }
	        this._element = _element;
	        this._checker = _checker;
	        this._ngZone = _ngZone;
	        this._document = _document;
	        this._hasAttached = false;
	        // Event listeners for the anchors. Need to be regular functions so that we can unbind them later.
	        this.startAnchorListener = function () { return _this.focusLastTabbableElement(); };
	        this.endAnchorListener = function () { return _this.focusFirstTabbableElement(); };
	        this._enabled = true;
	        if (!deferAnchors) {
	            this.attachAnchors();
	        }
	    }
	    Object.defineProperty(FocusTrap.prototype, "enabled", {
	        /** Whether the focus trap is active. */
	        get: function () { return this._enabled; },
	        set: function (value) {
	            this._enabled = value;
	            if (this._startAnchor && this._endAnchor) {
	                this._toggleAnchorTabIndex(value, this._startAnchor);
	                this._toggleAnchorTabIndex(value, this._endAnchor);
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    /** Destroys the focus trap by cleaning up the anchors. */
	    FocusTrap.prototype.destroy = function () {
	        var startAnchor = this._startAnchor;
	        var endAnchor = this._endAnchor;
	        if (startAnchor) {
	            startAnchor.removeEventListener('focus', this.startAnchorListener);
	            if (startAnchor.parentNode) {
	                startAnchor.parentNode.removeChild(startAnchor);
	            }
	        }
	        if (endAnchor) {
	            endAnchor.removeEventListener('focus', this.endAnchorListener);
	            if (endAnchor.parentNode) {
	                endAnchor.parentNode.removeChild(endAnchor);
	            }
	        }
	        this._startAnchor = this._endAnchor = null;
	    };
	    /**
	     * Inserts the anchors into the DOM. This is usually done automatically
	     * in the constructor, but can be deferred for cases like directives with `*ngIf`.
	     * @returns Whether the focus trap managed to attach successfuly. This may not be the case
	     * if the target element isn't currently in the DOM.
	     */
	    FocusTrap.prototype.attachAnchors = function () {
	        var _this = this;
	        // If we're not on the browser, there can be no focus to trap.
	        if (this._hasAttached) {
	            return true;
	        }
	        this._ngZone.runOutsideAngular(function () {
	            if (!_this._startAnchor) {
	                _this._startAnchor = _this._createAnchor();
	                _this._startAnchor.addEventListener('focus', _this.startAnchorListener);
	            }
	            if (!_this._endAnchor) {
	                _this._endAnchor = _this._createAnchor();
	                _this._endAnchor.addEventListener('focus', _this.endAnchorListener);
	            }
	        });
	        if (this._element.parentNode) {
	            this._element.parentNode.insertBefore(this._startAnchor, this._element);
	            this._element.parentNode.insertBefore(this._endAnchor, this._element.nextSibling);
	            this._hasAttached = true;
	        }
	        return this._hasAttached;
	    };
	    /**
	     * Waits for the zone to stabilize, then either focuses the first element that the
	     * user specified, or the first tabbable element.
	     * @returns Returns a promise that resolves with a boolean, depending
	     * on whether focus was moved successfuly.
	     */
	    FocusTrap.prototype.focusInitialElementWhenReady = function () {
	        var _this = this;
	        return new Promise(function (resolve) {
	            _this._executeOnStable(function () { return resolve(_this.focusInitialElement()); });
	        });
	    };
	    /**
	     * Waits for the zone to stabilize, then focuses
	     * the first tabbable element within the focus trap region.
	     * @returns Returns a promise that resolves with a boolean, depending
	     * on whether focus was moved successfuly.
	     */
	    FocusTrap.prototype.focusFirstTabbableElementWhenReady = function () {
	        var _this = this;
	        return new Promise(function (resolve) {
	            _this._executeOnStable(function () { return resolve(_this.focusFirstTabbableElement()); });
	        });
	    };
	    /**
	     * Waits for the zone to stabilize, then focuses
	     * the last tabbable element within the focus trap region.
	     * @returns Returns a promise that resolves with a boolean, depending
	     * on whether focus was moved successfuly.
	     */
	    FocusTrap.prototype.focusLastTabbableElementWhenReady = function () {
	        var _this = this;
	        return new Promise(function (resolve) {
	            _this._executeOnStable(function () { return resolve(_this.focusLastTabbableElement()); });
	        });
	    };
	    /**
	     * Get the specified boundary element of the trapped region.
	     * @param bound The boundary to get (start or end of trapped region).
	     * @returns The boundary element.
	     */
	    FocusTrap.prototype._getRegionBoundary = function (bound) {
	        // Contains the deprecated version of selector, for temporary backwards comparability.
	        var markers = this._element.querySelectorAll("[cdk-focus-region-" + bound + "], " +
	            ("[cdkFocusRegion" + bound + "], ") +
	            ("[cdk-focus-" + bound + "]"));
	        for (var i = 0; i < markers.length; i++) {
	            // @breaking-change 8.0.0
	            if (markers[i].hasAttribute("cdk-focus-" + bound)) {
	                console.warn("Found use of deprecated attribute 'cdk-focus-" + bound + "', " +
	                    ("use 'cdkFocusRegion" + bound + "' instead. The deprecated ") +
	                    "attribute will be removed in 8.0.0.", markers[i]);
	            }
	            else if (markers[i].hasAttribute("cdk-focus-region-" + bound)) {
	                console.warn("Found use of deprecated attribute 'cdk-focus-region-" + bound + "', " +
	                    ("use 'cdkFocusRegion" + bound + "' instead. The deprecated attribute ") +
	                    "will be removed in 8.0.0.", markers[i]);
	            }
	        }
	        if (bound == 'start') {
	            return markers.length ? markers[0] : this._getFirstTabbableElement(this._element);
	        }
	        return markers.length ?
	            markers[markers.length - 1] : this._getLastTabbableElement(this._element);
	    };
	    /**
	     * Focuses the element that should be focused when the focus trap is initialized.
	     * @returns Whether focus was moved successfuly.
	     */
	    FocusTrap.prototype.focusInitialElement = function () {
	        // Contains the deprecated version of selector, for temporary backwards comparability.
	        var redirectToElement = this._element.querySelector("[cdk-focus-initial], " +
	            "[cdkFocusInitial]");
	        if (redirectToElement) {
	            // @breaking-change 8.0.0
	            if (redirectToElement.hasAttribute("cdk-focus-initial")) {
	                console.warn("Found use of deprecated attribute 'cdk-focus-initial', " +
	                    "use 'cdkFocusInitial' instead. The deprecated attribute " +
	                    "will be removed in 8.0.0", redirectToElement);
	            }
	            // Warn the consumer if the element they've pointed to
	            // isn't focusable, when not in production mode.
	            if ( !this._checker.isFocusable(redirectToElement)) {
	                console.warn("Element matching '[cdkFocusInitial]' is not focusable.", redirectToElement);
	            }
	            redirectToElement.focus();
	            return true;
	        }
	        return this.focusFirstTabbableElement();
	    };
	    /**
	     * Focuses the first tabbable element within the focus trap region.
	     * @returns Whether focus was moved successfuly.
	     */
	    FocusTrap.prototype.focusFirstTabbableElement = function () {
	        var redirectToElement = this._getRegionBoundary('start');
	        if (redirectToElement) {
	            redirectToElement.focus();
	        }
	        return !!redirectToElement;
	    };
	    /**
	     * Focuses the last tabbable element within the focus trap region.
	     * @returns Whether focus was moved successfuly.
	     */
	    FocusTrap.prototype.focusLastTabbableElement = function () {
	        var redirectToElement = this._getRegionBoundary('end');
	        if (redirectToElement) {
	            redirectToElement.focus();
	        }
	        return !!redirectToElement;
	    };
	    /**
	     * Checks whether the focus trap has successfuly been attached.
	     */
	    FocusTrap.prototype.hasAttached = function () {
	        return this._hasAttached;
	    };
	    /** Get the first tabbable element from a DOM subtree (inclusive). */
	    FocusTrap.prototype._getFirstTabbableElement = function (root) {
	        if (this._checker.isFocusable(root) && this._checker.isTabbable(root)) {
	            return root;
	        }
	        // Iterate in DOM order. Note that IE doesn't have `children` for SVG so we fall
	        // back to `childNodes` which includes text nodes, comments etc.
	        var children = root.children || root.childNodes;
	        for (var i = 0; i < children.length; i++) {
	            var tabbableChild = children[i].nodeType === this._document.ELEMENT_NODE ?
	                this._getFirstTabbableElement(children[i]) :
	                null;
	            if (tabbableChild) {
	                return tabbableChild;
	            }
	        }
	        return null;
	    };
	    /** Get the last tabbable element from a DOM subtree (inclusive). */
	    FocusTrap.prototype._getLastTabbableElement = function (root) {
	        if (this._checker.isFocusable(root) && this._checker.isTabbable(root)) {
	            return root;
	        }
	        // Iterate in reverse DOM order.
	        var children = root.children || root.childNodes;
	        for (var i = children.length - 1; i >= 0; i--) {
	            var tabbableChild = children[i].nodeType === this._document.ELEMENT_NODE ?
	                this._getLastTabbableElement(children[i]) :
	                null;
	            if (tabbableChild) {
	                return tabbableChild;
	            }
	        }
	        return null;
	    };
	    /** Creates an anchor element. */
	    FocusTrap.prototype._createAnchor = function () {
	        var anchor = this._document.createElement('div');
	        this._toggleAnchorTabIndex(this._enabled, anchor);
	        anchor.classList.add('cdk-visually-hidden');
	        anchor.classList.add('cdk-focus-trap-anchor');
	        anchor.setAttribute('aria-hidden', 'true');
	        return anchor;
	    };
	    /**
	     * Toggles the `tabindex` of an anchor, based on the enabled state of the focus trap.
	     * @param isEnabled Whether the focus trap is enabled.
	     * @param anchor Anchor on which to toggle the tabindex.
	     */
	    FocusTrap.prototype._toggleAnchorTabIndex = function (isEnabled, anchor) {
	        // Remove the tabindex completely, rather than setting it to -1, because if the
	        // element has a tabindex, the user might still hit it when navigating with the arrow keys.
	        isEnabled ? anchor.setAttribute('tabindex', '0') : anchor.removeAttribute('tabindex');
	    };
	    /**
	     * Toggles the`tabindex` of both anchors to either trap Tab focus or allow it to escape.
	     * @param enabled: Whether the anchors should trap Tab.
	     */
	    FocusTrap.prototype.toggleAnchors = function (enabled) {
	        if (this._startAnchor && this._endAnchor) {
	            this._toggleAnchorTabIndex(enabled, this._startAnchor);
	            this._toggleAnchorTabIndex(enabled, this._endAnchor);
	        }
	    };
	    /** Executes a function when the zone is stable. */
	    FocusTrap.prototype._executeOnStable = function (fn) {
	        if (this._ngZone.isStable) {
	            fn();
	        }
	        else {
	            this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(fn);
	        }
	    };
	    return FocusTrap;
	}());
	/**
	 * Factory that allows easy instantiation of focus traps.
	 * @deprecated Use `ConfigurableFocusTrapFactory` instead.
	 * @breaking-change for 11.0.0 Remove this class.
	 */
	var FocusTrapFactory = /** @class */ (function () {
	    function FocusTrapFactory(_checker, _ngZone, _document) {
	        this._checker = _checker;
	        this._ngZone = _ngZone;
	        this._document = _document;
	    }
	    /**
	     * Creates a focus-trapped region around the given element.
	     * @param element The element around which focus will be trapped.
	     * @param deferCaptureElements Defers the creation of focus-capturing elements to be done
	     *     manually by the user.
	     * @returns The created focus trap instance.
	     */
	    FocusTrapFactory.prototype.create = function (element, deferCaptureElements) {
	        if (deferCaptureElements === void 0) { deferCaptureElements = false; }
	        return new FocusTrap(element, this._checker, this._ngZone, this._document, deferCaptureElements);
	    };
	    FocusTrapFactory.decorators = [
	        { type: Injectable, args: [{ providedIn: 'root' },] }
	    ];
	    /** @nocollapse */
	    FocusTrapFactory.ctorParameters = function () { return [
	        { type: InteractivityChecker },
	        { type: NgZone },
	        { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT$1,] }] }
	    ]; };
	    FocusTrapFactory.Éµprov = ÉµÉµdefineInjectable({ factory: function FocusTrapFactory_Factory() { return new FocusTrapFactory(ÉµÉµinject(InteractivityChecker), ÉµÉµinject(NgZone), ÉµÉµinject(DOCUMENT$1)); }, token: FocusTrapFactory, providedIn: "root" });
	    return FocusTrapFactory;
	}());
	/** Directive for trapping focus within a region. */
	var CdkTrapFocus = /** @class */ (function () {
	    function CdkTrapFocus(_elementRef, _focusTrapFactory, _document) {
	        this._elementRef = _elementRef;
	        this._focusTrapFactory = _focusTrapFactory;
	        /** Previously focused element to restore focus to upon destroy when using autoCapture. */
	        this._previouslyFocusedElement = null;
	        this._document = _document;
	        this.focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement, true);
	    }
	    Object.defineProperty(CdkTrapFocus.prototype, "enabled", {
	        /** Whether the focus trap is active. */
	        get: function () { return this.focusTrap.enabled; },
	        set: function (value) { this.focusTrap.enabled = coerceBooleanProperty(value); },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(CdkTrapFocus.prototype, "autoCapture", {
	        /**
	         * Whether the directive should automatially move focus into the trapped region upon
	         * initialization and return focus to the previous activeElement upon destruction.
	         */
	        get: function () { return this._autoCapture; },
	        set: function (value) { this._autoCapture = coerceBooleanProperty(value); },
	        enumerable: true,
	        configurable: true
	    });
	    CdkTrapFocus.prototype.ngOnDestroy = function () {
	        this.focusTrap.destroy();
	        // If we stored a previously focused element when using autoCapture, return focus to that
	        // element now that the trapped region is being destroyed.
	        if (this._previouslyFocusedElement) {
	            this._previouslyFocusedElement.focus();
	            this._previouslyFocusedElement = null;
	        }
	    };
	    CdkTrapFocus.prototype.ngAfterContentInit = function () {
	        this.focusTrap.attachAnchors();
	        if (this.autoCapture) {
	            this._previouslyFocusedElement = this._document.activeElement;
	            this.focusTrap.focusInitialElementWhenReady();
	        }
	    };
	    CdkTrapFocus.prototype.ngDoCheck = function () {
	        if (!this.focusTrap.hasAttached()) {
	            this.focusTrap.attachAnchors();
	        }
	    };
	    CdkTrapFocus.decorators = [
	        { type: Directive, args: [{
	                    selector: '[cdkTrapFocus]',
	                    exportAs: 'cdkTrapFocus',
	                },] }
	    ];
	    /** @nocollapse */
	    CdkTrapFocus.ctorParameters = function () { return [
	        { type: ElementRef },
	        { type: FocusTrapFactory },
	        { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT$1,] }] }
	    ]; };
	    CdkTrapFocus.propDecorators = {
	        enabled: [{ type: Input, args: ['cdkTrapFocus',] }],
	        autoCapture: [{ type: Input, args: ['cdkTrapFocusAutoCapture',] }]
	    };
	    return CdkTrapFocus;
	}());

	/**
	 * @license
	 * Copyright Google LLC All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * Class that allows for trapping focus within a DOM element.
	 *
	 * This class uses a strategy pattern that determines how it traps focus.
	 * See FocusTrapInertStrategy.
	 */
	var ConfigurableFocusTrap = /** @class */ (function (_super) {
	    __extends(ConfigurableFocusTrap, _super);
	    function ConfigurableFocusTrap(_element, _checker, _ngZone, _document, _focusTrapManager, _inertStrategy, config) {
	        var _this = _super.call(this, _element, _checker, _ngZone, _document, config.defer) || this;
	        _this._focusTrapManager = _focusTrapManager;
	        _this._inertStrategy = _inertStrategy;
	        _this._focusTrapManager.register(_this);
	        return _this;
	    }
	    Object.defineProperty(ConfigurableFocusTrap.prototype, "enabled", {
	        /** Whether the FocusTrap is enabled. */
	        get: function () { return this._enabled; },
	        set: function (value) {
	            this._enabled = value;
	            if (this._enabled) {
	                this._focusTrapManager.register(this);
	            }
	            else {
	                this._focusTrapManager.deregister(this);
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    /** Notifies the FocusTrapManager that this FocusTrap will be destroyed. */
	    ConfigurableFocusTrap.prototype.destroy = function () {
	        this._focusTrapManager.deregister(this);
	        _super.prototype.destroy.call(this);
	    };
	    /** @docs-private Implemented as part of ManagedFocusTrap. */
	    ConfigurableFocusTrap.prototype._enable = function () {
	        this._inertStrategy.preventFocus(this);
	        this.toggleAnchors(true);
	    };
	    /** @docs-private Implemented as part of ManagedFocusTrap. */
	    ConfigurableFocusTrap.prototype._disable = function () {
	        this._inertStrategy.allowFocus(this);
	        this.toggleAnchors(false);
	    };
	    return ConfigurableFocusTrap;
	}(FocusTrap));

	/**
	 * @license
	 * Copyright Google LLC All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/** IE 11 compatible closest implementation that is able to start from non-Element Nodes. */
	function closest(element, selector) {
	    if (!(element instanceof Node)) {
	        return null;
	    }
	    var curr = element;
	    while (curr != null && !(curr instanceof Element)) {
	        curr = curr.parentNode;
	    }
	    return curr && (hasNativeClosest ?
	        curr.closest(selector) : polyfillClosest(curr, selector));
	}
	/** Polyfill for browsers without Element.closest. */
	function polyfillClosest(element, selector) {
	    var curr = element;
	    while (curr != null && !(curr instanceof Element && matches(curr, selector))) {
	        curr = curr.parentNode;
	    }
	    return (curr || null);
	}
	var hasNativeClosest = typeof Element != 'undefined' && !!Element.prototype.closest;
	/** IE 11 compatible matches implementation. */
	function matches(element, selector) {
	    return element.matches ?
	        element.matches(selector) :
	        element['msMatchesSelector'](selector);
	}

	/**
	 * @license
	 * Copyright Google LLC All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * Lightweight FocusTrapInertStrategy that adds a document focus event
	 * listener to redirect focus back inside the FocusTrap.
	 */
	var EventListenerFocusTrapInertStrategy = /** @class */ (function () {
	    function EventListenerFocusTrapInertStrategy() {
	        /** Focus event handler. */
	        this._listener = null;
	    }
	    /** Adds a document event listener that keeps focus inside the FocusTrap. */
	    EventListenerFocusTrapInertStrategy.prototype.preventFocus = function (focusTrap) {
	        var _this = this;
	        // Ensure there's only one listener per document
	        if (this._listener) {
	            focusTrap._document.removeEventListener('focus', this._listener, true);
	        }
	        this._listener = function (e) { return _this._trapFocus(focusTrap, e); };
	        focusTrap._ngZone.runOutsideAngular(function () {
	            focusTrap._document.addEventListener('focus', _this._listener, true);
	        });
	    };
	    /** Removes the event listener added in preventFocus. */
	    EventListenerFocusTrapInertStrategy.prototype.allowFocus = function (focusTrap) {
	        if (!this._listener) {
	            return;
	        }
	        focusTrap._document.removeEventListener('focus', this._listener, true);
	        this._listener = null;
	    };
	    /**
	     * Refocuses the first element in the FocusTrap if the focus event target was outside
	     * the FocusTrap.
	     *
	     * This is an event listener callback. The event listener is added in runOutsideAngular,
	     * so all this code runs outside Angular as well.
	     */
	    EventListenerFocusTrapInertStrategy.prototype._trapFocus = function (focusTrap, event) {
	        var target = event.target;
	        var focusTrapRoot = focusTrap._element;
	        // Don't refocus if target was in an overlay, because the overlay might be associated
	        // with an element inside the FocusTrap, ex. mat-select.
	        if (!focusTrapRoot.contains(target) && closest(target, 'div.cdk-overlay-pane') === null) {
	            // Some legacy FocusTrap usages have logic that focuses some element on the page
	            // just before FocusTrap is destroyed. For backwards compatibility, wait
	            // to be sure FocusTrap is still enabled before refocusing.
	            setTimeout(function () {
	                // Check whether focus wasn't put back into the focus trap while the timeout was pending.
	                if (focusTrap.enabled && !focusTrapRoot.contains(focusTrap._document.activeElement)) {
	                    focusTrap.focusFirstTabbableElement();
	                }
	            });
	        }
	    };
	    return EventListenerFocusTrapInertStrategy;
	}());

	/**
	 * @license
	 * Copyright Google LLC All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * Configuration for creating a ConfigurableFocusTrap.
	 */
	var ConfigurableFocusTrapConfig = /** @class */ (function () {
	    function ConfigurableFocusTrapConfig() {
	        /**
	         * Whether to defer the creation of FocusTrap elements to be
	         * done manually by the user. Default is to create them
	         * automatically.
	         */
	        this.defer = false;
	    }
	    return ConfigurableFocusTrapConfig;
	}());

	/**
	 * @license
	 * Copyright Google LLC All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/** The injection token used to specify the inert strategy. */
	var FOCUS_TRAP_INERT_STRATEGY = new InjectionToken('FOCUS_TRAP_INERT_STRATEGY');

	/**
	 * @license
	 * Copyright Google LLC All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/** Injectable that ensures only the most recently enabled FocusTrap is active. */
	var FocusTrapManager = /** @class */ (function () {
	    function FocusTrapManager() {
	        // A stack of the FocusTraps on the page. Only the FocusTrap at the
	        // top of the stack is active.
	        this._focusTrapStack = [];
	    }
	    /**
	     * Disables the FocusTrap at the top of the stack, and then pushes
	     * the new FocusTrap onto the stack.
	     */
	    FocusTrapManager.prototype.register = function (focusTrap) {
	        // Dedupe focusTraps that register multiple times.
	        this._focusTrapStack = this._focusTrapStack.filter(function (ft) { return ft !== focusTrap; });
	        var stack = this._focusTrapStack;
	        if (stack.length) {
	            stack[stack.length - 1]._disable();
	        }
	        stack.push(focusTrap);
	        focusTrap._enable();
	    };
	    /**
	     * Removes the FocusTrap from the stack, and activates the
	     * FocusTrap that is the new top of the stack.
	     */
	    FocusTrapManager.prototype.deregister = function (focusTrap) {
	        focusTrap._disable();
	        var stack = this._focusTrapStack;
	        var i = stack.indexOf(focusTrap);
	        if (i !== -1) {
	            stack.splice(i, 1);
	            if (stack.length) {
	                stack[stack.length - 1]._enable();
	            }
	        }
	    };
	    FocusTrapManager.decorators = [
	        { type: Injectable, args: [{ providedIn: 'root' },] }
	    ];
	    FocusTrapManager.Éµprov = ÉµÉµdefineInjectable({ factory: function FocusTrapManager_Factory() { return new FocusTrapManager(); }, token: FocusTrapManager, providedIn: "root" });
	    return FocusTrapManager;
	}());

	/**
	 * @license
	 * Copyright Google LLC All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/** Factory that allows easy instantiation of configurable focus traps. */
	var ConfigurableFocusTrapFactory = /** @class */ (function () {
	    function ConfigurableFocusTrapFactory(_checker, _ngZone, _focusTrapManager, _document, _inertStrategy) {
	        this._checker = _checker;
	        this._ngZone = _ngZone;
	        this._focusTrapManager = _focusTrapManager;
	        this._document = _document;
	        // TODO split up the strategies into different modules, similar to DateAdapter.
	        this._inertStrategy = _inertStrategy || new EventListenerFocusTrapInertStrategy();
	    }
	    ConfigurableFocusTrapFactory.prototype.create = function (element, config) {
	        if (config === void 0) { config = new ConfigurableFocusTrapConfig(); }
	        var configObject;
	        if (typeof config === 'boolean') {
	            configObject = new ConfigurableFocusTrapConfig();
	            configObject.defer = config;
	        }
	        else {
	            configObject = config;
	        }
	        return new ConfigurableFocusTrap(element, this._checker, this._ngZone, this._document, this._focusTrapManager, this._inertStrategy, configObject);
	    };
	    ConfigurableFocusTrapFactory.decorators = [
	        { type: Injectable, args: [{ providedIn: 'root' },] }
	    ];
	    /** @nocollapse */
	    ConfigurableFocusTrapFactory.ctorParameters = function () { return [
	        { type: InteractivityChecker },
	        { type: NgZone },
	        { type: FocusTrapManager },
	        { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT$1,] }] },
	        { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [FOCUS_TRAP_INERT_STRATEGY,] }] }
	    ]; };
	    ConfigurableFocusTrapFactory.Éµprov = ÉµÉµdefineInjectable({ factory: function ConfigurableFocusTrapFactory_Factory() { return new ConfigurableFocusTrapFactory(ÉµÉµinject(InteractivityChecker), ÉµÉµinject(NgZone), ÉµÉµinject(FocusTrapManager), ÉµÉµinject(DOCUMENT$1), ÉµÉµinject(FOCUS_TRAP_INERT_STRATEGY, 8)); }, token: ConfigurableFocusTrapFactory, providedIn: "root" });
	    return ConfigurableFocusTrapFactory;
	}());

	/**
	 * @license
	 * Copyright Google LLC All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	var LIVE_ANNOUNCER_ELEMENT_TOKEN = new InjectionToken('liveAnnouncerElement', {
	    providedIn: 'root',
	    factory: LIVE_ANNOUNCER_ELEMENT_TOKEN_FACTORY,
	});
	/** @docs-private */
	function LIVE_ANNOUNCER_ELEMENT_TOKEN_FACTORY() {
	    return null;
	}
	/** Injection token that can be used to configure the default options for the LiveAnnouncer. */
	var LIVE_ANNOUNCER_DEFAULT_OPTIONS = new InjectionToken('LIVE_ANNOUNCER_DEFAULT_OPTIONS');

	var LiveAnnouncer = /** @class */ (function () {
	    function LiveAnnouncer(elementToken, _ngZone, _document, _defaultOptions) {
	        this._ngZone = _ngZone;
	        this._defaultOptions = _defaultOptions;
	        // We inject the live element and document as `any` because the constructor signature cannot
	        // reference browser globals (HTMLElement, Document) on non-browser environments, since having
	        // a class decorator causes TypeScript to preserve the constructor signature types.
	        this._document = _document;
	        this._liveElement = elementToken || this._createLiveElement();
	    }
	    LiveAnnouncer.prototype.announce = function (message) {
	        var _a;
	        var _this = this;
	        var args = [];
	        for (var _i = 1; _i < arguments.length; _i++) {
	            args[_i - 1] = arguments[_i];
	        }
	        var defaultOptions = this._defaultOptions;
	        var politeness;
	        var duration;
	        if (args.length === 1 && typeof args[0] === 'number') {
	            duration = args[0];
	        }
	        else {
	            _a = __read(args, 2), politeness = _a[0], duration = _a[1];
	        }
	        this.clear();
	        clearTimeout(this._previousTimeout);
	        if (!politeness) {
	            politeness =
	                (defaultOptions && defaultOptions.politeness) ? defaultOptions.politeness : 'polite';
	        }
	        if (duration == null && defaultOptions) {
	            duration = defaultOptions.duration;
	        }
	        // TODO: ensure changing the politeness works on all environments we support.
	        this._liveElement.setAttribute('aria-live', politeness);
	        // This 100ms timeout is necessary for some browser + screen-reader combinations:
	        // - Both JAWS and NVDA over IE11 will not announce anything without a non-zero timeout.
	        // - With Chrome and IE11 with NVDA or JAWS, a repeated (identical) message won't be read a
	        //   second time without clearing and then using a non-zero delay.
	        // (using JAWS 17 at time of this writing).
	        return this._ngZone.runOutsideAngular(function () {
	            return new Promise(function (resolve) {
	                clearTimeout(_this._previousTimeout);
	                _this._previousTimeout = setTimeout(function () {
	                    _this._liveElement.textContent = message;
	                    resolve();
	                    if (typeof duration === 'number') {
	                        _this._previousTimeout = setTimeout(function () { return _this.clear(); }, duration);
	                    }
	                }, 100);
	            });
	        });
	    };
	    /**
	     * Clears the current text from the announcer element. Can be used to prevent
	     * screen readers from reading the text out again while the user is going
	     * through the page landmarks.
	     */
	    LiveAnnouncer.prototype.clear = function () {
	        if (this._liveElement) {
	            this._liveElement.textContent = '';
	        }
	    };
	    LiveAnnouncer.prototype.ngOnDestroy = function () {
	        clearTimeout(this._previousTimeout);
	        if (this._liveElement && this._liveElement.parentNode) {
	            this._liveElement.parentNode.removeChild(this._liveElement);
	            this._liveElement = null;
	        }
	    };
	    LiveAnnouncer.prototype._createLiveElement = function () {
	        var elementClass = 'cdk-live-announcer-element';
	        var previousElements = this._document.getElementsByClassName(elementClass);
	        var liveEl = this._document.createElement('div');
	        // Remove any old containers. This can happen when coming in from a server-side-rendered page.
	        for (var i = 0; i < previousElements.length; i++) {
	            previousElements[i].parentNode.removeChild(previousElements[i]);
	        }
	        liveEl.classList.add(elementClass);
	        liveEl.classList.add('cdk-visually-hidden');
	        liveEl.setAttribute('aria-atomic', 'true');
	        liveEl.setAttribute('aria-live', 'polite');
	        this._document.body.appendChild(liveEl);
	        return liveEl;
	    };
	    LiveAnnouncer.decorators = [
	        { type: Injectable, args: [{ providedIn: 'root' },] }
	    ];
	    /** @nocollapse */
	    LiveAnnouncer.ctorParameters = function () { return [
	        { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [LIVE_ANNOUNCER_ELEMENT_TOKEN,] }] },
	        { type: NgZone },
	        { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT$1,] }] },
	        { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [LIVE_ANNOUNCER_DEFAULT_OPTIONS,] }] }
	    ]; };
	    LiveAnnouncer.Éµprov = ÉµÉµdefineInjectable({ factory: function LiveAnnouncer_Factory() { return new LiveAnnouncer(ÉµÉµinject(LIVE_ANNOUNCER_ELEMENT_TOKEN, 8), ÉµÉµinject(NgZone), ÉµÉµinject(DOCUMENT$1), ÉµÉµinject(LIVE_ANNOUNCER_DEFAULT_OPTIONS, 8)); }, token: LiveAnnouncer, providedIn: "root" });
	    return LiveAnnouncer;
	}());
	/**
	 * A directive that works similarly to aria-live, but uses the LiveAnnouncer to ensure compatibility
	 * with a wider range of browsers and screen readers.
	 */
	var CdkAriaLive = /** @class */ (function () {
	    function CdkAriaLive(_elementRef, _liveAnnouncer, _contentObserver, _ngZone) {
	        this._elementRef = _elementRef;
	        this._liveAnnouncer = _liveAnnouncer;
	        this._contentObserver = _contentObserver;
	        this._ngZone = _ngZone;
	        this._politeness = 'off';
	    }
	    Object.defineProperty(CdkAriaLive.prototype, "politeness", {
	        /** The aria-live politeness level to use when announcing messages. */
	        get: function () { return this._politeness; },
	        set: function (value) {
	            var _this = this;
	            this._politeness = value === 'polite' || value === 'assertive' ? value : 'off';
	            if (this._politeness === 'off') {
	                if (this._subscription) {
	                    this._subscription.unsubscribe();
	                    this._subscription = null;
	                }
	            }
	            else if (!this._subscription) {
	                this._subscription = this._ngZone.runOutsideAngular(function () {
	                    return _this._contentObserver
	                        .observe(_this._elementRef)
	                        .subscribe(function () {
	                        // Note that we use textContent here, rather than innerText, in order to avoid a reflow.
	                        var elementText = _this._elementRef.nativeElement.textContent;
	                        // The `MutationObserver` fires also for attribute
	                        // changes which we don't want to announce.
	                        if (elementText !== _this._previousAnnouncedText) {
	                            _this._liveAnnouncer.announce(elementText, _this._politeness);
	                            _this._previousAnnouncedText = elementText;
	                        }
	                    });
	                });
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    CdkAriaLive.prototype.ngOnDestroy = function () {
	        if (this._subscription) {
	            this._subscription.unsubscribe();
	        }
	    };
	    CdkAriaLive.decorators = [
	        { type: Directive, args: [{
	                    selector: '[cdkAriaLive]',
	                    exportAs: 'cdkAriaLive',
	                },] }
	    ];
	    /** @nocollapse */
	    CdkAriaLive.ctorParameters = function () { return [
	        { type: ElementRef },
	        { type: LiveAnnouncer },
	        { type: ContentObserver },
	        { type: NgZone }
	    ]; };
	    CdkAriaLive.propDecorators = {
	        politeness: [{ type: Input, args: ['cdkAriaLive',] }]
	    };
	    return CdkAriaLive;
	}());

	/**
	 * @license
	 * Copyright Google LLC All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * Screenreaders will often fire fake mousedown events when a focusable element
	 * is activated using the keyboard. We can typically distinguish between these faked
	 * mousedown events and real mousedown events using the "buttons" property. While
	 * real mousedowns will indicate the mouse button that was pressed (e.g. "1" for
	 * the left mouse button), faked mousedowns will usually set the property value to 0.
	 */
	function isFakeMousedownFromScreenReader(event) {
	    return event.buttons === 0;
	}

	/**
	 * @license
	 * Copyright Google LLC All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	// This is the value used by AngularJS Material. Through trial and error (on iPhone 6S) they found
	// that a value of around 650ms seems appropriate.
	var TOUCH_BUFFER_MS = 650;
	/** InjectionToken for FocusMonitorOptions. */
	var FOCUS_MONITOR_DEFAULT_OPTIONS = new InjectionToken('cdk-focus-monitor-default-options');
	/**
	 * Event listener options that enable capturing and also
	 * mark the listener as passive if the browser supports it.
	 */
	var captureEventListenerOptions = normalizePassiveListenerOptions({
	    passive: true,
	    capture: true
	});
	/** Monitors mouse and keyboard events to determine the cause of focus events. */
	var FocusMonitor = /** @class */ (function () {
	    function FocusMonitor(_ngZone, _platform, 
	    /** @breaking-change 11.0.0 make document required */
	    document, options) {
	        var _this = this;
	        this._ngZone = _ngZone;
	        this._platform = _platform;
	        /** The focus origin that the next focus event is a result of. */
	        this._origin = null;
	        /** Whether the window has just been focused. */
	        this._windowFocused = false;
	        /** Map of elements being monitored to their info. */
	        this._elementInfo = new Map();
	        /** The number of elements currently being monitored. */
	        this._monitoredElementCount = 0;
	        /**
	         * Keeps track of the root nodes to which we've currently bound a focus/blur handler,
	         * as well as the number of monitored elements that they contain. We have to treat focus/blur
	         * handlers differently from the rest of the events, because the browser won't emit events
	         * to the document when focus moves inside of a shadow root.
	         */
	        this._rootNodeFocusListenerCount = new Map();
	        /**
	         * Event listener for `keydown` events on the document.
	         * Needs to be an arrow function in order to preserve the context when it gets bound.
	         */
	        this._documentKeydownListener = function () {
	            // On keydown record the origin and clear any touch event that may be in progress.
	            _this._lastTouchTarget = null;
	            _this._setOriginForCurrentEventQueue('keyboard');
	        };
	        /**
	         * Event listener for `mousedown` events on the document.
	         * Needs to be an arrow function in order to preserve the context when it gets bound.
	         */
	        this._documentMousedownListener = function (event) {
	            // On mousedown record the origin only if there is not touch
	            // target, since a mousedown can happen as a result of a touch event.
	            if (!_this._lastTouchTarget) {
	                // In some cases screen readers fire fake `mousedown` events instead of `keydown`.
	                // Resolve the focus source to `keyboard` if we detect one of them.
	                var source = isFakeMousedownFromScreenReader(event) ? 'keyboard' : 'mouse';
	                _this._setOriginForCurrentEventQueue(source);
	            }
	        };
	        /**
	         * Event listener for `touchstart` events on the document.
	         * Needs to be an arrow function in order to preserve the context when it gets bound.
	         */
	        this._documentTouchstartListener = function (event) {
	            // When the touchstart event fires the focus event is not yet in the event queue. This means
	            // we can't rely on the trick used above (setting timeout of 1ms). Instead we wait 650ms to
	            // see if a focus happens.
	            if (_this._touchTimeoutId != null) {
	                clearTimeout(_this._touchTimeoutId);
	            }
	            _this._lastTouchTarget = getTarget(event);
	            _this._touchTimeoutId = setTimeout(function () { return _this._lastTouchTarget = null; }, TOUCH_BUFFER_MS);
	        };
	        /**
	         * Event listener for `focus` events on the window.
	         * Needs to be an arrow function in order to preserve the context when it gets bound.
	         */
	        this._windowFocusListener = function () {
	            // Make a note of when the window regains focus, so we can
	            // restore the origin info for the focused element.
	            _this._windowFocused = true;
	            _this._windowFocusTimeoutId = setTimeout(function () { return _this._windowFocused = false; });
	        };
	        /**
	         * Event listener for `focus` and 'blur' events on the document.
	         * Needs to be an arrow function in order to preserve the context when it gets bound.
	         */
	        this._rootNodeFocusAndBlurListener = function (event) {
	            var target = getTarget(event);
	            var handler = event.type === 'focus' ? _this._onFocus : _this._onBlur;
	            // We need to walk up the ancestor chain in order to support `checkChildren`.
	            for (var element = target; element; element = element.parentElement) {
	                handler.call(_this, event, element);
	            }
	        };
	        this._document = document;
	        this._detectionMode = (options === null || options === void 0 ? void 0 : options.detectionMode) || 0 /* IMMEDIATE */;
	    }
	    FocusMonitor.prototype.monitor = function (element, checkChildren) {
	        if (checkChildren === void 0) { checkChildren = false; }
	        // Do nothing if we're not on the browser platform.
	        if (!this._platform.isBrowser) {
	            return of(null);
	        }
	        var nativeElement = coerceElement(element);
	        // If the element is inside the shadow DOM, we need to bind our focus/blur listeners to
	        // the shadow root, rather than the `document`, because the browser won't emit focus events
	        // to the `document`, if focus is moving within the same shadow root.
	        var rootNode = _getShadowRoot(nativeElement) || this._getDocument();
	        // Check if we're already monitoring this element.
	        if (this._elementInfo.has(nativeElement)) {
	            var cachedInfo = this._elementInfo.get(nativeElement);
	            cachedInfo.checkChildren = checkChildren;
	            return cachedInfo.subject.asObservable();
	        }
	        // Create monitored element info.
	        var info = {
	            checkChildren: checkChildren,
	            subject: new Subject(),
	            rootNode: rootNode
	        };
	        this._elementInfo.set(nativeElement, info);
	        this._registerGlobalListeners(info);
	        return info.subject.asObservable();
	    };
	    FocusMonitor.prototype.stopMonitoring = function (element) {
	        var nativeElement = coerceElement(element);
	        var elementInfo = this._elementInfo.get(nativeElement);
	        if (elementInfo) {
	            elementInfo.subject.complete();
	            this._setClasses(nativeElement);
	            this._elementInfo.delete(nativeElement);
	            this._removeGlobalListeners(elementInfo);
	        }
	    };
	    FocusMonitor.prototype.focusVia = function (element, origin, options) {
	        var nativeElement = coerceElement(element);
	        this._setOriginForCurrentEventQueue(origin);
	        // `focus` isn't available on the server
	        if (typeof nativeElement.focus === 'function') {
	            // Cast the element to `any`, because the TS typings don't have the `options` parameter yet.
	            nativeElement.focus(options);
	        }
	    };
	    FocusMonitor.prototype.ngOnDestroy = function () {
	        var _this = this;
	        this._elementInfo.forEach(function (_info, element) { return _this.stopMonitoring(element); });
	    };
	    /** Access injected document if available or fallback to global document reference */
	    FocusMonitor.prototype._getDocument = function () {
	        return this._document || document;
	    };
	    /** Use defaultView of injected document if available or fallback to global window reference */
	    FocusMonitor.prototype._getWindow = function () {
	        var doc = this._getDocument();
	        return doc.defaultView || window;
	    };
	    FocusMonitor.prototype._toggleClass = function (element, className, shouldSet) {
	        if (shouldSet) {
	            element.classList.add(className);
	        }
	        else {
	            element.classList.remove(className);
	        }
	    };
	    FocusMonitor.prototype._getFocusOrigin = function (event) {
	        // If we couldn't detect a cause for the focus event, it's due to one of three reasons:
	        // 1) The window has just regained focus, in which case we want to restore the focused state of
	        //    the element from before the window blurred.
	        // 2) It was caused by a touch event, in which case we mark the origin as 'touch'.
	        // 3) The element was programmatically focused, in which case we should mark the origin as
	        //    'program'.
	        if (this._origin) {
	            return this._origin;
	        }
	        if (this._windowFocused && this._lastFocusOrigin) {
	            return this._lastFocusOrigin;
	        }
	        else if (this._wasCausedByTouch(event)) {
	            return 'touch';
	        }
	        else {
	            return 'program';
	        }
	    };
	    /**
	     * Sets the focus classes on the element based on the given focus origin.
	     * @param element The element to update the classes on.
	     * @param origin The focus origin.
	     */
	    FocusMonitor.prototype._setClasses = function (element, origin) {
	        this._toggleClass(element, 'cdk-focused', !!origin);
	        this._toggleClass(element, 'cdk-touch-focused', origin === 'touch');
	        this._toggleClass(element, 'cdk-keyboard-focused', origin === 'keyboard');
	        this._toggleClass(element, 'cdk-mouse-focused', origin === 'mouse');
	        this._toggleClass(element, 'cdk-program-focused', origin === 'program');
	    };
	    /**
	     * Sets the origin and schedules an async function to clear it at the end of the event queue.
	     * If the detection mode is 'eventual', the origin is never cleared.
	     * @param origin The origin to set.
	     */
	    FocusMonitor.prototype._setOriginForCurrentEventQueue = function (origin) {
	        var _this = this;
	        this._ngZone.runOutsideAngular(function () {
	            _this._origin = origin;
	            if (_this._detectionMode === 0 /* IMMEDIATE */) {
	                // Sometimes the focus origin won't be valid in Firefox because Firefox seems to focus *one*
	                // tick after the interaction event fired. To ensure the focus origin is always correct,
	                // the focus origin will be determined at the beginning of the next tick.
	                _this._originTimeoutId = setTimeout(function () { return _this._origin = null; }, 1);
	            }
	        });
	    };
	    /**
	     * Checks whether the given focus event was caused by a touchstart event.
	     * @param event The focus event to check.
	     * @returns Whether the event was caused by a touch.
	     */
	    FocusMonitor.prototype._wasCausedByTouch = function (event) {
	        // Note(mmalerba): This implementation is not quite perfect, there is a small edge case.
	        // Consider the following dom structure:
	        //
	        // <div #parent tabindex="0" cdkFocusClasses>
	        //   <div #child (click)="#parent.focus()"></div>
	        // </div>
	        //
	        // If the user touches the #child element and the #parent is programmatically focused as a
	        // result, this code will still consider it to have been caused by the touch event and will
	        // apply the cdk-touch-focused class rather than the cdk-program-focused class. This is a
	        // relatively small edge-case that can be worked around by using
	        // focusVia(parentEl, 'program') to focus the parent element.
	        //
	        // If we decide that we absolutely must handle this case correctly, we can do so by listening
	        // for the first focus event after the touchstart, and then the first blur event after that
	        // focus event. When that blur event fires we know that whatever follows is not a result of the
	        // touchstart.
	        var focusTarget = getTarget(event);
	        return this._lastTouchTarget instanceof Node && focusTarget instanceof Node &&
	            (focusTarget === this._lastTouchTarget || focusTarget.contains(this._lastTouchTarget));
	    };
	    /**
	     * Handles focus events on a registered element.
	     * @param event The focus event.
	     * @param element The monitored element.
	     */
	    FocusMonitor.prototype._onFocus = function (event, element) {
	        // NOTE(mmalerba): We currently set the classes based on the focus origin of the most recent
	        // focus event affecting the monitored element. If we want to use the origin of the first event
	        // instead we should check for the cdk-focused class here and return if the element already has
	        // it. (This only matters for elements that have includesChildren = true).
	        // If we are not counting child-element-focus as focused, make sure that the event target is the
	        // monitored element itself.
	        var elementInfo = this._elementInfo.get(element);
	        if (!elementInfo || (!elementInfo.checkChildren && element !== getTarget(event))) {
	            return;
	        }
	        var origin = this._getFocusOrigin(event);
	        this._setClasses(element, origin);
	        this._emitOrigin(elementInfo.subject, origin);
	        this._lastFocusOrigin = origin;
	    };
	    /**
	     * Handles blur events on a registered element.
	     * @param event The blur event.
	     * @param element The monitored element.
	     */
	    FocusMonitor.prototype._onBlur = function (event, element) {
	        // If we are counting child-element-focus as focused, make sure that we aren't just blurring in
	        // order to focus another child of the monitored element.
	        var elementInfo = this._elementInfo.get(element);
	        if (!elementInfo || (elementInfo.checkChildren && event.relatedTarget instanceof Node &&
	            element.contains(event.relatedTarget))) {
	            return;
	        }
	        this._setClasses(element);
	        this._emitOrigin(elementInfo.subject, null);
	    };
	    FocusMonitor.prototype._emitOrigin = function (subject, origin) {
	        this._ngZone.run(function () { return subject.next(origin); });
	    };
	    FocusMonitor.prototype._registerGlobalListeners = function (elementInfo) {
	        var _this = this;
	        if (!this._platform.isBrowser) {
	            return;
	        }
	        var rootNode = elementInfo.rootNode;
	        var rootNodeFocusListeners = this._rootNodeFocusListenerCount.get(rootNode) || 0;
	        if (!rootNodeFocusListeners) {
	            this._ngZone.runOutsideAngular(function () {
	                rootNode.addEventListener('focus', _this._rootNodeFocusAndBlurListener, captureEventListenerOptions);
	                rootNode.addEventListener('blur', _this._rootNodeFocusAndBlurListener, captureEventListenerOptions);
	            });
	        }
	        this._rootNodeFocusListenerCount.set(rootNode, rootNodeFocusListeners + 1);
	        // Register global listeners when first element is monitored.
	        if (++this._monitoredElementCount === 1) {
	            // Note: we listen to events in the capture phase so we
	            // can detect them even if the user stops propagation.
	            this._ngZone.runOutsideAngular(function () {
	                var document = _this._getDocument();
	                var window = _this._getWindow();
	                document.addEventListener('keydown', _this._documentKeydownListener, captureEventListenerOptions);
	                document.addEventListener('mousedown', _this._documentMousedownListener, captureEventListenerOptions);
	                document.addEventListener('touchstart', _this._documentTouchstartListener, captureEventListenerOptions);
	                window.addEventListener('focus', _this._windowFocusListener);
	            });
	        }
	    };
	    FocusMonitor.prototype._removeGlobalListeners = function (elementInfo) {
	        var rootNode = elementInfo.rootNode;
	        if (this._rootNodeFocusListenerCount.has(rootNode)) {
	            var rootNodeFocusListeners = this._rootNodeFocusListenerCount.get(rootNode);
	            if (rootNodeFocusListeners > 1) {
	                this._rootNodeFocusListenerCount.set(rootNode, rootNodeFocusListeners - 1);
	            }
	            else {
	                rootNode.removeEventListener('focus', this._rootNodeFocusAndBlurListener, captureEventListenerOptions);
	                rootNode.removeEventListener('blur', this._rootNodeFocusAndBlurListener, captureEventListenerOptions);
	                this._rootNodeFocusListenerCount.delete(rootNode);
	            }
	        }
	        // Unregister global listeners when last element is unmonitored.
	        if (!--this._monitoredElementCount) {
	            var document_1 = this._getDocument();
	            var window_1 = this._getWindow();
	            document_1.removeEventListener('keydown', this._documentKeydownListener, captureEventListenerOptions);
	            document_1.removeEventListener('mousedown', this._documentMousedownListener, captureEventListenerOptions);
	            document_1.removeEventListener('touchstart', this._documentTouchstartListener, captureEventListenerOptions);
	            window_1.removeEventListener('focus', this._windowFocusListener);
	            // Clear timeouts for all potentially pending timeouts to prevent the leaks.
	            clearTimeout(this._windowFocusTimeoutId);
	            clearTimeout(this._touchTimeoutId);
	            clearTimeout(this._originTimeoutId);
	        }
	    };
	    FocusMonitor.decorators = [
	        { type: Injectable, args: [{ providedIn: 'root' },] }
	    ];
	    /** @nocollapse */
	    FocusMonitor.ctorParameters = function () { return [
	        { type: NgZone },
	        { type: Platform },
	        { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [DOCUMENT$1,] }] },
	        { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [FOCUS_MONITOR_DEFAULT_OPTIONS,] }] }
	    ]; };
	    FocusMonitor.Éµprov = ÉµÉµdefineInjectable({ factory: function FocusMonitor_Factory() { return new FocusMonitor(ÉµÉµinject(NgZone), ÉµÉµinject(Platform), ÉµÉµinject(DOCUMENT$1, 8), ÉµÉµinject(FOCUS_MONITOR_DEFAULT_OPTIONS, 8)); }, token: FocusMonitor, providedIn: "root" });
	    return FocusMonitor;
	}());
	/** Gets the target of an event, accounting for Shadow DOM. */
	function getTarget(event) {
	    // If an event is bound outside the Shadow DOM, the `event.target` will
	    // point to the shadow root so we have to use `composedPath` instead.
	    return (event.composedPath ? event.composedPath()[0] : event.target);
	}
	/**
	 * Directive that determines how a particular element was focused (via keyboard, mouse, touch, or
	 * programmatically) and adds corresponding classes to the element.
	 *
	 * There are two variants of this directive:
	 * 1) cdkMonitorElementFocus: does not consider an element to be focused if one of its children is
	 *    focused.
	 * 2) cdkMonitorSubtreeFocus: considers an element focused if it or any of its children are focused.
	 */
	var CdkMonitorFocus = /** @class */ (function () {
	    function CdkMonitorFocus(_elementRef, _focusMonitor) {
	        var _this = this;
	        this._elementRef = _elementRef;
	        this._focusMonitor = _focusMonitor;
	        this.cdkFocusChange = new EventEmitter();
	        this._monitorSubscription = this._focusMonitor.monitor(this._elementRef, this._elementRef.nativeElement.hasAttribute('cdkMonitorSubtreeFocus'))
	            .subscribe(function (origin) { return _this.cdkFocusChange.emit(origin); });
	    }
	    CdkMonitorFocus.prototype.ngOnDestroy = function () {
	        this._focusMonitor.stopMonitoring(this._elementRef);
	        this._monitorSubscription.unsubscribe();
	    };
	    CdkMonitorFocus.decorators = [
	        { type: Directive, args: [{
	                    selector: '[cdkMonitorElementFocus], [cdkMonitorSubtreeFocus]',
	                },] }
	    ];
	    /** @nocollapse */
	    CdkMonitorFocus.ctorParameters = function () { return [
	        { type: ElementRef },
	        { type: FocusMonitor }
	    ]; };
	    CdkMonitorFocus.propDecorators = {
	        cdkFocusChange: [{ type: Output }]
	    };
	    return CdkMonitorFocus;
	}());

	/**
	 * @license
	 * Copyright Google LLC All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/** CSS class applied to the document body when in black-on-white high-contrast mode. */
	var BLACK_ON_WHITE_CSS_CLASS = 'cdk-high-contrast-black-on-white';
	/** CSS class applied to the document body when in white-on-black high-contrast mode. */
	var WHITE_ON_BLACK_CSS_CLASS = 'cdk-high-contrast-white-on-black';
	/** CSS class applied to the document body when in high-contrast mode. */
	var HIGH_CONTRAST_MODE_ACTIVE_CSS_CLASS = 'cdk-high-contrast-active';
	/**
	 * Service to determine whether the browser is currently in a high-contrast-mode environment.
	 *
	 * Microsoft Windows supports an accessibility feature called "High Contrast Mode". This mode
	 * changes the appearance of all applications, including web applications, to dramatically increase
	 * contrast.
	 *
	 * IE, Edge, and Firefox currently support this mode. Chrome does not support Windows High Contrast
	 * Mode. This service does not detect high-contrast mode as added by the Chrome "High Contrast"
	 * browser extension.
	 */
	var HighContrastModeDetector = /** @class */ (function () {
	    function HighContrastModeDetector(_platform, document) {
	        this._platform = _platform;
	        this._document = document;
	    }
	    /** Gets the current high-contrast-mode for the page. */
	    HighContrastModeDetector.prototype.getHighContrastMode = function () {
	        if (!this._platform.isBrowser) {
	            return 0 /* NONE */;
	        }
	        // Create a test element with an arbitrary background-color that is neither black nor
	        // white; high-contrast mode will coerce the color to either black or white. Also ensure that
	        // appending the test element to the DOM does not affect layout by absolutely positioning it
	        var testElement = this._document.createElement('div');
	        testElement.style.backgroundColor = 'rgb(1,2,3)';
	        testElement.style.position = 'absolute';
	        this._document.body.appendChild(testElement);
	        // Get the computed style for the background color, collapsing spaces to normalize between
	        // browsers. Once we get this color, we no longer need the test element. Access the `window`
	        // via the document so we can fake it in tests. Note that we have extra null checks, because
	        // this logic will likely run during app bootstrap and throwing can break the entire app.
	        var documentWindow = this._document.defaultView || window;
	        var computedStyle = (documentWindow && documentWindow.getComputedStyle) ?
	            documentWindow.getComputedStyle(testElement) : null;
	        var computedColor = (computedStyle && computedStyle.backgroundColor || '').replace(/ /g, '');
	        this._document.body.removeChild(testElement);
	        switch (computedColor) {
	            case 'rgb(0,0,0)': return 2 /* WHITE_ON_BLACK */;
	            case 'rgb(255,255,255)': return 1 /* BLACK_ON_WHITE */;
	        }
	        return 0 /* NONE */;
	    };
	    /** Applies CSS classes indicating high-contrast mode to document body (browser-only). */
	    HighContrastModeDetector.prototype._applyBodyHighContrastModeCssClasses = function () {
	        if (this._platform.isBrowser && this._document.body) {
	            var bodyClasses = this._document.body.classList;
	            // IE11 doesn't support `classList` operations with multiple arguments
	            bodyClasses.remove(HIGH_CONTRAST_MODE_ACTIVE_CSS_CLASS);
	            bodyClasses.remove(BLACK_ON_WHITE_CSS_CLASS);
	            bodyClasses.remove(WHITE_ON_BLACK_CSS_CLASS);
	            var mode = this.getHighContrastMode();
	            if (mode === 1 /* BLACK_ON_WHITE */) {
	                bodyClasses.add(HIGH_CONTRAST_MODE_ACTIVE_CSS_CLASS);
	                bodyClasses.add(BLACK_ON_WHITE_CSS_CLASS);
	            }
	            else if (mode === 2 /* WHITE_ON_BLACK */) {
	                bodyClasses.add(HIGH_CONTRAST_MODE_ACTIVE_CSS_CLASS);
	                bodyClasses.add(WHITE_ON_BLACK_CSS_CLASS);
	            }
	        }
	    };
	    HighContrastModeDetector.decorators = [
	        { type: Injectable, args: [{ providedIn: 'root' },] }
	    ];
	    /** @nocollapse */
	    HighContrastModeDetector.ctorParameters = function () { return [
	        { type: Platform },
	        { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT$1,] }] }
	    ]; };
	    HighContrastModeDetector.Éµprov = ÉµÉµdefineInjectable({ factory: function HighContrastModeDetector_Factory() { return new HighContrastModeDetector(ÉµÉµinject(Platform), ÉµÉµinject(DOCUMENT$1)); }, token: HighContrastModeDetector, providedIn: "root" });
	    return HighContrastModeDetector;
	}());

	/**
	 * @license
	 * Copyright Google LLC All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * Injection token used to inject the document into Directionality.
	 * This is used so that the value can be faked in tests.
	 *
	 * We can't use the real document in tests because changing the real `dir` causes geometry-based
	 * tests in Safari to fail.
	 *
	 * We also can't re-provide the DOCUMENT token from platform-brower because the unit tests
	 * themselves use things like `querySelector` in test code.
	 *
	 * This token is defined in a separate file from Directionality as a workaround for
	 * https://github.com/angular/angular/issues/22559
	 *
	 * @docs-private
	 */
	var DIR_DOCUMENT = new InjectionToken('cdk-dir-doc', {
	    providedIn: 'root',
	    factory: DIR_DOCUMENT_FACTORY,
	});
	/** @docs-private */
	function DIR_DOCUMENT_FACTORY() {
	    return inject(DOCUMENT$1);
	}

	/**
	 * @license
	 * Copyright Google LLC All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * The directionality (LTR / RTL) context for the application (or a subtree of it).
	 * Exposes the current direction and a stream of direction changes.
	 */
	var Directionality = /** @class */ (function () {
	    function Directionality(_document) {
	        /** The current 'ltr' or 'rtl' value. */
	        this.value = 'ltr';
	        /** Stream that emits whenever the 'ltr' / 'rtl' state changes. */
	        this.change = new EventEmitter();
	        if (_document) {
	            // TODO: handle 'auto' value -
	            // We still need to account for dir="auto".
	            // It looks like HTMLElemenet.dir is also "auto" when that's set to the attribute,
	            // but getComputedStyle return either "ltr" or "rtl". avoiding getComputedStyle for now
	            var bodyDir = _document.body ? _document.body.dir : null;
	            var htmlDir = _document.documentElement ? _document.documentElement.dir : null;
	            var value = bodyDir || htmlDir;
	            this.value = (value === 'ltr' || value === 'rtl') ? value : 'ltr';
	        }
	    }
	    Directionality.prototype.ngOnDestroy = function () {
	        this.change.complete();
	    };
	    Directionality.decorators = [
	        { type: Injectable, args: [{ providedIn: 'root' },] }
	    ];
	    /** @nocollapse */
	    Directionality.ctorParameters = function () { return [
	        { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [DIR_DOCUMENT,] }] }
	    ]; };
	    Directionality.Éµprov = ÉµÉµdefineInjectable({ factory: function Directionality_Factory() { return new Directionality(ÉµÉµinject(DIR_DOCUMENT, 8)); }, token: Directionality, providedIn: "root" });
	    return Directionality;
	}());

	/**
	 * @license
	 * Copyright Google LLC All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * Directive to listen for changes of direction of part of the DOM.
	 *
	 * Provides itself as Directionality such that descendant directives only need to ever inject
	 * Directionality to get the closest direction.
	 */
	var Dir = /** @class */ (function () {
	    function Dir() {
	        /** Normalized direction that accounts for invalid/unsupported values. */
	        this._dir = 'ltr';
	        /** Whether the `value` has been set to its initial value. */
	        this._isInitialized = false;
	        /** Event emitted when the direction changes. */
	        this.change = new EventEmitter();
	    }
	    Object.defineProperty(Dir.prototype, "dir", {
	        /** @docs-private */
	        get: function () { return this._dir; },
	        set: function (value) {
	            var old = this._dir;
	            var normalizedValue = value ? value.toLowerCase() : value;
	            this._rawDir = value;
	            this._dir = (normalizedValue === 'ltr' || normalizedValue === 'rtl') ? normalizedValue : 'ltr';
	            if (old !== this._dir && this._isInitialized) {
	                this.change.emit(this._dir);
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(Dir.prototype, "value", {
	        /** Current layout direction of the element. */
	        get: function () { return this.dir; },
	        enumerable: true,
	        configurable: true
	    });
	    /** Initialize once default value has been set. */
	    Dir.prototype.ngAfterContentInit = function () {
	        this._isInitialized = true;
	    };
	    Dir.prototype.ngOnDestroy = function () {
	        this.change.complete();
	    };
	    Dir.decorators = [
	        { type: Directive, args: [{
	                    selector: '[dir]',
	                    providers: [{ provide: Directionality, useExisting: Dir }],
	                    host: { '[attr.dir]': '_rawDir' },
	                    exportAs: 'dir',
	                },] }
	    ];
	    Dir.propDecorators = {
	        change: [{ type: Output, args: ['dirChange',] }],
	        dir: [{ type: Input }]
	    };
	    return Dir;
	}());

	/**
	 * @license
	 * Copyright Google LLC All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	var BidiModule = /** @class */ (function () {
	    function BidiModule() {
	    }
	    BidiModule.decorators = [
	        { type: NgModule, args: [{
	                    exports: [Dir],
	                    declarations: [Dir],
	                },] }
	    ];
	    return BidiModule;
	}());

	/**
	 * @license
	 * Copyright Google LLC All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/** Current version of the Angular Component Development Kit. */
	var VERSION$6 = new Version$1('9.2.3');

	/**
	 * @license
	 * Copyright Google LLC All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/** Current version of Angular Material. */
	var VERSION$7 = new Version$1('9.2.3');

	/**
	 * @license
	 * Copyright Google LLC All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	// Private version constant to circumvent test/build issues,
	// i.e. avoid core to depend on the @angular/material primary entry-point
	// Can be removed once the Material primary entry-point no longer
	// re-exports all secondary entry-points
	var VERSION$1$1 = new Version$1('9.2.3');
	/** @docs-private */
	function MATERIAL_SANITY_CHECKS_FACTORY() {
	    return true;
	}
	/** Injection token that configures whether the Material sanity checks are enabled. */
	var MATERIAL_SANITY_CHECKS = new InjectionToken('mat-sanity-checks', {
	    providedIn: 'root',
	    factory: MATERIAL_SANITY_CHECKS_FACTORY,
	});
	/**
	 * Module that captures anything that should be loaded and/or run for *all* Angular Material
	 * components. This includes Bidi, etc.
	 *
	 * This module should be imported to each top-level component module (e.g., MatTabsModule).
	 */
	var MatCommonModule = /** @class */ (function () {
	    function MatCommonModule(highContrastModeDetector, sanityChecks, 
	    /** @breaking-change 11.0.0 make document required */
	    document) {
	        /** Whether we've done the global sanity checks (e.g. a theme is loaded, there is a doctype). */
	        this._hasDoneGlobalChecks = false;
	        this._document = document;
	        // While A11yModule also does this, we repeat it here to avoid importing A11yModule
	        // in MatCommonModule.
	        highContrastModeDetector._applyBodyHighContrastModeCssClasses();
	        // Note that `_sanityChecks` is typed to `any`, because AoT
	        // throws an error if we use the `SanityChecks` type directly.
	        this._sanityChecks = sanityChecks;
	        if (!this._hasDoneGlobalChecks) {
	            this._checkDoctypeIsDefined();
	            this._checkThemeIsPresent();
	            this._checkCdkVersionMatch();
	            this._hasDoneGlobalChecks = true;
	        }
	    }
	    /** Access injected document if available or fallback to global document reference */
	    MatCommonModule.prototype._getDocument = function () {
	        var doc = this._document || document;
	        return typeof doc === 'object' && doc ? doc : null;
	    };
	    /** Use defaultView of injected document if available or fallback to global window reference */
	    MatCommonModule.prototype._getWindow = function () {
	        var doc = this._getDocument();
	        var win = (doc === null || doc === void 0 ? void 0 : doc.defaultView) || window;
	        return typeof win === 'object' && win ? win : null;
	    };
	    /** Whether any sanity checks are enabled. */
	    MatCommonModule.prototype._checksAreEnabled = function () {
	        return  !this._isTestEnv();
	    };
	    /** Whether the code is running in tests. */
	    MatCommonModule.prototype._isTestEnv = function () {
	        var window = this._getWindow();
	        return window && (window.__karma__ || window.jasmine);
	    };
	    MatCommonModule.prototype._checkDoctypeIsDefined = function () {
	        var isEnabled = this._checksAreEnabled() &&
	            (this._sanityChecks === true || this._sanityChecks.doctype);
	        var document = this._getDocument();
	        if (isEnabled && document && !document.doctype) {
	            console.warn('Current document does not have a doctype. This may cause ' +
	                'some Angular Material components not to behave as expected.');
	        }
	    };
	    MatCommonModule.prototype._checkThemeIsPresent = function () {
	        // We need to assert that the `body` is defined, because these checks run very early
	        // and the `body` won't be defined if the consumer put their scripts in the `head`.
	        var isDisabled = !this._checksAreEnabled() ||
	            (this._sanityChecks === false || !this._sanityChecks.theme);
	        var document = this._getDocument();
	        if (isDisabled || !document || !document.body ||
	            typeof getComputedStyle !== 'function') {
	            return;
	        }
	        var testElement = document.createElement('div');
	        testElement.classList.add('mat-theme-loaded-marker');
	        document.body.appendChild(testElement);
	        var computedStyle = getComputedStyle(testElement);
	        // In some situations the computed style of the test element can be null. For example in
	        // Firefox, the computed style is null if an application is running inside of a hidden iframe.
	        // See: https://bugzilla.mozilla.org/show_bug.cgi?id=548397
	        if (computedStyle && computedStyle.display !== 'none') {
	            console.warn('Could not find Angular Material core theme. Most Material ' +
	                'components may not work as expected. For more info refer ' +
	                'to the theming guide: https://material.angular.io/guide/theming');
	        }
	        document.body.removeChild(testElement);
	    };
	    /** Checks whether the material version matches the cdk version */
	    MatCommonModule.prototype._checkCdkVersionMatch = function () {
	        var isEnabled = this._checksAreEnabled() &&
	            (this._sanityChecks === true || this._sanityChecks.version);
	        if (isEnabled && VERSION$1$1.full !== VERSION$6.full) {
	            console.warn('The Angular Material version (' + VERSION$1$1.full + ') does not match ' +
	                'the Angular CDK version (' + VERSION$6.full + ').\n' +
	                'Please ensure the versions of these two packages exactly match.');
	        }
	    };
	    MatCommonModule.decorators = [
	        { type: NgModule, args: [{
	                    imports: [BidiModule],
	                    exports: [BidiModule],
	                },] }
	    ];
	    /** @nocollapse */
	    MatCommonModule.ctorParameters = function () { return [
	        { type: HighContrastModeDetector },
	        { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MATERIAL_SANITY_CHECKS,] }] },
	        { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [DOCUMENT$1,] }] }
	    ]; };
	    return MatCommonModule;
	}());

	/**
	 * @license
	 * Copyright Google LLC All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/** Mixin to augment a directive with a `disabled` property. */
	function mixinDisabled(base) {
	    return /** @class */ (function (_super) {
	        __extends(class_1, _super);
	        function class_1() {
	            var args = [];
	            for (var _i = 0; _i < arguments.length; _i++) {
	                args[_i] = arguments[_i];
	            }
	            var _this = _super.apply(this, __spread(args)) || this;
	            _this._disabled = false;
	            return _this;
	        }
	        Object.defineProperty(class_1.prototype, "disabled", {
	            get: function () { return this._disabled; },
	            set: function (value) { this._disabled = coerceBooleanProperty(value); },
	            enumerable: true,
	            configurable: true
	        });
	        return class_1;
	    }(base));
	}

	/**
	 * @license
	 * Copyright Google LLC All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/** Mixin to augment a directive with a `color` property. */
	function mixinColor(base, defaultColor) {
	    return /** @class */ (function (_super) {
	        __extends(class_1, _super);
	        function class_1() {
	            var args = [];
	            for (var _i = 0; _i < arguments.length; _i++) {
	                args[_i] = arguments[_i];
	            }
	            var _this = _super.apply(this, __spread(args)) || this;
	            // Set the default color that can be specified from the mixin.
	            _this.color = defaultColor;
	            return _this;
	        }
	        Object.defineProperty(class_1.prototype, "color", {
	            get: function () { return this._color; },
	            set: function (value) {
	                var colorPalette = value || defaultColor;
	                if (colorPalette !== this._color) {
	                    if (this._color) {
	                        this._elementRef.nativeElement.classList.remove("mat-" + this._color);
	                    }
	                    if (colorPalette) {
	                        this._elementRef.nativeElement.classList.add("mat-" + colorPalette);
	                    }
	                    this._color = colorPalette;
	                }
	            },
	            enumerable: true,
	            configurable: true
	        });
	        return class_1;
	    }(base));
	}

	/**
	 * @license
	 * Copyright Google LLC All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/** Mixin to augment a directive with a `disableRipple` property. */
	function mixinDisableRipple(base) {
	    return /** @class */ (function (_super) {
	        __extends(class_1, _super);
	        function class_1() {
	            var args = [];
	            for (var _i = 0; _i < arguments.length; _i++) {
	                args[_i] = arguments[_i];
	            }
	            var _this = _super.apply(this, __spread(args)) || this;
	            _this._disableRipple = false;
	            return _this;
	        }
	        Object.defineProperty(class_1.prototype, "disableRipple", {
	            /** Whether the ripple effect is disabled or not. */
	            get: function () { return this._disableRipple; },
	            set: function (value) { this._disableRipple = coerceBooleanProperty(value); },
	            enumerable: true,
	            configurable: true
	        });
	        return class_1;
	    }(base));
	}

	/**
	 * @license
	 * Copyright Google LLC All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */

	/**
	 * @license
	 * Copyright Google LLC All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/** InjectionToken for datepicker that can be used to override default locale code. */
	var MAT_DATE_LOCALE = new InjectionToken('MAT_DATE_LOCALE', {
	    providedIn: 'root',
	    factory: MAT_DATE_LOCALE_FACTORY,
	});
	/** @docs-private */
	function MAT_DATE_LOCALE_FACTORY() {
	    return inject(LOCALE_ID$1);
	}
	/** Adapts type `D` to be usable as a date by cdk-based components that work with dates. */
	var DateAdapter = /** @class */ (function () {
	    function DateAdapter() {
	        this._localeChanges = new Subject();
	    }
	    Object.defineProperty(DateAdapter.prototype, "localeChanges", {
	        /** A stream that emits when the locale changes. */
	        get: function () { return this._localeChanges; },
	        enumerable: true,
	        configurable: true
	    });
	    /**
	     * Attempts to deserialize a value to a valid date object. This is different from parsing in that
	     * deserialize should only accept non-ambiguous, locale-independent formats (e.g. a ISO 8601
	     * string). The default implementation does not allow any deserialization, it simply checks that
	     * the given value is already a valid date object or null. The `<mat-datepicker>` will call this
	     * method on all of its `@Input()` properties that accept dates. It is therefore possible to
	     * support passing values from your backend directly to these properties by overriding this method
	     * to also deserialize the format used by your backend.
	     * @param value The value to be deserialized into a date object.
	     * @returns The deserialized date object, either a valid date, null if the value can be
	     *     deserialized into a null date (e.g. the empty string), or an invalid date.
	     */
	    DateAdapter.prototype.deserialize = function (value) {
	        if (value == null || this.isDateInstance(value) && this.isValid(value)) {
	            return value;
	        }
	        return this.invalid();
	    };
	    /**
	     * Sets the locale used for all dates.
	     * @param locale The new locale.
	     */
	    DateAdapter.prototype.setLocale = function (locale) {
	        this.locale = locale;
	        this._localeChanges.next();
	    };
	    /**
	     * Compares two dates.
	     * @param first The first date to compare.
	     * @param second The second date to compare.
	     * @returns 0 if the dates are equal, a number less than 0 if the first date is earlier,
	     *     a number greater than 0 if the first date is later.
	     */
	    DateAdapter.prototype.compareDate = function (first, second) {
	        return this.getYear(first) - this.getYear(second) ||
	            this.getMonth(first) - this.getMonth(second) ||
	            this.getDate(first) - this.getDate(second);
	    };
	    /**
	     * Checks if two dates are equal.
	     * @param first The first date to check.
	     * @param second The second date to check.
	     * @returns Whether the two dates are equal.
	     *     Null dates are considered equal to other null dates.
	     */
	    DateAdapter.prototype.sameDate = function (first, second) {
	        if (first && second) {
	            var firstValid = this.isValid(first);
	            var secondValid = this.isValid(second);
	            if (firstValid && secondValid) {
	                return !this.compareDate(first, second);
	            }
	            return firstValid == secondValid;
	        }
	        return first == second;
	    };
	    /**
	     * Clamp the given date between min and max dates.
	     * @param date The date to clamp.
	     * @param min The minimum value to allow. If null or omitted no min is enforced.
	     * @param max The maximum value to allow. If null or omitted no max is enforced.
	     * @returns `min` if `date` is less than `min`, `max` if date is greater than `max`,
	     *     otherwise `date`.
	     */
	    DateAdapter.prototype.clampDate = function (date, min, max) {
	        if (min && this.compareDate(date, min) < 0) {
	            return min;
	        }
	        if (max && this.compareDate(date, max) > 0) {
	            return max;
	        }
	        return date;
	    };
	    return DateAdapter;
	}());

	/**
	 * @license
	 * Copyright Google LLC All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	var MAT_DATE_FORMATS = new InjectionToken('mat-date-formats');

	/**
	 * @license
	 * Copyright Google LLC All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	// TODO(mmalerba): Remove when we no longer support safari 9.
	/** Whether the browser supports the Intl API. */
	var SUPPORTS_INTL_API;
	// We need a try/catch around the reference to `Intl`, because accessing it in some cases can
	// cause IE to throw. These cases are tied to particular versions of Windows and can happen if
	// the consumer is providing a polyfilled `Map`. See:
	// https://github.com/Microsoft/ChakraCore/issues/3189
	// https://github.com/angular/components/issues/15687
	try {
	    SUPPORTS_INTL_API = typeof Intl != 'undefined';
	}
	catch (_a) {
	    SUPPORTS_INTL_API = false;
	}
	/** The default month names to use if Intl API is not available. */
	var DEFAULT_MONTH_NAMES = {
	    'long': [
	        'January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September',
	        'October', 'November', 'December'
	    ],
	    'short': ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],
	    'narrow': ['J', 'F', 'M', 'A', 'M', 'J', 'J', 'A', 'S', 'O', 'N', 'D']
	};
	var Éµ0$b = function (i) { return String(i + 1); };
	/** The default date names to use if Intl API is not available. */
	var DEFAULT_DATE_NAMES = range(31, Éµ0$b);
	/** The default day of the week names to use if Intl API is not available. */
	var DEFAULT_DAY_OF_WEEK_NAMES = {
	    'long': ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],
	    'short': ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],
	    'narrow': ['S', 'M', 'T', 'W', 'T', 'F', 'S']
	};
	/**
	 * Matches strings that have the form of a valid RFC 3339 string
	 * (https://tools.ietf.org/html/rfc3339). Note that the string may not actually be a valid date
	 * because the regex will match strings an with out of bounds month, date, etc.
	 */
	var ISO_8601_REGEX = /^\d{4}-\d{2}-\d{2}(?:T\d{2}:\d{2}:\d{2}(?:\.\d+)?(?:Z|(?:(?:\+|-)\d{2}:\d{2}))?)?$/;
	/** Creates an array and fills it with values. */
	function range(length, valueFunction) {
	    var valuesArray = Array(length);
	    for (var i = 0; i < length; i++) {
	        valuesArray[i] = valueFunction(i);
	    }
	    return valuesArray;
	}
	/** Adapts the native JS Date for use with cdk-based components that work with dates. */
	var NativeDateAdapter = /** @class */ (function (_super) {
	    __extends(NativeDateAdapter, _super);
	    function NativeDateAdapter(matDateLocale, platform) {
	        var _this = _super.call(this) || this;
	        /**
	         * Whether to use `timeZone: 'utc'` with `Intl.DateTimeFormat` when formatting dates.
	         * Without this `Intl.DateTimeFormat` sometimes chooses the wrong timeZone, which can throw off
	         * the result. (e.g. in the en-US locale `new Date(1800, 7, 14).toLocaleDateString()`
	         * will produce `'8/13/1800'`.
	         *
	         * TODO(mmalerba): drop this variable. It's not being used in the code right now. We're now
	         * getting the string representation of a Date object from its utc representation. We're keeping
	         * it here for sometime, just for precaution, in case we decide to revert some of these changes
	         * though.
	         */
	        _this.useUtcForDisplay = true;
	        _super.prototype.setLocale.call(_this, matDateLocale);
	        // IE does its own time zone correction, so we disable this on IE.
	        _this.useUtcForDisplay = !platform.TRIDENT;
	        _this._clampDate = platform.TRIDENT || platform.EDGE;
	        return _this;
	    }
	    NativeDateAdapter.prototype.getYear = function (date) {
	        return date.getFullYear();
	    };
	    NativeDateAdapter.prototype.getMonth = function (date) {
	        return date.getMonth();
	    };
	    NativeDateAdapter.prototype.getDate = function (date) {
	        return date.getDate();
	    };
	    NativeDateAdapter.prototype.getDayOfWeek = function (date) {
	        return date.getDay();
	    };
	    NativeDateAdapter.prototype.getMonthNames = function (style) {
	        var _this = this;
	        if (SUPPORTS_INTL_API) {
	            var dtf_1 = new Intl.DateTimeFormat(this.locale, { month: style, timeZone: 'utc' });
	            return range(12, function (i) {
	                return _this._stripDirectionalityCharacters(_this._format(dtf_1, new Date(2017, i, 1)));
	            });
	        }
	        return DEFAULT_MONTH_NAMES[style];
	    };
	    NativeDateAdapter.prototype.getDateNames = function () {
	        var _this = this;
	        if (SUPPORTS_INTL_API) {
	            var dtf_2 = new Intl.DateTimeFormat(this.locale, { day: 'numeric', timeZone: 'utc' });
	            return range(31, function (i) { return _this._stripDirectionalityCharacters(_this._format(dtf_2, new Date(2017, 0, i + 1))); });
	        }
	        return DEFAULT_DATE_NAMES;
	    };
	    NativeDateAdapter.prototype.getDayOfWeekNames = function (style) {
	        var _this = this;
	        if (SUPPORTS_INTL_API) {
	            var dtf_3 = new Intl.DateTimeFormat(this.locale, { weekday: style, timeZone: 'utc' });
	            return range(7, function (i) { return _this._stripDirectionalityCharacters(_this._format(dtf_3, new Date(2017, 0, i + 1))); });
	        }
	        return DEFAULT_DAY_OF_WEEK_NAMES[style];
	    };
	    NativeDateAdapter.prototype.getYearName = function (date) {
	        if (SUPPORTS_INTL_API) {
	            var dtf = new Intl.DateTimeFormat(this.locale, { year: 'numeric', timeZone: 'utc' });
	            return this._stripDirectionalityCharacters(this._format(dtf, date));
	        }
	        return String(this.getYear(date));
	    };
	    NativeDateAdapter.prototype.getFirstDayOfWeek = function () {
	        // We can't tell using native JS Date what the first day of the week is, we default to Sunday.
	        return 0;
	    };
	    NativeDateAdapter.prototype.getNumDaysInMonth = function (date) {
	        return this.getDate(this._createDateWithOverflow(this.getYear(date), this.getMonth(date) + 1, 0));
	    };
	    NativeDateAdapter.prototype.clone = function (date) {
	        return new Date(date.getTime());
	    };
	    NativeDateAdapter.prototype.createDate = function (year, month, date) {
	        // Check for invalid month and date (except upper bound on date which we have to check after
	        // creating the Date).
	        if (month < 0 || month > 11) {
	            throw Error("Invalid month index \"" + month + "\". Month index has to be between 0 and 11.");
	        }
	        if (date < 1) {
	            throw Error("Invalid date \"" + date + "\". Date has to be greater than 0.");
	        }
	        var result = this._createDateWithOverflow(year, month, date);
	        // Check that the date wasn't above the upper bound for the month, causing the month to overflow
	        if (result.getMonth() != month) {
	            throw Error("Invalid date \"" + date + "\" for month with index \"" + month + "\".");
	        }
	        return result;
	    };
	    NativeDateAdapter.prototype.today = function () {
	        return new Date();
	    };
	    NativeDateAdapter.prototype.parse = function (value) {
	        // We have no way using the native JS Date to set the parse format or locale, so we ignore these
	        // parameters.
	        if (typeof value == 'number') {
	            return new Date(value);
	        }
	        return value ? new Date(Date.parse(value)) : null;
	    };
	    NativeDateAdapter.prototype.format = function (date, displayFormat) {
	        if (!this.isValid(date)) {
	            throw Error('NativeDateAdapter: Cannot format invalid date.');
	        }
	        if (SUPPORTS_INTL_API) {
	            // On IE and Edge the i18n API will throw a hard error that can crash the entire app
	            // if we attempt to format a date whose year is less than 1 or greater than 9999.
	            if (this._clampDate && (date.getFullYear() < 1 || date.getFullYear() > 9999)) {
	                date = this.clone(date);
	                date.setFullYear(Math.max(1, Math.min(9999, date.getFullYear())));
	            }
	            displayFormat = __assign(__assign({}, displayFormat), { timeZone: 'utc' });
	            var dtf = new Intl.DateTimeFormat(this.locale, displayFormat);
	            return this._stripDirectionalityCharacters(this._format(dtf, date));
	        }
	        return this._stripDirectionalityCharacters(date.toDateString());
	    };
	    NativeDateAdapter.prototype.addCalendarYears = function (date, years) {
	        return this.addCalendarMonths(date, years * 12);
	    };
	    NativeDateAdapter.prototype.addCalendarMonths = function (date, months) {
	        var newDate = this._createDateWithOverflow(this.getYear(date), this.getMonth(date) + months, this.getDate(date));
	        // It's possible to wind up in the wrong month if the original month has more days than the new
	        // month. In this case we want to go to the last day of the desired month.
	        // Note: the additional + 12 % 12 ensures we end up with a positive number, since JS % doesn't
	        // guarantee this.
	        if (this.getMonth(newDate) != ((this.getMonth(date) + months) % 12 + 12) % 12) {
	            newDate = this._createDateWithOverflow(this.getYear(newDate), this.getMonth(newDate), 0);
	        }
	        return newDate;
	    };
	    NativeDateAdapter.prototype.addCalendarDays = function (date, days) {
	        return this._createDateWithOverflow(this.getYear(date), this.getMonth(date), this.getDate(date) + days);
	    };
	    NativeDateAdapter.prototype.toIso8601 = function (date) {
	        return [
	            date.getUTCFullYear(),
	            this._2digit(date.getUTCMonth() + 1),
	            this._2digit(date.getUTCDate())
	        ].join('-');
	    };
	    /**
	     * Returns the given value if given a valid Date or null. Deserializes valid ISO 8601 strings
	     * (https://www.ietf.org/rfc/rfc3339.txt) into valid Dates and empty string into null. Returns an
	     * invalid date for all other values.
	     */
	    NativeDateAdapter.prototype.deserialize = function (value) {
	        if (typeof value === 'string') {
	            if (!value) {
	                return null;
	            }
	            // The `Date` constructor accepts formats other than ISO 8601, so we need to make sure the
	            // string is the right format first.
	            if (ISO_8601_REGEX.test(value)) {
	                var date = new Date(value);
	                if (this.isValid(date)) {
	                    return date;
	                }
	            }
	        }
	        return _super.prototype.deserialize.call(this, value);
	    };
	    NativeDateAdapter.prototype.isDateInstance = function (obj) {
	        return obj instanceof Date;
	    };
	    NativeDateAdapter.prototype.isValid = function (date) {
	        return !isNaN(date.getTime());
	    };
	    NativeDateAdapter.prototype.invalid = function () {
	        return new Date(NaN);
	    };
	    /** Creates a date but allows the month and date to overflow. */
	    NativeDateAdapter.prototype._createDateWithOverflow = function (year, month, date) {
	        var result = new Date(year, month, date);
	        // We need to correct for the fact that JS native Date treats years in range [0, 99] as
	        // abbreviations for 19xx.
	        if (year >= 0 && year < 100) {
	            result.setFullYear(this.getYear(result) - 1900);
	        }
	        return result;
	    };
	    /**
	     * Pads a number to make it two digits.
	     * @param n The number to pad.
	     * @returns The padded number.
	     */
	    NativeDateAdapter.prototype._2digit = function (n) {
	        return ('00' + n).slice(-2);
	    };
	    /**
	     * Strip out unicode LTR and RTL characters. Edge and IE insert these into formatted dates while
	     * other browsers do not. We remove them to make output consistent and because they interfere with
	     * date parsing.
	     * @param str The string to strip direction characters from.
	     * @returns The stripped string.
	     */
	    NativeDateAdapter.prototype._stripDirectionalityCharacters = function (str) {
	        return str.replace(/[\u200e\u200f]/g, '');
	    };
	    /**
	     * When converting Date object to string, javascript built-in functions may return wrong
	     * results because it applies its internal DST rules. The DST rules around the world change
	     * very frequently, and the current valid rule is not always valid in previous years though.
	     * We work around this problem building a new Date object which has its internal UTC
	     * representation with the local date and time.
	     * @param dtf Intl.DateTimeFormat object, containg the desired string format. It must have
	     *    timeZone set to 'utc' to work fine.
	     * @param date Date from which we want to get the string representation according to dtf
	     * @returns A Date object with its UTC representation based on the passed in date info
	     */
	    NativeDateAdapter.prototype._format = function (dtf, date) {
	        var d = new Date(Date.UTC(date.getFullYear(), date.getMonth(), date.getDate(), date.getHours(), date.getMinutes(), date.getSeconds(), date.getMilliseconds()));
	        return dtf.format(d);
	    };
	    NativeDateAdapter.decorators = [
	        { type: Injectable }
	    ];
	    /** @nocollapse */
	    NativeDateAdapter.ctorParameters = function () { return [
	        { type: String, decorators: [{ type: Optional }, { type: Inject, args: [MAT_DATE_LOCALE,] }] },
	        { type: Platform }
	    ]; };
	    return NativeDateAdapter;
	}(DateAdapter));
	/** Provider that defines how form controls behave with regards to displaying error messages. */
	var ErrorStateMatcher = /** @class */ (function () {
	    function ErrorStateMatcher() {
	    }
	    ErrorStateMatcher.prototype.isErrorState = function (control, form) {
	        return !!(control && control.invalid && (control.touched || (form && form.submitted)));
	    };
	    ErrorStateMatcher.decorators = [
	        { type: Injectable, args: [{ providedIn: 'root' },] }
	    ];
	    ErrorStateMatcher.Éµprov = ÉµÉµdefineInjectable({ factory: function ErrorStateMatcher_Factory() { return new ErrorStateMatcher(); }, token: ErrorStateMatcher, providedIn: "root" });
	    return ErrorStateMatcher;
	}());

	/**
	 * @license
	 * Copyright Google LLC All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * Injection token that can be used to provide options to the Hammerjs instance.
	 * More info at http://hammerjs.github.io/api/.
	 * @deprecated No longer being used. To be removed.
	 * @breaking-change 10.0.0
	 */
	var MAT_HAMMER_OPTIONS = new InjectionToken('MAT_HAMMER_OPTIONS');
	var ANGULAR_MATERIAL_SUPPORTED_HAMMER_GESTURES = [
	    'longpress',
	    'slide',
	    'slidestart',
	    'slideend',
	    'slideright',
	    'slideleft'
	];
	var Éµ0$2$3 = function () { }, Éµ1$6 = function () { };
	/**
	 * Fake HammerInstance that is used when a Hammer instance is requested when HammerJS has not
	 * been loaded on the page.
	 */
	var noopHammerInstance = {
	    on: Éµ0$2$3,
	    off: Éµ1$6,
	};
	/**
	 * Adjusts configuration of our gesture library, Hammer.
	 * @deprecated No longer being used. To be removed.
	 * @breaking-change 10.0.0
	 */
	var GestureConfig = /** @class */ (function (_super) {
	    __extends(GestureConfig, _super);
	    function GestureConfig(_hammerOptions, _commonModule) {
	        var _this = _super.call(this) || this;
	        _this._hammerOptions = _hammerOptions;
	        /** List of new event names to add to the gesture support list */
	        _this.events = ANGULAR_MATERIAL_SUPPORTED_HAMMER_GESTURES;
	        return _this;
	    }
	    /**
	     * Builds Hammer instance manually to add custom recognizers that match the Material Design spec.
	     *
	     * Our gesture names come from the Material Design gestures spec:
	     * https://material.io/design/#gestures-touch-mechanics
	     *
	     * More information on default recognizers can be found in Hammer docs:
	     * http://hammerjs.github.io/recognizer-pan/
	     * http://hammerjs.github.io/recognizer-press/
	     *
	     * @param element Element to which to assign the new HammerJS gestures.
	     * @returns Newly-created HammerJS instance.
	     */
	    GestureConfig.prototype.buildHammer = function (element) {
	        var hammer = typeof window !== 'undefined' ? window.Hammer : null;
	        if (!hammer) {
	            // If HammerJS is not loaded here, return the noop HammerInstance. This is necessary to
	            // ensure that omitting HammerJS completely will not cause any errors while *also* supporting
	            // the lazy-loading of HammerJS via the HAMMER_LOADER token introduced in Angular 6.1.
	            // Because we can't depend on HAMMER_LOADER's existance until 7.0, we have to always set
	            // `this.events` to the set we support, instead of conditionally setting it to `[]` if
	            // `HAMMER_LOADER` is present (and then throwing an Error here if `window.Hammer` is
	            // undefined).
	            // @breaking-change 8.0.0
	            return noopHammerInstance;
	        }
	        var mc = new hammer(element, this._hammerOptions || undefined);
	        // Default Hammer Recognizers.
	        var pan = new hammer.Pan();
	        var swipe = new hammer.Swipe();
	        var press = new hammer.Press();
	        // Notice that a HammerJS recognizer can only depend on one other recognizer once.
	        // Otherwise the previous `recognizeWith` will be dropped.
	        // TODO: Confirm threshold numbers with Material Design UX Team
	        var slide = this._createRecognizer(pan, { event: 'slide', threshold: 0 }, swipe);
	        var longpress = this._createRecognizer(press, { event: 'longpress', time: 500 });
	        // Overwrite the default `pan` event to use the swipe event.
	        pan.recognizeWith(swipe);
	        // Since the slide event threshold is set to zero, the slide recognizer can fire and
	        // accidentally reset the longpress recognizer. In order to make sure that the two
	        // recognizers can run simultaneously but don't affect each other, we allow the slide
	        // recognizer to recognize while a longpress is being processed.
	        // See: https://github.com/hammerjs/hammer.js/blob/master/src/manager.js#L123-L124
	        longpress.recognizeWith(slide);
	        // Add customized gestures to Hammer manager
	        mc.add([swipe, press, pan, slide, longpress]);
	        return mc;
	    };
	    /** Creates a new recognizer, without affecting the default recognizers of HammerJS */
	    GestureConfig.prototype._createRecognizer = function (base, options) {
	        var inheritances = [];
	        for (var _i = 2; _i < arguments.length; _i++) {
	            inheritances[_i - 2] = arguments[_i];
	        }
	        var recognizer = new base.constructor(options);
	        inheritances.push(base);
	        inheritances.forEach(function (item) { return recognizer.recognizeWith(item); });
	        return recognizer;
	    };
	    GestureConfig.decorators = [
	        { type: Injectable }
	    ];
	    /** @nocollapse */
	    GestureConfig.ctorParameters = function () { return [
	        { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MAT_HAMMER_OPTIONS,] }] },
	        { type: MatCommonModule, decorators: [{ type: Optional }] }
	    ]; };
	    return GestureConfig;
	}(HammerGestureConfig));

	/**
	 * @license
	 * Copyright Google LLC All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * Shared directive to count lines inside a text area, such as a list item.
	 * Line elements can be extracted with a @ContentChildren(MatLine) query, then
	 * counted by checking the query list's length.
	 */
	var MatLine = /** @class */ (function () {
	    function MatLine() {
	    }
	    MatLine.decorators = [
	        { type: Directive, args: [{
	                    selector: '[mat-line], [matLine]',
	                    host: { 'class': 'mat-line' }
	                },] }
	    ];
	    return MatLine;
	}());
	/**
	 * Helper that takes a query list of lines and sets the correct class on the host.
	 * @docs-private
	 */
	function setLines(lines, element, prefix) {
	    if (prefix === void 0) { prefix = 'mat'; }
	    // Note: doesn't need to unsubscribe, because `changes`
	    // gets completed by Angular when the view is destroyed.
	    lines.changes.pipe(startWith(lines)).subscribe(function (_a) {
	        var length = _a.length;
	        setClass(element, prefix + "-2-line", false);
	        setClass(element, prefix + "-3-line", false);
	        setClass(element, prefix + "-multi-line", false);
	        if (length === 2 || length === 3) {
	            setClass(element, prefix + "-" + length + "-line", true);
	        }
	        else if (length > 3) {
	            setClass(element, prefix + "-multi-line", true);
	        }
	    });
	}
	/** Adds or removes a class from an element. */
	function setClass(element, className, isAdd) {
	    var classList = element.nativeElement.classList;
	    isAdd ? classList.add(className) : classList.remove(className);
	}
	var MatLineModule = /** @class */ (function () {
	    function MatLineModule() {
	    }
	    MatLineModule.decorators = [
	        { type: NgModule, args: [{
	                    imports: [MatCommonModule],
	                    exports: [MatLine, MatCommonModule],
	                    declarations: [MatLine],
	                },] }
	    ];
	    return MatLineModule;
	}());

	/**
	 * @license
	 * Copyright Google LLC All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * Reference to a previously launched ripple element.
	 */
	var RippleRef = /** @class */ (function () {
	    function RippleRef(_renderer, 
	    /** Reference to the ripple HTML element. */
	    element, 
	    /** Ripple configuration used for the ripple. */
	    config) {
	        this._renderer = _renderer;
	        this.element = element;
	        this.config = config;
	        /** Current state of the ripple. */
	        this.state = 3 /* HIDDEN */;
	    }
	    /** Fades out the ripple element. */
	    RippleRef.prototype.fadeOut = function () {
	        this._renderer.fadeOutRipple(this);
	    };
	    return RippleRef;
	}());

	/**
	 * Default ripple animation configuration for ripples without an explicit
	 * animation config specified.
	 */
	var defaultRippleAnimationConfig = {
	    enterDuration: 450,
	    exitDuration: 400
	};
	/**
	 * Timeout for ignoring mouse events. Mouse events will be temporary ignored after touch
	 * events to avoid synthetic mouse events.
	 */
	var ignoreMouseEventsTimeout = 800;
	/** Options that apply to all the event listeners that are bound by the ripple renderer. */
	var passiveEventOptions = normalizePassiveListenerOptions({ passive: true });
	/** Events that signal that the pointer is down. */
	var pointerDownEvents = ['mousedown', 'touchstart'];
	/** Events that signal that the pointer is up. */
	var pointerUpEvents = ['mouseup', 'mouseleave', 'touchend', 'touchcancel'];
	/**
	 * Helper service that performs DOM manipulations. Not intended to be used outside this module.
	 * The constructor takes a reference to the ripple directive's host element and a map of DOM
	 * event handlers to be installed on the element that triggers ripple animations.
	 * This will eventually become a custom renderer once Angular support exists.
	 * @docs-private
	 */
	var RippleRenderer = /** @class */ (function () {
	    function RippleRenderer(_target, _ngZone, elementOrElementRef, platform) {
	        this._target = _target;
	        this._ngZone = _ngZone;
	        /** Whether the pointer is currently down or not. */
	        this._isPointerDown = false;
	        /** Set of currently active ripple references. */
	        this._activeRipples = new Set();
	        /** Whether pointer-up event listeners have been registered. */
	        this._pointerUpEventsRegistered = false;
	        // Only do anything if we're on the browser.
	        if (platform.isBrowser) {
	            this._containerElement = coerceElement(elementOrElementRef);
	        }
	    }
	    /**
	     * Fades in a ripple at the given coordinates.
	     * @param x Coordinate within the element, along the X axis at which to start the ripple.
	     * @param y Coordinate within the element, along the Y axis at which to start the ripple.
	     * @param config Extra ripple options.
	     */
	    RippleRenderer.prototype.fadeInRipple = function (x, y, config) {
	        var _this = this;
	        if (config === void 0) { config = {}; }
	        var containerRect = this._containerRect =
	            this._containerRect || this._containerElement.getBoundingClientRect();
	        var animationConfig = __assign(__assign({}, defaultRippleAnimationConfig), config.animation);
	        if (config.centered) {
	            x = containerRect.left + containerRect.width / 2;
	            y = containerRect.top + containerRect.height / 2;
	        }
	        var radius = config.radius || distanceToFurthestCorner(x, y, containerRect);
	        var offsetX = x - containerRect.left;
	        var offsetY = y - containerRect.top;
	        var duration = animationConfig.enterDuration;
	        var ripple = document.createElement('div');
	        ripple.classList.add('mat-ripple-element');
	        ripple.style.left = offsetX - radius + "px";
	        ripple.style.top = offsetY - radius + "px";
	        ripple.style.height = radius * 2 + "px";
	        ripple.style.width = radius * 2 + "px";
	        // If a custom color has been specified, set it as inline style. If no color is
	        // set, the default color will be applied through the ripple theme styles.
	        if (config.color != null) {
	            ripple.style.backgroundColor = config.color;
	        }
	        ripple.style.transitionDuration = duration + "ms";
	        this._containerElement.appendChild(ripple);
	        // By default the browser does not recalculate the styles of dynamically created
	        // ripple elements. This is critical because then the `scale` would not animate properly.
	        enforceStyleRecalculation(ripple);
	        ripple.style.transform = 'scale(1)';
	        // Exposed reference to the ripple that will be returned.
	        var rippleRef = new RippleRef(this, ripple, config);
	        rippleRef.state = 0 /* FADING_IN */;
	        // Add the ripple reference to the list of all active ripples.
	        this._activeRipples.add(rippleRef);
	        if (!config.persistent) {
	            this._mostRecentTransientRipple = rippleRef;
	        }
	        // Wait for the ripple element to be completely faded in.
	        // Once it's faded in, the ripple can be hidden immediately if the mouse is released.
	        this._runTimeoutOutsideZone(function () {
	            var isMostRecentTransientRipple = rippleRef === _this._mostRecentTransientRipple;
	            rippleRef.state = 1 /* VISIBLE */;
	            // When the timer runs out while the user has kept their pointer down, we want to
	            // keep only the persistent ripples and the latest transient ripple. We do this,
	            // because we don't want stacked transient ripples to appear after their enter
	            // animation has finished.
	            if (!config.persistent && (!isMostRecentTransientRipple || !_this._isPointerDown)) {
	                rippleRef.fadeOut();
	            }
	        }, duration);
	        return rippleRef;
	    };
	    /** Fades out a ripple reference. */
	    RippleRenderer.prototype.fadeOutRipple = function (rippleRef) {
	        var wasActive = this._activeRipples.delete(rippleRef);
	        if (rippleRef === this._mostRecentTransientRipple) {
	            this._mostRecentTransientRipple = null;
	        }
	        // Clear out the cached bounding rect if we have no more ripples.
	        if (!this._activeRipples.size) {
	            this._containerRect = null;
	        }
	        // For ripples that are not active anymore, don't re-run the fade-out animation.
	        if (!wasActive) {
	            return;
	        }
	        var rippleEl = rippleRef.element;
	        var animationConfig = __assign(__assign({}, defaultRippleAnimationConfig), rippleRef.config.animation);
	        rippleEl.style.transitionDuration = animationConfig.exitDuration + "ms";
	        rippleEl.style.opacity = '0';
	        rippleRef.state = 2 /* FADING_OUT */;
	        // Once the ripple faded out, the ripple can be safely removed from the DOM.
	        this._runTimeoutOutsideZone(function () {
	            rippleRef.state = 3 /* HIDDEN */;
	            rippleEl.parentNode.removeChild(rippleEl);
	        }, animationConfig.exitDuration);
	    };
	    /** Fades out all currently active ripples. */
	    RippleRenderer.prototype.fadeOutAll = function () {
	        this._activeRipples.forEach(function (ripple) { return ripple.fadeOut(); });
	    };
	    /** Sets up the trigger event listeners */
	    RippleRenderer.prototype.setupTriggerEvents = function (elementOrElementRef) {
	        var element = coerceElement(elementOrElementRef);
	        if (!element || element === this._triggerElement) {
	            return;
	        }
	        // Remove all previously registered event listeners from the trigger element.
	        this._removeTriggerEvents();
	        this._triggerElement = element;
	        this._registerEvents(pointerDownEvents);
	    };
	    /**
	     * Handles all registered events.
	     * @docs-private
	     */
	    RippleRenderer.prototype.handleEvent = function (event) {
	        if (event.type === 'mousedown') {
	            this._onMousedown(event);
	        }
	        else if (event.type === 'touchstart') {
	            this._onTouchStart(event);
	        }
	        else {
	            this._onPointerUp();
	        }
	        // If pointer-up events haven't been registered yet, do so now.
	        // We do this on-demand in order to reduce the total number of event listeners
	        // registered by the ripples, which speeds up the rendering time for large UIs.
	        if (!this._pointerUpEventsRegistered) {
	            this._registerEvents(pointerUpEvents);
	            this._pointerUpEventsRegistered = true;
	        }
	    };
	    /** Function being called whenever the trigger is being pressed using mouse. */
	    RippleRenderer.prototype._onMousedown = function (event) {
	        // Screen readers will fire fake mouse events for space/enter. Skip launching a
	        // ripple in this case for consistency with the non-screen-reader experience.
	        var isFakeMousedown = isFakeMousedownFromScreenReader(event);
	        var isSyntheticEvent = this._lastTouchStartEvent &&
	            Date.now() < this._lastTouchStartEvent + ignoreMouseEventsTimeout;
	        if (!this._target.rippleDisabled && !isFakeMousedown && !isSyntheticEvent) {
	            this._isPointerDown = true;
	            this.fadeInRipple(event.clientX, event.clientY, this._target.rippleConfig);
	        }
	    };
	    /** Function being called whenever the trigger is being pressed using touch. */
	    RippleRenderer.prototype._onTouchStart = function (event) {
	        if (!this._target.rippleDisabled) {
	            // Some browsers fire mouse events after a `touchstart` event. Those synthetic mouse
	            // events will launch a second ripple if we don't ignore mouse events for a specific
	            // time after a touchstart event.
	            this._lastTouchStartEvent = Date.now();
	            this._isPointerDown = true;
	            // Use `changedTouches` so we skip any touches where the user put
	            // their finger down, but used another finger to tap the element again.
	            var touches = event.changedTouches;
	            for (var i = 0; i < touches.length; i++) {
	                this.fadeInRipple(touches[i].clientX, touches[i].clientY, this._target.rippleConfig);
	            }
	        }
	    };
	    /** Function being called whenever the trigger is being released. */
	    RippleRenderer.prototype._onPointerUp = function () {
	        if (!this._isPointerDown) {
	            return;
	        }
	        this._isPointerDown = false;
	        // Fade-out all ripples that are visible and not persistent.
	        this._activeRipples.forEach(function (ripple) {
	            // By default, only ripples that are completely visible will fade out on pointer release.
	            // If the `terminateOnPointerUp` option is set, ripples that still fade in will also fade out.
	            var isVisible = ripple.state === 1 /* VISIBLE */ ||
	                ripple.config.terminateOnPointerUp && ripple.state === 0 /* FADING_IN */;
	            if (!ripple.config.persistent && isVisible) {
	                ripple.fadeOut();
	            }
	        });
	    };
	    /** Runs a timeout outside of the Angular zone to avoid triggering the change detection. */
	    RippleRenderer.prototype._runTimeoutOutsideZone = function (fn, delay) {
	        if (delay === void 0) { delay = 0; }
	        this._ngZone.runOutsideAngular(function () { return setTimeout(fn, delay); });
	    };
	    /** Registers event listeners for a given list of events. */
	    RippleRenderer.prototype._registerEvents = function (eventTypes) {
	        var _this = this;
	        this._ngZone.runOutsideAngular(function () {
	            eventTypes.forEach(function (type) {
	                _this._triggerElement.addEventListener(type, _this, passiveEventOptions);
	            });
	        });
	    };
	    /** Removes previously registered event listeners from the trigger element. */
	    RippleRenderer.prototype._removeTriggerEvents = function () {
	        var _this = this;
	        if (this._triggerElement) {
	            pointerDownEvents.forEach(function (type) {
	                _this._triggerElement.removeEventListener(type, _this, passiveEventOptions);
	            });
	            if (this._pointerUpEventsRegistered) {
	                pointerUpEvents.forEach(function (type) {
	                    _this._triggerElement.removeEventListener(type, _this, passiveEventOptions);
	                });
	            }
	        }
	    };
	    return RippleRenderer;
	}());
	/** Enforces a style recalculation of a DOM element by computing its styles. */
	function enforceStyleRecalculation(element) {
	    // Enforce a style recalculation by calling `getComputedStyle` and accessing any property.
	    // Calling `getPropertyValue` is important to let optimizers know that this is not a noop.
	    // See: https://gist.github.com/paulirish/5d52fb081b3570c81e3a
	    window.getComputedStyle(element).getPropertyValue('opacity');
	}
	/**
	 * Returns the distance from the point (x, y) to the furthest corner of a rectangle.
	 */
	function distanceToFurthestCorner(x, y, rect) {
	    var distX = Math.max(Math.abs(x - rect.left), Math.abs(x - rect.right));
	    var distY = Math.max(Math.abs(y - rect.top), Math.abs(y - rect.bottom));
	    return Math.sqrt(distX * distX + distY * distY);
	}

	/**
	 * @license
	 * Copyright Google LLC All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/** Injection token that can be used to specify the global ripple options. */
	var MAT_RIPPLE_GLOBAL_OPTIONS = new InjectionToken('mat-ripple-global-options');
	var MatRipple = /** @class */ (function () {
	    function MatRipple(_elementRef, ngZone, platform, globalOptions, _animationMode) {
	        this._elementRef = _elementRef;
	        this._animationMode = _animationMode;
	        /**
	         * If set, the radius in pixels of foreground ripples when fully expanded. If unset, the radius
	         * will be the distance from the center of the ripple to the furthest corner of the host element's
	         * bounding rectangle.
	         */
	        this.radius = 0;
	        this._disabled = false;
	        /** Whether ripple directive is initialized and the input bindings are set. */
	        this._isInitialized = false;
	        this._globalOptions = globalOptions || {};
	        this._rippleRenderer = new RippleRenderer(this, ngZone, _elementRef, platform);
	    }
	    Object.defineProperty(MatRipple.prototype, "disabled", {
	        /**
	         * Whether click events will not trigger the ripple. Ripples can be still launched manually
	         * by using the `launch()` method.
	         */
	        get: function () { return this._disabled; },
	        set: function (value) {
	            this._disabled = value;
	            this._setupTriggerEventsIfEnabled();
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(MatRipple.prototype, "trigger", {
	        /**
	         * The element that triggers the ripple when click events are received.
	         * Defaults to the directive's host element.
	         */
	        get: function () { return this._trigger || this._elementRef.nativeElement; },
	        set: function (trigger) {
	            this._trigger = trigger;
	            this._setupTriggerEventsIfEnabled();
	        },
	        enumerable: true,
	        configurable: true
	    });
	    MatRipple.prototype.ngOnInit = function () {
	        this._isInitialized = true;
	        this._setupTriggerEventsIfEnabled();
	    };
	    MatRipple.prototype.ngOnDestroy = function () {
	        this._rippleRenderer._removeTriggerEvents();
	    };
	    /** Fades out all currently showing ripple elements. */
	    MatRipple.prototype.fadeOutAll = function () {
	        this._rippleRenderer.fadeOutAll();
	    };
	    Object.defineProperty(MatRipple.prototype, "rippleConfig", {
	        /**
	         * Ripple configuration from the directive's input values.
	         * @docs-private Implemented as part of RippleTarget
	         */
	        get: function () {
	            return {
	                centered: this.centered,
	                radius: this.radius,
	                color: this.color,
	                animation: __assign(__assign(__assign({}, this._globalOptions.animation), (this._animationMode === 'NoopAnimations' ? { enterDuration: 0, exitDuration: 0 } : {})), this.animation),
	                terminateOnPointerUp: this._globalOptions.terminateOnPointerUp,
	            };
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(MatRipple.prototype, "rippleDisabled", {
	        /**
	         * Whether ripples on pointer-down are disabled or not.
	         * @docs-private Implemented as part of RippleTarget
	         */
	        get: function () {
	            return this.disabled || !!this._globalOptions.disabled;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    /** Sets up the trigger event listeners if ripples are enabled. */
	    MatRipple.prototype._setupTriggerEventsIfEnabled = function () {
	        if (!this.disabled && this._isInitialized) {
	            this._rippleRenderer.setupTriggerEvents(this.trigger);
	        }
	    };
	    /** Launches a manual ripple at the specified coordinated or just by the ripple config. */
	    MatRipple.prototype.launch = function (configOrX, y, config) {
	        if (y === void 0) { y = 0; }
	        if (typeof configOrX === 'number') {
	            return this._rippleRenderer.fadeInRipple(configOrX, y, __assign(__assign({}, this.rippleConfig), config));
	        }
	        else {
	            return this._rippleRenderer.fadeInRipple(0, 0, __assign(__assign({}, this.rippleConfig), configOrX));
	        }
	    };
	    MatRipple.decorators = [
	        { type: Directive, args: [{
	                    selector: '[mat-ripple], [matRipple]',
	                    exportAs: 'matRipple',
	                    host: {
	                        'class': 'mat-ripple',
	                        '[class.mat-ripple-unbounded]': 'unbounded'
	                    }
	                },] }
	    ];
	    /** @nocollapse */
	    MatRipple.ctorParameters = function () { return [
	        { type: ElementRef },
	        { type: NgZone },
	        { type: Platform },
	        { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MAT_RIPPLE_GLOBAL_OPTIONS,] }] },
	        { type: String, decorators: [{ type: Optional }, { type: Inject, args: [ANIMATION_MODULE_TYPE,] }] }
	    ]; };
	    MatRipple.propDecorators = {
	        color: [{ type: Input, args: ['matRippleColor',] }],
	        unbounded: [{ type: Input, args: ['matRippleUnbounded',] }],
	        centered: [{ type: Input, args: ['matRippleCentered',] }],
	        radius: [{ type: Input, args: ['matRippleRadius',] }],
	        animation: [{ type: Input, args: ['matRippleAnimation',] }],
	        disabled: [{ type: Input, args: ['matRippleDisabled',] }],
	        trigger: [{ type: Input, args: ['matRippleTrigger',] }]
	    };
	    return MatRipple;
	}());

	/**
	 * @license
	 * Copyright Google LLC All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	var MatRippleModule = /** @class */ (function () {
	    function MatRippleModule() {
	    }
	    MatRippleModule.decorators = [
	        { type: NgModule, args: [{
	                    imports: [MatCommonModule, PlatformModule],
	                    exports: [MatRipple, MatCommonModule],
	                    declarations: [MatRipple],
	                },] }
	    ];
	    return MatRippleModule;
	}());

	/**
	 * @license
	 * Copyright Google LLC All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * Component that shows a simplified checkbox without including any kind of "real" checkbox.
	 * Meant to be used when the checkbox is purely decorative and a large number of them will be
	 * included, such as for the options in a multi-select. Uses no SVGs or complex animations.
	 * Note that theming is meant to be handled by the parent element, e.g.
	 * `mat-primary .mat-pseudo-checkbox`.
	 *
	 * Note that this component will be completely invisible to screen-reader users. This is *not*
	 * interchangeable with `<mat-checkbox>` and should *not* be used if the user would directly
	 * interact with the checkbox. The pseudo-checkbox should only be used as an implementation detail
	 * of more complex components that appropriately handle selected / checked state.
	 * @docs-private
	 */
	var MatPseudoCheckbox = /** @class */ (function () {
	    function MatPseudoCheckbox(_animationMode) {
	        this._animationMode = _animationMode;
	        /** Display state of the checkbox. */
	        this.state = 'unchecked';
	        /** Whether the checkbox is disabled. */
	        this.disabled = false;
	    }
	    MatPseudoCheckbox.decorators = [
	        { type: Component, args: [{
	                    encapsulation: ViewEncapsulation$1$1.None,
	                    changeDetection: ChangeDetectionStrategy$1.OnPush,
	                    selector: 'mat-pseudo-checkbox',
	                    template: '',
	                    host: {
	                        'class': 'mat-pseudo-checkbox',
	                        '[class.mat-pseudo-checkbox-indeterminate]': 'state === "indeterminate"',
	                        '[class.mat-pseudo-checkbox-checked]': 'state === "checked"',
	                        '[class.mat-pseudo-checkbox-disabled]': 'disabled',
	                        '[class._mat-animation-noopable]': '_animationMode === "NoopAnimations"',
	                    },
	                    styles: [".mat-pseudo-checkbox{width:16px;height:16px;border:2px solid;border-radius:2px;cursor:pointer;display:inline-block;vertical-align:middle;box-sizing:border-box;position:relative;flex-shrink:0;transition:border-color 90ms cubic-bezier(0, 0, 0.2, 0.1),background-color 90ms cubic-bezier(0, 0, 0.2, 0.1)}.mat-pseudo-checkbox::after{position:absolute;opacity:0;content:\"\";border-bottom:2px solid currentColor;transition:opacity 90ms cubic-bezier(0, 0, 0.2, 0.1)}.mat-pseudo-checkbox.mat-pseudo-checkbox-checked,.mat-pseudo-checkbox.mat-pseudo-checkbox-indeterminate{border-color:transparent}._mat-animation-noopable.mat-pseudo-checkbox{transition:none;animation:none}._mat-animation-noopable.mat-pseudo-checkbox::after{transition:none}.mat-pseudo-checkbox-disabled{cursor:default}.mat-pseudo-checkbox-indeterminate::after{top:5px;left:1px;width:10px;opacity:1;border-radius:2px}.mat-pseudo-checkbox-checked::after{top:2.4px;left:1px;width:8px;height:3px;border-left:2px solid currentColor;transform:rotate(-45deg);opacity:1;box-sizing:content-box}\n"]
	                }] }
	    ];
	    /** @nocollapse */
	    MatPseudoCheckbox.ctorParameters = function () { return [
	        { type: String, decorators: [{ type: Optional }, { type: Inject, args: [ANIMATION_MODULE_TYPE,] }] }
	    ]; };
	    MatPseudoCheckbox.propDecorators = {
	        state: [{ type: Input }],
	        disabled: [{ type: Input }]
	    };
	    return MatPseudoCheckbox;
	}());

	/**
	 * @license
	 * Copyright Google LLC All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	var MatPseudoCheckboxModule = /** @class */ (function () {
	    function MatPseudoCheckboxModule() {
	    }
	    MatPseudoCheckboxModule.decorators = [
	        { type: NgModule, args: [{
	                    exports: [MatPseudoCheckbox],
	                    declarations: [MatPseudoCheckbox]
	                },] }
	    ];
	    return MatPseudoCheckboxModule;
	}());

	/**
	 * @license
	 * Copyright Google LLC All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	// Boilerplate for applying mixins to MatOptgroup.
	/** @docs-private */
	var MatOptgroupBase = /** @class */ (function () {
	    function MatOptgroupBase() {
	    }
	    return MatOptgroupBase;
	}());
	var _MatOptgroupMixinBase = mixinDisabled(MatOptgroupBase);
	// Counter for unique group ids.
	var _uniqueOptgroupIdCounter = 0;
	/**
	 * Component that is used to group instances of `mat-option`.
	 */
	var MatOptgroup = /** @class */ (function (_super) {
	    __extends(MatOptgroup, _super);
	    function MatOptgroup() {
	        var _this = _super !== null && _super.apply(this, arguments) || this;
	        /** Unique id for the underlying label. */
	        _this._labelId = "mat-optgroup-label-" + _uniqueOptgroupIdCounter++;
	        return _this;
	    }
	    MatOptgroup.decorators = [
	        { type: Component, args: [{
	                    selector: 'mat-optgroup',
	                    exportAs: 'matOptgroup',
	                    template: "<label class=\"mat-optgroup-label\" [id]=\"_labelId\">{{ label }} <ng-content></ng-content></label>\n<ng-content select=\"mat-option, ng-container\"></ng-content>\n",
	                    encapsulation: ViewEncapsulation$1$1.None,
	                    changeDetection: ChangeDetectionStrategy$1.OnPush,
	                    inputs: ['disabled'],
	                    host: {
	                        'class': 'mat-optgroup',
	                        'role': 'group',
	                        '[class.mat-optgroup-disabled]': 'disabled',
	                        '[attr.aria-disabled]': 'disabled.toString()',
	                        '[attr.aria-labelledby]': '_labelId',
	                    },
	                    styles: [".mat-optgroup-label{white-space:nowrap;overflow:hidden;text-overflow:ellipsis;display:block;line-height:48px;height:48px;padding:0 16px;text-align:left;text-decoration:none;max-width:100%;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;cursor:default}.mat-optgroup-label[disabled]{cursor:default}[dir=rtl] .mat-optgroup-label{text-align:right}.mat-optgroup-label .mat-icon{margin-right:16px;vertical-align:middle}.mat-optgroup-label .mat-icon svg{vertical-align:top}[dir=rtl] .mat-optgroup-label .mat-icon{margin-left:16px;margin-right:0}\n"]
	                }] }
	    ];
	    MatOptgroup.propDecorators = {
	        label: [{ type: Input }]
	    };
	    return MatOptgroup;
	}(_MatOptgroupMixinBase));

	/**
	 * @license
	 * Copyright Google LLC All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * Option IDs need to be unique across components, so this counter exists outside of
	 * the component definition.
	 */
	var _uniqueIdCounter = 0;
	/** Event object emitted by MatOption when selected or deselected. */
	var MatOptionSelectionChange = /** @class */ (function () {
	    function MatOptionSelectionChange(
	    /** Reference to the option that emitted the event. */
	    source, 
	    /** Whether the change in the option's value was a result of a user action. */
	    isUserInput) {
	        if (isUserInput === void 0) { isUserInput = false; }
	        this.source = source;
	        this.isUserInput = isUserInput;
	    }
	    return MatOptionSelectionChange;
	}());
	/**
	 * Injection token used to provide the parent component to options.
	 */
	var MAT_OPTION_PARENT_COMPONENT = new InjectionToken('MAT_OPTION_PARENT_COMPONENT');
	/**
	 * Single option inside of a `<mat-select>` element.
	 */
	var MatOption = /** @class */ (function () {
	    function MatOption(_element, _changeDetectorRef, _parent, group) {
	        this._element = _element;
	        this._changeDetectorRef = _changeDetectorRef;
	        this._parent = _parent;
	        this.group = group;
	        this._selected = false;
	        this._active = false;
	        this._disabled = false;
	        this._mostRecentViewValue = '';
	        /** The unique ID of the option. */
	        this.id = "mat-option-" + _uniqueIdCounter++;
	        /** Event emitted when the option is selected or deselected. */
	        // tslint:disable-next-line:no-output-on-prefix
	        this.onSelectionChange = new EventEmitter();
	        /** Emits when the state of the option changes and any parents have to be notified. */
	        this._stateChanges = new Subject();
	    }
	    Object.defineProperty(MatOption.prototype, "multiple", {
	        /** Whether the wrapping component is in multiple selection mode. */
	        get: function () { return this._parent && this._parent.multiple; },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(MatOption.prototype, "selected", {
	        /** Whether or not the option is currently selected. */
	        get: function () { return this._selected; },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(MatOption.prototype, "disabled", {
	        /** Whether the option is disabled. */
	        get: function () { return (this.group && this.group.disabled) || this._disabled; },
	        set: function (value) { this._disabled = coerceBooleanProperty(value); },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(MatOption.prototype, "disableRipple", {
	        /** Whether ripples for the option are disabled. */
	        get: function () { return this._parent && this._parent.disableRipple; },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(MatOption.prototype, "active", {
	        /**
	         * Whether or not the option is currently active and ready to be selected.
	         * An active option displays styles as if it is focused, but the
	         * focus is actually retained somewhere else. This comes in handy
	         * for components like autocomplete where focus must remain on the input.
	         */
	        get: function () {
	            return this._active;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(MatOption.prototype, "viewValue", {
	        /**
	         * The displayed value of the option. It is necessary to show the selected option in the
	         * select's trigger.
	         */
	        get: function () {
	            // TODO(kara): Add input property alternative for node envs.
	            return (this._getHostElement().textContent || '').trim();
	        },
	        enumerable: true,
	        configurable: true
	    });
	    /** Selects the option. */
	    MatOption.prototype.select = function () {
	        if (!this._selected) {
	            this._selected = true;
	            this._changeDetectorRef.markForCheck();
	            this._emitSelectionChangeEvent();
	        }
	    };
	    /** Deselects the option. */
	    MatOption.prototype.deselect = function () {
	        if (this._selected) {
	            this._selected = false;
	            this._changeDetectorRef.markForCheck();
	            this._emitSelectionChangeEvent();
	        }
	    };
	    /** Sets focus onto this option. */
	    MatOption.prototype.focus = function (_origin, options) {
	        // Note that we aren't using `_origin`, but we need to keep it because some internal consumers
	        // use `MatOption` in a `FocusKeyManager` and we need it to match `FocusableOption`.
	        var element = this._getHostElement();
	        if (typeof element.focus === 'function') {
	            element.focus(options);
	        }
	    };
	    /**
	     * This method sets display styles on the option to make it appear
	     * active. This is used by the ActiveDescendantKeyManager so key
	     * events will display the proper options as active on arrow key events.
	     */
	    MatOption.prototype.setActiveStyles = function () {
	        if (!this._active) {
	            this._active = true;
	            this._changeDetectorRef.markForCheck();
	        }
	    };
	    /**
	     * This method removes display styles on the option that made it appear
	     * active. This is used by the ActiveDescendantKeyManager so key
	     * events will display the proper options as active on arrow key events.
	     */
	    MatOption.prototype.setInactiveStyles = function () {
	        if (this._active) {
	            this._active = false;
	            this._changeDetectorRef.markForCheck();
	        }
	    };
	    /** Gets the label to be used when determining whether the option should be focused. */
	    MatOption.prototype.getLabel = function () {
	        return this.viewValue;
	    };
	    /** Ensures the option is selected when activated from the keyboard. */
	    MatOption.prototype._handleKeydown = function (event) {
	        if ((event.keyCode === ENTER || event.keyCode === SPACE) && !hasModifierKey(event)) {
	            this._selectViaInteraction();
	            // Prevent the page from scrolling down and form submits.
	            event.preventDefault();
	        }
	    };
	    /**
	     * `Selects the option while indicating the selection came from the user. Used to
	     * determine if the select's view -> model callback should be invoked.`
	     */
	    MatOption.prototype._selectViaInteraction = function () {
	        if (!this.disabled) {
	            this._selected = this.multiple ? !this._selected : true;
	            this._changeDetectorRef.markForCheck();
	            this._emitSelectionChangeEvent(true);
	        }
	    };
	    /**
	     * Gets the `aria-selected` value for the option. We explicitly omit the `aria-selected`
	     * attribute from single-selection, unselected options. Including the `aria-selected="false"`
	     * attributes adds a significant amount of noise to screen-reader users without providing useful
	     * information.
	     */
	    MatOption.prototype._getAriaSelected = function () {
	        return this.selected || (this.multiple ? false : null);
	    };
	    /** Returns the correct tabindex for the option depending on disabled state. */
	    MatOption.prototype._getTabIndex = function () {
	        return this.disabled ? '-1' : '0';
	    };
	    /** Gets the host DOM element. */
	    MatOption.prototype._getHostElement = function () {
	        return this._element.nativeElement;
	    };
	    MatOption.prototype.ngAfterViewChecked = function () {
	        // Since parent components could be using the option's label to display the selected values
	        // (e.g. `mat-select`) and they don't have a way of knowing if the option's label has changed
	        // we have to check for changes in the DOM ourselves and dispatch an event. These checks are
	        // relatively cheap, however we still limit them only to selected options in order to avoid
	        // hitting the DOM too often.
	        if (this._selected) {
	            var viewValue = this.viewValue;
	            if (viewValue !== this._mostRecentViewValue) {
	                this._mostRecentViewValue = viewValue;
	                this._stateChanges.next();
	            }
	        }
	    };
	    MatOption.prototype.ngOnDestroy = function () {
	        this._stateChanges.complete();
	    };
	    /** Emits the selection change event. */
	    MatOption.prototype._emitSelectionChangeEvent = function (isUserInput) {
	        if (isUserInput === void 0) { isUserInput = false; }
	        this.onSelectionChange.emit(new MatOptionSelectionChange(this, isUserInput));
	    };
	    MatOption.decorators = [
	        { type: Component, args: [{
	                    selector: 'mat-option',
	                    exportAs: 'matOption',
	                    host: {
	                        'role': 'option',
	                        '[attr.tabindex]': '_getTabIndex()',
	                        '[class.mat-selected]': 'selected',
	                        '[class.mat-option-multiple]': 'multiple',
	                        '[class.mat-active]': 'active',
	                        '[id]': 'id',
	                        '[attr.aria-selected]': '_getAriaSelected()',
	                        '[attr.aria-disabled]': 'disabled.toString()',
	                        '[class.mat-option-disabled]': 'disabled',
	                        '(click)': '_selectViaInteraction()',
	                        '(keydown)': '_handleKeydown($event)',
	                        'class': 'mat-option mat-focus-indicator',
	                    },
	                    template: "<mat-pseudo-checkbox *ngIf=\"multiple\" class=\"mat-option-pseudo-checkbox\"\n    [state]=\"selected ? 'checked' : 'unchecked'\" [disabled]=\"disabled\"></mat-pseudo-checkbox>\n\n<span class=\"mat-option-text\"><ng-content></ng-content></span>\n\n<div class=\"mat-option-ripple\" mat-ripple\n     [matRippleTrigger]=\"_getHostElement()\"\n     [matRippleDisabled]=\"disabled || disableRipple\">\n</div>\n",
	                    encapsulation: ViewEncapsulation$1$1.None,
	                    changeDetection: ChangeDetectionStrategy$1.OnPush,
	                    styles: [".mat-option{white-space:nowrap;overflow:hidden;text-overflow:ellipsis;display:block;line-height:48px;height:48px;padding:0 16px;text-align:left;text-decoration:none;max-width:100%;position:relative;cursor:pointer;outline:none;display:flex;flex-direction:row;max-width:100%;box-sizing:border-box;align-items:center;-webkit-tap-highlight-color:transparent}.mat-option[disabled]{cursor:default}[dir=rtl] .mat-option{text-align:right}.mat-option .mat-icon{margin-right:16px;vertical-align:middle}.mat-option .mat-icon svg{vertical-align:top}[dir=rtl] .mat-option .mat-icon{margin-left:16px;margin-right:0}.mat-option[aria-disabled=true]{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;cursor:default}.mat-optgroup .mat-option:not(.mat-option-multiple){padding-left:32px}[dir=rtl] .mat-optgroup .mat-option:not(.mat-option-multiple){padding-left:16px;padding-right:32px}.cdk-high-contrast-active .mat-option{margin:0 1px}.cdk-high-contrast-active .mat-option.mat-active{border:solid 1px currentColor;margin:0}.mat-option-text{display:inline-block;flex-grow:1;overflow:hidden;text-overflow:ellipsis}.mat-option .mat-option-ripple{top:0;left:0;right:0;bottom:0;position:absolute;pointer-events:none}.cdk-high-contrast-active .mat-option .mat-option-ripple{opacity:.5}.mat-option-pseudo-checkbox{margin-right:8px}[dir=rtl] .mat-option-pseudo-checkbox{margin-left:8px;margin-right:0}\n"]
	                }] }
	    ];
	    /** @nocollapse */
	    MatOption.ctorParameters = function () { return [
	        { type: ElementRef },
	        { type: ChangeDetectorRef },
	        { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MAT_OPTION_PARENT_COMPONENT,] }] },
	        { type: MatOptgroup, decorators: [{ type: Optional }] }
	    ]; };
	    MatOption.propDecorators = {
	        value: [{ type: Input }],
	        id: [{ type: Input }],
	        disabled: [{ type: Input }],
	        onSelectionChange: [{ type: Output }]
	    };
	    return MatOption;
	}());

	/**
	 * @license
	 * Copyright Google LLC All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * InjectionToken that can be used to specify the global label options.
	 * @deprecated Use `MAT_FORM_FIELD_DEFAULT_OPTIONS` injection token from
	 *     `@angular/material/form-field` instead.
	 * @breaking-change 11.0.0
	 */
	var MAT_LABEL_GLOBAL_OPTIONS = new InjectionToken('mat-label-global-options');

	/**
	 * @license
	 * Copyright Google LLC All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	var DataSource = /** @class */ (function () {
	    function DataSource() {
	    }
	    return DataSource;
	}());

	/**
	 * @license
	 * Copyright Google LLC All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/** DataSource wrapper for a native array. */
	var ArrayDataSource = /** @class */ (function (_super) {
	    __extends(ArrayDataSource, _super);
	    function ArrayDataSource(_data) {
	        var _this = _super.call(this) || this;
	        _this._data = _data;
	        return _this;
	    }
	    ArrayDataSource.prototype.connect = function () {
	        return isObservable(this._data) ? this._data : of(this._data);
	    };
	    ArrayDataSource.prototype.disconnect = function () { };
	    return ArrayDataSource;
	}(DataSource));

	/**
	 * @license
	 * Copyright Google LLC All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * Class to be used to power selecting one or more options from a list.
	 */
	var SelectionModel = /** @class */ (function () {
	    function SelectionModel(_multiple, initiallySelectedValues, _emitChanges) {
	        var _this = this;
	        if (_multiple === void 0) { _multiple = false; }
	        if (_emitChanges === void 0) { _emitChanges = true; }
	        this._multiple = _multiple;
	        this._emitChanges = _emitChanges;
	        /** Currently-selected values. */
	        this._selection = new Set();
	        /** Keeps track of the deselected options that haven't been emitted by the change event. */
	        this._deselectedToEmit = [];
	        /** Keeps track of the selected options that haven't been emitted by the change event. */
	        this._selectedToEmit = [];
	        /** Event emitted when the value has changed. */
	        this.changed = new Subject();
	        if (initiallySelectedValues && initiallySelectedValues.length) {
	            if (_multiple) {
	                initiallySelectedValues.forEach(function (value) { return _this._markSelected(value); });
	            }
	            else {
	                this._markSelected(initiallySelectedValues[0]);
	            }
	            // Clear the array in order to avoid firing the change event for preselected values.
	            this._selectedToEmit.length = 0;
	        }
	    }
	    Object.defineProperty(SelectionModel.prototype, "selected", {
	        /** Selected values. */
	        get: function () {
	            if (!this._selected) {
	                this._selected = Array.from(this._selection.values());
	            }
	            return this._selected;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    /**
	     * Selects a value or an array of values.
	     */
	    SelectionModel.prototype.select = function () {
	        var _this = this;
	        var values = [];
	        for (var _i = 0; _i < arguments.length; _i++) {
	            values[_i] = arguments[_i];
	        }
	        this._verifyValueAssignment(values);
	        values.forEach(function (value) { return _this._markSelected(value); });
	        this._emitChangeEvent();
	    };
	    /**
	     * Deselects a value or an array of values.
	     */
	    SelectionModel.prototype.deselect = function () {
	        var _this = this;
	        var values = [];
	        for (var _i = 0; _i < arguments.length; _i++) {
	            values[_i] = arguments[_i];
	        }
	        this._verifyValueAssignment(values);
	        values.forEach(function (value) { return _this._unmarkSelected(value); });
	        this._emitChangeEvent();
	    };
	    /**
	     * Toggles a value between selected and deselected.
	     */
	    SelectionModel.prototype.toggle = function (value) {
	        this.isSelected(value) ? this.deselect(value) : this.select(value);
	    };
	    /**
	     * Clears all of the selected values.
	     */
	    SelectionModel.prototype.clear = function () {
	        this._unmarkAll();
	        this._emitChangeEvent();
	    };
	    /**
	     * Determines whether a value is selected.
	     */
	    SelectionModel.prototype.isSelected = function (value) {
	        return this._selection.has(value);
	    };
	    /**
	     * Determines whether the model does not have a value.
	     */
	    SelectionModel.prototype.isEmpty = function () {
	        return this._selection.size === 0;
	    };
	    /**
	     * Determines whether the model has a value.
	     */
	    SelectionModel.prototype.hasValue = function () {
	        return !this.isEmpty();
	    };
	    /**
	     * Sorts the selected values based on a predicate function.
	     */
	    SelectionModel.prototype.sort = function (predicate) {
	        if (this._multiple && this.selected) {
	            this._selected.sort(predicate);
	        }
	    };
	    /**
	     * Gets whether multiple values can be selected.
	     */
	    SelectionModel.prototype.isMultipleSelection = function () {
	        return this._multiple;
	    };
	    /** Emits a change event and clears the records of selected and deselected values. */
	    SelectionModel.prototype._emitChangeEvent = function () {
	        // Clear the selected values so they can be re-cached.
	        this._selected = null;
	        if (this._selectedToEmit.length || this._deselectedToEmit.length) {
	            this.changed.next({
	                source: this,
	                added: this._selectedToEmit,
	                removed: this._deselectedToEmit
	            });
	            this._deselectedToEmit = [];
	            this._selectedToEmit = [];
	        }
	    };
	    /** Selects a value. */
	    SelectionModel.prototype._markSelected = function (value) {
	        if (!this.isSelected(value)) {
	            if (!this._multiple) {
	                this._unmarkAll();
	            }
	            this._selection.add(value);
	            if (this._emitChanges) {
	                this._selectedToEmit.push(value);
	            }
	        }
	    };
	    /** Deselects a value. */
	    SelectionModel.prototype._unmarkSelected = function (value) {
	        if (this.isSelected(value)) {
	            this._selection.delete(value);
	            if (this._emitChanges) {
	                this._deselectedToEmit.push(value);
	            }
	        }
	    };
	    /** Clears out the selected values. */
	    SelectionModel.prototype._unmarkAll = function () {
	        var _this = this;
	        if (!this.isEmpty()) {
	            this._selection.forEach(function (value) { return _this._unmarkSelected(value); });
	        }
	    };
	    /**
	     * Verifies the value assignment and throws an error if the specified value array is
	     * including multiple values while the selection model is not supporting multiple values.
	     */
	    SelectionModel.prototype._verifyValueAssignment = function (values) {
	        if (values.length > 1 && !this._multiple) {
	            throw getMultipleValuesInSingleSelectionError();
	        }
	    };
	    return SelectionModel;
	}());
	/**
	 * Returns an error that reports that multiple values are passed into a selection model
	 * with a single value.
	 * @docs-private
	 */
	function getMultipleValuesInSingleSelectionError() {
	    return Error('Cannot pass multiple values into SelectionModel with single-value mode.');
	}

	/**
	 * Class to coordinate unique selection based on name.
	 * Intended to be consumed as an Angular service.
	 * This service is needed because native radio change events are only fired on the item currently
	 * being selected, and we still need to uncheck the previous selection.
	 *
	 * This service does not *store* any IDs and names because they may change at any time, so it is
	 * less error-prone if they are simply passed through when the events occur.
	 */
	var UniqueSelectionDispatcher = /** @class */ (function () {
	    function UniqueSelectionDispatcher() {
	        this._listeners = [];
	    }
	    /**
	     * Notify other items that selection for the given name has been set.
	     * @param id ID of the item.
	     * @param name Name of the item.
	     */
	    UniqueSelectionDispatcher.prototype.notify = function (id, name) {
	        var e_1, _a;
	        try {
	            for (var _b = __values(this._listeners), _c = _b.next(); !_c.done; _c = _b.next()) {
	                var listener = _c.value;
	                listener(id, name);
	            }
	        }
	        catch (e_1_1) { e_1 = { error: e_1_1 }; }
	        finally {
	            try {
	                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
	            }
	            finally { if (e_1) throw e_1.error; }
	        }
	    };
	    /**
	     * Listen for future changes to item selection.
	     * @return Function used to deregister listener
	     */
	    UniqueSelectionDispatcher.prototype.listen = function (listener) {
	        var _this = this;
	        this._listeners.push(listener);
	        return function () {
	            _this._listeners = _this._listeners.filter(function (registered) {
	                return listener !== registered;
	            });
	        };
	    };
	    UniqueSelectionDispatcher.prototype.ngOnDestroy = function () {
	        this._listeners = [];
	    };
	    UniqueSelectionDispatcher.decorators = [
	        { type: Injectable, args: [{ providedIn: 'root' },] }
	    ];
	    UniqueSelectionDispatcher.Éµprov = ÉµÉµdefineInjectable({ factory: function UniqueSelectionDispatcher_Factory() { return new UniqueSelectionDispatcher(); }, token: UniqueSelectionDispatcher, providedIn: "root" });
	    return UniqueSelectionDispatcher;
	}());

	/**
	 * @license Angular v9.1.7
	 * (c) 2010-2020 Google LLC. https://angular.io/
	 * License: MIT
	 */

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * Used to provide a `ControlValueAccessor` for form controls.
	 *
	 * See `DefaultValueAccessor` for how to implement one.
	 *
	 * @publicApi
	 */
	var NG_VALUE_ACCESSOR = new InjectionToken('NgValueAccessor');

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	var CHECKBOX_VALUE_ACCESSOR = {
	    provide: NG_VALUE_ACCESSOR,
	    useExisting: forwardRef(function () { return CheckboxControlValueAccessor; }),
	    multi: true,
	};
	/**
	 * @description
	 * A `ControlValueAccessor` for writing a value and listening to changes on a checkbox input
	 * element.
	 *
	 * @usageNotes
	 *
	 * ### Using a checkbox with a reactive form.
	 *
	 * The following example shows how to use a checkbox with a reactive form.
	 *
	 * ```ts
	 * const rememberLoginControl = new FormControl();
	 * ```
	 *
	 * ```
	 * <input type="checkbox" [formControl]="rememberLoginControl">
	 * ```
	 *
	 * @ngModule ReactiveFormsModule
	 * @ngModule FormsModule
	 * @publicApi
	 */
	var CheckboxControlValueAccessor = /** @class */ (function () {
	    function CheckboxControlValueAccessor(_renderer, _elementRef) {
	        this._renderer = _renderer;
	        this._elementRef = _elementRef;
	        /**
	         * @description
	         * The registered callback function called when a change event occurs on the input element.
	         */
	        this.onChange = function (_) { };
	        /**
	         * @description
	         * The registered callback function called when a blur event occurs on the input element.
	         */
	        this.onTouched = function () { };
	    }
	    /**
	     * Sets the "checked" property on the input element.
	     *
	     * @param value The checked value
	     */
	    CheckboxControlValueAccessor.prototype.writeValue = function (value) {
	        this._renderer.setProperty(this._elementRef.nativeElement, 'checked', value);
	    };
	    /**
	     * @description
	     * Registers a function called when the control value changes.
	     *
	     * @param fn The callback function
	     */
	    CheckboxControlValueAccessor.prototype.registerOnChange = function (fn) {
	        this.onChange = fn;
	    };
	    /**
	     * @description
	     * Registers a function called when the control is touched.
	     *
	     * @param fn The callback function
	     */
	    CheckboxControlValueAccessor.prototype.registerOnTouched = function (fn) {
	        this.onTouched = fn;
	    };
	    /**
	     * Sets the "disabled" property on the input element.
	     *
	     * @param isDisabled The disabled value
	     */
	    CheckboxControlValueAccessor.prototype.setDisabledState = function (isDisabled) {
	        this._renderer.setProperty(this._elementRef.nativeElement, 'disabled', isDisabled);
	    };
	    CheckboxControlValueAccessor = __decorate([
	        Directive({
	            selector: 'input[type=checkbox][formControlName],input[type=checkbox][formControl],input[type=checkbox][ngModel]',
	            host: { '(change)': 'onChange($event.target.checked)', '(blur)': 'onTouched()' },
	            providers: [CHECKBOX_VALUE_ACCESSOR]
	        }),
	        __metadata("design:paramtypes", [Renderer2, ElementRef])
	    ], CheckboxControlValueAccessor);
	    return CheckboxControlValueAccessor;
	}());

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	var DEFAULT_VALUE_ACCESSOR = {
	    provide: NG_VALUE_ACCESSOR,
	    useExisting: forwardRef(function () { return DefaultValueAccessor; }),
	    multi: true
	};
	/**
	 * We must check whether the agent is Android because composition events
	 * behave differently between iOS and Android.
	 */
	function _isAndroid() {
	    var userAgent = getDOM() ? getDOM().getUserAgent() : '';
	    return /android (\d+)/.test(userAgent.toLowerCase());
	}
	/**
	 * @description
	 * Provide this token to control if form directives buffer IME input until
	 * the "compositionend" event occurs.
	 * @publicApi
	 */
	var COMPOSITION_BUFFER_MODE = new InjectionToken('CompositionEventMode');
	/**
	 * @description
	 * The default `ControlValueAccessor` for writing a value and listening to changes on input
	 * elements. The accessor is used by the `FormControlDirective`, `FormControlName`, and
	 * `NgModel` directives.
	 *
	 * @usageNotes
	 *
	 * ### Using the default value accessor
	 *
	 * The following example shows how to use an input element that activates the default value accessor
	 * (in this case, a text field).
	 *
	 * ```ts
	 * const firstNameControl = new FormControl();
	 * ```
	 *
	 * ```
	 * <input type="text" [formControl]="firstNameControl">
	 * ```
	 *
	 * @ngModule ReactiveFormsModule
	 * @ngModule FormsModule
	 * @publicApi
	 */
	var DefaultValueAccessor = /** @class */ (function () {
	    function DefaultValueAccessor(_renderer, _elementRef, _compositionMode) {
	        this._renderer = _renderer;
	        this._elementRef = _elementRef;
	        this._compositionMode = _compositionMode;
	        /**
	         * @description
	         * The registered callback function called when an input event occurs on the input element.
	         */
	        this.onChange = function (_) { };
	        /**
	         * @description
	         * The registered callback function called when a blur event occurs on the input element.
	         */
	        this.onTouched = function () { };
	        /** Whether the user is creating a composition string (IME events). */
	        this._composing = false;
	        if (this._compositionMode == null) {
	            this._compositionMode = !_isAndroid();
	        }
	    }
	    /**
	     * Sets the "value" property on the input element.
	     *
	     * @param value The checked value
	     */
	    DefaultValueAccessor.prototype.writeValue = function (value) {
	        var normalizedValue = value == null ? '' : value;
	        this._renderer.setProperty(this._elementRef.nativeElement, 'value', normalizedValue);
	    };
	    /**
	     * @description
	     * Registers a function called when the control value changes.
	     *
	     * @param fn The callback function
	     */
	    DefaultValueAccessor.prototype.registerOnChange = function (fn) {
	        this.onChange = fn;
	    };
	    /**
	     * @description
	     * Registers a function called when the control is touched.
	     *
	     * @param fn The callback function
	     */
	    DefaultValueAccessor.prototype.registerOnTouched = function (fn) {
	        this.onTouched = fn;
	    };
	    /**
	     * Sets the "disabled" property on the input element.
	     *
	     * @param isDisabled The disabled value
	     */
	    DefaultValueAccessor.prototype.setDisabledState = function (isDisabled) {
	        this._renderer.setProperty(this._elementRef.nativeElement, 'disabled', isDisabled);
	    };
	    /** @internal */
	    DefaultValueAccessor.prototype._handleInput = function (value) {
	        if (!this._compositionMode || (this._compositionMode && !this._composing)) {
	            this.onChange(value);
	        }
	    };
	    /** @internal */
	    DefaultValueAccessor.prototype._compositionStart = function () {
	        this._composing = true;
	    };
	    /** @internal */
	    DefaultValueAccessor.prototype._compositionEnd = function (value) {
	        this._composing = false;
	        this._compositionMode && this.onChange(value);
	    };
	    DefaultValueAccessor = __decorate([
	        Directive({
	            selector: 'input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]',
	            // TODO: vsavkin replace the above selector with the one below it once
	            // https://github.com/angular/angular/issues/3011 is implemented
	            // selector: '[ngModel],[formControl],[formControlName]',
	            host: {
	                '(input)': '$any(this)._handleInput($event.target.value)',
	                '(blur)': 'onTouched()',
	                '(compositionstart)': '$any(this)._compositionStart()',
	                '(compositionend)': '$any(this)._compositionEnd($event.target.value)'
	            },
	            providers: [DEFAULT_VALUE_ACCESSOR]
	        }),
	        __param(2, Optional()), __param(2, Inject(COMPOSITION_BUFFER_MODE)),
	        __metadata("design:paramtypes", [Renderer2, ElementRef, Boolean])
	    ], DefaultValueAccessor);
	    return DefaultValueAccessor;
	}());

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * @description
	 * Base class for control directives.
	 *
	 * This class is only used internally in the `ReactiveFormsModule` and the `FormsModule`.
	 *
	 * @publicApi
	 */
	var AbstractControlDirective = /** @class */ (function () {
	    function AbstractControlDirective() {
	    }
	    Object.defineProperty(AbstractControlDirective.prototype, "value", {
	        /**
	         * @description
	         * Reports the value of the control if it is present, otherwise null.
	         */
	        get: function () {
	            return this.control ? this.control.value : null;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(AbstractControlDirective.prototype, "valid", {
	        /**
	         * @description
	         * Reports whether the control is valid. A control is considered valid if no
	         * validation errors exist with the current value.
	         * If the control is not present, null is returned.
	         */
	        get: function () {
	            return this.control ? this.control.valid : null;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(AbstractControlDirective.prototype, "invalid", {
	        /**
	         * @description
	         * Reports whether the control is invalid, meaning that an error exists in the input value.
	         * If the control is not present, null is returned.
	         */
	        get: function () {
	            return this.control ? this.control.invalid : null;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(AbstractControlDirective.prototype, "pending", {
	        /**
	         * @description
	         * Reports whether a control is pending, meaning that that async validation is occurring and
	         * errors are not yet available for the input value. If the control is not present, null is
	         * returned.
	         */
	        get: function () {
	            return this.control ? this.control.pending : null;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(AbstractControlDirective.prototype, "disabled", {
	        /**
	         * @description
	         * Reports whether the control is disabled, meaning that the control is disabled
	         * in the UI and is exempt from validation checks and excluded from aggregate
	         * values of ancestor controls. If the control is not present, null is returned.
	         */
	        get: function () {
	            return this.control ? this.control.disabled : null;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(AbstractControlDirective.prototype, "enabled", {
	        /**
	         * @description
	         * Reports whether the control is enabled, meaning that the control is included in ancestor
	         * calculations of validity or value. If the control is not present, null is returned.
	         */
	        get: function () {
	            return this.control ? this.control.enabled : null;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(AbstractControlDirective.prototype, "errors", {
	        /**
	         * @description
	         * Reports the control's validation errors. If the control is not present, null is returned.
	         */
	        get: function () {
	            return this.control ? this.control.errors : null;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(AbstractControlDirective.prototype, "pristine", {
	        /**
	         * @description
	         * Reports whether the control is pristine, meaning that the user has not yet changed
	         * the value in the UI. If the control is not present, null is returned.
	         */
	        get: function () {
	            return this.control ? this.control.pristine : null;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(AbstractControlDirective.prototype, "dirty", {
	        /**
	         * @description
	         * Reports whether the control is dirty, meaning that the user has changed
	         * the value in the UI. If the control is not present, null is returned.
	         */
	        get: function () {
	            return this.control ? this.control.dirty : null;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(AbstractControlDirective.prototype, "touched", {
	        /**
	         * @description
	         * Reports whether the control is touched, meaning that the user has triggered
	         * a `blur` event on it. If the control is not present, null is returned.
	         */
	        get: function () {
	            return this.control ? this.control.touched : null;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(AbstractControlDirective.prototype, "status", {
	        /**
	         * @description
	         * Reports the validation status of the control. Possible values include:
	         * 'VALID', 'INVALID', 'DISABLED', and 'PENDING'.
	         * If the control is not present, null is returned.
	         */
	        get: function () {
	            return this.control ? this.control.status : null;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(AbstractControlDirective.prototype, "untouched", {
	        /**
	         * @description
	         * Reports whether the control is untouched, meaning that the user has not yet triggered
	         * a `blur` event on it. If the control is not present, null is returned.
	         */
	        get: function () {
	            return this.control ? this.control.untouched : null;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(AbstractControlDirective.prototype, "statusChanges", {
	        /**
	         * @description
	         * Returns a multicasting observable that emits a validation status whenever it is
	         * calculated for the control. If the control is not present, null is returned.
	         */
	        get: function () {
	            return this.control ? this.control.statusChanges : null;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(AbstractControlDirective.prototype, "valueChanges", {
	        /**
	         * @description
	         * Returns a multicasting observable of value changes for the control that emits every time the
	         * value of the control changes in the UI or programmatically.
	         * If the control is not present, null is returned.
	         */
	        get: function () {
	            return this.control ? this.control.valueChanges : null;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(AbstractControlDirective.prototype, "path", {
	        /**
	         * @description
	         * Returns an array that represents the path from the top-level form to this control.
	         * Each index is the string name of the control on that level.
	         */
	        get: function () {
	            return null;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    /**
	     * @description
	     * Resets the control with the provided value if the control is present.
	     */
	    AbstractControlDirective.prototype.reset = function (value) {
	        if (value === void 0) { value = undefined; }
	        if (this.control)
	            this.control.reset(value);
	    };
	    /**
	     * @description
	     * Reports whether the control with the given path has the error specified.
	     *
	     * @param errorCode The code of the error to check
	     * @param path A list of control names that designates how to move from the current control
	     * to the control that should be queried for errors.
	     *
	     * @usageNotes
	     * For example, for the following `FormGroup`:
	     *
	     * ```
	     * form = new FormGroup({
	     *   address: new FormGroup({ street: new FormControl() })
	     * });
	     * ```
	     *
	     * The path to the 'street' control from the root form would be 'address' -> 'street'.
	     *
	     * It can be provided to this method in one of two formats:
	     *
	     * 1. An array of string control names, e.g. `['address', 'street']`
	     * 1. A period-delimited list of control names in one string, e.g. `'address.street'`
	     *
	     * If no path is given, this method checks for the error on the current control.
	     *
	     * @returns whether the given error is present in the control at the given path.
	     *
	     * If the control is not present, false is returned.
	     */
	    AbstractControlDirective.prototype.hasError = function (errorCode, path) {
	        return this.control ? this.control.hasError(errorCode, path) : false;
	    };
	    /**
	     * @description
	     * Reports error data for the control with the given path.
	     *
	     * @param errorCode The code of the error to check
	     * @param path A list of control names that designates how to move from the current control
	     * to the control that should be queried for errors.
	     *
	     * @usageNotes
	     * For example, for the following `FormGroup`:
	     *
	     * ```
	     * form = new FormGroup({
	     *   address: new FormGroup({ street: new FormControl() })
	     * });
	     * ```
	     *
	     * The path to the 'street' control from the root form would be 'address' -> 'street'.
	     *
	     * It can be provided to this method in one of two formats:
	     *
	     * 1. An array of string control names, e.g. `['address', 'street']`
	     * 1. A period-delimited list of control names in one string, e.g. `'address.street'`
	     *
	     * @returns error data for that particular error. If the control or error is not present,
	     * null is returned.
	     */
	    AbstractControlDirective.prototype.getError = function (errorCode, path) {
	        return this.control ? this.control.getError(errorCode, path) : null;
	    };
	    return AbstractControlDirective;
	}());

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * @description
	 * A base class for directives that contain multiple registered instances of `NgControl`.
	 * Only used by the forms module.
	 *
	 * @publicApi
	 */
	var ControlContainer = /** @class */ (function (_super) {
	    __extends(ControlContainer, _super);
	    function ControlContainer() {
	        return _super !== null && _super.apply(this, arguments) || this;
	    }
	    Object.defineProperty(ControlContainer.prototype, "formDirective", {
	        /**
	         * @description
	         * The top-level form directive for the control.
	         */
	        get: function () {
	            return null;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(ControlContainer.prototype, "path", {
	        /**
	         * @description
	         * The path to this group.
	         */
	        get: function () {
	            return null;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    return ControlContainer;
	}(AbstractControlDirective));

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	function unimplemented() {
	    throw new Error('unimplemented');
	}
	/**
	 * @description
	 * A base class that all control `FormControl`-based directives extend. It binds a `FormControl`
	 * object to a DOM element.
	 *
	 * @publicApi
	 */
	var NgControl = /** @class */ (function (_super) {
	    __extends(NgControl, _super);
	    function NgControl() {
	        var _this = _super !== null && _super.apply(this, arguments) || this;
	        /**
	         * @description
	         * The parent form for the control.
	         *
	         * @internal
	         */
	        _this._parent = null;
	        /**
	         * @description
	         * The name for the control
	         */
	        _this.name = null;
	        /**
	         * @description
	         * The value accessor for the control
	         */
	        _this.valueAccessor = null;
	        /**
	         * @description
	         * The uncomposed array of synchronous validators for the control
	         *
	         * @internal
	         */
	        _this._rawValidators = [];
	        /**
	         * @description
	         * The uncomposed array of async validators for the control
	         *
	         * @internal
	         */
	        _this._rawAsyncValidators = [];
	        return _this;
	    }
	    Object.defineProperty(NgControl.prototype, "validator", {
	        /**
	         * @description
	         * The registered synchronous validator function for the control
	         *
	         * @throws An exception that this method is not implemented
	         */
	        get: function () {
	            return unimplemented();
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(NgControl.prototype, "asyncValidator", {
	        /**
	         * @description
	         * The registered async validator function for the control
	         *
	         * @throws An exception that this method is not implemented
	         */
	        get: function () {
	            return unimplemented();
	        },
	        enumerable: true,
	        configurable: true
	    });
	    return NgControl;
	}(AbstractControlDirective));

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	var AbstractControlStatus = /** @class */ (function () {
	    function AbstractControlStatus(cd) {
	        this._cd = cd;
	    }
	    Object.defineProperty(AbstractControlStatus.prototype, "ngClassUntouched", {
	        get: function () {
	            return this._cd.control ? this._cd.control.untouched : false;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(AbstractControlStatus.prototype, "ngClassTouched", {
	        get: function () {
	            return this._cd.control ? this._cd.control.touched : false;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(AbstractControlStatus.prototype, "ngClassPristine", {
	        get: function () {
	            return this._cd.control ? this._cd.control.pristine : false;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(AbstractControlStatus.prototype, "ngClassDirty", {
	        get: function () {
	            return this._cd.control ? this._cd.control.dirty : false;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(AbstractControlStatus.prototype, "ngClassValid", {
	        get: function () {
	            return this._cd.control ? this._cd.control.valid : false;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(AbstractControlStatus.prototype, "ngClassInvalid", {
	        get: function () {
	            return this._cd.control ? this._cd.control.invalid : false;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(AbstractControlStatus.prototype, "ngClassPending", {
	        get: function () {
	            return this._cd.control ? this._cd.control.pending : false;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    return AbstractControlStatus;
	}());
	var ngControlStatusHost = {
	    '[class.ng-untouched]': 'ngClassUntouched',
	    '[class.ng-touched]': 'ngClassTouched',
	    '[class.ng-pristine]': 'ngClassPristine',
	    '[class.ng-dirty]': 'ngClassDirty',
	    '[class.ng-valid]': 'ngClassValid',
	    '[class.ng-invalid]': 'ngClassInvalid',
	    '[class.ng-pending]': 'ngClassPending',
	};
	/**
	 * @description
	 * Directive automatically applied to Angular form controls that sets CSS classes
	 * based on control status.
	 *
	 * @usageNotes
	 *
	 * ### CSS classes applied
	 *
	 * The following classes are applied as the properties become true:
	 *
	 * * ng-valid
	 * * ng-invalid
	 * * ng-pending
	 * * ng-pristine
	 * * ng-dirty
	 * * ng-untouched
	 * * ng-touched
	 *
	 * @ngModule ReactiveFormsModule
	 * @ngModule FormsModule
	 * @publicApi
	 */
	var NgControlStatus = /** @class */ (function (_super) {
	    __extends(NgControlStatus, _super);
	    function NgControlStatus(cd) {
	        return _super.call(this, cd) || this;
	    }
	    NgControlStatus = __decorate([
	        Directive({ selector: '[formControlName],[ngModel],[formControl]', host: ngControlStatusHost }),
	        __param(0, Self()),
	        __metadata("design:paramtypes", [NgControl])
	    ], NgControlStatus);
	    return NgControlStatus;
	}(AbstractControlStatus));
	/**
	 * @description
	 * Directive automatically applied to Angular form groups that sets CSS classes
	 * based on control status (valid/invalid/dirty/etc).
	 *
	 * @see `NgControlStatus`
	 *
	 * @ngModule ReactiveFormsModule
	 * @ngModule FormsModule
	 * @publicApi
	 */
	var NgControlStatusGroup = /** @class */ (function (_super) {
	    __extends(NgControlStatusGroup, _super);
	    function NgControlStatusGroup(cd) {
	        return _super.call(this, cd) || this;
	    }
	    NgControlStatusGroup = __decorate([
	        Directive({
	            selector: '[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]',
	            host: ngControlStatusHost
	        }),
	        __param(0, Self()),
	        __metadata("design:paramtypes", [ControlContainer])
	    ], NgControlStatusGroup);
	    return NgControlStatusGroup;
	}(AbstractControlStatus));

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	function isEmptyInputValue(value) {
	    // we don't check for string here so it also works with arrays
	    return value == null || value.length === 0;
	}
	/**
	 * @description
	 * An `InjectionToken` for registering additional synchronous validators used with
	 * `AbstractControl`s.
	 *
	 * @see `NG_ASYNC_VALIDATORS`
	 *
	 * @usageNotes
	 *
	 * ### Providing a custom validator
	 *
	 * The following example registers a custom validator directive. Adding the validator to the
	 * existing collection of validators requires the `multi: true` option.
	 *
	 * ```typescript
	 * @Directive({
	 *   selector: '[customValidator]',
	 *   providers: [{provide: NG_VALIDATORS, useExisting: CustomValidatorDirective, multi: true}]
	 * })
	 * class CustomValidatorDirective implements Validator {
	 *   validate(control: AbstractControl): ValidationErrors | null {
	 *     return { 'custom': true };
	 *   }
	 * }
	 * ```
	 *
	 * @publicApi
	 */
	var NG_VALIDATORS = new InjectionToken('NgValidators');
	/**
	 * @description
	 * An `InjectionToken` for registering additional asynchronous validators used with
	 * `AbstractControl`s.
	 *
	 * @see `NG_VALIDATORS`
	 *
	 * @publicApi
	 */
	var NG_ASYNC_VALIDATORS = new InjectionToken('NgAsyncValidators');
	/**
	 * A regular expression that matches valid e-mail addresses.
	 *
	 * At a high level, this regexp matches e-mail addresses of the format `local-part@tld`, where:
	 * - `local-part` consists of one or more of the allowed characters (alphanumeric and some
	 *   punctuation symbols).
	 * - `local-part` cannot begin or end with a period (`.`).
	 * - `local-part` cannot be longer than 64 characters.
	 * - `tld` consists of one or more `labels` separated by periods (`.`). For example `localhost` or
	 *   `foo.com`.
	 * - A `label` consists of one or more of the allowed characters (alphanumeric, dashes (`-`) and
	 *   periods (`.`)).
	 * - A `label` cannot begin or end with a dash (`-`) or a period (`.`).
	 * - A `label` cannot be longer than 63 characters.
	 * - The whole address cannot be longer than 254 characters.
	 *
	 * ## Implementation background
	 *
	 * This regexp was ported over from AngularJS (see there for git history):
	 * https://github.com/angular/angular.js/blob/c133ef836/src/ng/directive/input.js#L27
	 * It is based on the
	 * [WHATWG version](https://html.spec.whatwg.org/multipage/input.html#valid-e-mail-address) with
	 * some enhancements to incorporate more RFC rules (such as rules related to domain names and the
	 * lengths of different parts of the address). The main differences from the WHATWG version are:
	 *   - Disallow `local-part` to begin or end with a period (`.`).
	 *   - Disallow `local-part` length to exceed 64 characters.
	 *   - Disallow total address length to exceed 254 characters.
	 *
	 * See [this commit](https://github.com/angular/angular.js/commit/f3f5cf72e) for more details.
	 */
	var EMAIL_REGEXP = /^(?=.{1,254}$)(?=.{1,64}@)[a-zA-Z0-9!#$%&'*+/=?^_`{|}~-]+(?:\.[a-zA-Z0-9!#$%&'*+/=?^_`{|}~-]+)*@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/;
	/**
	 * @description
	 * Provides a set of built-in validators that can be used by form controls.
	 *
	 * A validator is a function that processes a `FormControl` or collection of
	 * controls and returns an error map or null. A null map means that validation has passed.
	 *
	 * @see [Form Validation](/guide/form-validation)
	 *
	 * @publicApi
	 */
	var Validators = /** @class */ (function () {
	    function Validators() {
	    }
	    /**
	     * @description
	     * Validator that requires the control's value to be greater than or equal to the provided number.
	     * The validator exists only as a function and not as a directive.
	     *
	     * @usageNotes
	     *
	     * ### Validate against a minimum of 3
	     *
	     * ```typescript
	     * const control = new FormControl(2, Validators.min(3));
	     *
	     * console.log(control.errors); // {min: {min: 3, actual: 2}}
	     * ```
	     *
	     * @returns A validator function that returns an error map with the
	     * `min` property if the validation check fails, otherwise `null`.
	     *
	     * @see `updateValueAndValidity()`
	     *
	     */
	    Validators.min = function (min) {
	        return function (control) {
	            if (isEmptyInputValue(control.value) || isEmptyInputValue(min)) {
	                return null; // don't validate empty values to allow optional controls
	            }
	            var value = parseFloat(control.value);
	            // Controls with NaN values after parsing should be treated as not having a
	            // minimum, per the HTML forms spec: https://www.w3.org/TR/html5/forms.html#attr-input-min
	            return !isNaN(value) && value < min ? { 'min': { 'min': min, 'actual': control.value } } : null;
	        };
	    };
	    /**
	     * @description
	     * Validator that requires the control's value to be less than or equal to the provided number.
	     * The validator exists only as a function and not as a directive.
	     *
	     * @usageNotes
	     *
	     * ### Validate against a maximum of 15
	     *
	     * ```typescript
	     * const control = new FormControl(16, Validators.max(15));
	     *
	     * console.log(control.errors); // {max: {max: 15, actual: 16}}
	     * ```
	     *
	     * @returns A validator function that returns an error map with the
	     * `max` property if the validation check fails, otherwise `null`.
	     *
	     * @see `updateValueAndValidity()`
	     *
	     */
	    Validators.max = function (max) {
	        return function (control) {
	            if (isEmptyInputValue(control.value) || isEmptyInputValue(max)) {
	                return null; // don't validate empty values to allow optional controls
	            }
	            var value = parseFloat(control.value);
	            // Controls with NaN values after parsing should be treated as not having a
	            // maximum, per the HTML forms spec: https://www.w3.org/TR/html5/forms.html#attr-input-max
	            return !isNaN(value) && value > max ? { 'max': { 'max': max, 'actual': control.value } } : null;
	        };
	    };
	    /**
	     * @description
	     * Validator that requires the control have a non-empty value.
	     *
	     * @usageNotes
	     *
	     * ### Validate that the field is non-empty
	     *
	     * ```typescript
	     * const control = new FormControl('', Validators.required);
	     *
	     * console.log(control.errors); // {required: true}
	     * ```
	     *
	     * @returns An error map with the `required` property
	     * if the validation check fails, otherwise `null`.
	     *
	     * @see `updateValueAndValidity()`
	     *
	     */
	    Validators.required = function (control) {
	        return isEmptyInputValue(control.value) ? { 'required': true } : null;
	    };
	    /**
	     * @description
	     * Validator that requires the control's value be true. This validator is commonly
	     * used for required checkboxes.
	     *
	     * @usageNotes
	     *
	     * ### Validate that the field value is true
	     *
	     * ```typescript
	     * const control = new FormControl('', Validators.requiredTrue);
	     *
	     * console.log(control.errors); // {required: true}
	     * ```
	     *
	     * @returns An error map that contains the `required` property
	     * set to `true` if the validation check fails, otherwise `null`.
	     *
	     * @see `updateValueAndValidity()`
	     *
	     */
	    Validators.requiredTrue = function (control) {
	        return control.value === true ? null : { 'required': true };
	    };
	    /**
	     * @description
	     * Validator that requires the control's value pass an email validation test.
	     *
	     * Tests the value using a [regular
	     * expression](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions)
	     * pattern suitable for common usecases. The pattern is based on the definition of a valid email
	     * address in the [WHATWG HTML
	     * specification](https://html.spec.whatwg.org/multipage/input.html#valid-e-mail-address) with
	     * some enhancements to incorporate more RFC rules (such as rules related to domain names and the
	     * lengths of different parts of the address).
	     *
	     * The differences from the WHATWG version include:
	     * - Disallow `local-part` (the part before the `@` symbol) to begin or end with a period (`.`).
	     * - Disallow `local-part` to be longer than 64 characters.
	     * - Disallow the whole address to be longer than 254 characters.
	     *
	     * If this pattern does not satisfy your business needs, you can use `Validators.pattern()` to
	     * validate the value against a different pattern.
	     *
	     * @usageNotes
	     *
	     * ### Validate that the field matches a valid email pattern
	     *
	     * ```typescript
	     * const control = new FormControl('bad@', Validators.email);
	     *
	     * console.log(control.errors); // {email: true}
	     * ```
	     *
	     * @returns An error map with the `email` property
	     * if the validation check fails, otherwise `null`.
	     *
	     * @see `updateValueAndValidity()`
	     *
	     */
	    Validators.email = function (control) {
	        if (isEmptyInputValue(control.value)) {
	            return null; // don't validate empty values to allow optional controls
	        }
	        return EMAIL_REGEXP.test(control.value) ? null : { 'email': true };
	    };
	    /**
	     * @description
	     * Validator that requires the length of the control's value to be greater than or equal
	     * to the provided minimum length. This validator is also provided by default if you use the
	     * the HTML5 `minlength` attribute. Note that the `minLength` validator is intended to be used
	     * only for types that have a numeric `length` property, such as strings or arrays. The
	     * `minLength` validator logic is also not invoked for values when their `length` property is 0
	     * (for example in case of an empty string or an empty array), to support optional controls. You
	     * can use the standard `required` validator if empty values should not be considered valid.
	     *
	     * @usageNotes
	     *
	     * ### Validate that the field has a minimum of 3 characters
	     *
	     * ```typescript
	     * const control = new FormControl('ng', Validators.minLength(3));
	     *
	     * console.log(control.errors); // {minlength: {requiredLength: 3, actualLength: 2}}
	     * ```
	     *
	     * ```html
	     * <input minlength="5">
	     * ```
	     *
	     * @returns A validator function that returns an error map with the
	     * `minlength` if the validation check fails, otherwise `null`.
	     *
	     * @see `updateValueAndValidity()`
	     *
	     */
	    Validators.minLength = function (minLength) {
	        return function (control) {
	            if (isEmptyInputValue(control.value)) {
	                return null; // don't validate empty values to allow optional controls
	            }
	            var length = control.value ? control.value.length : 0;
	            return length < minLength ?
	                { 'minlength': { 'requiredLength': minLength, 'actualLength': length } } :
	                null;
	        };
	    };
	    /**
	     * @description
	     * Validator that requires the length of the control's value to be less than or equal
	     * to the provided maximum length. This validator is also provided by default if you use the
	     * the HTML5 `maxlength` attribute. Note that the `maxLength` validator is intended to be used
	     * only for types that have a numeric `length` property, such as strings or arrays.
	     *
	     * @usageNotes
	     *
	     * ### Validate that the field has maximum of 5 characters
	     *
	     * ```typescript
	     * const control = new FormControl('Angular', Validators.maxLength(5));
	     *
	     * console.log(control.errors); // {maxlength: {requiredLength: 5, actualLength: 7}}
	     * ```
	     *
	     * ```html
	     * <input maxlength="5">
	     * ```
	     *
	     * @returns A validator function that returns an error map with the
	     * `maxlength` property if the validation check fails, otherwise `null`.
	     *
	     * @see `updateValueAndValidity()`
	     *
	     */
	    Validators.maxLength = function (maxLength) {
	        return function (control) {
	            var length = control.value ? control.value.length : 0;
	            return length > maxLength ?
	                { 'maxlength': { 'requiredLength': maxLength, 'actualLength': length } } :
	                null;
	        };
	    };
	    /**
	     * @description
	     * Validator that requires the control's value to match a regex pattern. This validator is also
	     * provided by default if you use the HTML5 `pattern` attribute.
	     *
	     * @usageNotes
	     *
	     * ### Validate that the field only contains letters or spaces
	     *
	     * ```typescript
	     * const control = new FormControl('1', Validators.pattern('[a-zA-Z ]*'));
	     *
	     * console.log(control.errors); // {pattern: {requiredPattern: '^[a-zA-Z ]*$', actualValue: '1'}}
	     * ```
	     *
	     * ```html
	     * <input pattern="[a-zA-Z ]*">
	     * ```
	     *
	     * @param pattern A regular expression to be used as is to test the values, or a string.
	     * If a string is passed, the `^` character is prepended and the `$` character is
	     * appended to the provided string (if not already present), and the resulting regular
	     * expression is used to test the values.
	     *
	     * @returns A validator function that returns an error map with the
	     * `pattern` property if the validation check fails, otherwise `null`.
	     *
	     * @see `updateValueAndValidity()`
	     *
	     */
	    Validators.pattern = function (pattern) {
	        if (!pattern)
	            return Validators.nullValidator;
	        var regex;
	        var regexStr;
	        if (typeof pattern === 'string') {
	            regexStr = '';
	            if (pattern.charAt(0) !== '^')
	                regexStr += '^';
	            regexStr += pattern;
	            if (pattern.charAt(pattern.length - 1) !== '$')
	                regexStr += '$';
	            regex = new RegExp(regexStr);
	        }
	        else {
	            regexStr = pattern.toString();
	            regex = pattern;
	        }
	        return function (control) {
	            if (isEmptyInputValue(control.value)) {
	                return null; // don't validate empty values to allow optional controls
	            }
	            var value = control.value;
	            return regex.test(value) ? null :
	                { 'pattern': { 'requiredPattern': regexStr, 'actualValue': value } };
	        };
	    };
	    /**
	     * @description
	     * Validator that performs no operation.
	     *
	     * @see `updateValueAndValidity()`
	     *
	     */
	    Validators.nullValidator = function (control) {
	        return null;
	    };
	    Validators.compose = function (validators) {
	        if (!validators)
	            return null;
	        var presentValidators = validators.filter(isPresent);
	        if (presentValidators.length == 0)
	            return null;
	        return function (control) {
	            return _mergeErrors(_executeValidators(control, presentValidators));
	        };
	    };
	    /**
	     * @description
	     * Compose multiple async validators into a single function that returns the union
	     * of the individual error objects for the provided control.
	     *
	     * @returns A validator function that returns an error map with the
	     * merged error objects of the async validators if the validation check fails, otherwise `null`.
	     *
	     * @see `updateValueAndValidity()`
	     *
	     */
	    Validators.composeAsync = function (validators) {
	        if (!validators)
	            return null;
	        var presentValidators = validators.filter(isPresent);
	        if (presentValidators.length == 0)
	            return null;
	        return function (control) {
	            var observables = _executeAsyncValidators(control, presentValidators).map(toObservable);
	            return forkJoin(observables).pipe(map(_mergeErrors));
	        };
	    };
	    return Validators;
	}());
	function isPresent(o) {
	    return o != null;
	}
	function toObservable(r) {
	    var obs = isPromise$2(r) ? from$1(r) : r;
	    if (!(isObservable$1(obs))) {
	        throw new Error("Expected validator to return Promise or Observable.");
	    }
	    return obs;
	}
	function _executeValidators(control, validators) {
	    return validators.map(function (v) { return v(control); });
	}
	function _executeAsyncValidators(control, validators) {
	    return validators.map(function (v) { return v(control); });
	}
	function _mergeErrors(arrayOfErrors) {
	    var res = {};
	    // Not using Array.reduce here due to a Chrome 80 bug
	    // https://bugs.chromium.org/p/chromium/issues/detail?id=1049982
	    arrayOfErrors.forEach(function (errors) {
	        res = errors != null ? __assign(__assign({}, res), errors) : res;
	    });
	    return Object.keys(res).length === 0 ? null : res;
	}

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	function normalizeValidator(validator) {
	    if (validator.validate) {
	        return function (c) { return validator.validate(c); };
	    }
	    else {
	        return validator;
	    }
	}
	function normalizeAsyncValidator(validator) {
	    if (validator.validate) {
	        return function (c) { return validator.validate(c); };
	    }
	    else {
	        return validator;
	    }
	}

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	var NUMBER_VALUE_ACCESSOR = {
	    provide: NG_VALUE_ACCESSOR,
	    useExisting: forwardRef(function () { return NumberValueAccessor; }),
	    multi: true
	};
	/**
	 * @description
	 * The `ControlValueAccessor` for writing a number value and listening to number input changes.
	 * The value accessor is used by the `FormControlDirective`, `FormControlName`, and  `NgModel`
	 * directives.
	 *
	 * @usageNotes
	 *
	 * ### Using a number input with a reactive form.
	 *
	 * The following example shows how to use a number input with a reactive form.
	 *
	 * ```ts
	 * const totalCountControl = new FormControl();
	 * ```
	 *
	 * ```
	 * <input type="number" [formControl]="totalCountControl">
	 * ```
	 *
	 * @ngModule ReactiveFormsModule
	 * @ngModule FormsModule
	 * @publicApi
	 */
	var NumberValueAccessor = /** @class */ (function () {
	    function NumberValueAccessor(_renderer, _elementRef) {
	        this._renderer = _renderer;
	        this._elementRef = _elementRef;
	        /**
	         * @description
	         * The registered callback function called when a change or input event occurs on the input
	         * element.
	         */
	        this.onChange = function (_) { };
	        /**
	         * @description
	         * The registered callback function called when a blur event occurs on the input element.
	         */
	        this.onTouched = function () { };
	    }
	    /**
	     * Sets the "value" property on the input element.
	     *
	     * @param value The checked value
	     */
	    NumberValueAccessor.prototype.writeValue = function (value) {
	        // The value needs to be normalized for IE9, otherwise it is set to 'null' when null
	        var normalizedValue = value == null ? '' : value;
	        this._renderer.setProperty(this._elementRef.nativeElement, 'value', normalizedValue);
	    };
	    /**
	     * @description
	     * Registers a function called when the control value changes.
	     *
	     * @param fn The callback function
	     */
	    NumberValueAccessor.prototype.registerOnChange = function (fn) {
	        this.onChange = function (value) {
	            fn(value == '' ? null : parseFloat(value));
	        };
	    };
	    /**
	     * @description
	     * Registers a function called when the control is touched.
	     *
	     * @param fn The callback function
	     */
	    NumberValueAccessor.prototype.registerOnTouched = function (fn) {
	        this.onTouched = fn;
	    };
	    /**
	     * Sets the "disabled" property on the input element.
	     *
	     * @param isDisabled The disabled value
	     */
	    NumberValueAccessor.prototype.setDisabledState = function (isDisabled) {
	        this._renderer.setProperty(this._elementRef.nativeElement, 'disabled', isDisabled);
	    };
	    NumberValueAccessor = __decorate([
	        Directive({
	            selector: 'input[type=number][formControlName],input[type=number][formControl],input[type=number][ngModel]',
	            host: {
	                '(change)': 'onChange($event.target.value)',
	                '(input)': 'onChange($event.target.value)',
	                '(blur)': 'onTouched()'
	            },
	            providers: [NUMBER_VALUE_ACCESSOR]
	        }),
	        __metadata("design:paramtypes", [Renderer2, ElementRef])
	    ], NumberValueAccessor);
	    return NumberValueAccessor;
	}());

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	var RADIO_VALUE_ACCESSOR = {
	    provide: NG_VALUE_ACCESSOR,
	    useExisting: forwardRef(function () { return RadioControlValueAccessor; }),
	    multi: true
	};
	/**
	 * @description
	 * Class used by Angular to track radio buttons. For internal use only.
	 */
	var RadioControlRegistry = /** @class */ (function () {
	    function RadioControlRegistry() {
	        this._accessors = [];
	    }
	    /**
	     * @description
	     * Adds a control to the internal registry. For internal use only.
	     */
	    RadioControlRegistry.prototype.add = function (control, accessor) {
	        this._accessors.push([control, accessor]);
	    };
	    /**
	     * @description
	     * Removes a control from the internal registry. For internal use only.
	     */
	    RadioControlRegistry.prototype.remove = function (accessor) {
	        for (var i = this._accessors.length - 1; i >= 0; --i) {
	            if (this._accessors[i][1] === accessor) {
	                this._accessors.splice(i, 1);
	                return;
	            }
	        }
	    };
	    /**
	     * @description
	     * Selects a radio button. For internal use only.
	     */
	    RadioControlRegistry.prototype.select = function (accessor) {
	        var _this = this;
	        this._accessors.forEach(function (c) {
	            if (_this._isSameGroup(c, accessor) && c[1] !== accessor) {
	                c[1].fireUncheck(accessor.value);
	            }
	        });
	    };
	    RadioControlRegistry.prototype._isSameGroup = function (controlPair, accessor) {
	        if (!controlPair[0].control)
	            return false;
	        return controlPair[0]._parent === accessor._control._parent &&
	            controlPair[1].name === accessor.name;
	    };
	    RadioControlRegistry = __decorate([
	        Injectable()
	    ], RadioControlRegistry);
	    return RadioControlRegistry;
	}());
	/**
	 * @description
	 * The `ControlValueAccessor` for writing radio control values and listening to radio control
	 * changes. The value accessor is used by the `FormControlDirective`, `FormControlName`, and
	 * `NgModel` directives.
	 *
	 * @usageNotes
	 *
	 * ### Using radio buttons with reactive form directives
	 *
	 * The follow example shows how to use radio buttons in a reactive form. When using radio buttons in
	 * a reactive form, radio buttons in the same group should have the same `formControlName`.
	 * Providing a `name` attribute is optional.
	 *
	 * {@example forms/ts/reactiveRadioButtons/reactive_radio_button_example.ts region='Reactive'}
	 *
	 * @ngModule ReactiveFormsModule
	 * @ngModule FormsModule
	 * @publicApi
	 */
	var RadioControlValueAccessor = /** @class */ (function () {
	    function RadioControlValueAccessor(_renderer, _elementRef, _registry, _injector) {
	        this._renderer = _renderer;
	        this._elementRef = _elementRef;
	        this._registry = _registry;
	        this._injector = _injector;
	        /**
	         * @description
	         * The registered callback function called when a change event occurs on the input element.
	         */
	        this.onChange = function () { };
	        /**
	         * @description
	         * The registered callback function called when a blur event occurs on the input element.
	         */
	        this.onTouched = function () { };
	    }
	    /**
	     * @description
	     * A lifecycle method called when the directive is initialized. For internal use only.
	     */
	    RadioControlValueAccessor.prototype.ngOnInit = function () {
	        this._control = this._injector.get(NgControl);
	        this._checkName();
	        this._registry.add(this._control, this);
	    };
	    /**
	     * @description
	     * Lifecycle method called before the directive's instance is destroyed. For internal use only.
	     */
	    RadioControlValueAccessor.prototype.ngOnDestroy = function () {
	        this._registry.remove(this);
	    };
	    /**
	     * @description
	     * Sets the "checked" property value on the radio input element.
	     *
	     * @param value The checked value
	     */
	    RadioControlValueAccessor.prototype.writeValue = function (value) {
	        this._state = value === this.value;
	        this._renderer.setProperty(this._elementRef.nativeElement, 'checked', this._state);
	    };
	    /**
	     * @description
	     * Registers a function called when the control value changes.
	     *
	     * @param fn The callback function
	     */
	    RadioControlValueAccessor.prototype.registerOnChange = function (fn) {
	        var _this = this;
	        this._fn = fn;
	        this.onChange = function () {
	            fn(_this.value);
	            _this._registry.select(_this);
	        };
	    };
	    /**
	     * Sets the "value" on the radio input element and unchecks it.
	     *
	     * @param value
	     */
	    RadioControlValueAccessor.prototype.fireUncheck = function (value) {
	        this.writeValue(value);
	    };
	    /**
	     * @description
	     * Registers a function called when the control is touched.
	     *
	     * @param fn The callback function
	     */
	    RadioControlValueAccessor.prototype.registerOnTouched = function (fn) {
	        this.onTouched = fn;
	    };
	    /**
	     * Sets the "disabled" property on the input element.
	     *
	     * @param isDisabled The disabled value
	     */
	    RadioControlValueAccessor.prototype.setDisabledState = function (isDisabled) {
	        this._renderer.setProperty(this._elementRef.nativeElement, 'disabled', isDisabled);
	    };
	    RadioControlValueAccessor.prototype._checkName = function () {
	        if (this.name && this.formControlName && this.name !== this.formControlName) {
	            this._throwNameError();
	        }
	        if (!this.name && this.formControlName)
	            this.name = this.formControlName;
	    };
	    RadioControlValueAccessor.prototype._throwNameError = function () {
	        throw new Error("\n      If you define both a name and a formControlName attribute on your radio button, their values\n      must match. Ex: <input type=\"radio\" formControlName=\"food\" name=\"food\">\n    ");
	    };
	    __decorate([
	        Input(),
	        __metadata("design:type", String)
	    ], RadioControlValueAccessor.prototype, "name", void 0);
	    __decorate([
	        Input(),
	        __metadata("design:type", String)
	    ], RadioControlValueAccessor.prototype, "formControlName", void 0);
	    __decorate([
	        Input(),
	        __metadata("design:type", Object)
	    ], RadioControlValueAccessor.prototype, "value", void 0);
	    RadioControlValueAccessor = __decorate([
	        Directive({
	            selector: 'input[type=radio][formControlName],input[type=radio][formControl],input[type=radio][ngModel]',
	            host: { '(change)': 'onChange()', '(blur)': 'onTouched()' },
	            providers: [RADIO_VALUE_ACCESSOR]
	        }),
	        __metadata("design:paramtypes", [Renderer2, ElementRef,
	            RadioControlRegistry, Injector])
	    ], RadioControlValueAccessor);
	    return RadioControlValueAccessor;
	}());

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	var RANGE_VALUE_ACCESSOR = {
	    provide: NG_VALUE_ACCESSOR,
	    useExisting: forwardRef(function () { return RangeValueAccessor; }),
	    multi: true
	};
	/**
	 * @description
	 * The `ControlValueAccessor` for writing a range value and listening to range input changes.
	 * The value accessor is used by the `FormControlDirective`, `FormControlName`, and  `NgModel`
	 * directives.
	 *
	 * @usageNotes
	 *
	 * ### Using a range input with a reactive form
	 *
	 * The following example shows how to use a range input with a reactive form.
	 *
	 * ```ts
	 * const ageControl = new FormControl();
	 * ```
	 *
	 * ```
	 * <input type="range" [formControl]="ageControl">
	 * ```
	 *
	 * @ngModule ReactiveFormsModule
	 * @ngModule FormsModule
	 * @publicApi
	 */
	var RangeValueAccessor = /** @class */ (function () {
	    function RangeValueAccessor(_renderer, _elementRef) {
	        this._renderer = _renderer;
	        this._elementRef = _elementRef;
	        /**
	         * @description
	         * The registered callback function called when a change or input event occurs on the input
	         * element.
	         */
	        this.onChange = function (_) { };
	        /**
	         * @description
	         * The registered callback function called when a blur event occurs on the input element.
	         */
	        this.onTouched = function () { };
	    }
	    /**
	     * Sets the "value" property on the input element.
	     *
	     * @param value The checked value
	     */
	    RangeValueAccessor.prototype.writeValue = function (value) {
	        this._renderer.setProperty(this._elementRef.nativeElement, 'value', parseFloat(value));
	    };
	    /**
	     * @description
	     * Registers a function called when the control value changes.
	     *
	     * @param fn The callback function
	     */
	    RangeValueAccessor.prototype.registerOnChange = function (fn) {
	        this.onChange = function (value) {
	            fn(value == '' ? null : parseFloat(value));
	        };
	    };
	    /**
	     * @description
	     * Registers a function called when the control is touched.
	     *
	     * @param fn The callback function
	     */
	    RangeValueAccessor.prototype.registerOnTouched = function (fn) {
	        this.onTouched = fn;
	    };
	    /**
	     * Sets the "disabled" property on the range input element.
	     *
	     * @param isDisabled The disabled value
	     */
	    RangeValueAccessor.prototype.setDisabledState = function (isDisabled) {
	        this._renderer.setProperty(this._elementRef.nativeElement, 'disabled', isDisabled);
	    };
	    RangeValueAccessor = __decorate([
	        Directive({
	            selector: 'input[type=range][formControlName],input[type=range][formControl],input[type=range][ngModel]',
	            host: {
	                '(change)': 'onChange($event.target.value)',
	                '(input)': 'onChange($event.target.value)',
	                '(blur)': 'onTouched()'
	            },
	            providers: [RANGE_VALUE_ACCESSOR]
	        }),
	        __metadata("design:paramtypes", [Renderer2, ElementRef])
	    ], RangeValueAccessor);
	    return RangeValueAccessor;
	}());

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	var FormErrorExamples = {
	    formControlName: "\n    <div [formGroup]=\"myGroup\">\n      <input formControlName=\"firstName\">\n    </div>\n\n    In your class:\n\n    this.myGroup = new FormGroup({\n       firstName: new FormControl()\n    });",
	    formGroupName: "\n    <div [formGroup]=\"myGroup\">\n       <div formGroupName=\"person\">\n          <input formControlName=\"firstName\">\n       </div>\n    </div>\n\n    In your class:\n\n    this.myGroup = new FormGroup({\n       person: new FormGroup({ firstName: new FormControl() })\n    });",
	    formArrayName: "\n    <div [formGroup]=\"myGroup\">\n      <div formArrayName=\"cities\">\n        <div *ngFor=\"let city of cityArray.controls; index as i\">\n          <input [formControlName]=\"i\">\n        </div>\n      </div>\n    </div>\n\n    In your class:\n\n    this.cityArray = new FormArray([new FormControl('SF')]);\n    this.myGroup = new FormGroup({\n      cities: this.cityArray\n    });",
	    ngModelGroup: "\n    <form>\n       <div ngModelGroup=\"person\">\n          <input [(ngModel)]=\"person.name\" name=\"firstName\">\n       </div>\n    </form>",
	    ngModelWithFormGroup: "\n    <div [formGroup]=\"myGroup\">\n       <input formControlName=\"firstName\">\n       <input [(ngModel)]=\"showMoreControls\" [ngModelOptions]=\"{standalone: true}\">\n    </div>\n  "
	};

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	var ReactiveErrors = /** @class */ (function () {
	    function ReactiveErrors() {
	    }
	    ReactiveErrors.controlParentException = function () {
	        throw new Error("formControlName must be used with a parent formGroup directive.  You'll want to add a formGroup\n       directive and pass it an existing FormGroup instance (you can create one in your class).\n\n      Example:\n\n      " + FormErrorExamples.formControlName);
	    };
	    ReactiveErrors.ngModelGroupException = function () {
	        throw new Error("formControlName cannot be used with an ngModelGroup parent. It is only compatible with parents\n       that also have a \"form\" prefix: formGroupName, formArrayName, or formGroup.\n\n       Option 1:  Update the parent to be formGroupName (reactive form strategy)\n\n        " + FormErrorExamples.formGroupName + "\n\n        Option 2: Use ngModel instead of formControlName (template-driven strategy)\n\n        " + FormErrorExamples.ngModelGroup);
	    };
	    ReactiveErrors.missingFormException = function () {
	        throw new Error("formGroup expects a FormGroup instance. Please pass one in.\n\n       Example:\n\n       " + FormErrorExamples.formControlName);
	    };
	    ReactiveErrors.groupParentException = function () {
	        throw new Error("formGroupName must be used with a parent formGroup directive.  You'll want to add a formGroup\n      directive and pass it an existing FormGroup instance (you can create one in your class).\n\n      Example:\n\n      " + FormErrorExamples.formGroupName);
	    };
	    ReactiveErrors.arrayParentException = function () {
	        throw new Error("formArrayName must be used with a parent formGroup directive.  You'll want to add a formGroup\n       directive and pass it an existing FormGroup instance (you can create one in your class).\n\n        Example:\n\n        " + FormErrorExamples.formArrayName);
	    };
	    ReactiveErrors.disabledAttrWarning = function () {
	        console.warn("\n      It looks like you're using the disabled attribute with a reactive form directive. If you set disabled to true\n      when you set up this control in your component class, the disabled attribute will actually be set in the DOM for\n      you. We recommend using this approach to avoid 'changed after checked' errors.\n       \n      Example: \n      form = new FormGroup({\n        first: new FormControl({value: 'Nancy', disabled: true}, Validators.required),\n        last: new FormControl('Drew', Validators.required)\n      });\n    ");
	    };
	    ReactiveErrors.ngModelWarning = function (directiveName) {
	        console.warn("\n    It looks like you're using ngModel on the same form field as " + directiveName + ". \n    Support for using the ngModel input property and ngModelChange event with \n    reactive form directives has been deprecated in Angular v6 and will be removed \n    in Angular v7.\n    \n    For more information on this, see our API docs here:\n    https://angular.io/api/forms/" + (directiveName === 'formControl' ? 'FormControlDirective' :
	            'FormControlName') + "#use-with-ngmodel\n    ");
	    };
	    return ReactiveErrors;
	}());

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	var SELECT_VALUE_ACCESSOR = {
	    provide: NG_VALUE_ACCESSOR,
	    useExisting: forwardRef(function () { return SelectControlValueAccessor; }),
	    multi: true
	};
	function _buildValueString(id, value) {
	    if (id == null)
	        return "" + value;
	    if (value && typeof value === 'object')
	        value = 'Object';
	    return (id + ": " + value).slice(0, 50);
	}
	function _extractId(valueString) {
	    return valueString.split(':')[0];
	}
	/**
	 * @description
	 * The `ControlValueAccessor` for writing select control values and listening to select control
	 * changes. The value accessor is used by the `FormControlDirective`, `FormControlName`, and
	 * `NgModel` directives.
	 *
	 * @usageNotes
	 *
	 * ### Using select controls in a reactive form
	 *
	 * The following examples show how to use a select control in a reactive form.
	 *
	 * {@example forms/ts/reactiveSelectControl/reactive_select_control_example.ts region='Component'}
	 *
	 * ### Using select controls in a template-driven form
	 *
	 * To use a select in a template-driven form, simply add an `ngModel` and a `name`
	 * attribute to the main `<select>` tag.
	 *
	 * {@example forms/ts/selectControl/select_control_example.ts region='Component'}
	 *
	 * ### Customizing option selection
	 *
	 * Angular uses object identity to select option. It's possible for the identities of items
	 * to change while the data does not. This can happen, for example, if the items are produced
	 * from an RPC to the server, and that RPC is re-run. Even if the data hasn't changed, the
	 * second response will produce objects with different identities.
	 *
	 * To customize the default option comparison algorithm, `<select>` supports `compareWith` input.
	 * `compareWith` takes a **function** which has two arguments: `option1` and `option2`.
	 * If `compareWith` is given, Angular selects option by the return value of the function.
	 *
	 * ```ts
	 * const selectedCountriesControl = new FormControl();
	 * ```
	 *
	 * ```
	 * <select [compareWith]="compareFn"  [formControl]="selectedCountriesControl">
	 *     <option *ngFor="let country of countries" [ngValue]="country">
	 *         {{country.name}}
	 *     </option>
	 * </select>
	 *
	 * compareFn(c1: Country, c2: Country): boolean {
	 *     return c1 && c2 ? c1.id === c2.id : c1 === c2;
	 * }
	 * ```
	 *
	 * **Note:** We listen to the 'change' event because 'input' events aren't fired
	 * for selects in Firefox and IE:
	 * https://bugzilla.mozilla.org/show_bug.cgi?id=1024350
	 * https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/4660045/
	 *
	 * @ngModule ReactiveFormsModule
	 * @ngModule FormsModule
	 * @publicApi
	 */
	var SelectControlValueAccessor = /** @class */ (function () {
	    function SelectControlValueAccessor(_renderer, _elementRef) {
	        this._renderer = _renderer;
	        this._elementRef = _elementRef;
	        /** @internal */
	        this._optionMap = new Map();
	        /** @internal */
	        this._idCounter = 0;
	        /**
	         * @description
	         * The registered callback function called when a change event occurs on the input element.
	         */
	        this.onChange = function (_) { };
	        /**
	         * @description
	         * The registered callback function called when a blur event occurs on the input element.
	         */
	        this.onTouched = function () { };
	        this._compareWith = looseIdentical;
	    }
	    Object.defineProperty(SelectControlValueAccessor.prototype, "compareWith", {
	        /**
	         * @description
	         * Tracks the option comparison algorithm for tracking identities when
	         * checking for changes.
	         */
	        set: function (fn) {
	            if (typeof fn !== 'function') {
	                throw new Error("compareWith must be a function, but received " + JSON.stringify(fn));
	            }
	            this._compareWith = fn;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    /**
	     * Sets the "value" property on the input element. The "selectedIndex"
	     * property is also set if an ID is provided on the option element.
	     *
	     * @param value The checked value
	     */
	    SelectControlValueAccessor.prototype.writeValue = function (value) {
	        this.value = value;
	        var id = this._getOptionId(value);
	        if (id == null) {
	            this._renderer.setProperty(this._elementRef.nativeElement, 'selectedIndex', -1);
	        }
	        var valueString = _buildValueString(id, value);
	        this._renderer.setProperty(this._elementRef.nativeElement, 'value', valueString);
	    };
	    /**
	     * @description
	     * Registers a function called when the control value changes.
	     *
	     * @param fn The callback function
	     */
	    SelectControlValueAccessor.prototype.registerOnChange = function (fn) {
	        var _this = this;
	        this.onChange = function (valueString) {
	            _this.value = _this._getOptionValue(valueString);
	            fn(_this.value);
	        };
	    };
	    /**
	     * @description
	     * Registers a function called when the control is touched.
	     *
	     * @param fn The callback function
	     */
	    SelectControlValueAccessor.prototype.registerOnTouched = function (fn) {
	        this.onTouched = fn;
	    };
	    /**
	     * Sets the "disabled" property on the select input element.
	     *
	     * @param isDisabled The disabled value
	     */
	    SelectControlValueAccessor.prototype.setDisabledState = function (isDisabled) {
	        this._renderer.setProperty(this._elementRef.nativeElement, 'disabled', isDisabled);
	    };
	    /** @internal */
	    SelectControlValueAccessor.prototype._registerOption = function () {
	        return (this._idCounter++).toString();
	    };
	    /** @internal */
	    SelectControlValueAccessor.prototype._getOptionId = function (value) {
	        var e_1, _a;
	        try {
	            for (var _b = __values(Array.from(this._optionMap.keys())), _c = _b.next(); !_c.done; _c = _b.next()) {
	                var id = _c.value;
	                if (this._compareWith(this._optionMap.get(id), value))
	                    return id;
	            }
	        }
	        catch (e_1_1) { e_1 = { error: e_1_1 }; }
	        finally {
	            try {
	                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
	            }
	            finally { if (e_1) throw e_1.error; }
	        }
	        return null;
	    };
	    /** @internal */
	    SelectControlValueAccessor.prototype._getOptionValue = function (valueString) {
	        var id = _extractId(valueString);
	        return this._optionMap.has(id) ? this._optionMap.get(id) : valueString;
	    };
	    __decorate([
	        Input(),
	        __metadata("design:type", Function),
	        __metadata("design:paramtypes", [Function])
	    ], SelectControlValueAccessor.prototype, "compareWith", null);
	    SelectControlValueAccessor = __decorate([
	        Directive({
	            selector: 'select:not([multiple])[formControlName],select:not([multiple])[formControl],select:not([multiple])[ngModel]',
	            host: { '(change)': 'onChange($event.target.value)', '(blur)': 'onTouched()' },
	            providers: [SELECT_VALUE_ACCESSOR]
	        }),
	        __metadata("design:paramtypes", [Renderer2, ElementRef])
	    ], SelectControlValueAccessor);
	    return SelectControlValueAccessor;
	}());
	/**
	 * @description
	 * Marks `<option>` as dynamic, so Angular can be notified when options change.
	 *
	 * @see `SelectControlValueAccessor`
	 *
	 * @ngModule ReactiveFormsModule
	 * @ngModule FormsModule
	 * @publicApi
	 */
	var NgSelectOption = /** @class */ (function () {
	    function NgSelectOption(_element, _renderer, _select) {
	        this._element = _element;
	        this._renderer = _renderer;
	        this._select = _select;
	        if (this._select)
	            this.id = this._select._registerOption();
	    }
	    Object.defineProperty(NgSelectOption.prototype, "ngValue", {
	        /**
	         * @description
	         * Tracks the value bound to the option element. Unlike the value binding,
	         * ngValue supports binding to objects.
	         */
	        set: function (value) {
	            if (this._select == null)
	                return;
	            this._select._optionMap.set(this.id, value);
	            this._setElementValue(_buildValueString(this.id, value));
	            this._select.writeValue(this._select.value);
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(NgSelectOption.prototype, "value", {
	        /**
	         * @description
	         * Tracks simple string values bound to the option element.
	         * For objects, use the `ngValue` input binding.
	         */
	        set: function (value) {
	            this._setElementValue(value);
	            if (this._select)
	                this._select.writeValue(this._select.value);
	        },
	        enumerable: true,
	        configurable: true
	    });
	    /** @internal */
	    NgSelectOption.prototype._setElementValue = function (value) {
	        this._renderer.setProperty(this._element.nativeElement, 'value', value);
	    };
	    /**
	     * @description
	     * Lifecycle method called before the directive's instance is destroyed. For internal use only.
	     */
	    NgSelectOption.prototype.ngOnDestroy = function () {
	        if (this._select) {
	            this._select._optionMap.delete(this.id);
	            this._select.writeValue(this._select.value);
	        }
	    };
	    __decorate([
	        Input('ngValue'),
	        __metadata("design:type", Object),
	        __metadata("design:paramtypes", [Object])
	    ], NgSelectOption.prototype, "ngValue", null);
	    __decorate([
	        Input('value'),
	        __metadata("design:type", Object),
	        __metadata("design:paramtypes", [Object])
	    ], NgSelectOption.prototype, "value", null);
	    NgSelectOption = __decorate([
	        Directive({ selector: 'option' }),
	        __param(2, Optional()), __param(2, Host()),
	        __metadata("design:paramtypes", [ElementRef, Renderer2,
	            SelectControlValueAccessor])
	    ], NgSelectOption);
	    return NgSelectOption;
	}());

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	var SELECT_MULTIPLE_VALUE_ACCESSOR = {
	    provide: NG_VALUE_ACCESSOR,
	    useExisting: forwardRef(function () { return SelectMultipleControlValueAccessor; }),
	    multi: true
	};
	function _buildValueString$1(id, value) {
	    if (id == null)
	        return "" + value;
	    if (typeof value === 'string')
	        value = "'" + value + "'";
	    if (value && typeof value === 'object')
	        value = 'Object';
	    return (id + ": " + value).slice(0, 50);
	}
	function _extractId$1(valueString) {
	    return valueString.split(':')[0];
	}
	/**
	 * @description
	 * The `ControlValueAccessor` for writing multi-select control values and listening to multi-select
	 * control changes. The value accessor is used by the `FormControlDirective`, `FormControlName`, and
	 * `NgModel` directives.
	 *
	 * @see `SelectControlValueAccessor`
	 *
	 * @usageNotes
	 *
	 * ### Using a multi-select control
	 *
	 * The follow example shows you how to use a multi-select control with a reactive form.
	 *
	 * ```ts
	 * const countryControl = new FormControl();
	 * ```
	 *
	 * ```
	 * <select multiple name="countries" [formControl]="countryControl">
	 *   <option *ngFor="let country of countries" [ngValue]="country">
	 *     {{ country.name }}
	 *   </option>
	 * </select>
	 * ```
	 *
	 * ### Customizing option selection
	 *
	 * To customize the default option comparison algorithm, `<select>` supports `compareWith` input.
	 * See the `SelectControlValueAccessor` for usage.
	 *
	 * @ngModule ReactiveFormsModule
	 * @ngModule FormsModule
	 * @publicApi
	 */
	var SelectMultipleControlValueAccessor = /** @class */ (function () {
	    function SelectMultipleControlValueAccessor(_renderer, _elementRef) {
	        this._renderer = _renderer;
	        this._elementRef = _elementRef;
	        /** @internal */
	        this._optionMap = new Map();
	        /** @internal */
	        this._idCounter = 0;
	        /**
	         * @description
	         * The registered callback function called when a change event occurs on the input element.
	         */
	        this.onChange = function (_) { };
	        /**
	         * @description
	         * The registered callback function called when a blur event occurs on the input element.
	         */
	        this.onTouched = function () { };
	        this._compareWith = looseIdentical;
	    }
	    Object.defineProperty(SelectMultipleControlValueAccessor.prototype, "compareWith", {
	        /**
	         * @description
	         * Tracks the option comparison algorithm for tracking identities when
	         * checking for changes.
	         */
	        set: function (fn) {
	            if (typeof fn !== 'function') {
	                throw new Error("compareWith must be a function, but received " + JSON.stringify(fn));
	            }
	            this._compareWith = fn;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    /**
	     * @description
	     * Sets the "value" property on one or of more
	     * of the select's options.
	     *
	     * @param value The value
	     */
	    SelectMultipleControlValueAccessor.prototype.writeValue = function (value) {
	        var _this = this;
	        this.value = value;
	        var optionSelectedStateSetter;
	        if (Array.isArray(value)) {
	            // convert values to ids
	            var ids_1 = value.map(function (v) { return _this._getOptionId(v); });
	            optionSelectedStateSetter = function (opt, o) {
	                opt._setSelected(ids_1.indexOf(o.toString()) > -1);
	            };
	        }
	        else {
	            optionSelectedStateSetter = function (opt, o) {
	                opt._setSelected(false);
	            };
	        }
	        this._optionMap.forEach(optionSelectedStateSetter);
	    };
	    /**
	     * @description
	     * Registers a function called when the control value changes
	     * and writes an array of the selected options.
	     *
	     * @param fn The callback function
	     */
	    SelectMultipleControlValueAccessor.prototype.registerOnChange = function (fn) {
	        var _this = this;
	        this.onChange = function (_) {
	            var selected = [];
	            if (_.hasOwnProperty('selectedOptions')) {
	                var options = _.selectedOptions;
	                for (var i = 0; i < options.length; i++) {
	                    var opt = options.item(i);
	                    var val = _this._getOptionValue(opt.value);
	                    selected.push(val);
	                }
	            }
	            // Degrade on IE
	            else {
	                var options = _.options;
	                for (var i = 0; i < options.length; i++) {
	                    var opt = options.item(i);
	                    if (opt.selected) {
	                        var val = _this._getOptionValue(opt.value);
	                        selected.push(val);
	                    }
	                }
	            }
	            _this.value = selected;
	            fn(selected);
	        };
	    };
	    /**
	     * @description
	     * Registers a function called when the control is touched.
	     *
	     * @param fn The callback function
	     */
	    SelectMultipleControlValueAccessor.prototype.registerOnTouched = function (fn) {
	        this.onTouched = fn;
	    };
	    /**
	     * Sets the "disabled" property on the select input element.
	     *
	     * @param isDisabled The disabled value
	     */
	    SelectMultipleControlValueAccessor.prototype.setDisabledState = function (isDisabled) {
	        this._renderer.setProperty(this._elementRef.nativeElement, 'disabled', isDisabled);
	    };
	    /** @internal */
	    SelectMultipleControlValueAccessor.prototype._registerOption = function (value) {
	        var id = (this._idCounter++).toString();
	        this._optionMap.set(id, value);
	        return id;
	    };
	    /** @internal */
	    SelectMultipleControlValueAccessor.prototype._getOptionId = function (value) {
	        var e_1, _a;
	        try {
	            for (var _b = __values(Array.from(this._optionMap.keys())), _c = _b.next(); !_c.done; _c = _b.next()) {
	                var id = _c.value;
	                if (this._compareWith(this._optionMap.get(id)._value, value))
	                    return id;
	            }
	        }
	        catch (e_1_1) { e_1 = { error: e_1_1 }; }
	        finally {
	            try {
	                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
	            }
	            finally { if (e_1) throw e_1.error; }
	        }
	        return null;
	    };
	    /** @internal */
	    SelectMultipleControlValueAccessor.prototype._getOptionValue = function (valueString) {
	        var id = _extractId$1(valueString);
	        return this._optionMap.has(id) ? this._optionMap.get(id)._value : valueString;
	    };
	    __decorate([
	        Input(),
	        __metadata("design:type", Function),
	        __metadata("design:paramtypes", [Function])
	    ], SelectMultipleControlValueAccessor.prototype, "compareWith", null);
	    SelectMultipleControlValueAccessor = __decorate([
	        Directive({
	            selector: 'select[multiple][formControlName],select[multiple][formControl],select[multiple][ngModel]',
	            host: { '(change)': 'onChange($event.target)', '(blur)': 'onTouched()' },
	            providers: [SELECT_MULTIPLE_VALUE_ACCESSOR]
	        }),
	        __metadata("design:paramtypes", [Renderer2, ElementRef])
	    ], SelectMultipleControlValueAccessor);
	    return SelectMultipleControlValueAccessor;
	}());
	/**
	 * @description
	 * Marks `<option>` as dynamic, so Angular can be notified when options change.
	 *
	 * @see `SelectMultipleControlValueAccessor`
	 *
	 * @ngModule ReactiveFormsModule
	 * @ngModule FormsModule
	 * @publicApi
	 */
	var ÉµNgSelectMultipleOption = /** @class */ (function () {
	    function ÉµNgSelectMultipleOption(_element, _renderer, _select) {
	        this._element = _element;
	        this._renderer = _renderer;
	        this._select = _select;
	        if (this._select) {
	            this.id = this._select._registerOption(this);
	        }
	    }
	    Object.defineProperty(ÉµNgSelectMultipleOption.prototype, "ngValue", {
	        /**
	         * @description
	         * Tracks the value bound to the option element. Unlike the value binding,
	         * ngValue supports binding to objects.
	         */
	        set: function (value) {
	            if (this._select == null)
	                return;
	            this._value = value;
	            this._setElementValue(_buildValueString$1(this.id, value));
	            this._select.writeValue(this._select.value);
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(ÉµNgSelectMultipleOption.prototype, "value", {
	        /**
	         * @description
	         * Tracks simple string values bound to the option element.
	         * For objects, use the `ngValue` input binding.
	         */
	        set: function (value) {
	            if (this._select) {
	                this._value = value;
	                this._setElementValue(_buildValueString$1(this.id, value));
	                this._select.writeValue(this._select.value);
	            }
	            else {
	                this._setElementValue(value);
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    /** @internal */
	    ÉµNgSelectMultipleOption.prototype._setElementValue = function (value) {
	        this._renderer.setProperty(this._element.nativeElement, 'value', value);
	    };
	    /** @internal */
	    ÉµNgSelectMultipleOption.prototype._setSelected = function (selected) {
	        this._renderer.setProperty(this._element.nativeElement, 'selected', selected);
	    };
	    /**
	     * @description
	     * Lifecycle method called before the directive's instance is destroyed. For internal use only.
	     */
	    ÉµNgSelectMultipleOption.prototype.ngOnDestroy = function () {
	        if (this._select) {
	            this._select._optionMap.delete(this.id);
	            this._select.writeValue(this._select.value);
	        }
	    };
	    __decorate([
	        Input('ngValue'),
	        __metadata("design:type", Object),
	        __metadata("design:paramtypes", [Object])
	    ], ÉµNgSelectMultipleOption.prototype, "ngValue", null);
	    __decorate([
	        Input('value'),
	        __metadata("design:type", Object),
	        __metadata("design:paramtypes", [Object])
	    ], ÉµNgSelectMultipleOption.prototype, "value", null);
	    ÉµNgSelectMultipleOption = __decorate([
	        Directive({ selector: 'option' }),
	        __param(2, Optional()), __param(2, Host()),
	        __metadata("design:paramtypes", [ElementRef, Renderer2,
	            SelectMultipleControlValueAccessor])
	    ], ÉµNgSelectMultipleOption);
	    return ÉµNgSelectMultipleOption;
	}());

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	function controlPath(name, parent) {
	    return __spread(parent.path, [name]);
	}
	function setUpControl(control, dir) {
	    if (!control)
	        _throwError$1(dir, 'Cannot find control with');
	    if (!dir.valueAccessor)
	        _throwError$1(dir, 'No value accessor for form control with');
	    control.validator = Validators.compose([control.validator, dir.validator]);
	    control.asyncValidator = Validators.composeAsync([control.asyncValidator, dir.asyncValidator]);
	    dir.valueAccessor.writeValue(control.value);
	    setUpViewChangePipeline(control, dir);
	    setUpModelChangePipeline(control, dir);
	    setUpBlurPipeline(control, dir);
	    if (dir.valueAccessor.setDisabledState) {
	        control.registerOnDisabledChange(function (isDisabled) {
	            dir.valueAccessor.setDisabledState(isDisabled);
	        });
	    }
	    // re-run validation when validator binding changes, e.g. minlength=3 -> minlength=4
	    dir._rawValidators.forEach(function (validator) {
	        if (validator.registerOnValidatorChange)
	            validator.registerOnValidatorChange(function () { return control.updateValueAndValidity(); });
	    });
	    dir._rawAsyncValidators.forEach(function (validator) {
	        if (validator.registerOnValidatorChange)
	            validator.registerOnValidatorChange(function () { return control.updateValueAndValidity(); });
	    });
	}
	function cleanUpControl(control, dir) {
	    dir.valueAccessor.registerOnChange(function () { return _noControlError(dir); });
	    dir.valueAccessor.registerOnTouched(function () { return _noControlError(dir); });
	    dir._rawValidators.forEach(function (validator) {
	        if (validator.registerOnValidatorChange) {
	            validator.registerOnValidatorChange(null);
	        }
	    });
	    dir._rawAsyncValidators.forEach(function (validator) {
	        if (validator.registerOnValidatorChange) {
	            validator.registerOnValidatorChange(null);
	        }
	    });
	    if (control)
	        control._clearChangeFns();
	}
	function setUpViewChangePipeline(control, dir) {
	    dir.valueAccessor.registerOnChange(function (newValue) {
	        control._pendingValue = newValue;
	        control._pendingChange = true;
	        control._pendingDirty = true;
	        if (control.updateOn === 'change')
	            updateControl(control, dir);
	    });
	}
	function setUpBlurPipeline(control, dir) {
	    dir.valueAccessor.registerOnTouched(function () {
	        control._pendingTouched = true;
	        if (control.updateOn === 'blur' && control._pendingChange)
	            updateControl(control, dir);
	        if (control.updateOn !== 'submit')
	            control.markAsTouched();
	    });
	}
	function updateControl(control, dir) {
	    if (control._pendingDirty)
	        control.markAsDirty();
	    control.setValue(control._pendingValue, { emitModelToViewChange: false });
	    dir.viewToModelUpdate(control._pendingValue);
	    control._pendingChange = false;
	}
	function setUpModelChangePipeline(control, dir) {
	    control.registerOnChange(function (newValue, emitModelEvent) {
	        // control -> view
	        dir.valueAccessor.writeValue(newValue);
	        // control -> ngModel
	        if (emitModelEvent)
	            dir.viewToModelUpdate(newValue);
	    });
	}
	function setUpFormContainer(control, dir) {
	    if (control == null)
	        _throwError$1(dir, 'Cannot find control with');
	    control.validator = Validators.compose([control.validator, dir.validator]);
	    control.asyncValidator = Validators.composeAsync([control.asyncValidator, dir.asyncValidator]);
	}
	function _noControlError(dir) {
	    return _throwError$1(dir, 'There is no FormControl instance attached to form control element with');
	}
	function _throwError$1(dir, message) {
	    var messageEnd;
	    if (dir.path.length > 1) {
	        messageEnd = "path: '" + dir.path.join(' -> ') + "'";
	    }
	    else if (dir.path[0]) {
	        messageEnd = "name: '" + dir.path + "'";
	    }
	    else {
	        messageEnd = 'unspecified name attribute';
	    }
	    throw new Error(message + " " + messageEnd);
	}
	function composeValidators(validators) {
	    return validators != null ? Validators.compose(validators.map(normalizeValidator)) : null;
	}
	function composeAsyncValidators(validators) {
	    return validators != null ? Validators.composeAsync(validators.map(normalizeAsyncValidator)) :
	        null;
	}
	function isPropertyUpdated(changes, viewModel) {
	    if (!changes.hasOwnProperty('model'))
	        return false;
	    var change = changes['model'];
	    if (change.isFirstChange())
	        return true;
	    return !looseIdentical(viewModel, change.currentValue);
	}
	var BUILTIN_ACCESSORS = [
	    CheckboxControlValueAccessor,
	    RangeValueAccessor,
	    NumberValueAccessor,
	    SelectControlValueAccessor,
	    SelectMultipleControlValueAccessor,
	    RadioControlValueAccessor,
	];
	function isBuiltInAccessor(valueAccessor) {
	    return BUILTIN_ACCESSORS.some(function (a) { return valueAccessor.constructor === a; });
	}
	function syncPendingControls(form, directives) {
	    form._syncPendingControls();
	    directives.forEach(function (dir) {
	        var control = dir.control;
	        if (control.updateOn === 'submit' && control._pendingChange) {
	            dir.viewToModelUpdate(control._pendingValue);
	            control._pendingChange = false;
	        }
	    });
	}
	// TODO: vsavkin remove it once https://github.com/angular/angular/issues/3011 is implemented
	function selectValueAccessor(dir, valueAccessors) {
	    if (!valueAccessors)
	        return null;
	    if (!Array.isArray(valueAccessors))
	        _throwError$1(dir, 'Value accessor was not provided as an array for form control with');
	    var defaultAccessor = undefined;
	    var builtinAccessor = undefined;
	    var customAccessor = undefined;
	    valueAccessors.forEach(function (v) {
	        if (v.constructor === DefaultValueAccessor) {
	            defaultAccessor = v;
	        }
	        else if (isBuiltInAccessor(v)) {
	            if (builtinAccessor)
	                _throwError$1(dir, 'More than one built-in value accessor matches form control with');
	            builtinAccessor = v;
	        }
	        else {
	            if (customAccessor)
	                _throwError$1(dir, 'More than one custom value accessor matches form control with');
	            customAccessor = v;
	        }
	    });
	    if (customAccessor)
	        return customAccessor;
	    if (builtinAccessor)
	        return builtinAccessor;
	    if (defaultAccessor)
	        return defaultAccessor;
	    _throwError$1(dir, 'No valid value accessor for form control with');
	    return null;
	}
	function removeDir(list, el) {
	    var index = list.indexOf(el);
	    if (index > -1)
	        list.splice(index, 1);
	}
	// TODO(kara): remove after deprecation period
	function _ngModelWarning(name, type, instance, warningConfig) {
	    if ( warningConfig === 'never')
	        return;
	    if (((warningConfig === null || warningConfig === 'once') && !type._ngModelWarningSentOnce) ||
	        (warningConfig === 'always' && !instance._ngModelWarningSent)) {
	        ReactiveErrors.ngModelWarning(name);
	        type._ngModelWarningSentOnce = true;
	        instance._ngModelWarningSent = true;
	    }
	}

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * Reports that a FormControl is valid, meaning that no errors exist in the input value.
	 *
	 * @see `status`
	 */
	var VALID = 'VALID';
	/**
	 * Reports that a FormControl is invalid, meaning that an error exists in the input value.
	 *
	 * @see `status`
	 */
	var INVALID = 'INVALID';
	/**
	 * Reports that a FormControl is pending, meaning that that async validation is occurring and
	 * errors are not yet available for the input value.
	 *
	 * @see `markAsPending`
	 * @see `status`
	 */
	var PENDING = 'PENDING';
	/**
	 * Reports that a FormControl is disabled, meaning that the control is exempt from ancestor
	 * calculations of validity or value.
	 *
	 * @see `markAsDisabled`
	 * @see `status`
	 */
	var DISABLED = 'DISABLED';
	function _find(control, path, delimiter) {
	    if (path == null)
	        return null;
	    if (!Array.isArray(path)) {
	        path = path.split(delimiter);
	    }
	    if (Array.isArray(path) && path.length === 0)
	        return null;
	    // Not using Array.reduce here due to a Chrome 80 bug
	    // https://bugs.chromium.org/p/chromium/issues/detail?id=1049982
	    var controlToFind = control;
	    path.forEach(function (name) {
	        if (controlToFind instanceof FormGroup) {
	            controlToFind = controlToFind.controls.hasOwnProperty(name) ?
	                controlToFind.controls[name] :
	                null;
	        }
	        else if (controlToFind instanceof FormArray) {
	            controlToFind = controlToFind.at(name) || null;
	        }
	        else {
	            controlToFind = null;
	        }
	    });
	    return controlToFind;
	}
	function coerceToValidator(validatorOrOpts) {
	    var validator = (isOptionsObj(validatorOrOpts) ? validatorOrOpts.validators :
	        validatorOrOpts);
	    return Array.isArray(validator) ? composeValidators(validator) : validator || null;
	}
	function coerceToAsyncValidator(asyncValidator, validatorOrOpts) {
	    var origAsyncValidator = (isOptionsObj(validatorOrOpts) ? validatorOrOpts.asyncValidators :
	        asyncValidator);
	    return Array.isArray(origAsyncValidator) ? composeAsyncValidators(origAsyncValidator) :
	        origAsyncValidator || null;
	}
	function isOptionsObj(validatorOrOpts) {
	    return validatorOrOpts != null && !Array.isArray(validatorOrOpts) &&
	        typeof validatorOrOpts === 'object';
	}
	/**
	 * This is the base class for `FormControl`, `FormGroup`, and `FormArray`.
	 *
	 * It provides some of the shared behavior that all controls and groups of controls have, like
	 * running validators, calculating status, and resetting state. It also defines the properties
	 * that are shared between all sub-classes, like `value`, `valid`, and `dirty`. It shouldn't be
	 * instantiated directly.
	 *
	 * @see [Forms Guide](/guide/forms)
	 * @see [Reactive Forms Guide](/guide/reactive-forms)
	 * @see [Dynamic Forms Guide](/guide/dynamic-form)
	 *
	 * @publicApi
	 */
	var AbstractControl = /** @class */ (function () {
	    /**
	     * Initialize the AbstractControl instance.
	     *
	     * @param validator The function that determines the synchronous validity of this control.
	     * @param asyncValidator The function that determines the asynchronous validity of this
	     * control.
	     */
	    function AbstractControl(validator, asyncValidator) {
	        this.validator = validator;
	        this.asyncValidator = asyncValidator;
	        /** @internal */
	        this._onCollectionChange = function () { };
	        /**
	         * A control is `pristine` if the user has not yet changed
	         * the value in the UI.
	         *
	         * @returns True if the user has not yet changed the value in the UI; compare `dirty`.
	         * Programmatic changes to a control's value do not mark it dirty.
	         */
	        this.pristine = true;
	        /**
	         * True if the control is marked as `touched`.
	         *
	         * A control is marked `touched` once the user has triggered
	         * a `blur` event on it.
	         */
	        this.touched = false;
	        /** @internal */
	        this._onDisabledChange = [];
	    }
	    Object.defineProperty(AbstractControl.prototype, "parent", {
	        /**
	         * The parent control.
	         */
	        get: function () {
	            return this._parent;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(AbstractControl.prototype, "valid", {
	        /**
	         * A control is `valid` when its `status` is `VALID`.
	         *
	         * @see {@link AbstractControl.status}
	         *
	         * @returns True if the control has passed all of its validation tests,
	         * false otherwise.
	         */
	        get: function () {
	            return this.status === VALID;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(AbstractControl.prototype, "invalid", {
	        /**
	         * A control is `invalid` when its `status` is `INVALID`.
	         *
	         * @see {@link AbstractControl.status}
	         *
	         * @returns True if this control has failed one or more of its validation checks,
	         * false otherwise.
	         */
	        get: function () {
	            return this.status === INVALID;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(AbstractControl.prototype, "pending", {
	        /**
	         * A control is `pending` when its `status` is `PENDING`.
	         *
	         * @see {@link AbstractControl.status}
	         *
	         * @returns True if this control is in the process of conducting a validation check,
	         * false otherwise.
	         */
	        get: function () {
	            return this.status == PENDING;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(AbstractControl.prototype, "disabled", {
	        /**
	         * A control is `disabled` when its `status` is `DISABLED`.
	         *
	         * Disabled controls are exempt from validation checks and
	         * are not included in the aggregate value of their ancestor
	         * controls.
	         *
	         * @see {@link AbstractControl.status}
	         *
	         * @returns True if the control is disabled, false otherwise.
	         */
	        get: function () {
	            return this.status === DISABLED;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(AbstractControl.prototype, "enabled", {
	        /**
	         * A control is `enabled` as long as its `status` is not `DISABLED`.
	         *
	         * @returns True if the control has any status other than 'DISABLED',
	         * false if the status is 'DISABLED'.
	         *
	         * @see {@link AbstractControl.status}
	         *
	         */
	        get: function () {
	            return this.status !== DISABLED;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(AbstractControl.prototype, "dirty", {
	        /**
	         * A control is `dirty` if the user has changed the value
	         * in the UI.
	         *
	         * @returns True if the user has changed the value of this control in the UI; compare `pristine`.
	         * Programmatic changes to a control's value do not mark it dirty.
	         */
	        get: function () {
	            return !this.pristine;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(AbstractControl.prototype, "untouched", {
	        /**
	         * True if the control has not been marked as touched
	         *
	         * A control is `untouched` if the user has not yet triggered
	         * a `blur` event on it.
	         */
	        get: function () {
	            return !this.touched;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(AbstractControl.prototype, "updateOn", {
	        /**
	         * Reports the update strategy of the `AbstractControl` (meaning
	         * the event on which the control updates itself).
	         * Possible values: `'change'` | `'blur'` | `'submit'`
	         * Default value: `'change'`
	         */
	        get: function () {
	            return this._updateOn ? this._updateOn : (this.parent ? this.parent.updateOn : 'change');
	        },
	        enumerable: true,
	        configurable: true
	    });
	    /**
	     * Sets the synchronous validators that are active on this control.  Calling
	     * this overwrites any existing sync validators.
	     *
	     * When you add or remove a validator at run time, you must call
	     * `updateValueAndValidity()` for the new validation to take effect.
	     *
	     */
	    AbstractControl.prototype.setValidators = function (newValidator) {
	        this.validator = coerceToValidator(newValidator);
	    };
	    /**
	     * Sets the async validators that are active on this control. Calling this
	     * overwrites any existing async validators.
	     *
	     * When you add or remove a validator at run time, you must call
	     * `updateValueAndValidity()` for the new validation to take effect.
	     *
	     */
	    AbstractControl.prototype.setAsyncValidators = function (newValidator) {
	        this.asyncValidator = coerceToAsyncValidator(newValidator);
	    };
	    /**
	     * Empties out the sync validator list.
	     *
	     * When you add or remove a validator at run time, you must call
	     * `updateValueAndValidity()` for the new validation to take effect.
	     *
	     */
	    AbstractControl.prototype.clearValidators = function () {
	        this.validator = null;
	    };
	    /**
	     * Empties out the async validator list.
	     *
	     * When you add or remove a validator at run time, you must call
	     * `updateValueAndValidity()` for the new validation to take effect.
	     *
	     */
	    AbstractControl.prototype.clearAsyncValidators = function () {
	        this.asyncValidator = null;
	    };
	    /**
	     * Marks the control as `touched`. A control is touched by focus and
	     * blur events that do not change the value.
	     *
	     * @see `markAsUntouched()`
	     * @see `markAsDirty()`
	     * @see `markAsPristine()`
	     *
	     * @param opts Configuration options that determine how the control propagates changes
	     * and emits events after marking is applied.
	     * * `onlySelf`: When true, mark only this control. When false or not supplied,
	     * marks all direct ancestors. Default is false.
	     */
	    AbstractControl.prototype.markAsTouched = function (opts) {
	        if (opts === void 0) { opts = {}; }
	        this.touched = true;
	        if (this._parent && !opts.onlySelf) {
	            this._parent.markAsTouched(opts);
	        }
	    };
	    /**
	     * Marks the control and all its descendant controls as `touched`.
	     * @see `markAsTouched()`
	     */
	    AbstractControl.prototype.markAllAsTouched = function () {
	        this.markAsTouched({ onlySelf: true });
	        this._forEachChild(function (control) { return control.markAllAsTouched(); });
	    };
	    /**
	     * Marks the control as `untouched`.
	     *
	     * If the control has any children, also marks all children as `untouched`
	     * and recalculates the `touched` status of all parent controls.
	     *
	     * @see `markAsTouched()`
	     * @see `markAsDirty()`
	     * @see `markAsPristine()`
	     *
	     * @param opts Configuration options that determine how the control propagates changes
	     * and emits events after the marking is applied.
	     * * `onlySelf`: When true, mark only this control. When false or not supplied,
	     * marks all direct ancestors. Default is false.
	     */
	    AbstractControl.prototype.markAsUntouched = function (opts) {
	        if (opts === void 0) { opts = {}; }
	        this.touched = false;
	        this._pendingTouched = false;
	        this._forEachChild(function (control) {
	            control.markAsUntouched({ onlySelf: true });
	        });
	        if (this._parent && !opts.onlySelf) {
	            this._parent._updateTouched(opts);
	        }
	    };
	    /**
	     * Marks the control as `dirty`. A control becomes dirty when
	     * the control's value is changed through the UI; compare `markAsTouched`.
	     *
	     * @see `markAsTouched()`
	     * @see `markAsUntouched()`
	     * @see `markAsPristine()`
	     *
	     * @param opts Configuration options that determine how the control propagates changes
	     * and emits events after marking is applied.
	     * * `onlySelf`: When true, mark only this control. When false or not supplied,
	     * marks all direct ancestors. Default is false.
	     */
	    AbstractControl.prototype.markAsDirty = function (opts) {
	        if (opts === void 0) { opts = {}; }
	        this.pristine = false;
	        if (this._parent && !opts.onlySelf) {
	            this._parent.markAsDirty(opts);
	        }
	    };
	    /**
	     * Marks the control as `pristine`.
	     *
	     * If the control has any children, marks all children as `pristine`,
	     * and recalculates the `pristine` status of all parent
	     * controls.
	     *
	     * @see `markAsTouched()`
	     * @see `markAsUntouched()`
	     * @see `markAsDirty()`
	     *
	     * @param opts Configuration options that determine how the control emits events after
	     * marking is applied.
	     * * `onlySelf`: When true, mark only this control. When false or not supplied,
	     * marks all direct ancestors. Default is false.
	     */
	    AbstractControl.prototype.markAsPristine = function (opts) {
	        if (opts === void 0) { opts = {}; }
	        this.pristine = true;
	        this._pendingDirty = false;
	        this._forEachChild(function (control) {
	            control.markAsPristine({ onlySelf: true });
	        });
	        if (this._parent && !opts.onlySelf) {
	            this._parent._updatePristine(opts);
	        }
	    };
	    /**
	     * Marks the control as `pending`.
	     *
	     * A control is pending while the control performs async validation.
	     *
	     * @see {@link AbstractControl.status}
	     *
	     * @param opts Configuration options that determine how the control propagates changes and
	     * emits events after marking is applied.
	     * * `onlySelf`: When true, mark only this control. When false or not supplied,
	     * marks all direct ancestors. Default is false.
	     * * `emitEvent`: When true or not supplied (the default), the `statusChanges`
	     * observable emits an event with the latest status the control is marked pending.
	     * When false, no events are emitted.
	     *
	     */
	    AbstractControl.prototype.markAsPending = function (opts) {
	        if (opts === void 0) { opts = {}; }
	        this.status = PENDING;
	        if (opts.emitEvent !== false) {
	            this.statusChanges.emit(this.status);
	        }
	        if (this._parent && !opts.onlySelf) {
	            this._parent.markAsPending(opts);
	        }
	    };
	    /**
	     * Disables the control. This means the control is exempt from validation checks and
	     * excluded from the aggregate value of any parent. Its status is `DISABLED`.
	     *
	     * If the control has children, all children are also disabled.
	     *
	     * @see {@link AbstractControl.status}
	     *
	     * @param opts Configuration options that determine how the control propagates
	     * changes and emits events after the control is disabled.
	     * * `onlySelf`: When true, mark only this control. When false or not supplied,
	     * marks all direct ancestors. Default is false.
	     * * `emitEvent`: When true or not supplied (the default), both the `statusChanges` and
	     * `valueChanges`
	     * observables emit events with the latest status and value when the control is disabled.
	     * When false, no events are emitted.
	     */
	    AbstractControl.prototype.disable = function (opts) {
	        if (opts === void 0) { opts = {}; }
	        // If parent has been marked artificially dirty we don't want to re-calculate the
	        // parent's dirtiness based on the children.
	        var skipPristineCheck = this._parentMarkedDirty(opts.onlySelf);
	        this.status = DISABLED;
	        this.errors = null;
	        this._forEachChild(function (control) {
	            control.disable(__assign(__assign({}, opts), { onlySelf: true }));
	        });
	        this._updateValue();
	        if (opts.emitEvent !== false) {
	            this.valueChanges.emit(this.value);
	            this.statusChanges.emit(this.status);
	        }
	        this._updateAncestors(__assign(__assign({}, opts), { skipPristineCheck: skipPristineCheck }));
	        this._onDisabledChange.forEach(function (changeFn) { return changeFn(true); });
	    };
	    /**
	     * Enables the control. This means the control is included in validation checks and
	     * the aggregate value of its parent. Its status recalculates based on its value and
	     * its validators.
	     *
	     * By default, if the control has children, all children are enabled.
	     *
	     * @see {@link AbstractControl.status}
	     *
	     * @param opts Configure options that control how the control propagates changes and
	     * emits events when marked as untouched
	     * * `onlySelf`: When true, mark only this control. When false or not supplied,
	     * marks all direct ancestors. Default is false.
	     * * `emitEvent`: When true or not supplied (the default), both the `statusChanges` and
	     * `valueChanges`
	     * observables emit events with the latest status and value when the control is enabled.
	     * When false, no events are emitted.
	     */
	    AbstractControl.prototype.enable = function (opts) {
	        if (opts === void 0) { opts = {}; }
	        // If parent has been marked artificially dirty we don't want to re-calculate the
	        // parent's dirtiness based on the children.
	        var skipPristineCheck = this._parentMarkedDirty(opts.onlySelf);
	        this.status = VALID;
	        this._forEachChild(function (control) {
	            control.enable(__assign(__assign({}, opts), { onlySelf: true }));
	        });
	        this.updateValueAndValidity({ onlySelf: true, emitEvent: opts.emitEvent });
	        this._updateAncestors(__assign(__assign({}, opts), { skipPristineCheck: skipPristineCheck }));
	        this._onDisabledChange.forEach(function (changeFn) { return changeFn(false); });
	    };
	    AbstractControl.prototype._updateAncestors = function (opts) {
	        if (this._parent && !opts.onlySelf) {
	            this._parent.updateValueAndValidity(opts);
	            if (!opts.skipPristineCheck) {
	                this._parent._updatePristine();
	            }
	            this._parent._updateTouched();
	        }
	    };
	    /**
	     * @param parent Sets the parent of the control
	     */
	    AbstractControl.prototype.setParent = function (parent) {
	        this._parent = parent;
	    };
	    /**
	     * Recalculates the value and validation status of the control.
	     *
	     * By default, it also updates the value and validity of its ancestors.
	     *
	     * @param opts Configuration options determine how the control propagates changes and emits events
	     * after updates and validity checks are applied.
	     * * `onlySelf`: When true, only update this control. When false or not supplied,
	     * update all direct ancestors. Default is false.
	     * * `emitEvent`: When true or not supplied (the default), both the `statusChanges` and
	     * `valueChanges`
	     * observables emit events with the latest status and value when the control is updated.
	     * When false, no events are emitted.
	     */
	    AbstractControl.prototype.updateValueAndValidity = function (opts) {
	        if (opts === void 0) { opts = {}; }
	        this._setInitialStatus();
	        this._updateValue();
	        if (this.enabled) {
	            this._cancelExistingSubscription();
	            this.errors = this._runValidator();
	            this.status = this._calculateStatus();
	            if (this.status === VALID || this.status === PENDING) {
	                this._runAsyncValidator(opts.emitEvent);
	            }
	        }
	        if (opts.emitEvent !== false) {
	            this.valueChanges.emit(this.value);
	            this.statusChanges.emit(this.status);
	        }
	        if (this._parent && !opts.onlySelf) {
	            this._parent.updateValueAndValidity(opts);
	        }
	    };
	    /** @internal */
	    AbstractControl.prototype._updateTreeValidity = function (opts) {
	        if (opts === void 0) { opts = { emitEvent: true }; }
	        this._forEachChild(function (ctrl) { return ctrl._updateTreeValidity(opts); });
	        this.updateValueAndValidity({ onlySelf: true, emitEvent: opts.emitEvent });
	    };
	    AbstractControl.prototype._setInitialStatus = function () {
	        this.status = this._allControlsDisabled() ? DISABLED : VALID;
	    };
	    AbstractControl.prototype._runValidator = function () {
	        return this.validator ? this.validator(this) : null;
	    };
	    AbstractControl.prototype._runAsyncValidator = function (emitEvent) {
	        var _this = this;
	        if (this.asyncValidator) {
	            this.status = PENDING;
	            var obs = toObservable(this.asyncValidator(this));
	            this._asyncValidationSubscription =
	                obs.subscribe(function (errors) { return _this.setErrors(errors, { emitEvent: emitEvent }); });
	        }
	    };
	    AbstractControl.prototype._cancelExistingSubscription = function () {
	        if (this._asyncValidationSubscription) {
	            this._asyncValidationSubscription.unsubscribe();
	        }
	    };
	    /**
	     * Sets errors on a form control when running validations manually, rather than automatically.
	     *
	     * Calling `setErrors` also updates the validity of the parent control.
	     *
	     * @usageNotes
	     *
	     * ### Manually set the errors for a control
	     *
	     * ```
	     * const login = new FormControl('someLogin');
	     * login.setErrors({
	     *   notUnique: true
	     * });
	     *
	     * expect(login.valid).toEqual(false);
	     * expect(login.errors).toEqual({ notUnique: true });
	     *
	     * login.setValue('someOtherLogin');
	     *
	     * expect(login.valid).toEqual(true);
	     * ```
	     */
	    AbstractControl.prototype.setErrors = function (errors, opts) {
	        if (opts === void 0) { opts = {}; }
	        this.errors = errors;
	        this._updateControlsErrors(opts.emitEvent !== false);
	    };
	    /**
	     * Retrieves a child control given the control's name or path.
	     *
	     * @param path A dot-delimited string or array of string/number values that define the path to the
	     * control.
	     *
	     * @usageNotes
	     * ### Retrieve a nested control
	     *
	     * For example, to get a `name` control nested within a `person` sub-group:
	     *
	     * * `this.form.get('person.name');`
	     *
	     * -OR-
	     *
	     * * `this.form.get(['person', 'name']);`
	     */
	    AbstractControl.prototype.get = function (path) {
	        return _find(this, path, '.');
	    };
	    /**
	     * @description
	     * Reports error data for the control with the given path.
	     *
	     * @param errorCode The code of the error to check
	     * @param path A list of control names that designates how to move from the current control
	     * to the control that should be queried for errors.
	     *
	     * @usageNotes
	     * For example, for the following `FormGroup`:
	     *
	     * ```
	     * form = new FormGroup({
	     *   address: new FormGroup({ street: new FormControl() })
	     * });
	     * ```
	     *
	     * The path to the 'street' control from the root form would be 'address' -> 'street'.
	     *
	     * It can be provided to this method in one of two formats:
	     *
	     * 1. An array of string control names, e.g. `['address', 'street']`
	     * 1. A period-delimited list of control names in one string, e.g. `'address.street'`
	     *
	     * @returns error data for that particular error. If the control or error is not present,
	     * null is returned.
	     */
	    AbstractControl.prototype.getError = function (errorCode, path) {
	        var control = path ? this.get(path) : this;
	        return control && control.errors ? control.errors[errorCode] : null;
	    };
	    /**
	     * @description
	     * Reports whether the control with the given path has the error specified.
	     *
	     * @param errorCode The code of the error to check
	     * @param path A list of control names that designates how to move from the current control
	     * to the control that should be queried for errors.
	     *
	     * @usageNotes
	     * For example, for the following `FormGroup`:
	     *
	     * ```
	     * form = new FormGroup({
	     *   address: new FormGroup({ street: new FormControl() })
	     * });
	     * ```
	     *
	     * The path to the 'street' control from the root form would be 'address' -> 'street'.
	     *
	     * It can be provided to this method in one of two formats:
	     *
	     * 1. An array of string control names, e.g. `['address', 'street']`
	     * 1. A period-delimited list of control names in one string, e.g. `'address.street'`
	     *
	     * If no path is given, this method checks for the error on the current control.
	     *
	     * @returns whether the given error is present in the control at the given path.
	     *
	     * If the control is not present, false is returned.
	     */
	    AbstractControl.prototype.hasError = function (errorCode, path) {
	        return !!this.getError(errorCode, path);
	    };
	    Object.defineProperty(AbstractControl.prototype, "root", {
	        /**
	         * Retrieves the top-level ancestor of this control.
	         */
	        get: function () {
	            var x = this;
	            while (x._parent) {
	                x = x._parent;
	            }
	            return x;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    /** @internal */
	    AbstractControl.prototype._updateControlsErrors = function (emitEvent) {
	        this.status = this._calculateStatus();
	        if (emitEvent) {
	            this.statusChanges.emit(this.status);
	        }
	        if (this._parent) {
	            this._parent._updateControlsErrors(emitEvent);
	        }
	    };
	    /** @internal */
	    AbstractControl.prototype._initObservables = function () {
	        this.valueChanges = new EventEmitter();
	        this.statusChanges = new EventEmitter();
	    };
	    AbstractControl.prototype._calculateStatus = function () {
	        if (this._allControlsDisabled())
	            return DISABLED;
	        if (this.errors)
	            return INVALID;
	        if (this._anyControlsHaveStatus(PENDING))
	            return PENDING;
	        if (this._anyControlsHaveStatus(INVALID))
	            return INVALID;
	        return VALID;
	    };
	    /** @internal */
	    AbstractControl.prototype._anyControlsHaveStatus = function (status) {
	        return this._anyControls(function (control) { return control.status === status; });
	    };
	    /** @internal */
	    AbstractControl.prototype._anyControlsDirty = function () {
	        return this._anyControls(function (control) { return control.dirty; });
	    };
	    /** @internal */
	    AbstractControl.prototype._anyControlsTouched = function () {
	        return this._anyControls(function (control) { return control.touched; });
	    };
	    /** @internal */
	    AbstractControl.prototype._updatePristine = function (opts) {
	        if (opts === void 0) { opts = {}; }
	        this.pristine = !this._anyControlsDirty();
	        if (this._parent && !opts.onlySelf) {
	            this._parent._updatePristine(opts);
	        }
	    };
	    /** @internal */
	    AbstractControl.prototype._updateTouched = function (opts) {
	        if (opts === void 0) { opts = {}; }
	        this.touched = this._anyControlsTouched();
	        if (this._parent && !opts.onlySelf) {
	            this._parent._updateTouched(opts);
	        }
	    };
	    /** @internal */
	    AbstractControl.prototype._isBoxedValue = function (formState) {
	        return typeof formState === 'object' && formState !== null &&
	            Object.keys(formState).length === 2 && 'value' in formState && 'disabled' in formState;
	    };
	    /** @internal */
	    AbstractControl.prototype._registerOnCollectionChange = function (fn) {
	        this._onCollectionChange = fn;
	    };
	    /** @internal */
	    AbstractControl.prototype._setUpdateStrategy = function (opts) {
	        if (isOptionsObj(opts) && opts.updateOn != null) {
	            this._updateOn = opts.updateOn;
	        }
	    };
	    /**
	     * Check to see if parent has been marked artificially dirty.
	     *
	     * @internal
	     */
	    AbstractControl.prototype._parentMarkedDirty = function (onlySelf) {
	        var parentDirty = this._parent && this._parent.dirty;
	        return !onlySelf && parentDirty && !this._parent._anyControlsDirty();
	    };
	    return AbstractControl;
	}());
	/**
	 * Tracks the value and validation status of an individual form control.
	 *
	 * This is one of the three fundamental building blocks of Angular forms, along with
	 * `FormGroup` and `FormArray`. It extends the `AbstractControl` class that
	 * implements most of the base functionality for accessing the value, validation status,
	 * user interactions and events. See [usage examples below](#usage-notes).
	 *
	 * @see `AbstractControl`
	 * @see [Reactive Forms Guide](guide/reactive-forms)
	 * @see [Usage Notes](#usage-notes)
	 *
	 * @usageNotes
	 *
	 * ### Initializing Form Controls
	 *
	 * Instantiate a `FormControl`, with an initial value.
	 *
	 * ```ts
	 * const control = new FormControl('some value');
	 * console.log(control.value);     // 'some value'
	 *```
	 *
	 * The following example initializes the control with a form state object. The `value`
	 * and `disabled` keys are required in this case.
	 *
	 * ```ts
	 * const control = new FormControl({ value: 'n/a', disabled: true });
	 * console.log(control.value);     // 'n/a'
	 * console.log(control.status);    // 'DISABLED'
	 * ```
	 *
	 * The following example initializes the control with a sync validator.
	 *
	 * ```ts
	 * const control = new FormControl('', Validators.required);
	 * console.log(control.value);      // ''
	 * console.log(control.status);     // 'INVALID'
	 * ```
	 *
	 * The following example initializes the control using an options object.
	 *
	 * ```ts
	 * const control = new FormControl('', {
	 *    validators: Validators.required,
	 *    asyncValidators: myAsyncValidator
	 * });
	 * ```
	 *
	 * ### Configure the control to update on a blur event
	 *
	 * Set the `updateOn` option to `'blur'` to update on the blur `event`.
	 *
	 * ```ts
	 * const control = new FormControl('', { updateOn: 'blur' });
	 * ```
	 *
	 * ### Configure the control to update on a submit event
	 *
	 * Set the `updateOn` option to `'submit'` to update on a submit `event`.
	 *
	 * ```ts
	 * const control = new FormControl('', { updateOn: 'submit' });
	 * ```
	 *
	 * ### Reset the control back to an initial value
	 *
	 * You reset to a specific form state by passing through a standalone
	 * value or a form state object that contains both a value and a disabled state
	 * (these are the only two properties that cannot be calculated).
	 *
	 * ```ts
	 * const control = new FormControl('Nancy');
	 *
	 * console.log(control.value); // 'Nancy'
	 *
	 * control.reset('Drew');
	 *
	 * console.log(control.value); // 'Drew'
	 * ```
	 *
	 * ### Reset the control back to an initial value and disabled
	 *
	 * ```
	 * const control = new FormControl('Nancy');
	 *
	 * console.log(control.value); // 'Nancy'
	 * console.log(control.status); // 'VALID'
	 *
	 * control.reset({ value: 'Drew', disabled: true });
	 *
	 * console.log(control.value); // 'Drew'
	 * console.log(control.status); // 'DISABLED'
	 * ```
	 *
	 * @publicApi
	 */
	var FormControl = /** @class */ (function (_super) {
	    __extends(FormControl, _super);
	    /**
	     * Creates a new `FormControl` instance.
	     *
	     * @param formState Initializes the control with an initial value,
	     * or an object that defines the initial value and disabled state.
	     *
	     * @param validatorOrOpts A synchronous validator function, or an array of
	     * such functions, or an `AbstractControlOptions` object that contains validation functions
	     * and a validation trigger.
	     *
	     * @param asyncValidator A single async validator or array of async validator functions
	     *
	     */
	    function FormControl(formState, validatorOrOpts, asyncValidator) {
	        if (formState === void 0) { formState = null; }
	        var _this = _super.call(this, coerceToValidator(validatorOrOpts), coerceToAsyncValidator(asyncValidator, validatorOrOpts)) || this;
	        /** @internal */
	        _this._onChange = [];
	        _this._applyFormState(formState);
	        _this._setUpdateStrategy(validatorOrOpts);
	        _this.updateValueAndValidity({ onlySelf: true, emitEvent: false });
	        _this._initObservables();
	        return _this;
	    }
	    /**
	     * Sets a new value for the form control.
	     *
	     * @param value The new value for the control.
	     * @param options Configuration options that determine how the control propagates changes
	     * and emits events when the value changes.
	     * The configuration options are passed to the {@link AbstractControl#updateValueAndValidity
	     * updateValueAndValidity} method.
	     *
	     * * `onlySelf`: When true, each change only affects this control, and not its parent. Default is
	     * false.
	     * * `emitEvent`: When true or not supplied (the default), both the `statusChanges` and
	     * `valueChanges`
	     * observables emit events with the latest status and value when the control value is updated.
	     * When false, no events are emitted.
	     * * `emitModelToViewChange`: When true or not supplied  (the default), each change triggers an
	     * `onChange` event to
	     * update the view.
	     * * `emitViewToModelChange`: When true or not supplied (the default), each change triggers an
	     * `ngModelChange`
	     * event to update the model.
	     *
	     */
	    FormControl.prototype.setValue = function (value, options) {
	        var _this = this;
	        if (options === void 0) { options = {}; }
	        this.value = this._pendingValue = value;
	        if (this._onChange.length && options.emitModelToViewChange !== false) {
	            this._onChange.forEach(function (changeFn) { return changeFn(_this.value, options.emitViewToModelChange !== false); });
	        }
	        this.updateValueAndValidity(options);
	    };
	    /**
	     * Patches the value of a control.
	     *
	     * This function is functionally the same as {@link FormControl#setValue setValue} at this level.
	     * It exists for symmetry with {@link FormGroup#patchValue patchValue} on `FormGroups` and
	     * `FormArrays`, where it does behave differently.
	     *
	     * @see `setValue` for options
	     */
	    FormControl.prototype.patchValue = function (value, options) {
	        if (options === void 0) { options = {}; }
	        this.setValue(value, options);
	    };
	    /**
	     * Resets the form control, marking it `pristine` and `untouched`, and setting
	     * the value to null.
	     *
	     * @param formState Resets the control with an initial value,
	     * or an object that defines the initial value and disabled state.
	     *
	     * @param options Configuration options that determine how the control propagates changes
	     * and emits events after the value changes.
	     *
	     * * `onlySelf`: When true, each change only affects this control, and not its parent. Default is
	     * false.
	     * * `emitEvent`: When true or not supplied (the default), both the `statusChanges` and
	     * `valueChanges`
	     * observables emit events with the latest status and value when the control is reset.
	     * When false, no events are emitted.
	     *
	     */
	    FormControl.prototype.reset = function (formState, options) {
	        if (formState === void 0) { formState = null; }
	        if (options === void 0) { options = {}; }
	        this._applyFormState(formState);
	        this.markAsPristine(options);
	        this.markAsUntouched(options);
	        this.setValue(this.value, options);
	        this._pendingChange = false;
	    };
	    /**
	     * @internal
	     */
	    FormControl.prototype._updateValue = function () { };
	    /**
	     * @internal
	     */
	    FormControl.prototype._anyControls = function (condition) {
	        return false;
	    };
	    /**
	     * @internal
	     */
	    FormControl.prototype._allControlsDisabled = function () {
	        return this.disabled;
	    };
	    /**
	     * Register a listener for change events.
	     *
	     * @param fn The method that is called when the value changes
	     */
	    FormControl.prototype.registerOnChange = function (fn) {
	        this._onChange.push(fn);
	    };
	    /**
	     * @internal
	     */
	    FormControl.prototype._clearChangeFns = function () {
	        this._onChange = [];
	        this._onDisabledChange = [];
	        this._onCollectionChange = function () { };
	    };
	    /**
	     * Register a listener for disabled events.
	     *
	     * @param fn The method that is called when the disabled status changes.
	     */
	    FormControl.prototype.registerOnDisabledChange = function (fn) {
	        this._onDisabledChange.push(fn);
	    };
	    /**
	     * @internal
	     */
	    FormControl.prototype._forEachChild = function (cb) { };
	    /** @internal */
	    FormControl.prototype._syncPendingControls = function () {
	        if (this.updateOn === 'submit') {
	            if (this._pendingDirty)
	                this.markAsDirty();
	            if (this._pendingTouched)
	                this.markAsTouched();
	            if (this._pendingChange) {
	                this.setValue(this._pendingValue, { onlySelf: true, emitModelToViewChange: false });
	                return true;
	            }
	        }
	        return false;
	    };
	    FormControl.prototype._applyFormState = function (formState) {
	        if (this._isBoxedValue(formState)) {
	            this.value = this._pendingValue = formState.value;
	            formState.disabled ? this.disable({ onlySelf: true, emitEvent: false }) :
	                this.enable({ onlySelf: true, emitEvent: false });
	        }
	        else {
	            this.value = this._pendingValue = formState;
	        }
	    };
	    return FormControl;
	}(AbstractControl));
	/**
	 * Tracks the value and validity state of a group of `FormControl` instances.
	 *
	 * A `FormGroup` aggregates the values of each child `FormControl` into one object,
	 * with each control name as the key.  It calculates its status by reducing the status values
	 * of its children. For example, if one of the controls in a group is invalid, the entire
	 * group becomes invalid.
	 *
	 * `FormGroup` is one of the three fundamental building blocks used to define forms in Angular,
	 * along with `FormControl` and `FormArray`.
	 *
	 * When instantiating a `FormGroup`, pass in a collection of child controls as the first
	 * argument. The key for each child registers the name for the control.
	 *
	 * @usageNotes
	 *
	 * ### Create a form group with 2 controls
	 *
	 * ```
	 * const form = new FormGroup({
	 *   first: new FormControl('Nancy', Validators.minLength(2)),
	 *   last: new FormControl('Drew'),
	 * });
	 *
	 * console.log(form.value);   // {first: 'Nancy', last; 'Drew'}
	 * console.log(form.status);  // 'VALID'
	 * ```
	 *
	 * ### Create a form group with a group-level validator
	 *
	 * You include group-level validators as the second arg, or group-level async
	 * validators as the third arg. These come in handy when you want to perform validation
	 * that considers the value of more than one child control.
	 *
	 * ```
	 * const form = new FormGroup({
	 *   password: new FormControl('', Validators.minLength(2)),
	 *   passwordConfirm: new FormControl('', Validators.minLength(2)),
	 * }, passwordMatchValidator);
	 *
	 *
	 * function passwordMatchValidator(g: FormGroup) {
	 *    return g.get('password').value === g.get('passwordConfirm').value
	 *       ? null : {'mismatch': true};
	 * }
	 * ```
	 *
	 * Like `FormControl` instances, you choose to pass in
	 * validators and async validators as part of an options object.
	 *
	 * ```
	 * const form = new FormGroup({
	 *   password: new FormControl('')
	 *   passwordConfirm: new FormControl('')
	 * }, { validators: passwordMatchValidator, asyncValidators: otherValidator });
	 * ```
	 *
	 * ### Set the updateOn property for all controls in a form group
	 *
	 * The options object is used to set a default value for each child
	 * control's `updateOn` property. If you set `updateOn` to `'blur'` at the
	 * group level, all child controls default to 'blur', unless the child
	 * has explicitly specified a different `updateOn` value.
	 *
	 * ```ts
	 * const c = new FormGroup({
	 *   one: new FormControl()
	 * }, { updateOn: 'blur' });
	 * ```
	 *
	 * @publicApi
	 */
	var FormGroup = /** @class */ (function (_super) {
	    __extends(FormGroup, _super);
	    /**
	     * Creates a new `FormGroup` instance.
	     *
	     * @param controls A collection of child controls. The key for each child is the name
	     * under which it is registered.
	     *
	     * @param validatorOrOpts A synchronous validator function, or an array of
	     * such functions, or an `AbstractControlOptions` object that contains validation functions
	     * and a validation trigger.
	     *
	     * @param asyncValidator A single async validator or array of async validator functions
	     *
	     */
	    function FormGroup(controls, validatorOrOpts, asyncValidator) {
	        var _this = _super.call(this, coerceToValidator(validatorOrOpts), coerceToAsyncValidator(asyncValidator, validatorOrOpts)) || this;
	        _this.controls = controls;
	        _this._initObservables();
	        _this._setUpdateStrategy(validatorOrOpts);
	        _this._setUpControls();
	        _this.updateValueAndValidity({ onlySelf: true, emitEvent: false });
	        return _this;
	    }
	    /**
	     * Registers a control with the group's list of controls.
	     *
	     * This method does not update the value or validity of the control.
	     * Use {@link FormGroup#addControl addControl} instead.
	     *
	     * @param name The control name to register in the collection
	     * @param control Provides the control for the given name
	     */
	    FormGroup.prototype.registerControl = function (name, control) {
	        if (this.controls[name])
	            return this.controls[name];
	        this.controls[name] = control;
	        control.setParent(this);
	        control._registerOnCollectionChange(this._onCollectionChange);
	        return control;
	    };
	    /**
	     * Add a control to this group.
	     *
	     * This method also updates the value and validity of the control.
	     *
	     * @param name The control name to add to the collection
	     * @param control Provides the control for the given name
	     */
	    FormGroup.prototype.addControl = function (name, control) {
	        this.registerControl(name, control);
	        this.updateValueAndValidity();
	        this._onCollectionChange();
	    };
	    /**
	     * Remove a control from this group.
	     *
	     * @param name The control name to remove from the collection
	     */
	    FormGroup.prototype.removeControl = function (name) {
	        if (this.controls[name])
	            this.controls[name]._registerOnCollectionChange(function () { });
	        delete (this.controls[name]);
	        this.updateValueAndValidity();
	        this._onCollectionChange();
	    };
	    /**
	     * Replace an existing control.
	     *
	     * @param name The control name to replace in the collection
	     * @param control Provides the control for the given name
	     */
	    FormGroup.prototype.setControl = function (name, control) {
	        if (this.controls[name])
	            this.controls[name]._registerOnCollectionChange(function () { });
	        delete (this.controls[name]);
	        if (control)
	            this.registerControl(name, control);
	        this.updateValueAndValidity();
	        this._onCollectionChange();
	    };
	    /**
	     * Check whether there is an enabled control with the given name in the group.
	     *
	     * Reports false for disabled controls. If you'd like to check for existence in the group
	     * only, use {@link AbstractControl#get get} instead.
	     *
	     * @param controlName The control name to check for existence in the collection
	     *
	     * @returns false for disabled controls, true otherwise.
	     */
	    FormGroup.prototype.contains = function (controlName) {
	        return this.controls.hasOwnProperty(controlName) && this.controls[controlName].enabled;
	    };
	    /**
	     * Sets the value of the `FormGroup`. It accepts an object that matches
	     * the structure of the group, with control names as keys.
	     *
	     * @usageNotes
	     * ### Set the complete value for the form group
	     *
	     * ```
	     * const form = new FormGroup({
	     *   first: new FormControl(),
	     *   last: new FormControl()
	     * });
	     *
	     * console.log(form.value);   // {first: null, last: null}
	     *
	     * form.setValue({first: 'Nancy', last: 'Drew'});
	     * console.log(form.value);   // {first: 'Nancy', last: 'Drew'}
	     * ```
	     *
	     * @throws When strict checks fail, such as setting the value of a control
	     * that doesn't exist or if you exclude a value of a control that does exist.
	     *
	     * @param value The new value for the control that matches the structure of the group.
	     * @param options Configuration options that determine how the control propagates changes
	     * and emits events after the value changes.
	     * The configuration options are passed to the {@link AbstractControl#updateValueAndValidity
	     * updateValueAndValidity} method.
	     *
	     * * `onlySelf`: When true, each change only affects this control, and not its parent. Default is
	     * false.
	     * * `emitEvent`: When true or not supplied (the default), both the `statusChanges` and
	     * `valueChanges`
	     * observables emit events with the latest status and value when the control value is updated.
	     * When false, no events are emitted.
	     */
	    FormGroup.prototype.setValue = function (value, options) {
	        var _this = this;
	        if (options === void 0) { options = {}; }
	        this._checkAllValuesPresent(value);
	        Object.keys(value).forEach(function (name) {
	            _this._throwIfControlMissing(name);
	            _this.controls[name].setValue(value[name], { onlySelf: true, emitEvent: options.emitEvent });
	        });
	        this.updateValueAndValidity(options);
	    };
	    /**
	     * Patches the value of the `FormGroup`. It accepts an object with control
	     * names as keys, and does its best to match the values to the correct controls
	     * in the group.
	     *
	     * It accepts both super-sets and sub-sets of the group without throwing an error.
	     *
	     * @usageNotes
	     * ### Patch the value for a form group
	     *
	     * ```
	     * const form = new FormGroup({
	     *    first: new FormControl(),
	     *    last: new FormControl()
	     * });
	     * console.log(form.value);   // {first: null, last: null}
	     *
	     * form.patchValue({first: 'Nancy'});
	     * console.log(form.value);   // {first: 'Nancy', last: null}
	     * ```
	     *
	     * @param value The object that matches the structure of the group.
	     * @param options Configuration options that determine how the control propagates changes and
	     * emits events after the value is patched.
	     * * `onlySelf`: When true, each change only affects this control and not its parent. Default is
	     * true.
	     * * `emitEvent`: When true or not supplied (the default), both the `statusChanges` and
	     * `valueChanges`
	     * observables emit events with the latest status and value when the control value is updated.
	     * When false, no events are emitted.
	     * The configuration options are passed to the {@link AbstractControl#updateValueAndValidity
	     * updateValueAndValidity} method.
	     */
	    FormGroup.prototype.patchValue = function (value, options) {
	        var _this = this;
	        if (options === void 0) { options = {}; }
	        Object.keys(value).forEach(function (name) {
	            if (_this.controls[name]) {
	                _this.controls[name].patchValue(value[name], { onlySelf: true, emitEvent: options.emitEvent });
	            }
	        });
	        this.updateValueAndValidity(options);
	    };
	    /**
	     * Resets the `FormGroup`, marks all descendants are marked `pristine` and `untouched`, and
	     * the value of all descendants to null.
	     *
	     * You reset to a specific form state by passing in a map of states
	     * that matches the structure of your form, with control names as keys. The state
	     * is a standalone value or a form state object with both a value and a disabled
	     * status.
	     *
	     * @param value Resets the control with an initial value,
	     * or an object that defines the initial value and disabled state.
	     *
	     * @param options Configuration options that determine how the control propagates changes
	     * and emits events when the group is reset.
	     * * `onlySelf`: When true, each change only affects this control, and not its parent. Default is
	     * false.
	     * * `emitEvent`: When true or not supplied (the default), both the `statusChanges` and
	     * `valueChanges`
	     * observables emit events with the latest status and value when the control is reset.
	     * When false, no events are emitted.
	     * The configuration options are passed to the {@link AbstractControl#updateValueAndValidity
	     * updateValueAndValidity} method.
	     *
	     * @usageNotes
	     *
	     * ### Reset the form group values
	     *
	     * ```ts
	     * const form = new FormGroup({
	     *   first: new FormControl('first name'),
	     *   last: new FormControl('last name')
	     * });
	     *
	     * console.log(form.value);  // {first: 'first name', last: 'last name'}
	     *
	     * form.reset({ first: 'name', last: 'last name' });
	     *
	     * console.log(form.value);  // {first: 'name', last: 'last name'}
	     * ```
	     *
	     * ### Reset the form group values and disabled status
	     *
	     * ```
	     * const form = new FormGroup({
	     *   first: new FormControl('first name'),
	     *   last: new FormControl('last name')
	     * });
	     *
	     * form.reset({
	     *   first: {value: 'name', disabled: true},
	     *   last: 'last'
	     * });
	     *
	     * console.log(this.form.value);  // {first: 'name', last: 'last name'}
	     * console.log(this.form.get('first').status);  // 'DISABLED'
	     * ```
	     */
	    FormGroup.prototype.reset = function (value, options) {
	        if (value === void 0) { value = {}; }
	        if (options === void 0) { options = {}; }
	        this._forEachChild(function (control, name) {
	            control.reset(value[name], { onlySelf: true, emitEvent: options.emitEvent });
	        });
	        this._updatePristine(options);
	        this._updateTouched(options);
	        this.updateValueAndValidity(options);
	    };
	    /**
	     * The aggregate value of the `FormGroup`, including any disabled controls.
	     *
	     * Retrieves all values regardless of disabled status.
	     * The `value` property is the best way to get the value of the group, because
	     * it excludes disabled controls in the `FormGroup`.
	     */
	    FormGroup.prototype.getRawValue = function () {
	        return this._reduceChildren({}, function (acc, control, name) {
	            acc[name] = control instanceof FormControl ? control.value : control.getRawValue();
	            return acc;
	        });
	    };
	    /** @internal */
	    FormGroup.prototype._syncPendingControls = function () {
	        var subtreeUpdated = this._reduceChildren(false, function (updated, child) {
	            return child._syncPendingControls() ? true : updated;
	        });
	        if (subtreeUpdated)
	            this.updateValueAndValidity({ onlySelf: true });
	        return subtreeUpdated;
	    };
	    /** @internal */
	    FormGroup.prototype._throwIfControlMissing = function (name) {
	        if (!Object.keys(this.controls).length) {
	            throw new Error("\n        There are no form controls registered with this group yet.  If you're using ngModel,\n        you may want to check next tick (e.g. use setTimeout).\n      ");
	        }
	        if (!this.controls[name]) {
	            throw new Error("Cannot find form control with name: " + name + ".");
	        }
	    };
	    /** @internal */
	    FormGroup.prototype._forEachChild = function (cb) {
	        var _this = this;
	        Object.keys(this.controls).forEach(function (k) { return cb(_this.controls[k], k); });
	    };
	    /** @internal */
	    FormGroup.prototype._setUpControls = function () {
	        var _this = this;
	        this._forEachChild(function (control) {
	            control.setParent(_this);
	            control._registerOnCollectionChange(_this._onCollectionChange);
	        });
	    };
	    /** @internal */
	    FormGroup.prototype._updateValue = function () {
	        this.value = this._reduceValue();
	    };
	    /** @internal */
	    FormGroup.prototype._anyControls = function (condition) {
	        var _this = this;
	        var res = false;
	        this._forEachChild(function (control, name) {
	            res = res || (_this.contains(name) && condition(control));
	        });
	        return res;
	    };
	    /** @internal */
	    FormGroup.prototype._reduceValue = function () {
	        var _this = this;
	        return this._reduceChildren({}, function (acc, control, name) {
	            if (control.enabled || _this.disabled) {
	                acc[name] = control.value;
	            }
	            return acc;
	        });
	    };
	    /** @internal */
	    FormGroup.prototype._reduceChildren = function (initValue, fn) {
	        var res = initValue;
	        this._forEachChild(function (control, name) {
	            res = fn(res, control, name);
	        });
	        return res;
	    };
	    /** @internal */
	    FormGroup.prototype._allControlsDisabled = function () {
	        var e_1, _a;
	        try {
	            for (var _b = __values(Object.keys(this.controls)), _c = _b.next(); !_c.done; _c = _b.next()) {
	                var controlName = _c.value;
	                if (this.controls[controlName].enabled) {
	                    return false;
	                }
	            }
	        }
	        catch (e_1_1) { e_1 = { error: e_1_1 }; }
	        finally {
	            try {
	                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
	            }
	            finally { if (e_1) throw e_1.error; }
	        }
	        return Object.keys(this.controls).length > 0 || this.disabled;
	    };
	    /** @internal */
	    FormGroup.prototype._checkAllValuesPresent = function (value) {
	        this._forEachChild(function (control, name) {
	            if (value[name] === undefined) {
	                throw new Error("Must supply a value for form control with name: '" + name + "'.");
	            }
	        });
	    };
	    return FormGroup;
	}(AbstractControl));
	/**
	 * Tracks the value and validity state of an array of `FormControl`,
	 * `FormGroup` or `FormArray` instances.
	 *
	 * A `FormArray` aggregates the values of each child `FormControl` into an array.
	 * It calculates its status by reducing the status values of its children. For example, if one of
	 * the controls in a `FormArray` is invalid, the entire array becomes invalid.
	 *
	 * `FormArray` is one of the three fundamental building blocks used to define forms in Angular,
	 * along with `FormControl` and `FormGroup`.
	 *
	 * @usageNotes
	 *
	 * ### Create an array of form controls
	 *
	 * ```
	 * const arr = new FormArray([
	 *   new FormControl('Nancy', Validators.minLength(2)),
	 *   new FormControl('Drew'),
	 * ]);
	 *
	 * console.log(arr.value);   // ['Nancy', 'Drew']
	 * console.log(arr.status);  // 'VALID'
	 * ```
	 *
	 * ### Create a form array with array-level validators
	 *
	 * You include array-level validators and async validators. These come in handy
	 * when you want to perform validation that considers the value of more than one child
	 * control.
	 *
	 * The two types of validators are passed in separately as the second and third arg
	 * respectively, or together as part of an options object.
	 *
	 * ```
	 * const arr = new FormArray([
	 *   new FormControl('Nancy'),
	 *   new FormControl('Drew')
	 * ], {validators: myValidator, asyncValidators: myAsyncValidator});
	 * ```
	 *
	 * ### Set the updateOn property for all controls in a form array
	 *
	 * The options object is used to set a default value for each child
	 * control's `updateOn` property. If you set `updateOn` to `'blur'` at the
	 * array level, all child controls default to 'blur', unless the child
	 * has explicitly specified a different `updateOn` value.
	 *
	 * ```ts
	 * const arr = new FormArray([
	 *    new FormControl()
	 * ], {updateOn: 'blur'});
	 * ```
	 *
	 * ### Adding or removing controls from a form array
	 *
	 * To change the controls in the array, use the `push`, `insert`, `removeAt` or `clear` methods
	 * in `FormArray` itself. These methods ensure the controls are properly tracked in the
	 * form's hierarchy. Do not modify the array of `AbstractControl`s used to instantiate
	 * the `FormArray` directly, as that result in strange and unexpected behavior such
	 * as broken change detection.
	 *
	 * @publicApi
	 */
	var FormArray = /** @class */ (function (_super) {
	    __extends(FormArray, _super);
	    /**
	     * Creates a new `FormArray` instance.
	     *
	     * @param controls An array of child controls. Each child control is given an index
	     * where it is registered.
	     *
	     * @param validatorOrOpts A synchronous validator function, or an array of
	     * such functions, or an `AbstractControlOptions` object that contains validation functions
	     * and a validation trigger.
	     *
	     * @param asyncValidator A single async validator or array of async validator functions
	     *
	     */
	    function FormArray(controls, validatorOrOpts, asyncValidator) {
	        var _this = _super.call(this, coerceToValidator(validatorOrOpts), coerceToAsyncValidator(asyncValidator, validatorOrOpts)) || this;
	        _this.controls = controls;
	        _this._initObservables();
	        _this._setUpdateStrategy(validatorOrOpts);
	        _this._setUpControls();
	        _this.updateValueAndValidity({ onlySelf: true, emitEvent: false });
	        return _this;
	    }
	    /**
	     * Get the `AbstractControl` at the given `index` in the array.
	     *
	     * @param index Index in the array to retrieve the control
	     */
	    FormArray.prototype.at = function (index) {
	        return this.controls[index];
	    };
	    /**
	     * Insert a new `AbstractControl` at the end of the array.
	     *
	     * @param control Form control to be inserted
	     */
	    FormArray.prototype.push = function (control) {
	        this.controls.push(control);
	        this._registerControl(control);
	        this.updateValueAndValidity();
	        this._onCollectionChange();
	    };
	    /**
	     * Insert a new `AbstractControl` at the given `index` in the array.
	     *
	     * @param index Index in the array to insert the control
	     * @param control Form control to be inserted
	     */
	    FormArray.prototype.insert = function (index, control) {
	        this.controls.splice(index, 0, control);
	        this._registerControl(control);
	        this.updateValueAndValidity();
	    };
	    /**
	     * Remove the control at the given `index` in the array.
	     *
	     * @param index Index in the array to remove the control
	     */
	    FormArray.prototype.removeAt = function (index) {
	        if (this.controls[index])
	            this.controls[index]._registerOnCollectionChange(function () { });
	        this.controls.splice(index, 1);
	        this.updateValueAndValidity();
	    };
	    /**
	     * Replace an existing control.
	     *
	     * @param index Index in the array to replace the control
	     * @param control The `AbstractControl` control to replace the existing control
	     */
	    FormArray.prototype.setControl = function (index, control) {
	        if (this.controls[index])
	            this.controls[index]._registerOnCollectionChange(function () { });
	        this.controls.splice(index, 1);
	        if (control) {
	            this.controls.splice(index, 0, control);
	            this._registerControl(control);
	        }
	        this.updateValueAndValidity();
	        this._onCollectionChange();
	    };
	    Object.defineProperty(FormArray.prototype, "length", {
	        /**
	         * Length of the control array.
	         */
	        get: function () {
	            return this.controls.length;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    /**
	     * Sets the value of the `FormArray`. It accepts an array that matches
	     * the structure of the control.
	     *
	     * This method performs strict checks, and throws an error if you try
	     * to set the value of a control that doesn't exist or if you exclude the
	     * value of a control.
	     *
	     * @usageNotes
	     * ### Set the values for the controls in the form array
	     *
	     * ```
	     * const arr = new FormArray([
	     *   new FormControl(),
	     *   new FormControl()
	     * ]);
	     * console.log(arr.value);   // [null, null]
	     *
	     * arr.setValue(['Nancy', 'Drew']);
	     * console.log(arr.value);   // ['Nancy', 'Drew']
	     * ```
	     *
	     * @param value Array of values for the controls
	     * @param options Configure options that determine how the control propagates changes and
	     * emits events after the value changes
	     *
	     * * `onlySelf`: When true, each change only affects this control, and not its parent. Default
	     * is false.
	     * * `emitEvent`: When true or not supplied (the default), both the `statusChanges` and
	     * `valueChanges`
	     * observables emit events with the latest status and value when the control value is updated.
	     * When false, no events are emitted.
	     * The configuration options are passed to the {@link AbstractControl#updateValueAndValidity
	     * updateValueAndValidity} method.
	     */
	    FormArray.prototype.setValue = function (value, options) {
	        var _this = this;
	        if (options === void 0) { options = {}; }
	        this._checkAllValuesPresent(value);
	        value.forEach(function (newValue, index) {
	            _this._throwIfControlMissing(index);
	            _this.at(index).setValue(newValue, { onlySelf: true, emitEvent: options.emitEvent });
	        });
	        this.updateValueAndValidity(options);
	    };
	    /**
	     * Patches the value of the `FormArray`. It accepts an array that matches the
	     * structure of the control, and does its best to match the values to the correct
	     * controls in the group.
	     *
	     * It accepts both super-sets and sub-sets of the array without throwing an error.
	     *
	     * @usageNotes
	     * ### Patch the values for controls in a form array
	     *
	     * ```
	     * const arr = new FormArray([
	     *    new FormControl(),
	     *    new FormControl()
	     * ]);
	     * console.log(arr.value);   // [null, null]
	     *
	     * arr.patchValue(['Nancy']);
	     * console.log(arr.value);   // ['Nancy', null]
	     * ```
	     *
	     * @param value Array of latest values for the controls
	     * @param options Configure options that determine how the control propagates changes and
	     * emits events after the value changes
	     *
	     * * `onlySelf`: When true, each change only affects this control, and not its parent. Default
	     * is false.
	     * * `emitEvent`: When true or not supplied (the default), both the `statusChanges` and
	     * `valueChanges`
	     * observables emit events with the latest status and value when the control value is updated.
	     * When false, no events are emitted.
	     * The configuration options are passed to the {@link AbstractControl#updateValueAndValidity
	     * updateValueAndValidity} method.
	     */
	    FormArray.prototype.patchValue = function (value, options) {
	        var _this = this;
	        if (options === void 0) { options = {}; }
	        value.forEach(function (newValue, index) {
	            if (_this.at(index)) {
	                _this.at(index).patchValue(newValue, { onlySelf: true, emitEvent: options.emitEvent });
	            }
	        });
	        this.updateValueAndValidity(options);
	    };
	    /**
	     * Resets the `FormArray` and all descendants are marked `pristine` and `untouched`, and the
	     * value of all descendants to null or null maps.
	     *
	     * You reset to a specific form state by passing in an array of states
	     * that matches the structure of the control. The state is a standalone value
	     * or a form state object with both a value and a disabled status.
	     *
	     * @usageNotes
	     * ### Reset the values in a form array
	     *
	     * ```ts
	     * const arr = new FormArray([
	     *    new FormControl(),
	     *    new FormControl()
	     * ]);
	     * arr.reset(['name', 'last name']);
	     *
	     * console.log(this.arr.value);  // ['name', 'last name']
	     * ```
	     *
	     * ### Reset the values in a form array and the disabled status for the first control
	     *
	     * ```
	     * this.arr.reset([
	     *   {value: 'name', disabled: true},
	     *   'last'
	     * ]);
	     *
	     * console.log(this.arr.value);  // ['name', 'last name']
	     * console.log(this.arr.get(0).status);  // 'DISABLED'
	     * ```
	     *
	     * @param value Array of values for the controls
	     * @param options Configure options that determine how the control propagates changes and
	     * emits events after the value changes
	     *
	     * * `onlySelf`: When true, each change only affects this control, and not its parent. Default
	     * is false.
	     * * `emitEvent`: When true or not supplied (the default), both the `statusChanges` and
	     * `valueChanges`
	     * observables emit events with the latest status and value when the control is reset.
	     * When false, no events are emitted.
	     * The configuration options are passed to the {@link AbstractControl#updateValueAndValidity
	     * updateValueAndValidity} method.
	     */
	    FormArray.prototype.reset = function (value, options) {
	        if (value === void 0) { value = []; }
	        if (options === void 0) { options = {}; }
	        this._forEachChild(function (control, index) {
	            control.reset(value[index], { onlySelf: true, emitEvent: options.emitEvent });
	        });
	        this._updatePristine(options);
	        this._updateTouched(options);
	        this.updateValueAndValidity(options);
	    };
	    /**
	     * The aggregate value of the array, including any disabled controls.
	     *
	     * Reports all values regardless of disabled status.
	     * For enabled controls only, the `value` property is the best way to get the value of the array.
	     */
	    FormArray.prototype.getRawValue = function () {
	        return this.controls.map(function (control) {
	            return control instanceof FormControl ? control.value : control.getRawValue();
	        });
	    };
	    /**
	     * Remove all controls in the `FormArray`.
	     *
	     * @usageNotes
	     * ### Remove all elements from a FormArray
	     *
	     * ```ts
	     * const arr = new FormArray([
	     *    new FormControl(),
	     *    new FormControl()
	     * ]);
	     * console.log(arr.length);  // 2
	     *
	     * arr.clear();
	     * console.log(arr.length);  // 0
	     * ```
	     *
	     * It's a simpler and more efficient alternative to removing all elements one by one:
	     *
	     * ```ts
	     * const arr = new FormArray([
	     *    new FormControl(),
	     *    new FormControl()
	     * ]);
	     *
	     * while (arr.length) {
	     *    arr.removeAt(0);
	     * }
	     * ```
	     */
	    FormArray.prototype.clear = function () {
	        if (this.controls.length < 1)
	            return;
	        this._forEachChild(function (control) { return control._registerOnCollectionChange(function () { }); });
	        this.controls.splice(0);
	        this.updateValueAndValidity();
	    };
	    /** @internal */
	    FormArray.prototype._syncPendingControls = function () {
	        var subtreeUpdated = this.controls.reduce(function (updated, child) {
	            return child._syncPendingControls() ? true : updated;
	        }, false);
	        if (subtreeUpdated)
	            this.updateValueAndValidity({ onlySelf: true });
	        return subtreeUpdated;
	    };
	    /** @internal */
	    FormArray.prototype._throwIfControlMissing = function (index) {
	        if (!this.controls.length) {
	            throw new Error("\n        There are no form controls registered with this array yet.  If you're using ngModel,\n        you may want to check next tick (e.g. use setTimeout).\n      ");
	        }
	        if (!this.at(index)) {
	            throw new Error("Cannot find form control at index " + index);
	        }
	    };
	    /** @internal */
	    FormArray.prototype._forEachChild = function (cb) {
	        this.controls.forEach(function (control, index) {
	            cb(control, index);
	        });
	    };
	    /** @internal */
	    FormArray.prototype._updateValue = function () {
	        var _this = this;
	        this.value =
	            this.controls.filter(function (control) { return control.enabled || _this.disabled; })
	                .map(function (control) { return control.value; });
	    };
	    /** @internal */
	    FormArray.prototype._anyControls = function (condition) {
	        return this.controls.some(function (control) { return control.enabled && condition(control); });
	    };
	    /** @internal */
	    FormArray.prototype._setUpControls = function () {
	        var _this = this;
	        this._forEachChild(function (control) { return _this._registerControl(control); });
	    };
	    /** @internal */
	    FormArray.prototype._checkAllValuesPresent = function (value) {
	        this._forEachChild(function (control, i) {
	            if (value[i] === undefined) {
	                throw new Error("Must supply a value for form control at index: " + i + ".");
	            }
	        });
	    };
	    /** @internal */
	    FormArray.prototype._allControlsDisabled = function () {
	        var e_2, _a;
	        try {
	            for (var _b = __values(this.controls), _c = _b.next(); !_c.done; _c = _b.next()) {
	                var control = _c.value;
	                if (control.enabled)
	                    return false;
	            }
	        }
	        catch (e_2_1) { e_2 = { error: e_2_1 }; }
	        finally {
	            try {
	                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
	            }
	            finally { if (e_2) throw e_2.error; }
	        }
	        return this.controls.length > 0 || this.disabled;
	    };
	    FormArray.prototype._registerControl = function (control) {
	        control.setParent(this);
	        control._registerOnCollectionChange(this._onCollectionChange);
	    };
	    return FormArray;
	}(AbstractControl));

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	var formDirectiveProvider = {
	    provide: ControlContainer,
	    useExisting: forwardRef(function () { return NgForm; })
	};
	var Éµ0$c = function () { return Promise.resolve(null); };
	var resolvedPromise = (Éµ0$c)();
	/**
	 * @description
	 * Creates a top-level `FormGroup` instance and binds it to a form
	 * to track aggregate form value and validation status.
	 *
	 * As soon as you import the `FormsModule`, this directive becomes active by default on
	 * all `<form>` tags.  You don't need to add a special selector.
	 *
	 * You optionally export the directive into a local template variable using `ngForm` as the key
	 * (ex: `#myForm="ngForm"`). This is optional, but useful.  Many properties from the underlying
	 * `FormGroup` instance are duplicated on the directive itself, so a reference to it
	 * gives you access to the aggregate value and validity status of the form, as well as
	 * user interaction properties like `dirty` and `touched`.
	 *
	 * To register child controls with the form, use `NgModel` with a `name`
	 * attribute. You may use `NgModelGroup` to create sub-groups within the form.
	 *
	 * If necessary, listen to the directive's `ngSubmit` event to be notified when the user has
	 * triggered a form submission. The `ngSubmit` event emits the original form
	 * submission event.
	 *
	 * In template driven forms, all `<form>` tags are automatically tagged as `NgForm`.
	 * To import the `FormsModule` but skip its usage in some forms,
	 * for example, to use native HTML5 validation, add the `ngNoForm` and the `<form>`
	 * tags won't create an `NgForm` directive. In reactive forms, using `ngNoForm` is
	 * unnecessary because the `<form>` tags are inert. In that case, you would
	 * refrain from using the `formGroup` directive.
	 *
	 * @usageNotes
	 *
	 * ### Listening for form submission
	 *
	 * The following example shows how to capture the form values from the "ngSubmit" event.
	 *
	 * {@example forms/ts/simpleForm/simple_form_example.ts region='Component'}
	 *
	 * ### Setting the update options
	 *
	 * The following example shows you how to change the "updateOn" option from its default using
	 * ngFormOptions.
	 *
	 * ```html
	 * <form [ngFormOptions]="{updateOn: 'blur'}">
	 *    <input name="one" ngModel>  <!-- this ngModel will update on blur -->
	 * </form>
	 * ```
	 *
	 * ### Native DOM validation UI
	 *
	 * In order to prevent the native DOM form validation UI from interfering with Angular's form
	 * validation, Angular automatically adds the `novalidate` attribute on any `<form>` whenever
	 * `FormModule` or `ReactiveFormModule` are imported into the application.
	 * If you want to explicitly enable native DOM validation UI with Angular forms, you can add the
	 * `ngNativeValidate` attribute to the `<form>` element:
	 *
	 * ```html
	 * <form ngNativeValidate>
	 *   ...
	 * </form>
	 * ```
	 *
	 * @ngModule FormsModule
	 * @publicApi
	 */
	var NgForm = /** @class */ (function (_super) {
	    __extends(NgForm, _super);
	    function NgForm(validators, asyncValidators) {
	        var _this = _super.call(this) || this;
	        /**
	         * @description
	         * Returns whether the form submission has been triggered.
	         */
	        _this.submitted = false;
	        _this._directives = [];
	        /**
	         * @description
	         * Event emitter for the "ngSubmit" event
	         */
	        _this.ngSubmit = new EventEmitter();
	        _this.form =
	            new FormGroup({}, composeValidators(validators), composeAsyncValidators(asyncValidators));
	        return _this;
	    }
	    /**
	     * @description
	     * Lifecycle method called after the view is initialized. For internal use only.
	     */
	    NgForm.prototype.ngAfterViewInit = function () {
	        this._setUpdateStrategy();
	    };
	    Object.defineProperty(NgForm.prototype, "formDirective", {
	        /**
	         * @description
	         * The directive instance.
	         */
	        get: function () {
	            return this;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(NgForm.prototype, "control", {
	        /**
	         * @description
	         * The internal `FormGroup` instance.
	         */
	        get: function () {
	            return this.form;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(NgForm.prototype, "path", {
	        /**
	         * @description
	         * Returns an array representing the path to this group. Because this directive
	         * always lives at the top level of a form, it is always an empty array.
	         */
	        get: function () {
	            return [];
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(NgForm.prototype, "controls", {
	        /**
	         * @description
	         * Returns a map of the controls in this group.
	         */
	        get: function () {
	            return this.form.controls;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    /**
	     * @description
	     * Method that sets up the control directive in this group, re-calculates its value
	     * and validity, and adds the instance to the internal list of directives.
	     *
	     * @param dir The `NgModel` directive instance.
	     */
	    NgForm.prototype.addControl = function (dir) {
	        var _this = this;
	        resolvedPromise.then(function () {
	            var container = _this._findContainer(dir.path);
	            dir.control =
	                container.registerControl(dir.name, dir.control);
	            setUpControl(dir.control, dir);
	            dir.control.updateValueAndValidity({ emitEvent: false });
	            _this._directives.push(dir);
	        });
	    };
	    /**
	     * @description
	     * Retrieves the `FormControl` instance from the provided `NgModel` directive.
	     *
	     * @param dir The `NgModel` directive instance.
	     */
	    NgForm.prototype.getControl = function (dir) {
	        return this.form.get(dir.path);
	    };
	    /**
	     * @description
	     * Removes the `NgModel` instance from the internal list of directives
	     *
	     * @param dir The `NgModel` directive instance.
	     */
	    NgForm.prototype.removeControl = function (dir) {
	        var _this = this;
	        resolvedPromise.then(function () {
	            var container = _this._findContainer(dir.path);
	            if (container) {
	                container.removeControl(dir.name);
	            }
	            removeDir(_this._directives, dir);
	        });
	    };
	    /**
	     * @description
	     * Adds a new `NgModelGroup` directive instance to the form.
	     *
	     * @param dir The `NgModelGroup` directive instance.
	     */
	    NgForm.prototype.addFormGroup = function (dir) {
	        var _this = this;
	        resolvedPromise.then(function () {
	            var container = _this._findContainer(dir.path);
	            var group = new FormGroup({});
	            setUpFormContainer(group, dir);
	            container.registerControl(dir.name, group);
	            group.updateValueAndValidity({ emitEvent: false });
	        });
	    };
	    /**
	     * @description
	     * Removes the `NgModelGroup` directive instance from the form.
	     *
	     * @param dir The `NgModelGroup` directive instance.
	     */
	    NgForm.prototype.removeFormGroup = function (dir) {
	        var _this = this;
	        resolvedPromise.then(function () {
	            var container = _this._findContainer(dir.path);
	            if (container) {
	                container.removeControl(dir.name);
	            }
	        });
	    };
	    /**
	     * @description
	     * Retrieves the `FormGroup` for a provided `NgModelGroup` directive instance
	     *
	     * @param dir The `NgModelGroup` directive instance.
	     */
	    NgForm.prototype.getFormGroup = function (dir) {
	        return this.form.get(dir.path);
	    };
	    /**
	     * Sets the new value for the provided `NgControl` directive.
	     *
	     * @param dir The `NgControl` directive instance.
	     * @param value The new value for the directive's control.
	     */
	    NgForm.prototype.updateModel = function (dir, value) {
	        var _this = this;
	        resolvedPromise.then(function () {
	            var ctrl = _this.form.get(dir.path);
	            ctrl.setValue(value);
	        });
	    };
	    /**
	     * @description
	     * Sets the value for this `FormGroup`.
	     *
	     * @param value The new value
	     */
	    NgForm.prototype.setValue = function (value) {
	        this.control.setValue(value);
	    };
	    /**
	     * @description
	     * Method called when the "submit" event is triggered on the form.
	     * Triggers the `ngSubmit` emitter to emit the "submit" event as its payload.
	     *
	     * @param $event The "submit" event object
	     */
	    NgForm.prototype.onSubmit = function ($event) {
	        this.submitted = true;
	        syncPendingControls(this.form, this._directives);
	        this.ngSubmit.emit($event);
	        return false;
	    };
	    /**
	     * @description
	     * Method called when the "reset" event is triggered on the form.
	     */
	    NgForm.prototype.onReset = function () {
	        this.resetForm();
	    };
	    /**
	     * @description
	     * Resets the form to an initial value and resets its submitted status.
	     *
	     * @param value The new value for the form.
	     */
	    NgForm.prototype.resetForm = function (value) {
	        if (value === void 0) { value = undefined; }
	        this.form.reset(value);
	        this.submitted = false;
	    };
	    NgForm.prototype._setUpdateStrategy = function () {
	        if (this.options && this.options.updateOn != null) {
	            this.form._updateOn = this.options.updateOn;
	        }
	    };
	    /** @internal */
	    NgForm.prototype._findContainer = function (path) {
	        path.pop();
	        return path.length ? this.form.get(path) : this.form;
	    };
	    __decorate([
	        Input('ngFormOptions'),
	        __metadata("design:type", Object)
	    ], NgForm.prototype, "options", void 0);
	    NgForm = __decorate([
	        Directive({
	            selector: 'form:not([ngNoForm]):not([formGroup]),ng-form,[ngForm]',
	            providers: [formDirectiveProvider],
	            host: { '(submit)': 'onSubmit($event)', '(reset)': 'onReset()' },
	            outputs: ['ngSubmit'],
	            exportAs: 'ngForm'
	        }),
	        __param(0, Optional()), __param(0, Self()), __param(0, Inject(NG_VALIDATORS)),
	        __param(1, Optional()), __param(1, Self()), __param(1, Inject(NG_ASYNC_VALIDATORS)),
	        __metadata("design:paramtypes", [Array, Array])
	    ], NgForm);
	    return NgForm;
	}(ControlContainer));

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * @description
	 * A base class for code shared between the `NgModelGroup` and `FormGroupName` directives.
	 *
	 * @publicApi
	 */
	var AbstractFormGroupDirective = /** @class */ (function (_super) {
	    __extends(AbstractFormGroupDirective, _super);
	    function AbstractFormGroupDirective() {
	        return _super !== null && _super.apply(this, arguments) || this;
	    }
	    /**
	     * @description
	     * An internal callback method triggered on the instance after the inputs are set.
	     * Registers the group with its parent group.
	     */
	    AbstractFormGroupDirective.prototype.ngOnInit = function () {
	        this._checkParentType();
	        this.formDirective.addFormGroup(this);
	    };
	    /**
	     * @description
	     * An internal callback method triggered before the instance is destroyed.
	     * Removes the group from its parent group.
	     */
	    AbstractFormGroupDirective.prototype.ngOnDestroy = function () {
	        if (this.formDirective) {
	            this.formDirective.removeFormGroup(this);
	        }
	    };
	    Object.defineProperty(AbstractFormGroupDirective.prototype, "control", {
	        /**
	         * @description
	         * The `FormGroup` bound to this directive.
	         */
	        get: function () {
	            return this.formDirective.getFormGroup(this);
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(AbstractFormGroupDirective.prototype, "path", {
	        /**
	         * @description
	         * The path to this group from the top-level directive.
	         */
	        get: function () {
	            return controlPath(this.name == null ? this.name : this.name.toString(), this._parent);
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(AbstractFormGroupDirective.prototype, "formDirective", {
	        /**
	         * @description
	         * The top-level directive for this group if present, otherwise null.
	         */
	        get: function () {
	            return this._parent ? this._parent.formDirective : null;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(AbstractFormGroupDirective.prototype, "validator", {
	        /**
	         * @description
	         * The synchronous validators registered with this group.
	         */
	        get: function () {
	            return composeValidators(this._validators);
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(AbstractFormGroupDirective.prototype, "asyncValidator", {
	        /**
	         * @description
	         * The async validators registered with this group.
	         */
	        get: function () {
	            return composeAsyncValidators(this._asyncValidators);
	        },
	        enumerable: true,
	        configurable: true
	    });
	    /** @internal */
	    AbstractFormGroupDirective.prototype._checkParentType = function () { };
	    return AbstractFormGroupDirective;
	}(ControlContainer));

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	var TemplateDrivenErrors = /** @class */ (function () {
	    function TemplateDrivenErrors() {
	    }
	    TemplateDrivenErrors.modelParentException = function () {
	        throw new Error("\n      ngModel cannot be used to register form controls with a parent formGroup directive.  Try using\n      formGroup's partner directive \"formControlName\" instead.  Example:\n\n      " + FormErrorExamples.formControlName + "\n\n      Or, if you'd like to avoid registering this form control, indicate that it's standalone in ngModelOptions:\n\n      Example:\n\n      " + FormErrorExamples.ngModelWithFormGroup);
	    };
	    TemplateDrivenErrors.formGroupNameException = function () {
	        throw new Error("\n      ngModel cannot be used to register form controls with a parent formGroupName or formArrayName directive.\n\n      Option 1: Use formControlName instead of ngModel (reactive strategy):\n\n      " + FormErrorExamples.formGroupName + "\n\n      Option 2:  Update ngModel's parent be ngModelGroup (template-driven strategy):\n\n      " + FormErrorExamples.ngModelGroup);
	    };
	    TemplateDrivenErrors.missingNameException = function () {
	        throw new Error("If ngModel is used within a form tag, either the name attribute must be set or the form\n      control must be defined as 'standalone' in ngModelOptions.\n\n      Example 1: <input [(ngModel)]=\"person.firstName\" name=\"first\">\n      Example 2: <input [(ngModel)]=\"person.firstName\" [ngModelOptions]=\"{standalone: true}\">");
	    };
	    TemplateDrivenErrors.modelGroupParentException = function () {
	        throw new Error("\n      ngModelGroup cannot be used with a parent formGroup directive.\n\n      Option 1: Use formGroupName instead of ngModelGroup (reactive strategy):\n\n      " + FormErrorExamples.formGroupName + "\n\n      Option 2:  Use a regular form tag instead of the formGroup directive (template-driven strategy):\n\n      " + FormErrorExamples.ngModelGroup);
	    };
	    return TemplateDrivenErrors;
	}());

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	var modelGroupProvider = {
	    provide: ControlContainer,
	    useExisting: forwardRef(function () { return NgModelGroup; })
	};
	/**
	 * @description
	 * Creates and binds a `FormGroup` instance to a DOM element.
	 *
	 * This directive can only be used as a child of `NgForm` (within `<form>` tags).
	 *
	 * Use this directive to validate a sub-group of your form separately from the
	 * rest of your form, or if some values in your domain model make more sense
	 * to consume together in a nested object.
	 *
	 * Provide a name for the sub-group and it will become the key
	 * for the sub-group in the form's full value. If you need direct access, export the directive into
	 * a local template variable using `ngModelGroup` (ex: `#myGroup="ngModelGroup"`).
	 *
	 * @usageNotes
	 *
	 * ### Consuming controls in a grouping
	 *
	 * The following example shows you how to combine controls together in a sub-group
	 * of the form.
	 *
	 * {@example forms/ts/ngModelGroup/ng_model_group_example.ts region='Component'}
	 *
	 * @ngModule FormsModule
	 * @publicApi
	 */
	var NgModelGroup = /** @class */ (function (_super) {
	    __extends(NgModelGroup, _super);
	    function NgModelGroup(parent, validators, asyncValidators) {
	        var _this = _super.call(this) || this;
	        _this._parent = parent;
	        _this._validators = validators;
	        _this._asyncValidators = asyncValidators;
	        return _this;
	    }
	    NgModelGroup_1 = NgModelGroup;
	    /** @internal */
	    NgModelGroup.prototype._checkParentType = function () {
	        if (!(this._parent instanceof NgModelGroup_1) && !(this._parent instanceof NgForm)) {
	            TemplateDrivenErrors.modelGroupParentException();
	        }
	    };
	    var NgModelGroup_1;
	    __decorate([
	        Input('ngModelGroup'),
	        __metadata("design:type", String)
	    ], NgModelGroup.prototype, "name", void 0);
	    NgModelGroup = NgModelGroup_1 = __decorate([
	        Directive({ selector: '[ngModelGroup]', providers: [modelGroupProvider], exportAs: 'ngModelGroup' }),
	        __param(0, Host()), __param(0, SkipSelf()),
	        __param(1, Optional()), __param(1, Self()), __param(1, Inject(NG_VALIDATORS)),
	        __param(2, Optional()), __param(2, Self()), __param(2, Inject(NG_ASYNC_VALIDATORS)),
	        __metadata("design:paramtypes", [ControlContainer, Array, Array])
	    ], NgModelGroup);
	    return NgModelGroup;
	}(AbstractFormGroupDirective));

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	var formControlBinding = {
	    provide: NgControl,
	    useExisting: forwardRef(function () { return NgModel; })
	};
	var Éµ0$1$4 = function () { return Promise.resolve(null); };
	/**
	 * `ngModel` forces an additional change detection run when its inputs change:
	 * E.g.:
	 * ```
	 * <div>{{myModel.valid}}</div>
	 * <input [(ngModel)]="myValue" #myModel="ngModel">
	 * ```
	 * I.e. `ngModel` can export itself on the element and then be used in the template.
	 * Normally, this would result in expressions before the `input` that use the exported directive
	 * to have and old value as they have been
	 * dirty checked before. As this is a very common case for `ngModel`, we added this second change
	 * detection run.
	 *
	 * Notes:
	 * - this is just one extra run no matter how many `ngModel` have been changed.
	 * - this is a general problem when using `exportAs` for directives!
	 */
	var resolvedPromise$1 = (Éµ0$1$4)();
	/**
	 * @description
	 * Creates a `FormControl` instance from a domain model and binds it
	 * to a form control element.
	 *
	 * The `FormControl` instance tracks the value, user interaction, and
	 * validation status of the control and keeps the view synced with the model. If used
	 * within a parent form, the directive also registers itself with the form as a child
	 * control.
	 *
	 * This directive is used by itself or as part of a larger form. Use the
	 * `ngModel` selector to activate it.
	 *
	 * It accepts a domain model as an optional `Input`. If you have a one-way binding
	 * to `ngModel` with `[]` syntax, changing the value of the domain model in the component
	 * class sets the value in the view. If you have a two-way binding with `[()]` syntax
	 * (also known as 'banana-box syntax'), the value in the UI always syncs back to
	 * the domain model in your class.
	 *
	 * To inspect the properties of the associated `FormControl` (like validity state),
	 * export the directive into a local template variable using `ngModel` as the key (ex:
	 * `#myVar="ngModel"`). You then access the control using the directive's `control` property, but
	 * most properties used (like `valid` and `dirty`) fall through to the control anyway for direct
	 * access. See a full list of properties directly available in `AbstractControlDirective`.
	 *
	 * @see `RadioControlValueAccessor`
	 * @see `SelectControlValueAccessor`
	 *
	 * @usageNotes
	 *
	 * ### Using ngModel on a standalone control
	 *
	 * The following examples show a simple standalone control using `ngModel`:
	 *
	 * {@example forms/ts/simpleNgModel/simple_ng_model_example.ts region='Component'}
	 *
	 * When using the `ngModel` within `<form>` tags, you'll also need to supply a `name` attribute
	 * so that the control can be registered with the parent form under that name.
	 *
	 * In the context of a parent form, it's often unnecessary to include one-way or two-way binding,
	 * as the parent form syncs the value for you. You access its properties by exporting it into a
	 * local template variable using `ngForm` such as (`#f="ngForm"`). Use the variable where
	 * needed on form submission.
	 *
	 * If you do need to populate initial values into your form, using a one-way binding for
	 * `ngModel` tends to be sufficient as long as you use the exported form's value rather
	 * than the domain model's value on submit.
	 *
	 * ### Using ngModel within a form
	 *
	 * The following example shows controls using `ngModel` within a form:
	 *
	 * {@example forms/ts/simpleForm/simple_form_example.ts region='Component'}
	 *
	 * ### Using a standalone ngModel within a group
	 *
	 * The following example shows you how to use a standalone ngModel control
	 * within a form. This controls the display of the form, but doesn't contain form data.
	 *
	 * ```html
	 * <form>
	 *   <input name="login" ngModel placeholder="Login">
	 *   <input type="checkbox" ngModel [ngModelOptions]="{standalone: true}"> Show more options?
	 * </form>
	 * <!-- form value: {login: ''} -->
	 * ```
	 *
	 * ### Setting the ngModel name attribute through options
	 *
	 * The following example shows you an alternate way to set the name attribute. The name attribute is
	 * used within a custom form component, and the name `@Input` property serves a different purpose.
	 *
	 * ```html
	 * <form>
	 *   <my-person-control name="Nancy" ngModel [ngModelOptions]="{name: 'user'}">
	 *   </my-person-control>
	 * </form>
	 * <!-- form value: {user: ''} -->
	 * ```
	 *
	 * @ngModule FormsModule
	 * @publicApi
	 */
	var NgModel = /** @class */ (function (_super) {
	    __extends(NgModel, _super);
	    function NgModel(parent, validators, asyncValidators, valueAccessors) {
	        var _this = _super.call(this) || this;
	        _this.control = new FormControl();
	        /** @internal */
	        _this._registered = false;
	        /**
	         * @description
	         * Event emitter for producing the `ngModelChange` event after
	         * the view model updates.
	         */
	        _this.update = new EventEmitter();
	        _this._parent = parent;
	        _this._rawValidators = validators || [];
	        _this._rawAsyncValidators = asyncValidators || [];
	        _this.valueAccessor = selectValueAccessor(_this, valueAccessors);
	        return _this;
	    }
	    /**
	     * @description
	     * A lifecycle method called when the directive's inputs change. For internal use
	     * only.
	     *
	     * @param changes A object of key/value pairs for the set of changed inputs.
	     */
	    NgModel.prototype.ngOnChanges = function (changes) {
	        this._checkForErrors();
	        if (!this._registered)
	            this._setUpControl();
	        if ('isDisabled' in changes) {
	            this._updateDisabled(changes);
	        }
	        if (isPropertyUpdated(changes, this.viewModel)) {
	            this._updateValue(this.model);
	            this.viewModel = this.model;
	        }
	    };
	    /**
	     * @description
	     * Lifecycle method called before the directive's instance is destroyed. For internal
	     * use only.
	     */
	    NgModel.prototype.ngOnDestroy = function () {
	        this.formDirective && this.formDirective.removeControl(this);
	    };
	    Object.defineProperty(NgModel.prototype, "path", {
	        /**
	         * @description
	         * Returns an array that represents the path from the top-level form to this control.
	         * Each index is the string name of the control on that level.
	         */
	        get: function () {
	            return this._parent ? controlPath(this.name, this._parent) : [this.name];
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(NgModel.prototype, "formDirective", {
	        /**
	         * @description
	         * The top-level directive for this control if present, otherwise null.
	         */
	        get: function () {
	            return this._parent ? this._parent.formDirective : null;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(NgModel.prototype, "validator", {
	        /**
	         * @description
	         * Synchronous validator function composed of all the synchronous validators
	         * registered with this directive.
	         */
	        get: function () {
	            return composeValidators(this._rawValidators);
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(NgModel.prototype, "asyncValidator", {
	        /**
	         * @description
	         * Async validator function composed of all the async validators registered with this
	         * directive.
	         */
	        get: function () {
	            return composeAsyncValidators(this._rawAsyncValidators);
	        },
	        enumerable: true,
	        configurable: true
	    });
	    /**
	     * @description
	     * Sets the new value for the view model and emits an `ngModelChange` event.
	     *
	     * @param newValue The new value emitted by `ngModelChange`.
	     */
	    NgModel.prototype.viewToModelUpdate = function (newValue) {
	        this.viewModel = newValue;
	        this.update.emit(newValue);
	    };
	    NgModel.prototype._setUpControl = function () {
	        this._setUpdateStrategy();
	        this._isStandalone() ? this._setUpStandalone() : this.formDirective.addControl(this);
	        this._registered = true;
	    };
	    NgModel.prototype._setUpdateStrategy = function () {
	        if (this.options && this.options.updateOn != null) {
	            this.control._updateOn = this.options.updateOn;
	        }
	    };
	    NgModel.prototype._isStandalone = function () {
	        return !this._parent || !!(this.options && this.options.standalone);
	    };
	    NgModel.prototype._setUpStandalone = function () {
	        setUpControl(this.control, this);
	        this.control.updateValueAndValidity({ emitEvent: false });
	    };
	    NgModel.prototype._checkForErrors = function () {
	        if (!this._isStandalone()) {
	            this._checkParentType();
	        }
	        this._checkName();
	    };
	    NgModel.prototype._checkParentType = function () {
	        if (!(this._parent instanceof NgModelGroup) &&
	            this._parent instanceof AbstractFormGroupDirective) {
	            TemplateDrivenErrors.formGroupNameException();
	        }
	        else if (!(this._parent instanceof NgModelGroup) && !(this._parent instanceof NgForm)) {
	            TemplateDrivenErrors.modelParentException();
	        }
	    };
	    NgModel.prototype._checkName = function () {
	        if (this.options && this.options.name)
	            this.name = this.options.name;
	        if (!this._isStandalone() && !this.name) {
	            TemplateDrivenErrors.missingNameException();
	        }
	    };
	    NgModel.prototype._updateValue = function (value) {
	        var _this = this;
	        resolvedPromise$1.then(function () {
	            _this.control.setValue(value, { emitViewToModelChange: false });
	        });
	    };
	    NgModel.prototype._updateDisabled = function (changes) {
	        var _this = this;
	        var disabledValue = changes['isDisabled'].currentValue;
	        var isDisabled = disabledValue === '' || (disabledValue && disabledValue !== 'false');
	        resolvedPromise$1.then(function () {
	            if (isDisabled && !_this.control.disabled) {
	                _this.control.disable();
	            }
	            else if (!isDisabled && _this.control.disabled) {
	                _this.control.enable();
	            }
	        });
	    };
	    __decorate([
	        Input(),
	        __metadata("design:type", String)
	    ], NgModel.prototype, "name", void 0);
	    __decorate([
	        Input('disabled'),
	        __metadata("design:type", Boolean)
	    ], NgModel.prototype, "isDisabled", void 0);
	    __decorate([
	        Input('ngModel'),
	        __metadata("design:type", Object)
	    ], NgModel.prototype, "model", void 0);
	    __decorate([
	        Input('ngModelOptions'),
	        __metadata("design:type", Object)
	    ], NgModel.prototype, "options", void 0);
	    __decorate([
	        Output('ngModelChange'),
	        __metadata("design:type", Object)
	    ], NgModel.prototype, "update", void 0);
	    NgModel = __decorate([
	        Directive({
	            selector: '[ngModel]:not([formControlName]):not([formControl])',
	            providers: [formControlBinding],
	            exportAs: 'ngModel'
	        }),
	        __param(0, Optional()), __param(0, Host()),
	        __param(1, Optional()), __param(1, Self()), __param(1, Inject(NG_VALIDATORS)),
	        __param(2, Optional()), __param(2, Self()), __param(2, Inject(NG_ASYNC_VALIDATORS)),
	        __param(3, Optional()), __param(3, Self()), __param(3, Inject(NG_VALUE_ACCESSOR)),
	        __metadata("design:paramtypes", [ControlContainer,
	            Array,
	            Array, Array])
	    ], NgModel);
	    return NgModel;
	}(NgControl));

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * @description
	 *
	 * Adds `novalidate` attribute to all forms by default.
	 *
	 * `novalidate` is used to disable browser's native form validation.
	 *
	 * If you want to use native validation with Angular forms, just add `ngNativeValidate` attribute:
	 *
	 * ```
	 * <form ngNativeValidate></form>
	 * ```
	 *
	 * @publicApi
	 * @ngModule ReactiveFormsModule
	 * @ngModule FormsModule
	 */
	var ÉµNgNoValidate = /** @class */ (function () {
	    function ÉµNgNoValidate() {
	    }
	    ÉµNgNoValidate = __decorate([
	        Directive({
	            selector: 'form:not([ngNoForm]):not([ngNativeValidate])',
	            host: { 'novalidate': '' },
	        })
	    ], ÉµNgNoValidate);
	    return ÉµNgNoValidate;
	}());

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * Token to provide to turn off the ngModel warning on formControl and formControlName.
	 */
	var NG_MODEL_WITH_FORM_CONTROL_WARNING = new InjectionToken('NgModelWithFormControlWarning');
	var formControlBinding$1 = {
	    provide: NgControl,
	    useExisting: forwardRef(function () { return FormControlDirective; })
	};
	/**
	 * @description
	 * Synchronizes a standalone `FormControl` instance to a form control element.
	 *
	 * Note that support for using the `ngModel` input property and `ngModelChange` event with reactive
	 * form directives was deprecated in Angular v6 and is scheduled for removal in
	 * a future version of Angular.
	 * For details, see [Deprecated features](guide/deprecations#ngmodel-with-reactive-forms).
	 *
	 * @see [Reactive Forms Guide](guide/reactive-forms)
	 * @see `FormControl`
	 * @see `AbstractControl`
	 *
	 * @usageNotes
	 *
	 * The following example shows how to register a standalone control and set its value.
	 *
	 * {@example forms/ts/simpleFormControl/simple_form_control_example.ts region='Component'}
	 *
	 * @ngModule ReactiveFormsModule
	 * @publicApi
	 */
	var FormControlDirective = /** @class */ (function (_super) {
	    __extends(FormControlDirective, _super);
	    function FormControlDirective(validators, asyncValidators, valueAccessors, _ngModelWarningConfig) {
	        var _this = _super.call(this) || this;
	        _this._ngModelWarningConfig = _ngModelWarningConfig;
	        /** @deprecated as of v6 */
	        _this.update = new EventEmitter();
	        /**
	         * @description
	         * Instance property used to track whether an ngModel warning has been sent out for this
	         * particular `FormControlDirective` instance. Used to support warning config of "always".
	         *
	         * @internal
	         */
	        _this._ngModelWarningSent = false;
	        _this._rawValidators = validators || [];
	        _this._rawAsyncValidators = asyncValidators || [];
	        _this.valueAccessor = selectValueAccessor(_this, valueAccessors);
	        return _this;
	    }
	    FormControlDirective_1 = FormControlDirective;
	    Object.defineProperty(FormControlDirective.prototype, "isDisabled", {
	        /**
	         * @description
	         * Triggers a warning that this input should not be used with reactive forms.
	         */
	        set: function (isDisabled) {
	            ReactiveErrors.disabledAttrWarning();
	        },
	        enumerable: true,
	        configurable: true
	    });
	    /**
	     * @description
	     * A lifecycle method called when the directive's inputs change. For internal use
	     * only.
	     *
	     * @param changes A object of key/value pairs for the set of changed inputs.
	     */
	    FormControlDirective.prototype.ngOnChanges = function (changes) {
	        if (this._isControlChanged(changes)) {
	            setUpControl(this.form, this);
	            if (this.control.disabled && this.valueAccessor.setDisabledState) {
	                this.valueAccessor.setDisabledState(true);
	            }
	            this.form.updateValueAndValidity({ emitEvent: false });
	        }
	        if (isPropertyUpdated(changes, this.viewModel)) {
	            _ngModelWarning('formControl', FormControlDirective_1, this, this._ngModelWarningConfig);
	            this.form.setValue(this.model);
	            this.viewModel = this.model;
	        }
	    };
	    Object.defineProperty(FormControlDirective.prototype, "path", {
	        /**
	         * @description
	         * Returns an array that represents the path from the top-level form to this control.
	         * Each index is the string name of the control on that level.
	         */
	        get: function () {
	            return [];
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(FormControlDirective.prototype, "validator", {
	        /**
	         * @description
	         * Synchronous validator function composed of all the synchronous validators
	         * registered with this directive.
	         */
	        get: function () {
	            return composeValidators(this._rawValidators);
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(FormControlDirective.prototype, "asyncValidator", {
	        /**
	         * @description
	         * Async validator function composed of all the async validators registered with this
	         * directive.
	         */
	        get: function () {
	            return composeAsyncValidators(this._rawAsyncValidators);
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(FormControlDirective.prototype, "control", {
	        /**
	         * @description
	         * The `FormControl` bound to this directive.
	         */
	        get: function () {
	            return this.form;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    /**
	     * @description
	     * Sets the new value for the view model and emits an `ngModelChange` event.
	     *
	     * @param newValue The new value for the view model.
	     */
	    FormControlDirective.prototype.viewToModelUpdate = function (newValue) {
	        this.viewModel = newValue;
	        this.update.emit(newValue);
	    };
	    FormControlDirective.prototype._isControlChanged = function (changes) {
	        return changes.hasOwnProperty('form');
	    };
	    var FormControlDirective_1;
	    /**
	     * @description
	     * Static property used to track whether any ngModel warnings have been sent across
	     * all instances of FormControlDirective. Used to support warning config of "once".
	     *
	     * @internal
	     */
	    FormControlDirective._ngModelWarningSentOnce = false;
	    __decorate([
	        Input('formControl'),
	        __metadata("design:type", FormControl)
	    ], FormControlDirective.prototype, "form", void 0);
	    __decorate([
	        Input('disabled'),
	        __metadata("design:type", Boolean),
	        __metadata("design:paramtypes", [Boolean])
	    ], FormControlDirective.prototype, "isDisabled", null);
	    __decorate([
	        Input('ngModel'),
	        __metadata("design:type", Object)
	    ], FormControlDirective.prototype, "model", void 0);
	    __decorate([
	        Output('ngModelChange'),
	        __metadata("design:type", Object)
	    ], FormControlDirective.prototype, "update", void 0);
	    FormControlDirective = FormControlDirective_1 = __decorate([
	        Directive({ selector: '[formControl]', providers: [formControlBinding$1], exportAs: 'ngForm' }),
	        __param(0, Optional()), __param(0, Self()), __param(0, Inject(NG_VALIDATORS)),
	        __param(1, Optional()), __param(1, Self()), __param(1, Inject(NG_ASYNC_VALIDATORS)),
	        __param(2, Optional()), __param(2, Self()), __param(2, Inject(NG_VALUE_ACCESSOR)),
	        __param(3, Optional()), __param(3, Inject(NG_MODEL_WITH_FORM_CONTROL_WARNING)),
	        __metadata("design:paramtypes", [Array,
	            Array, Array, Object])
	    ], FormControlDirective);
	    return FormControlDirective;
	}(NgControl));

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	var formDirectiveProvider$1 = {
	    provide: ControlContainer,
	    useExisting: forwardRef(function () { return FormGroupDirective; })
	};
	/**
	 * @description
	 *
	 * Binds an existing `FormGroup` to a DOM element.
	 *
	 * This directive accepts an existing `FormGroup` instance. It will then use this
	 * `FormGroup` instance to match any child `FormControl`, `FormGroup`,
	 * and `FormArray` instances to child `FormControlName`, `FormGroupName`,
	 * and `FormArrayName` directives.
	 *
	 * @see [Reactive Forms Guide](guide/reactive-forms)
	 * @see `AbstractControl`
	 *
	 * ### Register Form Group
	 *
	 * The following example registers a `FormGroup` with first name and last name controls,
	 * and listens for the *ngSubmit* event when the button is clicked.
	 *
	 * {@example forms/ts/simpleFormGroup/simple_form_group_example.ts region='Component'}
	 *
	 * @ngModule ReactiveFormsModule
	 * @publicApi
	 */
	var FormGroupDirective = /** @class */ (function (_super) {
	    __extends(FormGroupDirective, _super);
	    function FormGroupDirective(_validators, _asyncValidators) {
	        var _this = _super.call(this) || this;
	        _this._validators = _validators;
	        _this._asyncValidators = _asyncValidators;
	        /**
	         * @description
	         * Reports whether the form submission has been triggered.
	         */
	        _this.submitted = false;
	        /**
	         * @description
	         * Tracks the list of added `FormControlName` instances
	         */
	        _this.directives = [];
	        /**
	         * @description
	         * Tracks the `FormGroup` bound to this directive.
	         */
	        _this.form = null;
	        /**
	         * @description
	         * Emits an event when the form submission has been triggered.
	         */
	        _this.ngSubmit = new EventEmitter();
	        return _this;
	    }
	    /**
	     * @description
	     * A lifecycle method called when the directive's inputs change. For internal use only.
	     *
	     * @param changes A object of key/value pairs for the set of changed inputs.
	     */
	    FormGroupDirective.prototype.ngOnChanges = function (changes) {
	        this._checkFormPresent();
	        if (changes.hasOwnProperty('form')) {
	            this._updateValidators();
	            this._updateDomValue();
	            this._updateRegistrations();
	        }
	    };
	    Object.defineProperty(FormGroupDirective.prototype, "formDirective", {
	        /**
	         * @description
	         * Returns this directive's instance.
	         */
	        get: function () {
	            return this;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(FormGroupDirective.prototype, "control", {
	        /**
	         * @description
	         * Returns the `FormGroup` bound to this directive.
	         */
	        get: function () {
	            return this.form;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(FormGroupDirective.prototype, "path", {
	        /**
	         * @description
	         * Returns an array representing the path to this group. Because this directive
	         * always lives at the top level of a form, it always an empty array.
	         */
	        get: function () {
	            return [];
	        },
	        enumerable: true,
	        configurable: true
	    });
	    /**
	     * @description
	     * Method that sets up the control directive in this group, re-calculates its value
	     * and validity, and adds the instance to the internal list of directives.
	     *
	     * @param dir The `FormControlName` directive instance.
	     */
	    FormGroupDirective.prototype.addControl = function (dir) {
	        var ctrl = this.form.get(dir.path);
	        setUpControl(ctrl, dir);
	        ctrl.updateValueAndValidity({ emitEvent: false });
	        this.directives.push(dir);
	        return ctrl;
	    };
	    /**
	     * @description
	     * Retrieves the `FormControl` instance from the provided `FormControlName` directive
	     *
	     * @param dir The `FormControlName` directive instance.
	     */
	    FormGroupDirective.prototype.getControl = function (dir) {
	        return this.form.get(dir.path);
	    };
	    /**
	     * @description
	     * Removes the `FormControlName` instance from the internal list of directives
	     *
	     * @param dir The `FormControlName` directive instance.
	     */
	    FormGroupDirective.prototype.removeControl = function (dir) {
	        removeDir(this.directives, dir);
	    };
	    /**
	     * Adds a new `FormGroupName` directive instance to the form.
	     *
	     * @param dir The `FormGroupName` directive instance.
	     */
	    FormGroupDirective.prototype.addFormGroup = function (dir) {
	        var ctrl = this.form.get(dir.path);
	        setUpFormContainer(ctrl, dir);
	        ctrl.updateValueAndValidity({ emitEvent: false });
	    };
	    /**
	     * No-op method to remove the form group.
	     *
	     * @param dir The `FormGroupName` directive instance.
	     */
	    FormGroupDirective.prototype.removeFormGroup = function (dir) { };
	    /**
	     * @description
	     * Retrieves the `FormGroup` for a provided `FormGroupName` directive instance
	     *
	     * @param dir The `FormGroupName` directive instance.
	     */
	    FormGroupDirective.prototype.getFormGroup = function (dir) {
	        return this.form.get(dir.path);
	    };
	    /**
	     * Adds a new `FormArrayName` directive instance to the form.
	     *
	     * @param dir The `FormArrayName` directive instance.
	     */
	    FormGroupDirective.prototype.addFormArray = function (dir) {
	        var ctrl = this.form.get(dir.path);
	        setUpFormContainer(ctrl, dir);
	        ctrl.updateValueAndValidity({ emitEvent: false });
	    };
	    /**
	     * No-op method to remove the form array.
	     *
	     * @param dir The `FormArrayName` directive instance.
	     */
	    FormGroupDirective.prototype.removeFormArray = function (dir) { };
	    /**
	     * @description
	     * Retrieves the `FormArray` for a provided `FormArrayName` directive instance.
	     *
	     * @param dir The `FormArrayName` directive instance.
	     */
	    FormGroupDirective.prototype.getFormArray = function (dir) {
	        return this.form.get(dir.path);
	    };
	    /**
	     * Sets the new value for the provided `FormControlName` directive.
	     *
	     * @param dir The `FormControlName` directive instance.
	     * @param value The new value for the directive's control.
	     */
	    FormGroupDirective.prototype.updateModel = function (dir, value) {
	        var ctrl = this.form.get(dir.path);
	        ctrl.setValue(value);
	    };
	    /**
	     * @description
	     * Method called with the "submit" event is triggered on the form.
	     * Triggers the `ngSubmit` emitter to emit the "submit" event as its payload.
	     *
	     * @param $event The "submit" event object
	     */
	    FormGroupDirective.prototype.onSubmit = function ($event) {
	        this.submitted = true;
	        syncPendingControls(this.form, this.directives);
	        this.ngSubmit.emit($event);
	        return false;
	    };
	    /**
	     * @description
	     * Method called when the "reset" event is triggered on the form.
	     */
	    FormGroupDirective.prototype.onReset = function () {
	        this.resetForm();
	    };
	    /**
	     * @description
	     * Resets the form to an initial value and resets its submitted status.
	     *
	     * @param value The new value for the form.
	     */
	    FormGroupDirective.prototype.resetForm = function (value) {
	        if (value === void 0) { value = undefined; }
	        this.form.reset(value);
	        this.submitted = false;
	    };
	    /** @internal */
	    FormGroupDirective.prototype._updateDomValue = function () {
	        var _this = this;
	        this.directives.forEach(function (dir) {
	            var newCtrl = _this.form.get(dir.path);
	            if (dir.control !== newCtrl) {
	                cleanUpControl(dir.control, dir);
	                if (newCtrl)
	                    setUpControl(newCtrl, dir);
	                dir.control = newCtrl;
	            }
	        });
	        this.form._updateTreeValidity({ emitEvent: false });
	    };
	    FormGroupDirective.prototype._updateRegistrations = function () {
	        var _this = this;
	        this.form._registerOnCollectionChange(function () { return _this._updateDomValue(); });
	        if (this._oldForm)
	            this._oldForm._registerOnCollectionChange(function () { });
	        this._oldForm = this.form;
	    };
	    FormGroupDirective.prototype._updateValidators = function () {
	        var sync = composeValidators(this._validators);
	        this.form.validator = Validators.compose([this.form.validator, sync]);
	        var async = composeAsyncValidators(this._asyncValidators);
	        this.form.asyncValidator = Validators.composeAsync([this.form.asyncValidator, async]);
	    };
	    FormGroupDirective.prototype._checkFormPresent = function () {
	        if (!this.form) {
	            ReactiveErrors.missingFormException();
	        }
	    };
	    __decorate([
	        Input('formGroup'),
	        __metadata("design:type", FormGroup)
	    ], FormGroupDirective.prototype, "form", void 0);
	    __decorate([
	        Output(),
	        __metadata("design:type", Object)
	    ], FormGroupDirective.prototype, "ngSubmit", void 0);
	    FormGroupDirective = __decorate([
	        Directive({
	            selector: '[formGroup]',
	            providers: [formDirectiveProvider$1],
	            host: { '(submit)': 'onSubmit($event)', '(reset)': 'onReset()' },
	            exportAs: 'ngForm'
	        }),
	        __param(0, Optional()), __param(0, Self()), __param(0, Inject(NG_VALIDATORS)),
	        __param(1, Optional()), __param(1, Self()), __param(1, Inject(NG_ASYNC_VALIDATORS)),
	        __metadata("design:paramtypes", [Array, Array])
	    ], FormGroupDirective);
	    return FormGroupDirective;
	}(ControlContainer));

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	var formGroupNameProvider = {
	    provide: ControlContainer,
	    useExisting: forwardRef(function () { return FormGroupName; })
	};
	/**
	 * @description
	 *
	 * Syncs a nested `FormGroup` to a DOM element.
	 *
	 * This directive can only be used with a parent `FormGroupDirective`.
	 *
	 * It accepts the string name of the nested `FormGroup` to link, and
	 * looks for a `FormGroup` registered with that name in the parent
	 * `FormGroup` instance you passed into `FormGroupDirective`.
	 *
	 * Use nested form groups to validate a sub-group of a
	 * form separately from the rest or to group the values of certain
	 * controls into their own nested object.
	 *
	 * @see [Reactive Forms Guide](guide/reactive-forms)
	 *
	 * @usageNotes
	 *
	 * ### Access the group by name
	 *
	 * The following example uses the {@link AbstractControl#get get} method to access the
	 * associated `FormGroup`
	 *
	 * ```ts
	 *   this.form.get('name');
	 * ```
	 *
	 * ### Access individual controls in the group
	 *
	 * The following example uses the {@link AbstractControl#get get} method to access
	 * individual controls within the group using dot syntax.
	 *
	 * ```ts
	 *   this.form.get('name.first');
	 * ```
	 *
	 * ### Register a nested `FormGroup`.
	 *
	 * The following example registers a nested *name* `FormGroup` within an existing `FormGroup`,
	 * and provides methods to retrieve the nested `FormGroup` and individual controls.
	 *
	 * {@example forms/ts/nestedFormGroup/nested_form_group_example.ts region='Component'}
	 *
	 * @ngModule ReactiveFormsModule
	 * @publicApi
	 */
	var FormGroupName = /** @class */ (function (_super) {
	    __extends(FormGroupName, _super);
	    function FormGroupName(parent, validators, asyncValidators) {
	        var _this = _super.call(this) || this;
	        _this._parent = parent;
	        _this._validators = validators;
	        _this._asyncValidators = asyncValidators;
	        return _this;
	    }
	    /** @internal */
	    FormGroupName.prototype._checkParentType = function () {
	        if (_hasInvalidParent(this._parent)) {
	            ReactiveErrors.groupParentException();
	        }
	    };
	    __decorate([
	        Input('formGroupName'),
	        __metadata("design:type", Object)
	    ], FormGroupName.prototype, "name", void 0);
	    FormGroupName = __decorate([
	        Directive({ selector: '[formGroupName]', providers: [formGroupNameProvider] }),
	        __param(0, Optional()), __param(0, Host()), __param(0, SkipSelf()),
	        __param(1, Optional()), __param(1, Self()), __param(1, Inject(NG_VALIDATORS)),
	        __param(2, Optional()), __param(2, Self()), __param(2, Inject(NG_ASYNC_VALIDATORS)),
	        __metadata("design:paramtypes", [ControlContainer, Array, Array])
	    ], FormGroupName);
	    return FormGroupName;
	}(AbstractFormGroupDirective));
	var formArrayNameProvider = {
	    provide: ControlContainer,
	    useExisting: forwardRef(function () { return FormArrayName; })
	};
	/**
	 * @description
	 *
	 * Syncs a nested `FormArray` to a DOM element.
	 *
	 * This directive is designed to be used with a parent `FormGroupDirective` (selector:
	 * `[formGroup]`).
	 *
	 * It accepts the string name of the nested `FormArray` you want to link, and
	 * will look for a `FormArray` registered with that name in the parent
	 * `FormGroup` instance you passed into `FormGroupDirective`.
	 *
	 * @see [Reactive Forms Guide](guide/reactive-forms)
	 * @see `AbstractControl`
	 *
	 * @usageNotes
	 *
	 * ### Example
	 *
	 * {@example forms/ts/nestedFormArray/nested_form_array_example.ts region='Component'}
	 *
	 * @ngModule ReactiveFormsModule
	 * @publicApi
	 */
	var FormArrayName = /** @class */ (function (_super) {
	    __extends(FormArrayName, _super);
	    function FormArrayName(parent, validators, asyncValidators) {
	        var _this = _super.call(this) || this;
	        _this._parent = parent;
	        _this._validators = validators;
	        _this._asyncValidators = asyncValidators;
	        return _this;
	    }
	    /**
	     * @description
	     * A lifecycle method called when the directive's inputs are initialized. For internal use only.
	     *
	     * @throws If the directive does not have a valid parent.
	     */
	    FormArrayName.prototype.ngOnInit = function () {
	        this._checkParentType();
	        this.formDirective.addFormArray(this);
	    };
	    /**
	     * @description
	     * A lifecycle method called before the directive's instance is destroyed. For internal use only.
	     */
	    FormArrayName.prototype.ngOnDestroy = function () {
	        if (this.formDirective) {
	            this.formDirective.removeFormArray(this);
	        }
	    };
	    Object.defineProperty(FormArrayName.prototype, "control", {
	        /**
	         * @description
	         * The `FormArray` bound to this directive.
	         */
	        get: function () {
	            return this.formDirective.getFormArray(this);
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(FormArrayName.prototype, "formDirective", {
	        /**
	         * @description
	         * The top-level directive for this group if present, otherwise null.
	         */
	        get: function () {
	            return this._parent ? this._parent.formDirective : null;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(FormArrayName.prototype, "path", {
	        /**
	         * @description
	         * Returns an array that represents the path from the top-level form to this control.
	         * Each index is the string name of the control on that level.
	         */
	        get: function () {
	            return controlPath(this.name == null ? this.name : this.name.toString(), this._parent);
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(FormArrayName.prototype, "validator", {
	        /**
	         * @description
	         * Synchronous validator function composed of all the synchronous validators registered with this
	         * directive.
	         */
	        get: function () {
	            return composeValidators(this._validators);
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(FormArrayName.prototype, "asyncValidator", {
	        /**
	         * @description
	         * Async validator function composed of all the async validators registered with this directive.
	         */
	        get: function () {
	            return composeAsyncValidators(this._asyncValidators);
	        },
	        enumerable: true,
	        configurable: true
	    });
	    FormArrayName.prototype._checkParentType = function () {
	        if (_hasInvalidParent(this._parent)) {
	            ReactiveErrors.arrayParentException();
	        }
	    };
	    __decorate([
	        Input('formArrayName'),
	        __metadata("design:type", Object)
	    ], FormArrayName.prototype, "name", void 0);
	    FormArrayName = __decorate([
	        Directive({ selector: '[formArrayName]', providers: [formArrayNameProvider] }),
	        __param(0, Optional()), __param(0, Host()), __param(0, SkipSelf()),
	        __param(1, Optional()), __param(1, Self()), __param(1, Inject(NG_VALIDATORS)),
	        __param(2, Optional()), __param(2, Self()), __param(2, Inject(NG_ASYNC_VALIDATORS)),
	        __metadata("design:paramtypes", [ControlContainer, Array, Array])
	    ], FormArrayName);
	    return FormArrayName;
	}(ControlContainer));
	function _hasInvalidParent(parent) {
	    return !(parent instanceof FormGroupName) && !(parent instanceof FormGroupDirective) &&
	        !(parent instanceof FormArrayName);
	}

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	var controlNameBinding = {
	    provide: NgControl,
	    useExisting: forwardRef(function () { return FormControlName; })
	};
	/**
	 * @description
	 * Syncs a `FormControl` in an existing `FormGroup` to a form control
	 * element by name.
	 *
	 * @see [Reactive Forms Guide](guide/reactive-forms)
	 * @see `FormControl`
	 * @see `AbstractControl`
	 *
	 * @usageNotes
	 *
	 * ### Register `FormControl` within a group
	 *
	 * The following example shows how to register multiple form controls within a form group
	 * and set their value.
	 *
	 * {@example forms/ts/simpleFormGroup/simple_form_group_example.ts region='Component'}
	 *
	 * To see `formControlName` examples with different form control types, see:
	 *
	 * * Radio buttons: `RadioControlValueAccessor`
	 * * Selects: `SelectControlValueAccessor`
	 *
	 * ### Use with ngModel is deprecated
	 *
	 * Support for using the `ngModel` input property and `ngModelChange` event with reactive
	 * form directives has been deprecated in Angular v6 and is scheduled for removal in
	 * a future version of Angular.
	 *
	 * For details, see [Deprecated features](guide/deprecations#ngmodel-with-reactive-forms).
	 *
	 * @ngModule ReactiveFormsModule
	 * @publicApi
	 */
	var FormControlName = /** @class */ (function (_super) {
	    __extends(FormControlName, _super);
	    function FormControlName(parent, validators, asyncValidators, valueAccessors, _ngModelWarningConfig) {
	        var _this = _super.call(this) || this;
	        _this._ngModelWarningConfig = _ngModelWarningConfig;
	        _this._added = false;
	        /** @deprecated as of v6 */
	        _this.update = new EventEmitter();
	        /**
	         * @description
	         * Instance property used to track whether an ngModel warning has been sent out for this
	         * particular FormControlName instance. Used to support warning config of "always".
	         *
	         * @internal
	         */
	        _this._ngModelWarningSent = false;
	        _this._parent = parent;
	        _this._rawValidators = validators || [];
	        _this._rawAsyncValidators = asyncValidators || [];
	        _this.valueAccessor = selectValueAccessor(_this, valueAccessors);
	        return _this;
	    }
	    FormControlName_1 = FormControlName;
	    Object.defineProperty(FormControlName.prototype, "isDisabled", {
	        /**
	         * @description
	         * Triggers a warning that this input should not be used with reactive forms.
	         */
	        set: function (isDisabled) {
	            ReactiveErrors.disabledAttrWarning();
	        },
	        enumerable: true,
	        configurable: true
	    });
	    /**
	     * @description
	     * A lifecycle method called when the directive's inputs change. For internal use only.
	     *
	     * @param changes A object of key/value pairs for the set of changed inputs.
	     */
	    FormControlName.prototype.ngOnChanges = function (changes) {
	        if (!this._added)
	            this._setUpControl();
	        if (isPropertyUpdated(changes, this.viewModel)) {
	            _ngModelWarning('formControlName', FormControlName_1, this, this._ngModelWarningConfig);
	            this.viewModel = this.model;
	            this.formDirective.updateModel(this, this.model);
	        }
	    };
	    /**
	     * @description
	     * Lifecycle method called before the directive's instance is destroyed. For internal use only.
	     */
	    FormControlName.prototype.ngOnDestroy = function () {
	        if (this.formDirective) {
	            this.formDirective.removeControl(this);
	        }
	    };
	    /**
	     * @description
	     * Sets the new value for the view model and emits an `ngModelChange` event.
	     *
	     * @param newValue The new value for the view model.
	     */
	    FormControlName.prototype.viewToModelUpdate = function (newValue) {
	        this.viewModel = newValue;
	        this.update.emit(newValue);
	    };
	    Object.defineProperty(FormControlName.prototype, "path", {
	        /**
	         * @description
	         * Returns an array that represents the path from the top-level form to this control.
	         * Each index is the string name of the control on that level.
	         */
	        get: function () {
	            return controlPath(this.name == null ? this.name : this.name.toString(), this._parent);
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(FormControlName.prototype, "formDirective", {
	        /**
	         * @description
	         * The top-level directive for this group if present, otherwise null.
	         */
	        get: function () {
	            return this._parent ? this._parent.formDirective : null;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(FormControlName.prototype, "validator", {
	        /**
	         * @description
	         * Synchronous validator function composed of all the synchronous validators
	         * registered with this directive.
	         */
	        get: function () {
	            return composeValidators(this._rawValidators);
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(FormControlName.prototype, "asyncValidator", {
	        /**
	         * @description
	         * Async validator function composed of all the async validators registered with this
	         * directive.
	         */
	        get: function () {
	            return composeAsyncValidators(this._rawAsyncValidators);
	        },
	        enumerable: true,
	        configurable: true
	    });
	    FormControlName.prototype._checkParentType = function () {
	        if (!(this._parent instanceof FormGroupName) &&
	            this._parent instanceof AbstractFormGroupDirective) {
	            ReactiveErrors.ngModelGroupException();
	        }
	        else if (!(this._parent instanceof FormGroupName) && !(this._parent instanceof FormGroupDirective) &&
	            !(this._parent instanceof FormArrayName)) {
	            ReactiveErrors.controlParentException();
	        }
	    };
	    FormControlName.prototype._setUpControl = function () {
	        this._checkParentType();
	        this.control = this.formDirective.addControl(this);
	        if (this.control.disabled && this.valueAccessor.setDisabledState) {
	            this.valueAccessor.setDisabledState(true);
	        }
	        this._added = true;
	    };
	    var FormControlName_1;
	    /**
	     * @description
	     * Static property used to track whether any ngModel warnings have been sent across
	     * all instances of FormControlName. Used to support warning config of "once".
	     *
	     * @internal
	     */
	    FormControlName._ngModelWarningSentOnce = false;
	    __decorate([
	        Input('formControlName'),
	        __metadata("design:type", Object)
	    ], FormControlName.prototype, "name", void 0);
	    __decorate([
	        Input('disabled'),
	        __metadata("design:type", Boolean),
	        __metadata("design:paramtypes", [Boolean])
	    ], FormControlName.prototype, "isDisabled", null);
	    __decorate([
	        Input('ngModel'),
	        __metadata("design:type", Object)
	    ], FormControlName.prototype, "model", void 0);
	    __decorate([
	        Output('ngModelChange'),
	        __metadata("design:type", Object)
	    ], FormControlName.prototype, "update", void 0);
	    FormControlName = FormControlName_1 = __decorate([
	        Directive({ selector: '[formControlName]', providers: [controlNameBinding] }),
	        __param(0, Optional()), __param(0, Host()), __param(0, SkipSelf()),
	        __param(1, Optional()), __param(1, Self()), __param(1, Inject(NG_VALIDATORS)),
	        __param(2, Optional()), __param(2, Self()), __param(2, Inject(NG_ASYNC_VALIDATORS)),
	        __param(3, Optional()), __param(3, Self()), __param(3, Inject(NG_VALUE_ACCESSOR)),
	        __param(4, Optional()), __param(4, Inject(NG_MODEL_WITH_FORM_CONTROL_WARNING)),
	        __metadata("design:paramtypes", [ControlContainer,
	            Array,
	            Array, Array, Object])
	    ], FormControlName);
	    return FormControlName;
	}(NgControl));

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * @description
	 * Provider which adds `RequiredValidator` to the `NG_VALIDATORS` multi-provider list.
	 */
	var REQUIRED_VALIDATOR = {
	    provide: NG_VALIDATORS,
	    useExisting: forwardRef(function () { return RequiredValidator; }),
	    multi: true
	};
	/**
	 * @description
	 * Provider which adds `CheckboxRequiredValidator` to the `NG_VALIDATORS` multi-provider list.
	 */
	var CHECKBOX_REQUIRED_VALIDATOR = {
	    provide: NG_VALIDATORS,
	    useExisting: forwardRef(function () { return CheckboxRequiredValidator; }),
	    multi: true
	};
	/**
	 * @description
	 * A directive that adds the `required` validator to any controls marked with the
	 * `required` attribute. The directive is provided with the `NG_VALIDATORS` multi-provider list.
	 *
	 * @see [Form Validation](guide/form-validation)
	 *
	 * @usageNotes
	 *
	 * ### Adding a required validator using template-driven forms
	 *
	 * ```
	 * <input name="fullName" ngModel required>
	 * ```
	 *
	 * @ngModule FormsModule
	 * @ngModule ReactiveFormsModule
	 * @publicApi
	 */
	var RequiredValidator = /** @class */ (function () {
	    function RequiredValidator() {
	    }
	    Object.defineProperty(RequiredValidator.prototype, "required", {
	        /**
	         * @description
	         * Tracks changes to the required attribute bound to this directive.
	         */
	        get: function () {
	            return this._required;
	        },
	        set: function (value) {
	            this._required = value != null && value !== false && "" + value !== 'false';
	            if (this._onChange)
	                this._onChange();
	        },
	        enumerable: true,
	        configurable: true
	    });
	    /**
	     * @description
	     * Method that validates whether the control is empty.
	     * Returns the validation result if enabled, otherwise null.
	     */
	    RequiredValidator.prototype.validate = function (control) {
	        return this.required ? Validators.required(control) : null;
	    };
	    /**
	     * @description
	     * Registers a callback function to call when the validator inputs change.
	     *
	     * @param fn The callback function
	     */
	    RequiredValidator.prototype.registerOnValidatorChange = function (fn) {
	        this._onChange = fn;
	    };
	    __decorate([
	        Input(),
	        __metadata("design:type", Object),
	        __metadata("design:paramtypes", [Object])
	    ], RequiredValidator.prototype, "required", null);
	    RequiredValidator = __decorate([
	        Directive({
	            selector: ':not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]',
	            providers: [REQUIRED_VALIDATOR],
	            host: { '[attr.required]': 'required ? "" : null' }
	        })
	    ], RequiredValidator);
	    return RequiredValidator;
	}());
	/**
	 * A Directive that adds the `required` validator to checkbox controls marked with the
	 * `required` attribute. The directive is provided with the `NG_VALIDATORS` multi-provider list.
	 *
	 * @see [Form Validation](guide/form-validation)
	 *
	 * @usageNotes
	 *
	 * ### Adding a required checkbox validator using template-driven forms
	 *
	 * The following example shows how to add a checkbox required validator to an input attached to an
	 * ngModel binding.
	 *
	 * ```
	 * <input type="checkbox" name="active" ngModel required>
	 * ```
	 *
	 * @publicApi
	 * @ngModule FormsModule
	 * @ngModule ReactiveFormsModule
	 */
	var CheckboxRequiredValidator = /** @class */ (function (_super) {
	    __extends(CheckboxRequiredValidator, _super);
	    function CheckboxRequiredValidator() {
	        return _super !== null && _super.apply(this, arguments) || this;
	    }
	    /**
	     * @description
	     * Method that validates whether or not the checkbox has been checked.
	     * Returns the validation result if enabled, otherwise null.
	     */
	    CheckboxRequiredValidator.prototype.validate = function (control) {
	        return this.required ? Validators.requiredTrue(control) : null;
	    };
	    CheckboxRequiredValidator = __decorate([
	        Directive({
	            selector: 'input[type=checkbox][required][formControlName],input[type=checkbox][required][formControl],input[type=checkbox][required][ngModel]',
	            providers: [CHECKBOX_REQUIRED_VALIDATOR],
	            host: { '[attr.required]': 'required ? "" : null' }
	        })
	    ], CheckboxRequiredValidator);
	    return CheckboxRequiredValidator;
	}(RequiredValidator));
	/**
	 * @description
	 * Provider which adds `EmailValidator` to the `NG_VALIDATORS` multi-provider list.
	 */
	var EMAIL_VALIDATOR = {
	    provide: NG_VALIDATORS,
	    useExisting: forwardRef(function () { return EmailValidator; }),
	    multi: true
	};
	/**
	 * A directive that adds the `email` validator to controls marked with the
	 * `email` attribute. The directive is provided with the `NG_VALIDATORS` multi-provider list.
	 *
	 * @see [Form Validation](guide/form-validation)
	 *
	 * @usageNotes
	 *
	 * ### Adding an email validator
	 *
	 * The following example shows how to add an email validator to an input attached to an ngModel
	 * binding.
	 *
	 * ```
	 * <input type="email" name="email" ngModel email>
	 * <input type="email" name="email" ngModel email="true">
	 * <input type="email" name="email" ngModel [email]="true">
	 * ```
	 *
	 * @publicApi
	 * @ngModule FormsModule
	 * @ngModule ReactiveFormsModule
	 */
	var EmailValidator = /** @class */ (function () {
	    function EmailValidator() {
	    }
	    Object.defineProperty(EmailValidator.prototype, "email", {
	        /**
	         * @description
	         * Tracks changes to the email attribute bound to this directive.
	         */
	        set: function (value) {
	            this._enabled = value === '' || value === true || value === 'true';
	            if (this._onChange)
	                this._onChange();
	        },
	        enumerable: true,
	        configurable: true
	    });
	    /**
	     * @description
	     * Method that validates whether an email address is valid.
	     * Returns the validation result if enabled, otherwise null.
	     */
	    EmailValidator.prototype.validate = function (control) {
	        return this._enabled ? Validators.email(control) : null;
	    };
	    /**
	     * @description
	     * Registers a callback function to call when the validator inputs change.
	     *
	     * @param fn The callback function
	     */
	    EmailValidator.prototype.registerOnValidatorChange = function (fn) {
	        this._onChange = fn;
	    };
	    __decorate([
	        Input(),
	        __metadata("design:type", Object),
	        __metadata("design:paramtypes", [Object])
	    ], EmailValidator.prototype, "email", null);
	    EmailValidator = __decorate([
	        Directive({
	            selector: '[email][formControlName],[email][formControl],[email][ngModel]',
	            providers: [EMAIL_VALIDATOR]
	        })
	    ], EmailValidator);
	    return EmailValidator;
	}());
	/**
	 * @description
	 * Provider which adds `MinLengthValidator` to the `NG_VALIDATORS` multi-provider list.
	 */
	var MIN_LENGTH_VALIDATOR = {
	    provide: NG_VALIDATORS,
	    useExisting: forwardRef(function () { return MinLengthValidator; }),
	    multi: true
	};
	/**
	 * A directive that adds minimum length validation to controls marked with the
	 * `minlength` attribute. The directive is provided with the `NG_VALIDATORS` multi-provider list.
	 *
	 * @see [Form Validation](guide/form-validation)
	 *
	 * @usageNotes
	 *
	 * ### Adding a minimum length validator
	 *
	 * The following example shows how to add a minimum length validator to an input attached to an
	 * ngModel binding.
	 *
	 * ```html
	 * <input name="firstName" ngModel minlength="4">
	 * ```
	 *
	 * @ngModule ReactiveFormsModule
	 * @ngModule FormsModule
	 * @publicApi
	 */
	var MinLengthValidator = /** @class */ (function () {
	    function MinLengthValidator() {
	    }
	    /**
	     * @description
	     * A lifecycle method called when the directive's inputs change. For internal use
	     * only.
	     *
	     * @param changes A object of key/value pairs for the set of changed inputs.
	     */
	    MinLengthValidator.prototype.ngOnChanges = function (changes) {
	        if ('minlength' in changes) {
	            this._createValidator();
	            if (this._onChange)
	                this._onChange();
	        }
	    };
	    /**
	     * @description
	     * Method that validates whether the value meets a minimum length
	     * requirement. Returns the validation result if enabled, otherwise null.
	     */
	    MinLengthValidator.prototype.validate = function (control) {
	        return this.minlength == null ? null : this._validator(control);
	    };
	    /**
	     * @description
	     * Registers a callback function to call when the validator inputs change.
	     *
	     * @param fn The callback function
	     */
	    MinLengthValidator.prototype.registerOnValidatorChange = function (fn) {
	        this._onChange = fn;
	    };
	    MinLengthValidator.prototype._createValidator = function () {
	        this._validator = Validators.minLength(typeof this.minlength === 'number' ? this.minlength : parseInt(this.minlength, 10));
	    };
	    __decorate([
	        Input(),
	        __metadata("design:type", Object)
	    ], MinLengthValidator.prototype, "minlength", void 0);
	    MinLengthValidator = __decorate([
	        Directive({
	            selector: '[minlength][formControlName],[minlength][formControl],[minlength][ngModel]',
	            providers: [MIN_LENGTH_VALIDATOR],
	            host: { '[attr.minlength]': 'minlength ? minlength : null' }
	        })
	    ], MinLengthValidator);
	    return MinLengthValidator;
	}());
	/**
	 * @description
	 * Provider which adds `MaxLengthValidator` to the `NG_VALIDATORS` multi-provider list.
	 */
	var MAX_LENGTH_VALIDATOR = {
	    provide: NG_VALIDATORS,
	    useExisting: forwardRef(function () { return MaxLengthValidator; }),
	    multi: true
	};
	/**
	 * A directive that adds max length validation to controls marked with the
	 * `maxlength` attribute. The directive is provided with the `NG_VALIDATORS` multi-provider list.
	 *
	 * @see [Form Validation](guide/form-validation)
	 *
	 * @usageNotes
	 *
	 * ### Adding a maximum length validator
	 *
	 * The following example shows how to add a maximum length validator to an input attached to an
	 * ngModel binding.
	 *
	 * ```html
	 * <input name="firstName" ngModel maxlength="25">
	 * ```
	 *
	 * @ngModule ReactiveFormsModule
	 * @ngModule FormsModule
	 * @publicApi
	 */
	var MaxLengthValidator = /** @class */ (function () {
	    function MaxLengthValidator() {
	    }
	    /**
	     * @description
	     * A lifecycle method called when the directive's inputs change. For internal use
	     * only.
	     *
	     * @param changes A object of key/value pairs for the set of changed inputs.
	     */
	    MaxLengthValidator.prototype.ngOnChanges = function (changes) {
	        if ('maxlength' in changes) {
	            this._createValidator();
	            if (this._onChange)
	                this._onChange();
	        }
	    };
	    /**
	     * @description
	     * Method that validates whether the value exceeds
	     * the maximum length requirement.
	     */
	    MaxLengthValidator.prototype.validate = function (control) {
	        return this.maxlength != null ? this._validator(control) : null;
	    };
	    /**
	     * @description
	     * Registers a callback function to call when the validator inputs change.
	     *
	     * @param fn The callback function
	     */
	    MaxLengthValidator.prototype.registerOnValidatorChange = function (fn) {
	        this._onChange = fn;
	    };
	    MaxLengthValidator.prototype._createValidator = function () {
	        this._validator = Validators.maxLength(typeof this.maxlength === 'number' ? this.maxlength : parseInt(this.maxlength, 10));
	    };
	    __decorate([
	        Input(),
	        __metadata("design:type", Object)
	    ], MaxLengthValidator.prototype, "maxlength", void 0);
	    MaxLengthValidator = __decorate([
	        Directive({
	            selector: '[maxlength][formControlName],[maxlength][formControl],[maxlength][ngModel]',
	            providers: [MAX_LENGTH_VALIDATOR],
	            host: { '[attr.maxlength]': 'maxlength ? maxlength : null' }
	        })
	    ], MaxLengthValidator);
	    return MaxLengthValidator;
	}());
	/**
	 * @description
	 * Provider which adds `PatternValidator` to the `NG_VALIDATORS` multi-provider list.
	 */
	var PATTERN_VALIDATOR = {
	    provide: NG_VALIDATORS,
	    useExisting: forwardRef(function () { return PatternValidator; }),
	    multi: true
	};
	/**
	 * @description
	 * A directive that adds regex pattern validation to controls marked with the
	 * `pattern` attribute. The regex must match the entire control value.
	 * The directive is provided with the `NG_VALIDATORS` multi-provider list.
	 *
	 * @see [Form Validation](guide/form-validation)
	 *
	 * @usageNotes
	 *
	 * ### Adding a pattern validator
	 *
	 * The following example shows how to add a pattern validator to an input attached to an
	 * ngModel binding.
	 *
	 * ```html
	 * <input name="firstName" ngModel pattern="[a-zA-Z ]*">
	 * ```
	 *
	 * @ngModule ReactiveFormsModule
	 * @ngModule FormsModule
	 * @publicApi
	 */
	var PatternValidator = /** @class */ (function () {
	    function PatternValidator() {
	    }
	    /**
	     * @description
	     * A lifecycle method called when the directive's inputs change. For internal use
	     * only.
	     *
	     * @param changes A object of key/value pairs for the set of changed inputs.
	     */
	    PatternValidator.prototype.ngOnChanges = function (changes) {
	        if ('pattern' in changes) {
	            this._createValidator();
	            if (this._onChange)
	                this._onChange();
	        }
	    };
	    /**
	     * @description
	     * Method that validates whether the value matches the
	     * the pattern requirement.
	     */
	    PatternValidator.prototype.validate = function (control) {
	        return this._validator(control);
	    };
	    /**
	     * @description
	     * Registers a callback function to call when the validator inputs change.
	     *
	     * @param fn The callback function
	     */
	    PatternValidator.prototype.registerOnValidatorChange = function (fn) {
	        this._onChange = fn;
	    };
	    PatternValidator.prototype._createValidator = function () {
	        this._validator = Validators.pattern(this.pattern);
	    };
	    __decorate([
	        Input(),
	        __metadata("design:type", Object)
	    ], PatternValidator.prototype, "pattern", void 0);
	    PatternValidator = __decorate([
	        Directive({
	            selector: '[pattern][formControlName],[pattern][formControl],[pattern][ngModel]',
	            providers: [PATTERN_VALIDATOR],
	            host: { '[attr.pattern]': 'pattern ? pattern : null' }
	        })
	    ], PatternValidator);
	    return PatternValidator;
	}());

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	var SHARED_FORM_DIRECTIVES = [
	    ÉµNgNoValidate,
	    NgSelectOption,
	    ÉµNgSelectMultipleOption,
	    DefaultValueAccessor,
	    NumberValueAccessor,
	    RangeValueAccessor,
	    CheckboxControlValueAccessor,
	    SelectControlValueAccessor,
	    SelectMultipleControlValueAccessor,
	    RadioControlValueAccessor,
	    NgControlStatus,
	    NgControlStatusGroup,
	    RequiredValidator,
	    MinLengthValidator,
	    MaxLengthValidator,
	    PatternValidator,
	    CheckboxRequiredValidator,
	    EmailValidator,
	];
	var TEMPLATE_DRIVEN_DIRECTIVES = [NgModel, NgModelGroup, NgForm];
	var REACTIVE_DRIVEN_DIRECTIVES = [FormControlDirective, FormGroupDirective, FormControlName, FormGroupName, FormArrayName];
	/**
	 * Internal module used for sharing directives between FormsModule and ReactiveFormsModule
	 */
	var ÉµInternalFormsSharedModule = /** @class */ (function () {
	    function ÉµInternalFormsSharedModule() {
	    }
	    ÉµInternalFormsSharedModule = __decorate([
	        NgModule({
	            declarations: SHARED_FORM_DIRECTIVES,
	            exports: SHARED_FORM_DIRECTIVES,
	        })
	    ], ÉµInternalFormsSharedModule);
	    return ÉµInternalFormsSharedModule;
	}());

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	function isAbstractControlOptions(options) {
	    return options.asyncValidators !== undefined ||
	        options.validators !== undefined ||
	        options.updateOn !== undefined;
	}
	/**
	 * @description
	 * Creates an `AbstractControl` from a user-specified configuration.
	 *
	 * The `FormBuilder` provides syntactic sugar that shortens creating instances of a `FormControl`,
	 * `FormGroup`, or `FormArray`. It reduces the amount of boilerplate needed to build complex
	 * forms.
	 *
	 * @see [Reactive Forms Guide](/guide/reactive-forms)
	 *
	 * @publicApi
	 */
	var FormBuilder = /** @class */ (function () {
	    function FormBuilder() {
	    }
	    /**
	     * @description
	     * Construct a new `FormGroup` instance.
	     *
	     * @param controlsConfig A collection of child controls. The key for each child is the name
	     * under which it is registered.
	     *
	     * @param options Configuration options object for the `FormGroup`. The object can
	     * have two shapes:
	     *
	     * 1) `AbstractControlOptions` object (preferred), which consists of:
	     * * `validators`: A synchronous validator function, or an array of validator functions
	     * * `asyncValidators`: A single async validator or array of async validator functions
	     * * `updateOn`: The event upon which the control should be updated (options: 'change' | 'blur' |
	     * submit')
	     *
	     * 2) Legacy configuration object, which consists of:
	     * * `validator`: A synchronous validator function, or an array of validator functions
	     * * `asyncValidator`: A single async validator or array of async validator functions
	     *
	     */
	    FormBuilder.prototype.group = function (controlsConfig, options) {
	        if (options === void 0) { options = null; }
	        var controls = this._reduceControls(controlsConfig);
	        var validators = null;
	        var asyncValidators = null;
	        var updateOn = undefined;
	        if (options != null) {
	            if (isAbstractControlOptions(options)) {
	                // `options` are `AbstractControlOptions`
	                validators = options.validators != null ? options.validators : null;
	                asyncValidators = options.asyncValidators != null ? options.asyncValidators : null;
	                updateOn = options.updateOn != null ? options.updateOn : undefined;
	            }
	            else {
	                // `options` are legacy form group options
	                validators = options['validator'] != null ? options['validator'] : null;
	                asyncValidators = options['asyncValidator'] != null ? options['asyncValidator'] : null;
	            }
	        }
	        return new FormGroup(controls, { asyncValidators: asyncValidators, updateOn: updateOn, validators: validators });
	    };
	    /**
	     * @description
	     * Construct a new `FormControl` with the given state, validators and options.
	     *
	     * @param formState Initializes the control with an initial state value, or
	     * with an object that contains both a value and a disabled status.
	     *
	     * @param validatorOrOpts A synchronous validator function, or an array of
	     * such functions, or an `AbstractControlOptions` object that contains
	     * validation functions and a validation trigger.
	     *
	     * @param asyncValidator A single async validator or array of async validator
	     * functions.
	     *
	     * @usageNotes
	     *
	     * ### Initialize a control as disabled
	     *
	     * The following example returns a control with an initial value in a disabled state.
	     *
	     * <code-example path="forms/ts/formBuilder/form_builder_example.ts" region="disabled-control">
	     * </code-example>
	     */
	    FormBuilder.prototype.control = function (formState, validatorOrOpts, asyncValidator) {
	        return new FormControl(formState, validatorOrOpts, asyncValidator);
	    };
	    /**
	     * Constructs a new `FormArray` from the given array of configurations,
	     * validators and options.
	     *
	     * @param controlsConfig An array of child controls or control configs. Each
	     * child control is given an index when it is registered.
	     *
	     * @param validatorOrOpts A synchronous validator function, or an array of
	     * such functions, or an `AbstractControlOptions` object that contains
	     * validation functions and a validation trigger.
	     *
	     * @param asyncValidator A single async validator or array of async validator
	     * functions.
	     */
	    FormBuilder.prototype.array = function (controlsConfig, validatorOrOpts, asyncValidator) {
	        var _this = this;
	        var controls = controlsConfig.map(function (c) { return _this._createControl(c); });
	        return new FormArray(controls, validatorOrOpts, asyncValidator);
	    };
	    /** @internal */
	    FormBuilder.prototype._reduceControls = function (controlsConfig) {
	        var _this = this;
	        var controls = {};
	        Object.keys(controlsConfig).forEach(function (controlName) {
	            controls[controlName] = _this._createControl(controlsConfig[controlName]);
	        });
	        return controls;
	    };
	    /** @internal */
	    FormBuilder.prototype._createControl = function (controlConfig) {
	        if (controlConfig instanceof FormControl || controlConfig instanceof FormGroup ||
	            controlConfig instanceof FormArray) {
	            return controlConfig;
	        }
	        else if (Array.isArray(controlConfig)) {
	            var value = controlConfig[0];
	            var validator = controlConfig.length > 1 ? controlConfig[1] : null;
	            var asyncValidator = controlConfig.length > 2 ? controlConfig[2] : null;
	            return this.control(value, validator, asyncValidator);
	        }
	        else {
	            return this.control(controlConfig);
	        }
	    };
	    FormBuilder = __decorate([
	        Injectable()
	    ], FormBuilder);
	    return FormBuilder;
	}());

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * @publicApi
	 */
	var VERSION$8 = new Version$1('9.1.7');

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * Exports the required providers and directives for template-driven forms,
	 * making them available for import by NgModules that import this module.
	 *
	 * @see [Forms Overview](/guide/forms-overview)
	 * @see [Template-driven Forms Guide](/guide/forms)
	 *
	 * @publicApi
	 */
	var FormsModule = /** @class */ (function () {
	    function FormsModule() {
	    }
	    FormsModule = __decorate([
	        NgModule({
	            declarations: TEMPLATE_DRIVEN_DIRECTIVES,
	            providers: [RadioControlRegistry],
	            exports: [ÉµInternalFormsSharedModule, TEMPLATE_DRIVEN_DIRECTIVES]
	        })
	    ], FormsModule);
	    return FormsModule;
	}());
	/**
	 * Exports the required infrastructure and directives for reactive forms,
	 * making them available for import by NgModules that import this module.
	 *
	 * @see [Forms Overview](guide/forms-overview)
	 * @see [Reactive Forms Guide](guide/reactive-forms)
	 *
	 * @publicApi
	 */
	var ReactiveFormsModule = /** @class */ (function () {
	    function ReactiveFormsModule() {
	    }
	    ReactiveFormsModule_1 = ReactiveFormsModule;
	    /**
	     * @description
	     * Provides options for configuring the reactive forms module.
	     *
	     * @param opts An object of configuration options
	     * * `warnOnNgModelWithFormControl` Configures when to emit a warning when an `ngModel`
	     * binding is used with reactive form directives.
	     */
	    ReactiveFormsModule.withConfig = function (opts) {
	        return {
	            ngModule: ReactiveFormsModule_1,
	            providers: [
	                { provide: NG_MODEL_WITH_FORM_CONTROL_WARNING, useValue: opts.warnOnNgModelWithFormControl }
	            ]
	        };
	    };
	    var ReactiveFormsModule_1;
	    ReactiveFormsModule = ReactiveFormsModule_1 = __decorate([
	        NgModule({
	            declarations: [REACTIVE_DRIVEN_DIRECTIVES],
	            providers: [FormBuilder, RadioControlRegistry],
	            exports: [ÉµInternalFormsSharedModule, REACTIVE_DRIVEN_DIRECTIVES]
	        })
	    ], ReactiveFormsModule);
	    return ReactiveFormsModule;
	}());

	/**
	 * @license
	 * Copyright Google LLC All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	var MatDivider = /** @class */ (function () {
	    function MatDivider() {
	        this._vertical = false;
	        this._inset = false;
	    }
	    Object.defineProperty(MatDivider.prototype, "vertical", {
	        /** Whether the divider is vertically aligned. */
	        get: function () { return this._vertical; },
	        set: function (value) { this._vertical = coerceBooleanProperty(value); },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(MatDivider.prototype, "inset", {
	        /** Whether the divider is an inset divider. */
	        get: function () { return this._inset; },
	        set: function (value) { this._inset = coerceBooleanProperty(value); },
	        enumerable: true,
	        configurable: true
	    });
	    MatDivider.decorators = [
	        { type: Component, args: [{
	                    selector: 'mat-divider',
	                    host: {
	                        'role': 'separator',
	                        '[attr.aria-orientation]': 'vertical ? "vertical" : "horizontal"',
	                        '[class.mat-divider-vertical]': 'vertical',
	                        '[class.mat-divider-horizontal]': '!vertical',
	                        '[class.mat-divider-inset]': 'inset',
	                        'class': 'mat-divider'
	                    },
	                    template: '',
	                    encapsulation: ViewEncapsulation$1$1.None,
	                    changeDetection: ChangeDetectionStrategy$1.OnPush,
	                    styles: [".mat-divider{display:block;margin:0;border-top-width:1px;border-top-style:solid}.mat-divider.mat-divider-vertical{border-top:0;border-right-width:1px;border-right-style:solid}.mat-divider.mat-divider-inset{margin-left:80px}[dir=rtl] .mat-divider.mat-divider-inset{margin-left:auto;margin-right:80px}\n"]
	                }] }
	    ];
	    MatDivider.propDecorators = {
	        vertical: [{ type: Input }],
	        inset: [{ type: Input }]
	    };
	    return MatDivider;
	}());

	/**
	 * @license
	 * Copyright Google LLC All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	var MatDividerModule = /** @class */ (function () {
	    function MatDividerModule() {
	    }
	    MatDividerModule.decorators = [
	        { type: NgModule, args: [{
	                    imports: [MatCommonModule],
	                    exports: [MatDivider, MatCommonModule],
	                    declarations: [MatDivider],
	                },] }
	    ];
	    return MatDividerModule;
	}());

	/**
	 * @license
	 * Copyright Google LLC All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	// Boilerplate for applying mixins to MatList.
	/** @docs-private */
	var MatListBase = /** @class */ (function () {
	    function MatListBase() {
	    }
	    return MatListBase;
	}());
	var _MatListMixinBase = mixinDisabled(mixinDisableRipple(MatListBase));
	// Boilerplate for applying mixins to MatListItem.
	/** @docs-private */
	var MatListItemBase = /** @class */ (function () {
	    function MatListItemBase() {
	    }
	    return MatListItemBase;
	}());
	var _MatListItemMixinBase = mixinDisableRipple(MatListItemBase);
	var MatNavList = /** @class */ (function (_super) {
	    __extends(MatNavList, _super);
	    function MatNavList() {
	        var _this = _super !== null && _super.apply(this, arguments) || this;
	        /** Emits when the state of the list changes. */
	        _this._stateChanges = new Subject();
	        return _this;
	    }
	    MatNavList.prototype.ngOnChanges = function () {
	        this._stateChanges.next();
	    };
	    MatNavList.prototype.ngOnDestroy = function () {
	        this._stateChanges.complete();
	    };
	    MatNavList.decorators = [
	        { type: Component, args: [{
	                    selector: 'mat-nav-list',
	                    exportAs: 'matNavList',
	                    host: {
	                        'role': 'navigation',
	                        'class': 'mat-nav-list mat-list-base'
	                    },
	                    template: "<ng-content></ng-content>\n\n",
	                    inputs: ['disableRipple', 'disabled'],
	                    encapsulation: ViewEncapsulation$1$1.None,
	                    changeDetection: ChangeDetectionStrategy$1.OnPush,
	                    styles: [".mat-subheader{display:flex;box-sizing:border-box;padding:16px;align-items:center}.mat-list-base .mat-subheader{margin:0}.mat-list-base{padding-top:8px;display:block;-webkit-tap-highlight-color:transparent}.mat-list-base .mat-subheader{height:48px;line-height:16px}.mat-list-base .mat-subheader:first-child{margin-top:-8px}.mat-list-base .mat-list-item,.mat-list-base .mat-list-option{display:block;height:48px;-webkit-tap-highlight-color:transparent;width:100%;padding:0;position:relative}.mat-list-base .mat-list-item .mat-list-item-content,.mat-list-base .mat-list-option .mat-list-item-content{display:flex;flex-direction:row;align-items:center;box-sizing:border-box;padding:0 16px;position:relative;height:inherit}.mat-list-base .mat-list-item .mat-list-item-content-reverse,.mat-list-base .mat-list-option .mat-list-item-content-reverse{display:flex;align-items:center;padding:0 16px;flex-direction:row-reverse;justify-content:space-around}.mat-list-base .mat-list-item .mat-list-item-ripple,.mat-list-base .mat-list-option .mat-list-item-ripple{top:0;left:0;right:0;bottom:0;position:absolute;pointer-events:none}.mat-list-base .mat-list-item.mat-list-item-with-avatar,.mat-list-base .mat-list-option.mat-list-item-with-avatar{height:56px}.mat-list-base .mat-list-item.mat-2-line,.mat-list-base .mat-list-option.mat-2-line{height:72px}.mat-list-base .mat-list-item.mat-3-line,.mat-list-base .mat-list-option.mat-3-line{height:88px}.mat-list-base .mat-list-item.mat-multi-line,.mat-list-base .mat-list-option.mat-multi-line{height:auto}.mat-list-base .mat-list-item.mat-multi-line .mat-list-item-content,.mat-list-base .mat-list-option.mat-multi-line .mat-list-item-content{padding-top:16px;padding-bottom:16px}.mat-list-base .mat-list-item .mat-list-text,.mat-list-base .mat-list-option .mat-list-text{display:flex;flex-direction:column;width:100%;box-sizing:border-box;overflow:hidden;padding:0}.mat-list-base .mat-list-item .mat-list-text>*,.mat-list-base .mat-list-option .mat-list-text>*{margin:0;padding:0;font-weight:normal;font-size:inherit}.mat-list-base .mat-list-item .mat-list-text:empty,.mat-list-base .mat-list-option .mat-list-text:empty{display:none}.mat-list-base .mat-list-item.mat-list-item-with-avatar .mat-list-item-content .mat-list-text,.mat-list-base .mat-list-item.mat-list-option .mat-list-item-content .mat-list-text,.mat-list-base .mat-list-option.mat-list-item-with-avatar .mat-list-item-content .mat-list-text,.mat-list-base .mat-list-option.mat-list-option .mat-list-item-content .mat-list-text{padding-right:0;padding-left:16px}[dir=rtl] .mat-list-base .mat-list-item.mat-list-item-with-avatar .mat-list-item-content .mat-list-text,[dir=rtl] .mat-list-base .mat-list-item.mat-list-option .mat-list-item-content .mat-list-text,[dir=rtl] .mat-list-base .mat-list-option.mat-list-item-with-avatar .mat-list-item-content .mat-list-text,[dir=rtl] .mat-list-base .mat-list-option.mat-list-option .mat-list-item-content .mat-list-text{padding-right:16px;padding-left:0}.mat-list-base .mat-list-item.mat-list-item-with-avatar .mat-list-item-content-reverse .mat-list-text,.mat-list-base .mat-list-item.mat-list-option .mat-list-item-content-reverse .mat-list-text,.mat-list-base .mat-list-option.mat-list-item-with-avatar .mat-list-item-content-reverse .mat-list-text,.mat-list-base .mat-list-option.mat-list-option .mat-list-item-content-reverse .mat-list-text{padding-left:0;padding-right:16px}[dir=rtl] .mat-list-base .mat-list-item.mat-list-item-with-avatar .mat-list-item-content-reverse .mat-list-text,[dir=rtl] .mat-list-base .mat-list-item.mat-list-option .mat-list-item-content-reverse .mat-list-text,[dir=rtl] .mat-list-base .mat-list-option.mat-list-item-with-avatar .mat-list-item-content-reverse .mat-list-text,[dir=rtl] .mat-list-base .mat-list-option.mat-list-option .mat-list-item-content-reverse .mat-list-text{padding-right:0;padding-left:16px}.mat-list-base .mat-list-item.mat-list-item-with-avatar.mat-list-option .mat-list-item-content-reverse .mat-list-text,.mat-list-base .mat-list-item.mat-list-item-with-avatar.mat-list-option .mat-list-item-content .mat-list-text,.mat-list-base .mat-list-option.mat-list-item-with-avatar.mat-list-option .mat-list-item-content-reverse .mat-list-text,.mat-list-base .mat-list-option.mat-list-item-with-avatar.mat-list-option .mat-list-item-content .mat-list-text{padding-right:16px;padding-left:16px}.mat-list-base .mat-list-item .mat-list-avatar,.mat-list-base .mat-list-option .mat-list-avatar{flex-shrink:0;width:40px;height:40px;border-radius:50%;object-fit:cover}.mat-list-base .mat-list-item .mat-list-avatar~.mat-divider-inset,.mat-list-base .mat-list-option .mat-list-avatar~.mat-divider-inset{margin-left:72px;width:calc(100% - 72px)}[dir=rtl] .mat-list-base .mat-list-item .mat-list-avatar~.mat-divider-inset,[dir=rtl] .mat-list-base .mat-list-option .mat-list-avatar~.mat-divider-inset{margin-left:auto;margin-right:72px}.mat-list-base .mat-list-item .mat-list-icon,.mat-list-base .mat-list-option .mat-list-icon{flex-shrink:0;width:24px;height:24px;font-size:24px;box-sizing:content-box;border-radius:50%;padding:4px}.mat-list-base .mat-list-item .mat-list-icon~.mat-divider-inset,.mat-list-base .mat-list-option .mat-list-icon~.mat-divider-inset{margin-left:64px;width:calc(100% - 64px)}[dir=rtl] .mat-list-base .mat-list-item .mat-list-icon~.mat-divider-inset,[dir=rtl] .mat-list-base .mat-list-option .mat-list-icon~.mat-divider-inset{margin-left:auto;margin-right:64px}.mat-list-base .mat-list-item .mat-divider,.mat-list-base .mat-list-option .mat-divider{position:absolute;bottom:0;left:0;width:100%;margin:0}[dir=rtl] .mat-list-base .mat-list-item .mat-divider,[dir=rtl] .mat-list-base .mat-list-option .mat-divider{margin-left:auto;margin-right:0}.mat-list-base .mat-list-item .mat-divider.mat-divider-inset,.mat-list-base .mat-list-option .mat-divider.mat-divider-inset{position:absolute}.mat-list-base[dense]{padding-top:4px;display:block}.mat-list-base[dense] .mat-subheader{height:40px;line-height:8px}.mat-list-base[dense] .mat-subheader:first-child{margin-top:-4px}.mat-list-base[dense] .mat-list-item,.mat-list-base[dense] .mat-list-option{display:block;height:40px;-webkit-tap-highlight-color:transparent;width:100%;padding:0;position:relative}.mat-list-base[dense] .mat-list-item .mat-list-item-content,.mat-list-base[dense] .mat-list-option .mat-list-item-content{display:flex;flex-direction:row;align-items:center;box-sizing:border-box;padding:0 16px;position:relative;height:inherit}.mat-list-base[dense] .mat-list-item .mat-list-item-content-reverse,.mat-list-base[dense] .mat-list-option .mat-list-item-content-reverse{display:flex;align-items:center;padding:0 16px;flex-direction:row-reverse;justify-content:space-around}.mat-list-base[dense] .mat-list-item .mat-list-item-ripple,.mat-list-base[dense] .mat-list-option .mat-list-item-ripple{top:0;left:0;right:0;bottom:0;position:absolute;pointer-events:none}.mat-list-base[dense] .mat-list-item.mat-list-item-with-avatar,.mat-list-base[dense] .mat-list-option.mat-list-item-with-avatar{height:48px}.mat-list-base[dense] .mat-list-item.mat-2-line,.mat-list-base[dense] .mat-list-option.mat-2-line{height:60px}.mat-list-base[dense] .mat-list-item.mat-3-line,.mat-list-base[dense] .mat-list-option.mat-3-line{height:76px}.mat-list-base[dense] .mat-list-item.mat-multi-line,.mat-list-base[dense] .mat-list-option.mat-multi-line{height:auto}.mat-list-base[dense] .mat-list-item.mat-multi-line .mat-list-item-content,.mat-list-base[dense] .mat-list-option.mat-multi-line .mat-list-item-content{padding-top:16px;padding-bottom:16px}.mat-list-base[dense] .mat-list-item .mat-list-text,.mat-list-base[dense] .mat-list-option .mat-list-text{display:flex;flex-direction:column;width:100%;box-sizing:border-box;overflow:hidden;padding:0}.mat-list-base[dense] .mat-list-item .mat-list-text>*,.mat-list-base[dense] .mat-list-option .mat-list-text>*{margin:0;padding:0;font-weight:normal;font-size:inherit}.mat-list-base[dense] .mat-list-item .mat-list-text:empty,.mat-list-base[dense] .mat-list-option .mat-list-text:empty{display:none}.mat-list-base[dense] .mat-list-item.mat-list-item-with-avatar .mat-list-item-content .mat-list-text,.mat-list-base[dense] .mat-list-item.mat-list-option .mat-list-item-content .mat-list-text,.mat-list-base[dense] .mat-list-option.mat-list-item-with-avatar .mat-list-item-content .mat-list-text,.mat-list-base[dense] .mat-list-option.mat-list-option .mat-list-item-content .mat-list-text{padding-right:0;padding-left:16px}[dir=rtl] .mat-list-base[dense] .mat-list-item.mat-list-item-with-avatar .mat-list-item-content .mat-list-text,[dir=rtl] .mat-list-base[dense] .mat-list-item.mat-list-option .mat-list-item-content .mat-list-text,[dir=rtl] .mat-list-base[dense] .mat-list-option.mat-list-item-with-avatar .mat-list-item-content .mat-list-text,[dir=rtl] .mat-list-base[dense] .mat-list-option.mat-list-option .mat-list-item-content .mat-list-text{padding-right:16px;padding-left:0}.mat-list-base[dense] .mat-list-item.mat-list-item-with-avatar .mat-list-item-content-reverse .mat-list-text,.mat-list-base[dense] .mat-list-item.mat-list-option .mat-list-item-content-reverse .mat-list-text,.mat-list-base[dense] .mat-list-option.mat-list-item-with-avatar .mat-list-item-content-reverse .mat-list-text,.mat-list-base[dense] .mat-list-option.mat-list-option .mat-list-item-content-reverse .mat-list-text{padding-left:0;padding-right:16px}[dir=rtl] .mat-list-base[dense] .mat-list-item.mat-list-item-with-avatar .mat-list-item-content-reverse .mat-list-text,[dir=rtl] .mat-list-base[dense] .mat-list-item.mat-list-option .mat-list-item-content-reverse .mat-list-text,[dir=rtl] .mat-list-base[dense] .mat-list-option.mat-list-item-with-avatar .mat-list-item-content-reverse .mat-list-text,[dir=rtl] .mat-list-base[dense] .mat-list-option.mat-list-option .mat-list-item-content-reverse .mat-list-text{padding-right:0;padding-left:16px}.mat-list-base[dense] .mat-list-item.mat-list-item-with-avatar.mat-list-option .mat-list-item-content-reverse .mat-list-text,.mat-list-base[dense] .mat-list-item.mat-list-item-with-avatar.mat-list-option .mat-list-item-content .mat-list-text,.mat-list-base[dense] .mat-list-option.mat-list-item-with-avatar.mat-list-option .mat-list-item-content-reverse .mat-list-text,.mat-list-base[dense] .mat-list-option.mat-list-item-with-avatar.mat-list-option .mat-list-item-content .mat-list-text{padding-right:16px;padding-left:16px}.mat-list-base[dense] .mat-list-item .mat-list-avatar,.mat-list-base[dense] .mat-list-option .mat-list-avatar{flex-shrink:0;width:36px;height:36px;border-radius:50%;object-fit:cover}.mat-list-base[dense] .mat-list-item .mat-list-avatar~.mat-divider-inset,.mat-list-base[dense] .mat-list-option .mat-list-avatar~.mat-divider-inset{margin-left:68px;width:calc(100% - 68px)}[dir=rtl] .mat-list-base[dense] .mat-list-item .mat-list-avatar~.mat-divider-inset,[dir=rtl] .mat-list-base[dense] .mat-list-option .mat-list-avatar~.mat-divider-inset{margin-left:auto;margin-right:68px}.mat-list-base[dense] .mat-list-item .mat-list-icon,.mat-list-base[dense] .mat-list-option .mat-list-icon{flex-shrink:0;width:20px;height:20px;font-size:20px;box-sizing:content-box;border-radius:50%;padding:4px}.mat-list-base[dense] .mat-list-item .mat-list-icon~.mat-divider-inset,.mat-list-base[dense] .mat-list-option .mat-list-icon~.mat-divider-inset{margin-left:60px;width:calc(100% - 60px)}[dir=rtl] .mat-list-base[dense] .mat-list-item .mat-list-icon~.mat-divider-inset,[dir=rtl] .mat-list-base[dense] .mat-list-option .mat-list-icon~.mat-divider-inset{margin-left:auto;margin-right:60px}.mat-list-base[dense] .mat-list-item .mat-divider,.mat-list-base[dense] .mat-list-option .mat-divider{position:absolute;bottom:0;left:0;width:100%;margin:0}[dir=rtl] .mat-list-base[dense] .mat-list-item .mat-divider,[dir=rtl] .mat-list-base[dense] .mat-list-option .mat-divider{margin-left:auto;margin-right:0}.mat-list-base[dense] .mat-list-item .mat-divider.mat-divider-inset,.mat-list-base[dense] .mat-list-option .mat-divider.mat-divider-inset{position:absolute}.mat-nav-list a{text-decoration:none;color:inherit}.mat-nav-list .mat-list-item{cursor:pointer;outline:none}mat-action-list button{background:none;color:inherit;border:none;font:inherit;outline:inherit;-webkit-tap-highlight-color:transparent;text-align:left}[dir=rtl] mat-action-list button{text-align:right}mat-action-list button::-moz-focus-inner{border:0}mat-action-list .mat-list-item{cursor:pointer;outline:inherit}.mat-list-option:not(.mat-list-item-disabled){cursor:pointer;outline:none}.mat-list-item-disabled{pointer-events:none}.cdk-high-contrast-active .mat-list-item-disabled{opacity:.5}.cdk-high-contrast-active :host .mat-list-item-disabled{opacity:.5}.cdk-high-contrast-active .mat-selection-list:focus{outline-style:dotted}.cdk-high-contrast-active .mat-list-option:hover,.cdk-high-contrast-active .mat-list-option:focus,.cdk-high-contrast-active .mat-nav-list .mat-list-item:hover,.cdk-high-contrast-active .mat-nav-list .mat-list-item:focus,.cdk-high-contrast-active mat-action-list .mat-list-item:hover,.cdk-high-contrast-active mat-action-list .mat-list-item:focus{outline:dotted 1px}.cdk-high-contrast-active .mat-list-single-selected-option::after{content:\"\";position:absolute;top:50%;right:16px;transform:translateY(-50%);width:10px;height:0;border-bottom:solid 10px;border-radius:10px}.cdk-high-contrast-active [dir=rtl] .mat-list-single-selected-option::after{right:auto;left:16px}@media(hover: none){.mat-list-option:not(.mat-list-item-disabled):hover,.mat-nav-list .mat-list-item:not(.mat-list-item-disabled):hover,.mat-action-list .mat-list-item:not(.mat-list-item-disabled):hover{background:none}}\n"]
	                }] }
	    ];
	    return MatNavList;
	}(_MatListMixinBase));
	var MatList = /** @class */ (function (_super) {
	    __extends(MatList, _super);
	    function MatList(_elementRef) {
	        var _this = _super.call(this) || this;
	        _this._elementRef = _elementRef;
	        /** Emits when the state of the list changes. */
	        _this._stateChanges = new Subject();
	        if (_this._getListType() === 'action-list') {
	            _elementRef.nativeElement.classList.add('mat-action-list');
	        }
	        return _this;
	    }
	    MatList.prototype._getListType = function () {
	        var nodeName = this._elementRef.nativeElement.nodeName.toLowerCase();
	        if (nodeName === 'mat-list') {
	            return 'list';
	        }
	        if (nodeName === 'mat-action-list') {
	            return 'action-list';
	        }
	        return null;
	    };
	    MatList.prototype.ngOnChanges = function () {
	        this._stateChanges.next();
	    };
	    MatList.prototype.ngOnDestroy = function () {
	        this._stateChanges.complete();
	    };
	    MatList.decorators = [
	        { type: Component, args: [{
	                    selector: 'mat-list, mat-action-list',
	                    exportAs: 'matList',
	                    template: "<ng-content></ng-content>\n\n",
	                    host: {
	                        'class': 'mat-list mat-list-base'
	                    },
	                    inputs: ['disableRipple', 'disabled'],
	                    encapsulation: ViewEncapsulation$1$1.None,
	                    changeDetection: ChangeDetectionStrategy$1.OnPush,
	                    styles: [".mat-subheader{display:flex;box-sizing:border-box;padding:16px;align-items:center}.mat-list-base .mat-subheader{margin:0}.mat-list-base{padding-top:8px;display:block;-webkit-tap-highlight-color:transparent}.mat-list-base .mat-subheader{height:48px;line-height:16px}.mat-list-base .mat-subheader:first-child{margin-top:-8px}.mat-list-base .mat-list-item,.mat-list-base .mat-list-option{display:block;height:48px;-webkit-tap-highlight-color:transparent;width:100%;padding:0;position:relative}.mat-list-base .mat-list-item .mat-list-item-content,.mat-list-base .mat-list-option .mat-list-item-content{display:flex;flex-direction:row;align-items:center;box-sizing:border-box;padding:0 16px;position:relative;height:inherit}.mat-list-base .mat-list-item .mat-list-item-content-reverse,.mat-list-base .mat-list-option .mat-list-item-content-reverse{display:flex;align-items:center;padding:0 16px;flex-direction:row-reverse;justify-content:space-around}.mat-list-base .mat-list-item .mat-list-item-ripple,.mat-list-base .mat-list-option .mat-list-item-ripple{top:0;left:0;right:0;bottom:0;position:absolute;pointer-events:none}.mat-list-base .mat-list-item.mat-list-item-with-avatar,.mat-list-base .mat-list-option.mat-list-item-with-avatar{height:56px}.mat-list-base .mat-list-item.mat-2-line,.mat-list-base .mat-list-option.mat-2-line{height:72px}.mat-list-base .mat-list-item.mat-3-line,.mat-list-base .mat-list-option.mat-3-line{height:88px}.mat-list-base .mat-list-item.mat-multi-line,.mat-list-base .mat-list-option.mat-multi-line{height:auto}.mat-list-base .mat-list-item.mat-multi-line .mat-list-item-content,.mat-list-base .mat-list-option.mat-multi-line .mat-list-item-content{padding-top:16px;padding-bottom:16px}.mat-list-base .mat-list-item .mat-list-text,.mat-list-base .mat-list-option .mat-list-text{display:flex;flex-direction:column;width:100%;box-sizing:border-box;overflow:hidden;padding:0}.mat-list-base .mat-list-item .mat-list-text>*,.mat-list-base .mat-list-option .mat-list-text>*{margin:0;padding:0;font-weight:normal;font-size:inherit}.mat-list-base .mat-list-item .mat-list-text:empty,.mat-list-base .mat-list-option .mat-list-text:empty{display:none}.mat-list-base .mat-list-item.mat-list-item-with-avatar .mat-list-item-content .mat-list-text,.mat-list-base .mat-list-item.mat-list-option .mat-list-item-content .mat-list-text,.mat-list-base .mat-list-option.mat-list-item-with-avatar .mat-list-item-content .mat-list-text,.mat-list-base .mat-list-option.mat-list-option .mat-list-item-content .mat-list-text{padding-right:0;padding-left:16px}[dir=rtl] .mat-list-base .mat-list-item.mat-list-item-with-avatar .mat-list-item-content .mat-list-text,[dir=rtl] .mat-list-base .mat-list-item.mat-list-option .mat-list-item-content .mat-list-text,[dir=rtl] .mat-list-base .mat-list-option.mat-list-item-with-avatar .mat-list-item-content .mat-list-text,[dir=rtl] .mat-list-base .mat-list-option.mat-list-option .mat-list-item-content .mat-list-text{padding-right:16px;padding-left:0}.mat-list-base .mat-list-item.mat-list-item-with-avatar .mat-list-item-content-reverse .mat-list-text,.mat-list-base .mat-list-item.mat-list-option .mat-list-item-content-reverse .mat-list-text,.mat-list-base .mat-list-option.mat-list-item-with-avatar .mat-list-item-content-reverse .mat-list-text,.mat-list-base .mat-list-option.mat-list-option .mat-list-item-content-reverse .mat-list-text{padding-left:0;padding-right:16px}[dir=rtl] .mat-list-base .mat-list-item.mat-list-item-with-avatar .mat-list-item-content-reverse .mat-list-text,[dir=rtl] .mat-list-base .mat-list-item.mat-list-option .mat-list-item-content-reverse .mat-list-text,[dir=rtl] .mat-list-base .mat-list-option.mat-list-item-with-avatar .mat-list-item-content-reverse .mat-list-text,[dir=rtl] .mat-list-base .mat-list-option.mat-list-option .mat-list-item-content-reverse .mat-list-text{padding-right:0;padding-left:16px}.mat-list-base .mat-list-item.mat-list-item-with-avatar.mat-list-option .mat-list-item-content-reverse .mat-list-text,.mat-list-base .mat-list-item.mat-list-item-with-avatar.mat-list-option .mat-list-item-content .mat-list-text,.mat-list-base .mat-list-option.mat-list-item-with-avatar.mat-list-option .mat-list-item-content-reverse .mat-list-text,.mat-list-base .mat-list-option.mat-list-item-with-avatar.mat-list-option .mat-list-item-content .mat-list-text{padding-right:16px;padding-left:16px}.mat-list-base .mat-list-item .mat-list-avatar,.mat-list-base .mat-list-option .mat-list-avatar{flex-shrink:0;width:40px;height:40px;border-radius:50%;object-fit:cover}.mat-list-base .mat-list-item .mat-list-avatar~.mat-divider-inset,.mat-list-base .mat-list-option .mat-list-avatar~.mat-divider-inset{margin-left:72px;width:calc(100% - 72px)}[dir=rtl] .mat-list-base .mat-list-item .mat-list-avatar~.mat-divider-inset,[dir=rtl] .mat-list-base .mat-list-option .mat-list-avatar~.mat-divider-inset{margin-left:auto;margin-right:72px}.mat-list-base .mat-list-item .mat-list-icon,.mat-list-base .mat-list-option .mat-list-icon{flex-shrink:0;width:24px;height:24px;font-size:24px;box-sizing:content-box;border-radius:50%;padding:4px}.mat-list-base .mat-list-item .mat-list-icon~.mat-divider-inset,.mat-list-base .mat-list-option .mat-list-icon~.mat-divider-inset{margin-left:64px;width:calc(100% - 64px)}[dir=rtl] .mat-list-base .mat-list-item .mat-list-icon~.mat-divider-inset,[dir=rtl] .mat-list-base .mat-list-option .mat-list-icon~.mat-divider-inset{margin-left:auto;margin-right:64px}.mat-list-base .mat-list-item .mat-divider,.mat-list-base .mat-list-option .mat-divider{position:absolute;bottom:0;left:0;width:100%;margin:0}[dir=rtl] .mat-list-base .mat-list-item .mat-divider,[dir=rtl] .mat-list-base .mat-list-option .mat-divider{margin-left:auto;margin-right:0}.mat-list-base .mat-list-item .mat-divider.mat-divider-inset,.mat-list-base .mat-list-option .mat-divider.mat-divider-inset{position:absolute}.mat-list-base[dense]{padding-top:4px;display:block}.mat-list-base[dense] .mat-subheader{height:40px;line-height:8px}.mat-list-base[dense] .mat-subheader:first-child{margin-top:-4px}.mat-list-base[dense] .mat-list-item,.mat-list-base[dense] .mat-list-option{display:block;height:40px;-webkit-tap-highlight-color:transparent;width:100%;padding:0;position:relative}.mat-list-base[dense] .mat-list-item .mat-list-item-content,.mat-list-base[dense] .mat-list-option .mat-list-item-content{display:flex;flex-direction:row;align-items:center;box-sizing:border-box;padding:0 16px;position:relative;height:inherit}.mat-list-base[dense] .mat-list-item .mat-list-item-content-reverse,.mat-list-base[dense] .mat-list-option .mat-list-item-content-reverse{display:flex;align-items:center;padding:0 16px;flex-direction:row-reverse;justify-content:space-around}.mat-list-base[dense] .mat-list-item .mat-list-item-ripple,.mat-list-base[dense] .mat-list-option .mat-list-item-ripple{top:0;left:0;right:0;bottom:0;position:absolute;pointer-events:none}.mat-list-base[dense] .mat-list-item.mat-list-item-with-avatar,.mat-list-base[dense] .mat-list-option.mat-list-item-with-avatar{height:48px}.mat-list-base[dense] .mat-list-item.mat-2-line,.mat-list-base[dense] .mat-list-option.mat-2-line{height:60px}.mat-list-base[dense] .mat-list-item.mat-3-line,.mat-list-base[dense] .mat-list-option.mat-3-line{height:76px}.mat-list-base[dense] .mat-list-item.mat-multi-line,.mat-list-base[dense] .mat-list-option.mat-multi-line{height:auto}.mat-list-base[dense] .mat-list-item.mat-multi-line .mat-list-item-content,.mat-list-base[dense] .mat-list-option.mat-multi-line .mat-list-item-content{padding-top:16px;padding-bottom:16px}.mat-list-base[dense] .mat-list-item .mat-list-text,.mat-list-base[dense] .mat-list-option .mat-list-text{display:flex;flex-direction:column;width:100%;box-sizing:border-box;overflow:hidden;padding:0}.mat-list-base[dense] .mat-list-item .mat-list-text>*,.mat-list-base[dense] .mat-list-option .mat-list-text>*{margin:0;padding:0;font-weight:normal;font-size:inherit}.mat-list-base[dense] .mat-list-item .mat-list-text:empty,.mat-list-base[dense] .mat-list-option .mat-list-text:empty{display:none}.mat-list-base[dense] .mat-list-item.mat-list-item-with-avatar .mat-list-item-content .mat-list-text,.mat-list-base[dense] .mat-list-item.mat-list-option .mat-list-item-content .mat-list-text,.mat-list-base[dense] .mat-list-option.mat-list-item-with-avatar .mat-list-item-content .mat-list-text,.mat-list-base[dense] .mat-list-option.mat-list-option .mat-list-item-content .mat-list-text{padding-right:0;padding-left:16px}[dir=rtl] .mat-list-base[dense] .mat-list-item.mat-list-item-with-avatar .mat-list-item-content .mat-list-text,[dir=rtl] .mat-list-base[dense] .mat-list-item.mat-list-option .mat-list-item-content .mat-list-text,[dir=rtl] .mat-list-base[dense] .mat-list-option.mat-list-item-with-avatar .mat-list-item-content .mat-list-text,[dir=rtl] .mat-list-base[dense] .mat-list-option.mat-list-option .mat-list-item-content .mat-list-text{padding-right:16px;padding-left:0}.mat-list-base[dense] .mat-list-item.mat-list-item-with-avatar .mat-list-item-content-reverse .mat-list-text,.mat-list-base[dense] .mat-list-item.mat-list-option .mat-list-item-content-reverse .mat-list-text,.mat-list-base[dense] .mat-list-option.mat-list-item-with-avatar .mat-list-item-content-reverse .mat-list-text,.mat-list-base[dense] .mat-list-option.mat-list-option .mat-list-item-content-reverse .mat-list-text{padding-left:0;padding-right:16px}[dir=rtl] .mat-list-base[dense] .mat-list-item.mat-list-item-with-avatar .mat-list-item-content-reverse .mat-list-text,[dir=rtl] .mat-list-base[dense] .mat-list-item.mat-list-option .mat-list-item-content-reverse .mat-list-text,[dir=rtl] .mat-list-base[dense] .mat-list-option.mat-list-item-with-avatar .mat-list-item-content-reverse .mat-list-text,[dir=rtl] .mat-list-base[dense] .mat-list-option.mat-list-option .mat-list-item-content-reverse .mat-list-text{padding-right:0;padding-left:16px}.mat-list-base[dense] .mat-list-item.mat-list-item-with-avatar.mat-list-option .mat-list-item-content-reverse .mat-list-text,.mat-list-base[dense] .mat-list-item.mat-list-item-with-avatar.mat-list-option .mat-list-item-content .mat-list-text,.mat-list-base[dense] .mat-list-option.mat-list-item-with-avatar.mat-list-option .mat-list-item-content-reverse .mat-list-text,.mat-list-base[dense] .mat-list-option.mat-list-item-with-avatar.mat-list-option .mat-list-item-content .mat-list-text{padding-right:16px;padding-left:16px}.mat-list-base[dense] .mat-list-item .mat-list-avatar,.mat-list-base[dense] .mat-list-option .mat-list-avatar{flex-shrink:0;width:36px;height:36px;border-radius:50%;object-fit:cover}.mat-list-base[dense] .mat-list-item .mat-list-avatar~.mat-divider-inset,.mat-list-base[dense] .mat-list-option .mat-list-avatar~.mat-divider-inset{margin-left:68px;width:calc(100% - 68px)}[dir=rtl] .mat-list-base[dense] .mat-list-item .mat-list-avatar~.mat-divider-inset,[dir=rtl] .mat-list-base[dense] .mat-list-option .mat-list-avatar~.mat-divider-inset{margin-left:auto;margin-right:68px}.mat-list-base[dense] .mat-list-item .mat-list-icon,.mat-list-base[dense] .mat-list-option .mat-list-icon{flex-shrink:0;width:20px;height:20px;font-size:20px;box-sizing:content-box;border-radius:50%;padding:4px}.mat-list-base[dense] .mat-list-item .mat-list-icon~.mat-divider-inset,.mat-list-base[dense] .mat-list-option .mat-list-icon~.mat-divider-inset{margin-left:60px;width:calc(100% - 60px)}[dir=rtl] .mat-list-base[dense] .mat-list-item .mat-list-icon~.mat-divider-inset,[dir=rtl] .mat-list-base[dense] .mat-list-option .mat-list-icon~.mat-divider-inset{margin-left:auto;margin-right:60px}.mat-list-base[dense] .mat-list-item .mat-divider,.mat-list-base[dense] .mat-list-option .mat-divider{position:absolute;bottom:0;left:0;width:100%;margin:0}[dir=rtl] .mat-list-base[dense] .mat-list-item .mat-divider,[dir=rtl] .mat-list-base[dense] .mat-list-option .mat-divider{margin-left:auto;margin-right:0}.mat-list-base[dense] .mat-list-item .mat-divider.mat-divider-inset,.mat-list-base[dense] .mat-list-option .mat-divider.mat-divider-inset{position:absolute}.mat-nav-list a{text-decoration:none;color:inherit}.mat-nav-list .mat-list-item{cursor:pointer;outline:none}mat-action-list button{background:none;color:inherit;border:none;font:inherit;outline:inherit;-webkit-tap-highlight-color:transparent;text-align:left}[dir=rtl] mat-action-list button{text-align:right}mat-action-list button::-moz-focus-inner{border:0}mat-action-list .mat-list-item{cursor:pointer;outline:inherit}.mat-list-option:not(.mat-list-item-disabled){cursor:pointer;outline:none}.mat-list-item-disabled{pointer-events:none}.cdk-high-contrast-active .mat-list-item-disabled{opacity:.5}.cdk-high-contrast-active :host .mat-list-item-disabled{opacity:.5}.cdk-high-contrast-active .mat-selection-list:focus{outline-style:dotted}.cdk-high-contrast-active .mat-list-option:hover,.cdk-high-contrast-active .mat-list-option:focus,.cdk-high-contrast-active .mat-nav-list .mat-list-item:hover,.cdk-high-contrast-active .mat-nav-list .mat-list-item:focus,.cdk-high-contrast-active mat-action-list .mat-list-item:hover,.cdk-high-contrast-active mat-action-list .mat-list-item:focus{outline:dotted 1px}.cdk-high-contrast-active .mat-list-single-selected-option::after{content:\"\";position:absolute;top:50%;right:16px;transform:translateY(-50%);width:10px;height:0;border-bottom:solid 10px;border-radius:10px}.cdk-high-contrast-active [dir=rtl] .mat-list-single-selected-option::after{right:auto;left:16px}@media(hover: none){.mat-list-option:not(.mat-list-item-disabled):hover,.mat-nav-list .mat-list-item:not(.mat-list-item-disabled):hover,.mat-action-list .mat-list-item:not(.mat-list-item-disabled):hover{background:none}}\n"]
	                }] }
	    ];
	    /** @nocollapse */
	    MatList.ctorParameters = function () { return [
	        { type: ElementRef }
	    ]; };
	    return MatList;
	}(_MatListMixinBase));
	/**
	 * Directive whose purpose is to add the mat- CSS styling to this selector.
	 * @docs-private
	 */
	var MatListAvatarCssMatStyler = /** @class */ (function () {
	    function MatListAvatarCssMatStyler() {
	    }
	    MatListAvatarCssMatStyler.decorators = [
	        { type: Directive, args: [{
	                    selector: '[mat-list-avatar], [matListAvatar]',
	                    host: { 'class': 'mat-list-avatar' }
	                },] }
	    ];
	    return MatListAvatarCssMatStyler;
	}());
	/**
	 * Directive whose purpose is to add the mat- CSS styling to this selector.
	 * @docs-private
	 */
	var MatListIconCssMatStyler = /** @class */ (function () {
	    function MatListIconCssMatStyler() {
	    }
	    MatListIconCssMatStyler.decorators = [
	        { type: Directive, args: [{
	                    selector: '[mat-list-icon], [matListIcon]',
	                    host: { 'class': 'mat-list-icon' }
	                },] }
	    ];
	    return MatListIconCssMatStyler;
	}());
	/**
	 * Directive whose purpose is to add the mat- CSS styling to this selector.
	 * @docs-private
	 */
	var MatListSubheaderCssMatStyler = /** @class */ (function () {
	    function MatListSubheaderCssMatStyler() {
	    }
	    MatListSubheaderCssMatStyler.decorators = [
	        { type: Directive, args: [{
	                    selector: '[mat-subheader], [matSubheader]',
	                    host: { 'class': 'mat-subheader' }
	                },] }
	    ];
	    return MatListSubheaderCssMatStyler;
	}());
	/** An item within a Material Design list. */
	var MatListItem = /** @class */ (function (_super) {
	    __extends(MatListItem, _super);
	    function MatListItem(_element, _changeDetectorRef, navList, list) {
	        var _this = _super.call(this) || this;
	        _this._element = _element;
	        _this._isInteractiveList = false;
	        _this._destroyed = new Subject();
	        _this._disabled = false;
	        _this._isInteractiveList = !!(navList || (list && list._getListType() === 'action-list'));
	        _this._list = navList || list;
	        // If no type attributed is specified for <button>, set it to "button".
	        // If a type attribute is already specified, do nothing.
	        var element = _this._getHostElement();
	        if (element.nodeName.toLowerCase() === 'button' && !element.hasAttribute('type')) {
	            element.setAttribute('type', 'button');
	        }
	        if (_this._list) {
	            // React to changes in the state of the parent list since
	            // some of the item's properties depend on it (e.g. `disableRipple`).
	            _this._list._stateChanges.pipe(takeUntil(_this._destroyed)).subscribe(function () {
	                _changeDetectorRef.markForCheck();
	            });
	        }
	        return _this;
	    }
	    Object.defineProperty(MatListItem.prototype, "disabled", {
	        /** Whether the option is disabled. */
	        get: function () { return this._disabled || !!(this._list && this._list.disabled); },
	        set: function (value) {
	            this._disabled = coerceBooleanProperty(value);
	        },
	        enumerable: true,
	        configurable: true
	    });
	    MatListItem.prototype.ngAfterContentInit = function () {
	        setLines(this._lines, this._element);
	    };
	    MatListItem.prototype.ngOnDestroy = function () {
	        this._destroyed.next();
	        this._destroyed.complete();
	    };
	    /** Whether this list item should show a ripple effect when clicked. */
	    MatListItem.prototype._isRippleDisabled = function () {
	        return !this._isInteractiveList || this.disableRipple ||
	            !!(this._list && this._list.disableRipple);
	    };
	    /** Retrieves the DOM element of the component host. */
	    MatListItem.prototype._getHostElement = function () {
	        return this._element.nativeElement;
	    };
	    MatListItem.decorators = [
	        { type: Component, args: [{
	                    selector: 'mat-list-item, a[mat-list-item], button[mat-list-item]',
	                    exportAs: 'matListItem',
	                    host: {
	                        'class': 'mat-list-item mat-focus-indicator',
	                        '[class.mat-list-item-disabled]': 'disabled',
	                        // @breaking-change 8.0.0 Remove `mat-list-item-avatar` in favor of `mat-list-item-with-avatar`.
	                        '[class.mat-list-item-avatar]': '_avatar || _icon',
	                        '[class.mat-list-item-with-avatar]': '_avatar || _icon',
	                    },
	                    inputs: ['disableRipple'],
	                    template: "<div class=\"mat-list-item-content\">\n  <div class=\"mat-list-item-ripple\" mat-ripple\n       [matRippleTrigger]=\"_getHostElement()\"\n       [matRippleDisabled]=\"_isRippleDisabled()\">\n  </div>\n\n  <ng-content select=\"[mat-list-avatar], [mat-list-icon], [matListAvatar], [matListIcon]\">\n  </ng-content>\n\n  <div class=\"mat-list-text\"><ng-content select=\"[mat-line], [matLine]\"></ng-content></div>\n\n  <ng-content></ng-content>\n</div>\n",
	                    encapsulation: ViewEncapsulation$1$1.None,
	                    changeDetection: ChangeDetectionStrategy$1.OnPush
	                }] }
	    ];
	    /** @nocollapse */
	    MatListItem.ctorParameters = function () { return [
	        { type: ElementRef },
	        { type: ChangeDetectorRef },
	        { type: MatNavList, decorators: [{ type: Optional }] },
	        { type: MatList, decorators: [{ type: Optional }] }
	    ]; };
	    MatListItem.propDecorators = {
	        _lines: [{ type: ContentChildren, args: [MatLine, { descendants: true },] }],
	        _avatar: [{ type: ContentChild, args: [MatListAvatarCssMatStyler,] }],
	        _icon: [{ type: ContentChild, args: [MatListIconCssMatStyler,] }],
	        disabled: [{ type: Input }]
	    };
	    return MatListItem;
	}(_MatListItemMixinBase));

	/**
	 * @license
	 * Copyright Google LLC All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/** @docs-private */
	var MatSelectionListBase = /** @class */ (function () {
	    function MatSelectionListBase() {
	    }
	    return MatSelectionListBase;
	}());
	var _MatSelectionListMixinBase = mixinDisableRipple(MatSelectionListBase);
	/** @docs-private */
	var MatListOptionBase = /** @class */ (function () {
	    function MatListOptionBase() {
	    }
	    return MatListOptionBase;
	}());
	var _MatListOptionMixinBase = mixinDisableRipple(MatListOptionBase);
	/** @docs-private */
	var MAT_SELECTION_LIST_VALUE_ACCESSOR = {
	    provide: NG_VALUE_ACCESSOR,
	    useExisting: forwardRef(function () { return MatSelectionList; }),
	    multi: true
	};
	/** Change event that is being fired whenever the selected state of an option changes. */
	var MatSelectionListChange = /** @class */ (function () {
	    function MatSelectionListChange(
	    /** Reference to the selection list that emitted the event. */
	    source, 
	    /** Reference to the option that has been changed. */
	    option) {
	        this.source = source;
	        this.option = option;
	    }
	    return MatSelectionListChange;
	}());
	/**
	 * Component for list-options of selection-list. Each list-option can automatically
	 * generate a checkbox and can put current item into the selectionModel of selection-list
	 * if the current item is selected.
	 */
	var MatListOption = /** @class */ (function (_super) {
	    __extends(MatListOption, _super);
	    function MatListOption(_element, _changeDetector, 
	    /** @docs-private */
	    selectionList) {
	        var _this = _super.call(this) || this;
	        _this._element = _element;
	        _this._changeDetector = _changeDetector;
	        _this.selectionList = selectionList;
	        _this._selected = false;
	        _this._disabled = false;
	        _this._hasFocus = false;
	        /** Whether the label should appear before or after the checkbox. Defaults to 'after' */
	        _this.checkboxPosition = 'after';
	        /**
	         * This is set to true after the first OnChanges cycle so we don't clear the value of `selected`
	         * in the first cycle.
	         */
	        _this._inputsInitialized = false;
	        return _this;
	    }
	    Object.defineProperty(MatListOption.prototype, "color", {
	        /** Theme color of the list option. This sets the color of the checkbox. */
	        get: function () { return this._color || this.selectionList.color; },
	        set: function (newValue) { this._color = newValue; },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(MatListOption.prototype, "value", {
	        /** Value of the option */
	        get: function () { return this._value; },
	        set: function (newValue) {
	            if (this.selected && newValue !== this.value && this._inputsInitialized) {
	                this.selected = false;
	            }
	            this._value = newValue;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(MatListOption.prototype, "disabled", {
	        /** Whether the option is disabled. */
	        get: function () { return this._disabled || (this.selectionList && this.selectionList.disabled); },
	        set: function (value) {
	            var newValue = coerceBooleanProperty(value);
	            if (newValue !== this._disabled) {
	                this._disabled = newValue;
	                this._changeDetector.markForCheck();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(MatListOption.prototype, "selected", {
	        /** Whether the option is selected. */
	        get: function () { return this.selectionList.selectedOptions.isSelected(this); },
	        set: function (value) {
	            var isSelected = coerceBooleanProperty(value);
	            if (isSelected !== this._selected) {
	                this._setSelected(isSelected);
	                this.selectionList._reportValueChange();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    MatListOption.prototype.ngOnInit = function () {
	        var _this = this;
	        var list = this.selectionList;
	        if (list._value && list._value.some(function (value) { return list.compareWith(value, _this._value); })) {
	            this._setSelected(true);
	        }
	        var wasSelected = this._selected;
	        // List options that are selected at initialization can't be reported properly to the form
	        // control. This is because it takes some time until the selection-list knows about all
	        // available options. Also it can happen that the ControlValueAccessor has an initial value
	        // that should be used instead. Deferring the value change report to the next tick ensures
	        // that the form control value is not being overwritten.
	        Promise.resolve().then(function () {
	            if (_this._selected || wasSelected) {
	                _this.selected = true;
	                _this._changeDetector.markForCheck();
	            }
	        });
	        this._inputsInitialized = true;
	    };
	    MatListOption.prototype.ngAfterContentInit = function () {
	        setLines(this._lines, this._element);
	    };
	    MatListOption.prototype.ngOnDestroy = function () {
	        var _this = this;
	        if (this.selected) {
	            // We have to delay this until the next tick in order
	            // to avoid changed after checked errors.
	            Promise.resolve().then(function () {
	                _this.selected = false;
	            });
	        }
	        var hadFocus = this._hasFocus;
	        var newActiveItem = this.selectionList._removeOptionFromList(this);
	        // Only move focus if this option was focused at the time it was destroyed.
	        if (hadFocus && newActiveItem) {
	            newActiveItem.focus();
	        }
	    };
	    /** Toggles the selection state of the option. */
	    MatListOption.prototype.toggle = function () {
	        this.selected = !this.selected;
	    };
	    /** Allows for programmatic focusing of the option. */
	    MatListOption.prototype.focus = function () {
	        this._element.nativeElement.focus();
	    };
	    /**
	     * Returns the list item's text label. Implemented as a part of the FocusKeyManager.
	     * @docs-private
	     */
	    MatListOption.prototype.getLabel = function () {
	        return this._text ? (this._text.nativeElement.textContent || '') : '';
	    };
	    /** Whether this list item should show a ripple effect when clicked. */
	    MatListOption.prototype._isRippleDisabled = function () {
	        return this.disabled || this.disableRipple || this.selectionList.disableRipple;
	    };
	    MatListOption.prototype._handleClick = function () {
	        if (!this.disabled && (this.selectionList.multiple || !this.selected)) {
	            this.toggle();
	            // Emit a change event if the selected state of the option changed through user interaction.
	            this.selectionList._emitChangeEvent(this);
	        }
	    };
	    MatListOption.prototype._handleFocus = function () {
	        this.selectionList._setFocusedOption(this);
	        this._hasFocus = true;
	    };
	    MatListOption.prototype._handleBlur = function () {
	        this.selectionList._onTouched();
	        this._hasFocus = false;
	    };
	    /** Retrieves the DOM element of the component host. */
	    MatListOption.prototype._getHostElement = function () {
	        return this._element.nativeElement;
	    };
	    /** Sets the selected state of the option. Returns whether the value has changed. */
	    MatListOption.prototype._setSelected = function (selected) {
	        if (selected === this._selected) {
	            return false;
	        }
	        this._selected = selected;
	        if (selected) {
	            this.selectionList.selectedOptions.select(this);
	        }
	        else {
	            this.selectionList.selectedOptions.deselect(this);
	        }
	        this._changeDetector.markForCheck();
	        return true;
	    };
	    /**
	     * Notifies Angular that the option needs to be checked in the next change detection run. Mainly
	     * used to trigger an update of the list option if the disabled state of the selection list
	     * changed.
	     */
	    MatListOption.prototype._markForCheck = function () {
	        this._changeDetector.markForCheck();
	    };
	    MatListOption.decorators = [
	        { type: Component, args: [{
	                    selector: 'mat-list-option',
	                    exportAs: 'matListOption',
	                    inputs: ['disableRipple'],
	                    host: {
	                        'role': 'option',
	                        'class': 'mat-list-item mat-list-option mat-focus-indicator',
	                        '(focus)': '_handleFocus()',
	                        '(blur)': '_handleBlur()',
	                        '(click)': '_handleClick()',
	                        '[class.mat-list-item-disabled]': 'disabled',
	                        '[class.mat-list-item-with-avatar]': '_avatar || _icon',
	                        // Manually set the "primary" or "warn" class if the color has been explicitly
	                        // set to "primary" or "warn". The pseudo checkbox picks up these classes for
	                        // its theme.
	                        '[class.mat-primary]': 'color === "primary"',
	                        // Even though accent is the default, we need to set this class anyway, because the  list might
	                        // be placed inside a parent that has one of the other colors with a higher specificity.
	                        '[class.mat-accent]': 'color !== "primary" && color !== "warn"',
	                        '[class.mat-warn]': 'color === "warn"',
	                        '[class.mat-list-single-selected-option]': 'selected && !selectionList.multiple',
	                        '[attr.aria-selected]': 'selected',
	                        '[attr.aria-disabled]': 'disabled',
	                        '[attr.tabindex]': '-1',
	                    },
	                    template: "<div class=\"mat-list-item-content\"\n  [class.mat-list-item-content-reverse]=\"checkboxPosition == 'after'\">\n\n  <div mat-ripple\n    class=\"mat-list-item-ripple\"\n    [matRippleTrigger]=\"_getHostElement()\"\n    [matRippleDisabled]=\"_isRippleDisabled()\"></div>\n\n  <mat-pseudo-checkbox\n    *ngIf=\"selectionList.multiple\"\n    [state]=\"selected ? 'checked' : 'unchecked'\"\n    [disabled]=\"disabled\"></mat-pseudo-checkbox>\n\n  <div class=\"mat-list-text\" #text><ng-content></ng-content></div>\n\n  <ng-content select=\"[mat-list-avatar], [mat-list-icon], [matListAvatar], [matListIcon]\">\n  </ng-content>\n\n</div>\n",
	                    encapsulation: ViewEncapsulation$1$1.None,
	                    changeDetection: ChangeDetectionStrategy$1.OnPush
	                }] }
	    ];
	    /** @nocollapse */
	    MatListOption.ctorParameters = function () { return [
	        { type: ElementRef },
	        { type: ChangeDetectorRef },
	        { type: MatSelectionList, decorators: [{ type: Inject, args: [forwardRef(function () { return MatSelectionList; }),] }] }
	    ]; };
	    MatListOption.propDecorators = {
	        _avatar: [{ type: ContentChild, args: [MatListAvatarCssMatStyler,] }],
	        _icon: [{ type: ContentChild, args: [MatListIconCssMatStyler,] }],
	        _lines: [{ type: ContentChildren, args: [MatLine, { descendants: true },] }],
	        _text: [{ type: ViewChild, args: ['text',] }],
	        checkboxPosition: [{ type: Input }],
	        color: [{ type: Input }],
	        value: [{ type: Input }],
	        disabled: [{ type: Input }],
	        selected: [{ type: Input }]
	    };
	    return MatListOption;
	}(_MatListOptionMixinBase));
	/**
	 * Material Design list component where each item is a selectable option. Behaves as a listbox.
	 */
	var MatSelectionList = /** @class */ (function (_super) {
	    __extends(MatSelectionList, _super);
	    function MatSelectionList(_element, 
	    // @breaking-change 11.0.0 Remove `tabIndex` parameter.
	    tabIndex, _changeDetector) {
	        var _this = _super.call(this) || this;
	        _this._element = _element;
	        _this._changeDetector = _changeDetector;
	        _this._multiple = true;
	        _this._contentInitialized = false;
	        /** Emits a change event whenever the selected state of an option changes. */
	        _this.selectionChange = new EventEmitter();
	        /**
	         * Tabindex of the selection list.
	         * @breaking-change 11.0.0 Remove `tabIndex` input.
	         */
	        _this.tabIndex = 0;
	        /** Theme color of the selection list. This sets the checkbox color for all list options. */
	        _this.color = 'accent';
	        /**
	         * Function used for comparing an option against the selected value when determining which
	         * options should appear as selected. The first argument is the value of an options. The second
	         * one is a value from the selected value. A boolean must be returned.
	         */
	        _this.compareWith = function (a1, a2) { return a1 === a2; };
	        _this._disabled = false;
	        /** The currently selected options. */
	        _this.selectedOptions = new SelectionModel(_this._multiple);
	        /** The tabindex of the selection list. */
	        _this._tabIndex = -1;
	        /** View to model callback that should be called whenever the selected options change. */
	        _this._onChange = function (_) { };
	        /** Emits when the list has been destroyed. */
	        _this._destroyed = new Subject();
	        /** View to model callback that should be called if the list or its options lost focus. */
	        _this._onTouched = function () { };
	        return _this;
	    }
	    Object.defineProperty(MatSelectionList.prototype, "disabled", {
	        /** Whether the selection list is disabled. */
	        get: function () { return this._disabled; },
	        set: function (value) {
	            this._disabled = coerceBooleanProperty(value);
	            // The `MatSelectionList` and `MatListOption` are using the `OnPush` change detection
	            // strategy. Therefore the options will not check for any changes if the `MatSelectionList`
	            // changed its state. Since we know that a change to `disabled` property of the list affects
	            // the state of the options, we manually mark each option for check.
	            this._markOptionsForCheck();
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(MatSelectionList.prototype, "multiple", {
	        /** Whether selection is limited to one or multiple items (default multiple). */
	        get: function () { return this._multiple; },
	        set: function (value) {
	            var newValue = coerceBooleanProperty(value);
	            if (newValue !== this._multiple) {
	                if ( this._contentInitialized) {
	                    throw new Error('Cannot change `multiple` mode of mat-selection-list after initialization.');
	                }
	                this._multiple = newValue;
	                this.selectedOptions = new SelectionModel(this._multiple, this.selectedOptions.selected);
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    MatSelectionList.prototype.ngAfterContentInit = function () {
	        var _this = this;
	        this._contentInitialized = true;
	        this._keyManager = new FocusKeyManager(this.options)
	            .withWrap()
	            .withTypeAhead()
	            // Allow disabled items to be focusable. For accessibility reasons, there must be a way for
	            // screenreader users, that allows reading the different options of the list.
	            .skipPredicate(function () { return false; })
	            .withAllowedModifierKeys(['shiftKey']);
	        if (this._value) {
	            this._setOptionsFromValues(this._value);
	        }
	        // If the user attempts to tab out of the selection list, allow focus to escape.
	        this._keyManager.tabOut.pipe(takeUntil(this._destroyed)).subscribe(function () {
	            _this._allowFocusEscape();
	        });
	        // When the number of options change, update the tabindex of the selection list.
	        this.options.changes.pipe(startWith(null), takeUntil(this._destroyed)).subscribe(function () {
	            _this._updateTabIndex();
	        });
	        // Sync external changes to the model back to the options.
	        this.selectedOptions.changed.pipe(takeUntil(this._destroyed)).subscribe(function (event) {
	            var e_1, _a, e_2, _b;
	            if (event.added) {
	                try {
	                    for (var _c = __values(event.added), _d = _c.next(); !_d.done; _d = _c.next()) {
	                        var item = _d.value;
	                        item.selected = true;
	                    }
	                }
	                catch (e_1_1) { e_1 = { error: e_1_1 }; }
	                finally {
	                    try {
	                        if (_d && !_d.done && (_a = _c.return)) _a.call(_c);
	                    }
	                    finally { if (e_1) throw e_1.error; }
	                }
	            }
	            if (event.removed) {
	                try {
	                    for (var _e = __values(event.removed), _f = _e.next(); !_f.done; _f = _e.next()) {
	                        var item = _f.value;
	                        item.selected = false;
	                    }
	                }
	                catch (e_2_1) { e_2 = { error: e_2_1 }; }
	                finally {
	                    try {
	                        if (_f && !_f.done && (_b = _e.return)) _b.call(_e);
	                    }
	                    finally { if (e_2) throw e_2.error; }
	                }
	            }
	        });
	    };
	    MatSelectionList.prototype.ngOnChanges = function (changes) {
	        var disableRippleChanges = changes['disableRipple'];
	        var colorChanges = changes['color'];
	        if ((disableRippleChanges && !disableRippleChanges.firstChange) ||
	            (colorChanges && !colorChanges.firstChange)) {
	            this._markOptionsForCheck();
	        }
	    };
	    MatSelectionList.prototype.ngOnDestroy = function () {
	        this._destroyed.next();
	        this._destroyed.complete();
	        this._isDestroyed = true;
	    };
	    /** Focuses the selection list. */
	    MatSelectionList.prototype.focus = function (options) {
	        this._element.nativeElement.focus(options);
	    };
	    /** Selects all of the options. */
	    MatSelectionList.prototype.selectAll = function () {
	        this._setAllOptionsSelected(true);
	    };
	    /** Deselects all of the options. */
	    MatSelectionList.prototype.deselectAll = function () {
	        this._setAllOptionsSelected(false);
	    };
	    /** Sets the focused option of the selection-list. */
	    MatSelectionList.prototype._setFocusedOption = function (option) {
	        this._keyManager.updateActiveItem(option);
	    };
	    /**
	     * Removes an option from the selection list and updates the active item.
	     * @returns Currently-active item.
	     */
	    MatSelectionList.prototype._removeOptionFromList = function (option) {
	        var optionIndex = this._getOptionIndex(option);
	        if (optionIndex > -1 && this._keyManager.activeItemIndex === optionIndex) {
	            // Check whether the option is the last item
	            if (optionIndex > 0) {
	                this._keyManager.updateActiveItem(optionIndex - 1);
	            }
	            else if (optionIndex === 0 && this.options.length > 1) {
	                this._keyManager.updateActiveItem(Math.min(optionIndex + 1, this.options.length - 1));
	            }
	        }
	        return this._keyManager.activeItem;
	    };
	    /** Passes relevant key presses to our key manager. */
	    MatSelectionList.prototype._keydown = function (event) {
	        var keyCode = event.keyCode;
	        var manager = this._keyManager;
	        var previousFocusIndex = manager.activeItemIndex;
	        var hasModifier = hasModifierKey(event);
	        switch (keyCode) {
	            case SPACE:
	            case ENTER:
	                if (!hasModifier && !manager.isTyping()) {
	                    this._toggleFocusedOption();
	                    // Always prevent space from scrolling the page since the list has focus
	                    event.preventDefault();
	                }
	                break;
	            case HOME:
	            case END:
	                if (!hasModifier) {
	                    keyCode === HOME ? manager.setFirstItemActive() : manager.setLastItemActive();
	                    event.preventDefault();
	                }
	                break;
	            default:
	                // The "A" key gets special treatment, because it's used for the "select all" functionality.
	                if (keyCode === A && this.multiple && hasModifierKey(event, 'ctrlKey') &&
	                    !manager.isTyping()) {
	                    var shouldSelect = this.options.some(function (option) { return !option.disabled && !option.selected; });
	                    this._setAllOptionsSelected(shouldSelect, true);
	                    event.preventDefault();
	                }
	                else {
	                    manager.onKeydown(event);
	                }
	        }
	        if (this.multiple && (keyCode === UP_ARROW || keyCode === DOWN_ARROW) && event.shiftKey &&
	            manager.activeItemIndex !== previousFocusIndex) {
	            this._toggleFocusedOption();
	        }
	    };
	    /** Reports a value change to the ControlValueAccessor */
	    MatSelectionList.prototype._reportValueChange = function () {
	        // Stop reporting value changes after the list has been destroyed. This avoids
	        // cases where the list might wrongly reset its value once it is removed, but
	        // the form control is still live.
	        if (this.options && !this._isDestroyed) {
	            var value = this._getSelectedOptionValues();
	            this._onChange(value);
	            this._value = value;
	        }
	    };
	    /** Emits a change event if the selected state of an option changed. */
	    MatSelectionList.prototype._emitChangeEvent = function (option) {
	        this.selectionChange.emit(new MatSelectionListChange(this, option));
	    };
	    /**
	     * When the selection list is focused, we want to move focus to an option within the list. Do this
	     * by setting the appropriate option to be active.
	     */
	    MatSelectionList.prototype._onFocus = function () {
	        var activeIndex = this._keyManager.activeItemIndex;
	        if (!activeIndex || (activeIndex === -1)) {
	            // If there is no active index, set focus to the first option.
	            this._keyManager.setFirstItemActive();
	        }
	        else {
	            // Otherwise, set focus to the active option.
	            this._keyManager.setActiveItem(activeIndex);
	        }
	    };
	    /** Implemented as part of ControlValueAccessor. */
	    MatSelectionList.prototype.writeValue = function (values) {
	        this._value = values;
	        if (this.options) {
	            this._setOptionsFromValues(values || []);
	        }
	    };
	    /** Implemented as a part of ControlValueAccessor. */
	    MatSelectionList.prototype.setDisabledState = function (isDisabled) {
	        this.disabled = isDisabled;
	    };
	    /** Implemented as part of ControlValueAccessor. */
	    MatSelectionList.prototype.registerOnChange = function (fn) {
	        this._onChange = fn;
	    };
	    /** Implemented as part of ControlValueAccessor. */
	    MatSelectionList.prototype.registerOnTouched = function (fn) {
	        this._onTouched = fn;
	    };
	    /** Sets the selected options based on the specified values. */
	    MatSelectionList.prototype._setOptionsFromValues = function (values) {
	        var _this = this;
	        this.options.forEach(function (option) { return option._setSelected(false); });
	        values.forEach(function (value) {
	            var correspondingOption = _this.options.find(function (option) {
	                // Skip options that are already in the model. This allows us to handle cases
	                // where the same primitive value is selected multiple times.
	                return option.selected ? false : _this.compareWith(option.value, value);
	            });
	            if (correspondingOption) {
	                correspondingOption._setSelected(true);
	            }
	        });
	    };
	    /** Returns the values of the selected options. */
	    MatSelectionList.prototype._getSelectedOptionValues = function () {
	        return this.options.filter(function (option) { return option.selected; }).map(function (option) { return option.value; });
	    };
	    /** Toggles the state of the currently focused option if enabled. */
	    MatSelectionList.prototype._toggleFocusedOption = function () {
	        var focusedIndex = this._keyManager.activeItemIndex;
	        if (focusedIndex != null && this._isValidIndex(focusedIndex)) {
	            var focusedOption = this.options.toArray()[focusedIndex];
	            if (focusedOption && !focusedOption.disabled && (this._multiple || !focusedOption.selected)) {
	                focusedOption.toggle();
	                // Emit a change event because the focused option changed its state through user
	                // interaction.
	                this._emitChangeEvent(focusedOption);
	            }
	        }
	    };
	    /**
	     * Sets the selected state on all of the options
	     * and emits an event if anything changed.
	     */
	    MatSelectionList.prototype._setAllOptionsSelected = function (isSelected, skipDisabled) {
	        // Keep track of whether anything changed, because we only want to
	        // emit the changed event when something actually changed.
	        var hasChanged = false;
	        this.options.forEach(function (option) {
	            if ((!skipDisabled || !option.disabled) && option._setSelected(isSelected)) {
	                hasChanged = true;
	            }
	        });
	        if (hasChanged) {
	            this._reportValueChange();
	        }
	    };
	    /**
	     * Utility to ensure all indexes are valid.
	     * @param index The index to be checked.
	     * @returns True if the index is valid for our list of options.
	     */
	    MatSelectionList.prototype._isValidIndex = function (index) {
	        return index >= 0 && index < this.options.length;
	    };
	    /** Returns the index of the specified list option. */
	    MatSelectionList.prototype._getOptionIndex = function (option) {
	        return this.options.toArray().indexOf(option);
	    };
	    /** Marks all the options to be checked in the next change detection run. */
	    MatSelectionList.prototype._markOptionsForCheck = function () {
	        if (this.options) {
	            this.options.forEach(function (option) { return option._markForCheck(); });
	        }
	    };
	    /**
	     * Removes the tabindex from the selection list and resets it back afterwards, allowing the user
	     * to tab out of it. This prevents the list from capturing focus and redirecting it back within
	     * the list, creating a focus trap if it user tries to tab away.
	     */
	    MatSelectionList.prototype._allowFocusEscape = function () {
	        var _this = this;
	        this._tabIndex = -1;
	        setTimeout(function () {
	            _this._tabIndex = 0;
	            _this._changeDetector.markForCheck();
	        });
	    };
	    /** Updates the tabindex based upon if the selection list is empty. */
	    MatSelectionList.prototype._updateTabIndex = function () {
	        this._tabIndex = (this.options.length === 0) ? -1 : 0;
	    };
	    MatSelectionList.decorators = [
	        { type: Component, args: [{
	                    selector: 'mat-selection-list',
	                    exportAs: 'matSelectionList',
	                    inputs: ['disableRipple'],
	                    host: {
	                        'role': 'listbox',
	                        'class': 'mat-selection-list mat-list-base',
	                        '(focus)': '_onFocus()',
	                        '(blur)': '_onTouched()',
	                        '(keydown)': '_keydown($event)',
	                        '[attr.aria-multiselectable]': 'multiple',
	                        '[attr.aria-disabled]': 'disabled.toString()',
	                        '[attr.tabindex]': '_tabIndex',
	                    },
	                    template: '<ng-content></ng-content>',
	                    encapsulation: ViewEncapsulation$1$1.None,
	                    providers: [MAT_SELECTION_LIST_VALUE_ACCESSOR],
	                    changeDetection: ChangeDetectionStrategy$1.OnPush,
	                    styles: [".mat-subheader{display:flex;box-sizing:border-box;padding:16px;align-items:center}.mat-list-base .mat-subheader{margin:0}.mat-list-base{padding-top:8px;display:block;-webkit-tap-highlight-color:transparent}.mat-list-base .mat-subheader{height:48px;line-height:16px}.mat-list-base .mat-subheader:first-child{margin-top:-8px}.mat-list-base .mat-list-item,.mat-list-base .mat-list-option{display:block;height:48px;-webkit-tap-highlight-color:transparent;width:100%;padding:0;position:relative}.mat-list-base .mat-list-item .mat-list-item-content,.mat-list-base .mat-list-option .mat-list-item-content{display:flex;flex-direction:row;align-items:center;box-sizing:border-box;padding:0 16px;position:relative;height:inherit}.mat-list-base .mat-list-item .mat-list-item-content-reverse,.mat-list-base .mat-list-option .mat-list-item-content-reverse{display:flex;align-items:center;padding:0 16px;flex-direction:row-reverse;justify-content:space-around}.mat-list-base .mat-list-item .mat-list-item-ripple,.mat-list-base .mat-list-option .mat-list-item-ripple{top:0;left:0;right:0;bottom:0;position:absolute;pointer-events:none}.mat-list-base .mat-list-item.mat-list-item-with-avatar,.mat-list-base .mat-list-option.mat-list-item-with-avatar{height:56px}.mat-list-base .mat-list-item.mat-2-line,.mat-list-base .mat-list-option.mat-2-line{height:72px}.mat-list-base .mat-list-item.mat-3-line,.mat-list-base .mat-list-option.mat-3-line{height:88px}.mat-list-base .mat-list-item.mat-multi-line,.mat-list-base .mat-list-option.mat-multi-line{height:auto}.mat-list-base .mat-list-item.mat-multi-line .mat-list-item-content,.mat-list-base .mat-list-option.mat-multi-line .mat-list-item-content{padding-top:16px;padding-bottom:16px}.mat-list-base .mat-list-item .mat-list-text,.mat-list-base .mat-list-option .mat-list-text{display:flex;flex-direction:column;width:100%;box-sizing:border-box;overflow:hidden;padding:0}.mat-list-base .mat-list-item .mat-list-text>*,.mat-list-base .mat-list-option .mat-list-text>*{margin:0;padding:0;font-weight:normal;font-size:inherit}.mat-list-base .mat-list-item .mat-list-text:empty,.mat-list-base .mat-list-option .mat-list-text:empty{display:none}.mat-list-base .mat-list-item.mat-list-item-with-avatar .mat-list-item-content .mat-list-text,.mat-list-base .mat-list-item.mat-list-option .mat-list-item-content .mat-list-text,.mat-list-base .mat-list-option.mat-list-item-with-avatar .mat-list-item-content .mat-list-text,.mat-list-base .mat-list-option.mat-list-option .mat-list-item-content .mat-list-text{padding-right:0;padding-left:16px}[dir=rtl] .mat-list-base .mat-list-item.mat-list-item-with-avatar .mat-list-item-content .mat-list-text,[dir=rtl] .mat-list-base .mat-list-item.mat-list-option .mat-list-item-content .mat-list-text,[dir=rtl] .mat-list-base .mat-list-option.mat-list-item-with-avatar .mat-list-item-content .mat-list-text,[dir=rtl] .mat-list-base .mat-list-option.mat-list-option .mat-list-item-content .mat-list-text{padding-right:16px;padding-left:0}.mat-list-base .mat-list-item.mat-list-item-with-avatar .mat-list-item-content-reverse .mat-list-text,.mat-list-base .mat-list-item.mat-list-option .mat-list-item-content-reverse .mat-list-text,.mat-list-base .mat-list-option.mat-list-item-with-avatar .mat-list-item-content-reverse .mat-list-text,.mat-list-base .mat-list-option.mat-list-option .mat-list-item-content-reverse .mat-list-text{padding-left:0;padding-right:16px}[dir=rtl] .mat-list-base .mat-list-item.mat-list-item-with-avatar .mat-list-item-content-reverse .mat-list-text,[dir=rtl] .mat-list-base .mat-list-item.mat-list-option .mat-list-item-content-reverse .mat-list-text,[dir=rtl] .mat-list-base .mat-list-option.mat-list-item-with-avatar .mat-list-item-content-reverse .mat-list-text,[dir=rtl] .mat-list-base .mat-list-option.mat-list-option .mat-list-item-content-reverse .mat-list-text{padding-right:0;padding-left:16px}.mat-list-base .mat-list-item.mat-list-item-with-avatar.mat-list-option .mat-list-item-content-reverse .mat-list-text,.mat-list-base .mat-list-item.mat-list-item-with-avatar.mat-list-option .mat-list-item-content .mat-list-text,.mat-list-base .mat-list-option.mat-list-item-with-avatar.mat-list-option .mat-list-item-content-reverse .mat-list-text,.mat-list-base .mat-list-option.mat-list-item-with-avatar.mat-list-option .mat-list-item-content .mat-list-text{padding-right:16px;padding-left:16px}.mat-list-base .mat-list-item .mat-list-avatar,.mat-list-base .mat-list-option .mat-list-avatar{flex-shrink:0;width:40px;height:40px;border-radius:50%;object-fit:cover}.mat-list-base .mat-list-item .mat-list-avatar~.mat-divider-inset,.mat-list-base .mat-list-option .mat-list-avatar~.mat-divider-inset{margin-left:72px;width:calc(100% - 72px)}[dir=rtl] .mat-list-base .mat-list-item .mat-list-avatar~.mat-divider-inset,[dir=rtl] .mat-list-base .mat-list-option .mat-list-avatar~.mat-divider-inset{margin-left:auto;margin-right:72px}.mat-list-base .mat-list-item .mat-list-icon,.mat-list-base .mat-list-option .mat-list-icon{flex-shrink:0;width:24px;height:24px;font-size:24px;box-sizing:content-box;border-radius:50%;padding:4px}.mat-list-base .mat-list-item .mat-list-icon~.mat-divider-inset,.mat-list-base .mat-list-option .mat-list-icon~.mat-divider-inset{margin-left:64px;width:calc(100% - 64px)}[dir=rtl] .mat-list-base .mat-list-item .mat-list-icon~.mat-divider-inset,[dir=rtl] .mat-list-base .mat-list-option .mat-list-icon~.mat-divider-inset{margin-left:auto;margin-right:64px}.mat-list-base .mat-list-item .mat-divider,.mat-list-base .mat-list-option .mat-divider{position:absolute;bottom:0;left:0;width:100%;margin:0}[dir=rtl] .mat-list-base .mat-list-item .mat-divider,[dir=rtl] .mat-list-base .mat-list-option .mat-divider{margin-left:auto;margin-right:0}.mat-list-base .mat-list-item .mat-divider.mat-divider-inset,.mat-list-base .mat-list-option .mat-divider.mat-divider-inset{position:absolute}.mat-list-base[dense]{padding-top:4px;display:block}.mat-list-base[dense] .mat-subheader{height:40px;line-height:8px}.mat-list-base[dense] .mat-subheader:first-child{margin-top:-4px}.mat-list-base[dense] .mat-list-item,.mat-list-base[dense] .mat-list-option{display:block;height:40px;-webkit-tap-highlight-color:transparent;width:100%;padding:0;position:relative}.mat-list-base[dense] .mat-list-item .mat-list-item-content,.mat-list-base[dense] .mat-list-option .mat-list-item-content{display:flex;flex-direction:row;align-items:center;box-sizing:border-box;padding:0 16px;position:relative;height:inherit}.mat-list-base[dense] .mat-list-item .mat-list-item-content-reverse,.mat-list-base[dense] .mat-list-option .mat-list-item-content-reverse{display:flex;align-items:center;padding:0 16px;flex-direction:row-reverse;justify-content:space-around}.mat-list-base[dense] .mat-list-item .mat-list-item-ripple,.mat-list-base[dense] .mat-list-option .mat-list-item-ripple{top:0;left:0;right:0;bottom:0;position:absolute;pointer-events:none}.mat-list-base[dense] .mat-list-item.mat-list-item-with-avatar,.mat-list-base[dense] .mat-list-option.mat-list-item-with-avatar{height:48px}.mat-list-base[dense] .mat-list-item.mat-2-line,.mat-list-base[dense] .mat-list-option.mat-2-line{height:60px}.mat-list-base[dense] .mat-list-item.mat-3-line,.mat-list-base[dense] .mat-list-option.mat-3-line{height:76px}.mat-list-base[dense] .mat-list-item.mat-multi-line,.mat-list-base[dense] .mat-list-option.mat-multi-line{height:auto}.mat-list-base[dense] .mat-list-item.mat-multi-line .mat-list-item-content,.mat-list-base[dense] .mat-list-option.mat-multi-line .mat-list-item-content{padding-top:16px;padding-bottom:16px}.mat-list-base[dense] .mat-list-item .mat-list-text,.mat-list-base[dense] .mat-list-option .mat-list-text{display:flex;flex-direction:column;width:100%;box-sizing:border-box;overflow:hidden;padding:0}.mat-list-base[dense] .mat-list-item .mat-list-text>*,.mat-list-base[dense] .mat-list-option .mat-list-text>*{margin:0;padding:0;font-weight:normal;font-size:inherit}.mat-list-base[dense] .mat-list-item .mat-list-text:empty,.mat-list-base[dense] .mat-list-option .mat-list-text:empty{display:none}.mat-list-base[dense] .mat-list-item.mat-list-item-with-avatar .mat-list-item-content .mat-list-text,.mat-list-base[dense] .mat-list-item.mat-list-option .mat-list-item-content .mat-list-text,.mat-list-base[dense] .mat-list-option.mat-list-item-with-avatar .mat-list-item-content .mat-list-text,.mat-list-base[dense] .mat-list-option.mat-list-option .mat-list-item-content .mat-list-text{padding-right:0;padding-left:16px}[dir=rtl] .mat-list-base[dense] .mat-list-item.mat-list-item-with-avatar .mat-list-item-content .mat-list-text,[dir=rtl] .mat-list-base[dense] .mat-list-item.mat-list-option .mat-list-item-content .mat-list-text,[dir=rtl] .mat-list-base[dense] .mat-list-option.mat-list-item-with-avatar .mat-list-item-content .mat-list-text,[dir=rtl] .mat-list-base[dense] .mat-list-option.mat-list-option .mat-list-item-content .mat-list-text{padding-right:16px;padding-left:0}.mat-list-base[dense] .mat-list-item.mat-list-item-with-avatar .mat-list-item-content-reverse .mat-list-text,.mat-list-base[dense] .mat-list-item.mat-list-option .mat-list-item-content-reverse .mat-list-text,.mat-list-base[dense] .mat-list-option.mat-list-item-with-avatar .mat-list-item-content-reverse .mat-list-text,.mat-list-base[dense] .mat-list-option.mat-list-option .mat-list-item-content-reverse .mat-list-text{padding-left:0;padding-right:16px}[dir=rtl] .mat-list-base[dense] .mat-list-item.mat-list-item-with-avatar .mat-list-item-content-reverse .mat-list-text,[dir=rtl] .mat-list-base[dense] .mat-list-item.mat-list-option .mat-list-item-content-reverse .mat-list-text,[dir=rtl] .mat-list-base[dense] .mat-list-option.mat-list-item-with-avatar .mat-list-item-content-reverse .mat-list-text,[dir=rtl] .mat-list-base[dense] .mat-list-option.mat-list-option .mat-list-item-content-reverse .mat-list-text{padding-right:0;padding-left:16px}.mat-list-base[dense] .mat-list-item.mat-list-item-with-avatar.mat-list-option .mat-list-item-content-reverse .mat-list-text,.mat-list-base[dense] .mat-list-item.mat-list-item-with-avatar.mat-list-option .mat-list-item-content .mat-list-text,.mat-list-base[dense] .mat-list-option.mat-list-item-with-avatar.mat-list-option .mat-list-item-content-reverse .mat-list-text,.mat-list-base[dense] .mat-list-option.mat-list-item-with-avatar.mat-list-option .mat-list-item-content .mat-list-text{padding-right:16px;padding-left:16px}.mat-list-base[dense] .mat-list-item .mat-list-avatar,.mat-list-base[dense] .mat-list-option .mat-list-avatar{flex-shrink:0;width:36px;height:36px;border-radius:50%;object-fit:cover}.mat-list-base[dense] .mat-list-item .mat-list-avatar~.mat-divider-inset,.mat-list-base[dense] .mat-list-option .mat-list-avatar~.mat-divider-inset{margin-left:68px;width:calc(100% - 68px)}[dir=rtl] .mat-list-base[dense] .mat-list-item .mat-list-avatar~.mat-divider-inset,[dir=rtl] .mat-list-base[dense] .mat-list-option .mat-list-avatar~.mat-divider-inset{margin-left:auto;margin-right:68px}.mat-list-base[dense] .mat-list-item .mat-list-icon,.mat-list-base[dense] .mat-list-option .mat-list-icon{flex-shrink:0;width:20px;height:20px;font-size:20px;box-sizing:content-box;border-radius:50%;padding:4px}.mat-list-base[dense] .mat-list-item .mat-list-icon~.mat-divider-inset,.mat-list-base[dense] .mat-list-option .mat-list-icon~.mat-divider-inset{margin-left:60px;width:calc(100% - 60px)}[dir=rtl] .mat-list-base[dense] .mat-list-item .mat-list-icon~.mat-divider-inset,[dir=rtl] .mat-list-base[dense] .mat-list-option .mat-list-icon~.mat-divider-inset{margin-left:auto;margin-right:60px}.mat-list-base[dense] .mat-list-item .mat-divider,.mat-list-base[dense] .mat-list-option .mat-divider{position:absolute;bottom:0;left:0;width:100%;margin:0}[dir=rtl] .mat-list-base[dense] .mat-list-item .mat-divider,[dir=rtl] .mat-list-base[dense] .mat-list-option .mat-divider{margin-left:auto;margin-right:0}.mat-list-base[dense] .mat-list-item .mat-divider.mat-divider-inset,.mat-list-base[dense] .mat-list-option .mat-divider.mat-divider-inset{position:absolute}.mat-nav-list a{text-decoration:none;color:inherit}.mat-nav-list .mat-list-item{cursor:pointer;outline:none}mat-action-list button{background:none;color:inherit;border:none;font:inherit;outline:inherit;-webkit-tap-highlight-color:transparent;text-align:left}[dir=rtl] mat-action-list button{text-align:right}mat-action-list button::-moz-focus-inner{border:0}mat-action-list .mat-list-item{cursor:pointer;outline:inherit}.mat-list-option:not(.mat-list-item-disabled){cursor:pointer;outline:none}.mat-list-item-disabled{pointer-events:none}.cdk-high-contrast-active .mat-list-item-disabled{opacity:.5}.cdk-high-contrast-active :host .mat-list-item-disabled{opacity:.5}.cdk-high-contrast-active .mat-selection-list:focus{outline-style:dotted}.cdk-high-contrast-active .mat-list-option:hover,.cdk-high-contrast-active .mat-list-option:focus,.cdk-high-contrast-active .mat-nav-list .mat-list-item:hover,.cdk-high-contrast-active .mat-nav-list .mat-list-item:focus,.cdk-high-contrast-active mat-action-list .mat-list-item:hover,.cdk-high-contrast-active mat-action-list .mat-list-item:focus{outline:dotted 1px}.cdk-high-contrast-active .mat-list-single-selected-option::after{content:\"\";position:absolute;top:50%;right:16px;transform:translateY(-50%);width:10px;height:0;border-bottom:solid 10px;border-radius:10px}.cdk-high-contrast-active [dir=rtl] .mat-list-single-selected-option::after{right:auto;left:16px}@media(hover: none){.mat-list-option:not(.mat-list-item-disabled):hover,.mat-nav-list .mat-list-item:not(.mat-list-item-disabled):hover,.mat-action-list .mat-list-item:not(.mat-list-item-disabled):hover{background:none}}\n"]
	                }] }
	    ];
	    /** @nocollapse */
	    MatSelectionList.ctorParameters = function () { return [
	        { type: ElementRef },
	        { type: String, decorators: [{ type: Attribute$1, args: ['tabindex',] }] },
	        { type: ChangeDetectorRef }
	    ]; };
	    MatSelectionList.propDecorators = {
	        options: [{ type: ContentChildren, args: [MatListOption, { descendants: true },] }],
	        selectionChange: [{ type: Output }],
	        tabIndex: [{ type: Input }],
	        color: [{ type: Input }],
	        compareWith: [{ type: Input }],
	        disabled: [{ type: Input }],
	        multiple: [{ type: Input }]
	    };
	    return MatSelectionList;
	}(_MatSelectionListMixinBase));

	/**
	 * @license
	 * Copyright Google LLC All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	var MatListModule = /** @class */ (function () {
	    function MatListModule() {
	    }
	    MatListModule.decorators = [
	        { type: NgModule, args: [{
	                    imports: [MatLineModule, MatRippleModule, MatCommonModule, MatPseudoCheckboxModule, CommonModule],
	                    exports: [
	                        MatList,
	                        MatNavList,
	                        MatListItem,
	                        MatListAvatarCssMatStyler,
	                        MatLineModule,
	                        MatCommonModule,
	                        MatListIconCssMatStyler,
	                        MatListSubheaderCssMatStyler,
	                        MatPseudoCheckboxModule,
	                        MatSelectionList,
	                        MatListOption,
	                        MatDividerModule
	                    ],
	                    declarations: [
	                        MatList,
	                        MatNavList,
	                        MatListItem,
	                        MatListAvatarCssMatStyler,
	                        MatListIconCssMatStyler,
	                        MatListSubheaderCssMatStyler,
	                        MatSelectionList,
	                        MatListOption
	                    ],
	                },] }
	    ];
	    return MatListModule;
	}());

	/**
	 * @license
	 * Copyright Google LLC All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/** Used to generate unique ID for each accordion. */
	var nextId$1 = 0;
	/**
	 * Directive whose purpose is to manage the expanded state of CdkAccordionItem children.
	 */
	var CdkAccordion = /** @class */ (function () {
	    function CdkAccordion() {
	        /** Emits when the state of the accordion changes */
	        this._stateChanges = new Subject();
	        /** Stream that emits true/false when openAll/closeAll is triggered. */
	        this._openCloseAllActions = new Subject();
	        /** A readonly id value to use for unique selection coordination. */
	        this.id = "cdk-accordion-" + nextId$1++;
	        this._multi = false;
	    }
	    Object.defineProperty(CdkAccordion.prototype, "multi", {
	        /** Whether the accordion should allow multiple expanded accordion items simultaneously. */
	        get: function () { return this._multi; },
	        set: function (multi) { this._multi = coerceBooleanProperty(multi); },
	        enumerable: true,
	        configurable: true
	    });
	    /** Opens all enabled accordion items in an accordion where multi is enabled. */
	    CdkAccordion.prototype.openAll = function () {
	        this._openCloseAll(true);
	    };
	    /** Closes all enabled accordion items in an accordion where multi is enabled. */
	    CdkAccordion.prototype.closeAll = function () {
	        this._openCloseAll(false);
	    };
	    CdkAccordion.prototype.ngOnChanges = function (changes) {
	        this._stateChanges.next(changes);
	    };
	    CdkAccordion.prototype.ngOnDestroy = function () {
	        this._stateChanges.complete();
	    };
	    CdkAccordion.prototype._openCloseAll = function (expanded) {
	        if (this.multi) {
	            this._openCloseAllActions.next(expanded);
	        }
	    };
	    CdkAccordion.decorators = [
	        { type: Directive, args: [{
	                    selector: 'cdk-accordion, [cdkAccordion]',
	                    exportAs: 'cdkAccordion',
	                },] }
	    ];
	    CdkAccordion.propDecorators = {
	        multi: [{ type: Input }]
	    };
	    return CdkAccordion;
	}());

	/**
	 * @license
	 * Copyright Google LLC All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/** Used to generate unique ID for each accordion item. */
	var nextId$1$1 = 0;
	var Éµ0$d = undefined;
	/**
	 * An basic directive expected to be extended and decorated as a component.  Sets up all
	 * events and attributes needed to be managed by a CdkAccordion parent.
	 */
	var CdkAccordionItem = /** @class */ (function () {
	    function CdkAccordionItem(accordion, _changeDetectorRef, _expansionDispatcher) {
	        var _this = this;
	        this.accordion = accordion;
	        this._changeDetectorRef = _changeDetectorRef;
	        this._expansionDispatcher = _expansionDispatcher;
	        /** Subscription to openAll/closeAll events. */
	        this._openCloseAllSubscription = Subscription.EMPTY;
	        /** Event emitted every time the AccordionItem is closed. */
	        this.closed = new EventEmitter();
	        /** Event emitted every time the AccordionItem is opened. */
	        this.opened = new EventEmitter();
	        /** Event emitted when the AccordionItem is destroyed. */
	        this.destroyed = new EventEmitter();
	        /**
	         * Emits whenever the expanded state of the accordion changes.
	         * Primarily used to facilitate two-way binding.
	         * @docs-private
	         */
	        this.expandedChange = new EventEmitter();
	        /** The unique AccordionItem id. */
	        this.id = "cdk-accordion-child-" + nextId$1$1++;
	        this._expanded = false;
	        this._disabled = false;
	        /** Unregister function for _expansionDispatcher. */
	        this._removeUniqueSelectionListener = function () { };
	        this._removeUniqueSelectionListener =
	            _expansionDispatcher.listen(function (id, accordionId) {
	                if (_this.accordion && !_this.accordion.multi &&
	                    _this.accordion.id === accordionId && _this.id !== id) {
	                    _this.expanded = false;
	                }
	            });
	        // When an accordion item is hosted in an accordion, subscribe to open/close events.
	        if (this.accordion) {
	            this._openCloseAllSubscription = this._subscribeToOpenCloseAllActions();
	        }
	    }
	    Object.defineProperty(CdkAccordionItem.prototype, "expanded", {
	        /** Whether the AccordionItem is expanded. */
	        get: function () { return this._expanded; },
	        set: function (expanded) {
	            expanded = coerceBooleanProperty(expanded);
	            // Only emit events and update the internal value if the value changes.
	            if (this._expanded !== expanded) {
	                this._expanded = expanded;
	                this.expandedChange.emit(expanded);
	                if (expanded) {
	                    this.opened.emit();
	                    /**
	                     * In the unique selection dispatcher, the id parameter is the id of the CdkAccordionItem,
	                     * the name value is the id of the accordion.
	                     */
	                    var accordionId = this.accordion ? this.accordion.id : this.id;
	                    this._expansionDispatcher.notify(this.id, accordionId);
	                }
	                else {
	                    this.closed.emit();
	                }
	                // Ensures that the animation will run when the value is set outside of an `@Input`.
	                // This includes cases like the open, close and toggle methods.
	                this._changeDetectorRef.markForCheck();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(CdkAccordionItem.prototype, "disabled", {
	        /** Whether the AccordionItem is disabled. */
	        get: function () { return this._disabled; },
	        set: function (disabled) { this._disabled = coerceBooleanProperty(disabled); },
	        enumerable: true,
	        configurable: true
	    });
	    /** Emits an event for the accordion item being destroyed. */
	    CdkAccordionItem.prototype.ngOnDestroy = function () {
	        this.opened.complete();
	        this.closed.complete();
	        this.destroyed.emit();
	        this.destroyed.complete();
	        this._removeUniqueSelectionListener();
	        this._openCloseAllSubscription.unsubscribe();
	    };
	    /** Toggles the expanded state of the accordion item. */
	    CdkAccordionItem.prototype.toggle = function () {
	        if (!this.disabled) {
	            this.expanded = !this.expanded;
	        }
	    };
	    /** Sets the expanded state of the accordion item to false. */
	    CdkAccordionItem.prototype.close = function () {
	        if (!this.disabled) {
	            this.expanded = false;
	        }
	    };
	    /** Sets the expanded state of the accordion item to true. */
	    CdkAccordionItem.prototype.open = function () {
	        if (!this.disabled) {
	            this.expanded = true;
	        }
	    };
	    CdkAccordionItem.prototype._subscribeToOpenCloseAllActions = function () {
	        var _this = this;
	        return this.accordion._openCloseAllActions.subscribe(function (expanded) {
	            // Only change expanded state if item is enabled
	            if (!_this.disabled) {
	                _this.expanded = expanded;
	            }
	        });
	    };
	    CdkAccordionItem.decorators = [
	        { type: Directive, args: [{
	                    selector: 'cdk-accordion-item, [cdkAccordionItem]',
	                    exportAs: 'cdkAccordionItem',
	                    providers: [
	                        // Provide CdkAccordion as undefined to prevent nested accordion items from registering
	                        // to the same accordion.
	                        { provide: CdkAccordion, useValue: Éµ0$d },
	                    ],
	                },] }
	    ];
	    /** @nocollapse */
	    CdkAccordionItem.ctorParameters = function () { return [
	        { type: CdkAccordion, decorators: [{ type: Optional }, { type: SkipSelf }] },
	        { type: ChangeDetectorRef },
	        { type: UniqueSelectionDispatcher }
	    ]; };
	    CdkAccordionItem.propDecorators = {
	        closed: [{ type: Output }],
	        opened: [{ type: Output }],
	        destroyed: [{ type: Output }],
	        expandedChange: [{ type: Output }],
	        expanded: [{ type: Input }],
	        disabled: [{ type: Input }]
	    };
	    return CdkAccordionItem;
	}());

	/**
	 * @license
	 * Copyright Google LLC All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	var CdkAccordionModule = /** @class */ (function () {
	    function CdkAccordionModule() {
	    }
	    CdkAccordionModule.decorators = [
	        { type: NgModule, args: [{
	                    exports: [CdkAccordion, CdkAccordionItem],
	                    declarations: [CdkAccordion, CdkAccordionItem],
	                },] }
	    ];
	    return CdkAccordionModule;
	}());

	/**
	 * @license
	 * Copyright Google LLC All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * Throws an exception when attempting to attach a null portal to a host.
	 * @docs-private
	 */
	function throwNullPortalError() {
	    throw Error('Must provide a portal to attach');
	}
	/**
	 * Throws an exception when attempting to attach a portal to a host that is already attached.
	 * @docs-private
	 */
	function throwPortalAlreadyAttachedError() {
	    throw Error('Host already has a portal attached');
	}
	/**
	 * Throws an exception when attempting to attach a portal to an already-disposed host.
	 * @docs-private
	 */
	function throwPortalOutletAlreadyDisposedError() {
	    throw Error('This PortalOutlet has already been disposed');
	}
	/**
	 * Throws an exception when attempting to attach an unknown portal type.
	 * @docs-private
	 */
	function throwUnknownPortalTypeError() {
	    throw Error('Attempting to attach an unknown Portal type. BasePortalOutlet accepts either ' +
	        'a ComponentPortal or a TemplatePortal.');
	}
	/**
	 * Throws an exception when attempting to attach a portal to a null host.
	 * @docs-private
	 */
	function throwNullPortalOutletError() {
	    throw Error('Attempting to attach a portal to a null PortalOutlet');
	}
	/**
	 * Throws an exception when attempting to detach a portal that is not attached.
	 * @docs-private
	 */
	function throwNoPortalAttachedError() {
	    throw Error('Attempting to detach a portal that is not attached to a host');
	}

	/**
	 * @license
	 * Copyright Google LLC All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * A `Portal` is something that you want to render somewhere else.
	 * It can be attach to / detached from a `PortalOutlet`.
	 */
	var Portal = /** @class */ (function () {
	    function Portal() {
	    }
	    /** Attach this portal to a host. */
	    Portal.prototype.attach = function (host) {
	        if (host == null) {
	            throwNullPortalOutletError();
	        }
	        if (host.hasAttached()) {
	            throwPortalAlreadyAttachedError();
	        }
	        this._attachedHost = host;
	        return host.attach(this);
	    };
	    /** Detach this portal from its host */
	    Portal.prototype.detach = function () {
	        var host = this._attachedHost;
	        if (host == null) {
	            throwNoPortalAttachedError();
	        }
	        else {
	            this._attachedHost = null;
	            host.detach();
	        }
	    };
	    Object.defineProperty(Portal.prototype, "isAttached", {
	        /** Whether this portal is attached to a host. */
	        get: function () {
	            return this._attachedHost != null;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    /**
	     * Sets the PortalOutlet reference without performing `attach()`. This is used directly by
	     * the PortalOutlet when it is performing an `attach()` or `detach()`.
	     */
	    Portal.prototype.setAttachedHost = function (host) {
	        this._attachedHost = host;
	    };
	    return Portal;
	}());
	/**
	 * A `ComponentPortal` is a portal that instantiates some Component upon attachment.
	 */
	var ComponentPortal = /** @class */ (function (_super) {
	    __extends(ComponentPortal, _super);
	    function ComponentPortal(component, viewContainerRef, injector, componentFactoryResolver) {
	        var _this = _super.call(this) || this;
	        _this.component = component;
	        _this.viewContainerRef = viewContainerRef;
	        _this.injector = injector;
	        _this.componentFactoryResolver = componentFactoryResolver;
	        return _this;
	    }
	    return ComponentPortal;
	}(Portal));
	/**
	 * A `TemplatePortal` is a portal that represents some embedded template (TemplateRef).
	 */
	var TemplatePortal = /** @class */ (function (_super) {
	    __extends(TemplatePortal, _super);
	    function TemplatePortal(template, viewContainerRef, context) {
	        var _this = _super.call(this) || this;
	        _this.templateRef = template;
	        _this.viewContainerRef = viewContainerRef;
	        _this.context = context;
	        return _this;
	    }
	    Object.defineProperty(TemplatePortal.prototype, "origin", {
	        get: function () {
	            return this.templateRef.elementRef;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    /**
	     * Attach the portal to the provided `PortalOutlet`.
	     * When a context is provided it will override the `context` property of the `TemplatePortal`
	     * instance.
	     */
	    TemplatePortal.prototype.attach = function (host, context) {
	        if (context === void 0) { context = this.context; }
	        this.context = context;
	        return _super.prototype.attach.call(this, host);
	    };
	    TemplatePortal.prototype.detach = function () {
	        this.context = undefined;
	        return _super.prototype.detach.call(this);
	    };
	    return TemplatePortal;
	}(Portal));
	/**
	 * A `DomPortal` is a portal whose DOM element will be taken from its current position
	 * in the DOM and moved into a portal outlet, when it is attached. On detach, the content
	 * will be restored to its original position.
	 */
	var DomPortal = /** @class */ (function (_super) {
	    __extends(DomPortal, _super);
	    function DomPortal(element) {
	        var _this = _super.call(this) || this;
	        _this.element = element instanceof ElementRef ? element.nativeElement : element;
	        return _this;
	    }
	    return DomPortal;
	}(Portal));
	/**
	 * Partial implementation of PortalOutlet that handles attaching
	 * ComponentPortal and TemplatePortal.
	 */
	var BasePortalOutlet = /** @class */ (function () {
	    function BasePortalOutlet() {
	        /** Whether this host has already been permanently disposed. */
	        this._isDisposed = false;
	        // @breaking-change 10.0.0 `attachDomPortal` to become a required abstract method.
	        this.attachDomPortal = null;
	    }
	    /** Whether this host has an attached portal. */
	    BasePortalOutlet.prototype.hasAttached = function () {
	        return !!this._attachedPortal;
	    };
	    /** Attaches a portal. */
	    BasePortalOutlet.prototype.attach = function (portal) {
	        if (!portal) {
	            throwNullPortalError();
	        }
	        if (this.hasAttached()) {
	            throwPortalAlreadyAttachedError();
	        }
	        if (this._isDisposed) {
	            throwPortalOutletAlreadyDisposedError();
	        }
	        if (portal instanceof ComponentPortal) {
	            this._attachedPortal = portal;
	            return this.attachComponentPortal(portal);
	        }
	        else if (portal instanceof TemplatePortal) {
	            this._attachedPortal = portal;
	            return this.attachTemplatePortal(portal);
	            // @breaking-change 10.0.0 remove null check for `this.attachDomPortal`.
	        }
	        else if (this.attachDomPortal && portal instanceof DomPortal) {
	            this._attachedPortal = portal;
	            return this.attachDomPortal(portal);
	        }
	        throwUnknownPortalTypeError();
	    };
	    /** Detaches a previously attached portal. */
	    BasePortalOutlet.prototype.detach = function () {
	        if (this._attachedPortal) {
	            this._attachedPortal.setAttachedHost(null);
	            this._attachedPortal = null;
	        }
	        this._invokeDisposeFn();
	    };
	    /** Permanently dispose of this portal host. */
	    BasePortalOutlet.prototype.dispose = function () {
	        if (this.hasAttached()) {
	            this.detach();
	        }
	        this._invokeDisposeFn();
	        this._isDisposed = true;
	    };
	    /** @docs-private */
	    BasePortalOutlet.prototype.setDisposeFn = function (fn) {
	        this._disposeFn = fn;
	    };
	    BasePortalOutlet.prototype._invokeDisposeFn = function () {
	        if (this._disposeFn) {
	            this._disposeFn();
	            this._disposeFn = null;
	        }
	    };
	    return BasePortalOutlet;
	}());
	/**
	 * @deprecated Use `BasePortalOutlet` instead.
	 * @breaking-change 9.0.0
	 */
	var BasePortalHost = /** @class */ (function (_super) {
	    __extends(BasePortalHost, _super);
	    function BasePortalHost() {
	        return _super !== null && _super.apply(this, arguments) || this;
	    }
	    return BasePortalHost;
	}(BasePortalOutlet));

	/**
	 * @license
	 * Copyright Google LLC All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * A PortalOutlet for attaching portals to an arbitrary DOM element outside of the Angular
	 * application context.
	 */
	var DomPortalOutlet = /** @class */ (function (_super) {
	    __extends(DomPortalOutlet, _super);
	    function DomPortalOutlet(
	    /** Element into which the content is projected. */
	    outletElement, _componentFactoryResolver, _appRef, _defaultInjector, 
	    /**
	     * @deprecated `_document` Parameter to be made required.
	     * @breaking-change 10.0.0
	     */
	    _document) {
	        var _this = _super.call(this) || this;
	        _this.outletElement = outletElement;
	        _this._componentFactoryResolver = _componentFactoryResolver;
	        _this._appRef = _appRef;
	        _this._defaultInjector = _defaultInjector;
	        /**
	         * Attaches a DOM portal by transferring its content into the outlet.
	         * @param portal Portal to be attached.
	         * @deprecated To be turned into a method.
	         * @breaking-change 10.0.0
	         */
	        _this.attachDomPortal = function (portal) {
	            // @breaking-change 10.0.0 Remove check and error once the
	            // `_document` constructor parameter is required.
	            if (!_this._document) {
	                throw Error('Cannot attach DOM portal without _document constructor parameter');
	            }
	            var element = portal.element;
	            if (!element.parentNode) {
	                throw Error('DOM portal content must be attached to a parent node.');
	            }
	            // Anchor used to save the element's previous position so
	            // that we can restore it when the portal is detached.
	            var anchorNode = _this._document.createComment('dom-portal');
	            element.parentNode.insertBefore(anchorNode, element);
	            _this.outletElement.appendChild(element);
	            _super.prototype.setDisposeFn.call(_this, function () {
	                // We can't use `replaceWith` here because IE doesn't support it.
	                if (anchorNode.parentNode) {
	                    anchorNode.parentNode.replaceChild(element, anchorNode);
	                }
	            });
	        };
	        _this._document = _document;
	        return _this;
	    }
	    /**
	     * Attach the given ComponentPortal to DOM element using the ComponentFactoryResolver.
	     * @param portal Portal to be attached
	     * @returns Reference to the created component.
	     */
	    DomPortalOutlet.prototype.attachComponentPortal = function (portal) {
	        var _this = this;
	        var resolver = portal.componentFactoryResolver || this._componentFactoryResolver;
	        var componentFactory = resolver.resolveComponentFactory(portal.component);
	        var componentRef;
	        // If the portal specifies a ViewContainerRef, we will use that as the attachment point
	        // for the component (in terms of Angular's component tree, not rendering).
	        // When the ViewContainerRef is missing, we use the factory to create the component directly
	        // and then manually attach the view to the application.
	        if (portal.viewContainerRef) {
	            componentRef = portal.viewContainerRef.createComponent(componentFactory, portal.viewContainerRef.length, portal.injector || portal.viewContainerRef.injector);
	            this.setDisposeFn(function () { return componentRef.destroy(); });
	        }
	        else {
	            componentRef = componentFactory.create(portal.injector || this._defaultInjector);
	            this._appRef.attachView(componentRef.hostView);
	            this.setDisposeFn(function () {
	                _this._appRef.detachView(componentRef.hostView);
	                componentRef.destroy();
	            });
	        }
	        // At this point the component has been instantiated, so we move it to the location in the DOM
	        // where we want it to be rendered.
	        this.outletElement.appendChild(this._getComponentRootNode(componentRef));
	        return componentRef;
	    };
	    /**
	     * Attaches a template portal to the DOM as an embedded view.
	     * @param portal Portal to be attached.
	     * @returns Reference to the created embedded view.
	     */
	    DomPortalOutlet.prototype.attachTemplatePortal = function (portal) {
	        var _this = this;
	        var viewContainer = portal.viewContainerRef;
	        var viewRef = viewContainer.createEmbeddedView(portal.templateRef, portal.context);
	        viewRef.detectChanges();
	        // The method `createEmbeddedView` will add the view as a child of the viewContainer.
	        // But for the DomPortalOutlet the view can be added everywhere in the DOM
	        // (e.g Overlay Container) To move the view to the specified host element. We just
	        // re-append the existing root nodes.
	        viewRef.rootNodes.forEach(function (rootNode) { return _this.outletElement.appendChild(rootNode); });
	        this.setDisposeFn((function () {
	            var index = viewContainer.indexOf(viewRef);
	            if (index !== -1) {
	                viewContainer.remove(index);
	            }
	        }));
	        // TODO(jelbourn): Return locals from view.
	        return viewRef;
	    };
	    /**
	     * Clears out a portal from the DOM.
	     */
	    DomPortalOutlet.prototype.dispose = function () {
	        _super.prototype.dispose.call(this);
	        if (this.outletElement.parentNode != null) {
	            this.outletElement.parentNode.removeChild(this.outletElement);
	        }
	    };
	    /** Gets the root HTMLElement for an instantiated component. */
	    DomPortalOutlet.prototype._getComponentRootNode = function (componentRef) {
	        return componentRef.hostView.rootNodes[0];
	    };
	    return DomPortalOutlet;
	}(BasePortalOutlet));
	/**
	 * @deprecated Use `DomPortalOutlet` instead.
	 * @breaking-change 9.0.0
	 */
	var DomPortalHost = /** @class */ (function (_super) {
	    __extends(DomPortalHost, _super);
	    function DomPortalHost() {
	        return _super !== null && _super.apply(this, arguments) || this;
	    }
	    return DomPortalHost;
	}(DomPortalOutlet));

	/**
	 * @license
	 * Copyright Google LLC All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * Directive version of a `TemplatePortal`. Because the directive *is* a TemplatePortal,
	 * the directive instance itself can be attached to a host, enabling declarative use of portals.
	 */
	var CdkPortal = /** @class */ (function (_super) {
	    __extends(CdkPortal, _super);
	    function CdkPortal(templateRef, viewContainerRef) {
	        return _super.call(this, templateRef, viewContainerRef) || this;
	    }
	    CdkPortal.decorators = [
	        { type: Directive, args: [{
	                    selector: '[cdkPortal]',
	                    exportAs: 'cdkPortal',
	                },] }
	    ];
	    /** @nocollapse */
	    CdkPortal.ctorParameters = function () { return [
	        { type: TemplateRef },
	        { type: ViewContainerRef }
	    ]; };
	    return CdkPortal;
	}(TemplatePortal));
	/**
	 * @deprecated Use `CdkPortal` instead.
	 * @breaking-change 9.0.0
	 */
	var TemplatePortalDirective = /** @class */ (function (_super) {
	    __extends(TemplatePortalDirective, _super);
	    function TemplatePortalDirective() {
	        return _super !== null && _super.apply(this, arguments) || this;
	    }
	    TemplatePortalDirective.decorators = [
	        { type: Directive, args: [{
	                    selector: '[cdk-portal], [portal]',
	                    exportAs: 'cdkPortal',
	                    providers: [{
	                            provide: CdkPortal,
	                            useExisting: TemplatePortalDirective
	                        }]
	                },] }
	    ];
	    return TemplatePortalDirective;
	}(CdkPortal));
	/**
	 * Directive version of a PortalOutlet. Because the directive *is* a PortalOutlet, portals can be
	 * directly attached to it, enabling declarative use.
	 *
	 * Usage:
	 * `<ng-template [cdkPortalOutlet]="greeting"></ng-template>`
	 */
	var CdkPortalOutlet = /** @class */ (function (_super) {
	    __extends(CdkPortalOutlet, _super);
	    function CdkPortalOutlet(_componentFactoryResolver, _viewContainerRef, 
	    /**
	     * @deprecated `_document` parameter to be made required.
	     * @breaking-change 9.0.0
	     */
	    _document) {
	        var _this = _super.call(this) || this;
	        _this._componentFactoryResolver = _componentFactoryResolver;
	        _this._viewContainerRef = _viewContainerRef;
	        /** Whether the portal component is initialized. */
	        _this._isInitialized = false;
	        /** Emits when a portal is attached to the outlet. */
	        _this.attached = new EventEmitter();
	        /**
	         * Attaches the given DomPortal to this PortalHost by moving all of the portal content into it.
	         * @param portal Portal to be attached.
	         * @deprecated To be turned into a method.
	         * @breaking-change 10.0.0
	         */
	        _this.attachDomPortal = function (portal) {
	            // @breaking-change 9.0.0 Remove check and error once the
	            // `_document` constructor parameter is required.
	            if (!_this._document) {
	                throw Error('Cannot attach DOM portal without _document constructor parameter');
	            }
	            var element = portal.element;
	            if (!element.parentNode) {
	                throw Error('DOM portal content must be attached to a parent node.');
	            }
	            // Anchor used to save the element's previous position so
	            // that we can restore it when the portal is detached.
	            var anchorNode = _this._document.createComment('dom-portal');
	            portal.setAttachedHost(_this);
	            element.parentNode.insertBefore(anchorNode, element);
	            _this._getRootNode().appendChild(element);
	            _super.prototype.setDisposeFn.call(_this, function () {
	                if (anchorNode.parentNode) {
	                    anchorNode.parentNode.replaceChild(element, anchorNode);
	                }
	            });
	        };
	        _this._document = _document;
	        return _this;
	    }
	    Object.defineProperty(CdkPortalOutlet.prototype, "portal", {
	        /** Portal associated with the Portal outlet. */
	        get: function () {
	            return this._attachedPortal;
	        },
	        set: function (portal) {
	            // Ignore the cases where the `portal` is set to a falsy value before the lifecycle hooks have
	            // run. This handles the cases where the user might do something like `<div cdkPortalOutlet>`
	            // and attach a portal programmatically in the parent component. When Angular does the first CD
	            // round, it will fire the setter with empty string, causing the user's content to be cleared.
	            if (this.hasAttached() && !portal && !this._isInitialized) {
	                return;
	            }
	            if (this.hasAttached()) {
	                _super.prototype.detach.call(this);
	            }
	            if (portal) {
	                _super.prototype.attach.call(this, portal);
	            }
	            this._attachedPortal = portal;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(CdkPortalOutlet.prototype, "attachedRef", {
	        /** Component or view reference that is attached to the portal. */
	        get: function () {
	            return this._attachedRef;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    CdkPortalOutlet.prototype.ngOnInit = function () {
	        this._isInitialized = true;
	    };
	    CdkPortalOutlet.prototype.ngOnDestroy = function () {
	        _super.prototype.dispose.call(this);
	        this._attachedPortal = null;
	        this._attachedRef = null;
	    };
	    /**
	     * Attach the given ComponentPortal to this PortalOutlet using the ComponentFactoryResolver.
	     *
	     * @param portal Portal to be attached to the portal outlet.
	     * @returns Reference to the created component.
	     */
	    CdkPortalOutlet.prototype.attachComponentPortal = function (portal) {
	        portal.setAttachedHost(this);
	        // If the portal specifies an origin, use that as the logical location of the component
	        // in the application tree. Otherwise use the location of this PortalOutlet.
	        var viewContainerRef = portal.viewContainerRef != null ?
	            portal.viewContainerRef :
	            this._viewContainerRef;
	        var resolver = portal.componentFactoryResolver || this._componentFactoryResolver;
	        var componentFactory = resolver.resolveComponentFactory(portal.component);
	        var ref = viewContainerRef.createComponent(componentFactory, viewContainerRef.length, portal.injector || viewContainerRef.injector);
	        // If we're using a view container that's different from the injected one (e.g. when the portal
	        // specifies its own) we need to move the component into the outlet, otherwise it'll be rendered
	        // inside of the alternate view container.
	        if (viewContainerRef !== this._viewContainerRef) {
	            this._getRootNode().appendChild(ref.hostView.rootNodes[0]);
	        }
	        _super.prototype.setDisposeFn.call(this, function () { return ref.destroy(); });
	        this._attachedPortal = portal;
	        this._attachedRef = ref;
	        this.attached.emit(ref);
	        return ref;
	    };
	    /**
	     * Attach the given TemplatePortal to this PortalHost as an embedded View.
	     * @param portal Portal to be attached.
	     * @returns Reference to the created embedded view.
	     */
	    CdkPortalOutlet.prototype.attachTemplatePortal = function (portal) {
	        var _this = this;
	        portal.setAttachedHost(this);
	        var viewRef = this._viewContainerRef.createEmbeddedView(portal.templateRef, portal.context);
	        _super.prototype.setDisposeFn.call(this, function () { return _this._viewContainerRef.clear(); });
	        this._attachedPortal = portal;
	        this._attachedRef = viewRef;
	        this.attached.emit(viewRef);
	        return viewRef;
	    };
	    /** Gets the root node of the portal outlet. */
	    CdkPortalOutlet.prototype._getRootNode = function () {
	        var nativeElement = this._viewContainerRef.element.nativeElement;
	        // The directive could be set on a template which will result in a comment
	        // node being the root. Use the comment's parent node if that is the case.
	        return (nativeElement.nodeType === nativeElement.ELEMENT_NODE ?
	            nativeElement : nativeElement.parentNode);
	    };
	    CdkPortalOutlet.decorators = [
	        { type: Directive, args: [{
	                    selector: '[cdkPortalOutlet]',
	                    exportAs: 'cdkPortalOutlet',
	                    inputs: ['portal: cdkPortalOutlet']
	                },] }
	    ];
	    /** @nocollapse */
	    CdkPortalOutlet.ctorParameters = function () { return [
	        { type: ComponentFactoryResolver },
	        { type: ViewContainerRef },
	        { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT$1,] }] }
	    ]; };
	    CdkPortalOutlet.propDecorators = {
	        attached: [{ type: Output }]
	    };
	    return CdkPortalOutlet;
	}(BasePortalOutlet));
	/**
	 * @deprecated Use `CdkPortalOutlet` instead.
	 * @breaking-change 9.0.0
	 */
	var PortalHostDirective = /** @class */ (function (_super) {
	    __extends(PortalHostDirective, _super);
	    function PortalHostDirective() {
	        return _super !== null && _super.apply(this, arguments) || this;
	    }
	    PortalHostDirective.decorators = [
	        { type: Directive, args: [{
	                    selector: '[cdkPortalHost], [portalHost]',
	                    exportAs: 'cdkPortalHost',
	                    inputs: ['portal: cdkPortalHost'],
	                    providers: [{
	                            provide: CdkPortalOutlet,
	                            useExisting: PortalHostDirective
	                        }]
	                },] }
	    ];
	    return PortalHostDirective;
	}(CdkPortalOutlet));
	var PortalModule = /** @class */ (function () {
	    function PortalModule() {
	    }
	    PortalModule.decorators = [
	        { type: NgModule, args: [{
	                    exports: [CdkPortal, CdkPortalOutlet, TemplatePortalDirective, PortalHostDirective],
	                    declarations: [CdkPortal, CdkPortalOutlet, TemplatePortalDirective, PortalHostDirective],
	                },] }
	    ];
	    return PortalModule;
	}());

	/**
	 * @license
	 * Copyright Google LLC All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * Token used to provide a `MatAccordion` to `MatExpansionPanel`.
	 * Used primarily to avoid circular imports between `MatAccordion` and `MatExpansionPanel`.
	 */
	var MAT_ACCORDION = new InjectionToken('MAT_ACCORDION');

	/**
	 * @license
	 * Copyright Google LLC All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/** Time and timing curve for expansion panel animations. */
	var EXPANSION_PANEL_ANIMATION_TIMING = '225ms cubic-bezier(0.4,0.0,0.2,1)';
	/**
	 * Animations used by the Material expansion panel.
	 *
	 * A bug in angular animation's `state` when ViewContainers are moved using ViewContainerRef.move()
	 * causes the animation state of moved components to become `void` upon exit, and not update again
	 * upon reentry into the DOM.  This can lead a to situation for the expansion panel where the state
	 * of the panel is `expanded` or `collapsed` but the animation state is `void`.
	 *
	 * To correctly handle animating to the next state, we animate between `void` and `collapsed` which
	 * are defined to have the same styles. Since angular animates from the current styles to the
	 * destination state's style definition, in situations where we are moving from `void`'s styles to
	 * `collapsed` this acts a noop since no style values change.
	 *
	 * In the case where angular's animation state is out of sync with the expansion panel's state, the
	 * expansion panel being `expanded` and angular animations being `void`, the animation from the
	 * `expanded`'s effective styles (though in a `void` animation state) to the collapsed state will
	 * occur as expected.
	 *
	 * Angular Bug: https://github.com/angular/angular/issues/18847
	 *
	 * @docs-private
	 */
	var matExpansionAnimations = {
	    /** Animation that rotates the indicator arrow. */
	    indicatorRotate: trigger('indicatorRotate', [
	        state('collapsed, void', style({ transform: 'rotate(0deg)' })),
	        state('expanded', style({ transform: 'rotate(180deg)' })),
	        transition('expanded <=> collapsed, void => collapsed', animate(EXPANSION_PANEL_ANIMATION_TIMING)),
	    ]),
	    /** Animation that expands and collapses the panel header height. */
	    expansionHeaderHeight: trigger('expansionHeight', [
	        state('collapsed, void', style({
	            height: '{{collapsedHeight}}',
	        }), {
	            params: { collapsedHeight: '48px' },
	        }),
	        state('expanded', style({
	            height: '{{expandedHeight}}'
	        }), {
	            params: { expandedHeight: '64px' }
	        }),
	        transition('expanded <=> collapsed, void => collapsed', group([
	            query('@indicatorRotate', animateChild(), { optional: true }),
	            animate(EXPANSION_PANEL_ANIMATION_TIMING),
	        ])),
	    ]),
	    /** Animation that expands and collapses the panel content. */
	    bodyExpansion: trigger('bodyExpansion', [
	        state('collapsed, void', style({ height: '0px', visibility: 'hidden' })),
	        state('expanded', style({ height: '*', visibility: 'visible' })),
	        transition('expanded <=> collapsed, void => collapsed', animate(EXPANSION_PANEL_ANIMATION_TIMING)),
	    ])
	};

	/**
	 * @license
	 * Copyright Google LLC All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * Expansion panel content that will be rendered lazily
	 * after the panel is opened for the first time.
	 */
	var MatExpansionPanelContent = /** @class */ (function () {
	    function MatExpansionPanelContent(_template) {
	        this._template = _template;
	    }
	    MatExpansionPanelContent.decorators = [
	        { type: Directive, args: [{
	                    selector: 'ng-template[matExpansionPanelContent]'
	                },] }
	    ];
	    /** @nocollapse */
	    MatExpansionPanelContent.ctorParameters = function () { return [
	        { type: TemplateRef }
	    ]; };
	    return MatExpansionPanelContent;
	}());

	/**
	 * @license
	 * Copyright Google LLC All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/** Counter for generating unique element ids. */
	var uniqueId = 0;
	/**
	 * Injection token that can be used to configure the defalt
	 * options for the expansion panel component.
	 */
	var MAT_EXPANSION_PANEL_DEFAULT_OPTIONS = new InjectionToken('MAT_EXPANSION_PANEL_DEFAULT_OPTIONS');
	var Éµ0$h = undefined;
	/**
	 * `<mat-expansion-panel>`
	 *
	 * This component can be used as a single element to show expandable content, or as one of
	 * multiple children of an element with the MatAccordion directive attached.
	 */
	var MatExpansionPanel = /** @class */ (function (_super) {
	    __extends(MatExpansionPanel, _super);
	    function MatExpansionPanel(accordion, _changeDetectorRef, _uniqueSelectionDispatcher, _viewContainerRef, _document, _animationMode, defaultOptions) {
	        var _this = _super.call(this, accordion, _changeDetectorRef, _uniqueSelectionDispatcher) || this;
	        _this._viewContainerRef = _viewContainerRef;
	        _this._animationMode = _animationMode;
	        _this._hideToggle = false;
	        /** An event emitted after the body's expansion animation happens. */
	        _this.afterExpand = new EventEmitter();
	        /** An event emitted after the body's collapse animation happens. */
	        _this.afterCollapse = new EventEmitter();
	        /** Stream that emits for changes in `@Input` properties. */
	        _this._inputChanges = new Subject();
	        /** ID for the associated header element. Used for a11y labelling. */
	        _this._headerId = "mat-expansion-panel-header-" + uniqueId++;
	        /** Stream of body animation done events. */
	        _this._bodyAnimationDone = new Subject();
	        _this.accordion = accordion;
	        _this._document = _document;
	        // We need a Subject with distinctUntilChanged, because the `done` event
	        // fires twice on some browsers. See https://github.com/angular/angular/issues/24084
	        _this._bodyAnimationDone.pipe(distinctUntilChanged(function (x, y) {
	            return x.fromState === y.fromState && x.toState === y.toState;
	        })).subscribe(function (event) {
	            if (event.fromState !== 'void') {
	                if (event.toState === 'expanded') {
	                    _this.afterExpand.emit();
	                }
	                else if (event.toState === 'collapsed') {
	                    _this.afterCollapse.emit();
	                }
	            }
	        });
	        if (defaultOptions) {
	            _this.hideToggle = defaultOptions.hideToggle;
	        }
	        return _this;
	    }
	    Object.defineProperty(MatExpansionPanel.prototype, "hideToggle", {
	        /** Whether the toggle indicator should be hidden. */
	        get: function () {
	            return this._hideToggle || (this.accordion && this.accordion.hideToggle);
	        },
	        set: function (value) {
	            this._hideToggle = coerceBooleanProperty(value);
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(MatExpansionPanel.prototype, "togglePosition", {
	        /** The position of the expansion indicator. */
	        get: function () {
	            return this._togglePosition || (this.accordion && this.accordion.togglePosition);
	        },
	        set: function (value) {
	            this._togglePosition = value;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    /** Determines whether the expansion panel should have spacing between it and its siblings. */
	    MatExpansionPanel.prototype._hasSpacing = function () {
	        if (this.accordion) {
	            return this.expanded && this.accordion.displayMode === 'default';
	        }
	        return false;
	    };
	    /** Gets the expanded state string. */
	    MatExpansionPanel.prototype._getExpandedState = function () {
	        return this.expanded ? 'expanded' : 'collapsed';
	    };
	    /** Toggles the expanded state of the expansion panel. */
	    MatExpansionPanel.prototype.toggle = function () {
	        this.expanded = !this.expanded;
	    };
	    /** Sets the expanded state of the expansion panel to false. */
	    MatExpansionPanel.prototype.close = function () {
	        this.expanded = false;
	    };
	    /** Sets the expanded state of the expansion panel to true. */
	    MatExpansionPanel.prototype.open = function () {
	        this.expanded = true;
	    };
	    MatExpansionPanel.prototype.ngAfterContentInit = function () {
	        var _this = this;
	        if (this._lazyContent) {
	            // Render the content as soon as the panel becomes open.
	            this.opened.pipe(startWith(null), filter(function () { return _this.expanded && !_this._portal; }), take(1)).subscribe(function () {
	                _this._portal = new TemplatePortal(_this._lazyContent._template, _this._viewContainerRef);
	            });
	        }
	    };
	    MatExpansionPanel.prototype.ngOnChanges = function (changes) {
	        this._inputChanges.next(changes);
	    };
	    MatExpansionPanel.prototype.ngOnDestroy = function () {
	        _super.prototype.ngOnDestroy.call(this);
	        this._bodyAnimationDone.complete();
	        this._inputChanges.complete();
	    };
	    /** Checks whether the expansion panel's content contains the currently-focused element. */
	    MatExpansionPanel.prototype._containsFocus = function () {
	        if (this._body) {
	            var focusedElement = this._document.activeElement;
	            var bodyElement = this._body.nativeElement;
	            return focusedElement === bodyElement || bodyElement.contains(focusedElement);
	        }
	        return false;
	    };
	    MatExpansionPanel.decorators = [
	        { type: Component, args: [{
	                    selector: 'mat-expansion-panel',
	                    exportAs: 'matExpansionPanel',
	                    template: "<ng-content select=\"mat-expansion-panel-header\"></ng-content>\n<div class=\"mat-expansion-panel-content\"\n     role=\"region\"\n     [@bodyExpansion]=\"_getExpandedState()\"\n     (@bodyExpansion.done)=\"_bodyAnimationDone.next($event)\"\n     [attr.aria-labelledby]=\"_headerId\"\n     [id]=\"id\"\n     #body>\n  <div class=\"mat-expansion-panel-body\">\n    <ng-content></ng-content>\n    <ng-template [cdkPortalOutlet]=\"_portal\"></ng-template>\n  </div>\n  <ng-content select=\"mat-action-row\"></ng-content>\n</div>\n",
	                    encapsulation: ViewEncapsulation$1$1.None,
	                    changeDetection: ChangeDetectionStrategy$1.OnPush,
	                    inputs: ['disabled', 'expanded'],
	                    outputs: ['opened', 'closed', 'expandedChange'],
	                    animations: [matExpansionAnimations.bodyExpansion],
	                    providers: [
	                        // Provide MatAccordion as undefined to prevent nested expansion panels from registering
	                        // to the same accordion.
	                        { provide: MAT_ACCORDION, useValue: Éµ0$h },
	                    ],
	                    host: {
	                        'class': 'mat-expansion-panel',
	                        '[class.mat-expanded]': 'expanded',
	                        '[class._mat-animation-noopable]': '_animationMode === "NoopAnimations"',
	                        '[class.mat-expansion-panel-spacing]': '_hasSpacing()',
	                    },
	                    styles: [".mat-expansion-panel{box-sizing:content-box;display:block;margin:0;border-radius:4px;overflow:hidden;transition:margin 225ms cubic-bezier(0.4, 0, 0.2, 1),box-shadow 280ms cubic-bezier(0.4, 0, 0.2, 1);position:relative}.mat-accordion .mat-expansion-panel:not(.mat-expanded),.mat-accordion .mat-expansion-panel:not(.mat-expansion-panel-spacing){border-radius:0}.mat-accordion .mat-expansion-panel:first-of-type{border-top-right-radius:4px;border-top-left-radius:4px}.mat-accordion .mat-expansion-panel:last-of-type{border-bottom-right-radius:4px;border-bottom-left-radius:4px}.cdk-high-contrast-active .mat-expansion-panel{outline:solid 1px}.mat-expansion-panel.ng-animate-disabled,.ng-animate-disabled .mat-expansion-panel,.mat-expansion-panel._mat-animation-noopable{transition:none}.mat-expansion-panel-content{display:flex;flex-direction:column;overflow:visible}.mat-expansion-panel-body{padding:0 24px 16px}.mat-expansion-panel-spacing{margin:16px 0}.mat-accordion>.mat-expansion-panel-spacing:first-child,.mat-accordion>*:first-child:not(.mat-expansion-panel) .mat-expansion-panel-spacing{margin-top:0}.mat-accordion>.mat-expansion-panel-spacing:last-child,.mat-accordion>*:last-child:not(.mat-expansion-panel) .mat-expansion-panel-spacing{margin-bottom:0}.mat-action-row{border-top-style:solid;border-top-width:1px;display:flex;flex-direction:row;justify-content:flex-end;padding:16px 8px 16px 24px}.mat-action-row button.mat-button-base,.mat-action-row button.mat-mdc-button-base{margin-left:8px}[dir=rtl] .mat-action-row button.mat-button-base,[dir=rtl] .mat-action-row button.mat-mdc-button-base{margin-left:0;margin-right:8px}\n"]
	                }] }
	    ];
	    /** @nocollapse */
	    MatExpansionPanel.ctorParameters = function () { return [
	        { type: undefined, decorators: [{ type: Optional }, { type: SkipSelf }, { type: Inject, args: [MAT_ACCORDION,] }] },
	        { type: ChangeDetectorRef },
	        { type: UniqueSelectionDispatcher },
	        { type: ViewContainerRef },
	        { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT$1,] }] },
	        { type: String, decorators: [{ type: Optional }, { type: Inject, args: [ANIMATION_MODULE_TYPE,] }] },
	        { type: undefined, decorators: [{ type: Inject, args: [MAT_EXPANSION_PANEL_DEFAULT_OPTIONS,] }, { type: Optional }] }
	    ]; };
	    MatExpansionPanel.propDecorators = {
	        hideToggle: [{ type: Input }],
	        togglePosition: [{ type: Input }],
	        afterExpand: [{ type: Output }],
	        afterCollapse: [{ type: Output }],
	        _lazyContent: [{ type: ContentChild, args: [MatExpansionPanelContent,] }],
	        _body: [{ type: ViewChild, args: ['body',] }]
	    };
	    return MatExpansionPanel;
	}(CdkAccordionItem));
	var MatExpansionPanelActionRow = /** @class */ (function () {
	    function MatExpansionPanelActionRow() {
	    }
	    MatExpansionPanelActionRow.decorators = [
	        { type: Directive, args: [{
	                    selector: 'mat-action-row',
	                    host: {
	                        class: 'mat-action-row'
	                    }
	                },] }
	    ];
	    return MatExpansionPanelActionRow;
	}());

	/**
	 * @license
	 * Copyright Google LLC All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * `<mat-expansion-panel-header>`
	 *
	 * This component corresponds to the header element of an `<mat-expansion-panel>`.
	 */
	var MatExpansionPanelHeader = /** @class */ (function () {
	    function MatExpansionPanelHeader(panel, _element, _focusMonitor, _changeDetectorRef, defaultOptions) {
	        var _this = this;
	        this.panel = panel;
	        this._element = _element;
	        this._focusMonitor = _focusMonitor;
	        this._changeDetectorRef = _changeDetectorRef;
	        this._parentChangeSubscription = Subscription.EMPTY;
	        /** Whether Angular animations in the panel header should be disabled. */
	        this._animationsDisabled = true;
	        var accordionHideToggleChange = panel.accordion ?
	            panel.accordion._stateChanges.pipe(filter(function (changes) { return !!(changes['hideToggle'] || changes['togglePosition']); })) :
	            EMPTY;
	        // Since the toggle state depends on an @Input on the panel, we
	        // need to subscribe and trigger change detection manually.
	        this._parentChangeSubscription =
	            merge(panel.opened, panel.closed, accordionHideToggleChange, panel._inputChanges.pipe(filter(function (changes) {
	                return !!(changes['hideToggle'] ||
	                    changes['disabled'] ||
	                    changes['togglePosition']);
	            })))
	                .subscribe(function () { return _this._changeDetectorRef.markForCheck(); });
	        // Avoids focus being lost if the panel contained the focused element and was closed.
	        panel.closed
	            .pipe(filter(function () { return panel._containsFocus(); }))
	            .subscribe(function () { return _focusMonitor.focusVia(_element, 'program'); });
	        _focusMonitor.monitor(_element).subscribe(function (origin) {
	            if (origin && panel.accordion) {
	                panel.accordion._handleHeaderFocus(_this);
	            }
	        });
	        if (defaultOptions) {
	            this.expandedHeight = defaultOptions.expandedHeight;
	            this.collapsedHeight = defaultOptions.collapsedHeight;
	        }
	    }
	    MatExpansionPanelHeader.prototype._animationStarted = function () {
	        // Currently the `expansionHeight` animation has a `void => collapsed` transition which is
	        // there to work around a bug in Angular (see #13088), however this introduces a different
	        // issue. The new transition will cause the header to animate in on init (see #16067), if the
	        // consumer has set a header height that is different from the default one. We work around it
	        // by disabling animations on the header and re-enabling them after the first animation has run.
	        // Note that Angular dispatches animation events even if animations are disabled. Ideally this
	        // wouldn't be necessary if we remove the `void => collapsed` transition, but we have to wait
	        // for https://github.com/angular/angular/issues/18847 to be resolved.
	        this._animationsDisabled = false;
	    };
	    Object.defineProperty(MatExpansionPanelHeader.prototype, "disabled", {
	        /**
	         * Whether the associated panel is disabled. Implemented as a part of `FocusableOption`.
	         * @docs-private
	         */
	        get: function () {
	            return this.panel.disabled;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    /** Toggles the expanded state of the panel. */
	    MatExpansionPanelHeader.prototype._toggle = function () {
	        if (!this.disabled) {
	            this.panel.toggle();
	        }
	    };
	    /** Gets whether the panel is expanded. */
	    MatExpansionPanelHeader.prototype._isExpanded = function () {
	        return this.panel.expanded;
	    };
	    /** Gets the expanded state string of the panel. */
	    MatExpansionPanelHeader.prototype._getExpandedState = function () {
	        return this.panel._getExpandedState();
	    };
	    /** Gets the panel id. */
	    MatExpansionPanelHeader.prototype._getPanelId = function () {
	        return this.panel.id;
	    };
	    /** Gets the toggle position for the header. */
	    MatExpansionPanelHeader.prototype._getTogglePosition = function () {
	        return this.panel.togglePosition;
	    };
	    /** Gets whether the expand indicator should be shown. */
	    MatExpansionPanelHeader.prototype._showToggle = function () {
	        return !this.panel.hideToggle && !this.panel.disabled;
	    };
	    /** Handle keydown event calling to toggle() if appropriate. */
	    MatExpansionPanelHeader.prototype._keydown = function (event) {
	        switch (event.keyCode) {
	            // Toggle for space and enter keys.
	            case SPACE:
	            case ENTER:
	                if (!hasModifierKey(event)) {
	                    event.preventDefault();
	                    this._toggle();
	                }
	                break;
	            default:
	                if (this.panel.accordion) {
	                    this.panel.accordion._handleHeaderKeydown(event);
	                }
	                return;
	        }
	    };
	    /**
	     * Focuses the panel header. Implemented as a part of `FocusableOption`.
	     * @param origin Origin of the action that triggered the focus.
	     * @docs-private
	     */
	    MatExpansionPanelHeader.prototype.focus = function (origin, options) {
	        if (origin === void 0) { origin = 'program'; }
	        this._focusMonitor.focusVia(this._element, origin, options);
	    };
	    MatExpansionPanelHeader.prototype.ngOnDestroy = function () {
	        this._parentChangeSubscription.unsubscribe();
	        this._focusMonitor.stopMonitoring(this._element);
	    };
	    MatExpansionPanelHeader.decorators = [
	        { type: Component, args: [{
	                    selector: 'mat-expansion-panel-header',
	                    template: "<span class=\"mat-content\">\n  <ng-content select=\"mat-panel-title\"></ng-content>\n  <ng-content select=\"mat-panel-description\"></ng-content>\n  <ng-content></ng-content>\n</span>\n<span [@indicatorRotate]=\"_getExpandedState()\" *ngIf=\"_showToggle()\"\n      class=\"mat-expansion-indicator\"></span>\n",
	                    encapsulation: ViewEncapsulation$1$1.None,
	                    changeDetection: ChangeDetectionStrategy$1.OnPush,
	                    animations: [
	                        matExpansionAnimations.indicatorRotate,
	                        matExpansionAnimations.expansionHeaderHeight
	                    ],
	                    host: {
	                        'class': 'mat-expansion-panel-header mat-focus-indicator',
	                        'role': 'button',
	                        '[attr.id]': 'panel._headerId',
	                        '[attr.tabindex]': 'disabled ? -1 : 0',
	                        '[attr.aria-controls]': '_getPanelId()',
	                        '[attr.aria-expanded]': '_isExpanded()',
	                        '[attr.aria-disabled]': 'panel.disabled',
	                        '[class.mat-expanded]': '_isExpanded()',
	                        '[class.mat-expansion-toggle-indicator-after]': "_getTogglePosition() === 'after'",
	                        '[class.mat-expansion-toggle-indicator-before]': "_getTogglePosition() === 'before'",
	                        '(click)': '_toggle()',
	                        '(keydown)': '_keydown($event)',
	                        '[@.disabled]': '_animationsDisabled',
	                        '(@expansionHeight.start)': '_animationStarted()',
	                        '[@expansionHeight]': "{\n        value: _getExpandedState(),\n        params: {\n          collapsedHeight: collapsedHeight,\n          expandedHeight: expandedHeight\n        }\n    }",
	                    },
	                    styles: [".mat-expansion-panel-header{display:flex;flex-direction:row;align-items:center;padding:0 24px;border-radius:inherit;position:relative}.mat-expansion-panel-header:focus,.mat-expansion-panel-header:hover{outline:none}.mat-expansion-panel-header.mat-expanded:focus,.mat-expansion-panel-header.mat-expanded:hover{background:inherit}.mat-expansion-panel-header:not([aria-disabled=true]){cursor:pointer}.mat-expansion-panel-header.mat-expansion-toggle-indicator-before{flex-direction:row-reverse}.mat-expansion-panel-header.mat-expansion-toggle-indicator-before .mat-expansion-indicator{margin:0 16px 0 0}[dir=rtl] .mat-expansion-panel-header.mat-expansion-toggle-indicator-before .mat-expansion-indicator{margin:0 0 0 16px}.mat-content{display:flex;flex:1;flex-direction:row;overflow:hidden}.mat-expansion-panel-header-title,.mat-expansion-panel-header-description{display:flex;flex-grow:1;margin-right:16px}[dir=rtl] .mat-expansion-panel-header-title,[dir=rtl] .mat-expansion-panel-header-description{margin-right:0;margin-left:16px}.mat-expansion-panel-header-description{flex-grow:2}.mat-expansion-indicator::after{border-style:solid;border-width:0 2px 2px 0;content:\"\";display:inline-block;padding:3px;transform:rotate(45deg);vertical-align:middle}\n"]
	                }] }
	    ];
	    /** @nocollapse */
	    MatExpansionPanelHeader.ctorParameters = function () { return [
	        { type: MatExpansionPanel, decorators: [{ type: Host }] },
	        { type: ElementRef },
	        { type: FocusMonitor },
	        { type: ChangeDetectorRef },
	        { type: undefined, decorators: [{ type: Inject, args: [MAT_EXPANSION_PANEL_DEFAULT_OPTIONS,] }, { type: Optional }] }
	    ]; };
	    MatExpansionPanelHeader.propDecorators = {
	        expandedHeight: [{ type: Input }],
	        collapsedHeight: [{ type: Input }]
	    };
	    return MatExpansionPanelHeader;
	}());
	/**
	 * `<mat-panel-description>`
	 *
	 * This directive is to be used inside of the MatExpansionPanelHeader component.
	 */
	var MatExpansionPanelDescription = /** @class */ (function () {
	    function MatExpansionPanelDescription() {
	    }
	    MatExpansionPanelDescription.decorators = [
	        { type: Directive, args: [{
	                    selector: 'mat-panel-description',
	                    host: {
	                        class: 'mat-expansion-panel-header-description'
	                    }
	                },] }
	    ];
	    return MatExpansionPanelDescription;
	}());
	/**
	 * `<mat-panel-title>`
	 *
	 * This directive is to be used inside of the MatExpansionPanelHeader component.
	 */
	var MatExpansionPanelTitle = /** @class */ (function () {
	    function MatExpansionPanelTitle() {
	    }
	    MatExpansionPanelTitle.decorators = [
	        { type: Directive, args: [{
	                    selector: 'mat-panel-title',
	                    host: {
	                        class: 'mat-expansion-panel-header-title'
	                    }
	                },] }
	    ];
	    return MatExpansionPanelTitle;
	}());

	/**
	 * @license
	 * Copyright Google LLC All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * Directive for a Material Design Accordion.
	 */
	var MatAccordion = /** @class */ (function (_super) {
	    __extends(MatAccordion, _super);
	    function MatAccordion() {
	        var _this = _super !== null && _super.apply(this, arguments) || this;
	        /** Headers belonging to this accordion. */
	        _this._ownHeaders = new QueryList();
	        _this._hideToggle = false;
	        /**
	         * Display mode used for all expansion panels in the accordion. Currently two display
	         * modes exist:
	         *  default - a gutter-like spacing is placed around any expanded panel, placing the expanded
	         *     panel at a different elevation from the rest of the accordion.
	         *  flat - no spacing is placed around expanded panels, showing all panels at the same
	         *     elevation.
	         */
	        _this.displayMode = 'default';
	        /** The position of the expansion indicator. */
	        _this.togglePosition = 'after';
	        return _this;
	    }
	    Object.defineProperty(MatAccordion.prototype, "hideToggle", {
	        /** Whether the expansion indicator should be hidden. */
	        get: function () { return this._hideToggle; },
	        set: function (show) { this._hideToggle = coerceBooleanProperty(show); },
	        enumerable: true,
	        configurable: true
	    });
	    MatAccordion.prototype.ngAfterContentInit = function () {
	        var _this = this;
	        this._headers.changes
	            .pipe(startWith(this._headers))
	            .subscribe(function (headers) {
	            _this._ownHeaders.reset(headers.filter(function (header) { return header.panel.accordion === _this; }));
	            _this._ownHeaders.notifyOnChanges();
	        });
	        this._keyManager = new FocusKeyManager(this._ownHeaders).withWrap();
	    };
	    /** Handles keyboard events coming in from the panel headers. */
	    MatAccordion.prototype._handleHeaderKeydown = function (event) {
	        var keyCode = event.keyCode;
	        var manager = this._keyManager;
	        if (keyCode === HOME) {
	            if (!hasModifierKey(event)) {
	                manager.setFirstItemActive();
	                event.preventDefault();
	            }
	        }
	        else if (keyCode === END) {
	            if (!hasModifierKey(event)) {
	                manager.setLastItemActive();
	                event.preventDefault();
	            }
	        }
	        else {
	            this._keyManager.onKeydown(event);
	        }
	    };
	    MatAccordion.prototype._handleHeaderFocus = function (header) {
	        this._keyManager.updateActiveItem(header);
	    };
	    MatAccordion.decorators = [
	        { type: Directive, args: [{
	                    selector: 'mat-accordion',
	                    exportAs: 'matAccordion',
	                    inputs: ['multi'],
	                    providers: [{
	                            provide: MAT_ACCORDION,
	                            useExisting: MatAccordion
	                        }],
	                    host: {
	                        class: 'mat-accordion',
	                        // Class binding which is only used by the test harness as there is no other
	                        // way for the harness to detect if multiple panel support is enabled.
	                        '[class.mat-accordion-multi]': 'this.multi',
	                    }
	                },] }
	    ];
	    MatAccordion.propDecorators = {
	        _headers: [{ type: ContentChildren, args: [MatExpansionPanelHeader, { descendants: true },] }],
	        hideToggle: [{ type: Input }],
	        displayMode: [{ type: Input }],
	        togglePosition: [{ type: Input }]
	    };
	    return MatAccordion;
	}(CdkAccordion));

	/**
	 * @license
	 * Copyright Google LLC All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	var MatExpansionModule = /** @class */ (function () {
	    function MatExpansionModule() {
	    }
	    MatExpansionModule.decorators = [
	        { type: NgModule, args: [{
	                    imports: [CommonModule, CdkAccordionModule, PortalModule],
	                    exports: [
	                        MatAccordion,
	                        MatExpansionPanel,
	                        MatExpansionPanelActionRow,
	                        MatExpansionPanelHeader,
	                        MatExpansionPanelTitle,
	                        MatExpansionPanelDescription,
	                        MatExpansionPanelContent,
	                    ],
	                    declarations: [
	                        MatAccordion,
	                        MatExpansionPanel,
	                        MatExpansionPanelActionRow,
	                        MatExpansionPanelHeader,
	                        MatExpansionPanelTitle,
	                        MatExpansionPanelDescription,
	                        MatExpansionPanelContent,
	                    ],
	                },] }
	    ];
	    return MatExpansionModule;
	}());

	/**
	 * @license
	 * Copyright Google LLC All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * Returns an exception to be thrown in the case when attempting to
	 * load an icon with a name that cannot be found.
	 * @docs-private
	 */
	function getMatIconNameNotFoundError(iconName) {
	    return Error("Unable to find icon with the name \"" + iconName + "\"");
	}
	/**
	 * Returns an exception to be thrown when the consumer attempts to use
	 * `<mat-icon>` without including @angular/common/http.
	 * @docs-private
	 */
	function getMatIconNoHttpProviderError() {
	    return Error('Could not find HttpClient provider for use with Angular Material icons. ' +
	        'Please include the HttpClientModule from @angular/common/http in your ' +
	        'app imports.');
	}
	/**
	 * Returns an exception to be thrown when a URL couldn't be sanitized.
	 * @param url URL that was attempted to be sanitized.
	 * @docs-private
	 */
	function getMatIconFailedToSanitizeUrlError(url) {
	    return Error("The URL provided to MatIconRegistry was not trusted as a resource URL " +
	        ("via Angular's DomSanitizer. Attempted URL was \"" + url + "\"."));
	}
	/**
	 * Returns an exception to be thrown when a HTML string couldn't be sanitized.
	 * @param literal HTML that was attempted to be sanitized.
	 * @docs-private
	 */
	function getMatIconFailedToSanitizeLiteralError(literal) {
	    return Error("The literal provided to MatIconRegistry was not trusted as safe HTML by " +
	        ("Angular's DomSanitizer. Attempted literal was \"" + literal + "\"."));
	}
	/**
	 * Configuration for an icon, including the URL and possibly the cached SVG element.
	 * @docs-private
	 */
	var SvgIconConfig = /** @class */ (function () {
	    function SvgIconConfig(data, options) {
	        this.options = options;
	        // Note that we can't use `instanceof SVGElement` here,
	        // because it'll break during server-side rendering.
	        if (!!data.nodeName) {
	            this.svgElement = data;
	        }
	        else {
	            this.url = data;
	        }
	    }
	    return SvgIconConfig;
	}());
	/**
	 * Service to register and display icons used by the `<mat-icon>` component.
	 * - Registers icon URLs by namespace and name.
	 * - Registers icon set URLs by namespace.
	 * - Registers aliases for CSS classes, for use with icon fonts.
	 * - Loads icons from URLs and extracts individual icons from icon sets.
	 */
	var MatIconRegistry = /** @class */ (function () {
	    function MatIconRegistry(_httpClient, _sanitizer, document, 
	    // @breaking-change 9.0.0 _errorHandler parameter to be made required
	    _errorHandler) {
	        this._httpClient = _httpClient;
	        this._sanitizer = _sanitizer;
	        this._errorHandler = _errorHandler;
	        /**
	         * URLs and cached SVG elements for individual icons. Keys are of the format "[namespace]:[icon]".
	         */
	        this._svgIconConfigs = new Map();
	        /**
	         * SvgIconConfig objects and cached SVG elements for icon sets, keyed by namespace.
	         * Multiple icon sets can be registered under the same namespace.
	         */
	        this._iconSetConfigs = new Map();
	        /** Cache for icons loaded by direct URLs. */
	        this._cachedIconsByUrl = new Map();
	        /** In-progress icon fetches. Used to coalesce multiple requests to the same URL. */
	        this._inProgressUrlFetches = new Map();
	        /** Map from font identifiers to their CSS class names. Used for icon fonts. */
	        this._fontCssClassesByAlias = new Map();
	        /**
	         * The CSS class to apply when an `<mat-icon>` component has no icon name, url, or font specified.
	         * The default 'material-icons' value assumes that the material icon font has been loaded as
	         * described at http://google.github.io/material-design-icons/#icon-font-for-the-web
	         */
	        this._defaultFontSetClass = 'material-icons';
	        this._document = document;
	    }
	    /**
	     * Registers an icon by URL in the default namespace.
	     * @param iconName Name under which the icon should be registered.
	     * @param url
	     */
	    MatIconRegistry.prototype.addSvgIcon = function (iconName, url, options) {
	        return this.addSvgIconInNamespace('', iconName, url, options);
	    };
	    /**
	     * Registers an icon using an HTML string in the default namespace.
	     * @param iconName Name under which the icon should be registered.
	     * @param literal SVG source of the icon.
	     */
	    MatIconRegistry.prototype.addSvgIconLiteral = function (iconName, literal, options) {
	        return this.addSvgIconLiteralInNamespace('', iconName, literal, options);
	    };
	    /**
	     * Registers an icon by URL in the specified namespace.
	     * @param namespace Namespace in which the icon should be registered.
	     * @param iconName Name under which the icon should be registered.
	     * @param url
	     */
	    MatIconRegistry.prototype.addSvgIconInNamespace = function (namespace, iconName, url, options) {
	        return this._addSvgIconConfig(namespace, iconName, new SvgIconConfig(url, options));
	    };
	    /**
	     * Registers an icon using an HTML string in the specified namespace.
	     * @param namespace Namespace in which the icon should be registered.
	     * @param iconName Name under which the icon should be registered.
	     * @param literal SVG source of the icon.
	     */
	    MatIconRegistry.prototype.addSvgIconLiteralInNamespace = function (namespace, iconName, literal, options) {
	        var sanitizedLiteral = this._sanitizer.sanitize(SecurityContext$1.HTML, literal);
	        if (!sanitizedLiteral) {
	            throw getMatIconFailedToSanitizeLiteralError(literal);
	        }
	        var svgElement = this._createSvgElementForSingleIcon(sanitizedLiteral, options);
	        return this._addSvgIconConfig(namespace, iconName, new SvgIconConfig(svgElement, options));
	    };
	    /**
	     * Registers an icon set by URL in the default namespace.
	     * @param url
	     */
	    MatIconRegistry.prototype.addSvgIconSet = function (url, options) {
	        return this.addSvgIconSetInNamespace('', url, options);
	    };
	    /**
	     * Registers an icon set using an HTML string in the default namespace.
	     * @param literal SVG source of the icon set.
	     */
	    MatIconRegistry.prototype.addSvgIconSetLiteral = function (literal, options) {
	        return this.addSvgIconSetLiteralInNamespace('', literal, options);
	    };
	    /**
	     * Registers an icon set by URL in the specified namespace.
	     * @param namespace Namespace in which to register the icon set.
	     * @param url
	     */
	    MatIconRegistry.prototype.addSvgIconSetInNamespace = function (namespace, url, options) {
	        return this._addSvgIconSetConfig(namespace, new SvgIconConfig(url, options));
	    };
	    /**
	     * Registers an icon set using an HTML string in the specified namespace.
	     * @param namespace Namespace in which to register the icon set.
	     * @param literal SVG source of the icon set.
	     */
	    MatIconRegistry.prototype.addSvgIconSetLiteralInNamespace = function (namespace, literal, options) {
	        var sanitizedLiteral = this._sanitizer.sanitize(SecurityContext$1.HTML, literal);
	        if (!sanitizedLiteral) {
	            throw getMatIconFailedToSanitizeLiteralError(literal);
	        }
	        var svgElement = this._svgElementFromString(sanitizedLiteral);
	        return this._addSvgIconSetConfig(namespace, new SvgIconConfig(svgElement, options));
	    };
	    /**
	     * Defines an alias for a CSS class name to be used for icon fonts. Creating an matIcon
	     * component with the alias as the fontSet input will cause the class name to be applied
	     * to the `<mat-icon>` element.
	     *
	     * @param alias Alias for the font.
	     * @param className Class name override to be used instead of the alias.
	     */
	    MatIconRegistry.prototype.registerFontClassAlias = function (alias, className) {
	        if (className === void 0) { className = alias; }
	        this._fontCssClassesByAlias.set(alias, className);
	        return this;
	    };
	    /**
	     * Returns the CSS class name associated with the alias by a previous call to
	     * registerFontClassAlias. If no CSS class has been associated, returns the alias unmodified.
	     */
	    MatIconRegistry.prototype.classNameForFontAlias = function (alias) {
	        return this._fontCssClassesByAlias.get(alias) || alias;
	    };
	    /**
	     * Sets the CSS class name to be used for icon fonts when an `<mat-icon>` component does not
	     * have a fontSet input value, and is not loading an icon by name or URL.
	     *
	     * @param className
	     */
	    MatIconRegistry.prototype.setDefaultFontSetClass = function (className) {
	        this._defaultFontSetClass = className;
	        return this;
	    };
	    /**
	     * Returns the CSS class name to be used for icon fonts when an `<mat-icon>` component does not
	     * have a fontSet input value, and is not loading an icon by name or URL.
	     */
	    MatIconRegistry.prototype.getDefaultFontSetClass = function () {
	        return this._defaultFontSetClass;
	    };
	    /**
	     * Returns an Observable that produces the icon (as an `<svg>` DOM element) from the given URL.
	     * The response from the URL may be cached so this will not always cause an HTTP request, but
	     * the produced element will always be a new copy of the originally fetched icon. (That is,
	     * it will not contain any modifications made to elements previously returned).
	     *
	     * @param safeUrl URL from which to fetch the SVG icon.
	     */
	    MatIconRegistry.prototype.getSvgIconFromUrl = function (safeUrl) {
	        var _this = this;
	        var url = this._sanitizer.sanitize(SecurityContext$1.RESOURCE_URL, safeUrl);
	        if (!url) {
	            throw getMatIconFailedToSanitizeUrlError(safeUrl);
	        }
	        var cachedIcon = this._cachedIconsByUrl.get(url);
	        if (cachedIcon) {
	            return of(cloneSvg(cachedIcon));
	        }
	        return this._loadSvgIconFromConfig(new SvgIconConfig(safeUrl)).pipe(tap(function (svg) { return _this._cachedIconsByUrl.set(url, svg); }), map(function (svg) { return cloneSvg(svg); }));
	    };
	    /**
	     * Returns an Observable that produces the icon (as an `<svg>` DOM element) with the given name
	     * and namespace. The icon must have been previously registered with addIcon or addIconSet;
	     * if not, the Observable will throw an error.
	     *
	     * @param name Name of the icon to be retrieved.
	     * @param namespace Namespace in which to look for the icon.
	     */
	    MatIconRegistry.prototype.getNamedSvgIcon = function (name, namespace) {
	        if (namespace === void 0) { namespace = ''; }
	        // Return (copy of) cached icon if possible.
	        var key = iconKey(namespace, name);
	        var config = this._svgIconConfigs.get(key);
	        if (config) {
	            return this._getSvgFromConfig(config);
	        }
	        // See if we have any icon sets registered for the namespace.
	        var iconSetConfigs = this._iconSetConfigs.get(namespace);
	        if (iconSetConfigs) {
	            return this._getSvgFromIconSetConfigs(name, iconSetConfigs);
	        }
	        return throwError(getMatIconNameNotFoundError(key));
	    };
	    MatIconRegistry.prototype.ngOnDestroy = function () {
	        this._svgIconConfigs.clear();
	        this._iconSetConfigs.clear();
	        this._cachedIconsByUrl.clear();
	    };
	    /**
	     * Returns the cached icon for a SvgIconConfig if available, or fetches it from its URL if not.
	     */
	    MatIconRegistry.prototype._getSvgFromConfig = function (config) {
	        if (config.svgElement) {
	            // We already have the SVG element for this icon, return a copy.
	            return of(cloneSvg(config.svgElement));
	        }
	        else {
	            // Fetch the icon from the config's URL, cache it, and return a copy.
	            return this._loadSvgIconFromConfig(config).pipe(tap(function (svg) { return config.svgElement = svg; }), map(function (svg) { return cloneSvg(svg); }));
	        }
	    };
	    /**
	     * Attempts to find an icon with the specified name in any of the SVG icon sets.
	     * First searches the available cached icons for a nested element with a matching name, and
	     * if found copies the element to a new `<svg>` element. If not found, fetches all icon sets
	     * that have not been cached, and searches again after all fetches are completed.
	     * The returned Observable produces the SVG element if possible, and throws
	     * an error if no icon with the specified name can be found.
	     */
	    MatIconRegistry.prototype._getSvgFromIconSetConfigs = function (name, iconSetConfigs) {
	        var _this = this;
	        // For all the icon set SVG elements we've fetched, see if any contain an icon with the
	        // requested name.
	        var namedIcon = this._extractIconWithNameFromAnySet(name, iconSetConfigs);
	        if (namedIcon) {
	            // We could cache namedIcon in _svgIconConfigs, but since we have to make a copy every
	            // time anyway, there's probably not much advantage compared to just always extracting
	            // it from the icon set.
	            return of(namedIcon);
	        }
	        // Not found in any cached icon sets. If there are icon sets with URLs that we haven't
	        // fetched, fetch them now and look for iconName in the results.
	        var iconSetFetchRequests = iconSetConfigs
	            .filter(function (iconSetConfig) { return !iconSetConfig.svgElement; })
	            .map(function (iconSetConfig) {
	            return _this._loadSvgIconSetFromConfig(iconSetConfig).pipe(catchError(function (err) {
	                var url = _this._sanitizer.sanitize(SecurityContext$1.RESOURCE_URL, iconSetConfig.url);
	                // Swallow errors fetching individual URLs so the
	                // combined Observable won't necessarily fail.
	                var errorMessage = "Loading icon set URL: " + url + " failed: " + err.message;
	                // @breaking-change 9.0.0 _errorHandler parameter to be made required
	                if (_this._errorHandler) {
	                    _this._errorHandler.handleError(new Error(errorMessage));
	                }
	                else {
	                    console.error(errorMessage);
	                }
	                return of(null);
	            }));
	        });
	        // Fetch all the icon set URLs. When the requests complete, every IconSet should have a
	        // cached SVG element (unless the request failed), and we can check again for the icon.
	        return forkJoin(iconSetFetchRequests).pipe(map(function () {
	            var foundIcon = _this._extractIconWithNameFromAnySet(name, iconSetConfigs);
	            if (!foundIcon) {
	                throw getMatIconNameNotFoundError(name);
	            }
	            return foundIcon;
	        }));
	    };
	    /**
	     * Searches the cached SVG elements for the given icon sets for a nested icon element whose "id"
	     * tag matches the specified name. If found, copies the nested element to a new SVG element and
	     * returns it. Returns null if no matching element is found.
	     */
	    MatIconRegistry.prototype._extractIconWithNameFromAnySet = function (iconName, iconSetConfigs) {
	        // Iterate backwards, so icon sets added later have precedence.
	        for (var i = iconSetConfigs.length - 1; i >= 0; i--) {
	            var config = iconSetConfigs[i];
	            if (config.svgElement) {
	                var foundIcon = this._extractSvgIconFromSet(config.svgElement, iconName, config.options);
	                if (foundIcon) {
	                    return foundIcon;
	                }
	            }
	        }
	        return null;
	    };
	    /**
	     * Loads the content of the icon URL specified in the SvgIconConfig and creates an SVG element
	     * from it.
	     */
	    MatIconRegistry.prototype._loadSvgIconFromConfig = function (config) {
	        var _this = this;
	        return this._fetchUrl(config.url)
	            .pipe(map(function (svgText) { return _this._createSvgElementForSingleIcon(svgText, config.options); }));
	    };
	    /**
	     * Loads the content of the icon set URL specified in the SvgIconConfig and creates an SVG element
	     * from it.
	     */
	    MatIconRegistry.prototype._loadSvgIconSetFromConfig = function (config) {
	        var _this = this;
	        // If the SVG for this icon set has already been parsed, do nothing.
	        if (config.svgElement) {
	            return of(config.svgElement);
	        }
	        return this._fetchUrl(config.url).pipe(map(function (svgText) {
	            // It is possible that the icon set was parsed and cached by an earlier request, so parsing
	            // only needs to occur if the cache is yet unset.
	            if (!config.svgElement) {
	                config.svgElement = _this._svgElementFromString(svgText);
	            }
	            return config.svgElement;
	        }));
	    };
	    /**
	     * Creates a DOM element from the given SVG string, and adds default attributes.
	     */
	    MatIconRegistry.prototype._createSvgElementForSingleIcon = function (responseText, options) {
	        var svg = this._svgElementFromString(responseText);
	        this._setSvgAttributes(svg, options);
	        return svg;
	    };
	    /**
	     * Searches the cached element of the given SvgIconConfig for a nested icon element whose "id"
	     * tag matches the specified name. If found, copies the nested element to a new SVG element and
	     * returns it. Returns null if no matching element is found.
	     */
	    MatIconRegistry.prototype._extractSvgIconFromSet = function (iconSet, iconName, options) {
	        // Use the `id="iconName"` syntax in order to escape special
	        // characters in the ID (versus using the #iconName syntax).
	        var iconSource = iconSet.querySelector("[id=\"" + iconName + "\"]");
	        if (!iconSource) {
	            return null;
	        }
	        // Clone the element and remove the ID to prevent multiple elements from being added
	        // to the page with the same ID.
	        var iconElement = iconSource.cloneNode(true);
	        iconElement.removeAttribute('id');
	        // If the icon node is itself an <svg> node, clone and return it directly. If not, set it as
	        // the content of a new <svg> node.
	        if (iconElement.nodeName.toLowerCase() === 'svg') {
	            return this._setSvgAttributes(iconElement, options);
	        }
	        // If the node is a <symbol>, it won't be rendered so we have to convert it into <svg>. Note
	        // that the same could be achieved by referring to it via <use href="#id">, however the <use>
	        // tag is problematic on Firefox, because it needs to include the current page path.
	        if (iconElement.nodeName.toLowerCase() === 'symbol') {
	            return this._setSvgAttributes(this._toSvgElement(iconElement), options);
	        }
	        // createElement('SVG') doesn't work as expected; the DOM ends up with
	        // the correct nodes, but the SVG content doesn't render. Instead we
	        // have to create an empty SVG node using innerHTML and append its content.
	        // Elements created using DOMParser.parseFromString have the same problem.
	        // http://stackoverflow.com/questions/23003278/svg-innerhtml-in-firefox-can-not-display
	        var svg = this._svgElementFromString('<svg></svg>');
	        // Clone the node so we don't remove it from the parent icon set element.
	        svg.appendChild(iconElement);
	        return this._setSvgAttributes(svg, options);
	    };
	    /**
	     * Creates a DOM element from the given SVG string.
	     */
	    MatIconRegistry.prototype._svgElementFromString = function (str) {
	        var div = this._document.createElement('DIV');
	        div.innerHTML = str;
	        var svg = div.querySelector('svg');
	        if (!svg) {
	            throw Error('<svg> tag not found');
	        }
	        return svg;
	    };
	    /**
	     * Converts an element into an SVG node by cloning all of its children.
	     */
	    MatIconRegistry.prototype._toSvgElement = function (element) {
	        var svg = this._svgElementFromString('<svg></svg>');
	        var attributes = element.attributes;
	        // Copy over all the attributes from the `symbol` to the new SVG, except the id.
	        for (var i = 0; i < attributes.length; i++) {
	            var _a = attributes[i], name_1 = _a.name, value = _a.value;
	            if (name_1 !== 'id') {
	                svg.setAttribute(name_1, value);
	            }
	        }
	        for (var i = 0; i < element.childNodes.length; i++) {
	            if (element.childNodes[i].nodeType === this._document.ELEMENT_NODE) {
	                svg.appendChild(element.childNodes[i].cloneNode(true));
	            }
	        }
	        return svg;
	    };
	    /**
	     * Sets the default attributes for an SVG element to be used as an icon.
	     */
	    MatIconRegistry.prototype._setSvgAttributes = function (svg, options) {
	        svg.setAttribute('fit', '');
	        svg.setAttribute('height', '100%');
	        svg.setAttribute('width', '100%');
	        svg.setAttribute('preserveAspectRatio', 'xMidYMid meet');
	        svg.setAttribute('focusable', 'false'); // Disable IE11 default behavior to make SVGs focusable.
	        if (options && options.viewBox) {
	            svg.setAttribute('viewBox', options.viewBox);
	        }
	        return svg;
	    };
	    /**
	     * Returns an Observable which produces the string contents of the given URL. Results may be
	     * cached, so future calls with the same URL may not cause another HTTP request.
	     */
	    MatIconRegistry.prototype._fetchUrl = function (safeUrl) {
	        var _this = this;
	        if (!this._httpClient) {
	            throw getMatIconNoHttpProviderError();
	        }
	        if (safeUrl == null) {
	            throw Error("Cannot fetch icon from URL \"" + safeUrl + "\".");
	        }
	        var url = this._sanitizer.sanitize(SecurityContext$1.RESOURCE_URL, safeUrl);
	        if (!url) {
	            throw getMatIconFailedToSanitizeUrlError(safeUrl);
	        }
	        // Store in-progress fetches to avoid sending a duplicate request for a URL when there is
	        // already a request in progress for that URL. It's necessary to call share() on the
	        // Observable returned by http.get() so that multiple subscribers don't cause multiple XHRs.
	        var inProgressFetch = this._inProgressUrlFetches.get(url);
	        if (inProgressFetch) {
	            return inProgressFetch;
	        }
	        // TODO(jelbourn): for some reason, the `finalize` operator "loses" the generic type on the
	        // Observable. Figure out why and fix it.
	        var req = this._httpClient.get(url, { responseType: 'text' }).pipe(finalize(function () { return _this._inProgressUrlFetches.delete(url); }), share());
	        this._inProgressUrlFetches.set(url, req);
	        return req;
	    };
	    /**
	     * Registers an icon config by name in the specified namespace.
	     * @param namespace Namespace in which to register the icon config.
	     * @param iconName Name under which to register the config.
	     * @param config Config to be registered.
	     */
	    MatIconRegistry.prototype._addSvgIconConfig = function (namespace, iconName, config) {
	        this._svgIconConfigs.set(iconKey(namespace, iconName), config);
	        return this;
	    };
	    /**
	     * Registers an icon set config in the specified namespace.
	     * @param namespace Namespace in which to register the icon config.
	     * @param config Config to be registered.
	     */
	    MatIconRegistry.prototype._addSvgIconSetConfig = function (namespace, config) {
	        var configNamespace = this._iconSetConfigs.get(namespace);
	        if (configNamespace) {
	            configNamespace.push(config);
	        }
	        else {
	            this._iconSetConfigs.set(namespace, [config]);
	        }
	        return this;
	    };
	    MatIconRegistry.decorators = [
	        { type: Injectable, args: [{ providedIn: 'root' },] }
	    ];
	    /** @nocollapse */
	    MatIconRegistry.ctorParameters = function () { return [
	        { type: HttpClient, decorators: [{ type: Optional }] },
	        { type: DomSanitizer },
	        { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [DOCUMENT$1,] }] },
	        { type: ErrorHandler, decorators: [{ type: Optional }] }
	    ]; };
	    MatIconRegistry.Éµprov = ÉµÉµdefineInjectable({ factory: function MatIconRegistry_Factory() { return new MatIconRegistry(ÉµÉµinject(HttpClient, 8), ÉµÉµinject(DomSanitizer), ÉµÉµinject(DOCUMENT$1, 8), ÉµÉµinject(ErrorHandler, 8)); }, token: MatIconRegistry, providedIn: "root" });
	    return MatIconRegistry;
	}());
	/** @docs-private */
	function ICON_REGISTRY_PROVIDER_FACTORY(parentRegistry, httpClient, sanitizer, document, errorHandler) {
	    return parentRegistry || new MatIconRegistry(httpClient, sanitizer, document, errorHandler);
	}
	/** @docs-private */
	var ICON_REGISTRY_PROVIDER = {
	    // If there is already an MatIconRegistry available, use that. Otherwise, provide a new one.
	    provide: MatIconRegistry,
	    deps: [
	        [new Optional(), new SkipSelf(), MatIconRegistry],
	        [new Optional(), HttpClient],
	        DomSanitizer,
	        [new Optional(), ErrorHandler],
	        [new Optional(), DOCUMENT$1],
	    ],
	    useFactory: ICON_REGISTRY_PROVIDER_FACTORY,
	};
	/** Clones an SVGElement while preserving type information. */
	function cloneSvg(svg) {
	    return svg.cloneNode(true);
	}
	/** Returns the cache key to use for an icon namespace and name. */
	function iconKey(namespace, name) {
	    return namespace + ':' + name;
	}

	/**
	 * @license
	 * Copyright Google LLC All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	// Boilerplate for applying mixins to MatIcon.
	/** @docs-private */
	var MatIconBase = /** @class */ (function () {
	    function MatIconBase(_elementRef) {
	        this._elementRef = _elementRef;
	    }
	    return MatIconBase;
	}());
	var _MatIconMixinBase = mixinColor(MatIconBase);
	/**
	 * Injection token used to provide the current location to `MatIcon`.
	 * Used to handle server-side rendering and to stub out during unit tests.
	 * @docs-private
	 */
	var MAT_ICON_LOCATION = new InjectionToken('mat-icon-location', {
	    providedIn: 'root',
	    factory: MAT_ICON_LOCATION_FACTORY
	});
	/** @docs-private */
	function MAT_ICON_LOCATION_FACTORY() {
	    var _document = inject(DOCUMENT$1);
	    var _location = _document ? _document.location : null;
	    return {
	        // Note that this needs to be a function, rather than a property, because Angular
	        // will only resolve it once, but we want the current path on each call.
	        getPathname: function () { return _location ? (_location.pathname + _location.search) : ''; }
	    };
	}
	/** SVG attributes that accept a FuncIRI (e.g. `url(<something>)`). */
	var funcIriAttributes = [
	    'clip-path',
	    'color-profile',
	    'src',
	    'cursor',
	    'fill',
	    'filter',
	    'marker',
	    'marker-start',
	    'marker-mid',
	    'marker-end',
	    'mask',
	    'stroke'
	];
	var Éµ0$i = function (attr) { return "[" + attr + "]"; };
	/** Selector that can be used to find all elements that are using a `FuncIRI`. */
	var funcIriAttributeSelector = funcIriAttributes.map(Éµ0$i).join(', ');
	/** Regex that can be used to extract the id out of a FuncIRI. */
	var funcIriPattern = /^url\(['"]?#(.*?)['"]?\)$/;
	/**
	 * Component to display an icon. It can be used in the following ways:
	 *
	 * - Specify the svgIcon input to load an SVG icon from a URL previously registered with the
	 *   addSvgIcon, addSvgIconInNamespace, addSvgIconSet, or addSvgIconSetInNamespace methods of
	 *   MatIconRegistry. If the svgIcon value contains a colon it is assumed to be in the format
	 *   "[namespace]:[name]", if not the value will be the name of an icon in the default namespace.
	 *   Examples:
	 *     `<mat-icon svgIcon="left-arrow"></mat-icon>
	 *     <mat-icon svgIcon="animals:cat"></mat-icon>`
	 *
	 * - Use a font ligature as an icon by putting the ligature text in the content of the `<mat-icon>`
	 *   component. By default the Material icons font is used as described at
	 *   http://google.github.io/material-design-icons/#icon-font-for-the-web. You can specify an
	 *   alternate font by setting the fontSet input to either the CSS class to apply to use the
	 *   desired font, or to an alias previously registered with MatIconRegistry.registerFontClassAlias.
	 *   Examples:
	 *     `<mat-icon>home</mat-icon>
	 *     <mat-icon fontSet="myfont">sun</mat-icon>`
	 *
	 * - Specify a font glyph to be included via CSS rules by setting the fontSet input to specify the
	 *   font, and the fontIcon input to specify the icon. Typically the fontIcon will specify a
	 *   CSS class which causes the glyph to be displayed via a :before selector, as in
	 *   https://fortawesome.github.io/Font-Awesome/examples/
	 *   Example:
	 *     `<mat-icon fontSet="fa" fontIcon="alarm"></mat-icon>`
	 */
	var MatIcon = /** @class */ (function (_super) {
	    __extends(MatIcon, _super);
	    function MatIcon(elementRef, _iconRegistry, ariaHidden, 
	    /**
	     * @deprecated `location` parameter to be made required.
	     * @breaking-change 8.0.0
	     */
	    _location, 
	    // @breaking-change 9.0.0 _errorHandler parameter to be made required
	    _errorHandler) {
	        var _this = _super.call(this, elementRef) || this;
	        _this._iconRegistry = _iconRegistry;
	        _this._location = _location;
	        _this._errorHandler = _errorHandler;
	        _this._inline = false;
	        // If the user has not explicitly set aria-hidden, mark the icon as hidden, as this is
	        // the right thing to do for the majority of icon use-cases.
	        if (!ariaHidden) {
	            elementRef.nativeElement.setAttribute('aria-hidden', 'true');
	        }
	        return _this;
	    }
	    Object.defineProperty(MatIcon.prototype, "inline", {
	        /**
	         * Whether the icon should be inlined, automatically sizing the icon to match the font size of
	         * the element the icon is contained in.
	         */
	        get: function () {
	            return this._inline;
	        },
	        set: function (inline) {
	            this._inline = coerceBooleanProperty(inline);
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(MatIcon.prototype, "fontSet", {
	        /** Font set that the icon is a part of. */
	        get: function () { return this._fontSet; },
	        set: function (value) {
	            this._fontSet = this._cleanupFontValue(value);
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(MatIcon.prototype, "fontIcon", {
	        /** Name of an icon within a font set. */
	        get: function () { return this._fontIcon; },
	        set: function (value) {
	            this._fontIcon = this._cleanupFontValue(value);
	        },
	        enumerable: true,
	        configurable: true
	    });
	    /**
	     * Splits an svgIcon binding value into its icon set and icon name components.
	     * Returns a 2-element array of [(icon set), (icon name)].
	     * The separator for the two fields is ':'. If there is no separator, an empty
	     * string is returned for the icon set and the entire value is returned for
	     * the icon name. If the argument is falsy, returns an array of two empty strings.
	     * Throws an error if the name contains two or more ':' separators.
	     * Examples:
	     *   `'social:cake' -> ['social', 'cake']
	     *   'penguin' -> ['', 'penguin']
	     *   null -> ['', '']
	     *   'a:b:c' -> (throws Error)`
	     */
	    MatIcon.prototype._splitIconName = function (iconName) {
	        if (!iconName) {
	            return ['', ''];
	        }
	        var parts = iconName.split(':');
	        switch (parts.length) {
	            case 1: return ['', parts[0]]; // Use default namespace.
	            case 2: return parts;
	            default: throw Error("Invalid icon name: \"" + iconName + "\"");
	        }
	    };
	    MatIcon.prototype.ngOnChanges = function (changes) {
	        var _this = this;
	        // Only update the inline SVG icon if the inputs changed, to avoid unnecessary DOM operations.
	        var svgIconChanges = changes['svgIcon'];
	        if (svgIconChanges) {
	            if (this.svgIcon) {
	                var _a = __read(this._splitIconName(this.svgIcon), 2), namespace_1 = _a[0], iconName_1 = _a[1];
	                this._iconRegistry.getNamedSvgIcon(iconName_1, namespace_1)
	                    .pipe(take(1))
	                    .subscribe(function (svg) { return _this._setSvgElement(svg); }, function (err) {
	                    var errorMessage = "Error retrieving icon " + namespace_1 + ":" + iconName_1 + "! " + err.message;
	                    // @breaking-change 9.0.0 _errorHandler parameter to be made required.
	                    if (_this._errorHandler) {
	                        _this._errorHandler.handleError(new Error(errorMessage));
	                    }
	                    else {
	                        console.error(errorMessage);
	                    }
	                });
	            }
	            else if (svgIconChanges.previousValue) {
	                this._clearSvgElement();
	            }
	        }
	        if (this._usingFontIcon()) {
	            this._updateFontIconClasses();
	        }
	    };
	    MatIcon.prototype.ngOnInit = function () {
	        // Update font classes because ngOnChanges won't be called if none of the inputs are present,
	        // e.g. <mat-icon>arrow</mat-icon> In this case we need to add a CSS class for the default font.
	        if (this._usingFontIcon()) {
	            this._updateFontIconClasses();
	        }
	    };
	    MatIcon.prototype.ngAfterViewChecked = function () {
	        var cachedElements = this._elementsWithExternalReferences;
	        if (cachedElements && this._location && cachedElements.size) {
	            var newPath = this._location.getPathname();
	            // We need to check whether the URL has changed on each change detection since
	            // the browser doesn't have an API that will let us react on link clicks and
	            // we can't depend on the Angular router. The references need to be updated,
	            // because while most browsers don't care whether the URL is correct after
	            // the first render, Safari will break if the user navigates to a different
	            // page and the SVG isn't re-rendered.
	            if (newPath !== this._previousPath) {
	                this._previousPath = newPath;
	                this._prependPathToReferences(newPath);
	            }
	        }
	    };
	    MatIcon.prototype.ngOnDestroy = function () {
	        if (this._elementsWithExternalReferences) {
	            this._elementsWithExternalReferences.clear();
	        }
	    };
	    MatIcon.prototype._usingFontIcon = function () {
	        return !this.svgIcon;
	    };
	    MatIcon.prototype._setSvgElement = function (svg) {
	        this._clearSvgElement();
	        // Workaround for IE11 and Edge ignoring `style` tags inside dynamically-created SVGs.
	        // See: https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/10898469/
	        // Do this before inserting the element into the DOM, in order to avoid a style recalculation.
	        var styleTags = svg.querySelectorAll('style');
	        for (var i = 0; i < styleTags.length; i++) {
	            styleTags[i].textContent += ' ';
	        }
	        // Note: we do this fix here, rather than the icon registry, because the
	        // references have to point to the URL at the time that the icon was created.
	        if (this._location) {
	            var path = this._location.getPathname();
	            this._previousPath = path;
	            this._cacheChildrenWithExternalReferences(svg);
	            this._prependPathToReferences(path);
	        }
	        this._elementRef.nativeElement.appendChild(svg);
	    };
	    MatIcon.prototype._clearSvgElement = function () {
	        var layoutElement = this._elementRef.nativeElement;
	        var childCount = layoutElement.childNodes.length;
	        if (this._elementsWithExternalReferences) {
	            this._elementsWithExternalReferences.clear();
	        }
	        // Remove existing non-element child nodes and SVGs, and add the new SVG element. Note that
	        // we can't use innerHTML, because IE will throw if the element has a data binding.
	        while (childCount--) {
	            var child = layoutElement.childNodes[childCount];
	            // 1 corresponds to Node.ELEMENT_NODE. We remove all non-element nodes in order to get rid
	            // of any loose text nodes, as well as any SVG elements in order to remove any old icons.
	            if (child.nodeType !== 1 || child.nodeName.toLowerCase() === 'svg') {
	                layoutElement.removeChild(child);
	            }
	        }
	    };
	    MatIcon.prototype._updateFontIconClasses = function () {
	        if (!this._usingFontIcon()) {
	            return;
	        }
	        var elem = this._elementRef.nativeElement;
	        var fontSetClass = this.fontSet ?
	            this._iconRegistry.classNameForFontAlias(this.fontSet) :
	            this._iconRegistry.getDefaultFontSetClass();
	        if (fontSetClass != this._previousFontSetClass) {
	            if (this._previousFontSetClass) {
	                elem.classList.remove(this._previousFontSetClass);
	            }
	            if (fontSetClass) {
	                elem.classList.add(fontSetClass);
	            }
	            this._previousFontSetClass = fontSetClass;
	        }
	        if (this.fontIcon != this._previousFontIconClass) {
	            if (this._previousFontIconClass) {
	                elem.classList.remove(this._previousFontIconClass);
	            }
	            if (this.fontIcon) {
	                elem.classList.add(this.fontIcon);
	            }
	            this._previousFontIconClass = this.fontIcon;
	        }
	    };
	    /**
	     * Cleans up a value to be used as a fontIcon or fontSet.
	     * Since the value ends up being assigned as a CSS class, we
	     * have to trim the value and omit space-separated values.
	     */
	    MatIcon.prototype._cleanupFontValue = function (value) {
	        return typeof value === 'string' ? value.trim().split(' ')[0] : value;
	    };
	    /**
	     * Prepends the current path to all elements that have an attribute pointing to a `FuncIRI`
	     * reference. This is required because WebKit browsers require references to be prefixed with
	     * the current path, if the page has a `base` tag.
	     */
	    MatIcon.prototype._prependPathToReferences = function (path) {
	        var elements = this._elementsWithExternalReferences;
	        if (elements) {
	            elements.forEach(function (attrs, element) {
	                attrs.forEach(function (attr) {
	                    element.setAttribute(attr.name, "url('" + path + "#" + attr.value + "')");
	                });
	            });
	        }
	    };
	    /**
	     * Caches the children of an SVG element that have `url()`
	     * references that we need to prefix with the current path.
	     */
	    MatIcon.prototype._cacheChildrenWithExternalReferences = function (element) {
	        var elementsWithFuncIri = element.querySelectorAll(funcIriAttributeSelector);
	        var elements = this._elementsWithExternalReferences =
	            this._elementsWithExternalReferences || new Map();
	        var _loop_1 = function (i) {
	            funcIriAttributes.forEach(function (attr) {
	                var elementWithReference = elementsWithFuncIri[i];
	                var value = elementWithReference.getAttribute(attr);
	                var match = value ? value.match(funcIriPattern) : null;
	                if (match) {
	                    var attributes = elements.get(elementWithReference);
	                    if (!attributes) {
	                        attributes = [];
	                        elements.set(elementWithReference, attributes);
	                    }
	                    attributes.push({ name: attr, value: match[1] });
	                }
	            });
	        };
	        for (var i = 0; i < elementsWithFuncIri.length; i++) {
	            _loop_1(i);
	        }
	    };
	    MatIcon.decorators = [
	        { type: Component, args: [{
	                    template: '<ng-content></ng-content>',
	                    selector: 'mat-icon',
	                    exportAs: 'matIcon',
	                    inputs: ['color'],
	                    host: {
	                        'role': 'img',
	                        'class': 'mat-icon notranslate',
	                        '[class.mat-icon-inline]': 'inline',
	                        '[class.mat-icon-no-color]': 'color !== "primary" && color !== "accent" && color !== "warn"',
	                    },
	                    encapsulation: ViewEncapsulation$1$1.None,
	                    changeDetection: ChangeDetectionStrategy$1.OnPush,
	                    styles: [".mat-icon{background-repeat:no-repeat;display:inline-block;fill:currentColor;height:24px;width:24px}.mat-icon.mat-icon-inline{font-size:inherit;height:inherit;line-height:inherit;width:inherit}[dir=rtl] .mat-icon-rtl-mirror{transform:scale(-1, 1)}.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-prefix .mat-icon,.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-suffix .mat-icon{display:block}.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-prefix .mat-icon-button .mat-icon,.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-suffix .mat-icon-button .mat-icon{margin:auto}\n"]
	                }] }
	    ];
	    /** @nocollapse */
	    MatIcon.ctorParameters = function () { return [
	        { type: ElementRef },
	        { type: MatIconRegistry },
	        { type: String, decorators: [{ type: Attribute$1, args: ['aria-hidden',] }] },
	        { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MAT_ICON_LOCATION,] }] },
	        { type: ErrorHandler, decorators: [{ type: Optional }] }
	    ]; };
	    MatIcon.propDecorators = {
	        inline: [{ type: Input }],
	        svgIcon: [{ type: Input }],
	        fontSet: [{ type: Input }],
	        fontIcon: [{ type: Input }]
	    };
	    return MatIcon;
	}(_MatIconMixinBase));

	/**
	 * @license
	 * Copyright Google LLC All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	var MatIconModule = /** @class */ (function () {
	    function MatIconModule() {
	    }
	    MatIconModule.decorators = [
	        { type: NgModule, args: [{
	                    imports: [MatCommonModule],
	                    exports: [MatIcon, MatCommonModule],
	                    declarations: [MatIcon],
	                },] }
	    ];
	    return MatIconModule;
	}());

	/**
	 * @license
	 * Copyright Google LLC All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	// Boilerplate for applying mixins to MatToolbar.
	/** @docs-private */
	var MatToolbarBase = /** @class */ (function () {
	    function MatToolbarBase(_elementRef) {
	        this._elementRef = _elementRef;
	    }
	    return MatToolbarBase;
	}());
	var _MatToolbarMixinBase = mixinColor(MatToolbarBase);
	var MatToolbarRow = /** @class */ (function () {
	    function MatToolbarRow() {
	    }
	    MatToolbarRow.decorators = [
	        { type: Directive, args: [{
	                    selector: 'mat-toolbar-row',
	                    exportAs: 'matToolbarRow',
	                    host: { 'class': 'mat-toolbar-row' },
	                },] }
	    ];
	    return MatToolbarRow;
	}());
	var MatToolbar = /** @class */ (function (_super) {
	    __extends(MatToolbar, _super);
	    function MatToolbar(elementRef, _platform, document) {
	        var _this = _super.call(this, elementRef) || this;
	        _this._platform = _platform;
	        // TODO: make the document a required param when doing breaking changes.
	        _this._document = document;
	        return _this;
	    }
	    MatToolbar.prototype.ngAfterViewInit = function () {
	        var _this = this;
	        if ( !this._platform.isBrowser) {
	            return;
	        }
	        this._checkToolbarMixedModes();
	        this._toolbarRows.changes.subscribe(function () { return _this._checkToolbarMixedModes(); });
	    };
	    /**
	     * Throws an exception when developers are attempting to combine the different toolbar row modes.
	     */
	    MatToolbar.prototype._checkToolbarMixedModes = function () {
	        var _this = this;
	        if (!this._toolbarRows.length) {
	            return;
	        }
	        // Check if there are any other DOM nodes that can display content but aren't inside of
	        // a <mat-toolbar-row> element.
	        var isCombinedUsage = Array.from(this._elementRef.nativeElement.childNodes)
	            .filter(function (node) { return !(node.classList && node.classList.contains('mat-toolbar-row')); })
	            .filter(function (node) { return node.nodeType !== (_this._document ? _this._document.COMMENT_NODE : 8); })
	            .some(function (node) { return !!(node.textContent && node.textContent.trim()); });
	        if (isCombinedUsage) {
	            throwToolbarMixedModesError();
	        }
	    };
	    MatToolbar.decorators = [
	        { type: Component, args: [{
	                    selector: 'mat-toolbar',
	                    exportAs: 'matToolbar',
	                    template: "<ng-content></ng-content>\n<ng-content select=\"mat-toolbar-row\"></ng-content>\n",
	                    inputs: ['color'],
	                    host: {
	                        'class': 'mat-toolbar',
	                        '[class.mat-toolbar-multiple-rows]': '_toolbarRows.length > 0',
	                        '[class.mat-toolbar-single-row]': '_toolbarRows.length === 0',
	                    },
	                    changeDetection: ChangeDetectionStrategy$1.OnPush,
	                    encapsulation: ViewEncapsulation$1$1.None,
	                    styles: [".cdk-high-contrast-active .mat-toolbar{outline:solid 1px}.mat-toolbar-row,.mat-toolbar-single-row{display:flex;box-sizing:border-box;padding:0 16px;width:100%;flex-direction:row;align-items:center;white-space:nowrap}.mat-toolbar-multiple-rows{display:flex;box-sizing:border-box;flex-direction:column;width:100%}.mat-toolbar-multiple-rows{min-height:64px}.mat-toolbar-row,.mat-toolbar-single-row{height:64px}@media(max-width: 599px){.mat-toolbar-multiple-rows{min-height:56px}.mat-toolbar-row,.mat-toolbar-single-row{height:56px}}\n"]
	                }] }
	    ];
	    /** @nocollapse */
	    MatToolbar.ctorParameters = function () { return [
	        { type: ElementRef },
	        { type: Platform },
	        { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT$1,] }] }
	    ]; };
	    MatToolbar.propDecorators = {
	        _toolbarRows: [{ type: ContentChildren, args: [MatToolbarRow, { descendants: true },] }]
	    };
	    return MatToolbar;
	}(_MatToolbarMixinBase));
	/**
	 * Throws an exception when attempting to combine the different toolbar row modes.
	 * @docs-private
	 */
	function throwToolbarMixedModesError() {
	    throw Error('MatToolbar: Attempting to combine different toolbar modes. ' +
	        'Either specify multiple `<mat-toolbar-row>` elements explicitly or just place content ' +
	        'inside of a `<mat-toolbar>` for a single row.');
	}

	/**
	 * @license
	 * Copyright Google LLC All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	var MatToolbarModule = /** @class */ (function () {
	    function MatToolbarModule() {
	    }
	    MatToolbarModule.decorators = [
	        { type: NgModule, args: [{
	                    imports: [MatCommonModule],
	                    exports: [MatToolbar, MatToolbarRow, MatCommonModule],
	                    declarations: [MatToolbar, MatToolbarRow],
	                },] }
	    ];
	    return MatToolbarModule;
	}());

	var _a$1;
	/**
	 * @file console data service
	 */
	let ConsoleService = class ConsoleService {
	    constructor(http) {
	        this.http = http;
	        this.userList = [{ name: 'qiaoyue' }, { name: 'xujiabin' }];
	    }
	    getUsers() {
	        return this.userList;
	    }
	    /**
	     * è·åå®¹å¨ç¯å¢ä¿¡æ¯
	     */
	    getEnv() {
	        return this.http.get('/feweb/env.json', { responseType: 'json' });
	    }
	};
	ConsoleService = __decorate([
	    Injectable({
	        providedIn: 'root'
	    }),
	    __metadata("design:paramtypes", [typeof (_a$1 = typeof HttpClient !== "undefined" && HttpClient) === "function" ? _a$1 : Object])
	], ConsoleService);
	var ConsoleService$1 = ConsoleService;

	/**
	 * @file js-cookie
	 */
	function extend(...args) {
	    var i = 0;
	    var result = {};
	    for (; i < arguments.length; i++) {
	        var attributes = arguments[i];
	        for (var key in attributes) {
	            result[key] = attributes[key];
	        }
	    }
	    return result;
	}
	function decode(s) {
	    return s.replace(/(%[0-9A-Z]{2})+/g, decodeURIComponent);
	}
	function api() { }
	function set$2(key, value, attributes = {}) {
	    if (typeof document === 'undefined') {
	        return;
	    }
	    attributes = extend({ path: '/' }, api.defaults, attributes);
	    if (typeof attributes.expires === 'number') {
	        attributes.expires = new Date(Date.now() + attributes.expires * 864e5);
	    }
	    // We're using "expires" because "max-age" is not supported by IE
	    attributes.expires = attributes.expires ? attributes.expires.toUTCString() : '';
	    try {
	        var result = JSON.stringify(value);
	        if (/^[\{\[]/.test(result)) {
	            value = result;
	        }
	    }
	    catch (e) { }
	    value = encodeURIComponent(String(value)).replace(/%(23|24|26|2B|3A|3C|3E|3D|2F|3F|40|5B|5D|5E|60|7B|7D|7C)/g, decodeURIComponent);
	    key = encodeURIComponent(String(key))
	        .replace(/%(23|24|26|2B|5E|60|7C)/g, decodeURIComponent)
	        .replace(/[\(\)]/g, escape);
	    var stringifiedAttributes = '';
	    for (var attributeName in attributes) {
	        if (!attributes[attributeName]) {
	            continue;
	        }
	        stringifiedAttributes += '; ' + attributeName;
	        if (attributes[attributeName] === true) {
	            continue;
	        }
	        // Considers RFC 6265 section 5.2:
	        // ...
	        // 3.  If the remaining unparsed-attributes contains a %x3B (";")
	        //     character:
	        // Consume the characters of the unparsed-attributes up to,
	        // not including, the first %x3B (";") character.
	        // ...
	        stringifiedAttributes += '=' + attributes[attributeName].split(';')[0];
	    }
	    return (document.cookie = key + '=' + value + stringifiedAttributes);
	}
	function get$2(key, json) {
	    if (typeof document === 'undefined') {
	        return;
	    }
	    var jar = {};
	    // To prevent the for loop in the first place assign an empty array
	    // in case there are no cookies at all.
	    var cookies = document.cookie ? document.cookie.split('; ') : [];
	    var i = 0;
	    for (; i < cookies.length; i++) {
	        var parts = cookies[i].split('=');
	        var cookie = parts.slice(1).join('=');
	        if (!json && cookie.charAt(0) === '"') {
	            cookie = cookie.slice(1, -1);
	        }
	        try {
	            var name = decode(parts[0]);
	            cookie = decode(cookie);
	            if (json) {
	                try {
	                    cookie = JSON.parse(cookie);
	                }
	                catch (e) { }
	            }
	            jar[name] = cookie;
	            if (key === name) {
	                break;
	            }
	        }
	        catch (e) { }
	    }
	    return key ? jar[key] : jar;
	}
	api.set = set$2;
	api.get = function (key) {
	    return get$2(key, false /* read as raw */);
	};
	api.getJSON = function (key) {
	    return get$2(key, true /* read as json */);
	};
	api.remove = function (key, attributes) {
	    set$2(key, '', extend(attributes, {
	        expires: -1
	    }));
	};
	api.defaults = {};

	var qiaoyue = 8081;
	var xujiabin = 8082;
	var Config = {
		qiaoyue: qiaoyue,
		xujiabin: xujiabin
	};

	var _a$2, _b;
	/**
	 * @file æ§å¶å°
	 */
	let ConsoleComponent = class ConsoleComponent {
	    constructor(el, consoleService) {
	        this.el = el;
	        this.consoleService = consoleService;
	        this.auth = api.get('feweb-auth');
	        this.users = this.consoleService.getUsers();
	        consoleService.getEnv().subscribe((data) => {
	            this.env = data;
	        });
	    }
	    ngOnInit() {
	        const selectNode = this.el.nativeElement.querySelector(`li[data-auth="${this.auth}"]`);
	        if (selectNode) {
	            this.select = selectNode;
	        }
	    }
	    /**
	     * ç tm é¾ç¨
	     */
	    onEnvSelect(e) {
	        e.option.selectionList.deselectAll();
	        e.option.selected = true;
	        const auth = api.get('feweb-auth');
	        const newAuth = e.option.value;
	        if (!newAuth) {
	            return;
	        }
	        if (auth !== newAuth) {
	            api.set('feweb-auth', newAuth);
	            api.set('feweb-port', Config[newAuth]);
	            // éæ©äºæ°ç¯å¢ï¼å·æ°å è½½
	            location.reload();
	        }
	    }
	};
	ConsoleComponent = __decorate([
	    Component({
	        selector: '.app-schedulejs',
	        template: `<mat-expansion-panel class="schedulejs-console" [expanded]="true" hideToggle>
    <mat-expansion-panel-header>
      <mat-panel-title>
        <mat-icon>cloud_circle</mat-icon>Shedulejs - æ§å¶å°
      </mat-panel-title>
    </mat-expansion-panel-header>
    <mat-toolbar color="primary">
      <mat-toolbar-row>Env: {{ env.auth }} - {{ env.port }}</mat-toolbar-row>
    </mat-toolbar>
    <mat-divider></mat-divider>
    <mat-selection-list (selectionChange)="onEnvSelect($event)">
      <mat-list-option *ngFor="let user of users" [value]="user.name"
        [selected]="user.name == auth">
        <p matLine>{{ user.name }}</p>
      </mat-list-option>
    </mat-selection-list>
  </mat-expansion-panel>`
	    }),
	    __metadata("design:paramtypes", [typeof (_a$2 = typeof ElementRef !== "undefined" && ElementRef) === "function" ? _a$2 : Object, typeof (_b = typeof ConsoleService$1 !== "undefined" && ConsoleService$1) === "function" ? _b : Object])
	], ConsoleComponent);
	var ConsoleComponent$1 = ConsoleComponent;

	/**
	 * @file app module
	 */
	let AppModule = class AppModule {
	};
	AppModule = __decorate([
	    NgModule({
	        declarations: [ConsoleComponent$1],
	        imports: [
	            BrowserModule,
	            BrowserAnimationsModule,
	            HttpClientModule,
	            MatListModule,
	            MatExpansionModule,
	            MatIconModule,
	            MatToolbarModule
	        ],
	        providers: [],
	        bootstrap: [ConsoleComponent$1]
	    })
	], AppModule);
	var AppModule$1 = AppModule;

	function styleInject(css, ref) {
	  if ( ref === void 0 ) ref = {};
	  var insertAt = ref.insertAt;

	  if (!css || typeof document === 'undefined') { return; }

	  var head = document.head || document.getElementsByTagName('head')[0];
	  var style = document.createElement('style');
	  style.type = 'text/css';

	  if (insertAt === 'top') {
	    if (head.firstChild) {
	      head.insertBefore(style, head.firstChild);
	    } else {
	      head.appendChild(style);
	    }
	  } else {
	    head.appendChild(style);
	  }

	  if (style.styleSheet) {
	    style.styleSheet.cssText = css;
	  } else {
	    style.appendChild(document.createTextNode(css));
	  }
	}

	var css_248z = ".mat-badge-content {\n  font-weight: 600;\n  font-size: 12px;\n  font-family: Roboto, \"Helvetica Neue\", sans-serif;\n}\n.mat-badge-small .mat-badge-content {\n  font-size: 9px;\n}\n.mat-badge-large .mat-badge-content {\n  font-size: 24px;\n}\n.mat-h1,\n.mat-headline,\n.mat-typography h1 {\n  font: 400 24px/32px Roboto, \"Helvetica Neue\", sans-serif;\n  letter-spacing: normal;\n  margin: 0 0 16px;\n}\n.mat-h2,\n.mat-title,\n.mat-typography h2 {\n  font: 500 20px/32px Roboto, \"Helvetica Neue\", sans-serif;\n  letter-spacing: normal;\n  margin: 0 0 16px;\n}\n.mat-h3,\n.mat-subheading-2,\n.mat-typography h3 {\n  font: 400 16px/28px Roboto, \"Helvetica Neue\", sans-serif;\n  letter-spacing: normal;\n  margin: 0 0 16px;\n}\n.mat-h4,\n.mat-subheading-1,\n.mat-typography h4 {\n  font: 400 15px/24px Roboto, \"Helvetica Neue\", sans-serif;\n  letter-spacing: normal;\n  margin: 0 0 16px;\n}\n.mat-h5,\n.mat-typography h5 {\n  font: 400 calc(14px * 0.83)/20px Roboto, \"Helvetica Neue\", sans-serif;\n  margin: 0 0 12px;\n}\n.mat-h6,\n.mat-typography h6 {\n  font: 400 calc(14px * 0.67)/20px Roboto, \"Helvetica Neue\", sans-serif;\n  margin: 0 0 12px;\n}\n.mat-body-strong,\n.mat-body-2 {\n  font: 500 14px/24px Roboto, \"Helvetica Neue\", sans-serif;\n  letter-spacing: normal;\n}\n.mat-body,\n.mat-body-1,\n.mat-typography {\n  font: 400 14px/20px Roboto, \"Helvetica Neue\", sans-serif;\n  letter-spacing: normal;\n}\n.mat-body p,\n.mat-body-1 p,\n.mat-typography p {\n  margin: 0 0 12px;\n}\n.mat-small,\n.mat-caption {\n  font: 400 12px/20px Roboto, \"Helvetica Neue\", sans-serif;\n  letter-spacing: normal;\n}\n.mat-display-4,\n.mat-typography .mat-display-4 {\n  font: 300 112px/112px Roboto, \"Helvetica Neue\", sans-serif;\n  letter-spacing: -0.05em;\n  margin: 0 0 56px;\n}\n.mat-display-3,\n.mat-typography .mat-display-3 {\n  font: 400 56px/56px Roboto, \"Helvetica Neue\", sans-serif;\n  letter-spacing: -0.02em;\n  margin: 0 0 64px;\n}\n.mat-display-2,\n.mat-typography .mat-display-2 {\n  font: 400 45px/48px Roboto, \"Helvetica Neue\", sans-serif;\n  letter-spacing: -0.005em;\n  margin: 0 0 64px;\n}\n.mat-display-1,\n.mat-typography .mat-display-1 {\n  font: 400 34px/40px Roboto, \"Helvetica Neue\", sans-serif;\n  letter-spacing: normal;\n  margin: 0 0 64px;\n}\n.mat-bottom-sheet-container {\n  font: 400 14px/20px Roboto, \"Helvetica Neue\", sans-serif;\n  letter-spacing: normal;\n}\n.mat-button,\n.mat-raised-button,\n.mat-icon-button,\n.mat-stroked-button,\n.mat-flat-button,\n.mat-fab,\n.mat-mini-fab {\n  font-family: Roboto, \"Helvetica Neue\", sans-serif;\n  font-size: 14px;\n  font-weight: 500;\n}\n.mat-button-toggle {\n  font-family: Roboto, \"Helvetica Neue\", sans-serif;\n}\n.mat-card {\n  font-family: Roboto, \"Helvetica Neue\", sans-serif;\n}\n.mat-card-title {\n  font-size: 24px;\n  font-weight: 500;\n}\n.mat-card-header .mat-card-title {\n  font-size: 20px;\n}\n.mat-card-subtitle,\n.mat-card-content {\n  font-size: 14px;\n}\n.mat-checkbox {\n  font-family: Roboto, \"Helvetica Neue\", sans-serif;\n}\n.mat-checkbox-layout .mat-checkbox-label {\n  line-height: 24px;\n}\n.mat-chip {\n  font-size: 14px;\n  font-weight: 500;\n}\n.mat-chip .mat-chip-trailing-icon.mat-icon,\n.mat-chip .mat-chip-remove.mat-icon {\n  font-size: 18px;\n}\n.mat-table {\n  font-family: Roboto, \"Helvetica Neue\", sans-serif;\n}\n.mat-header-cell {\n  font-size: 12px;\n  font-weight: 500;\n}\n.mat-cell,\n.mat-footer-cell {\n  font-size: 14px;\n}\n.mat-calendar {\n  font-family: Roboto, \"Helvetica Neue\", sans-serif;\n}\n.mat-calendar-body {\n  font-size: 13px;\n}\n.mat-calendar-body-label,\n.mat-calendar-period-button {\n  font-size: 14px;\n  font-weight: 500;\n}\n.mat-calendar-table-header th {\n  font-size: 11px;\n  font-weight: 400;\n}\n.mat-dialog-title {\n  font: 500 20px/32px Roboto, \"Helvetica Neue\", sans-serif;\n  letter-spacing: normal;\n}\n.mat-expansion-panel-header {\n  font-family: Roboto, \"Helvetica Neue\", sans-serif;\n  font-size: 15px;\n  font-weight: 400;\n}\n.mat-expansion-panel-content {\n  font: 400 14px/20px Roboto, \"Helvetica Neue\", sans-serif;\n  letter-spacing: normal;\n}\n.mat-form-field {\n  font-size: inherit;\n  font-weight: 400;\n  line-height: 1.125;\n  font-family: Roboto, \"Helvetica Neue\", sans-serif;\n  letter-spacing: normal;\n}\n.mat-form-field-wrapper {\n  padding-bottom: 1.34375em;\n}\n.mat-form-field-prefix .mat-icon,\n.mat-form-field-suffix .mat-icon {\n  font-size: 150%;\n  line-height: 1.125;\n}\n.mat-form-field-prefix .mat-icon-button,\n.mat-form-field-suffix .mat-icon-button {\n  height: 1.5em;\n  width: 1.5em;\n}\n.mat-form-field-prefix .mat-icon-button .mat-icon,\n.mat-form-field-suffix .mat-icon-button .mat-icon {\n  height: 1.125em;\n  line-height: 1.125;\n}\n.mat-form-field-infix {\n  padding: 0.5em 0;\n  border-top: 0.84375em solid transparent;\n}\n.mat-form-field-can-float.mat-form-field-should-float .mat-form-field-label,\n.mat-form-field-can-float .mat-input-server:focus + .mat-form-field-label-wrapper .mat-form-field-label {\n  transform: translateY(-1.34375em) scale(0.75);\n  width: 133.33333333%;\n}\n.mat-form-field-can-float .mat-input-server[label]:not(:label-shown) + .mat-form-field-label-wrapper .mat-form-field-label {\n  transform: translateY(-1.34374em) scale(0.75);\n  width: 133.33334333%;\n}\n.mat-form-field-label-wrapper {\n  top: -0.84375em;\n  padding-top: 0.84375em;\n}\n.mat-form-field-label {\n  top: 1.34375em;\n}\n.mat-form-field-underline {\n  bottom: 1.34375em;\n}\n.mat-form-field-subscript-wrapper {\n  font-size: 75%;\n  margin-top: 0.66666667em;\n  top: calc(100% - 1.79166667em);\n}\n.mat-form-field-appearance-legacy .mat-form-field-wrapper {\n  padding-bottom: 1.25em;\n}\n.mat-form-field-appearance-legacy .mat-form-field-infix {\n  padding: 0.4375em 0;\n}\n.mat-form-field-appearance-legacy.mat-form-field-can-float.mat-form-field-should-float .mat-form-field-label,\n.mat-form-field-appearance-legacy.mat-form-field-can-float .mat-input-server:focus + .mat-form-field-label-wrapper .mat-form-field-label {\n  transform: translateY(-1.28125em) scale(0.75) perspective(100px) translateZ(0.001px);\n  -ms-transform: translateY(-1.28125em) scale(0.75);\n  width: 133.33333333%;\n}\n.mat-form-field-appearance-legacy.mat-form-field-can-float .mat-form-field-autofill-control:-webkit-autofill + .mat-form-field-label-wrapper .mat-form-field-label {\n  transform: translateY(-1.28125em) scale(0.75) perspective(100px) translateZ(0.00101px);\n  -ms-transform: translateY(-1.28124em) scale(0.75);\n  width: 133.33334333%;\n}\n.mat-form-field-appearance-legacy.mat-form-field-can-float .mat-input-server[label]:not(:label-shown) + .mat-form-field-label-wrapper .mat-form-field-label {\n  transform: translateY(-1.28125em) scale(0.75) perspective(100px) translateZ(0.00102px);\n  -ms-transform: translateY(-1.28123em) scale(0.75);\n  width: 133.33335333%;\n}\n.mat-form-field-appearance-legacy .mat-form-field-label {\n  top: 1.28125em;\n}\n.mat-form-field-appearance-legacy .mat-form-field-underline {\n  bottom: 1.25em;\n}\n.mat-form-field-appearance-legacy .mat-form-field-subscript-wrapper {\n  margin-top: 0.54166667em;\n  top: calc(100% - 1.66666667em);\n}\n@media print {\n  .mat-form-field-appearance-legacy.mat-form-field-can-float.mat-form-field-should-float .mat-form-field-label,\n  .mat-form-field-appearance-legacy.mat-form-field-can-float .mat-input-server:focus + .mat-form-field-label-wrapper .mat-form-field-label {\n    transform: translateY(-1.28122em) scale(0.75);\n  }\n  .mat-form-field-appearance-legacy.mat-form-field-can-float .mat-form-field-autofill-control:-webkit-autofill + .mat-form-field-label-wrapper .mat-form-field-label {\n    transform: translateY(-1.28121em) scale(0.75);\n  }\n  .mat-form-field-appearance-legacy.mat-form-field-can-float .mat-input-server[label]:not(:label-shown) + .mat-form-field-label-wrapper .mat-form-field-label {\n    transform: translateY(-1.2812em) scale(0.75);\n  }\n}\n.mat-form-field-appearance-fill .mat-form-field-infix {\n  padding: 0.25em 0 0.75em 0;\n}\n.mat-form-field-appearance-fill .mat-form-field-label {\n  top: 1.09375em;\n  margin-top: -0.5em;\n}\n.mat-form-field-appearance-fill.mat-form-field-can-float.mat-form-field-should-float .mat-form-field-label,\n.mat-form-field-appearance-fill.mat-form-field-can-float .mat-input-server:focus + .mat-form-field-label-wrapper .mat-form-field-label {\n  transform: translateY(-0.59375em) scale(0.75);\n  width: 133.33333333%;\n}\n.mat-form-field-appearance-fill.mat-form-field-can-float .mat-input-server[label]:not(:label-shown) + .mat-form-field-label-wrapper .mat-form-field-label {\n  transform: translateY(-0.59374em) scale(0.75);\n  width: 133.33334333%;\n}\n.mat-form-field-appearance-outline .mat-form-field-infix {\n  padding: 1em 0 1em 0;\n}\n.mat-form-field-appearance-outline .mat-form-field-label {\n  top: 1.84375em;\n  margin-top: -0.25em;\n}\n.mat-form-field-appearance-outline.mat-form-field-can-float.mat-form-field-should-float .mat-form-field-label,\n.mat-form-field-appearance-outline.mat-form-field-can-float .mat-input-server:focus + .mat-form-field-label-wrapper .mat-form-field-label {\n  transform: translateY(-1.59375em) scale(0.75);\n  width: 133.33333333%;\n}\n.mat-form-field-appearance-outline.mat-form-field-can-float .mat-input-server[label]:not(:label-shown) + .mat-form-field-label-wrapper .mat-form-field-label {\n  transform: translateY(-1.59374em) scale(0.75);\n  width: 133.33334333%;\n}\n.mat-grid-tile-header,\n.mat-grid-tile-footer {\n  font-size: 14px;\n}\n.mat-grid-tile-header .mat-line,\n.mat-grid-tile-footer .mat-line {\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  display: block;\n  box-sizing: border-box;\n}\n.mat-grid-tile-header .mat-line:nth-child(n+2),\n.mat-grid-tile-footer .mat-line:nth-child(n+2) {\n  font-size: 12px;\n}\ninput.mat-input-element {\n  margin-top: -0.0625em;\n}\n.mat-menu-item {\n  font-family: Roboto, \"Helvetica Neue\", sans-serif;\n  font-size: 14px;\n  font-weight: 400;\n}\n.mat-paginator,\n.mat-paginator-page-size .mat-select-trigger {\n  font-family: Roboto, \"Helvetica Neue\", sans-serif;\n  font-size: 12px;\n}\n.mat-radio-button {\n  font-family: Roboto, \"Helvetica Neue\", sans-serif;\n}\n.mat-select {\n  font-family: Roboto, \"Helvetica Neue\", sans-serif;\n}\n.mat-select-trigger {\n  height: 1.125em;\n}\n.mat-slide-toggle-content {\n  font-family: Roboto, \"Helvetica Neue\", sans-serif;\n}\n.mat-slider-thumb-label-text {\n  font-family: Roboto, \"Helvetica Neue\", sans-serif;\n  font-size: 12px;\n  font-weight: 500;\n}\n.mat-stepper-vertical,\n.mat-stepper-horizontal {\n  font-family: Roboto, \"Helvetica Neue\", sans-serif;\n}\n.mat-step-label {\n  font-size: 14px;\n  font-weight: 400;\n}\n.mat-step-sub-label-error {\n  font-weight: normal;\n}\n.mat-step-label-error {\n  font-size: 14px;\n}\n.mat-step-label-selected {\n  font-size: 14px;\n  font-weight: 500;\n}\n.mat-tab-group {\n  font-family: Roboto, \"Helvetica Neue\", sans-serif;\n}\n.mat-tab-label,\n.mat-tab-link {\n  font-family: Roboto, \"Helvetica Neue\", sans-serif;\n  font-size: 14px;\n  font-weight: 500;\n}\n.mat-toolbar,\n.mat-toolbar h1,\n.mat-toolbar h2,\n.mat-toolbar h3,\n.mat-toolbar h4,\n.mat-toolbar h5,\n.mat-toolbar h6 {\n  font: 500 20px/32px Roboto, \"Helvetica Neue\", sans-serif;\n  letter-spacing: normal;\n  margin: 0;\n}\n.mat-tooltip {\n  font-family: Roboto, \"Helvetica Neue\", sans-serif;\n  font-size: 10px;\n  padding-top: 6px;\n  padding-bottom: 6px;\n}\n.mat-tooltip-handset {\n  font-size: 14px;\n  padding-top: 8px;\n  padding-bottom: 8px;\n}\n.mat-list-item {\n  font-family: Roboto, \"Helvetica Neue\", sans-serif;\n}\n.mat-list-option {\n  font-family: Roboto, \"Helvetica Neue\", sans-serif;\n}\n.mat-list-base .mat-list-item {\n  font-size: 16px;\n}\n.mat-list-base .mat-list-item .mat-line {\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  display: block;\n  box-sizing: border-box;\n}\n.mat-list-base .mat-list-item .mat-line:nth-child(n+2) {\n  font-size: 14px;\n}\n.mat-list-base .mat-list-option {\n  font-size: 16px;\n}\n.mat-list-base .mat-list-option .mat-line {\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  display: block;\n  box-sizing: border-box;\n}\n.mat-list-base .mat-list-option .mat-line:nth-child(n+2) {\n  font-size: 14px;\n}\n.mat-list-base .mat-subheader {\n  font-family: Roboto, \"Helvetica Neue\", sans-serif;\n  font-size: 14px;\n  font-weight: 500;\n}\n.mat-list-base[dense] .mat-list-item {\n  font-size: 12px;\n}\n.mat-list-base[dense] .mat-list-item .mat-line {\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  display: block;\n  box-sizing: border-box;\n}\n.mat-list-base[dense] .mat-list-item .mat-line:nth-child(n+2) {\n  font-size: 12px;\n}\n.mat-list-base[dense] .mat-list-option {\n  font-size: 12px;\n}\n.mat-list-base[dense] .mat-list-option .mat-line {\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  display: block;\n  box-sizing: border-box;\n}\n.mat-list-base[dense] .mat-list-option .mat-line:nth-child(n+2) {\n  font-size: 12px;\n}\n.mat-list-base[dense] .mat-subheader {\n  font-family: Roboto, \"Helvetica Neue\", sans-serif;\n  font-size: 12px;\n  font-weight: 500;\n}\n.mat-option {\n  font-family: Roboto, \"Helvetica Neue\", sans-serif;\n  font-size: 16px;\n}\n.mat-optgroup-label {\n  font: 500 14px/24px Roboto, \"Helvetica Neue\", sans-serif;\n  letter-spacing: normal;\n}\n.mat-simple-snackbar {\n  font-family: Roboto, \"Helvetica Neue\", sans-serif;\n  font-size: 14px;\n}\n.mat-simple-snackbar-action {\n  line-height: 1;\n  font-family: inherit;\n  font-size: inherit;\n  font-weight: 500;\n}\n.mat-tree {\n  font-family: Roboto, \"Helvetica Neue\", sans-serif;\n}\n.mat-tree-node,\n.mat-nested-tree-node {\n  font-weight: 400;\n  font-size: 14px;\n}\n.mat-ripple {\n  overflow: hidden;\n  position: relative;\n}\n.mat-ripple:not(:empty) {\n  transform: translateZ(0);\n}\n.mat-ripple.mat-ripple-unbounded {\n  overflow: visible;\n}\n.mat-ripple-element {\n  position: absolute;\n  border-radius: 50%;\n  pointer-events: none;\n  transition: opacity, transform 0ms cubic-bezier(0, 0, 0.2, 1);\n  transform: scale(0);\n}\n.cdk-high-contrast-active .mat-ripple-element {\n  display: none;\n}\n.cdk-visually-hidden {\n  border: 0;\n  clip: rect(0 0 0 0);\n  height: 1px;\n  margin: -1px;\n  overflow: hidden;\n  padding: 0;\n  position: absolute;\n  width: 1px;\n  outline: 0;\n  -webkit-appearance: none;\n  -moz-appearance: none;\n}\n.cdk-overlay-container,\n.cdk-global-overlay-wrapper {\n  pointer-events: none;\n  top: 0;\n  left: 0;\n  height: 100%;\n  width: 100%;\n}\n.cdk-overlay-container {\n  position: fixed;\n  z-index: 1000;\n}\n.cdk-overlay-container:empty {\n  display: none;\n}\n.cdk-global-overlay-wrapper {\n  display: flex;\n  position: absolute;\n  z-index: 1000;\n}\n.cdk-overlay-pane {\n  position: absolute;\n  pointer-events: auto;\n  box-sizing: border-box;\n  z-index: 1000;\n  display: flex;\n  max-width: 100%;\n  max-height: 100%;\n}\n.cdk-overlay-backdrop {\n  position: absolute;\n  top: 0;\n  bottom: 0;\n  left: 0;\n  right: 0;\n  z-index: 1000;\n  pointer-events: auto;\n  -webkit-tap-highlight-color: transparent;\n  transition: opacity 400ms cubic-bezier(0.25, 0.8, 0.25, 1);\n  opacity: 0;\n}\n.cdk-overlay-backdrop.cdk-overlay-backdrop-showing {\n  opacity: 1;\n}\n@media screen and (-ms-high-contrast: active) {\n  .cdk-overlay-backdrop.cdk-overlay-backdrop-showing {\n    opacity: 0.6;\n  }\n}\n.cdk-overlay-dark-backdrop {\n  background: rgba(0, 0, 0, 0.32);\n}\n.cdk-overlay-transparent-backdrop,\n.cdk-overlay-transparent-backdrop.cdk-overlay-backdrop-showing {\n  opacity: 0;\n}\n.cdk-overlay-connected-position-bounding-box {\n  position: absolute;\n  z-index: 1000;\n  display: flex;\n  flex-direction: column;\n  min-width: 1px;\n  min-height: 1px;\n}\n.cdk-global-scrollblock {\n  position: fixed;\n  width: 100%;\n  overflow-y: scroll;\n}\n@keyframes cdk-text-field-autofill-start {\n  /*!*/\n}\n@keyframes cdk-text-field-autofill-end {\n  /*!*/\n}\n.cdk-text-field-autofill-monitored:-webkit-autofill {\n  animation: cdk-text-field-autofill-start 0s 1ms;\n}\n.cdk-text-field-autofill-monitored:not(:-webkit-autofill) {\n  animation: cdk-text-field-autofill-end 0s 1ms;\n}\ntextarea.cdk-textarea-autosize {\n  resize: none;\n}\ntextarea.cdk-textarea-autosize-measuring {\n  height: auto !important;\n  overflow: hidden !important;\n  padding: 2px 0 !important;\n  box-sizing: content-box !important;\n}\n.mat-ripple-element {\n  background-color: rgba(0, 0, 0, 0.1);\n}\n.mat-option {\n  color: rgba(0, 0, 0, 0.87);\n}\n.mat-option:hover:not(.mat-option-disabled),\n.mat-option:focus:not(.mat-option-disabled) {\n  background: rgba(0, 0, 0, 0.04);\n}\n.mat-option.mat-selected:not(.mat-option-multiple):not(.mat-option-disabled) {\n  background: rgba(0, 0, 0, 0.04);\n}\n.mat-option.mat-active {\n  background: rgba(0, 0, 0, 0.04);\n  color: rgba(0, 0, 0, 0.87);\n}\n.mat-option.mat-option-disabled {\n  color: rgba(0, 0, 0, 0.38);\n}\n.mat-primary .mat-option.mat-selected:not(.mat-option-disabled) {\n  color: #3f51b5;\n}\n.mat-accent .mat-option.mat-selected:not(.mat-option-disabled) {\n  color: #ff4081;\n}\n.mat-warn .mat-option.mat-selected:not(.mat-option-disabled) {\n  color: #f44336;\n}\n.mat-optgroup-label {\n  color: rgba(0, 0, 0, 0.54);\n}\n.mat-optgroup-disabled .mat-optgroup-label {\n  color: rgba(0, 0, 0, 0.38);\n}\n.mat-pseudo-checkbox {\n  color: rgba(0, 0, 0, 0.54);\n}\n.mat-pseudo-checkbox::after {\n  color: #fafafa;\n}\n.mat-pseudo-checkbox-disabled {\n  color: #b0b0b0;\n}\n.mat-primary .mat-pseudo-checkbox-checked,\n.mat-primary .mat-pseudo-checkbox-indeterminate {\n  background: #3f51b5;\n}\n.mat-pseudo-checkbox-checked,\n.mat-pseudo-checkbox-indeterminate,\n.mat-accent .mat-pseudo-checkbox-checked,\n.mat-accent .mat-pseudo-checkbox-indeterminate {\n  background: #ff4081;\n}\n.mat-warn .mat-pseudo-checkbox-checked,\n.mat-warn .mat-pseudo-checkbox-indeterminate {\n  background: #f44336;\n}\n.mat-pseudo-checkbox-checked.mat-pseudo-checkbox-disabled,\n.mat-pseudo-checkbox-indeterminate.mat-pseudo-checkbox-disabled {\n  background: #b0b0b0;\n}\n.mat-elevation-z0 {\n  box-shadow: 0px 0px 0px 0px rgba(0, 0, 0, 0.2), 0px 0px 0px 0px rgba(0, 0, 0, 0.14), 0px 0px 0px 0px rgba(0, 0, 0, 0.12);\n}\n.mat-elevation-z1 {\n  box-shadow: 0px 2px 1px -1px rgba(0, 0, 0, 0.2), 0px 1px 1px 0px rgba(0, 0, 0, 0.14), 0px 1px 3px 0px rgba(0, 0, 0, 0.12);\n}\n.mat-elevation-z2 {\n  box-shadow: 0px 3px 1px -2px rgba(0, 0, 0, 0.2), 0px 2px 2px 0px rgba(0, 0, 0, 0.14), 0px 1px 5px 0px rgba(0, 0, 0, 0.12);\n}\n.mat-elevation-z3 {\n  box-shadow: 0px 3px 3px -2px rgba(0, 0, 0, 0.2), 0px 3px 4px 0px rgba(0, 0, 0, 0.14), 0px 1px 8px 0px rgba(0, 0, 0, 0.12);\n}\n.mat-elevation-z4 {\n  box-shadow: 0px 2px 4px -1px rgba(0, 0, 0, 0.2), 0px 4px 5px 0px rgba(0, 0, 0, 0.14), 0px 1px 10px 0px rgba(0, 0, 0, 0.12);\n}\n.mat-elevation-z5 {\n  box-shadow: 0px 3px 5px -1px rgba(0, 0, 0, 0.2), 0px 5px 8px 0px rgba(0, 0, 0, 0.14), 0px 1px 14px 0px rgba(0, 0, 0, 0.12);\n}\n.mat-elevation-z6 {\n  box-shadow: 0px 3px 5px -1px rgba(0, 0, 0, 0.2), 0px 6px 10px 0px rgba(0, 0, 0, 0.14), 0px 1px 18px 0px rgba(0, 0, 0, 0.12);\n}\n.mat-elevation-z7 {\n  box-shadow: 0px 4px 5px -2px rgba(0, 0, 0, 0.2), 0px 7px 10px 1px rgba(0, 0, 0, 0.14), 0px 2px 16px 1px rgba(0, 0, 0, 0.12);\n}\n.mat-elevation-z8 {\n  box-shadow: 0px 5px 5px -3px rgba(0, 0, 0, 0.2), 0px 8px 10px 1px rgba(0, 0, 0, 0.14), 0px 3px 14px 2px rgba(0, 0, 0, 0.12);\n}\n.mat-elevation-z9 {\n  box-shadow: 0px 5px 6px -3px rgba(0, 0, 0, 0.2), 0px 9px 12px 1px rgba(0, 0, 0, 0.14), 0px 3px 16px 2px rgba(0, 0, 0, 0.12);\n}\n.mat-elevation-z10 {\n  box-shadow: 0px 6px 6px -3px rgba(0, 0, 0, 0.2), 0px 10px 14px 1px rgba(0, 0, 0, 0.14), 0px 4px 18px 3px rgba(0, 0, 0, 0.12);\n}\n.mat-elevation-z11 {\n  box-shadow: 0px 6px 7px -4px rgba(0, 0, 0, 0.2), 0px 11px 15px 1px rgba(0, 0, 0, 0.14), 0px 4px 20px 3px rgba(0, 0, 0, 0.12);\n}\n.mat-elevation-z12 {\n  box-shadow: 0px 7px 8px -4px rgba(0, 0, 0, 0.2), 0px 12px 17px 2px rgba(0, 0, 0, 0.14), 0px 5px 22px 4px rgba(0, 0, 0, 0.12);\n}\n.mat-elevation-z13 {\n  box-shadow: 0px 7px 8px -4px rgba(0, 0, 0, 0.2), 0px 13px 19px 2px rgba(0, 0, 0, 0.14), 0px 5px 24px 4px rgba(0, 0, 0, 0.12);\n}\n.mat-elevation-z14 {\n  box-shadow: 0px 7px 9px -4px rgba(0, 0, 0, 0.2), 0px 14px 21px 2px rgba(0, 0, 0, 0.14), 0px 5px 26px 4px rgba(0, 0, 0, 0.12);\n}\n.mat-elevation-z15 {\n  box-shadow: 0px 8px 9px -5px rgba(0, 0, 0, 0.2), 0px 15px 22px 2px rgba(0, 0, 0, 0.14), 0px 6px 28px 5px rgba(0, 0, 0, 0.12);\n}\n.mat-elevation-z16 {\n  box-shadow: 0px 8px 10px -5px rgba(0, 0, 0, 0.2), 0px 16px 24px 2px rgba(0, 0, 0, 0.14), 0px 6px 30px 5px rgba(0, 0, 0, 0.12);\n}\n.mat-elevation-z17 {\n  box-shadow: 0px 8px 11px -5px rgba(0, 0, 0, 0.2), 0px 17px 26px 2px rgba(0, 0, 0, 0.14), 0px 6px 32px 5px rgba(0, 0, 0, 0.12);\n}\n.mat-elevation-z18 {\n  box-shadow: 0px 9px 11px -5px rgba(0, 0, 0, 0.2), 0px 18px 28px 2px rgba(0, 0, 0, 0.14), 0px 7px 34px 6px rgba(0, 0, 0, 0.12);\n}\n.mat-elevation-z19 {\n  box-shadow: 0px 9px 12px -6px rgba(0, 0, 0, 0.2), 0px 19px 29px 2px rgba(0, 0, 0, 0.14), 0px 7px 36px 6px rgba(0, 0, 0, 0.12);\n}\n.mat-elevation-z20 {\n  box-shadow: 0px 10px 13px -6px rgba(0, 0, 0, 0.2), 0px 20px 31px 3px rgba(0, 0, 0, 0.14), 0px 8px 38px 7px rgba(0, 0, 0, 0.12);\n}\n.mat-elevation-z21 {\n  box-shadow: 0px 10px 13px -6px rgba(0, 0, 0, 0.2), 0px 21px 33px 3px rgba(0, 0, 0, 0.14), 0px 8px 40px 7px rgba(0, 0, 0, 0.12);\n}\n.mat-elevation-z22 {\n  box-shadow: 0px 10px 14px -6px rgba(0, 0, 0, 0.2), 0px 22px 35px 3px rgba(0, 0, 0, 0.14), 0px 8px 42px 7px rgba(0, 0, 0, 0.12);\n}\n.mat-elevation-z23 {\n  box-shadow: 0px 11px 14px -7px rgba(0, 0, 0, 0.2), 0px 23px 36px 3px rgba(0, 0, 0, 0.14), 0px 9px 44px 8px rgba(0, 0, 0, 0.12);\n}\n.mat-elevation-z24 {\n  box-shadow: 0px 11px 15px -7px rgba(0, 0, 0, 0.2), 0px 24px 38px 3px rgba(0, 0, 0, 0.14), 0px 9px 46px 8px rgba(0, 0, 0, 0.12);\n}\n.mat-app-background {\n  background-color: #fafafa;\n  color: rgba(0, 0, 0, 0.87);\n}\n.mat-theme-loaded-marker {\n  display: none;\n}\n.mat-autocomplete-panel {\n  background: #fff;\n  color: rgba(0, 0, 0, 0.87);\n}\n.mat-autocomplete-panel:not([class*=mat-elevation-z]) {\n  box-shadow: 0px 2px 4px -1px rgba(0, 0, 0, 0.2), 0px 4px 5px 0px rgba(0, 0, 0, 0.14), 0px 1px 10px 0px rgba(0, 0, 0, 0.12);\n}\n.mat-autocomplete-panel .mat-option.mat-selected:not(.mat-active):not(:hover) {\n  background: #fff;\n}\n.mat-autocomplete-panel .mat-option.mat-selected:not(.mat-active):not(:hover):not(.mat-option-disabled) {\n  color: rgba(0, 0, 0, 0.87);\n}\n.mat-badge-content {\n  color: #fff;\n  background: #3f51b5;\n}\n.cdk-high-contrast-active .mat-badge-content {\n  outline: solid 1px;\n  border-radius: 0;\n}\n.mat-badge-accent .mat-badge-content {\n  background: #ff4081;\n  color: #fff;\n}\n.mat-badge-warn .mat-badge-content {\n  color: #fff;\n  background: #f44336;\n}\n.mat-badge {\n  position: relative;\n}\n.mat-badge-hidden .mat-badge-content {\n  display: none;\n}\n.mat-badge-disabled .mat-badge-content {\n  background: #b9b9b9;\n  color: rgba(0, 0, 0, 0.38);\n}\n.mat-badge-content {\n  position: absolute;\n  text-align: center;\n  display: inline-block;\n  border-radius: 50%;\n  transition: transform 200ms ease-in-out;\n  transform: scale(0.6);\n  overflow: hidden;\n  white-space: nowrap;\n  text-overflow: ellipsis;\n  pointer-events: none;\n}\n.ng-animate-disabled .mat-badge-content,\n.mat-badge-content._mat-animation-noopable {\n  transition: none;\n}\n.mat-badge-content.mat-badge-active {\n  transform: none;\n}\n.mat-badge-small .mat-badge-content {\n  width: 16px;\n  height: 16px;\n  line-height: 16px;\n}\n.mat-badge-small.mat-badge-above .mat-badge-content {\n  top: -8px;\n}\n.mat-badge-small.mat-badge-below .mat-badge-content {\n  bottom: -8px;\n}\n.mat-badge-small.mat-badge-before .mat-badge-content {\n  left: -16px;\n}\n[dir=rtl] .mat-badge-small.mat-badge-before .mat-badge-content {\n  left: auto;\n  right: -16px;\n}\n.mat-badge-small.mat-badge-after .mat-badge-content {\n  right: -16px;\n}\n[dir=rtl] .mat-badge-small.mat-badge-after .mat-badge-content {\n  right: auto;\n  left: -16px;\n}\n.mat-badge-small.mat-badge-overlap.mat-badge-before .mat-badge-content {\n  left: -8px;\n}\n[dir=rtl] .mat-badge-small.mat-badge-overlap.mat-badge-before .mat-badge-content {\n  left: auto;\n  right: -8px;\n}\n.mat-badge-small.mat-badge-overlap.mat-badge-after .mat-badge-content {\n  right: -8px;\n}\n[dir=rtl] .mat-badge-small.mat-badge-overlap.mat-badge-after .mat-badge-content {\n  right: auto;\n  left: -8px;\n}\n.mat-badge-medium .mat-badge-content {\n  width: 22px;\n  height: 22px;\n  line-height: 22px;\n}\n.mat-badge-medium.mat-badge-above .mat-badge-content {\n  top: -11px;\n}\n.mat-badge-medium.mat-badge-below .mat-badge-content {\n  bottom: -11px;\n}\n.mat-badge-medium.mat-badge-before .mat-badge-content {\n  left: -22px;\n}\n[dir=rtl] .mat-badge-medium.mat-badge-before .mat-badge-content {\n  left: auto;\n  right: -22px;\n}\n.mat-badge-medium.mat-badge-after .mat-badge-content {\n  right: -22px;\n}\n[dir=rtl] .mat-badge-medium.mat-badge-after .mat-badge-content {\n  right: auto;\n  left: -22px;\n}\n.mat-badge-medium.mat-badge-overlap.mat-badge-before .mat-badge-content {\n  left: -11px;\n}\n[dir=rtl] .mat-badge-medium.mat-badge-overlap.mat-badge-before .mat-badge-content {\n  left: auto;\n  right: -11px;\n}\n.mat-badge-medium.mat-badge-overlap.mat-badge-after .mat-badge-content {\n  right: -11px;\n}\n[dir=rtl] .mat-badge-medium.mat-badge-overlap.mat-badge-after .mat-badge-content {\n  right: auto;\n  left: -11px;\n}\n.mat-badge-large .mat-badge-content {\n  width: 28px;\n  height: 28px;\n  line-height: 28px;\n}\n.mat-badge-large.mat-badge-above .mat-badge-content {\n  top: -14px;\n}\n.mat-badge-large.mat-badge-below .mat-badge-content {\n  bottom: -14px;\n}\n.mat-badge-large.mat-badge-before .mat-badge-content {\n  left: -28px;\n}\n[dir=rtl] .mat-badge-large.mat-badge-before .mat-badge-content {\n  left: auto;\n  right: -28px;\n}\n.mat-badge-large.mat-badge-after .mat-badge-content {\n  right: -28px;\n}\n[dir=rtl] .mat-badge-large.mat-badge-after .mat-badge-content {\n  right: auto;\n  left: -28px;\n}\n.mat-badge-large.mat-badge-overlap.mat-badge-before .mat-badge-content {\n  left: -14px;\n}\n[dir=rtl] .mat-badge-large.mat-badge-overlap.mat-badge-before .mat-badge-content {\n  left: auto;\n  right: -14px;\n}\n.mat-badge-large.mat-badge-overlap.mat-badge-after .mat-badge-content {\n  right: -14px;\n}\n[dir=rtl] .mat-badge-large.mat-badge-overlap.mat-badge-after .mat-badge-content {\n  right: auto;\n  left: -14px;\n}\n.mat-bottom-sheet-container {\n  box-shadow: 0px 8px 10px -5px rgba(0, 0, 0, 0.2), 0px 16px 24px 2px rgba(0, 0, 0, 0.14), 0px 6px 30px 5px rgba(0, 0, 0, 0.12);\n  background: #fff;\n  color: rgba(0, 0, 0, 0.87);\n}\n.mat-button,\n.mat-icon-button,\n.mat-stroked-button {\n  color: inherit;\n  background: transparent;\n}\n.mat-button.mat-primary,\n.mat-icon-button.mat-primary,\n.mat-stroked-button.mat-primary {\n  color: #3f51b5;\n}\n.mat-button.mat-accent,\n.mat-icon-button.mat-accent,\n.mat-stroked-button.mat-accent {\n  color: #ff4081;\n}\n.mat-button.mat-warn,\n.mat-icon-button.mat-warn,\n.mat-stroked-button.mat-warn {\n  color: #f44336;\n}\n.mat-button.mat-primary[disabled],\n.mat-button.mat-accent[disabled],\n.mat-button.mat-warn[disabled],\n.mat-button[disabled][disabled],\n.mat-icon-button.mat-primary[disabled],\n.mat-icon-button.mat-accent[disabled],\n.mat-icon-button.mat-warn[disabled],\n.mat-icon-button[disabled][disabled],\n.mat-stroked-button.mat-primary[disabled],\n.mat-stroked-button.mat-accent[disabled],\n.mat-stroked-button.mat-warn[disabled],\n.mat-stroked-button[disabled][disabled] {\n  color: rgba(0, 0, 0, 0.26);\n}\n.mat-button.mat-primary .mat-button-focus-overlay,\n.mat-icon-button.mat-primary .mat-button-focus-overlay,\n.mat-stroked-button.mat-primary .mat-button-focus-overlay {\n  background-color: #3f51b5;\n}\n.mat-button.mat-accent .mat-button-focus-overlay,\n.mat-icon-button.mat-accent .mat-button-focus-overlay,\n.mat-stroked-button.mat-accent .mat-button-focus-overlay {\n  background-color: #ff4081;\n}\n.mat-button.mat-warn .mat-button-focus-overlay,\n.mat-icon-button.mat-warn .mat-button-focus-overlay,\n.mat-stroked-button.mat-warn .mat-button-focus-overlay {\n  background-color: #f44336;\n}\n.mat-button[disabled] .mat-button-focus-overlay,\n.mat-icon-button[disabled] .mat-button-focus-overlay,\n.mat-stroked-button[disabled] .mat-button-focus-overlay {\n  background-color: transparent;\n}\n.mat-button .mat-ripple-element,\n.mat-icon-button .mat-ripple-element,\n.mat-stroked-button .mat-ripple-element {\n  opacity: 0.1;\n  background-color: currentColor;\n}\n.mat-button-focus-overlay {\n  background: #000;\n}\n.mat-stroked-button:not([disabled]) {\n  border-color: rgba(0, 0, 0, 0.12);\n}\n.mat-flat-button,\n.mat-raised-button,\n.mat-fab,\n.mat-mini-fab {\n  color: rgba(0, 0, 0, 0.87);\n  background-color: #fff;\n}\n.mat-flat-button.mat-primary,\n.mat-raised-button.mat-primary,\n.mat-fab.mat-primary,\n.mat-mini-fab.mat-primary {\n  color: #fff;\n}\n.mat-flat-button.mat-accent,\n.mat-raised-button.mat-accent,\n.mat-fab.mat-accent,\n.mat-mini-fab.mat-accent {\n  color: #fff;\n}\n.mat-flat-button.mat-warn,\n.mat-raised-button.mat-warn,\n.mat-fab.mat-warn,\n.mat-mini-fab.mat-warn {\n  color: #fff;\n}\n.mat-flat-button.mat-primary[disabled],\n.mat-flat-button.mat-accent[disabled],\n.mat-flat-button.mat-warn[disabled],\n.mat-flat-button[disabled][disabled],\n.mat-raised-button.mat-primary[disabled],\n.mat-raised-button.mat-accent[disabled],\n.mat-raised-button.mat-warn[disabled],\n.mat-raised-button[disabled][disabled],\n.mat-fab.mat-primary[disabled],\n.mat-fab.mat-accent[disabled],\n.mat-fab.mat-warn[disabled],\n.mat-fab[disabled][disabled],\n.mat-mini-fab.mat-primary[disabled],\n.mat-mini-fab.mat-accent[disabled],\n.mat-mini-fab.mat-warn[disabled],\n.mat-mini-fab[disabled][disabled] {\n  color: rgba(0, 0, 0, 0.26);\n}\n.mat-flat-button.mat-primary,\n.mat-raised-button.mat-primary,\n.mat-fab.mat-primary,\n.mat-mini-fab.mat-primary {\n  background-color: #3f51b5;\n}\n.mat-flat-button.mat-accent,\n.mat-raised-button.mat-accent,\n.mat-fab.mat-accent,\n.mat-mini-fab.mat-accent {\n  background-color: #ff4081;\n}\n.mat-flat-button.mat-warn,\n.mat-raised-button.mat-warn,\n.mat-fab.mat-warn,\n.mat-mini-fab.mat-warn {\n  background-color: #f44336;\n}\n.mat-flat-button.mat-primary[disabled],\n.mat-flat-button.mat-accent[disabled],\n.mat-flat-button.mat-warn[disabled],\n.mat-flat-button[disabled][disabled],\n.mat-raised-button.mat-primary[disabled],\n.mat-raised-button.mat-accent[disabled],\n.mat-raised-button.mat-warn[disabled],\n.mat-raised-button[disabled][disabled],\n.mat-fab.mat-primary[disabled],\n.mat-fab.mat-accent[disabled],\n.mat-fab.mat-warn[disabled],\n.mat-fab[disabled][disabled],\n.mat-mini-fab.mat-primary[disabled],\n.mat-mini-fab.mat-accent[disabled],\n.mat-mini-fab.mat-warn[disabled],\n.mat-mini-fab[disabled][disabled] {\n  background-color: rgba(0, 0, 0, 0.12);\n}\n.mat-flat-button.mat-primary .mat-ripple-element,\n.mat-raised-button.mat-primary .mat-ripple-element,\n.mat-fab.mat-primary .mat-ripple-element,\n.mat-mini-fab.mat-primary .mat-ripple-element {\n  background-color: rgba(255, 255, 255, 0.1);\n}\n.mat-flat-button.mat-accent .mat-ripple-element,\n.mat-raised-button.mat-accent .mat-ripple-element,\n.mat-fab.mat-accent .mat-ripple-element,\n.mat-mini-fab.mat-accent .mat-ripple-element {\n  background-color: rgba(255, 255, 255, 0.1);\n}\n.mat-flat-button.mat-warn .mat-ripple-element,\n.mat-raised-button.mat-warn .mat-ripple-element,\n.mat-fab.mat-warn .mat-ripple-element,\n.mat-mini-fab.mat-warn .mat-ripple-element {\n  background-color: rgba(255, 255, 255, 0.1);\n}\n.mat-stroked-button:not([class*=mat-elevation-z]),\n.mat-flat-button:not([class*=mat-elevation-z]) {\n  box-shadow: 0px 0px 0px 0px rgba(0, 0, 0, 0.2), 0px 0px 0px 0px rgba(0, 0, 0, 0.14), 0px 0px 0px 0px rgba(0, 0, 0, 0.12);\n}\n.mat-raised-button:not([class*=mat-elevation-z]) {\n  box-shadow: 0px 3px 1px -2px rgba(0, 0, 0, 0.2), 0px 2px 2px 0px rgba(0, 0, 0, 0.14), 0px 1px 5px 0px rgba(0, 0, 0, 0.12);\n}\n.mat-raised-button:not([disabled]):active:not([class*=mat-elevation-z]) {\n  box-shadow: 0px 5px 5px -3px rgba(0, 0, 0, 0.2), 0px 8px 10px 1px rgba(0, 0, 0, 0.14), 0px 3px 14px 2px rgba(0, 0, 0, 0.12);\n}\n.mat-raised-button[disabled]:not([class*=mat-elevation-z]) {\n  box-shadow: 0px 0px 0px 0px rgba(0, 0, 0, 0.2), 0px 0px 0px 0px rgba(0, 0, 0, 0.14), 0px 0px 0px 0px rgba(0, 0, 0, 0.12);\n}\n.mat-fab:not([class*=mat-elevation-z]),\n.mat-mini-fab:not([class*=mat-elevation-z]) {\n  box-shadow: 0px 3px 5px -1px rgba(0, 0, 0, 0.2), 0px 6px 10px 0px rgba(0, 0, 0, 0.14), 0px 1px 18px 0px rgba(0, 0, 0, 0.12);\n}\n.mat-fab:not([disabled]):active:not([class*=mat-elevation-z]),\n.mat-mini-fab:not([disabled]):active:not([class*=mat-elevation-z]) {\n  box-shadow: 0px 7px 8px -4px rgba(0, 0, 0, 0.2), 0px 12px 17px 2px rgba(0, 0, 0, 0.14), 0px 5px 22px 4px rgba(0, 0, 0, 0.12);\n}\n.mat-fab[disabled]:not([class*=mat-elevation-z]),\n.mat-mini-fab[disabled]:not([class*=mat-elevation-z]) {\n  box-shadow: 0px 0px 0px 0px rgba(0, 0, 0, 0.2), 0px 0px 0px 0px rgba(0, 0, 0, 0.14), 0px 0px 0px 0px rgba(0, 0, 0, 0.12);\n}\n.mat-button-toggle-standalone,\n.mat-button-toggle-group {\n  box-shadow: 0px 3px 1px -2px rgba(0, 0, 0, 0.2), 0px 2px 2px 0px rgba(0, 0, 0, 0.14), 0px 1px 5px 0px rgba(0, 0, 0, 0.12);\n}\n.mat-button-toggle-standalone.mat-button-toggle-appearance-standard,\n.mat-button-toggle-group-appearance-standard {\n  box-shadow: none;\n}\n.mat-button-toggle {\n  color: rgba(0, 0, 0, 0.38);\n}\n.mat-button-toggle .mat-button-toggle-focus-overlay {\n  background-color: rgba(0, 0, 0, 0.12);\n}\n.mat-button-toggle-appearance-standard {\n  color: rgba(0, 0, 0, 0.87);\n  background: #fff;\n}\n.mat-button-toggle-appearance-standard .mat-button-toggle-focus-overlay {\n  background-color: #000;\n}\n.mat-button-toggle-group-appearance-standard .mat-button-toggle + .mat-button-toggle {\n  border-left: solid 1px rgba(0, 0, 0, 0.12);\n}\n[dir=rtl] .mat-button-toggle-group-appearance-standard .mat-button-toggle + .mat-button-toggle {\n  border-left: none;\n  border-right: solid 1px rgba(0, 0, 0, 0.12);\n}\n.mat-button-toggle-group-appearance-standard.mat-button-toggle-vertical .mat-button-toggle + .mat-button-toggle {\n  border-left: none;\n  border-right: none;\n  border-top: solid 1px rgba(0, 0, 0, 0.12);\n}\n.mat-button-toggle-checked {\n  background-color: #e0e0e0;\n  color: rgba(0, 0, 0, 0.54);\n}\n.mat-button-toggle-checked.mat-button-toggle-appearance-standard {\n  color: rgba(0, 0, 0, 0.87);\n}\n.mat-button-toggle-disabled {\n  color: rgba(0, 0, 0, 0.26);\n  background-color: #eee;\n}\n.mat-button-toggle-disabled.mat-button-toggle-appearance-standard {\n  background: #fff;\n}\n.mat-button-toggle-disabled.mat-button-toggle-checked {\n  background-color: #bdbdbd;\n}\n.mat-button-toggle-standalone.mat-button-toggle-appearance-standard,\n.mat-button-toggle-group-appearance-standard {\n  border: solid 1px rgba(0, 0, 0, 0.12);\n}\n.mat-card {\n  background: #fff;\n  color: rgba(0, 0, 0, 0.87);\n}\n.mat-card:not([class*=mat-elevation-z]) {\n  box-shadow: 0px 2px 1px -1px rgba(0, 0, 0, 0.2), 0px 1px 1px 0px rgba(0, 0, 0, 0.14), 0px 1px 3px 0px rgba(0, 0, 0, 0.12);\n}\n.mat-card.mat-card-flat:not([class*=mat-elevation-z]) {\n  box-shadow: 0px 0px 0px 0px rgba(0, 0, 0, 0.2), 0px 0px 0px 0px rgba(0, 0, 0, 0.14), 0px 0px 0px 0px rgba(0, 0, 0, 0.12);\n}\n.mat-card-subtitle {\n  color: rgba(0, 0, 0, 0.54);\n}\n.mat-checkbox-frame {\n  border-color: rgba(0, 0, 0, 0.54);\n}\n.mat-checkbox-checkmark {\n  fill: #fafafa;\n}\n.mat-checkbox-checkmark-path {\n  stroke: #fafafa !important;\n}\n.mat-checkbox-mixedmark {\n  background-color: #fafafa;\n}\n.mat-checkbox-indeterminate.mat-primary .mat-checkbox-background,\n.mat-checkbox-checked.mat-primary .mat-checkbox-background {\n  background-color: #3f51b5;\n}\n.mat-checkbox-indeterminate.mat-accent .mat-checkbox-background,\n.mat-checkbox-checked.mat-accent .mat-checkbox-background {\n  background-color: #ff4081;\n}\n.mat-checkbox-indeterminate.mat-warn .mat-checkbox-background,\n.mat-checkbox-checked.mat-warn .mat-checkbox-background {\n  background-color: #f44336;\n}\n.mat-checkbox-disabled.mat-checkbox-checked .mat-checkbox-background,\n.mat-checkbox-disabled.mat-checkbox-indeterminate .mat-checkbox-background {\n  background-color: #b0b0b0;\n}\n.mat-checkbox-disabled:not(.mat-checkbox-checked) .mat-checkbox-frame {\n  border-color: #b0b0b0;\n}\n.mat-checkbox-disabled .mat-checkbox-label {\n  color: rgba(0, 0, 0, 0.54);\n}\n.mat-checkbox .mat-ripple-element {\n  background-color: #000;\n}\n.mat-checkbox-checked:not(.mat-checkbox-disabled).mat-primary .mat-ripple-element,\n.mat-checkbox:active:not(.mat-checkbox-disabled).mat-primary .mat-ripple-element {\n  background: #3f51b5;\n}\n.mat-checkbox-checked:not(.mat-checkbox-disabled).mat-accent .mat-ripple-element,\n.mat-checkbox:active:not(.mat-checkbox-disabled).mat-accent .mat-ripple-element {\n  background: #ff4081;\n}\n.mat-checkbox-checked:not(.mat-checkbox-disabled).mat-warn .mat-ripple-element,\n.mat-checkbox:active:not(.mat-checkbox-disabled).mat-warn .mat-ripple-element {\n  background: #f44336;\n}\n.mat-chip.mat-standard-chip {\n  background-color: #e0e0e0;\n  color: rgba(0, 0, 0, 0.87);\n}\n.mat-chip.mat-standard-chip .mat-chip-remove {\n  color: rgba(0, 0, 0, 0.87);\n  opacity: 0.4;\n}\n.mat-chip.mat-standard-chip:not(.mat-chip-disabled):active {\n  box-shadow: 0px 3px 3px -2px rgba(0, 0, 0, 0.2), 0px 3px 4px 0px rgba(0, 0, 0, 0.14), 0px 1px 8px 0px rgba(0, 0, 0, 0.12);\n}\n.mat-chip.mat-standard-chip:not(.mat-chip-disabled) .mat-chip-remove:hover {\n  opacity: 0.54;\n}\n.mat-chip.mat-standard-chip.mat-chip-disabled {\n  opacity: 0.4;\n}\n.mat-chip.mat-standard-chip::after {\n  background: #000;\n}\n.mat-chip.mat-standard-chip.mat-chip-selected.mat-primary {\n  background-color: #3f51b5;\n  color: #fff;\n}\n.mat-chip.mat-standard-chip.mat-chip-selected.mat-primary .mat-chip-remove {\n  color: #fff;\n  opacity: 0.4;\n}\n.mat-chip.mat-standard-chip.mat-chip-selected.mat-primary .mat-ripple-element {\n  background-color: rgba(255, 255, 255, 0.1);\n}\n.mat-chip.mat-standard-chip.mat-chip-selected.mat-warn {\n  background-color: #f44336;\n  color: #fff;\n}\n.mat-chip.mat-standard-chip.mat-chip-selected.mat-warn .mat-chip-remove {\n  color: #fff;\n  opacity: 0.4;\n}\n.mat-chip.mat-standard-chip.mat-chip-selected.mat-warn .mat-ripple-element {\n  background-color: rgba(255, 255, 255, 0.1);\n}\n.mat-chip.mat-standard-chip.mat-chip-selected.mat-accent {\n  background-color: #ff4081;\n  color: #fff;\n}\n.mat-chip.mat-standard-chip.mat-chip-selected.mat-accent .mat-chip-remove {\n  color: #fff;\n  opacity: 0.4;\n}\n.mat-chip.mat-standard-chip.mat-chip-selected.mat-accent .mat-ripple-element {\n  background-color: rgba(255, 255, 255, 0.1);\n}\n.mat-table {\n  background: #fff;\n}\n.mat-table thead,\n.mat-table tbody,\n.mat-table tfoot,\nmat-header-row,\nmat-row,\nmat-footer-row,\n[mat-header-row],\n[mat-row],\n[mat-footer-row],\n.mat-table-sticky {\n  background: inherit;\n}\nmat-row,\nmat-header-row,\nmat-footer-row,\nth.mat-header-cell,\ntd.mat-cell,\ntd.mat-footer-cell {\n  border-bottom-color: rgba(0, 0, 0, 0.12);\n}\n.mat-header-cell {\n  color: rgba(0, 0, 0, 0.54);\n}\n.mat-cell,\n.mat-footer-cell {\n  color: rgba(0, 0, 0, 0.87);\n}\n.mat-calendar-arrow {\n  border-top-color: rgba(0, 0, 0, 0.54);\n}\n.mat-datepicker-toggle,\n.mat-datepicker-content .mat-calendar-next-button,\n.mat-datepicker-content .mat-calendar-previous-button {\n  color: rgba(0, 0, 0, 0.54);\n}\n.mat-calendar-table-header {\n  color: rgba(0, 0, 0, 0.38);\n}\n.mat-calendar-table-header-divider::after {\n  background: rgba(0, 0, 0, 0.12);\n}\n.mat-calendar-body-label {\n  color: rgba(0, 0, 0, 0.54);\n}\n.mat-calendar-body-cell-content {\n  color: rgba(0, 0, 0, 0.87);\n  border-color: transparent;\n}\n.mat-calendar-body-disabled > .mat-calendar-body-cell-content:not(.mat-calendar-body-selected) {\n  color: rgba(0, 0, 0, 0.38);\n}\n.mat-calendar-body-cell:not(.mat-calendar-body-disabled):hover > .mat-calendar-body-cell-content:not(.mat-calendar-body-selected),\n.cdk-keyboard-focused .mat-calendar-body-active > .mat-calendar-body-cell-content:not(.mat-calendar-body-selected),\n.cdk-program-focused .mat-calendar-body-active > .mat-calendar-body-cell-content:not(.mat-calendar-body-selected) {\n  background-color: rgba(0, 0, 0, 0.04);\n}\n.mat-calendar-body-today:not(.mat-calendar-body-selected) {\n  border-color: rgba(0, 0, 0, 0.38);\n}\n.mat-calendar-body-disabled > .mat-calendar-body-today:not(.mat-calendar-body-selected) {\n  border-color: rgba(0, 0, 0, 0.18);\n}\n.mat-calendar-body-selected {\n  background-color: #3f51b5;\n  color: #fff;\n}\n.mat-calendar-body-disabled > .mat-calendar-body-selected {\n  background-color: rgba(63, 81, 181, 0.4);\n}\n.mat-calendar-body-today.mat-calendar-body-selected {\n  box-shadow: inset 0 0 0 1px #fff;\n}\n.mat-datepicker-content {\n  box-shadow: 0px 2px 4px -1px rgba(0, 0, 0, 0.2), 0px 4px 5px 0px rgba(0, 0, 0, 0.14), 0px 1px 10px 0px rgba(0, 0, 0, 0.12);\n  background-color: #fff;\n  color: rgba(0, 0, 0, 0.87);\n}\n.mat-datepicker-content.mat-accent .mat-calendar-body-selected {\n  background-color: #ff4081;\n  color: #fff;\n}\n.mat-datepicker-content.mat-accent .mat-calendar-body-disabled > .mat-calendar-body-selected {\n  background-color: rgba(255, 64, 129, 0.4);\n}\n.mat-datepicker-content.mat-accent .mat-calendar-body-today.mat-calendar-body-selected {\n  box-shadow: inset 0 0 0 1px #fff;\n}\n.mat-datepicker-content.mat-warn .mat-calendar-body-selected {\n  background-color: #f44336;\n  color: #fff;\n}\n.mat-datepicker-content.mat-warn .mat-calendar-body-disabled > .mat-calendar-body-selected {\n  background-color: rgba(244, 67, 54, 0.4);\n}\n.mat-datepicker-content.mat-warn .mat-calendar-body-today.mat-calendar-body-selected {\n  box-shadow: inset 0 0 0 1px #fff;\n}\n.mat-datepicker-content-touch {\n  box-shadow: 0px 0px 0px 0px rgba(0, 0, 0, 0.2), 0px 0px 0px 0px rgba(0, 0, 0, 0.14), 0px 0px 0px 0px rgba(0, 0, 0, 0.12);\n}\n.mat-datepicker-toggle-active {\n  color: #3f51b5;\n}\n.mat-datepicker-toggle-active.mat-accent {\n  color: #ff4081;\n}\n.mat-datepicker-toggle-active.mat-warn {\n  color: #f44336;\n}\n.mat-dialog-container {\n  box-shadow: 0px 11px 15px -7px rgba(0, 0, 0, 0.2), 0px 24px 38px 3px rgba(0, 0, 0, 0.14), 0px 9px 46px 8px rgba(0, 0, 0, 0.12);\n  background: #fff;\n  color: rgba(0, 0, 0, 0.87);\n}\n.mat-divider {\n  border-top-color: rgba(0, 0, 0, 0.12);\n}\n.mat-divider-vertical {\n  border-right-color: rgba(0, 0, 0, 0.12);\n}\n.mat-expansion-panel {\n  background: #fff;\n  color: rgba(0, 0, 0, 0.87);\n}\n.mat-expansion-panel:not([class*=mat-elevation-z]) {\n  box-shadow: 0px 3px 1px -2px rgba(0, 0, 0, 0.2), 0px 2px 2px 0px rgba(0, 0, 0, 0.14), 0px 1px 5px 0px rgba(0, 0, 0, 0.12);\n}\n.mat-action-row {\n  border-top-color: rgba(0, 0, 0, 0.12);\n}\n.mat-expansion-panel .mat-expansion-panel-header.cdk-keyboard-focused:not([aria-disabled=true]),\n.mat-expansion-panel .mat-expansion-panel-header.cdk-program-focused:not([aria-disabled=true]),\n.mat-expansion-panel:not(.mat-expanded) .mat-expansion-panel-header:hover:not([aria-disabled=true]) {\n  background: rgba(0, 0, 0, 0.04);\n}\n@media (hover: none) {\n  .mat-expansion-panel:not(.mat-expanded):not([aria-disabled=true]) .mat-expansion-panel-header:hover {\n    background: #fff;\n  }\n}\n.mat-expansion-panel-header-title {\n  color: rgba(0, 0, 0, 0.87);\n}\n.mat-expansion-panel-header-description,\n.mat-expansion-indicator::after {\n  color: rgba(0, 0, 0, 0.54);\n}\n.mat-expansion-panel-header[aria-disabled=true] {\n  color: rgba(0, 0, 0, 0.26);\n}\n.mat-expansion-panel-header[aria-disabled=true] .mat-expansion-panel-header-title,\n.mat-expansion-panel-header[aria-disabled=true] .mat-expansion-panel-header-description {\n  color: inherit;\n}\n.mat-form-field-label {\n  color: rgba(0, 0, 0, 0.6);\n}\n.mat-hint {\n  color: rgba(0, 0, 0, 0.6);\n}\n.mat-form-field.mat-focused .mat-form-field-label {\n  color: #3f51b5;\n}\n.mat-form-field.mat-focused .mat-form-field-label.mat-accent {\n  color: #ff4081;\n}\n.mat-form-field.mat-focused .mat-form-field-label.mat-warn {\n  color: #f44336;\n}\n.mat-focused .mat-form-field-required-marker {\n  color: #ff4081;\n}\n.mat-form-field-ripple {\n  background-color: rgba(0, 0, 0, 0.87);\n}\n.mat-form-field.mat-focused .mat-form-field-ripple {\n  background-color: #3f51b5;\n}\n.mat-form-field.mat-focused .mat-form-field-ripple.mat-accent {\n  background-color: #ff4081;\n}\n.mat-form-field.mat-focused .mat-form-field-ripple.mat-warn {\n  background-color: #f44336;\n}\n.mat-form-field-type-mat-native-select.mat-focused:not(.mat-form-field-invalid) .mat-form-field-infix::after {\n  color: #3f51b5;\n}\n.mat-form-field-type-mat-native-select.mat-focused:not(.mat-form-field-invalid).mat-accent .mat-form-field-infix::after {\n  color: #ff4081;\n}\n.mat-form-field-type-mat-native-select.mat-focused:not(.mat-form-field-invalid).mat-warn .mat-form-field-infix::after {\n  color: #f44336;\n}\n.mat-form-field.mat-form-field-invalid .mat-form-field-label {\n  color: #f44336;\n}\n.mat-form-field.mat-form-field-invalid .mat-form-field-label.mat-accent,\n.mat-form-field.mat-form-field-invalid .mat-form-field-label .mat-form-field-required-marker {\n  color: #f44336;\n}\n.mat-form-field.mat-form-field-invalid .mat-form-field-ripple,\n.mat-form-field.mat-form-field-invalid .mat-form-field-ripple.mat-accent {\n  background-color: #f44336;\n}\n.mat-error {\n  color: #f44336;\n}\n.mat-form-field-appearance-legacy .mat-form-field-label {\n  color: rgba(0, 0, 0, 0.54);\n}\n.mat-form-field-appearance-legacy .mat-hint {\n  color: rgba(0, 0, 0, 0.54);\n}\n.mat-form-field-appearance-legacy .mat-form-field-underline {\n  background-color: rgba(0, 0, 0, 0.42);\n}\n.mat-form-field-appearance-legacy.mat-form-field-disabled .mat-form-field-underline {\n  background-image: linear-gradient(to right, rgba(0, 0, 0, 0.42) 0%, rgba(0, 0, 0, 0.42) 33%, transparent 0%);\n  background-size: 4px 100%;\n  background-repeat: repeat-x;\n}\n.mat-form-field-appearance-standard .mat-form-field-underline {\n  background-color: rgba(0, 0, 0, 0.42);\n}\n.mat-form-field-appearance-standard.mat-form-field-disabled .mat-form-field-underline {\n  background-image: linear-gradient(to right, rgba(0, 0, 0, 0.42) 0%, rgba(0, 0, 0, 0.42) 33%, transparent 0%);\n  background-size: 4px 100%;\n  background-repeat: repeat-x;\n}\n.mat-form-field-appearance-fill .mat-form-field-flex {\n  background-color: rgba(0, 0, 0, 0.04);\n}\n.mat-form-field-appearance-fill.mat-form-field-disabled .mat-form-field-flex {\n  background-color: rgba(0, 0, 0, 0.02);\n}\n.mat-form-field-appearance-fill .mat-form-field-underline::before {\n  background-color: rgba(0, 0, 0, 0.42);\n}\n.mat-form-field-appearance-fill.mat-form-field-disabled .mat-form-field-label {\n  color: rgba(0, 0, 0, 0.38);\n}\n.mat-form-field-appearance-fill.mat-form-field-disabled .mat-form-field-underline::before {\n  background-color: transparent;\n}\n.mat-form-field-appearance-outline .mat-form-field-outline {\n  color: rgba(0, 0, 0, 0.12);\n}\n.mat-form-field-appearance-outline .mat-form-field-outline-thick {\n  color: rgba(0, 0, 0, 0.87);\n}\n.mat-form-field-appearance-outline.mat-focused .mat-form-field-outline-thick {\n  color: #3f51b5;\n}\n.mat-form-field-appearance-outline.mat-focused.mat-accent .mat-form-field-outline-thick {\n  color: #ff4081;\n}\n.mat-form-field-appearance-outline.mat-focused.mat-warn .mat-form-field-outline-thick {\n  color: #f44336;\n}\n.mat-form-field-appearance-outline.mat-form-field-invalid.mat-form-field-invalid .mat-form-field-outline-thick {\n  color: #f44336;\n}\n.mat-form-field-appearance-outline.mat-form-field-disabled .mat-form-field-label {\n  color: rgba(0, 0, 0, 0.38);\n}\n.mat-form-field-appearance-outline.mat-form-field-disabled .mat-form-field-outline {\n  color: rgba(0, 0, 0, 0.06);\n}\n.mat-icon.mat-primary {\n  color: #3f51b5;\n}\n.mat-icon.mat-accent {\n  color: #ff4081;\n}\n.mat-icon.mat-warn {\n  color: #f44336;\n}\n.mat-form-field-type-mat-native-select .mat-form-field-infix::after {\n  color: rgba(0, 0, 0, 0.54);\n}\n.mat-input-element:disabled,\n.mat-form-field-type-mat-native-select.mat-form-field-disabled .mat-form-field-infix::after {\n  color: rgba(0, 0, 0, 0.38);\n}\n.mat-input-element {\n  caret-color: #3f51b5;\n}\n.mat-input-element::placeholder {\n  color: rgba(0, 0, 0, 0.42);\n}\n.mat-input-element::-moz-placeholder {\n  color: rgba(0, 0, 0, 0.42);\n}\n.mat-input-element::-webkit-input-placeholder {\n  color: rgba(0, 0, 0, 0.42);\n}\n.mat-input-element:-ms-input-placeholder {\n  color: rgba(0, 0, 0, 0.42);\n}\n.mat-accent .mat-input-element {\n  caret-color: #ff4081;\n}\n.mat-warn .mat-input-element,\n.mat-form-field-invalid .mat-input-element {\n  caret-color: #f44336;\n}\n.mat-form-field-type-mat-native-select.mat-form-field-invalid .mat-form-field-infix::after {\n  color: #f44336;\n}\n.mat-list-base .mat-list-item {\n  color: rgba(0, 0, 0, 0.87);\n}\n.mat-list-base .mat-list-option {\n  color: rgba(0, 0, 0, 0.87);\n}\n.mat-list-base .mat-subheader {\n  color: rgba(0, 0, 0, 0.54);\n}\n.mat-list-item-disabled {\n  background-color: #eee;\n}\n.mat-list-option:hover,\n.mat-list-option:focus,\n.mat-nav-list .mat-list-item:hover,\n.mat-nav-list .mat-list-item:focus,\n.mat-action-list .mat-list-item:hover,\n.mat-action-list .mat-list-item:focus {\n  background: rgba(0, 0, 0, 0.04);\n}\n.mat-list-single-selected-option,\n.mat-list-single-selected-option:hover,\n.mat-list-single-selected-option:focus {\n  background: rgba(0, 0, 0, 0.12);\n}\n.mat-menu-panel {\n  background: #fff;\n}\n.mat-menu-panel:not([class*=mat-elevation-z]) {\n  box-shadow: 0px 2px 4px -1px rgba(0, 0, 0, 0.2), 0px 4px 5px 0px rgba(0, 0, 0, 0.14), 0px 1px 10px 0px rgba(0, 0, 0, 0.12);\n}\n.mat-menu-item {\n  background: transparent;\n  color: rgba(0, 0, 0, 0.87);\n}\n.mat-menu-item[disabled],\n.mat-menu-item[disabled]::after {\n  color: rgba(0, 0, 0, 0.38);\n}\n.mat-menu-item .mat-icon-no-color,\n.mat-menu-item-submenu-trigger::after {\n  color: rgba(0, 0, 0, 0.54);\n}\n.mat-menu-item:hover:not([disabled]),\n.mat-menu-item.cdk-program-focused:not([disabled]),\n.mat-menu-item.cdk-keyboard-focused:not([disabled]),\n.mat-menu-item-highlighted:not([disabled]) {\n  background: rgba(0, 0, 0, 0.04);\n}\n.mat-paginator {\n  background: #fff;\n}\n.mat-paginator,\n.mat-paginator-page-size .mat-select-trigger {\n  color: rgba(0, 0, 0, 0.54);\n}\n.mat-paginator-decrement,\n.mat-paginator-increment {\n  border-top: 2px solid rgba(0, 0, 0, 0.54);\n  border-right: 2px solid rgba(0, 0, 0, 0.54);\n}\n.mat-paginator-first,\n.mat-paginator-last {\n  border-top: 2px solid rgba(0, 0, 0, 0.54);\n}\n.mat-icon-button[disabled] .mat-paginator-decrement,\n.mat-icon-button[disabled] .mat-paginator-increment,\n.mat-icon-button[disabled] .mat-paginator-first,\n.mat-icon-button[disabled] .mat-paginator-last {\n  border-color: rgba(0, 0, 0, 0.38);\n}\n.mat-progress-bar-background {\n  fill: #c5cae9;\n}\n.mat-progress-bar-buffer {\n  background-color: #c5cae9;\n}\n.mat-progress-bar-fill::after {\n  background-color: #3f51b5;\n}\n.mat-progress-bar.mat-accent .mat-progress-bar-background {\n  fill: #ff80ab;\n}\n.mat-progress-bar.mat-accent .mat-progress-bar-buffer {\n  background-color: #ff80ab;\n}\n.mat-progress-bar.mat-accent .mat-progress-bar-fill::after {\n  background-color: #ff4081;\n}\n.mat-progress-bar.mat-warn .mat-progress-bar-background {\n  fill: #ffcdd2;\n}\n.mat-progress-bar.mat-warn .mat-progress-bar-buffer {\n  background-color: #ffcdd2;\n}\n.mat-progress-bar.mat-warn .mat-progress-bar-fill::after {\n  background-color: #f44336;\n}\n.mat-progress-spinner circle,\n.mat-spinner circle {\n  stroke: #3f51b5;\n}\n.mat-progress-spinner.mat-accent circle,\n.mat-spinner.mat-accent circle {\n  stroke: #ff4081;\n}\n.mat-progress-spinner.mat-warn circle,\n.mat-spinner.mat-warn circle {\n  stroke: #f44336;\n}\n.mat-radio-outer-circle {\n  border-color: rgba(0, 0, 0, 0.54);\n}\n.mat-radio-button.mat-primary.mat-radio-checked .mat-radio-outer-circle {\n  border-color: #3f51b5;\n}\n.mat-radio-button.mat-primary .mat-radio-inner-circle,\n.mat-radio-button.mat-primary .mat-radio-ripple .mat-ripple-element:not(.mat-radio-persistent-ripple),\n.mat-radio-button.mat-primary.mat-radio-checked .mat-radio-persistent-ripple,\n.mat-radio-button.mat-primary:active .mat-radio-persistent-ripple {\n  background-color: #3f51b5;\n}\n.mat-radio-button.mat-accent.mat-radio-checked .mat-radio-outer-circle {\n  border-color: #ff4081;\n}\n.mat-radio-button.mat-accent .mat-radio-inner-circle,\n.mat-radio-button.mat-accent .mat-radio-ripple .mat-ripple-element:not(.mat-radio-persistent-ripple),\n.mat-radio-button.mat-accent.mat-radio-checked .mat-radio-persistent-ripple,\n.mat-radio-button.mat-accent:active .mat-radio-persistent-ripple {\n  background-color: #ff4081;\n}\n.mat-radio-button.mat-warn.mat-radio-checked .mat-radio-outer-circle {\n  border-color: #f44336;\n}\n.mat-radio-button.mat-warn .mat-radio-inner-circle,\n.mat-radio-button.mat-warn .mat-radio-ripple .mat-ripple-element:not(.mat-radio-persistent-ripple),\n.mat-radio-button.mat-warn.mat-radio-checked .mat-radio-persistent-ripple,\n.mat-radio-button.mat-warn:active .mat-radio-persistent-ripple {\n  background-color: #f44336;\n}\n.mat-radio-button.mat-radio-disabled.mat-radio-checked .mat-radio-outer-circle,\n.mat-radio-button.mat-radio-disabled .mat-radio-outer-circle {\n  border-color: rgba(0, 0, 0, 0.38);\n}\n.mat-radio-button.mat-radio-disabled .mat-radio-ripple .mat-ripple-element,\n.mat-radio-button.mat-radio-disabled .mat-radio-inner-circle {\n  background-color: rgba(0, 0, 0, 0.38);\n}\n.mat-radio-button.mat-radio-disabled .mat-radio-label-content {\n  color: rgba(0, 0, 0, 0.38);\n}\n.mat-radio-button .mat-ripple-element {\n  background-color: #000;\n}\n.mat-select-value {\n  color: rgba(0, 0, 0, 0.87);\n}\n.mat-select-placeholder {\n  color: rgba(0, 0, 0, 0.42);\n}\n.mat-select-disabled .mat-select-value {\n  color: rgba(0, 0, 0, 0.38);\n}\n.mat-select-arrow {\n  color: rgba(0, 0, 0, 0.54);\n}\n.mat-select-panel {\n  background: #fff;\n}\n.mat-select-panel:not([class*=mat-elevation-z]) {\n  box-shadow: 0px 2px 4px -1px rgba(0, 0, 0, 0.2), 0px 4px 5px 0px rgba(0, 0, 0, 0.14), 0px 1px 10px 0px rgba(0, 0, 0, 0.12);\n}\n.mat-select-panel .mat-option.mat-selected:not(.mat-option-multiple) {\n  background: rgba(0, 0, 0, 0.12);\n}\n.mat-form-field.mat-focused.mat-primary .mat-select-arrow {\n  color: #3f51b5;\n}\n.mat-form-field.mat-focused.mat-accent .mat-select-arrow {\n  color: #ff4081;\n}\n.mat-form-field.mat-focused.mat-warn .mat-select-arrow {\n  color: #f44336;\n}\n.mat-form-field .mat-select.mat-select-invalid .mat-select-arrow {\n  color: #f44336;\n}\n.mat-form-field .mat-select.mat-select-disabled .mat-select-arrow {\n  color: rgba(0, 0, 0, 0.38);\n}\n.mat-drawer-container {\n  background-color: #fafafa;\n  color: rgba(0, 0, 0, 0.87);\n}\n.mat-drawer {\n  background-color: #fff;\n  color: rgba(0, 0, 0, 0.87);\n}\n.mat-drawer.mat-drawer-push {\n  background-color: #fff;\n}\n.mat-drawer:not(.mat-drawer-side) {\n  box-shadow: 0px 8px 10px -5px rgba(0, 0, 0, 0.2), 0px 16px 24px 2px rgba(0, 0, 0, 0.14), 0px 6px 30px 5px rgba(0, 0, 0, 0.12);\n}\n.mat-drawer-side {\n  border-right: solid 1px rgba(0, 0, 0, 0.12);\n}\n.mat-drawer-side.mat-drawer-end {\n  border-left: solid 1px rgba(0, 0, 0, 0.12);\n  border-right: none;\n}\n[dir=rtl] .mat-drawer-side {\n  border-left: solid 1px rgba(0, 0, 0, 0.12);\n  border-right: none;\n}\n[dir=rtl] .mat-drawer-side.mat-drawer-end {\n  border-left: none;\n  border-right: solid 1px rgba(0, 0, 0, 0.12);\n}\n.mat-drawer-backdrop.mat-drawer-shown {\n  background-color: rgba(0, 0, 0, 0.6);\n}\n.mat-slide-toggle.mat-checked .mat-slide-toggle-thumb {\n  background-color: #ff4081;\n}\n.mat-slide-toggle.mat-checked .mat-slide-toggle-bar {\n  background-color: rgba(255, 64, 129, 0.54);\n}\n.mat-slide-toggle.mat-checked .mat-ripple-element {\n  background-color: #ff4081;\n}\n.mat-slide-toggle.mat-primary.mat-checked .mat-slide-toggle-thumb {\n  background-color: #3f51b5;\n}\n.mat-slide-toggle.mat-primary.mat-checked .mat-slide-toggle-bar {\n  background-color: rgba(63, 81, 181, 0.54);\n}\n.mat-slide-toggle.mat-primary.mat-checked .mat-ripple-element {\n  background-color: #3f51b5;\n}\n.mat-slide-toggle.mat-warn.mat-checked .mat-slide-toggle-thumb {\n  background-color: #f44336;\n}\n.mat-slide-toggle.mat-warn.mat-checked .mat-slide-toggle-bar {\n  background-color: rgba(244, 67, 54, 0.54);\n}\n.mat-slide-toggle.mat-warn.mat-checked .mat-ripple-element {\n  background-color: #f44336;\n}\n.mat-slide-toggle:not(.mat-checked) .mat-ripple-element {\n  background-color: #000;\n}\n.mat-slide-toggle-thumb {\n  box-shadow: 0px 2px 1px -1px rgba(0, 0, 0, 0.2), 0px 1px 1px 0px rgba(0, 0, 0, 0.14), 0px 1px 3px 0px rgba(0, 0, 0, 0.12);\n  background-color: #fafafa;\n}\n.mat-slide-toggle-bar {\n  background-color: rgba(0, 0, 0, 0.38);\n}\n.mat-slider-track-background {\n  background-color: rgba(0, 0, 0, 0.26);\n}\n.mat-primary .mat-slider-track-fill,\n.mat-primary .mat-slider-thumb,\n.mat-primary .mat-slider-thumb-label {\n  background-color: #3f51b5;\n}\n.mat-primary .mat-slider-thumb-label-text {\n  color: #fff;\n}\n.mat-accent .mat-slider-track-fill,\n.mat-accent .mat-slider-thumb,\n.mat-accent .mat-slider-thumb-label {\n  background-color: #ff4081;\n}\n.mat-accent .mat-slider-thumb-label-text {\n  color: #fff;\n}\n.mat-warn .mat-slider-track-fill,\n.mat-warn .mat-slider-thumb,\n.mat-warn .mat-slider-thumb-label {\n  background-color: #f44336;\n}\n.mat-warn .mat-slider-thumb-label-text {\n  color: #fff;\n}\n.mat-slider-focus-ring {\n  background-color: rgba(255, 64, 129, 0.2);\n}\n.mat-slider:hover .mat-slider-track-background,\n.cdk-focused .mat-slider-track-background {\n  background-color: rgba(0, 0, 0, 0.38);\n}\n.mat-slider-disabled .mat-slider-track-background,\n.mat-slider-disabled .mat-slider-track-fill,\n.mat-slider-disabled .mat-slider-thumb {\n  background-color: rgba(0, 0, 0, 0.26);\n}\n.mat-slider-disabled:hover .mat-slider-track-background {\n  background-color: rgba(0, 0, 0, 0.26);\n}\n.mat-slider-min-value .mat-slider-focus-ring {\n  background-color: rgba(0, 0, 0, 0.12);\n}\n.mat-slider-min-value.mat-slider-thumb-label-showing .mat-slider-thumb,\n.mat-slider-min-value.mat-slider-thumb-label-showing .mat-slider-thumb-label {\n  background-color: rgba(0, 0, 0, 0.87);\n}\n.mat-slider-min-value.mat-slider-thumb-label-showing.cdk-focused .mat-slider-thumb,\n.mat-slider-min-value.mat-slider-thumb-label-showing.cdk-focused .mat-slider-thumb-label {\n  background-color: rgba(0, 0, 0, 0.26);\n}\n.mat-slider-min-value:not(.mat-slider-thumb-label-showing) .mat-slider-thumb {\n  border-color: rgba(0, 0, 0, 0.26);\n  background-color: transparent;\n}\n.mat-slider-min-value:not(.mat-slider-thumb-label-showing):hover .mat-slider-thumb,\n.mat-slider-min-value:not(.mat-slider-thumb-label-showing).cdk-focused .mat-slider-thumb {\n  border-color: rgba(0, 0, 0, 0.38);\n}\n.mat-slider-min-value:not(.mat-slider-thumb-label-showing):hover.mat-slider-disabled .mat-slider-thumb,\n.mat-slider-min-value:not(.mat-slider-thumb-label-showing).cdk-focused.mat-slider-disabled .mat-slider-thumb {\n  border-color: rgba(0, 0, 0, 0.26);\n}\n.mat-slider-has-ticks .mat-slider-wrapper::after {\n  border-color: rgba(0, 0, 0, 0.7);\n}\n.mat-slider-horizontal .mat-slider-ticks {\n  background-image: repeating-linear-gradient(to right, rgba(0, 0, 0, 0.7), rgba(0, 0, 0, 0.7) 2px, transparent 0, transparent);\n  background-image: -moz-repeating-linear-gradient(0.0001deg, rgba(0, 0, 0, 0.7), rgba(0, 0, 0, 0.7) 2px, transparent 0, transparent);\n}\n.mat-slider-vertical .mat-slider-ticks {\n  background-image: repeating-linear-gradient(to bottom, rgba(0, 0, 0, 0.7), rgba(0, 0, 0, 0.7) 2px, transparent 0, transparent);\n}\n.mat-step-header.cdk-keyboard-focused,\n.mat-step-header.cdk-program-focused,\n.mat-step-header:hover {\n  background-color: rgba(0, 0, 0, 0.04);\n}\n@media (hover: none) {\n  .mat-step-header:hover {\n    background: none;\n  }\n}\n.mat-step-header .mat-step-label,\n.mat-step-header .mat-step-optional {\n  color: rgba(0, 0, 0, 0.54);\n}\n.mat-step-header .mat-step-icon {\n  background-color: rgba(0, 0, 0, 0.54);\n  color: #fff;\n}\n.mat-step-header .mat-step-icon-selected,\n.mat-step-header .mat-step-icon-state-done,\n.mat-step-header .mat-step-icon-state-edit {\n  background-color: #3f51b5;\n  color: #fff;\n}\n.mat-step-header .mat-step-icon-state-error {\n  background-color: transparent;\n  color: #f44336;\n}\n.mat-step-header .mat-step-label.mat-step-label-active {\n  color: rgba(0, 0, 0, 0.87);\n}\n.mat-step-header .mat-step-label.mat-step-label-error {\n  color: #f44336;\n}\n.mat-stepper-horizontal,\n.mat-stepper-vertical {\n  background-color: #fff;\n}\n.mat-stepper-vertical-line::before {\n  border-left-color: rgba(0, 0, 0, 0.12);\n}\n.mat-horizontal-stepper-header::before,\n.mat-horizontal-stepper-header::after,\n.mat-stepper-horizontal-line {\n  border-top-color: rgba(0, 0, 0, 0.12);\n}\n.mat-sort-header-arrow {\n  color: #757575;\n}\n.mat-tab-nav-bar,\n.mat-tab-header {\n  border-bottom: 1px solid rgba(0, 0, 0, 0.12);\n}\n.mat-tab-group-inverted-header .mat-tab-nav-bar,\n.mat-tab-group-inverted-header .mat-tab-header {\n  border-top: 1px solid rgba(0, 0, 0, 0.12);\n  border-bottom: none;\n}\n.mat-tab-label,\n.mat-tab-link {\n  color: rgba(0, 0, 0, 0.87);\n}\n.mat-tab-label.mat-tab-disabled,\n.mat-tab-link.mat-tab-disabled {\n  color: rgba(0, 0, 0, 0.38);\n}\n.mat-tab-header-pagination-chevron {\n  border-color: rgba(0, 0, 0, 0.87);\n}\n.mat-tab-header-pagination-disabled .mat-tab-header-pagination-chevron {\n  border-color: rgba(0, 0, 0, 0.38);\n}\n.mat-tab-group[class*=mat-background-] .mat-tab-header,\n.mat-tab-nav-bar[class*=mat-background-] {\n  border-bottom: none;\n  border-top: none;\n}\n.mat-tab-group.mat-primary .mat-tab-label.cdk-keyboard-focused:not(.mat-tab-disabled),\n.mat-tab-group.mat-primary .mat-tab-label.cdk-program-focused:not(.mat-tab-disabled),\n.mat-tab-group.mat-primary .mat-tab-link.cdk-keyboard-focused:not(.mat-tab-disabled),\n.mat-tab-group.mat-primary .mat-tab-link.cdk-program-focused:not(.mat-tab-disabled),\n.mat-tab-nav-bar.mat-primary .mat-tab-label.cdk-keyboard-focused:not(.mat-tab-disabled),\n.mat-tab-nav-bar.mat-primary .mat-tab-label.cdk-program-focused:not(.mat-tab-disabled),\n.mat-tab-nav-bar.mat-primary .mat-tab-link.cdk-keyboard-focused:not(.mat-tab-disabled),\n.mat-tab-nav-bar.mat-primary .mat-tab-link.cdk-program-focused:not(.mat-tab-disabled) {\n  background-color: rgba(197, 202, 233, 0.3);\n}\n.mat-tab-group.mat-primary .mat-ink-bar,\n.mat-tab-nav-bar.mat-primary .mat-ink-bar {\n  background-color: #3f51b5;\n}\n.mat-tab-group.mat-primary.mat-background-primary .mat-ink-bar,\n.mat-tab-nav-bar.mat-primary.mat-background-primary .mat-ink-bar {\n  background-color: #fff;\n}\n.mat-tab-group.mat-accent .mat-tab-label.cdk-keyboard-focused:not(.mat-tab-disabled),\n.mat-tab-group.mat-accent .mat-tab-label.cdk-program-focused:not(.mat-tab-disabled),\n.mat-tab-group.mat-accent .mat-tab-link.cdk-keyboard-focused:not(.mat-tab-disabled),\n.mat-tab-group.mat-accent .mat-tab-link.cdk-program-focused:not(.mat-tab-disabled),\n.mat-tab-nav-bar.mat-accent .mat-tab-label.cdk-keyboard-focused:not(.mat-tab-disabled),\n.mat-tab-nav-bar.mat-accent .mat-tab-label.cdk-program-focused:not(.mat-tab-disabled),\n.mat-tab-nav-bar.mat-accent .mat-tab-link.cdk-keyboard-focused:not(.mat-tab-disabled),\n.mat-tab-nav-bar.mat-accent .mat-tab-link.cdk-program-focused:not(.mat-tab-disabled) {\n  background-color: rgba(255, 128, 171, 0.3);\n}\n.mat-tab-group.mat-accent .mat-ink-bar,\n.mat-tab-nav-bar.mat-accent .mat-ink-bar {\n  background-color: #ff4081;\n}\n.mat-tab-group.mat-accent.mat-background-accent .mat-ink-bar,\n.mat-tab-nav-bar.mat-accent.mat-background-accent .mat-ink-bar {\n  background-color: #fff;\n}\n.mat-tab-group.mat-warn .mat-tab-label.cdk-keyboard-focused:not(.mat-tab-disabled),\n.mat-tab-group.mat-warn .mat-tab-label.cdk-program-focused:not(.mat-tab-disabled),\n.mat-tab-group.mat-warn .mat-tab-link.cdk-keyboard-focused:not(.mat-tab-disabled),\n.mat-tab-group.mat-warn .mat-tab-link.cdk-program-focused:not(.mat-tab-disabled),\n.mat-tab-nav-bar.mat-warn .mat-tab-label.cdk-keyboard-focused:not(.mat-tab-disabled),\n.mat-tab-nav-bar.mat-warn .mat-tab-label.cdk-program-focused:not(.mat-tab-disabled),\n.mat-tab-nav-bar.mat-warn .mat-tab-link.cdk-keyboard-focused:not(.mat-tab-disabled),\n.mat-tab-nav-bar.mat-warn .mat-tab-link.cdk-program-focused:not(.mat-tab-disabled) {\n  background-color: rgba(255, 205, 210, 0.3);\n}\n.mat-tab-group.mat-warn .mat-ink-bar,\n.mat-tab-nav-bar.mat-warn .mat-ink-bar {\n  background-color: #f44336;\n}\n.mat-tab-group.mat-warn.mat-background-warn .mat-ink-bar,\n.mat-tab-nav-bar.mat-warn.mat-background-warn .mat-ink-bar {\n  background-color: #fff;\n}\n.mat-tab-group.mat-background-primary .mat-tab-label.cdk-keyboard-focused:not(.mat-tab-disabled),\n.mat-tab-group.mat-background-primary .mat-tab-label.cdk-program-focused:not(.mat-tab-disabled),\n.mat-tab-group.mat-background-primary .mat-tab-link.cdk-keyboard-focused:not(.mat-tab-disabled),\n.mat-tab-group.mat-background-primary .mat-tab-link.cdk-program-focused:not(.mat-tab-disabled),\n.mat-tab-nav-bar.mat-background-primary .mat-tab-label.cdk-keyboard-focused:not(.mat-tab-disabled),\n.mat-tab-nav-bar.mat-background-primary .mat-tab-label.cdk-program-focused:not(.mat-tab-disabled),\n.mat-tab-nav-bar.mat-background-primary .mat-tab-link.cdk-keyboard-focused:not(.mat-tab-disabled),\n.mat-tab-nav-bar.mat-background-primary .mat-tab-link.cdk-program-focused:not(.mat-tab-disabled) {\n  background-color: rgba(197, 202, 233, 0.3);\n}\n.mat-tab-group.mat-background-primary .mat-tab-header,\n.mat-tab-group.mat-background-primary .mat-tab-links,\n.mat-tab-group.mat-background-primary .mat-tab-header-pagination,\n.mat-tab-nav-bar.mat-background-primary .mat-tab-header,\n.mat-tab-nav-bar.mat-background-primary .mat-tab-links,\n.mat-tab-nav-bar.mat-background-primary .mat-tab-header-pagination {\n  background-color: #3f51b5;\n}\n.mat-tab-group.mat-background-primary .mat-tab-label,\n.mat-tab-group.mat-background-primary .mat-tab-link,\n.mat-tab-nav-bar.mat-background-primary .mat-tab-label,\n.mat-tab-nav-bar.mat-background-primary .mat-tab-link {\n  color: #fff;\n}\n.mat-tab-group.mat-background-primary .mat-tab-label.mat-tab-disabled,\n.mat-tab-group.mat-background-primary .mat-tab-link.mat-tab-disabled,\n.mat-tab-nav-bar.mat-background-primary .mat-tab-label.mat-tab-disabled,\n.mat-tab-nav-bar.mat-background-primary .mat-tab-link.mat-tab-disabled {\n  color: rgba(255, 255, 255, 0.4);\n}\n.mat-tab-group.mat-background-primary .mat-tab-header-pagination-chevron,\n.mat-tab-nav-bar.mat-background-primary .mat-tab-header-pagination-chevron {\n  border-color: #fff;\n}\n.mat-tab-group.mat-background-primary .mat-tab-header-pagination-disabled .mat-tab-header-pagination-chevron,\n.mat-tab-nav-bar.mat-background-primary .mat-tab-header-pagination-disabled .mat-tab-header-pagination-chevron {\n  border-color: rgba(255, 255, 255, 0.4);\n}\n.mat-tab-group.mat-background-primary .mat-ripple-element,\n.mat-tab-nav-bar.mat-background-primary .mat-ripple-element {\n  background-color: rgba(255, 255, 255, 0.12);\n}\n.mat-tab-group.mat-background-accent .mat-tab-label.cdk-keyboard-focused:not(.mat-tab-disabled),\n.mat-tab-group.mat-background-accent .mat-tab-label.cdk-program-focused:not(.mat-tab-disabled),\n.mat-tab-group.mat-background-accent .mat-tab-link.cdk-keyboard-focused:not(.mat-tab-disabled),\n.mat-tab-group.mat-background-accent .mat-tab-link.cdk-program-focused:not(.mat-tab-disabled),\n.mat-tab-nav-bar.mat-background-accent .mat-tab-label.cdk-keyboard-focused:not(.mat-tab-disabled),\n.mat-tab-nav-bar.mat-background-accent .mat-tab-label.cdk-program-focused:not(.mat-tab-disabled),\n.mat-tab-nav-bar.mat-background-accent .mat-tab-link.cdk-keyboard-focused:not(.mat-tab-disabled),\n.mat-tab-nav-bar.mat-background-accent .mat-tab-link.cdk-program-focused:not(.mat-tab-disabled) {\n  background-color: rgba(255, 128, 171, 0.3);\n}\n.mat-tab-group.mat-background-accent .mat-tab-header,\n.mat-tab-group.mat-background-accent .mat-tab-links,\n.mat-tab-group.mat-background-accent .mat-tab-header-pagination,\n.mat-tab-nav-bar.mat-background-accent .mat-tab-header,\n.mat-tab-nav-bar.mat-background-accent .mat-tab-links,\n.mat-tab-nav-bar.mat-background-accent .mat-tab-header-pagination {\n  background-color: #ff4081;\n}\n.mat-tab-group.mat-background-accent .mat-tab-label,\n.mat-tab-group.mat-background-accent .mat-tab-link,\n.mat-tab-nav-bar.mat-background-accent .mat-tab-label,\n.mat-tab-nav-bar.mat-background-accent .mat-tab-link {\n  color: #fff;\n}\n.mat-tab-group.mat-background-accent .mat-tab-label.mat-tab-disabled,\n.mat-tab-group.mat-background-accent .mat-tab-link.mat-tab-disabled,\n.mat-tab-nav-bar.mat-background-accent .mat-tab-label.mat-tab-disabled,\n.mat-tab-nav-bar.mat-background-accent .mat-tab-link.mat-tab-disabled {\n  color: rgba(255, 255, 255, 0.4);\n}\n.mat-tab-group.mat-background-accent .mat-tab-header-pagination-chevron,\n.mat-tab-nav-bar.mat-background-accent .mat-tab-header-pagination-chevron {\n  border-color: #fff;\n}\n.mat-tab-group.mat-background-accent .mat-tab-header-pagination-disabled .mat-tab-header-pagination-chevron,\n.mat-tab-nav-bar.mat-background-accent .mat-tab-header-pagination-disabled .mat-tab-header-pagination-chevron {\n  border-color: rgba(255, 255, 255, 0.4);\n}\n.mat-tab-group.mat-background-accent .mat-ripple-element,\n.mat-tab-nav-bar.mat-background-accent .mat-ripple-element {\n  background-color: rgba(255, 255, 255, 0.12);\n}\n.mat-tab-group.mat-background-warn .mat-tab-label.cdk-keyboard-focused:not(.mat-tab-disabled),\n.mat-tab-group.mat-background-warn .mat-tab-label.cdk-program-focused:not(.mat-tab-disabled),\n.mat-tab-group.mat-background-warn .mat-tab-link.cdk-keyboard-focused:not(.mat-tab-disabled),\n.mat-tab-group.mat-background-warn .mat-tab-link.cdk-program-focused:not(.mat-tab-disabled),\n.mat-tab-nav-bar.mat-background-warn .mat-tab-label.cdk-keyboard-focused:not(.mat-tab-disabled),\n.mat-tab-nav-bar.mat-background-warn .mat-tab-label.cdk-program-focused:not(.mat-tab-disabled),\n.mat-tab-nav-bar.mat-background-warn .mat-tab-link.cdk-keyboard-focused:not(.mat-tab-disabled),\n.mat-tab-nav-bar.mat-background-warn .mat-tab-link.cdk-program-focused:not(.mat-tab-disabled) {\n  background-color: rgba(255, 205, 210, 0.3);\n}\n.mat-tab-group.mat-background-warn .mat-tab-header,\n.mat-tab-group.mat-background-warn .mat-tab-links,\n.mat-tab-group.mat-background-warn .mat-tab-header-pagination,\n.mat-tab-nav-bar.mat-background-warn .mat-tab-header,\n.mat-tab-nav-bar.mat-background-warn .mat-tab-links,\n.mat-tab-nav-bar.mat-background-warn .mat-tab-header-pagination {\n  background-color: #f44336;\n}\n.mat-tab-group.mat-background-warn .mat-tab-label,\n.mat-tab-group.mat-background-warn .mat-tab-link,\n.mat-tab-nav-bar.mat-background-warn .mat-tab-label,\n.mat-tab-nav-bar.mat-background-warn .mat-tab-link {\n  color: #fff;\n}\n.mat-tab-group.mat-background-warn .mat-tab-label.mat-tab-disabled,\n.mat-tab-group.mat-background-warn .mat-tab-link.mat-tab-disabled,\n.mat-tab-nav-bar.mat-background-warn .mat-tab-label.mat-tab-disabled,\n.mat-tab-nav-bar.mat-background-warn .mat-tab-link.mat-tab-disabled {\n  color: rgba(255, 255, 255, 0.4);\n}\n.mat-tab-group.mat-background-warn .mat-tab-header-pagination-chevron,\n.mat-tab-nav-bar.mat-background-warn .mat-tab-header-pagination-chevron {\n  border-color: #fff;\n}\n.mat-tab-group.mat-background-warn .mat-tab-header-pagination-disabled .mat-tab-header-pagination-chevron,\n.mat-tab-nav-bar.mat-background-warn .mat-tab-header-pagination-disabled .mat-tab-header-pagination-chevron {\n  border-color: rgba(255, 255, 255, 0.4);\n}\n.mat-tab-group.mat-background-warn .mat-ripple-element,\n.mat-tab-nav-bar.mat-background-warn .mat-ripple-element {\n  background-color: rgba(255, 255, 255, 0.12);\n}\n.mat-toolbar {\n  background: #f5f5f5;\n  color: rgba(0, 0, 0, 0.87);\n}\n.mat-toolbar.mat-primary {\n  background: #3f51b5;\n  color: #fff;\n}\n.mat-toolbar.mat-accent {\n  background: #ff4081;\n  color: #fff;\n}\n.mat-toolbar.mat-warn {\n  background: #f44336;\n  color: #fff;\n}\n.mat-toolbar .mat-form-field-underline,\n.mat-toolbar .mat-form-field-ripple,\n.mat-toolbar .mat-focused .mat-form-field-ripple {\n  background-color: currentColor;\n}\n.mat-toolbar .mat-form-field-label,\n.mat-toolbar .mat-focused .mat-form-field-label,\n.mat-toolbar .mat-select-value,\n.mat-toolbar .mat-select-arrow,\n.mat-toolbar .mat-form-field.mat-focused .mat-select-arrow {\n  color: inherit;\n}\n.mat-toolbar .mat-input-element {\n  caret-color: currentColor;\n}\n.mat-tooltip {\n  background: rgba(97, 97, 97, 0.9);\n}\n.mat-tree {\n  background: #fff;\n}\n.mat-tree-node,\n.mat-nested-tree-node {\n  color: rgba(0, 0, 0, 0.87);\n}\n.mat-snack-bar-container {\n  color: rgba(255, 255, 255, 0.7);\n  background: #323232;\n  box-shadow: 0px 3px 5px -1px rgba(0, 0, 0, 0.2), 0px 6px 10px 0px rgba(0, 0, 0, 0.14), 0px 1px 18px 0px rgba(0, 0, 0, 0.12);\n}\n.mat-simple-snackbar-action {\n  color: #ff4081;\n}\n";
	styleInject(css_248z);

	var css_248z$1 = "@font-face {\n  font-family: 'Material Icons';\n  font-style: normal;\n  font-weight: 400;\n  src: url(https://fonts.gstatic.com/s/materialicons/v50/flUhRq6tzZclQEJ-Vdg-IuiaDsNcIhQ8tQ.woff2) format('woff2');\n}\n.material-icons {\n  font-family: 'Material Icons';\n  font-weight: normal;\n  font-style: normal;\n  font-size: 24px;\n  line-height: 1;\n  letter-spacing: normal;\n  text-transform: none;\n  display: inline-block;\n  white-space: nowrap;\n  word-wrap: normal;\n  direction: ltr;\n  font-feature-settings: 'liga';\n  -webkit-font-smoothing: antialiased;\n}\n.mat-expansion-panel-header-title .mat-icon {\n  margin-right: 10px;\n}\n.mat-expansion-panel-header-description {\n  justify-content: space-between;\n  align-items: center;\n}\n.schedulejs-console {\n  position: fixed !important;\n  top: 20px;\n  right: 20px;\n  width: 400px;\n  border-radius: 4px;\n  border: 1px solid #ebeef5;\n  color: #999;\n  user-select: none;\n}\n.schedulejs-console .schedulejs-console-title {\n  padding: 18px 20px;\n}\n";
	styleInject(css_248z$1);

	/**
	 * @file schedulejs - change cookie to proxy container
	 */
	if (!document.body.querySelector('.app-schedulejs')) {
	    const root = document.createElement('div');
	    root.className = 'app-schedulejs';
	    document.body.appendChild(root);
	}
	platformBrowserDynamic().bootstrapModule(AppModule$1);

}());
